begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|WALEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|BulkLoadDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|StoreDescriptor
import|;
end_import

begin_comment
comment|/**  * Reads and filters WAL entries, groups the filtered entries into batches, and puts the batches  * onto a queue  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
class|class
name|ReplicationSourceWALReader
extends|extends
name|Thread
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicationSourceWALReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|logQueue
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|WALEntryFilter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|ReplicationSource
name|source
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|WALEntryBatch
argument_list|>
name|entryBatchQueue
decl_stmt|;
comment|// max (heap) size of each batch - multiply by number of batches in queue to get total
specifier|private
specifier|final
name|long
name|replicationBatchSizeCapacity
decl_stmt|;
comment|// max count of each batch - multiply by number of batches in queue to get total
specifier|private
specifier|final
name|int
name|replicationBatchCountCapacity
decl_stmt|;
comment|// position in the WAL to start reading at
specifier|private
name|long
name|currentPosition
decl_stmt|;
specifier|private
specifier|final
name|long
name|sleepForRetries
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxRetriesMultiplier
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|eofAutoRecovery
decl_stmt|;
comment|//Indicates whether this particular worker is running
specifier|private
name|boolean
name|isReaderRunning
init|=
literal|true
decl_stmt|;
specifier|private
name|AtomicLong
name|totalBufferUsed
decl_stmt|;
specifier|private
name|long
name|totalBufferQuota
decl_stmt|;
comment|/**    * Creates a reader worker for a given WAL queue. Reads WAL entries off a given queue, batches the    * entries, and puts them on a batch queue.    * @param fs the files system to use    * @param conf configuration to use    * @param logQueue The WAL queue to read off of    * @param startPosition position in the first WAL to start reading from    * @param filter The filter to use while reading    * @param source replication source    */
specifier|public
name|ReplicationSourceWALReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|logQueue
parameter_list|,
name|long
name|startPosition
parameter_list|,
name|WALEntryFilter
name|filter
parameter_list|,
name|ReplicationSource
name|source
parameter_list|)
block|{
name|this
operator|.
name|logQueue
operator|=
name|logQueue
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|=
name|startPosition
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|replicationBatchSizeCapacity
operator|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"replication.source.size.capacity"
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|64
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationBatchCountCapacity
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.source.nb.capacity"
argument_list|,
literal|25000
argument_list|)
expr_stmt|;
comment|// memory used will be batchSizeCapacity * (nb.batches + 1)
comment|// the +1 is for the current thread reading before placing onto the queue
name|int
name|batchCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.source.nb.batches"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|this
operator|.
name|totalBufferUsed
operator|=
name|source
operator|.
name|getSourceManager
argument_list|()
operator|.
name|getTotalBufferUsed
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalBufferQuota
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SOURCE_TOTAL_BUFFER_KEY
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SOURCE_TOTAL_BUFFER_DFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleepForRetries
operator|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"replication.source.sleepforretries"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// 1 second
name|this
operator|.
name|maxRetriesMultiplier
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.source.maxretriesmultiplier"
argument_list|,
literal|300
argument_list|)
expr_stmt|;
comment|// 5 minutes @ 1 sec per
name|this
operator|.
name|eofAutoRecovery
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"replication.source.eof.autorecovery"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|entryBatchQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|batchCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peerClusterZnode="
operator|+
name|source
operator|.
name|getQueueId
argument_list|()
operator|+
literal|", ReplicationSourceWALReaderThread : "
operator|+
name|source
operator|.
name|getPeerId
argument_list|()
operator|+
literal|" inited, replicationBatchSizeCapacity="
operator|+
name|replicationBatchSizeCapacity
operator|+
literal|", replicationBatchCountCapacity="
operator|+
name|replicationBatchCountCapacity
operator|+
literal|", replicationBatchQueueCapacity="
operator|+
name|batchCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|sleepMultiplier
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|isReaderRunning
argument_list|()
condition|)
block|{
comment|// we only loop back here if something fatal happened to our stream
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|logQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|currentPosition
argument_list|,
name|source
operator|.
name|getWALFileLengthProvider
argument_list|()
argument_list|,
name|source
operator|.
name|getServerWALsBelongTo
argument_list|()
argument_list|,
name|source
operator|.
name|getSourceMetrics
argument_list|()
argument_list|)
init|)
block|{
while|while
condition|(
name|isReaderRunning
argument_list|()
condition|)
block|{
comment|// loop here to keep reusing stream while we can
if|if
condition|(
operator|!
name|source
operator|.
name|isPeerEnabled
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepForRetries
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|checkQuota
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|WALEntryBatch
name|batch
init|=
name|readWALEntries
argument_list|(
name|entryStream
argument_list|)
decl_stmt|;
name|currentPosition
operator|=
name|entryStream
operator|.
name|getPosition
argument_list|()
expr_stmt|;
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
comment|// need to propagate the batch even it has no entries since it may carry the last
comment|// sequence id information for serial replication.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Read {} WAL entries eligible for replication"
argument_list|,
name|batch
operator|.
name|getNbEntries
argument_list|()
argument_list|)
expr_stmt|;
name|entryBatchQueue
operator|.
name|put
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|sleepMultiplier
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// got no entries and didn't advance position in WAL
name|handleEmptyWALEntryBatch
argument_list|(
name|entryStream
operator|.
name|getCurrentPath
argument_list|()
argument_list|)
expr_stmt|;
name|entryStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// reuse stream
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// stream related
if|if
condition|(
name|sleepMultiplier
operator|<
name|maxRetriesMultiplier
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to read stream of replication entries: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|sleepMultiplier
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to read stream of replication entries"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|handleEofException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepForRetries
operator|*
name|sleepMultiplier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Interrupted while sleeping between WAL reads"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// returns true if we reach the size limit for batch, i.e, we need to finish the batch and return.
specifier|protected
specifier|final
name|boolean
name|addEntryToBatch
parameter_list|(
name|WALEntryBatch
name|batch
parameter_list|,
name|Entry
name|entry
parameter_list|)
block|{
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
if|if
condition|(
name|edit
operator|==
literal|null
operator|||
name|edit
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
name|entrySize
init|=
name|getEntrySizeIncludeBulkLoad
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|long
name|entrySizeExcludeBulkLoad
init|=
name|getEntrySizeExcludeBulkLoad
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|batch
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|updateBatchStats
argument_list|(
name|batch
argument_list|,
name|entry
argument_list|,
name|entrySize
argument_list|)
expr_stmt|;
name|boolean
name|totalBufferTooLarge
init|=
name|acquireBufferQuota
argument_list|(
name|entrySizeExcludeBulkLoad
argument_list|)
decl_stmt|;
comment|// Stop if too many entries or too big
return|return
name|totalBufferTooLarge
operator|||
name|batch
operator|.
name|getHeapSize
argument_list|()
operator|>=
name|replicationBatchSizeCapacity
operator|||
name|batch
operator|.
name|getNbEntries
argument_list|()
operator|>=
name|replicationBatchCountCapacity
return|;
block|}
specifier|protected
specifier|static
specifier|final
name|boolean
name|switched
parameter_list|(
name|WALEntryStream
name|entryStream
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|Path
name|newPath
init|=
name|entryStream
operator|.
name|getCurrentPath
argument_list|()
decl_stmt|;
return|return
name|newPath
operator|==
literal|null
operator|||
operator|!
name|path
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|newPath
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|WALEntryBatch
name|readWALEntries
parameter_list|(
name|WALEntryStream
name|entryStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|currentPath
init|=
name|entryStream
operator|.
name|getCurrentPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entryStream
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// check whether we have switched a file
if|if
condition|(
name|currentPath
operator|!=
literal|null
operator|&&
name|switched
argument_list|(
name|entryStream
argument_list|,
name|currentPath
argument_list|)
condition|)
block|{
return|return
name|WALEntryBatch
operator|.
name|endOfFile
argument_list|(
name|currentPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|currentPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|switched
argument_list|(
name|entryStream
argument_list|,
name|currentPath
argument_list|)
condition|)
block|{
return|return
name|WALEntryBatch
operator|.
name|endOfFile
argument_list|(
name|currentPath
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// when reading from the entry stream first time we will enter here
name|currentPath
operator|=
name|entryStream
operator|.
name|getCurrentPath
argument_list|()
expr_stmt|;
block|}
name|WALEntryBatch
name|batch
init|=
name|createBatch
argument_list|(
name|entryStream
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Entry
name|entry
init|=
name|entryStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|batch
operator|.
name|setLastWalPosition
argument_list|(
name|entryStream
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|=
name|filterEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|addEntryToBatch
argument_list|(
name|batch
argument_list|,
name|entry
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|boolean
name|hasNext
init|=
name|entryStream
operator|.
name|hasNext
argument_list|()
decl_stmt|;
comment|// always return if we have switched to a new file
if|if
condition|(
name|switched
argument_list|(
name|entryStream
argument_list|,
name|currentPath
argument_list|)
condition|)
block|{
name|batch
operator|.
name|setEndOfFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
break|break;
block|}
block|}
return|return
name|batch
return|;
block|}
specifier|private
name|void
name|handleEmptyWALEntryBatch
parameter_list|(
name|Path
name|currentPath
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Didn't read any new entries from WAL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isRecovered
argument_list|()
condition|)
block|{
comment|// we're done with queue recovery, shut ourself down
name|setReaderRunning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// shuts down shipper thread immediately
name|entryBatchQueue
operator|.
name|put
argument_list|(
name|WALEntryBatch
operator|.
name|NO_MORE_DATA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepForRetries
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we get an EOF due to a zero-length log, and there are other logs in queue
comment|// (highly likely we've closed the current log), we've hit the max retries, and autorecovery is
comment|// enabled, then dump the log
specifier|private
name|void
name|handleEofException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|instanceof
name|EOFException
operator|||
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|EOFException
operator|)
operator|&&
name|logQueue
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|this
operator|.
name|eofAutoRecovery
condition|)
block|{
try|try
block|{
if|if
condition|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|logQueue
operator|.
name|peek
argument_list|()
argument_list|)
operator|.
name|getLen
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Forcing removal of 0 length log in queue: "
operator|+
name|logQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|logQueue
operator|.
name|remove
argument_list|()
expr_stmt|;
name|currentPosition
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't get file length information about log "
operator|+
name|logQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Path
name|getCurrentPath
parameter_list|()
block|{
comment|// if we've read some WAL entries, get the Path we read from
name|WALEntryBatch
name|batchQueueHead
init|=
name|entryBatchQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|batchQueueHead
operator|!=
literal|null
condition|)
block|{
return|return
name|batchQueueHead
operator|.
name|getLastWalPath
argument_list|()
return|;
block|}
comment|// otherwise, we must be currently reading from the head of the log queue
return|return
name|logQueue
operator|.
name|peek
argument_list|()
return|;
block|}
comment|//returns false if we've already exceeded the global quota
specifier|private
name|boolean
name|checkQuota
parameter_list|()
block|{
comment|// try not to go over total quota
if|if
condition|(
name|totalBufferUsed
operator|.
name|get
argument_list|()
operator|>
name|totalBufferQuota
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepForRetries
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
specifier|final
name|WALEntryBatch
name|createBatch
parameter_list|(
name|WALEntryStream
name|entryStream
parameter_list|)
block|{
return|return
operator|new
name|WALEntryBatch
argument_list|(
name|replicationBatchCountCapacity
argument_list|,
name|entryStream
operator|.
name|getCurrentPath
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|Entry
name|filterEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|Entry
name|filtered
init|=
name|filter
operator|.
name|filter
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|filtered
operator|==
literal|null
condition|)
block|{
name|source
operator|.
name|getSourceMetrics
argument_list|()
operator|.
name|incrLogEditsFiltered
argument_list|()
expr_stmt|;
block|}
return|return
name|filtered
return|;
block|}
comment|/**    * Retrieves the next batch of WAL entries from the queue, waiting up to the specified time for a    * batch to become available    * @return A batch of entries, along with the position in the log after reading the batch    * @throws InterruptedException if interrupted while waiting    */
specifier|public
name|WALEntryBatch
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
return|return
name|entryBatchQueue
operator|.
name|take
argument_list|()
return|;
block|}
specifier|private
name|long
name|getEntrySizeIncludeBulkLoad
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|WALKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
return|return
name|edit
operator|.
name|heapSize
argument_list|()
operator|+
name|sizeOfStoreFilesIncludeBulkLoad
argument_list|(
name|edit
argument_list|)
operator|+
name|key
operator|.
name|estimatedSerializedSizeOf
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|getEntrySizeExcludeBulkLoad
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|WALKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
return|return
name|edit
operator|.
name|heapSize
argument_list|()
operator|+
name|key
operator|.
name|estimatedSerializedSizeOf
argument_list|()
return|;
block|}
specifier|private
name|void
name|updateBatchStats
parameter_list|(
name|WALEntryBatch
name|batch
parameter_list|,
name|Entry
name|entry
parameter_list|,
name|long
name|entrySize
parameter_list|)
block|{
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|batch
operator|.
name|incrementHeapSize
argument_list|(
name|entrySize
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|nbRowsAndHFiles
init|=
name|countDistinctRowKeysAndHFiles
argument_list|(
name|edit
argument_list|)
decl_stmt|;
name|batch
operator|.
name|incrementNbRowKeys
argument_list|(
name|nbRowsAndHFiles
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|batch
operator|.
name|incrementNbHFiles
argument_list|(
name|nbRowsAndHFiles
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Count the number of different row keys in the given edit because of mini-batching. We assume    * that there's at least one Cell in the WALEdit.    * @param edit edit to count row keys from    * @return number of different row keys and HFiles    */
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|countDistinctRowKeysAndHFiles
parameter_list|(
name|WALEdit
name|edit
parameter_list|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|edit
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|int
name|distinctRowKeys
init|=
literal|1
decl_stmt|;
name|int
name|totalHFileEntries
init|=
literal|0
decl_stmt|;
name|Cell
name|lastCell
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|totalCells
init|=
name|edit
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalCells
condition|;
name|i
operator|++
control|)
block|{
comment|// Count HFiles to be replicated
if|if
condition|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|WALEdit
operator|.
name|BULK_LOAD
argument_list|)
condition|)
block|{
try|try
block|{
name|BulkLoadDescriptor
name|bld
init|=
name|WALEdit
operator|.
name|getBulkLoadDescriptor
argument_list|(
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|stores
init|=
name|bld
operator|.
name|getStoresList
argument_list|()
decl_stmt|;
name|int
name|totalStores
init|=
name|stores
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|totalStores
condition|;
name|j
operator|++
control|)
block|{
name|totalHFileEntries
operator|+=
name|stores
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getStoreFileList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to deserialize bulk load entry from wal edit. "
operator|+
literal|"Then its hfiles count will not be added into metric."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|lastCell
argument_list|)
condition|)
block|{
name|distinctRowKeys
operator|++
expr_stmt|;
block|}
name|lastCell
operator|=
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|result
init|=
operator|new
name|Pair
argument_list|<>
argument_list|(
name|distinctRowKeys
argument_list|,
name|totalHFileEntries
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Calculate the total size of all the store files    * @param edit edit to count row keys from    * @return the total size of the store files    */
specifier|private
name|int
name|sizeOfStoreFilesIncludeBulkLoad
parameter_list|(
name|WALEdit
name|edit
parameter_list|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|edit
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|int
name|totalStoreFilesSize
init|=
literal|0
decl_stmt|;
name|int
name|totalCells
init|=
name|edit
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalCells
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|WALEdit
operator|.
name|BULK_LOAD
argument_list|)
condition|)
block|{
try|try
block|{
name|BulkLoadDescriptor
name|bld
init|=
name|WALEdit
operator|.
name|getBulkLoadDescriptor
argument_list|(
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|stores
init|=
name|bld
operator|.
name|getStoresList
argument_list|()
decl_stmt|;
name|int
name|totalStores
init|=
name|stores
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|totalStores
condition|;
name|j
operator|++
control|)
block|{
name|totalStoreFilesSize
operator|=
call|(
name|int
call|)
argument_list|(
name|totalStoreFilesSize
operator|+
name|stores
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getStoreFileSizeBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to deserialize bulk load entry from wal edit. "
operator|+
literal|"Size of HFiles part of cell will not be considered in replication "
operator|+
literal|"request size calculation."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|totalStoreFilesSize
return|;
block|}
comment|/**    * @param size delta size for grown buffer    * @return true if we should clear buffer and push all    */
specifier|private
name|boolean
name|acquireBufferQuota
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
name|totalBufferUsed
operator|.
name|addAndGet
argument_list|(
name|size
argument_list|)
operator|>=
name|totalBufferQuota
return|;
block|}
comment|/**    * @return whether the reader thread is running    */
specifier|public
name|boolean
name|isReaderRunning
parameter_list|()
block|{
return|return
name|isReaderRunning
operator|&&
operator|!
name|isInterrupted
argument_list|()
return|;
block|}
comment|/**    * @param readerRunning the readerRunning to set    */
specifier|public
name|void
name|setReaderRunning
parameter_list|(
name|boolean
name|readerRunning
parameter_list|)
block|{
name|this
operator|.
name|isReaderRunning
operator|=
name|readerRunning
expr_stmt|;
block|}
block|}
end_class

end_unit

