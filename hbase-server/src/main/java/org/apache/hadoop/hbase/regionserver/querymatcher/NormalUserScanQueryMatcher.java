begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanInfo
import|;
end_import

begin_comment
comment|/**  * Query matcher for normal user scan.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NormalUserScanQueryMatcher
extends|extends
name|UserScanQueryMatcher
block|{
comment|/** Keeps track of deletes */
specifier|private
specifier|final
name|DeleteTracker
name|deletes
decl_stmt|;
comment|/** True if we are doing a 'Get' Scan. Every Get is actually a one-row Scan. */
specifier|private
specifier|final
name|boolean
name|get
decl_stmt|;
comment|/** whether time range queries can see rows "behind" a delete */
specifier|private
specifier|final
name|boolean
name|seePastDeleteMarkers
decl_stmt|;
specifier|protected
name|NormalUserScanQueryMatcher
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|ColumnTracker
name|columns
parameter_list|,
name|boolean
name|hasNullColumn
parameter_list|,
name|DeleteTracker
name|deletes
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|,
name|long
name|now
parameter_list|)
block|{
name|super
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|columns
argument_list|,
name|hasNullColumn
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletes
operator|=
name|deletes
expr_stmt|;
name|this
operator|.
name|get
operator|=
name|scan
operator|.
name|isGetScan
argument_list|()
expr_stmt|;
name|this
operator|.
name|seePastDeleteMarkers
operator|=
name|scanInfo
operator|.
name|getKeepDeletedCells
argument_list|()
operator|!=
name|KeepDeletedCells
operator|.
name|FALSE
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MatchCode
name|match
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
return|return
name|MatchCode
operator|.
name|DONE_SCAN
return|;
block|}
name|MatchCode
name|returnCode
init|=
name|preCheck
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnCode
operator|!=
literal|null
condition|)
block|{
return|return
name|returnCode
return|;
block|}
name|long
name|timestamp
init|=
name|cell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|byte
name|typeByte
init|=
name|cell
operator|.
name|getTypeByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|typeByte
argument_list|)
condition|)
block|{
name|boolean
name|includeDeleteMarker
init|=
name|seePastDeleteMarkers
condition|?
name|tr
operator|.
name|withinTimeRange
argument_list|(
name|timestamp
argument_list|)
else|:
name|tr
operator|.
name|withinOrAfterTimeRange
argument_list|(
name|timestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeDeleteMarker
condition|)
block|{
name|this
operator|.
name|deletes
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
return|return
name|MatchCode
operator|.
name|SKIP
return|;
block|}
name|returnCode
operator|=
name|checkDeleted
argument_list|(
name|deletes
argument_list|,
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnCode
operator|!=
literal|null
condition|)
block|{
return|return
name|returnCode
return|;
block|}
return|return
name|matchColumn
argument_list|(
name|cell
argument_list|,
name|timestamp
argument_list|,
name|typeByte
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|deletes
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isGet
parameter_list|()
block|{
return|return
name|get
return|;
block|}
specifier|public
specifier|static
name|NormalUserScanQueryMatcher
name|create
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|ColumnTracker
name|columns
parameter_list|,
name|boolean
name|hasNullColumn
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|,
name|long
name|now
parameter_list|,
name|RegionCoprocessorHost
name|regionCoprocessorHost
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteTracker
name|deletes
init|=
name|instantiateDeleteTracker
argument_list|(
name|regionCoprocessorHost
argument_list|)
decl_stmt|;
if|if
condition|(
name|scan
operator|.
name|isReversed
argument_list|()
condition|)
block|{
return|return
operator|new
name|NormalUserScanQueryMatcher
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|columns
argument_list|,
name|hasNullColumn
argument_list|,
name|deletes
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|moreRowsMayExistsAfter
parameter_list|(
name|int
name|cmpToStopRow
parameter_list|)
block|{
return|return
name|cmpToStopRow
operator|>
literal|0
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|NormalUserScanQueryMatcher
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|columns
argument_list|,
name|hasNullColumn
argument_list|,
name|deletes
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

