begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|BACKUP_ATTEMPTS_PAUSE_MS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|BACKUP_MAX_ATTEMPTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|DEFAULT_BACKUP_ATTEMPTS_PAUSE_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|DEFAULT_BACKUP_MAX_ATTEMPTS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupCopyJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|master
operator|.
name|LogRollMasterProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * Full table backup implementation  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FullTableBackupClient
extends|extends
name|TableBackupClient
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FullTableBackupClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|FullTableBackupClient
parameter_list|(
specifier|final
name|Connection
name|conn
parameter_list|,
specifier|final
name|String
name|backupId
parameter_list|,
name|BackupRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conn
argument_list|,
name|backupId
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * Do snapshot copy.    * @param backupInfo backup info    * @throws Exception exception    */
specifier|private
name|void
name|snapshotCopy
parameter_list|(
name|BackupInfo
name|backupInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot copy is starting."
argument_list|)
expr_stmt|;
comment|// set overall backup phase: snapshot_copy
name|backupInfo
operator|.
name|setPhase
argument_list|(
name|BackupPhase
operator|.
name|SNAPSHOTCOPY
argument_list|)
expr_stmt|;
comment|// call ExportSnapshot to copy files based on hbase snapshot for backup
comment|// ExportSnapshot only support single snapshot export, need loop for multiple tables case
name|BackupCopyJob
name|copyService
init|=
name|BackupRestoreFactory
operator|.
name|getBackupCopyJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// number of snapshots matches number of tables
name|float
name|numOfSnapshots
init|=
name|backupInfo
operator|.
name|getSnapshotNames
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"There are "
operator|+
operator|(
name|int
operator|)
name|numOfSnapshots
operator|+
literal|" snapshots to be copied."
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|backupInfo
operator|.
name|getTables
argument_list|()
control|)
block|{
comment|// Currently we simply set the sub copy tasks by counting the table snapshot number, we can
comment|// calculate the real files' size for the percentage in the future.
comment|// backupCopier.setSubTaskPercntgInWholeTask(1f / numOfSnapshots);
name|int
name|res
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-snapshot"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|backupInfo
operator|.
name|getSnapshotName
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-copy-to"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
name|backupInfo
operator|.
name|getTableBackupDir
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copy snapshot "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" to "
operator|+
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|res
operator|=
name|copyService
operator|.
name|copy
argument_list|(
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|conf
argument_list|,
name|BackupType
operator|.
name|FULL
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|// if one snapshot export failed, do not continue for remained snapshots
if|if
condition|(
name|res
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exporting Snapshot "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" failed with return code: "
operator|+
name|res
operator|+
literal|"."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed of exporting snapshot "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" to "
operator|+
name|args
index|[
literal|3
index|]
operator|+
literal|" with reason code "
operator|+
name|res
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot copy "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" finished."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Backup request execution    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;
init|)
block|{
comment|// Begin BACKUP
name|beginBackup
argument_list|(
name|backupManager
argument_list|,
name|backupInfo
argument_list|)
expr_stmt|;
name|String
name|savedStartCode
init|=
literal|null
decl_stmt|;
name|boolean
name|firstBackup
init|=
literal|false
decl_stmt|;
comment|// do snapshot for full table backup
name|savedStartCode
operator|=
name|backupManager
operator|.
name|readBackupStartCode
argument_list|()
expr_stmt|;
name|firstBackup
operator|=
name|savedStartCode
operator|==
literal|null
operator|||
name|Long
operator|.
name|parseLong
argument_list|(
name|savedStartCode
argument_list|)
operator|==
literal|0L
expr_stmt|;
if|if
condition|(
name|firstBackup
condition|)
block|{
comment|// This is our first backup. Let's put some marker to system table so that we can hold the logs
comment|// while we do the backup.
name|backupManager
operator|.
name|writeBackupStartCode
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|// We roll log here before we do the snapshot. It is possible there is duplicate data
comment|// in the log that is already in the snapshot. But if we do it after the snapshot, we
comment|// could have data loss.
comment|// A better approach is to do the roll log on each RS in the same global procedure as
comment|// the snapshot.
name|LOG
operator|.
name|info
argument_list|(
literal|"Execute roll log procedure for full backup ..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"backupRoot"
argument_list|,
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|execProcedure
argument_list|(
name|LogRollMasterProcedureManager
operator|.
name|ROLLLOG_PROCEDURE_SIGNATURE
argument_list|,
name|LogRollMasterProcedureManager
operator|.
name|ROLLLOG_PROCEDURE_NAME
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|newTimestamps
operator|=
name|backupManager
operator|.
name|readRegionServerLastLogRollResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstBackup
condition|)
block|{
comment|// Updates registered log files
comment|// We record ALL old WAL files as registered, because
comment|// this is a first full backup in the system and these
comment|// files are not needed for next incremental backup
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
name|BackupUtils
operator|.
name|getWALFilesOlderThan
argument_list|(
name|conf
argument_list|,
name|newTimestamps
argument_list|)
decl_stmt|;
name|backupManager
operator|.
name|recordWALFiles
argument_list|(
name|logFiles
argument_list|)
expr_stmt|;
block|}
comment|// SNAPSHOT_TABLES:
name|backupInfo
operator|.
name|setPhase
argument_list|(
name|BackupPhase
operator|.
name|SNAPSHOT
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableList
control|)
block|{
name|String
name|snapshotName
init|=
literal|"snapshot_"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
operator|+
literal|"_"
operator|+
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
operator|+
literal|"_"
operator|+
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
decl_stmt|;
name|snapshotTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|backupInfo
operator|.
name|setSnapshotName
argument_list|(
name|tableName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
comment|// SNAPSHOT_COPY:
comment|// do snapshot copy
name|LOG
operator|.
name|debug
argument_list|(
literal|"snapshot copy for "
operator|+
name|backupId
argument_list|)
expr_stmt|;
name|snapshotCopy
argument_list|(
name|backupInfo
argument_list|)
expr_stmt|;
comment|// Updates incremental backup table set
name|backupManager
operator|.
name|addIncrementalBackupTableSet
argument_list|(
name|backupInfo
operator|.
name|getTables
argument_list|()
argument_list|)
expr_stmt|;
comment|// BACKUP_COMPLETE:
comment|// set overall backup status: complete. Here we make sure to complete the backup.
comment|// After this checkpoint, even if entering cancel process, will let the backup finished
name|backupInfo
operator|.
name|setState
argument_list|(
name|BackupState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// The table list in backupInfo is good for both full backup and incremental backup.
comment|// For incremental backup, it contains the incremental backup table set.
name|backupManager
operator|.
name|writeRegionServerLogTimestamp
argument_list|(
name|backupInfo
operator|.
name|getTables
argument_list|()
argument_list|,
name|newTimestamps
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|newTableSetTimestampMap
init|=
name|backupManager
operator|.
name|readLogTimestampMap
argument_list|()
decl_stmt|;
name|Long
name|newStartCode
init|=
name|BackupUtils
operator|.
name|getMinValue
argument_list|(
name|BackupUtils
operator|.
name|getRSLogTimestampMins
argument_list|(
name|newTableSetTimestampMap
argument_list|)
argument_list|)
decl_stmt|;
name|backupManager
operator|.
name|writeBackupStartCode
argument_list|(
name|newStartCode
argument_list|)
expr_stmt|;
comment|// backup complete
name|completeBackup
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|BackupType
operator|.
name|FULL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failBackup
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|e
argument_list|,
literal|"Unexpected BackupException : "
argument_list|,
name|BackupType
operator|.
name|FULL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|snapshotTable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxAttempts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|BACKUP_MAX_ATTEMPTS_KEY
argument_list|,
name|DEFAULT_BACKUP_MAX_ATTEMPTS
argument_list|)
decl_stmt|;
name|int
name|pause
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|BACKUP_ATTEMPTS_PAUSE_MS_KEY
argument_list|,
name|DEFAULT_BACKUP_ATTEMPTS_PAUSE_MS
argument_list|)
decl_stmt|;
name|int
name|attempts
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|attempts
operator|++
operator|<
name|maxAttempts
condition|)
block|{
try|try
block|{
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Snapshot attempt "
operator|+
name|attempts
operator|+
literal|" failed for table "
operator|+
name|tableName
operator|+
literal|", sleeping for "
operator|+
name|pause
operator|+
literal|"ms"
argument_list|,
name|ee
argument_list|)
expr_stmt|;
if|if
condition|(
name|attempts
operator|<
name|maxAttempts
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to snapshot table "
operator|+
name|tableName
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

