begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The MemStoreSegmentsIterator is designed to perform one iteration over given list of segments  * For another iteration new instance of MemStoreSegmentsIterator needs to be created  * The iterator is not thread-safe and must have only one instance per MemStore  * in each period of time  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|MemStoreSegmentsIterator
implements|implements
name|Iterator
argument_list|<
name|Cell
argument_list|>
block|{
comment|// scanner for full or partial pipeline (heap of segment scanners)
comment|// we need to keep those scanners in order to close them at the end
specifier|protected
name|KeyValueScanner
name|scanner
decl_stmt|;
specifier|protected
specifier|final
name|ScannerContext
name|scannerContext
decl_stmt|;
comment|// C-tor
specifier|public
name|MemStoreSegmentsIterator
parameter_list|(
name|List
argument_list|<
name|ImmutableSegment
argument_list|>
name|segments
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|int
name|compactionKVMax
parameter_list|,
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scannerContext
operator|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBatchLimit
argument_list|(
name|compactionKVMax
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// list of Scanners of segments in the pipeline, when compaction starts
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create the list of scanners to traverse over all the data
comment|// no dirty reads here as these are immutable segments
for|for
control|(
name|ImmutableSegment
name|segment
range|:
name|segments
control|)
block|{
name|scanners
operator|.
name|add
argument_list|(
name|segment
operator|.
name|getScanner
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|=
operator|new
name|MemStoreScanner
argument_list|(
name|comparator
argument_list|,
name|scanners
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
function_decl|;
block|}
end_class

end_unit

