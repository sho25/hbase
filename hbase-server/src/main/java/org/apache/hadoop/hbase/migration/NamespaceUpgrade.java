begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_comment
comment|/**  * Upgrades old 0.94 filesystem layout to namespace layout  * Does the following:  *  * - creates system namespace directory and move .META. table there  * renaming .META. table to hbase:meta,  * this in turn would require to re-encode the region directory name  *  *<p>The pre-0.96 paths and dir names are hardcoded in here.  */
end_comment

begin_class
specifier|public
class|class
name|NamespaceUpgrade
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NamespaceUpgrade
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|rootDir
decl_stmt|;
specifier|private
name|Path
name|sysNsDir
decl_stmt|;
specifier|private
name|Path
name|defNsDir
decl_stmt|;
specifier|private
name|Path
name|baseDirs
index|[]
decl_stmt|;
specifier|private
name|Path
name|backupDir
decl_stmt|;
comment|// First move everything to this tmp .data dir in case there is a table named 'data'
specifier|private
specifier|static
specifier|final
name|String
name|TMP_DATA_DIR
init|=
literal|".data"
decl_stmt|;
comment|// Old dir names to migrate.
specifier|private
specifier|static
specifier|final
name|String
name|DOT_LOGS
init|=
literal|".logs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOT_OLD_LOGS
init|=
literal|".oldlogs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOT_CORRUPT
init|=
literal|".corrupt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOT_SPLITLOG
init|=
literal|"splitlog"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOT_ARCHIVE
init|=
literal|".archive"
decl_stmt|;
comment|// The old default directory of hbase.dynamic.jars.dir(0.94.12 release).
specifier|private
specifier|static
specifier|final
name|String
name|DOT_LIB_DIR
init|=
literal|".lib"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OLD_ACL
init|=
literal|"_acl_"
decl_stmt|;
comment|/** Directories that are not HBase table directories */
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|NON_USER_TABLE_DIRS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|DOT_LOGS
block|,
name|DOT_OLD_LOGS
block|,
name|DOT_CORRUPT
block|,
name|DOT_SPLITLOG
block|,
name|HConstants
operator|.
name|HBCK_SIDELINEDIR_NAME
block|,
name|DOT_ARCHIVE
block|,
name|HConstants
operator|.
name|SNAPSHOT_DIR_NAME
block|,
name|HConstants
operator|.
name|HBASE_TEMP_DIRECTORY
block|,
name|TMP_DATA_DIR
block|,
name|OLD_ACL
block|,
name|DOT_LIB_DIR
block|}
argument_list|)
decl_stmt|;
specifier|public
name|NamespaceUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|rootDir
operator|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setFsDefault
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|tmpDataDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|TMP_DATA_DIR
argument_list|)
decl_stmt|;
name|sysNsDir
operator|=
operator|new
name|Path
argument_list|(
name|tmpDataDir
argument_list|,
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
expr_stmt|;
name|defNsDir
operator|=
operator|new
name|Path
argument_list|(
name|tmpDataDir
argument_list|,
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
argument_list|)
expr_stmt|;
name|baseDirs
operator|=
operator|new
name|Path
index|[]
block|{
name|rootDir
block|,
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HBASE_TEMP_DIRECTORY
argument_list|)
block|}
expr_stmt|;
name|backupDir
operator|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|MIGRATION_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|upgradeTableDirs
parameter_list|()
throws|throws
name|IOException
throws|,
name|DeserializationException
block|{
comment|// if new version is written then upgrade is done
if|if
condition|(
name|verifyNSUpgrade
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|)
condition|)
block|{
return|return;
block|}
name|makeNamespaceDirs
argument_list|()
expr_stmt|;
name|migrateTables
argument_list|()
expr_stmt|;
name|migrateSnapshots
argument_list|()
expr_stmt|;
name|migrateDotDirs
argument_list|()
expr_stmt|;
name|migrateMeta
argument_list|()
expr_stmt|;
name|migrateACL
argument_list|()
expr_stmt|;
name|deleteRoot
argument_list|()
expr_stmt|;
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove the -ROOT- dir. No longer of use.    * @throws IOException    */
specifier|public
name|void
name|deleteRoot
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
literal|"-ROOT-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|rootDir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed remove of "
operator|+
name|rootDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|rootDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Rename all the dot dirs -- .data, .archive, etc. -- as data, archive, etc.; i.e. minus the dot.    * @throws IOException    */
specifier|public
name|void
name|migrateDotDirs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Dot dirs to rename.  Leave the tmp dir named '.tmp' and snapshots as .hbase-snapshot.
specifier|final
name|Path
name|archiveDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
decl_stmt|;
name|Path
index|[]
index|[]
name|dirs
init|=
operator|new
name|Path
index|[]
index|[]
block|{
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|DOT_CORRUPT
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|CORRUPT_DIR_NAME
argument_list|)
block|}
block|,
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|DOT_LOGS
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
block|}
block|,
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|DOT_OLD_LOGS
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
block|}
block|,
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|TMP_DATA_DIR
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
block|}
block|,
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|DOT_LIB_DIR
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|LIB_DIR
argument_list|)
block|}
block|}
decl_stmt|;
for|for
control|(
name|Path
index|[]
name|dir
range|:
name|dirs
control|)
block|{
name|Path
name|src
init|=
name|dir
index|[
literal|0
index|]
decl_stmt|;
name|Path
name|tgt
init|=
name|dir
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Does not exist: "
operator|+
name|src
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|rename
argument_list|(
name|src
argument_list|,
name|tgt
argument_list|)
expr_stmt|;
block|}
comment|// Do the .archive dir.  Need to move its subdirs to the default ns dir under data dir... so
comment|// from '.archive/foo', to 'archive/data/default/foo'.
name|Path
name|oldArchiveDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|DOT_ARCHIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|oldArchiveDir
argument_list|)
condition|)
block|{
comment|// This is a pain doing two nn calls but portable over h1 and h2.
name|mkdirs
argument_list|(
name|archiveDir
argument_list|)
expr_stmt|;
name|Path
name|archiveDataDir
init|=
operator|new
name|Path
argument_list|(
name|archiveDir
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|archiveDataDir
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|oldArchiveDir
argument_list|,
operator|new
name|Path
argument_list|(
name|archiveDataDir
argument_list|,
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Update the system and user namespace dirs removing the dot in front of .data.
name|Path
name|dataDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
decl_stmt|;
name|sysNsDir
operator|=
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|,
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
expr_stmt|;
name|defNsDir
operator|=
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|,
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mkdirs
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed make of "
operator|+
name|p
argument_list|)
throw|;
block|}
specifier|private
name|void
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|tgt
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|tgt
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed move "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|tgt
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create the system and default namespaces dirs    * @throws IOException    */
specifier|public
name|void
name|makeNamespaceDirs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|sysNsDir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|sysNsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create system namespace dir: "
operator|+
name|sysNsDir
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|defNsDir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|defNsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create default namespace dir: "
operator|+
name|defNsDir
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Migrate all tables into respective namespaces, either default or system.  We put them into    * a temporary location, '.data', in case a user table is name 'data'.  In a later method we will    * move stuff from .data to data.    * @throws IOException    */
specifier|public
name|void
name|migrateTables
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sysTables
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"-ROOT-"
argument_list|,
literal|".META."
argument_list|,
literal|".META"
argument_list|)
decl_stmt|;
comment|// Migrate tables including archive and tmp
for|for
control|(
name|Path
name|baseDir
range|:
name|baseDirs
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|baseDir
argument_list|)
condition|)
continue|continue;
name|List
argument_list|<
name|Path
argument_list|>
name|oldTableDirs
init|=
name|FSUtils
operator|.
name|getLocalTableDirs
argument_list|(
name|fs
argument_list|,
name|baseDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|oldTableDir
range|:
name|oldTableDirs
control|)
block|{
if|if
condition|(
name|NON_USER_TABLE_DIRS
operator|.
name|contains
argument_list|(
name|oldTableDir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|sysTables
operator|.
name|contains
argument_list|(
name|oldTableDir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// Make the new directory under the ns to which we will move the table.
name|Path
name|nsDir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|defNsDir
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|oldTableDir
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|nsDir
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|nsDir
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create namespace dir "
operator|+
name|nsDir
operator|.
name|getParent
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sysTables
operator|.
name|indexOf
argument_list|(
name|oldTableDir
operator|.
name|getName
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating table "
operator|+
name|oldTableDir
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|nsDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|oldTableDir
argument_list|,
name|nsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to move "
operator|+
name|oldTableDir
operator|+
literal|" to namespace dir "
operator|+
name|nsDir
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|migrateSnapshots
parameter_list|()
throws|throws
name|IOException
block|{
comment|//migrate snapshot dir
name|Path
name|oldSnapshotDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|OLD_SNAPSHOT_DIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|newSnapshotDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|SNAPSHOT_DIR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|oldSnapshotDir
argument_list|)
condition|)
block|{
name|boolean
name|foundOldSnapshotDir
init|=
literal|false
decl_stmt|;
comment|// Logic to verify old snapshot dir culled from SnapshotManager
comment|// ignore all the snapshots in progress
name|FileStatus
index|[]
name|snapshots
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|oldSnapshotDir
argument_list|,
operator|new
name|SnapshotDescriptionUtils
operator|.
name|CompletedSnaphotDirectoriesFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
comment|// loop through all the completed snapshots
for|for
control|(
name|FileStatus
name|snapshot
range|:
name|snapshots
control|)
block|{
name|Path
name|info
init|=
operator|new
name|Path
argument_list|(
name|snapshot
operator|.
name|getPath
argument_list|()
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|SNAPSHOTINFO_FILE
argument_list|)
decl_stmt|;
comment|// if the snapshot is bad
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|foundOldSnapshotDir
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|foundOldSnapshotDir
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating snapshot dir"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|oldSnapshotDir
argument_list|,
name|newSnapshotDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to move old snapshot dir "
operator|+
name|oldSnapshotDir
operator|+
literal|" to new "
operator|+
name|newSnapshotDir
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|migrateMeta
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|newMetaDir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|sysNsDir
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|newMetaRegionDir
init|=
operator|new
name|Path
argument_list|(
name|newMetaDir
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|oldMetaDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|".META."
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|oldMetaDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating meta table "
operator|+
name|oldMetaDir
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|newMetaDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|oldMetaDir
argument_list|,
name|newMetaDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to migrate meta table "
operator|+
name|oldMetaDir
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|newMetaDir
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// on windows NTFS, meta's name is .META (note the missing dot at the end)
name|oldMetaDir
operator|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|".META"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|oldMetaDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating meta table "
operator|+
name|oldMetaDir
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|newMetaDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|oldMetaDir
argument_list|,
name|newMetaDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to migrate meta table "
operator|+
name|oldMetaDir
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|newMetaDir
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Since meta table name has changed rename meta region dir from it's old encoding to new one
name|Path
name|oldMetaRegionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|rootDir
argument_list|,
operator|new
name|Path
argument_list|(
name|newMetaDir
argument_list|,
literal|"1028785192"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|oldMetaRegionDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating meta region "
operator|+
name|oldMetaRegionDir
operator|+
literal|" to "
operator|+
name|newMetaRegionDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|oldMetaRegionDir
argument_list|,
name|newMetaRegionDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to migrate meta region "
operator|+
name|oldMetaRegionDir
operator|+
literal|" to "
operator|+
name|newMetaRegionDir
argument_list|)
throw|;
block|}
block|}
comment|// Remove .tableinfo files as they refer to ".META.".
comment|// They will be recreated by master on startup.
name|removeTableInfoInPre96Format
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|Path
name|oldRootDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"-ROOT-"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|oldRootDir
argument_list|,
name|backupDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to old data: "
operator|+
name|oldRootDir
operator|+
literal|" to "
operator|+
name|backupDir
argument_list|)
throw|;
block|}
block|}
comment|/**    * Removes .tableinfo files that are laid in pre-96 format (i.e., the tableinfo files are under    * table directory).    * @param tableName    * @throws IOException    */
specifier|private
name|void
name|removeTableInfoInPre96Format
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|,
name|TABLEINFO_PATHFILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|FileStatus
name|fStatus
range|:
name|status
control|)
block|{
name|FSUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|fStatus
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|migrateACL
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|oldTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|OLD_ACL
argument_list|)
decl_stmt|;
name|Path
name|oldTablePath
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|oldTableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|oldTablePath
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating ACL table"
argument_list|)
expr_stmt|;
name|TableName
name|newTableName
init|=
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
decl_stmt|;
name|Path
name|newTablePath
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|newTableName
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|oldDesc
init|=
name|readTableDescriptor
argument_list|(
name|fs
argument_list|,
name|getCurrentTableInfoStatus
argument_list|(
name|fs
argument_list|,
name|oldTablePath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FSTableDescriptors
operator|.
name|getTableInfoPath
argument_list|(
name|fs
argument_list|,
name|newTablePath
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating new tableDesc for ACL"
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|newDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|oldDesc
argument_list|)
decl_stmt|;
name|newDesc
operator|.
name|setName
argument_list|(
name|newTableName
argument_list|)
expr_stmt|;
operator|new
name|FSTableDescriptors
argument_list|(
name|this
operator|.
name|conf
argument_list|)
operator|.
name|createTableDescriptorForTableDirectory
argument_list|(
name|newTablePath
argument_list|,
name|newDesc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ServerName
name|fakeServer
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"nsupgrade"
argument_list|,
literal|96
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|String
name|metaLogName
init|=
name|HLogUtil
operator|.
name|getHLogDirectoryName
argument_list|(
name|fakeServer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|HLog
name|metaHLog
init|=
name|HLogFactory
operator|.
name|createMetaHLog
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|metaLogName
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
name|fakeServer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|HRegion
name|meta
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|rootDir
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|HTableDescriptor
operator|.
name|META_TABLEDESC
argument_list|,
name|metaHLog
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Path
name|regionDir
range|:
name|FSUtils
operator|.
name|getRegionDirs
argument_list|(
name|fs
argument_list|,
name|oldTablePath
argument_list|)
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating ACL region "
operator|+
name|regionDir
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|oldRegionInfo
init|=
name|HRegionFileSystem
operator|.
name|loadRegionInfoFileContent
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
name|HRegionInfo
name|newRegionInfo
init|=
operator|new
name|HRegionInfo
argument_list|(
name|newTableName
argument_list|,
name|oldRegionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|oldRegionInfo
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|oldRegionInfo
operator|.
name|isSplit
argument_list|()
argument_list|,
name|oldRegionInfo
operator|.
name|getRegionId
argument_list|()
argument_list|)
decl_stmt|;
name|newRegionInfo
operator|.
name|setOffline
argument_list|(
name|oldRegionInfo
operator|.
name|isOffline
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|=
operator|new
name|HRegion
argument_list|(
name|HRegionFileSystem
operator|.
name|openRegionFromFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|oldTablePath
argument_list|,
name|oldRegionInfo
argument_list|,
literal|false
argument_list|)
argument_list|,
name|metaHLog
argument_list|,
name|conf
argument_list|,
name|oldDesc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|updateAcls
argument_list|(
name|region
argument_list|)
expr_stmt|;
comment|// closing the region would flush it so we don't need an explicit flush to save
comment|// acl changes.
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Create new region dir
name|Path
name|newRegionDir
init|=
operator|new
name|Path
argument_list|(
name|newTablePath
argument_list|,
name|newRegionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|newRegionDir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|newRegionDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to create new region dir: "
operator|+
name|newRegionDir
argument_list|)
throw|;
block|}
block|}
comment|//create new region info file, delete in case one exists
name|HRegionFileSystem
operator|.
name|openRegionFromFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|newTablePath
argument_list|,
name|newRegionInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//migrate region contents
for|for
control|(
name|FileStatus
name|file
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|regionDir
argument_list|,
operator|new
name|FSUtils
operator|.
name|UserTableDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|newRegionDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to move file "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" to "
operator|+
name|newRegionDir
argument_list|)
throw|;
block|}
block|}
name|meta
operator|.
name|put
argument_list|(
name|MetaEditor
operator|.
name|makePutFromRegionInfo
argument_list|(
name|newRegionInfo
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|delete
argument_list|(
name|MetaEditor
operator|.
name|makeDeleteFromRegionInfo
argument_list|(
name|oldRegionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|meta
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|meta
operator|.
name|waitForFlushesAndCompactions
argument_list|()
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|metaHLog
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|oldTablePath
argument_list|,
name|backupDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to old data: "
operator|+
name|oldTablePath
operator|+
literal|" to "
operator|+
name|backupDir
argument_list|)
throw|;
block|}
block|}
comment|/**    * Deletes the old _acl_ entry, and inserts a new one using namespace.    * @param region    * @throws IOException    */
name|void
name|updateAcls
parameter_list|(
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|NamespaceUpgrade
operator|.
name|OLD_ACL
argument_list|)
decl_stmt|;
comment|// get the old _acl_ entry, if present.
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// create a put for new _acl_ entry with rowkey as hbase:acl
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|AccessControlLists
operator|.
name|ACL_GLOBAL_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|p
operator|.
name|addImmutable
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|c
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|c
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// delete the old entry
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
comment|// delete the old entry for '-ROOT-'
name|rowKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|OLD_ROOT_STR
argument_list|)
expr_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
comment|// rename .META. to hbase:meta
name|rowKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|OLD_META_STR
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// create a put for new .META. entry with rowkey as hbase:meta
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|p
operator|.
name|addImmutable
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|c
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|c
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// delete the old entry
name|del
operator|=
operator|new
name|Delete
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Culled from FSTableDescriptors
specifier|private
specifier|static
name|HTableDescriptor
name|readTableDescriptor
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|Ints
operator|.
name|checkedCast
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FSDataInputStream
name|fsDataInputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|fsDataInputStream
operator|.
name|readFully
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsDataInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|htd
operator|=
name|HTableDescriptor
operator|.
name|parseFrom
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"content="
operator|+
name|Bytes
operator|.
name|toShort
argument_list|(
name|content
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|htd
return|;
block|}
specifier|private
specifier|static
specifier|final
name|PathFilter
name|TABLEINFO_PATHFILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
comment|// Accept any file that starts with TABLEINFO_NAME
return|return
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|".tableinfo"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|static
specifier|final
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
name|TABLEINFO_FILESTATUS_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FileStatus
name|left
parameter_list|,
name|FileStatus
name|right
parameter_list|)
block|{
return|return
operator|-
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// logic culled from FSTableDescriptors
specifier|static
name|FileStatus
name|getCurrentTableInfoStatus
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|status
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|TABLEINFO_PATHFILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|length
operator|<
literal|1
condition|)
return|return
literal|null
return|;
name|FileStatus
name|mostCurrent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|status
control|)
block|{
if|if
condition|(
name|mostCurrent
operator|==
literal|null
operator|||
name|TABLEINFO_FILESTATUS_COMPARATOR
operator|.
name|compare
argument_list|(
name|file
argument_list|,
name|mostCurrent
argument_list|)
operator|<
literal|0
condition|)
block|{
name|mostCurrent
operator|=
name|file
expr_stmt|;
block|}
block|}
return|return
name|mostCurrent
return|;
block|}
specifier|public
specifier|static
name|boolean
name|verifyNSUpgrade
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|FSUtils
operator|.
name|getVersion
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|)
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to verify namespace upgrade"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
operator|||
operator|!
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"--upgrade"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage:<CMD> --upgrade"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|init
argument_list|()
expr_stmt|;
name|upgradeTableDirs
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

