begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Cellersion 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY CellIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * CellArrayMap is a simple array of Cells and cannot be allocated off-heap.  * As all java arrays CellArrayMap's array of references pointing to Cell objects.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CellArrayMap
extends|extends
name|CellFlatMap
block|{
specifier|private
specifier|final
name|Cell
index|[]
name|block
decl_stmt|;
comment|/* The Cells Array is created only when CellArrayMap is created, all sub-CellBlocks use    * boundary indexes. The given Cell array must be ordered. */
specifier|public
name|CellArrayMap
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|Cell
argument_list|>
name|comparator
parameter_list|,
name|Cell
index|[]
name|b
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|boolean
name|descending
parameter_list|)
block|{
name|super
argument_list|(
name|comparator
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|descending
argument_list|)
expr_stmt|;
name|this
operator|.
name|block
operator|=
name|b
expr_stmt|;
block|}
comment|/* To be used by base class only to create a sub-CellFlatMap */
annotation|@
name|Override
specifier|protected
name|CellFlatMap
name|createSubCellFlatMap
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|boolean
name|descending
parameter_list|)
block|{
return|return
operator|new
name|CellArrayMap
argument_list|(
name|comparator
argument_list|()
argument_list|,
name|this
operator|.
name|block
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|descending
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Cell
name|getCell
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
operator|(
name|i
operator|<
name|minCellIdx
operator|)
operator|&&
operator|(
name|i
operator|>=
name|maxCellIdx
operator|)
condition|)
return|return
literal|null
return|;
return|return
name|block
index|[
name|i
index|]
return|;
block|}
block|}
end_class

end_unit

