begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileScanner
import|;
end_import

begin_comment
comment|/**  * The mob file.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MobFile
block|{
specifier|private
name|StoreFile
name|sf
decl_stmt|;
comment|// internal use only for sub classes
specifier|protected
name|MobFile
parameter_list|()
block|{   }
specifier|protected
name|MobFile
parameter_list|(
name|StoreFile
name|sf
parameter_list|)
block|{
name|this
operator|.
name|sf
operator|=
name|sf
expr_stmt|;
block|}
comment|/**    * Internal use only. This is used by the sweeper.    *    * @return The store file scanner.    * @throws IOException    */
specifier|public
name|StoreFileScanner
name|getScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|sfs
operator|.
name|add
argument_list|(
name|sf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|sfScanners
init|=
name|StoreFileScanner
operator|.
name|getScannersForStoreFiles
argument_list|(
name|sfs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|sf
operator|.
name|getMaxMemstoreTS
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|sfScanners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Reads a cell from the mob file.    * @param search The cell need to be searched in the mob file.    * @param cacheMobBlocks Should this scanner cache blocks.    * @return The cell in the mob file.    * @throws IOException    */
specifier|public
name|Cell
name|readCell
parameter_list|(
name|Cell
name|search
parameter_list|,
name|boolean
name|cacheMobBlocks
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readCell
argument_list|(
name|search
argument_list|,
name|cacheMobBlocks
argument_list|,
name|sf
operator|.
name|getMaxMemstoreTS
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Reads a cell from the mob file.    * @param search The cell need to be searched in the mob file.    * @param cacheMobBlocks Should this scanner cache blocks.    * @param readPt the read point.    * @return The cell in the mob file.    * @throws IOException    */
specifier|public
name|Cell
name|readCell
parameter_list|(
name|Cell
name|search
parameter_list|,
name|boolean
name|cacheMobBlocks
parameter_list|,
name|long
name|readPt
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
name|result
init|=
literal|null
decl_stmt|;
name|StoreFileScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|sfs
operator|.
name|add
argument_list|(
name|sf
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|sfScanners
init|=
name|StoreFileScanner
operator|.
name|getScannersForStoreFiles
argument_list|(
name|sfs
argument_list|,
name|cacheMobBlocks
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|readPt
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sfScanners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scanner
operator|=
name|sfScanners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|scanner
operator|.
name|seek
argument_list|(
name|search
argument_list|)
condition|)
block|{
name|result
operator|=
name|scanner
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Gets the file name.    * @return The file name.    */
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|sf
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * Opens the underlying reader.    * It's not thread-safe. Use MobFileCache.openFile() instead.    * @throws IOException    */
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|sf
operator|.
name|initReader
argument_list|()
expr_stmt|;
block|}
comment|/**    * Closes the underlying reader, but do no evict blocks belonging to this file.    * It's not thread-safe. Use MobFileCache.closeFile() instead.    * @throws IOException    */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|sf
operator|.
name|closeReader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sf
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Creates an instance of the MobFile.    * @param fs The file system.    * @param path The path of the underlying StoreFile.    * @param conf The configuration.    * @param cacheConf The CacheConfig.    * @return An instance of the MobFile.    * @throws IOException    */
specifier|public
specifier|static
name|MobFile
name|create
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CacheConfig
name|cacheConf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// XXX: primaryReplica is only used for constructing the key of block cache so it is not a
comment|// critical problem if we pass the wrong value, so here we always pass true. Need to fix later.
name|StoreFile
name|sf
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|MobFile
argument_list|(
name|sf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

