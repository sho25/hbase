begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Quotas
import|;
end_import

begin_comment
comment|/**  * An observer to automatically delete space quotas when a table/namespace  * are deleted.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MasterSpaceQuotaObserver
implements|implements
name|MasterCoprocessor
implements|,
name|MasterObserver
block|{
specifier|public
specifier|static
specifier|final
name|String
name|REMOVE_QUOTA_ON_TABLE_DELETE
init|=
literal|"hbase.quota.remove.on.table.delete"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|REMOVE_QUOTA_ON_TABLE_DELETE_DEFAULT
init|=
literal|true
decl_stmt|;
specifier|private
name|CoprocessorEnvironment
name|cpEnv
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|boolean
name|quotasEnabled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|MasterObserver
argument_list|>
name|getMasterObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|cpEnv
operator|=
name|ctx
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|cpEnv
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|quotasEnabled
operator|=
name|QuotaUtil
operator|.
name|isQuotaEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing if quotas aren't enabled
if|if
condition|(
operator|!
name|quotasEnabled
condition|)
block|{
return|return;
block|}
specifier|final
name|MasterServices
name|master
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getMasterServices
argument_list|()
decl_stmt|;
specifier|final
name|Connection
name|conn
init|=
name|master
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|Quotas
name|quotas
init|=
name|QuotaUtil
operator|.
name|getTableQuota
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|quotas
operator|!=
literal|null
operator|&&
name|quotas
operator|.
name|hasSpace
argument_list|()
condition|)
block|{
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|removeTableSpaceLimit
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing if quotas aren't enabled
if|if
condition|(
operator|!
name|quotasEnabled
condition|)
block|{
return|return;
block|}
specifier|final
name|MasterServices
name|master
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getMasterServices
argument_list|()
decl_stmt|;
specifier|final
name|Connection
name|conn
init|=
name|master
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|Quotas
name|quotas
init|=
name|QuotaUtil
operator|.
name|getNamespaceQuota
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|quotas
operator|!=
literal|null
operator|&&
name|quotas
operator|.
name|hasSpace
argument_list|()
condition|)
block|{
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|removeNamespaceSpaceLimit
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

