begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoreCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|HasMasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|// TODO: Encapsulate MasterObserver functions into separate subclass.
end_comment

begin_class
annotation|@
name|CoreCoprocessor
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RSGroupAdminEndpoint
implements|implements
name|MasterCoprocessor
implements|,
name|MasterObserver
block|{
comment|// Only instance of RSGroupInfoManager. RSGroup aware load balancers ask for this instance on
comment|// their setup.
specifier|private
name|MasterServices
name|master
decl_stmt|;
specifier|private
name|RSGroupInfoManager
name|groupInfoManager
decl_stmt|;
specifier|private
name|RSGroupAdminServer
name|groupAdminServer
decl_stmt|;
specifier|private
name|RSGroupAdminServiceImpl
name|groupAdminService
init|=
operator|new
name|RSGroupAdminServiceImpl
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|env
operator|instanceof
name|HasMasterServices
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Does not implement HMasterServices"
argument_list|)
throw|;
block|}
name|master
operator|=
operator|(
operator|(
name|HasMasterServices
operator|)
name|env
operator|)
operator|.
name|getMasterServices
argument_list|()
expr_stmt|;
name|groupInfoManager
operator|=
name|RSGroupInfoManagerImpl
operator|.
name|getInstance
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|groupAdminServer
operator|=
operator|new
name|RSGroupAdminServer
argument_list|(
name|master
argument_list|,
name|groupInfoManager
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RSGroupableBalancer
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Configured balancer does not support RegionServer groups."
argument_list|)
throw|;
block|}
name|AccessChecker
name|accessChecker
init|=
operator|(
operator|(
name|HasMasterServices
operator|)
name|env
operator|)
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAccessChecker
argument_list|()
decl_stmt|;
comment|// set the user-provider.
name|UserProvider
name|userProvider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|env
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|groupAdminService
operator|.
name|initialize
argument_list|(
name|master
argument_list|,
name|groupAdminServer
argument_list|,
name|accessChecker
argument_list|,
name|userProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Service
argument_list|>
name|getServices
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|groupAdminService
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|MasterObserver
argument_list|>
name|getMasterObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
name|RSGroupInfoManager
name|getGroupInfoManager
parameter_list|()
block|{
return|return
name|groupInfoManager
return|;
block|}
annotation|@
name|VisibleForTesting
name|RSGroupAdminServiceImpl
name|getGroupAdminService
parameter_list|()
block|{
return|return
name|groupAdminService
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////////
comment|// MasterObserver overrides
comment|/////////////////////////////////////////////////////////////////////////////
annotation|@
name|Override
specifier|public
name|void
name|postClearDeadServers
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|notClearedServers
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Address
argument_list|>
name|clearedServer
init|=
name|servers
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|server
lambda|->
operator|!
name|notClearedServers
operator|.
name|contains
argument_list|(
name|server
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ServerName
operator|::
name|getAddress
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|clearedServer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupAdminServer
operator|.
name|removeServers
argument_list|(
name|clearedServer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkGroupExists
parameter_list|(
name|Optional
argument_list|<
name|String
argument_list|>
name|optGroupName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|optGroupName
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|String
name|groupName
init|=
name|optGroupName
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupAdminServer
operator|.
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Region server group "
operator|+
name|groupName
operator|+
literal|" does not exit"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|boolean
name|rsgroupHasServersOnline
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfo
name|rsGroupInfo
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|optGroupName
init|=
name|desc
operator|.
name|getRegionServerGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|optGroupName
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|String
name|groupName
init|=
name|optGroupName
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupName
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
comment|// do not check for default group
return|return
literal|true
return|;
block|}
name|rsGroupInfo
operator|=
name|groupAdminServer
operator|.
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|groupName
operator|+
literal|" for table "
operator|+
name|desc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|NamespaceDescriptor
name|nd
init|=
name|master
operator|.
name|getClusterSchema
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|groupNameOfNs
init|=
name|nd
operator|.
name|getConfigurationValue
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupNameOfNs
operator|==
literal|null
operator|||
name|groupNameOfNs
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
comment|// do not check for default group
return|return
literal|true
return|;
block|}
name|rsGroupInfo
operator|=
name|groupAdminServer
operator|.
name|getRSGroupInfo
argument_list|(
name|groupNameOfNs
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|groupNameOfNs
operator|+
literal|" for table "
operator|+
name|desc
operator|.
name|getTableName
argument_list|()
operator|+
literal|"(inherit from namespace) does not exist"
argument_list|)
throw|;
block|}
block|}
return|return
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|createDestinationServersList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|onlineServer
lambda|->
name|rsGroupInfo
operator|.
name|containsServer
argument_list|(
name|onlineServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateTableAction
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableDescriptor
name|desc
parameter_list|,
name|RegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
name|checkGroupExists
argument_list|(
name|desc
operator|.
name|getRegionServerGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|isSystemTable
argument_list|()
operator|&&
operator|!
name|rsgroupHasServersOnline
argument_list|(
name|desc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
literal|"No online servers in the rsgroup for "
operator|+
name|desc
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TableDescriptor
name|preModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableDescriptor
name|currentDescriptor
parameter_list|,
name|TableDescriptor
name|newDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|checkGroupExists
argument_list|(
name|newDescriptor
operator|.
name|getRegionServerGroup
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|MasterObserver
operator|.
name|super
operator|.
name|preModifyTable
argument_list|(
name|ctx
argument_list|,
name|tableName
argument_list|,
name|currentDescriptor
argument_list|,
name|newDescriptor
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|checkGroupExists
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|ns
operator|.
name|getConfigurationValue
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preModifyNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|currentNsDescriptor
parameter_list|,
name|NamespaceDescriptor
name|newNsDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|checkGroupExists
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|newNsDescriptor
operator|.
name|getConfigurationValue
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

