begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|ResubmitDirective
operator|.
name|CHECK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|ResubmitDirective
operator|.
name|FORCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|TerminationStatus
operator|.
name|DELETED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|TerminationStatus
operator|.
name|FAILURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|TerminationStatus
operator|.
name|IN_PROGRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|TerminationStatus
operator|.
name|SUCCESS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|ZKSplitLogManagerCoordination
operator|.
name|TaskFinisher
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|ResubmitDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|TerminationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitLogWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  * ZooKeeper based implementation of {@link SplitLogManagerCoordination}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZKSplitLogManagerCoordination
extends|extends
name|ZooKeeperListener
implements|implements
name|SplitLogManagerCoordination
block|{
specifier|public
specifier|static
class|class
name|ZkSplitLogManagerDetails
extends|extends
name|SplitLogManagerDetails
block|{
name|ZkSplitLogManagerDetails
parameter_list|(
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|>
name|tasks
parameter_list|,
name|MasterServices
name|master
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|failedDeletions
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
block|{
name|super
argument_list|(
name|tasks
argument_list|,
name|master
argument_list|,
name|failedDeletions
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMEOUT
init|=
literal|120000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ZK_RETRIES
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_RESUBMIT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SplitLogManagerCoordination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|long
name|zkretries
decl_stmt|;
specifier|private
name|long
name|resubmitThreshold
decl_stmt|;
specifier|private
name|long
name|timeout
decl_stmt|;
specifier|private
name|TaskFinisher
name|taskFinisher
decl_stmt|;
name|SplitLogManagerDetails
name|details
decl_stmt|;
specifier|private
specifier|final
name|Stoppable
name|stopper
init|=
literal|null
decl_stmt|;
comment|// When lastRecoveringNodeCreationTime is older than the following threshold, we'll check
comment|// whether to GC stale recovering znodes
specifier|private
specifier|volatile
name|long
name|lastRecoveringNodeCreationTime
init|=
literal|0
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|boolean
name|ignoreZKDeleteForTesting
init|=
literal|false
decl_stmt|;
specifier|private
name|RecoveryMode
name|recoveryMode
decl_stmt|;
specifier|private
name|boolean
name|isDrainingDone
init|=
literal|false
decl_stmt|;
specifier|public
name|ZKSplitLogManagerCoordination
parameter_list|(
specifier|final
name|CoordinatedStateManager
name|manager
parameter_list|,
name|ZooKeeperWatcher
name|watcher
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
name|taskFinisher
operator|=
operator|new
name|TaskFinisher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Status
name|finish
parameter_list|(
name|ServerName
name|workerName
parameter_list|,
name|String
name|logfile
parameter_list|)
block|{
try|try
block|{
name|HLogSplitter
operator|.
name|finishSplitLogFile
argument_list|(
name|logfile
argument_list|,
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not finish splitting of log file "
operator|+
name|logfile
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|ERR
return|;
block|}
return|return
name|Status
operator|.
name|DONE
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|manager
operator|.
name|getServer
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|server
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|zkretries
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.splitlog.zk.retries"
argument_list|,
name|DEFAULT_ZK_RETRIES
argument_list|)
expr_stmt|;
name|this
operator|.
name|resubmitThreshold
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.splitlog.max.resubmit"
argument_list|,
name|DEFAULT_MAX_RESUBMIT
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_SPLITLOG_MANAGER_TIMEOUT
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|)
expr_stmt|;
name|setRecoveryMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|watcher
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|watcher
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lookForOrphans
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|prepareTask
parameter_list|(
name|String
name|taskname
parameter_list|)
block|{
return|return
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|watcher
argument_list|,
name|taskname
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|remainingTasksInCoordination
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tasks
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|splitLogZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|tasks
operator|!=
literal|null
condition|)
block|{
name|int
name|listSize
init|=
name|tasks
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|tasks
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to check remaining tasks"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
name|count
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * It is possible for a task to stay in UNASSIGNED state indefinitely - say SplitLogManager wants    * to resubmit a task. It forces the task to UNASSIGNED state but it dies before it could create    * the RESCAN task node to signal the SplitLogWorkers to pick up the task. To prevent this    * scenario the SplitLogManager resubmits all orphan and UNASSIGNED tasks at startup.    * @param path    */
specifier|private
name|void
name|handleUnassignedTask
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
name|Task
name|task
init|=
name|findOrCreateOrphanTask
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|isOrphan
argument_list|()
operator|&&
operator|(
name|task
operator|.
name|incarnation
operator|==
literal|0
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"resubmitting unassigned orphan task "
operator|+
name|path
argument_list|)
expr_stmt|;
comment|// ignore failure to resubmit. The timeout-monitor will handle it later
comment|// albeit in a more crude fashion
name|resubmitTask
argument_list|(
name|path
argument_list|,
name|task
argument_list|,
name|FORCE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteTask
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|deleteNode
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|resubmitTask
parameter_list|(
name|String
name|path
parameter_list|,
name|Task
name|task
parameter_list|,
name|ResubmitDirective
name|directive
parameter_list|)
block|{
comment|// its ok if this thread misses the update to task.deleted. It will fail later
if|if
condition|(
name|task
operator|.
name|status
operator|!=
name|IN_PROGRESS
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|version
decl_stmt|;
if|if
condition|(
name|directive
operator|!=
name|FORCE
condition|)
block|{
comment|// We're going to resubmit:
comment|// 1) immediately if the worker server is now marked as dead
comment|// 2) after a configurable timeout if the server is not marked as dead but has still not
comment|// finished the task. This allows to continue if the worker cannot actually handle it,
comment|// for any reason.
specifier|final
name|long
name|time
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|task
operator|.
name|last_update
decl_stmt|;
specifier|final
name|boolean
name|alive
init|=
name|details
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|!=
literal|null
condition|?
name|details
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|isServerOnline
argument_list|(
name|task
operator|.
name|cur_worker_name
argument_list|)
else|:
literal|true
decl_stmt|;
if|if
condition|(
name|alive
operator|&&
name|time
operator|<
name|timeout
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping the resubmit of "
operator|+
name|task
operator|.
name|toString
argument_list|()
operator|+
literal|"  because the server "
operator|+
name|task
operator|.
name|cur_worker_name
operator|+
literal|" is not marked as dead, we waited for "
operator|+
name|time
operator|+
literal|" while the timeout is "
operator|+
name|timeout
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|task
operator|.
name|unforcedResubmits
operator|.
name|get
argument_list|()
operator|>=
name|resubmitThreshold
condition|)
block|{
if|if
condition|(
operator|!
name|task
operator|.
name|resubmitThresholdReached
condition|)
block|{
name|task
operator|.
name|resubmitThresholdReached
operator|=
literal|true
expr_stmt|;
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit_threshold_reached
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping resubmissions of task "
operator|+
name|path
operator|+
literal|" because threshold "
operator|+
name|resubmitThreshold
operator|+
literal|" reached"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// race with heartbeat() that might be changing last_version
name|version
operator|=
name|task
operator|.
name|last_version
expr_stmt|;
block|}
else|else
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit_force
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|version
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"resubmitting task "
operator|+
name|path
argument_list|)
expr_stmt|;
name|task
operator|.
name|incarnation
operator|++
expr_stmt|;
name|boolean
name|result
init|=
name|resubmit
argument_list|(
name|this
operator|.
name|details
operator|.
name|getServerName
argument_list|()
argument_list|,
name|path
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|task
operator|.
name|heartbeatNoDetails
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// don't count forced resubmits
if|if
condition|(
name|directive
operator|!=
name|FORCE
condition|)
block|{
name|task
operator|.
name|unforcedResubmits
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|task
operator|.
name|setUnassigned
argument_list|()
expr_stmt|;
name|rescan
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkTasks
parameter_list|()
block|{
name|rescan
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
comment|/**    * signal the workers that a task was resubmitted by creating the RESCAN node.    */
specifier|private
name|void
name|rescan
parameter_list|(
name|long
name|retries
parameter_list|)
block|{
comment|// The RESCAN node will be deleted almost immediately by the
comment|// SplitLogManager as soon as it is created because it is being
comment|// created in the DONE state. This behavior prevents a buildup
comment|// of RESCAN nodes. But there is also a chance that a SplitLogWorker
comment|// might miss the watch-trigger that creation of RESCAN node provides.
comment|// Since the TimeoutMonitor will keep resubmitting UNASSIGNED tasks
comment|// therefore this behavior is safe.
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Done
argument_list|(
name|this
operator|.
name|details
operator|.
name|getServerName
argument_list|()
argument_list|,
name|this
operator|.
name|recoveryMode
argument_list|)
decl_stmt|;
name|this
operator|.
name|watcher
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|ZKSplitLog
operator|.
name|getRescanNode
argument_list|(
name|watcher
argument_list|)
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|,
operator|new
name|CreateRescanAsyncCallback
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|retries
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitTask
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|createNode
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkTaskStillAvailable
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// A negative retry count will lead to ignoring all error processing.
name|this
operator|.
name|watcher
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|this
operator|.
name|watcher
argument_list|,
operator|new
name|GetDataAsyncCallback
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
comment|/* retry count */
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|tot_mgr_get_data_queued
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * It removes recovering regions under /hbase/recovering-regions/[encoded region name] so that the    * region server hosting the region can allow reads to the recovered region    * @param recoveredServerNameSet servers which are just recovered    * @param isMetaRecovery whether current recovery is for the meta region on    *<code>serverNames<code>    */
annotation|@
name|Override
specifier|public
name|void
name|removeRecoveringRegions
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|recoveredServerNameSet
parameter_list|,
name|Boolean
name|isMetaRecovery
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|metaEncodeRegionName
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tasks
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|splitLogZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|tasks
operator|!=
literal|null
condition|)
block|{
name|int
name|listSize
init|=
name|tasks
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|tasks
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|count
operator|==
literal|0
operator|&&
name|this
operator|.
name|details
operator|.
name|getMaster
argument_list|()
operator|.
name|isInitialized
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|details
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
comment|// no splitting work items left
name|ZKSplitLog
operator|.
name|deleteRecoveringRegionZNodes
argument_list|(
name|watcher
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// reset lastRecoveringNodeCreationTime because we cleared all recovering znodes at
comment|// this point.
name|lastRecoveringNodeCreationTime
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|recoveredServerNameSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// remove recovering regions which doesn't have any RS associated with it
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|recoveringRegionsZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|!=
literal|null
condition|)
block|{
name|int
name|listSize
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|region
init|=
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMetaRecovery
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|isMetaRecovery
operator|&&
operator|!
name|region
operator|.
name|equalsIgnoreCase
argument_list|(
name|metaEncodeRegionName
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|isMetaRecovery
operator|&&
name|region
operator|.
name|equalsIgnoreCase
argument_list|(
name|metaEncodeRegionName
argument_list|)
operator|)
condition|)
block|{
comment|// skip non-meta regions when recovering the meta region or
comment|// skip the meta region when recovering user regions
continue|continue;
block|}
block|}
name|String
name|nodePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|recoveringRegionsZNode
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|failedServers
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|nodePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|failedServers
operator|==
literal|null
operator|||
name|failedServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|watcher
argument_list|,
name|nodePath
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|recoveredServerNameSet
operator|.
name|containsAll
argument_list|(
name|failedServers
argument_list|)
condition|)
block|{
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|watcher
argument_list|,
name|nodePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|tmpFailedServerSize
init|=
name|failedServers
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tmpFailedServerSize
condition|;
name|j
operator|++
control|)
block|{
name|String
name|failedServer
init|=
name|failedServers
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoveredServerNameSet
operator|.
name|contains
argument_list|(
name|failedServer
argument_list|)
condition|)
block|{
name|String
name|tmpPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|nodePath
argument_list|,
name|failedServer
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|watcher
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"removeRecoveringRegionsFromZK got zookeeper exception. Will retry"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|deleteNode
parameter_list|(
name|String
name|path
parameter_list|,
name|Long
name|retries
parameter_list|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_node_delete_queued
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// Once a task znode is ready for delete, that is it is in the TASK_DONE
comment|// state, then no one should be writing to it anymore. That is no one
comment|// will be updating the znode version any more.
name|this
operator|.
name|watcher
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|DeleteAsyncCallback
argument_list|()
argument_list|,
name|retries
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteNodeSuccess
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|ignoreZKDeleteForTesting
condition|)
block|{
return|return;
block|}
name|Task
name|task
decl_stmt|;
name|task
operator|=
name|details
operator|.
name|getTasks
argument_list|()
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_rescan_deleted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|SplitLogCounters
operator|.
name|tot_mgr_missing_state_in_delete
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleted task without in memory state "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|task
init|)
block|{
name|task
operator|.
name|status
operator|=
name|DELETED
expr_stmt|;
name|task
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
name|SplitLogCounters
operator|.
name|tot_mgr_task_deleted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|deleteNodeFailure
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to delete node "
operator|+
name|path
operator|+
literal|" and will retry soon."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|private
name|void
name|createRescanSuccess
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_rescan
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|getDataSetWatch
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createRescanFailure
parameter_list|()
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"logic failure, rescan failure must not happen"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper function to check whether to abandon retries in ZooKeeper AsyncCallback functions    * @param statusCode integer value of a ZooKeeper exception code    * @param action description message about the retried action    * @return true when need to abandon retries otherwise false    */
specifier|private
name|boolean
name|needAbandonRetries
parameter_list|(
name|int
name|statusCode
parameter_list|,
name|String
name|action
parameter_list|)
block|{
if|if
condition|(
name|statusCode
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ZK session expired. Master is expected to shut down. Abandoning retries for "
operator|+
literal|"action="
operator|+
name|action
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|createNode
parameter_list|(
name|String
name|path
parameter_list|,
name|Long
name|retry_count
parameter_list|)
block|{
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|details
operator|.
name|getServerName
argument_list|()
argument_list|,
name|this
operator|.
name|recoveryMode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|asyncCreate
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|path
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|new
name|CreateAsyncCallback
argument_list|()
argument_list|,
name|retry_count
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|tot_mgr_node_create_queued
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|private
name|void
name|createNodeSuccess
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"put up splitlog task at znode "
operator|+
name|path
argument_list|)
expr_stmt|;
name|getDataSetWatch
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createNodeFailure
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// TODO the Manager should split the log locally instead of giving up
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to create task node"
operator|+
name|path
argument_list|)
expr_stmt|;
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getDataSetWatch
parameter_list|(
name|String
name|path
parameter_list|,
name|Long
name|retry_count
parameter_list|)
block|{
name|this
operator|.
name|watcher
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|this
operator|.
name|watcher
argument_list|,
operator|new
name|GetDataAsyncCallback
argument_list|()
argument_list|,
name|retry_count
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|tot_mgr_get_data_queued
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|getDataSetWatchSuccess
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|version
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
comment|// assume all done. The task znode suddenly disappeared.
name|setDone
argument_list|(
name|path
argument_list|,
name|SUCCESS
argument_list|)
expr_stmt|;
return|return;
block|}
name|SplitLogCounters
operator|.
name|tot_mgr_null_data
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"logic error - got null data "
operator|+
name|path
argument_list|)
expr_stmt|;
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
return|return;
block|}
name|data
operator|=
name|this
operator|.
name|watcher
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|removeMetaData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|SplitLogTask
name|slt
init|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|slt
operator|.
name|isUnassigned
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"task not yet acquired "
operator|+
name|path
operator|+
literal|" ver = "
operator|+
name|version
argument_list|)
expr_stmt|;
name|handleUnassignedTask
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slt
operator|.
name|isOwned
argument_list|()
condition|)
block|{
name|heartbeat
argument_list|(
name|path
argument_list|,
name|version
argument_list|,
name|slt
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slt
operator|.
name|isResigned
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"task "
operator|+
name|path
operator|+
literal|" entered state: "
operator|+
name|slt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|resubmitOrFail
argument_list|(
name|path
argument_list|,
name|FORCE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slt
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"task "
operator|+
name|path
operator|+
literal|" entered state: "
operator|+
name|slt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskFinisher
operator|!=
literal|null
operator|&&
operator|!
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|taskFinisher
operator|.
name|finish
argument_list|(
name|slt
operator|.
name|getServerName
argument_list|()
argument_list|,
name|ZKSplitLog
operator|.
name|getFileName
argument_list|(
name|path
argument_list|)
argument_list|)
operator|==
name|Status
operator|.
name|DONE
condition|)
block|{
name|setDone
argument_list|(
name|path
argument_list|,
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resubmitOrFail
argument_list|(
name|path
argument_list|,
name|CHECK
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setDone
argument_list|(
name|path
argument_list|,
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|slt
operator|.
name|isErr
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"task "
operator|+
name|path
operator|+
literal|" entered state: "
operator|+
name|slt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|resubmitOrFail
argument_list|(
name|path
argument_list|,
name|CHECK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"logic error - unexpected zk state for path = "
operator|+
name|path
operator|+
literal|" data = "
operator|+
name|slt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|resubmitOrFail
parameter_list|(
name|String
name|path
parameter_list|,
name|ResubmitDirective
name|directive
parameter_list|)
block|{
if|if
condition|(
name|resubmitTask
argument_list|(
name|path
argument_list|,
name|findOrCreateOrphanTask
argument_list|(
name|path
argument_list|)
argument_list|,
name|directive
argument_list|)
operator|==
literal|false
condition|)
block|{
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getDataSetWatchFailure
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to set data watch "
operator|+
name|path
argument_list|)
expr_stmt|;
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setDone
parameter_list|(
name|String
name|path
parameter_list|,
name|TerminationStatus
name|status
parameter_list|)
block|{
name|Task
name|task
init|=
name|details
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_unacquired_orphan_done
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"unacquired orphan task is done "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|task
init|)
block|{
if|if
condition|(
name|task
operator|.
name|status
operator|==
name|IN_PROGRESS
condition|)
block|{
if|if
condition|(
name|status
operator|==
name|SUCCESS
condition|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_log_split_success
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Done splitting "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_log_split_err
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error splitting "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|status
operator|=
name|status
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|batch
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|task
operator|.
name|batch
init|)
block|{
if|if
condition|(
name|status
operator|==
name|SUCCESS
condition|)
block|{
name|task
operator|.
name|batch
operator|.
name|done
operator|++
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|batch
operator|.
name|error
operator|++
expr_stmt|;
block|}
name|task
operator|.
name|batch
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// delete the task node in zk. It's an async
comment|// call and no one is blocked waiting for this node to be deleted. All
comment|// task names are unique (log.<timestamp>) there is no risk of deleting
comment|// a future task.
comment|// if a deletion fails, TimeoutMonitor will retry the same deletion later
name|deleteNode
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
return|return;
block|}
name|Task
name|findOrCreateOrphanTask
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Task
name|orphanTask
init|=
operator|new
name|Task
argument_list|()
decl_stmt|;
name|Task
name|task
decl_stmt|;
name|task
operator|=
name|details
operator|.
name|getTasks
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|path
argument_list|,
name|orphanTask
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating orphan task "
operator|+
name|path
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|tot_mgr_orphan_task_acquired
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|task
operator|=
name|orphanTask
expr_stmt|;
block|}
return|return
name|task
return|;
block|}
specifier|private
name|void
name|heartbeat
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|new_version
parameter_list|,
name|ServerName
name|workerName
parameter_list|)
block|{
name|Task
name|task
init|=
name|findOrCreateOrphanTask
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|new_version
operator|!=
name|task
operator|.
name|last_version
condition|)
block|{
if|if
condition|(
name|task
operator|.
name|isUnassigned
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"task "
operator|+
name|path
operator|+
literal|" acquired by "
operator|+
name|workerName
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|heartbeat
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
name|new_version
argument_list|,
name|workerName
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|tot_mgr_heartbeat
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// duplicate heartbeats - heartbeats w/o zk node version
comment|// changing - are possible. The timeout thread does
comment|// getDataSetWatch() just to check whether a node still
comment|// exists or not
block|}
return|return;
block|}
specifier|private
name|void
name|lookForOrphans
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|orphans
decl_stmt|;
try|try
block|{
name|orphans
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|this
operator|.
name|watcher
operator|.
name|splitLogZNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|orphans
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not get children of "
operator|+
name|this
operator|.
name|watcher
operator|.
name|splitLogZNode
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not get children of "
operator|+
name|this
operator|.
name|watcher
operator|.
name|splitLogZNode
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|rescan_nodes
init|=
literal|0
decl_stmt|;
name|int
name|listSize
init|=
name|orphans
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|orphans
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|nodepath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|splitLogZNode
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|nodepath
argument_list|)
condition|)
block|{
name|rescan_nodes
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found orphan rescan node "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"found orphan task "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|getDataSetWatch
argument_list|(
name|nodepath
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
operator|(
name|orphans
operator|.
name|size
argument_list|()
operator|-
name|rescan_nodes
operator|)
operator|+
literal|" orphan tasks and "
operator|+
name|rescan_nodes
operator|+
literal|" rescan nodes"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create znodes /hbase/recovering-regions/[region_ids...]/[failed region server names ...] for    * all regions of the passed in region servers    * @param serverName the name of a region server    * @param userRegions user regiones assigned on the region server    */
annotation|@
name|Override
specifier|public
name|void
name|markRegionsRecovering
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|userRegions
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedIOException
block|{
name|this
operator|.
name|lastRecoveringNodeCreationTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|userRegions
control|)
block|{
name|String
name|regionEncodeName
init|=
name|region
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|long
name|retries
init|=
name|this
operator|.
name|zkretries
decl_stmt|;
do|do
block|{
name|String
name|nodePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|recoveringRegionsZNode
argument_list|,
name|regionEncodeName
argument_list|)
decl_stmt|;
name|long
name|lastRecordedFlushedSequenceId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|long
name|lastSequenceId
init|=
name|this
operator|.
name|details
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|getLastFlushedSequenceId
argument_list|(
name|regionEncodeName
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|/*            * znode layout: .../region_id[last known flushed sequence id]/failed server[last known            * flushed sequence id for the server]            */
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|nodePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|ZKUtil
operator|.
name|createSetData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|nodePath
argument_list|,
name|ZKUtil
operator|.
name|positionToByteArray
argument_list|(
name|lastSequenceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastRecordedFlushedSequenceId
operator|=
name|ZKSplitLog
operator|.
name|parseLastFlushedSequenceIdFrom
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRecordedFlushedSequenceId
operator|<
name|lastSequenceId
condition|)
block|{
comment|// update last flushed sequence id in the region level
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|nodePath
argument_list|,
name|ZKUtil
operator|.
name|positionToByteArray
argument_list|(
name|lastSequenceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// go one level deeper with server name
name|nodePath
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|nodePath
argument_list|,
name|serverName
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastSequenceId
operator|<=
name|lastRecordedFlushedSequenceId
condition|)
block|{
comment|// the newly assigned RS failed even before any flush to the region
name|lastSequenceId
operator|=
name|lastRecordedFlushedSequenceId
expr_stmt|;
block|}
name|ZKUtil
operator|.
name|createSetData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|nodePath
argument_list|,
name|ZKUtil
operator|.
name|regionSequenceIdsToByteArray
argument_list|(
name|lastSequenceId
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Mark region "
operator|+
name|regionEncodeName
operator|+
literal|" recovering from failed region server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
comment|// break retry loop
break|break;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// ignore ZooKeeper exceptions inside retry loop
if|if
condition|(
name|retries
operator|<=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// wait a little bit for retry
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
do|while
condition|(
operator|(
operator|--
name|retries
operator|)
operator|>
literal|0
operator|&&
operator|(
operator|!
name|this
operator|.
name|stopper
operator|.
name|isStopped
argument_list|()
operator|)
condition|)
do|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeDataChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Task
name|task
decl_stmt|;
name|task
operator|=
name|details
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
operator|||
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|heartbeatNoDetails
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getDataSetWatch
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * ZooKeeper implementation of    * {@link SplitLogManagerCoordination#removeStaleRecoveringRegions(Set)}    */
annotation|@
name|Override
specifier|public
name|void
name|removeStaleRecoveringRegions
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|knownFailedServers
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedIOException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tasks
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|splitLogZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|tasks
operator|!=
literal|null
condition|)
block|{
name|int
name|listSize
init|=
name|tasks
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|t
init|=
name|tasks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|splitLogZNode
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|SplitLogTask
name|slt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|slt
operator|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse data for znode "
operator|+
name|t
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slt
operator|!=
literal|null
operator|&&
name|slt
operator|.
name|isDone
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
comment|// decode the file name
name|t
operator|=
name|ZKSplitLog
operator|.
name|getFileName
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
operator|new
name|Path
argument_list|(
name|t
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverName
operator|!=
literal|null
condition|)
block|{
name|knownFailedServers
operator|.
name|add
argument_list|(
name|serverName
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found invalid WAL log file name:"
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// remove recovering regions which doesn't have any RS associated with it
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|recoveringRegionsZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|!=
literal|null
condition|)
block|{
name|int
name|listSize
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|nodePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|recoveringRegionsZNode
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|regionFailedServers
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|nodePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionFailedServers
operator|==
literal|null
operator|||
name|regionFailedServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|watcher
argument_list|,
name|nodePath
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|needMoreRecovery
init|=
literal|false
decl_stmt|;
name|int
name|tmpFailedServerSize
init|=
name|regionFailedServers
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tmpFailedServerSize
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|knownFailedServers
operator|.
name|contains
argument_list|(
name|regionFailedServers
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
name|needMoreRecovery
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|needMoreRecovery
condition|)
block|{
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|watcher
argument_list|,
name|nodePath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReplaying
parameter_list|()
block|{
return|return
name|this
operator|.
name|recoveryMode
operator|==
name|RecoveryMode
operator|.
name|LOG_REPLAY
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSplitting
parameter_list|()
block|{
return|return
name|this
operator|.
name|recoveryMode
operator|==
name|RecoveryMode
operator|.
name|LOG_SPLITTING
return|;
block|}
comment|/**    * This function is to set recovery mode from outstanding split log tasks from before or current    * configuration setting    * @param isForInitialization    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|setRecoveryMode
parameter_list|(
name|boolean
name|isForInitialization
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isDrainingDone
condition|)
block|{
comment|// when there is no outstanding splitlogtask after master start up, we already have up to date
comment|// recovery mode
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|watcher
operator|==
literal|null
condition|)
block|{
comment|// when watcher is null(testing code) and recovery mode can only be LOG_SPLITTING
name|this
operator|.
name|isDrainingDone
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|recoveryMode
operator|=
name|RecoveryMode
operator|.
name|LOG_SPLITTING
expr_stmt|;
return|return;
block|}
name|boolean
name|hasSplitLogTask
init|=
literal|false
decl_stmt|;
name|boolean
name|hasRecoveringRegions
init|=
literal|false
decl_stmt|;
name|RecoveryMode
name|previousRecoveryMode
init|=
name|RecoveryMode
operator|.
name|UNKNOWN
decl_stmt|;
name|RecoveryMode
name|recoveryModeInConfig
init|=
operator|(
name|isDistributedLogReplay
argument_list|(
name|conf
argument_list|)
operator|)
condition|?
name|RecoveryMode
operator|.
name|LOG_REPLAY
else|:
name|RecoveryMode
operator|.
name|LOG_SPLITTING
decl_stmt|;
comment|// Firstly check if there are outstanding recovering regions
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|recoveringRegionsZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|!=
literal|null
operator|&&
operator|!
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hasRecoveringRegions
operator|=
literal|true
expr_stmt|;
name|previousRecoveryMode
operator|=
name|RecoveryMode
operator|.
name|LOG_REPLAY
expr_stmt|;
block|}
if|if
condition|(
name|previousRecoveryMode
operator|==
name|RecoveryMode
operator|.
name|UNKNOWN
condition|)
block|{
comment|// Secondly check if there are outstanding split log task
name|List
argument_list|<
name|String
argument_list|>
name|tasks
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|splitLogZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|tasks
operator|!=
literal|null
operator|&&
operator|!
name|tasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hasSplitLogTask
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|isForInitialization
condition|)
block|{
comment|// during initialization, try to get recovery mode from splitlogtask
name|int
name|listSize
init|=
name|tasks
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|task
init|=
name|tasks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|splitLogZNode
argument_list|,
name|task
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
continue|continue;
name|SplitLogTask
name|slt
init|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|previousRecoveryMode
operator|=
name|slt
operator|.
name|getMode
argument_list|()
expr_stmt|;
if|if
condition|(
name|previousRecoveryMode
operator|==
name|RecoveryMode
operator|.
name|UNKNOWN
condition|)
block|{
comment|// created by old code base where we don't set recovery mode in splitlogtask
comment|// we can safely set to LOG_SPLITTING because we're in master initialization code
comment|// before SSH is enabled& there is no outstanding recovering regions
name|previousRecoveryMode
operator|=
name|RecoveryMode
operator|.
name|LOG_SPLITTING
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse data for znode "
operator|+
name|task
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|isDrainingDone
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|hasSplitLogTask
operator|&&
operator|!
name|hasRecoveringRegions
condition|)
block|{
name|this
operator|.
name|isDrainingDone
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|recoveryMode
operator|=
name|recoveryModeInConfig
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
operator|!
name|isForInitialization
condition|)
block|{
comment|// splitlogtask hasn't drained yet, keep existing recovery mode
return|return;
block|}
if|if
condition|(
name|previousRecoveryMode
operator|!=
name|RecoveryMode
operator|.
name|UNKNOWN
condition|)
block|{
name|this
operator|.
name|isDrainingDone
operator|=
operator|(
name|previousRecoveryMode
operator|==
name|recoveryModeInConfig
operator|)
expr_stmt|;
name|this
operator|.
name|recoveryMode
operator|=
name|previousRecoveryMode
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|recoveryMode
operator|=
name|recoveryModeInConfig
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns if distributed log replay is turned on or not    * @param conf    * @return true when distributed log replay is turned on    */
specifier|private
name|boolean
name|isDistributedLogReplay
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|dlr
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_DISTRIBUTED_LOG_REPLAY_CONFIG
argument_list|)
decl_stmt|;
name|int
name|version
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HFile
operator|.
name|FORMAT_VERSION_KEY
argument_list|,
name|HFile
operator|.
name|MAX_FORMAT_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Distributed log replay="
operator|+
name|dlr
operator|+
literal|", "
operator|+
name|HFile
operator|.
name|FORMAT_VERSION_KEY
operator|+
literal|"="
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
comment|// For distributed log replay, hfile version must be 3 at least; we need tag support.
return|return
name|dlr
operator|&&
operator|(
name|version
operator|>=
literal|3
operator|)
return|;
block|}
specifier|private
name|boolean
name|resubmit
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|version
parameter_list|)
block|{
try|try
block|{
comment|// blocking zk call but this is done from the timeout thread
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|this
operator|.
name|details
operator|.
name|getServerName
argument_list|()
argument_list|,
name|this
operator|.
name|recoveryMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|path
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|version
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"failed to resubmit task "
operator|+
name|path
operator|+
literal|" version changed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to resubmit because znode doesn't exist "
operator|+
name|path
operator|+
literal|" task done (or forced done by removing the znode)"
argument_list|)
expr_stmt|;
try|try
block|{
name|getDataSetWatchSuccess
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to re-resubmit task "
operator|+
name|path
operator|+
literal|" because of deserialization issue"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|BadVersionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"failed to resubmit task "
operator|+
name|path
operator|+
literal|" version changed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit_failed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to resubmit "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * {@link SplitLogManager} can use objects implementing this interface to finish off a partially    * done task by {@link SplitLogWorker}. This provides a serialization point at the end of the task    * processing. Must be restartable and idempotent.    */
specifier|public
interface|interface
name|TaskFinisher
block|{
comment|/**      * status that can be returned finish()      */
enum|enum
name|Status
block|{
comment|/**        * task completed successfully        */
name|DONE
parameter_list|()
operator|,
comment|/**        * task completed with error        */
constructor|ERR(
block|)
enum|;
block|}
comment|/**      * finish the partially done task. workername provides clue to where the partial results of the      * partially done tasks are present. taskname is the name of the task that was put up in      * zookeeper.      *<p>      * @param workerName      * @param taskname      * @return DONE if task completed successfully, ERR otherwise      */
name|Status
name|finish
parameter_list|(
name|ServerName
name|workerName
parameter_list|,
name|String
name|taskname
parameter_list|)
function_decl|;
block|}
end_class

begin_comment
comment|/**    * Asynchronous handler for zk create node results. Retries on failures.    */
end_comment

begin_class
specifier|public
class|class
name|CreateAsyncCallback
implements|implements
name|AsyncCallback
operator|.
name|StringCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CreateAsyncCallback
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_node_create_result
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|needAbandonRetries
argument_list|(
name|rc
argument_list|,
literal|"Create znode "
operator|+
name|path
argument_list|)
condition|)
block|{
name|createNodeFailure
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|rc
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
condition|)
block|{
comment|// What if there is a delete pending against this pre-existing
comment|// znode? Then this soon-to-be-deleted task znode must be in TASK_DONE
comment|// state. Only operations that will be carried out on this node by
comment|// this manager are get-znode-data, task-finisher and delete-znode.
comment|// And all code pieces correctly handle the case of suddenly
comment|// disappearing task-znode.
name|LOG
operator|.
name|debug
argument_list|(
literal|"found pre-existing znode "
operator|+
name|path
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|tot_mgr_node_already_exists
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Long
name|retry_count
init|=
operator|(
name|Long
operator|)
name|ctx
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"create rc ="
operator|+
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
operator|+
literal|" for "
operator|+
name|path
operator|+
literal|" remaining retries="
operator|+
name|retry_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry_count
operator|==
literal|0
condition|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_node_create_err
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|createNodeFailure
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_node_create_retry
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|createNode
argument_list|(
name|path
argument_list|,
name|retry_count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
name|createNodeSuccess
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * Asynchronous handler for zk get-data-set-watch on node results. Retries on failures.    */
end_comment

begin_class
specifier|public
class|class
name|GetDataAsyncCallback
implements|implements
name|AsyncCallback
operator|.
name|DataCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GetDataAsyncCallback
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|Stat
name|stat
parameter_list|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_get_data_result
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|needAbandonRetries
argument_list|(
name|rc
argument_list|,
literal|"GetData from znode "
operator|+
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rc
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|NONODE
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_get_data_nonode
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"task znode "
operator|+
name|path
operator|+
literal|" vanished or not created yet."
argument_list|)
expr_stmt|;
comment|// ignore since we should not end up in a case where there is in-memory task,
comment|// but no znode. The only case is between the time task is created in-memory
comment|// and the znode is created. See HBASE-11217.
return|return;
block|}
name|Long
name|retry_count
init|=
operator|(
name|Long
operator|)
name|ctx
decl_stmt|;
if|if
condition|(
name|retry_count
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"getdata rc = "
operator|+
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
operator|+
literal|" "
operator|+
name|path
operator|+
literal|". Ignoring error. No error handling. No retrying."
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"getdata rc = "
operator|+
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
operator|+
literal|" "
operator|+
name|path
operator|+
literal|" remaining retries="
operator|+
name|retry_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry_count
operator|==
literal|0
condition|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_get_data_err
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|getDataSetWatchFailure
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_get_data_retry
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|getDataSetWatch
argument_list|(
name|path
argument_list|,
name|retry_count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
try|try
block|{
name|getDataSetWatchSuccess
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deserialization problem"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
end_class

begin_comment
comment|/**    * Asynchronous handler for zk delete node results. Retries on failures.    */
end_comment

begin_class
specifier|public
class|class
name|DeleteAsyncCallback
implements|implements
name|AsyncCallback
operator|.
name|VoidCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DeleteAsyncCallback
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_node_delete_result
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|needAbandonRetries
argument_list|(
name|rc
argument_list|,
literal|"Delete znode "
operator|+
name|path
argument_list|)
condition|)
block|{
name|details
operator|.
name|getFailedDeletions
argument_list|()
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|rc
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NONODE
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|SplitLogCounters
operator|.
name|tot_mgr_node_delete_err
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|Long
name|retry_count
init|=
operator|(
name|Long
operator|)
name|ctx
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"delete rc="
operator|+
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
operator|+
literal|" for "
operator|+
name|path
operator|+
literal|" remaining retries="
operator|+
name|retry_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry_count
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"delete failed "
operator|+
name|path
argument_list|)
expr_stmt|;
name|details
operator|.
name|getFailedDeletions
argument_list|()
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|deleteNodeFailure
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deleteNode
argument_list|(
name|path
argument_list|,
name|retry_count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|path
operator|+
literal|" does not exist. Either was created but deleted behind our"
operator|+
literal|" back by another pending delete OR was deleted"
operator|+
literal|" in earlier retry rounds. zkretries = "
operator|+
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleted "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|deleteNodeSuccess
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * Asynchronous handler for zk create RESCAN-node results. Retries on failures.    *<p>    * A RESCAN node is created using PERSISTENT_SEQUENTIAL flag. It is a signal for all the    * {@link SplitLogWorker}s to rescan for new tasks.    */
end_comment

begin_class
specifier|public
class|class
name|CreateRescanAsyncCallback
implements|implements
name|AsyncCallback
operator|.
name|StringCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CreateRescanAsyncCallback
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|needAbandonRetries
argument_list|(
name|rc
argument_list|,
literal|"CreateRescan znode "
operator|+
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
name|Long
name|retry_count
init|=
operator|(
name|Long
operator|)
name|ctx
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"rc="
operator|+
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
operator|+
literal|" for "
operator|+
name|path
operator|+
literal|" remaining retries="
operator|+
name|retry_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry_count
operator|==
literal|0
condition|)
block|{
name|createRescanFailure
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rescan
argument_list|(
name|retry_count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// path is the original arg, name is the actual name that was created
name|createRescanSuccess
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setDetails
parameter_list|(
name|SplitLogManagerDetails
name|details
parameter_list|)
block|{
name|this
operator|.
name|details
operator|=
name|details
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|SplitLogManagerDetails
name|getDetails
parameter_list|()
block|{
return|return
name|details
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|RecoveryMode
name|getRecoveryMode
parameter_list|()
block|{
return|return
name|recoveryMode
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getLastRecoveryTime
parameter_list|()
block|{
return|return
name|lastRecoveringNodeCreationTime
return|;
block|}
end_function

begin_comment
comment|/**    * Temporary function that is used by unit tests only    */
end_comment

begin_function
specifier|public
name|void
name|setIgnoreDeleteForTesting
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|ignoreZKDeleteForTesting
operator|=
name|b
expr_stmt|;
block|}
end_function

unit|}
end_unit

