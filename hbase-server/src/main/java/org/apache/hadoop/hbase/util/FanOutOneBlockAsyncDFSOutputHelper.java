begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
operator|.
name|CONNECT_TIMEOUT_MILLIS
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleState
operator|.
name|READER_IDLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|OVERWRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FanOutOneBlockAsyncDFSOutputSaslHelper
operator|.
name|trySaslNegotiate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_USE_DN_HOSTNAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_CREATE
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBufOutputStream
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|PooledByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoop
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|protobuf
operator|.
name|ProtobufDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|protobuf
operator|.
name|ProtobufVarint32FrameDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateEvent
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemLinkResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|BlockConstructionStage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|PipelineAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|BaseHeaderProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|CachingStrategyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ChecksumProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ClientOperationHeaderProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpWriteBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpWriteBlockProto
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|PipelineAckProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageTypeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|InvalidBlockTokenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseExpiredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_comment
comment|/**  * Helper class for implementing {@link FanOutOneBlockAsyncDFSOutput}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|FanOutOneBlockAsyncDFSOutputHelper
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FanOutOneBlockAsyncDFSOutputHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FanOutOneBlockAsyncDFSOutputHelper
parameter_list|()
block|{   }
comment|// use pooled allocator for performance.
specifier|private
specifier|static
specifier|final
name|ByteBufAllocator
name|ALLOC
init|=
name|PooledByteBufAllocator
operator|.
name|DEFAULT
decl_stmt|;
comment|// copied from DFSPacket since it is package private.
specifier|public
specifier|static
specifier|final
name|long
name|HEART_BEAT_SEQNO
init|=
operator|-
literal|1L
decl_stmt|;
comment|// helper class for creating DataChecksum object.
specifier|private
specifier|static
specifier|final
name|Method
name|CREATE_CHECKSUM
decl_stmt|;
comment|// helper class for getting Status from PipelineAckProto. In hadoop 2.6 or before, there is a
comment|// getStatus method, and for hadoop 2.7 or after, the status is retrieved from flag. The flag may
comment|// get from proto directly, or combined by the reply field of the proto and a ECN object. See
comment|// createPipelineAckStatusGetter for more details.
specifier|private
interface|interface
name|PipelineAckStatusGetter
block|{
name|Status
name|get
parameter_list|(
name|PipelineAckProto
name|ack
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|PipelineAckStatusGetter
name|PIPELINE_ACK_STATUS_GETTER
decl_stmt|;
comment|// StorageType enum is added in hadoop 2.4, but it is moved to another package in hadoop 2.6 and
comment|// the setter method in OpWriteBlockProto is also added in hadoop 2.6. So we need to skip the
comment|// setStorageType call if it is hadoop 2.5 or before. See createStorageTypeSetter for more
comment|// details.
specifier|private
interface|interface
name|StorageTypeSetter
block|{
name|OpWriteBlockProto
operator|.
name|Builder
name|set
parameter_list|(
name|OpWriteBlockProto
operator|.
name|Builder
name|builder
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|storageType
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|StorageTypeSetter
name|STORAGE_TYPE_SETTER
decl_stmt|;
comment|// helper class for calling create method on namenode. There is a supportedVersions parameter for
comment|// hadoop 2.6 or after. See createFileCreater for more details.
specifier|private
interface|interface
name|FileCreater
block|{
name|HdfsFileStatus
name|create
parameter_list|(
name|ClientProtocol
name|namenode
parameter_list|,
name|String
name|src
parameter_list|,
name|FsPermission
name|masked
parameter_list|,
name|String
name|clientName
parameter_list|,
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|FileCreater
name|FILE_CREATER
decl_stmt|;
comment|// helper class for add or remove lease from DFSClient. Hadoop 2.4 use src as the Map's key, and
comment|// hadoop 2.5 or after use inodeId. See createLeaseManager for more details.
specifier|private
interface|interface
name|LeaseManager
block|{
name|void
name|begin
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|inodeId
parameter_list|)
function_decl|;
name|void
name|end
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|inodeId
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|LeaseManager
name|LEASE_MANAGER
decl_stmt|;
comment|// This is used to terminate a recoverFileLease call when FileSystem is already closed.
comment|// isClientRunning is not public so we need to use reflection.
specifier|private
interface|interface
name|DFSClientAdaptor
block|{
name|boolean
name|isClientRunning
parameter_list|(
name|DFSClient
name|client
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|DFSClientAdaptor
name|DFS_CLIENT_ADAPTOR
decl_stmt|;
specifier|private
specifier|static
name|DFSClientAdaptor
name|createDFSClientAdaptor
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Method
name|isClientRunningMethod
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"isClientRunning"
argument_list|)
decl_stmt|;
name|isClientRunningMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|DFSClientAdaptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isClientRunning
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|Boolean
operator|)
name|isClientRunningMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|LeaseManager
name|createLeaseManager
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Method
name|beginFileLeaseMethod
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"beginFileLease"
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|DFSOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|beginFileLeaseMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Method
name|endFileLeaseMethod
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"endFileLease"
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|endFileLeaseMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|LeaseManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|inodeId
parameter_list|)
block|{
try|try
block|{
name|beginFileLeaseMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|,
name|inodeId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|end
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|inodeId
parameter_list|)
block|{
try|try
block|{
name|endFileLeaseMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|,
name|inodeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No inodeId related lease methods found, should be hadoop 2.4-"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|Method
name|beginFileLeaseMethod
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"beginFileLease"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|DFSOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|beginFileLeaseMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Method
name|endFileLeaseMethod
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"endFileLease"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|endFileLeaseMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|LeaseManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|inodeId
parameter_list|)
block|{
try|try
block|{
name|beginFileLeaseMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|,
name|src
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|end
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|inodeId
parameter_list|)
block|{
try|try
block|{
name|endFileLeaseMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|PipelineAckStatusGetter
name|createPipelineAckStatusGetter
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Method
name|getFlagListMethod
init|=
name|PipelineAckProto
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getFlagList"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|ecnClass
decl_stmt|;
try|try
block|{
name|ecnClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hdfs.protocol.datatransfer.PipelineAck$ECN"
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Enum
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Enum
argument_list|<
name|?
argument_list|>
name|disabledECN
init|=
name|Enum
operator|.
name|valueOf
argument_list|(
name|ecnClass
argument_list|,
literal|"DISABLED"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getReplyMethod
init|=
name|PipelineAckProto
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getReply"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|combineHeaderMethod
init|=
name|PipelineAck
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"combineHeader"
argument_list|,
name|ecnClass
argument_list|,
name|Status
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getStatusFromHeaderMethod
init|=
name|PipelineAck
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getStatusFromHeader"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|PipelineAckStatusGetter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Status
name|get
parameter_list|(
name|PipelineAckProto
name|ack
parameter_list|)
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Integer
argument_list|>
name|flagList
init|=
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|getFlagListMethod
operator|.
name|invoke
argument_list|(
name|ack
argument_list|)
decl_stmt|;
name|Integer
name|headerFlag
decl_stmt|;
if|if
condition|(
name|flagList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Status
name|reply
init|=
operator|(
name|Status
operator|)
name|getReplyMethod
operator|.
name|invoke
argument_list|(
name|ack
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|headerFlag
operator|=
operator|(
name|Integer
operator|)
name|combineHeaderMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|disabledECN
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|headerFlag
operator|=
name|flagList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Status
operator|)
name|getStatusFromHeaderMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|headerFlag
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not get expected methods, should be hadoop 2.6-"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|Method
name|getStatusMethod
init|=
name|PipelineAckProto
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getStatus"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|PipelineAckStatusGetter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Status
name|get
parameter_list|(
name|PipelineAckProto
name|ack
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|Status
operator|)
name|getStatusMethod
operator|.
name|invoke
argument_list|(
name|ack
argument_list|,
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|StorageTypeSetter
name|createStorageTypeSetter
parameter_list|()
block|{
specifier|final
name|Method
name|setStorageTypeMethod
decl_stmt|;
try|try
block|{
name|setStorageTypeMethod
operator|=
name|OpWriteBlockProto
operator|.
name|Builder
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setStorageType"
argument_list|,
name|StorageTypeProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"noSetStorageType method found, should be hadoop 2.5-"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|StorageTypeSetter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Builder
name|set
parameter_list|(
name|Builder
name|builder
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|storageType
parameter_list|)
block|{
return|return
name|builder
return|;
block|}
block|}
return|;
block|}
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|StorageTypeProto
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageTypeProto
name|storageTypeProto
range|:
name|StorageTypeProto
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|storageTypeProto
operator|.
name|name
argument_list|()
argument_list|,
name|storageTypeProto
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|StorageTypeProto
argument_list|>
name|name2ProtoEnum
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|StorageTypeSetter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Builder
name|set
parameter_list|(
name|Builder
name|builder
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|storageType
parameter_list|)
block|{
name|Object
name|protoEnum
init|=
name|name2ProtoEnum
operator|.
name|get
argument_list|(
name|storageType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|setStorageTypeMethod
operator|.
name|invoke
argument_list|(
name|builder
argument_list|,
name|protoEnum
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|builder
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|FileCreater
name|createFileCreater
parameter_list|()
block|{
for|for
control|(
name|Method
name|method
range|:
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"create"
argument_list|)
condition|)
block|{
specifier|final
name|Method
name|createMethod
init|=
name|method
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|paramTypes
init|=
name|createMethod
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramTypes
index|[
name|paramTypes
operator|.
name|length
operator|-
literal|1
index|]
operator|==
name|long
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|FileCreater
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HdfsFileStatus
name|create
parameter_list|(
name|ClientProtocol
name|namenode
parameter_list|,
name|String
name|src
parameter_list|,
name|FsPermission
name|masked
parameter_list|,
name|String
name|clientName
parameter_list|,
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|(
name|HdfsFileStatus
operator|)
name|createMethod
operator|.
name|invoke
argument_list|(
name|namenode
argument_list|,
name|src
argument_list|,
name|masked
argument_list|,
name|clientName
argument_list|,
name|flag
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
else|else
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cryptoProtocolVersionClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.crypto.CryptoProtocolVersion"
argument_list|)
decl_stmt|;
name|Method
name|supportedMethod
init|=
name|cryptoProtocolVersionClass
operator|.
name|getMethod
argument_list|(
literal|"supported"
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|supported
init|=
name|supportedMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileCreater
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HdfsFileStatus
name|create
parameter_list|(
name|ClientProtocol
name|namenode
parameter_list|,
name|String
name|src
parameter_list|,
name|FsPermission
name|masked
parameter_list|,
name|String
name|clientName
parameter_list|,
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|(
name|HdfsFileStatus
operator|)
name|createMethod
operator|.
name|invoke
argument_list|(
name|namenode
argument_list|,
name|src
argument_list|,
name|masked
argument_list|,
name|clientName
argument_list|,
name|flag
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|supported
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"No create method found for "
operator|+
name|ClientProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// cancel the processing if DFSClient is already closed.
specifier|static
specifier|final
class|class
name|CancelOnClose
implements|implements
name|CancelableProgressable
block|{
specifier|private
specifier|final
name|DFSClient
name|client
decl_stmt|;
specifier|public
name|CancelOnClose
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|progress
parameter_list|()
block|{
return|return
name|DFS_CLIENT_ADAPTOR
operator|.
name|isClientRunning
argument_list|(
name|client
argument_list|)
return|;
block|}
block|}
static|static
block|{
try|try
block|{
name|CREATE_CHECKSUM
operator|=
name|DFSClient
operator|.
name|Conf
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createChecksum"
argument_list|)
expr_stmt|;
name|CREATE_CHECKSUM
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|PIPELINE_ACK_STATUS_GETTER
operator|=
name|createPipelineAckStatusGetter
argument_list|()
expr_stmt|;
name|STORAGE_TYPE_SETTER
operator|=
name|createStorageTypeSetter
argument_list|()
expr_stmt|;
name|FILE_CREATER
operator|=
name|createFileCreater
argument_list|()
expr_stmt|;
name|LEASE_MANAGER
operator|=
name|createLeaseManager
argument_list|()
expr_stmt|;
name|DFS_CLIENT_ADAPTOR
operator|=
name|createDFSClientAdaptor
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|beginFileLease
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|inodeId
parameter_list|)
block|{
name|LEASE_MANAGER
operator|.
name|begin
argument_list|(
name|client
argument_list|,
name|src
argument_list|,
name|inodeId
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|endFileLease
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|inodeId
parameter_list|)
block|{
name|LEASE_MANAGER
operator|.
name|end
argument_list|(
name|client
argument_list|,
name|src
argument_list|,
name|inodeId
argument_list|)
expr_stmt|;
block|}
specifier|static
name|DataChecksum
name|createChecksum
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|DataChecksum
operator|)
name|CREATE_CHECKSUM
operator|.
name|invoke
argument_list|(
name|client
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|Status
name|getStatus
parameter_list|(
name|PipelineAckProto
name|ack
parameter_list|)
block|{
return|return
name|PIPELINE_ACK_STATUS_GETTER
operator|.
name|get
argument_list|(
name|ack
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|processWriteBlockResponse
parameter_list|(
name|Channel
name|channel
parameter_list|,
specifier|final
name|DatanodeInfo
name|dnInfo
parameter_list|,
specifier|final
name|Promise
argument_list|<
name|Channel
argument_list|>
name|promise
parameter_list|,
specifier|final
name|int
name|timeoutMs
parameter_list|)
block|{
name|channel
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|IdleStateHandler
argument_list|(
name|timeoutMs
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
operator|new
name|ProtobufVarint32FrameDecoder
argument_list|()
argument_list|,
operator|new
name|ProtobufDecoder
argument_list|(
name|BlockOpResponseProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SimpleChannelInboundHandler
argument_list|<
name|BlockOpResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|BlockOpResponseProto
name|resp
parameter_list|)
throws|throws
name|Exception
block|{
name|Status
name|pipelineStatus
init|=
name|resp
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|PipelineAck
operator|.
name|isRestartOOBStatus
argument_list|(
name|pipelineStatus
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"datanode "
operator|+
name|dnInfo
operator|+
literal|" is restarting"
argument_list|)
throw|;
block|}
name|String
name|logInfo
init|=
literal|"ack with firstBadLink as "
operator|+
name|resp
operator|.
name|getFirstBadLink
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|SUCCESS
condition|)
block|{
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|ERROR_ACCESS_TOKEN
condition|)
block|{
throw|throw
operator|new
name|InvalidBlockTokenException
argument_list|(
literal|"Got access token error"
operator|+
literal|", status message "
operator|+
name|resp
operator|.
name|getMessage
argument_list|()
operator|+
literal|", "
operator|+
name|logInfo
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got error"
operator|+
literal|", status="
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|", status message "
operator|+
name|resp
operator|.
name|getMessage
argument_list|()
operator|+
literal|", "
operator|+
name|logInfo
argument_list|)
throw|;
block|}
block|}
comment|// success
name|ChannelPipeline
name|p
init|=
name|ctx
operator|.
name|pipeline
argument_list|()
decl_stmt|;
for|for
control|(
name|ChannelHandler
name|handler
init|;
operator|(
name|handler
operator|=
name|p
operator|.
name|removeLast
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
comment|// do not remove all handlers because we may have wrap or unwrap handlers at the header
comment|// of pipeline.
if|if
condition|(
name|handler
operator|instanceof
name|IdleStateHandler
condition|)
block|{
break|break;
block|}
block|}
comment|// Disable auto read here. Enable it after we setup the streaming pipeline in
comment|// FanOutOneBLockAsyncDFSOutput.
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|config
argument_list|()
operator|.
name|setAutoRead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|promise
operator|.
name|trySuccess
argument_list|(
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|promise
operator|.
name|tryFailure
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"connection to "
operator|+
name|dnInfo
operator|+
literal|" is closed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|userEventTriggered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|evt
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|evt
operator|instanceof
name|IdleStateEvent
operator|&&
operator|(
operator|(
name|IdleStateEvent
operator|)
name|evt
operator|)
operator|.
name|state
argument_list|()
operator|==
name|READER_IDLE
condition|)
block|{
name|promise
operator|.
name|tryFailure
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Timeout("
operator|+
name|timeoutMs
operator|+
literal|"ms) waiting for response"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|userEventTriggered
argument_list|(
name|ctx
argument_list|,
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
name|promise
operator|.
name|tryFailure
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|requestWriteBlock
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|storageType
parameter_list|,
name|OpWriteBlockProto
operator|.
name|Builder
name|writeBlockProtoBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|OpWriteBlockProto
name|proto
init|=
name|STORAGE_TYPE_SETTER
operator|.
name|set
argument_list|(
name|writeBlockProtoBuilder
argument_list|,
name|storageType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|protoLen
init|=
name|proto
operator|.
name|getSerializedSize
argument_list|()
decl_stmt|;
name|ByteBuf
name|buffer
init|=
name|channel
operator|.
name|alloc
argument_list|()
operator|.
name|buffer
argument_list|(
literal|3
operator|+
name|CodedOutputStream
operator|.
name|computeRawVarint32Size
argument_list|(
name|protoLen
argument_list|)
operator|+
name|protoLen
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|writeShort
argument_list|(
name|DataTransferProtocol
operator|.
name|DATA_TRANSFER_VERSION
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeByte
argument_list|(
name|Op
operator|.
name|WRITE_BLOCK
operator|.
name|code
argument_list|)
expr_stmt|;
name|proto
operator|.
name|writeDelimitedTo
argument_list|(
operator|new
name|ByteBufOutputStream
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Channel
name|channel
parameter_list|,
specifier|final
name|DatanodeInfo
name|dnInfo
parameter_list|,
specifier|final
name|Enum
argument_list|<
name|?
argument_list|>
name|storageType
parameter_list|,
specifier|final
name|OpWriteBlockProto
operator|.
name|Builder
name|writeBlockProtoBuilder
parameter_list|,
specifier|final
name|int
name|timeoutMs
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
specifier|final
name|Promise
argument_list|<
name|Channel
argument_list|>
name|promise
parameter_list|)
block|{
name|Promise
argument_list|<
name|Void
argument_list|>
name|saslPromise
init|=
name|channel
operator|.
name|eventLoop
argument_list|()
operator|.
name|newPromise
argument_list|()
decl_stmt|;
name|trySaslNegotiate
argument_list|(
name|conf
argument_list|,
name|channel
argument_list|,
name|dnInfo
argument_list|,
name|timeoutMs
argument_list|,
name|client
argument_list|,
name|accessToken
argument_list|,
name|saslPromise
argument_list|)
expr_stmt|;
name|saslPromise
operator|.
name|addListener
argument_list|(
operator|new
name|FutureListener
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
comment|// setup response processing pipeline first, then send request.
name|processWriteBlockResponse
argument_list|(
name|channel
argument_list|,
name|dnInfo
argument_list|,
name|promise
argument_list|,
name|timeoutMs
argument_list|)
expr_stmt|;
name|requestWriteBlock
argument_list|(
name|channel
argument_list|,
name|storageType
argument_list|,
name|writeBlockProtoBuilder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|promise
operator|.
name|tryFailure
argument_list|(
name|future
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Future
argument_list|<
name|Channel
argument_list|>
argument_list|>
name|connectToDataNodes
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|DFSClient
name|client
parameter_list|,
name|String
name|clientName
parameter_list|,
specifier|final
name|LocatedBlock
name|locatedBlock
parameter_list|,
name|long
name|maxBytesRcvd
parameter_list|,
name|long
name|latestGS
parameter_list|,
name|BlockConstructionStage
name|stage
parameter_list|,
name|DataChecksum
name|summer
parameter_list|,
name|EventLoop
name|eventLoop
parameter_list|)
block|{
name|Enum
argument_list|<
name|?
argument_list|>
index|[]
name|storageTypes
init|=
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|datanodeInfos
init|=
name|locatedBlock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|boolean
name|connectToDnViaHostname
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_USE_DN_HOSTNAME
argument_list|,
name|DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|timeoutMs
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|blockCopy
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|locatedBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|blockCopy
operator|.
name|setNumBytes
argument_list|(
name|locatedBlock
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|ClientOperationHeaderProto
name|header
init|=
name|ClientOperationHeaderProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBaseHeader
argument_list|(
name|BaseHeaderProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|blockCopy
argument_list|)
argument_list|)
operator|.
name|setToken
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|locatedBlock
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setClientName
argument_list|(
name|clientName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ChecksumProto
name|checksumProto
init|=
name|DataTransferProtoUtil
operator|.
name|toProto
argument_list|(
name|summer
argument_list|)
decl_stmt|;
specifier|final
name|OpWriteBlockProto
operator|.
name|Builder
name|writeBlockProtoBuilder
init|=
name|OpWriteBlockProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
operator|.
name|setStage
argument_list|(
name|OpWriteBlockProto
operator|.
name|BlockConstructionStage
operator|.
name|valueOf
argument_list|(
name|stage
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPipelineSize
argument_list|(
literal|1
argument_list|)
operator|.
name|setMinBytesRcvd
argument_list|(
name|locatedBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|setMaxBytesRcvd
argument_list|(
name|maxBytesRcvd
argument_list|)
operator|.
name|setLatestGenerationStamp
argument_list|(
name|latestGS
argument_list|)
operator|.
name|setRequestedChecksum
argument_list|(
name|checksumProto
argument_list|)
operator|.
name|setCachingStrategy
argument_list|(
name|CachingStrategyProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDropBehind
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Channel
argument_list|>
argument_list|>
name|futureList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|datanodeInfos
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|datanodeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DatanodeInfo
name|dnInfo
init|=
name|datanodeInfos
index|[
name|i
index|]
decl_stmt|;
comment|// Use Enum here because StoregType is moved to another package in hadoop 2.6. Use StorageType
comment|// will cause compilation error for hadoop 2.5 or before.
specifier|final
name|Enum
argument_list|<
name|?
argument_list|>
name|storageType
init|=
name|storageTypes
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|Promise
argument_list|<
name|Channel
argument_list|>
name|promise
init|=
name|eventLoop
operator|.
name|newPromise
argument_list|()
decl_stmt|;
name|futureList
operator|.
name|add
argument_list|(
name|promise
argument_list|)
expr_stmt|;
name|String
name|dnAddr
init|=
name|dnInfo
operator|.
name|getXferAddr
argument_list|(
name|connectToDnViaHostname
argument_list|)
decl_stmt|;
operator|new
name|Bootstrap
argument_list|()
operator|.
name|group
argument_list|(
name|eventLoop
argument_list|)
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|option
argument_list|(
name|CONNECT_TIMEOUT_MILLIS
argument_list|,
name|timeoutMs
argument_list|)
operator|.
name|handler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initChannel
parameter_list|(
name|Channel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
comment|// we need to get the remote address of the channel so we can only move on after
comment|// channel connected. Leave an empty implementation here because netty does not allow
comment|// a null handler.
block|}
block|}
argument_list|)
operator|.
name|connect
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|dnAddr
argument_list|)
argument_list|)
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|initialize
argument_list|(
name|conf
argument_list|,
name|future
operator|.
name|channel
argument_list|()
argument_list|,
name|dnInfo
argument_list|,
name|storageType
argument_list|,
name|writeBlockProtoBuilder
argument_list|,
name|timeoutMs
argument_list|,
name|client
argument_list|,
name|locatedBlock
operator|.
name|getBlockToken
argument_list|()
argument_list|,
name|promise
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|promise
operator|.
name|tryFailure
argument_list|(
name|future
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|futureList
return|;
block|}
comment|/**    * Exception other than RemoteException thrown when calling create on namenode    */
specifier|public
specifier|static
class|class
name|NameNodeException
extends|extends
name|IOException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3143237406477095390L
decl_stmt|;
specifier|public
name|NameNodeException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|FanOutOneBlockAsyncDFSOutput
name|createOutput
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|String
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|EventLoop
name|eventLoop
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|FSUtils
name|fsUtils
init|=
name|FSUtils
operator|.
name|getInstance
argument_list|(
name|dfs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
name|dfs
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|clientName
init|=
name|client
operator|.
name|getClientName
argument_list|()
decl_stmt|;
name|ClientProtocol
name|namenode
init|=
name|client
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|HdfsFileStatus
name|stat
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|FILE_CREATER
operator|.
name|create
argument_list|(
name|namenode
argument_list|,
name|src
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|clientName
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
argument_list|(
name|overwrite
condition|?
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
else|:
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|)
argument_list|)
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
throw|throw
operator|(
name|RemoteException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|NameNodeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|beginFileLease
argument_list|(
name|client
argument_list|,
name|src
argument_list|,
name|stat
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|succ
init|=
literal|false
decl_stmt|;
name|LocatedBlock
name|locatedBlock
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Channel
argument_list|>
argument_list|>
name|futureList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DataChecksum
name|summer
init|=
name|createChecksum
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|locatedBlock
operator|=
name|namenode
operator|.
name|addBlock
argument_list|(
name|src
argument_list|,
name|client
operator|.
name|getClientName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|stat
operator|.
name|getFileId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Channel
argument_list|>
name|datanodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|futureList
operator|=
name|connectToDataNodes
argument_list|(
name|conf
argument_list|,
name|client
argument_list|,
name|clientName
argument_list|,
name|locatedBlock
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
name|PIPELINE_SETUP_CREATE
argument_list|,
name|summer
argument_list|,
name|eventLoop
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Channel
argument_list|>
name|future
range|:
name|futureList
control|)
block|{
comment|// fail the creation if there are connection failures since we are fail-fast. The upper
comment|// layer should retry itself if needed.
name|datanodeList
operator|.
name|add
argument_list|(
name|future
operator|.
name|syncUninterruptibly
argument_list|()
operator|.
name|getNow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|succ
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|FanOutOneBlockAsyncDFSOutput
argument_list|(
name|conf
argument_list|,
name|fsUtils
argument_list|,
name|dfs
argument_list|,
name|client
argument_list|,
name|namenode
argument_list|,
name|clientName
argument_list|,
name|src
argument_list|,
name|stat
operator|.
name|getFileId
argument_list|()
argument_list|,
name|locatedBlock
argument_list|,
name|eventLoop
argument_list|,
name|datanodeList
argument_list|,
name|summer
argument_list|,
name|ALLOC
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|succ
condition|)
block|{
if|if
condition|(
name|futureList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Future
argument_list|<
name|Channel
argument_list|>
name|f
range|:
name|futureList
control|)
block|{
name|f
operator|.
name|addListener
argument_list|(
operator|new
name|FutureListener
argument_list|<
name|Channel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|Future
argument_list|<
name|Channel
argument_list|>
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|future
operator|.
name|getNow
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|endFileLease
argument_list|(
name|client
argument_list|,
name|src
argument_list|,
name|stat
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|fsUtils
operator|.
name|recoverFileLease
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
name|conf
argument_list|,
operator|new
name|CancelOnClose
argument_list|(
name|client
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a {@link FanOutOneBlockAsyncDFSOutput}. The method maybe blocked so do not call it    * inside {@link EventLoop}.    * @param eventLoop all connections to datanode will use the same event loop.    */
specifier|public
specifier|static
name|FanOutOneBlockAsyncDFSOutput
name|createOutput
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|f
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|EventLoop
name|eventLoop
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileSystemLinkResolver
argument_list|<
name|FanOutOneBlockAsyncDFSOutput
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FanOutOneBlockAsyncDFSOutput
name|doCall
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|createOutput
argument_list|(
name|dfs
argument_list|,
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|overwrite
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|eventLoop
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FanOutOneBlockAsyncDFSOutput
name|next
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
operator|.
name|resolve
argument_list|(
name|dfs
argument_list|,
name|f
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|shouldRetryCreate
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|// RetryStartFileException is introduced in HDFS 2.6+, so here we can only use the class name.
comment|// For exceptions other than this, we just throw it out. This is same with
comment|// DFSOutputStream.newStreamForCreate.
return|return
name|e
operator|.
name|getClassName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"RetryStartFileException"
argument_list|)
return|;
block|}
specifier|static
name|void
name|completeFile
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|ClientProtocol
name|namenode
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|,
name|long
name|fileId
parameter_list|)
block|{
for|for
control|(
name|int
name|retry
init|=
literal|0
init|;
condition|;
name|retry
operator|++
control|)
block|{
try|try
block|{
if|if
condition|(
name|namenode
operator|.
name|complete
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
name|block
argument_list|,
name|fileId
argument_list|)
condition|)
block|{
name|endFileLease
argument_list|(
name|client
argument_list|,
name|src
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"complete file "
operator|+
name|src
operator|+
literal|" not finished, retry = "
operator|+
name|retry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LeaseExpiredException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"lease for file "
operator|+
name|src
operator|+
literal|" is expired, give up"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"complete file "
operator|+
name|src
operator|+
literal|" failed, retry = "
operator|+
name|retry
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|sleepIgnoreInterrupt
argument_list|(
name|retry
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|sleepIgnoreInterrupt
parameter_list|(
name|int
name|retry
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
literal|100
argument_list|,
name|retry
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

