begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractWALRoller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Runs periodically to determine if the WAL should be rolled.  *  * NOTE: This class extends Thread rather than Chore because the sleep time  * can be interrupted when there is something to do, rather than the Chore  * sleep time which is invariant.  *  * TODO: change to a pool of threads  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
specifier|public
class|class
name|LogRoller
extends|extends
name|AbstractWALRoller
argument_list|<
name|RegionServerServices
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogRoller
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|LogRoller
parameter_list|(
name|RegionServerServices
name|services
parameter_list|)
block|{
name|super
argument_list|(
literal|"LogRoller"
argument_list|,
name|services
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scheduleFlush
parameter_list|(
name|String
name|encodedRegionName
parameter_list|)
block|{
name|RegionServerServices
name|services
init|=
name|this
operator|.
name|abortable
decl_stmt|;
name|HRegion
name|r
init|=
operator|(
name|HRegion
operator|)
name|services
operator|.
name|getRegion
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to schedule flush of {}, because it is not online on us"
argument_list|,
name|encodedRegionName
argument_list|)
expr_stmt|;
return|return;
block|}
name|FlushRequester
name|requester
init|=
name|services
operator|.
name|getFlushRequester
argument_list|()
decl_stmt|;
if|if
condition|(
name|requester
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to schedule flush of {}, region={}, because FlushRequester is null"
argument_list|,
name|encodedRegionName
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// force flushing all stores to clean old logs
name|requester
operator|.
name|requestFlush
argument_list|(
name|r
argument_list|,
literal|true
argument_list|,
name|FlushLifeCycleTracker
operator|.
name|DUMMY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|Map
argument_list|<
name|WAL
argument_list|,
name|Boolean
argument_list|>
name|getWalNeedsRoll
parameter_list|()
block|{
return|return
name|this
operator|.
name|walNeedsRoll
return|;
block|}
block|}
end_class

end_unit

