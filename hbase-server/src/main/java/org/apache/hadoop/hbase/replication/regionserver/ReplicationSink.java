begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DaemonThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|metrics
operator|.
name|ReplicationSinkMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This class is responsible for replicating the edits coming  * from another cluster.  *<p/>  * This replication process is currently waiting for the edits to be applied  * before the method can return. This means that the replication of edits  * is synchronized (after reading from HLogs in ReplicationSource) and that a  * single region server cannot receive edits from two sources at the same time  *<p/>  * This class uses the native HBase client in order to replicate entries.  *<p/>  *  * TODO make this class more like ReplicationSource wrt log handling  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationSink
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationSink
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Name of the HDFS directory that contains the temporary rep logs
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_LOG_DIR
init|=
literal|".replogs"
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|sharedThreadPool
decl_stmt|;
specifier|private
specifier|final
name|HConnection
name|sharedHtableCon
decl_stmt|;
specifier|private
specifier|final
name|ReplicationSinkMetrics
name|metrics
decl_stmt|;
comment|/**    * Create a sink for replication    *    * @param conf                conf object    * @param stopper             boolean to tell this thread to stop    * @throws IOException thrown when HDFS goes bad or bad file name    */
specifier|public
name|ReplicationSink
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Stoppable
name|stopper
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|decorateConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
operator|new
name|ReplicationSinkMetrics
argument_list|()
expr_stmt|;
name|this
operator|.
name|sharedHtableCon
operator|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|sharedThreadPool
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.htable.threads.max"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.htable.threads.keepalivetime"
argument_list|,
literal|60
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DaemonThreadFactory
argument_list|(
literal|"hbase-repl"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|this
operator|.
name|sharedThreadPool
operator|)
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * decorate the Configuration object to make replication more receptive to delays:    * lessen the timeout and numTries.    */
specifier|private
name|void
name|decorateConf
parameter_list|()
block|{
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.sink.client.retries.number"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|,
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.sink.client.ops.timeout"
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replicate this array of entries directly into the local cluster    * using the native client.    *    * @param entries    * @throws IOException    */
specifier|public
name|void
name|replicateEntries
parameter_list|(
name|HLog
operator|.
name|Entry
index|[]
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entries
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// Very simple optimization where we batch sequences of rows going
comment|// to the same table.
try|try
block|{
name|long
name|totalReplicated
init|=
literal|0
decl_stmt|;
comment|// Map of table => list of Rows, we only want to flushCommits once per
comment|// invocation of this method per table.
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Row
argument_list|>
argument_list|>
name|rows
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Row
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|HLog
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|byte
index|[]
name|table
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|Delete
name|del
init|=
literal|null
decl_stmt|;
name|KeyValue
name|lastKV
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
name|edit
operator|.
name|getKeyValues
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
if|if
condition|(
name|lastKV
operator|==
literal|null
operator|||
name|lastKV
operator|.
name|getType
argument_list|()
operator|!=
name|kv
operator|.
name|getType
argument_list|()
operator|||
operator|!
name|lastKV
operator|.
name|matchingRow
argument_list|(
name|kv
argument_list|)
condition|)
block|{
if|if
condition|(
name|kv
operator|.
name|isDelete
argument_list|()
condition|)
block|{
name|del
operator|=
operator|new
name|Delete
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|setClusterId
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|addToMultiMap
argument_list|(
name|rows
argument_list|,
name|table
argument_list|,
name|del
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|setClusterId
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|addToMultiMap
argument_list|(
name|rows
argument_list|,
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|kv
operator|.
name|isDelete
argument_list|()
condition|)
block|{
name|del
operator|.
name|addDeleteMarker
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|lastKV
operator|=
name|kv
expr_stmt|;
block|}
name|totalReplicated
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Row
argument_list|>
argument_list|>
name|entry
range|:
name|rows
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|batch
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|metrics
operator|.
name|setAgeOfLastAppliedOp
argument_list|(
name|entries
index|[
name|entries
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|getWriteTime
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|applyBatch
argument_list|(
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total replicated: "
operator|+
name|totalReplicated
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to accept edit because:"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Simple helper to a map from key to (a list of) values    * TODO: Make a general utility method    * @param map    * @param key    * @param value    * @return    */
specifier|private
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|List
argument_list|<
name|V
argument_list|>
name|addToMultiMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|V
argument_list|>
name|values
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
comment|/**    * stop the thread pool executor. It is called when the regionserver is stopped.    */
specifier|public
name|void
name|stopReplicationSinkServices
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|sharedThreadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|sharedThreadPool
operator|.
name|awaitTermination
argument_list|(
literal|60000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
name|this
operator|.
name|sharedThreadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while closing the table pool"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// ignoring it as we are closing.
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|sharedHtableCon
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IOException while closing the connection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// ignoring as we are closing.
block|}
block|}
comment|/**    * Do the changes and handle the pool    * @param tableName table to insert into    * @param rows list of actions    * @throws IOException    */
specifier|private
name|void
name|batch
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|List
argument_list|<
name|Row
argument_list|>
name|rows
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|HTableInterface
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|,
name|this
operator|.
name|sharedHtableCon
argument_list|,
name|this
operator|.
name|sharedThreadPool
argument_list|)
expr_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ix
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ix
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

