begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitWALManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureYieldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|StateMachineProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_comment
comment|/**  * The procedure is to split a WAL. It will get an available region server and  * schedule a {@link SplitWALRemoteProcedure} to actually send the request to region  * server to split this WAL.  * It also check if the split wal task really succeed. If the WAL still exists, it will  * schedule another region server to split this WAL.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitWALProcedure
extends|extends
name|StateMachineProcedure
argument_list|<
name|MasterProcedureEnv
argument_list|,
name|MasterProcedureProtos
operator|.
name|SplitWALState
argument_list|>
implements|implements
name|ServerProcedureInterface
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplitWALProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|walPath
decl_stmt|;
specifier|private
name|ServerName
name|worker
decl_stmt|;
specifier|private
name|ServerName
name|crashedServer
decl_stmt|;
specifier|private
name|int
name|attempts
init|=
literal|0
decl_stmt|;
specifier|public
name|SplitWALProcedure
parameter_list|()
block|{   }
specifier|public
name|SplitWALProcedure
parameter_list|(
name|String
name|walPath
parameter_list|,
name|ServerName
name|crashedServer
parameter_list|)
block|{
name|this
operator|.
name|walPath
operator|=
name|walPath
expr_stmt|;
name|this
operator|.
name|crashedServer
operator|=
name|crashedServer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Flow
name|executeFromState
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|MasterProcedureProtos
operator|.
name|SplitWALState
name|state
parameter_list|)
throws|throws
name|ProcedureSuspendedException
throws|,
name|ProcedureYieldException
throws|,
name|InterruptedException
block|{
name|SplitWALManager
name|splitWALManager
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getSplitWALManager
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|ACQUIRE_SPLIT_WAL_WORKER
case|:
name|worker
operator|=
name|splitWALManager
operator|.
name|acquireSplitWALWorker
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|MasterProcedureProtos
operator|.
name|SplitWALState
operator|.
name|DISPATCH_WAL_TO_WORKER
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
case|case
name|DISPATCH_WAL_TO_WORKER
case|:
assert|assert
name|worker
operator|!=
literal|null
assert|;
name|addChildProcedure
argument_list|(
operator|new
name|SplitWALRemoteProcedure
argument_list|(
name|worker
argument_list|,
name|crashedServer
argument_list|,
name|walPath
argument_list|)
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|MasterProcedureProtos
operator|.
name|SplitWALState
operator|.
name|RELEASE_SPLIT_WORKER
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
case|case
name|RELEASE_SPLIT_WORKER
case|:
name|boolean
name|finished
decl_stmt|;
try|try
block|{
name|finished
operator|=
name|splitWALManager
operator|.
name|isSplitWALFinished
argument_list|(
name|walPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|long
name|backoff
init|=
name|ProcedureUtil
operator|.
name|getBackoffTimeMs
argument_list|(
name|attempts
operator|++
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to check whether splitting wal {} success, wait {} seconds to retry"
argument_list|,
name|walPath
argument_list|,
name|backoff
operator|/
literal|1000
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|suspend
argument_list|(
name|backoff
argument_list|)
throw|;
block|}
name|splitWALManager
operator|.
name|releaseSplitWALWorker
argument_list|(
name|worker
argument_list|,
name|env
operator|.
name|getProcedureScheduler
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finished
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to split wal {} by server {}, retry..."
argument_list|,
name|walPath
argument_list|,
name|worker
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|MasterProcedureProtos
operator|.
name|SplitWALState
operator|.
name|ACQUIRE_SPLIT_WAL_WORKER
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
block|}
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollbackState
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|MasterProcedureProtos
operator|.
name|SplitWALState
name|splitOneWalState
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|splitOneWalState
operator|==
name|getInitialState
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|MasterProcedureProtos
operator|.
name|SplitWALState
name|getState
parameter_list|(
name|int
name|stateId
parameter_list|)
block|{
return|return
name|MasterProcedureProtos
operator|.
name|SplitWALState
operator|.
name|forNumber
argument_list|(
name|stateId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getStateId
parameter_list|(
name|MasterProcedureProtos
operator|.
name|SplitWALState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|getNumber
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MasterProcedureProtos
operator|.
name|SplitWALState
name|getInitialState
parameter_list|()
block|{
return|return
name|MasterProcedureProtos
operator|.
name|SplitWALState
operator|.
name|ACQUIRE_SPLIT_WAL_WORKER
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|MasterProcedureProtos
operator|.
name|SplitWALData
operator|.
name|Builder
name|builder
init|=
name|MasterProcedureProtos
operator|.
name|SplitWALData
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setWalPath
argument_list|(
name|walPath
argument_list|)
operator|.
name|setCrashedServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|crashedServer
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|worker
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setWorker
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|worker
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|serialize
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|MasterProcedureProtos
operator|.
name|SplitWALData
name|data
init|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|MasterProcedureProtos
operator|.
name|SplitWALData
operator|.
name|class
argument_list|)
decl_stmt|;
name|walPath
operator|=
name|data
operator|.
name|getWalPath
argument_list|()
expr_stmt|;
name|crashedServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
operator|.
name|getCrashedServer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|hasWorker
argument_list|()
condition|)
block|{
name|worker
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
operator|.
name|getWorker
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|boolean
name|setTimeoutFailure
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|setState
argument_list|(
name|ProcedureProtos
operator|.
name|ProcedureState
operator|.
name|RUNNABLE
argument_list|)
expr_stmt|;
name|env
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|addFront
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|protected
specifier|final
name|ProcedureSuspendedException
name|suspend
parameter_list|(
name|long
name|backoff
parameter_list|)
throws|throws
name|ProcedureSuspendedException
block|{
name|attempts
operator|++
expr_stmt|;
name|setTimeout
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|backoff
argument_list|)
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|ProcedureProtos
operator|.
name|ProcedureState
operator|.
name|WAITING_TIMEOUT
argument_list|)
expr_stmt|;
name|skipPersistence
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ProcedureSuspendedException
argument_list|()
throw|;
block|}
specifier|public
name|String
name|getWAL
parameter_list|()
block|{
return|return
name|walPath
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|ServerName
name|getWorker
parameter_list|()
block|{
return|return
name|worker
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|this
operator|.
name|crashedServer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMetaTableRegion
parameter_list|()
block|{
return|return
name|AbstractFSWALProvider
operator|.
name|isMetaFile
argument_list|(
operator|new
name|Path
argument_list|(
name|walPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerOperationType
name|getServerOperationType
parameter_list|()
block|{
return|return
name|ServerOperationType
operator|.
name|SPLIT_WAL
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterReplay
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|worker
operator|!=
literal|null
condition|)
block|{
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getSplitWALManager
argument_list|()
operator|.
name|addUsedSplitWALWorker
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

