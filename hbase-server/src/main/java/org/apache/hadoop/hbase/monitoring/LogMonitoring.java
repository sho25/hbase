begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|FileAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Utility functions for reading the log4j logs that are  * being written by HBase.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|LogMonitoring
block|{
specifier|public
specifier|static
name|Set
argument_list|<
name|File
argument_list|>
name|getActiveLogFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|ret
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Appender
name|a
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Enumeration
argument_list|<
name|Appender
argument_list|>
name|e
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getAllAppenders
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|a
operator|=
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|FileAppender
condition|)
block|{
name|FileAppender
name|fa
init|=
operator|(
name|FileAppender
operator|)
name|a
decl_stmt|;
name|String
name|filename
init|=
name|fa
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|void
name|dumpTailOfLogs
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|long
name|tailKb
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|logs
init|=
name|LogMonitoring
operator|.
name|getActiveLogFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|logs
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"+++++++++++++++++++++++++++++++"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"+++++++++++++++++++++++++++++++"
argument_list|)
expr_stmt|;
try|try
block|{
name|dumpTailOfLog
argument_list|(
name|f
argument_list|,
name|out
argument_list|,
name|tailKb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Unable to dump log at "
operator|+
name|f
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|dumpTailOfLog
parameter_list|(
name|File
name|f
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|long
name|tailKb
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|BufferedReader
name|r
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileChannel
name|channel
init|=
name|fis
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|channel
operator|.
name|position
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|channel
operator|.
name|size
argument_list|()
operator|-
name|tailKb
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fis
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|readLine
argument_list|()
expr_stmt|;
comment|// skip the first partial line
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

