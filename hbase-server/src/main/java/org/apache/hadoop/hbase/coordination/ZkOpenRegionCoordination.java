begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * ZK-based implementation of {@link OpenRegionCoordination}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZkOpenRegionCoordination
implements|implements
name|OpenRegionCoordination
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZkOpenRegionCoordination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CoordinatedStateManager
name|coordination
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
specifier|public
name|ZkOpenRegionCoordination
parameter_list|(
name|CoordinatedStateManager
name|coordination
parameter_list|,
name|ZooKeeperWatcher
name|watcher
parameter_list|)
block|{
name|this
operator|.
name|coordination
operator|=
name|coordination
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
name|watcher
expr_stmt|;
block|}
comment|//-------------------------------
comment|// Region Server-side operations
comment|//-------------------------------
comment|/**    * @param r Region we're working on.    * @return whether znode is successfully transitioned to OPENED state.    * @throws java.io.IOException    */
annotation|@
name|Override
specifier|public
name|boolean
name|transitionToOpened
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
name|OpenRegionDetails
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
name|ZkOpenRegionDetails
name|zkOrd
init|=
operator|(
name|ZkOpenRegionDetails
operator|)
name|ord
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|r
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
comment|// Finally, Transition ZK node to OPENED
try|try
block|{
if|if
condition|(
name|ZKAssign
operator|.
name|transitionNodeOpened
argument_list|(
name|watcher
argument_list|,
name|hri
argument_list|,
name|zkOrd
operator|.
name|getServerName
argument_list|()
argument_list|,
name|zkOrd
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|String
name|warnMsg
init|=
literal|"Completed the OPEN of region "
operator|+
name|name
operator|+
literal|" but when transitioning from "
operator|+
literal|" OPENING to OPENED "
decl_stmt|;
try|try
block|{
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|watcher
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// if the znode
name|coordination
operator|.
name|getServer
argument_list|()
operator|.
name|abort
argument_list|(
name|warnMsg
operator|+
literal|"the znode disappeared"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|warnMsg
operator|+
literal|"got a version mismatch, someone else clashed; "
operator|+
literal|"so now unassigning -- closing region on server: "
operator|+
name|zkOrd
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|coordination
operator|.
name|getServer
argument_list|()
operator|.
name|abort
argument_list|(
name|warnMsg
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transitioned "
operator|+
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" to OPENED in zk on "
operator|+
name|zkOrd
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed transitioning node "
operator|+
name|name
operator|+
literal|" from OPENING to OPENED -- closing region"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Transition ZK node from OFFLINE to OPENING.    * @param regionInfo region info instance    * @param ord - instance of open region details, for ZK implementation    *   will include version Of OfflineNode that needs to be compared    *   before changing the node's state from OFFLINE    * @return True if successful transition.    */
annotation|@
name|Override
specifier|public
name|boolean
name|transitionFromOfflineToOpening
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|OpenRegionDetails
name|ord
parameter_list|)
block|{
name|ZkOpenRegionDetails
name|zkOrd
init|=
operator|(
name|ZkOpenRegionDetails
operator|)
name|ord
decl_stmt|;
comment|// encoded name is used as znode encoded name in ZK
specifier|final
name|String
name|encodedName
init|=
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
comment|// TODO: should also handle transition from CLOSED?
try|try
block|{
comment|// Initialize the znode version.
name|zkOrd
operator|.
name|setVersion
argument_list|(
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|watcher
argument_list|,
name|regionInfo
argument_list|,
name|zkOrd
operator|.
name|getServerName
argument_list|()
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|zkOrd
operator|.
name|getVersionOfOfflineNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error transition from OFFLINE to OPENING for region="
operator|+
name|encodedName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkOrd
operator|.
name|setVersion
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|b
init|=
name|isGoodVersion
argument_list|(
name|zkOrd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed transition from OFFLINE to OPENING for region="
operator|+
name|encodedName
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
comment|/**    * Update our OPENING state in zookeeper.    * Do this so master doesn't timeout this region-in-transition.    * We may lose the znode ownership during the open.  Currently its    * too hard interrupting ongoing region open.  Just let it complete    * and check we still have the znode after region open.    *    * @param context Some context to add to logs if failure    * @return True if successful transition.    */
annotation|@
name|Override
specifier|public
name|boolean
name|tickleOpening
parameter_list|(
name|OpenRegionDetails
name|ord
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|RegionServerServices
name|rsServices
parameter_list|,
specifier|final
name|String
name|context
parameter_list|)
block|{
name|ZkOpenRegionDetails
name|zkOrd
init|=
operator|(
name|ZkOpenRegionDetails
operator|)
name|ord
decl_stmt|;
if|if
condition|(
operator|!
name|isRegionStillOpening
argument_list|(
name|regionInfo
argument_list|,
name|rsServices
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Open region aborted since it isn't opening any more"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// If previous checks failed... do not try again.
if|if
condition|(
operator|!
name|isGoodVersion
argument_list|(
name|zkOrd
argument_list|)
condition|)
return|return
literal|false
return|;
name|String
name|encodedName
init|=
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
try|try
block|{
name|zkOrd
operator|.
name|setVersion
argument_list|(
name|ZKAssign
operator|.
name|confirmNodeOpening
argument_list|(
name|watcher
argument_list|,
name|regionInfo
argument_list|,
name|zkOrd
operator|.
name|getServerName
argument_list|()
argument_list|,
name|zkOrd
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|coordination
operator|.
name|getServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"Exception refreshing OPENING; region="
operator|+
name|encodedName
operator|+
literal|", context="
operator|+
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkOrd
operator|.
name|setVersion
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|b
init|=
name|isGoodVersion
argument_list|(
name|zkOrd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed refreshing OPENING; region="
operator|+
name|encodedName
operator|+
literal|", context="
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
comment|/**    * Try to transition to open.    *    * This is not guaranteed to succeed, we just do our best.    *    * @param rsServices    * @param hri Region we're working on.    * @param ord Details about region open task    * @return whether znode is successfully transitioned to FAILED_OPEN state.    */
annotation|@
name|Override
specifier|public
name|boolean
name|tryTransitionFromOfflineToFailedOpen
parameter_list|(
name|RegionServerServices
name|rsServices
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|OpenRegionDetails
name|ord
parameter_list|)
block|{
name|ZkOpenRegionDetails
name|zkOrd
init|=
operator|(
name|ZkOpenRegionDetails
operator|)
name|ord
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Opening of region "
operator|+
name|hri
operator|+
literal|" failed, transitioning"
operator|+
literal|" from OFFLINE to FAILED_OPEN in ZK, expecting version "
operator|+
name|zkOrd
operator|.
name|getVersionOfOfflineNode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|rsServices
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|hri
argument_list|,
name|rsServices
operator|.
name|getServerName
argument_list|()
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_FAILED_OPEN
argument_list|,
name|zkOrd
operator|.
name|getVersionOfOfflineNode
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to mark region "
operator|+
name|hri
operator|+
literal|" as FAILED_OPEN. "
operator|+
literal|"It's likely that the master already timed out this open "
operator|+
literal|"attempt, and thus another RS already has the region."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed transitioning node "
operator|+
name|name
operator|+
literal|" from OFFLINE to FAILED_OPEN"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|isGoodVersion
parameter_list|(
name|ZkOpenRegionDetails
name|zkOrd
parameter_list|)
block|{
return|return
name|zkOrd
operator|.
name|getVersion
argument_list|()
operator|!=
operator|-
literal|1
return|;
block|}
comment|/**    * This is not guaranteed to succeed, we just do our best.    * @param hri Region we're working on.    * @return whether znode is successfully transitioned to FAILED_OPEN state.    */
annotation|@
name|Override
specifier|public
name|boolean
name|tryTransitionFromOpeningToFailedOpen
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|OpenRegionDetails
name|ord
parameter_list|)
block|{
name|ZkOpenRegionDetails
name|zkOrd
init|=
operator|(
name|ZkOpenRegionDetails
operator|)
name|ord
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Opening of region "
operator|+
name|hri
operator|+
literal|" failed, transitioning"
operator|+
literal|" from OPENING to FAILED_OPEN in ZK, expecting version "
operator|+
name|zkOrd
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|watcher
argument_list|,
name|hri
argument_list|,
name|zkOrd
operator|.
name|getServerName
argument_list|()
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_FAILED_OPEN
argument_list|,
name|zkOrd
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to mark region "
operator|+
name|hri
operator|+
literal|" as FAILED_OPEN. "
operator|+
literal|"It's likely that the master already timed out this open "
operator|+
literal|"attempt, and thus another RS already has the region."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed transitioning node "
operator|+
name|name
operator|+
literal|" from OPENING to FAILED_OPEN"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Parse ZK-related fields from request.    */
annotation|@
name|Override
specifier|public
name|OpenRegionCoordination
operator|.
name|OpenRegionDetails
name|parseFromProtoRequest
parameter_list|(
name|AdminProtos
operator|.
name|OpenRegionRequest
operator|.
name|RegionOpenInfo
name|regionOpenInfo
parameter_list|)
block|{
name|ZkOpenRegionCoordination
operator|.
name|ZkOpenRegionDetails
name|zkCrd
init|=
operator|new
name|ZkOpenRegionCoordination
operator|.
name|ZkOpenRegionDetails
argument_list|()
decl_stmt|;
name|int
name|versionOfOfflineNode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|regionOpenInfo
operator|.
name|hasVersionOfOfflineNode
argument_list|()
condition|)
block|{
name|versionOfOfflineNode
operator|=
name|regionOpenInfo
operator|.
name|getVersionOfOfflineNode
argument_list|()
expr_stmt|;
block|}
name|zkCrd
operator|.
name|setVersionOfOfflineNode
argument_list|(
name|versionOfOfflineNode
argument_list|)
expr_stmt|;
name|zkCrd
operator|.
name|setServerName
argument_list|(
name|coordination
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|zkCrd
return|;
block|}
comment|/**    * No ZK tracking will be performed for that case.    * This method should be used when we want to construct CloseRegionDetails,    * but don't want any coordination on that (when it's initiated by regionserver),    * so no znode state transitions will be performed.    */
annotation|@
name|Override
specifier|public
name|OpenRegionCoordination
operator|.
name|OpenRegionDetails
name|getDetailsForNonCoordinatedOpening
parameter_list|()
block|{
name|ZkOpenRegionCoordination
operator|.
name|ZkOpenRegionDetails
name|zkCrd
init|=
operator|new
name|ZkOpenRegionCoordination
operator|.
name|ZkOpenRegionDetails
argument_list|()
decl_stmt|;
name|zkCrd
operator|.
name|setVersionOfOfflineNode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|zkCrd
operator|.
name|setServerName
argument_list|(
name|coordination
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|zkCrd
return|;
block|}
comment|//--------------------------
comment|// HMaster-side operations
comment|//--------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|commitOpenOnMasterSide
parameter_list|(
name|AssignmentManager
name|assignmentManager
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|OpenRegionDetails
name|ord
parameter_list|)
block|{
name|boolean
name|committedSuccessfully
init|=
literal|true
decl_stmt|;
comment|// Code to defend against case where we get SPLIT before region open
comment|// processing completes; temporary till we make SPLITs go via zk -- 0.92.
name|RegionState
name|regionState
init|=
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionTransitionState
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|openedNodeDeleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|regionState
operator|!=
literal|null
operator|&&
name|regionState
operator|.
name|isOpened
argument_list|()
condition|)
block|{
name|openedNodeDeleted
operator|=
name|deleteOpenedNode
argument_list|(
name|regionInfo
argument_list|,
name|ord
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|openedNodeDeleted
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Znode of region "
operator|+
name|regionInfo
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" could not be deleted."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping the onlining of "
operator|+
name|regionInfo
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" because regions is NOT in RIT -- presuming this is because it SPLIT"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|openedNodeDeleted
condition|)
block|{
if|if
condition|(
name|assignmentManager
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLING
argument_list|)
condition|)
block|{
name|debugLog
argument_list|(
name|regionInfo
argument_list|,
literal|"Opened region "
operator|+
name|regionInfo
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" but "
operator|+
literal|"this table is disabled, triggering close of region"
argument_list|)
expr_stmt|;
name|committedSuccessfully
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|committedSuccessfully
return|;
block|}
specifier|private
name|boolean
name|deleteOpenedNode
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|OpenRegionDetails
name|ord
parameter_list|)
block|{
name|ZkOpenRegionDetails
name|zkOrd
init|=
operator|(
name|ZkOpenRegionDetails
operator|)
name|ord
decl_stmt|;
name|int
name|expectedVersion
init|=
name|zkOrd
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|debugLog
argument_list|(
name|regionInfo
argument_list|,
literal|"Handling OPENED of "
operator|+
name|regionInfo
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" from "
operator|+
name|zkOrd
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"; deleting unassigned node"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// delete the opened znode only if the version matches.
return|return
name|ZKAssign
operator|.
name|deleteNode
argument_list|(
name|this
operator|.
name|coordination
operator|.
name|getServer
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENED
argument_list|,
name|expectedVersion
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// Getting no node exception here means that already the region has been opened.
name|LOG
operator|.
name|warn
argument_list|(
literal|"The znode of the region "
operator|+
name|regionInfo
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" would have already been deleted"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|coordination
operator|.
name|getServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"Error deleting OPENED node in ZK ("
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|debugLog
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|region
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Additional classes and helper methods
comment|/**    * ZK-based implementation. Has details about whether the state transition should be    * reflected in ZK, as well as expected version of znode.    */
specifier|public
specifier|static
class|class
name|ZkOpenRegionDetails
implements|implements
name|OpenRegionCoordination
operator|.
name|OpenRegionDetails
block|{
comment|// We get version of our znode at start of open process and monitor it across
comment|// the total open. We'll fail the open if someone hijacks our znode; we can
comment|// tell this has happened if version is not as expected.
specifier|private
specifier|volatile
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
comment|//version of the offline node that was set by the master
specifier|private
specifier|volatile
name|int
name|versionOfOfflineNode
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Server name the handler is running on.      */
specifier|private
name|ServerName
name|serverName
decl_stmt|;
specifier|public
name|ZkOpenRegionDetails
parameter_list|()
block|{     }
specifier|public
name|ZkOpenRegionDetails
parameter_list|(
name|int
name|versionOfOfflineNode
parameter_list|)
block|{
name|this
operator|.
name|versionOfOfflineNode
operator|=
name|versionOfOfflineNode
expr_stmt|;
block|}
specifier|public
name|int
name|getVersionOfOfflineNode
parameter_list|()
block|{
return|return
name|versionOfOfflineNode
return|;
block|}
specifier|public
name|void
name|setVersionOfOfflineNode
parameter_list|(
name|int
name|versionOfOfflineNode
parameter_list|)
block|{
name|this
operator|.
name|versionOfOfflineNode
operator|=
name|versionOfOfflineNode
expr_stmt|;
block|}
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|serverName
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setServerName
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isRegionStillOpening
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|RegionServerServices
name|rsServices
parameter_list|)
block|{
name|byte
index|[]
name|encodedName
init|=
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|Boolean
name|action
init|=
name|rsServices
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|action
argument_list|)
return|;
comment|// true means opening for RIT
block|}
block|}
end_class

end_unit

