begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|KVComparator
import|;
end_import

begin_comment
comment|/**  * ReversedKeyValueHeap is used for supporting reversed scanning. Compared with  * KeyValueHeap, its scanner comparator is a little different (see  * ReversedKVScannerComparator), all seek is backward seek(see  * {@link KeyValueScanner#backwardSeek}), and it will jump to the previous row  * if it is already at the end of one row when calling next().  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReversedKeyValueHeap
extends|extends
name|KeyValueHeap
block|{
comment|/**    * @param scanners    * @param comparator    * @throws IOException    */
specifier|public
name|ReversedKeyValueHeap
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|KVComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|scanners
argument_list|,
operator|new
name|ReversedKVScannerComparator
argument_list|(
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seek
parameter_list|(
name|KeyValue
name|seekKey
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"seek cannot be called on ReversedKeyValueHeap"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|reseek
parameter_list|(
name|KeyValue
name|seekKey
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"reseek cannot be called on ReversedKeyValueHeap"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|requestSeek
parameter_list|(
name|KeyValue
name|key
parameter_list|,
name|boolean
name|forward
parameter_list|,
name|boolean
name|useBloom
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"requestSeek cannot be called on ReversedKeyValueHeap"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seekToPreviousRow
parameter_list|(
name|KeyValue
name|seekKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|heap
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
name|KeyValueScanner
name|scanner
decl_stmt|;
while|while
condition|(
operator|(
name|scanner
operator|=
name|heap
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|KeyValue
name|topKey
init|=
name|scanner
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|.
name|getComparator
argument_list|()
operator|.
name|compareRows
argument_list|(
name|topKey
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|topKey
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|topKey
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|seekKey
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|seekKey
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|seekKey
operator|.
name|getRowLength
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// Row of Top KeyValue is before Seek row.
name|heap
operator|.
name|add
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|current
operator|=
name|pollRealKV
argument_list|()
expr_stmt|;
return|return
name|current
operator|!=
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|scanner
operator|.
name|seekToPreviousRow
argument_list|(
name|seekKey
argument_list|)
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|heap
operator|.
name|add
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Heap is returning empty, scanner is done
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|backwardSeek
parameter_list|(
name|KeyValue
name|seekKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|heap
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
name|KeyValueScanner
name|scanner
decl_stmt|;
while|while
condition|(
operator|(
name|scanner
operator|=
name|heap
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|KeyValue
name|topKey
init|=
name|scanner
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|comparator
operator|.
name|getComparator
argument_list|()
operator|.
name|matchingRows
argument_list|(
name|seekKey
argument_list|,
name|topKey
argument_list|)
operator|&&
name|comparator
operator|.
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|seekKey
argument_list|,
name|topKey
argument_list|)
operator|<=
literal|0
operator|)
operator|||
name|comparator
operator|.
name|getComparator
argument_list|()
operator|.
name|compareRows
argument_list|(
name|seekKey
argument_list|,
name|topKey
argument_list|)
operator|>
literal|0
condition|)
block|{
name|heap
operator|.
name|add
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|current
operator|=
name|pollRealKV
argument_list|()
expr_stmt|;
return|return
name|current
operator|!=
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|scanner
operator|.
name|backwardSeek
argument_list|(
name|seekKey
argument_list|)
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|heap
operator|.
name|add
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyValue
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|KeyValue
name|kvReturn
init|=
name|this
operator|.
name|current
operator|.
name|next
argument_list|()
decl_stmt|;
name|KeyValue
name|kvNext
init|=
name|this
operator|.
name|current
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|kvNext
operator|==
literal|null
operator|||
name|this
operator|.
name|comparator
operator|.
name|kvComparator
operator|.
name|compareRows
argument_list|(
name|kvNext
argument_list|,
name|kvReturn
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|current
operator|.
name|seekToPreviousRow
argument_list|(
name|kvReturn
argument_list|)
condition|)
block|{
name|this
operator|.
name|heap
operator|.
name|add
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|current
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|current
operator|=
name|pollRealKV
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|KeyValueScanner
name|topScanner
init|=
name|this
operator|.
name|heap
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|topScanner
operator|!=
literal|null
operator|&&
name|this
operator|.
name|comparator
operator|.
name|compare
argument_list|(
name|this
operator|.
name|current
argument_list|,
name|topScanner
argument_list|)
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|heap
operator|.
name|add
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|pollRealKV
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|kvReturn
return|;
block|}
comment|/**    * In ReversedKVScannerComparator, we compare the row of scanners' peek values    * first, sort bigger one before the smaller one. Then compare the KeyValue if    * they have the equal row, sort smaller one before the bigger one    */
specifier|private
specifier|static
class|class
name|ReversedKVScannerComparator
extends|extends
name|KVScannerComparator
block|{
comment|/**      * Constructor      * @param kvComparator      */
specifier|public
name|ReversedKVScannerComparator
parameter_list|(
name|KVComparator
name|kvComparator
parameter_list|)
block|{
name|super
argument_list|(
name|kvComparator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|KeyValueScanner
name|left
parameter_list|,
name|KeyValueScanner
name|right
parameter_list|)
block|{
name|int
name|rowComparison
init|=
name|compareRows
argument_list|(
name|left
operator|.
name|peek
argument_list|()
argument_list|,
name|right
operator|.
name|peek
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowComparison
operator|!=
literal|0
condition|)
block|{
return|return
operator|-
name|rowComparison
return|;
block|}
return|return
name|super
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
comment|/**      * Compares rows of two KeyValue      * @param left      * @param right      * @return less than 0 if left is smaller, 0 if equal etc..      */
specifier|public
name|int
name|compareRows
parameter_list|(
name|KeyValue
name|left
parameter_list|,
name|KeyValue
name|right
parameter_list|)
block|{
return|return
name|super
operator|.
name|kvComparator
operator|.
name|compareRows
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seekToLastRow
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

