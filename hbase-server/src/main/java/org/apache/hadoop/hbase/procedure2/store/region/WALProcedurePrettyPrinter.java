begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|region
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|region
operator|.
name|RegionProcedureStore
operator|.
name|FAMILY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALPrettyPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_comment
comment|/**  * A tool to dump the procedures in the WAL files.  *<p/>  * The different between this and {@link WALPrettyPrinter} is that, this class will decode the  * procedure in the WALEdit for better debugging. You are free to use {@link WALPrettyPrinter} to  * dump the safe file as well.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|TOOLS
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|WALProcedurePrettyPrinter
extends|extends
name|AbstractHBaseTool
block|{
specifier|private
specifier|static
specifier|final
name|String
name|KEY_TMPL
init|=
literal|"Sequence=%s, at write timestamp=%s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|FORMATTER
init|=
name|DateTimeFormatter
operator|.
name|ISO_OFFSET_DATE_TIME
operator|.
name|withZone
argument_list|(
name|ZoneId
operator|.
name|systemDefault
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|file
decl_stmt|;
specifier|private
name|PrintStream
name|out
decl_stmt|;
specifier|public
name|WALProcedurePrettyPrinter
parameter_list|()
block|{
name|this
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WALProcedurePrettyPrinter
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Please specify the file to dump"
argument_list|)
throw|;
block|}
name|file
operator|=
name|cmd
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
init|(
name|WAL
operator|.
name|Reader
name|reader
init|=
name|WALFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
init|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|WAL
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|WALKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|long
name|sequenceId
init|=
name|key
operator|.
name|getSequenceId
argument_list|()
decl_stmt|;
name|long
name|writeTime
init|=
name|key
operator|.
name|getWriteTime
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|KEY_TMPL
argument_list|,
name|sequenceId
argument_list|,
name|FORMATTER
operator|.
name|format
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|writeTime
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|edit
operator|.
name|getCells
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|op
init|=
name|WALPrettyPrinter
operator|.
name|toStringMap
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|FAMILY
argument_list|,
literal|0
argument_list|,
name|FAMILY
operator|.
name|length
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
condition|)
block|{
comment|// We could have cells other than procedure edits, for example, a flush marker
name|WALPrettyPrinter
operator|.
name|printCell
argument_list|(
name|out
argument_list|,
name|op
argument_list|,
literal|false
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|long
name|procId
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"pid="
operator|+
name|procId
operator|+
literal|", type="
operator|+
name|op
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
operator|+
literal|", column="
operator|+
name|op
operator|.
name|get
argument_list|(
literal|"family"
argument_list|)
operator|+
literal|":"
operator|+
name|op
operator|.
name|get
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getType
argument_list|()
operator|==
name|Cell
operator|.
name|Type
operator|.
name|Put
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getValueLength
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// should be a normal put
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
name|ProcedureUtil
operator|.
name|convertToProcedure
argument_list|(
name|ProcedureProtos
operator|.
name|Procedure
operator|.
name|parser
argument_list|()
operator|.
name|parseFrom
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|proc
operator|.
name|toStringDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// should be a 'delete' put
name|out
operator|.
name|println
argument_list|(
literal|"\tmark deleted"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"cell total size sum: "
operator|+
name|cell
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"edit heap size: "
operator|+
name|edit
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"position: "
operator|+
name|reader
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
operator|new
name|WALProcedurePrettyPrinter
argument_list|()
operator|.
name|doStaticMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

