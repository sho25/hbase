begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALTrailer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CommonFSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CommonFSUtils
operator|.
name|StreamLacksCapabilityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|FSHLogProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Writer for protobuf-based WAL.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ProtobufLogWriter
extends|extends
name|AbstractProtobufLogWriter
implements|implements
name|FSHLogProvider
operator|.
name|Writer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProtobufLogWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|FSDataOutputStream
name|output
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|Entry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|entry
operator|.
name|setCompressionContext
argument_list|(
name|compressionContext
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getBuilder
argument_list|(
name|compressor
argument_list|)
operator|.
name|setFollowingKvCount
argument_list|(
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
control|)
block|{
comment|// cellEncoder must assume little about the stream, since we write PB and cells in turn.
name|cellEncoder
operator|.
name|write
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|length
operator|.
name|set
argument_list|(
name|output
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|output
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|trailerWritten
condition|)
name|writeWALTrailer
argument_list|()
expr_stmt|;
name|this
operator|.
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// Can get a NPE coming up from down in DFSClient$DFSOutputStream#close
name|LOG
operator|.
name|warn
argument_list|(
name|npe
operator|.
name|toString
argument_list|()
argument_list|,
name|npe
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|output
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|fsdos
init|=
name|this
operator|.
name|output
decl_stmt|;
if|if
condition|(
name|fsdos
operator|==
literal|null
condition|)
return|return;
comment|// Presume closed
name|fsdos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fsdos
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|FSDataOutputStream
name|getStream
parameter_list|()
block|{
return|return
name|this
operator|.
name|output
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|protected
name|void
name|initOutput
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|overwritable
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|StreamLacksCapabilityException
block|{
name|this
operator|.
name|output
operator|=
name|fs
operator|.
name|createNonRecursive
argument_list|(
name|path
argument_list|,
name|overwritable
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO Be sure to add a check for hsync if this branch includes HBASE-19024
if|if
condition|(
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|CommonFSUtils
operator|.
name|UNSAFE_STREAM_CAPABILITY_ENFORCE
argument_list|,
literal|true
argument_list|)
operator|&&
operator|!
operator|(
name|CommonFSUtils
operator|.
name|hasCapability
argument_list|(
name|output
argument_list|,
literal|"hflush"
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|StreamLacksCapabilityException
argument_list|(
literal|"hflush"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|long
name|writeMagicAndWALHeader
parameter_list|(
name|byte
index|[]
name|magic
parameter_list|,
name|WALHeader
name|header
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
name|magic
argument_list|)
expr_stmt|;
name|header
operator|.
name|writeDelimitedTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|OutputStream
name|getOutputStreamForCellEncoder
parameter_list|()
block|{
return|return
name|this
operator|.
name|output
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|writeWALTrailerAndMagic
parameter_list|(
name|WALTrailer
name|trailer
parameter_list|,
name|byte
index|[]
name|magic
parameter_list|)
throws|throws
name|IOException
block|{
name|trailer
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeInt
argument_list|(
name|trailer
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|magic
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|getPos
argument_list|()
return|;
block|}
block|}
end_class

end_unit

