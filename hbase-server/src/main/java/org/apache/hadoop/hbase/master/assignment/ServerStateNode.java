begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * State of Server; list of hosted regions, etc.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|ServerStateNode
implements|implements
name|Comparable
argument_list|<
name|ServerStateNode
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
class|class
name|ServerReportEvent
extends|extends
name|ProcedureEvent
argument_list|<
name|ServerName
argument_list|>
block|{
specifier|public
name|ServerReportEvent
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|super
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|ServerReportEvent
name|reportEvent
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|RegionStateNode
argument_list|>
name|regions
decl_stmt|;
specifier|private
specifier|final
name|ServerName
name|serverName
decl_stmt|;
specifier|private
specifier|volatile
name|ServerState
name|state
init|=
name|ServerState
operator|.
name|ONLINE
decl_stmt|;
specifier|public
name|ServerStateNode
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
name|this
operator|.
name|regions
operator|=
name|ConcurrentHashMap
operator|.
name|newKeySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|reportEvent
operator|=
operator|new
name|ServerReportEvent
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|serverName
return|;
block|}
specifier|public
name|ServerState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|getReportEvent
parameter_list|()
block|{
return|return
name|reportEvent
return|;
block|}
specifier|public
name|boolean
name|isInState
parameter_list|(
specifier|final
name|ServerState
modifier|...
name|expected
parameter_list|)
block|{
name|boolean
name|expectedState
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|expectedState
operator||=
operator|(
name|state
operator|==
name|expected
index|[
name|i
index|]
operator|)
expr_stmt|;
block|}
block|}
return|return
name|expectedState
return|;
block|}
name|void
name|setState
parameter_list|(
specifier|final
name|ServerState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|RegionStateNode
argument_list|>
name|getRegions
parameter_list|()
block|{
return|return
name|regions
return|;
block|}
specifier|public
name|int
name|getRegionCount
parameter_list|()
block|{
return|return
name|regions
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionInfoList
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
name|hris
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|region
range|:
name|regions
control|)
block|{
name|hris
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|hris
return|;
block|}
specifier|public
name|void
name|addRegion
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|this
operator|.
name|regions
operator|.
name|add
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeRegion
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|this
operator|.
name|regions
operator|.
name|remove
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|ServerStateNode
name|other
parameter_list|)
block|{
return|return
name|getServerName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getServerName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ServerStateNode
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|ServerStateNode
operator|)
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"ServerStateNode(%s)"
argument_list|,
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

