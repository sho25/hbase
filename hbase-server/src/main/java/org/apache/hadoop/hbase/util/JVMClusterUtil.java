begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Utility used running a cluster all in the one JVM.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|JVMClusterUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JVMClusterUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Datastructure to hold RegionServer Thread and RegionServer instance    */
specifier|public
specifier|static
class|class
name|RegionServerThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|HRegionServer
name|regionServer
decl_stmt|;
specifier|public
name|RegionServerThread
parameter_list|(
specifier|final
name|HRegionServer
name|r
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
name|super
argument_list|(
name|r
argument_list|,
literal|"RS:"
operator|+
name|index
operator|+
literal|";"
operator|+
name|r
operator|.
name|getServerName
argument_list|()
operator|.
name|toShortString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServer
operator|=
name|r
expr_stmt|;
block|}
comment|/** @return the region server */
specifier|public
name|HRegionServer
name|getRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionServer
return|;
block|}
comment|/**      * Block until the region server has come online, indicating it is ready      * to be used.      */
specifier|public
name|void
name|waitForServerOnline
parameter_list|()
block|{
comment|// The server is marked online after the init method completes inside of
comment|// the HRS#run method.  HRS#init can fail for whatever region.  In those
comment|// cases, we'll jump out of the run without setting online flag.  Check
comment|// stopRequested so we don't wait here a flag that will never be flipped.
name|regionServer
operator|.
name|waitForServerOnline
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates a {@link RegionServerThread}.    * Call 'start' on the returned thread to make it run.    * @param c Configuration to use.    * @param hrsc Class to create.    * @param index Used distinguishing the object returned.    * @throws IOException    * @return Region server added.    */
specifier|public
specifier|static
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|createRegionServerThread
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|HRegionServer
argument_list|>
name|hrsc
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionServer
name|server
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|HRegionServer
argument_list|>
name|ctor
init|=
name|hrsc
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|ctor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|server
operator|=
name|ctor
operator|.
name|newInstance
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|Throwable
name|target
init|=
name|ite
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed construction of RegionServer: "
operator|+
name|hrsc
operator|.
name|toString
argument_list|()
operator|+
operator|(
operator|(
name|target
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|target
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
else|:
literal|""
operator|)
argument_list|,
name|target
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|(
name|server
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/**    * Datastructure to hold Master Thread and Master instance    */
specifier|public
specifier|static
class|class
name|MasterThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|HMaster
name|master
decl_stmt|;
specifier|public
name|MasterThread
parameter_list|(
specifier|final
name|HMaster
name|m
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
name|super
argument_list|(
name|m
argument_list|,
literal|"M:"
operator|+
name|index
operator|+
literal|";"
operator|+
name|m
operator|.
name|getServerName
argument_list|()
operator|.
name|toShortString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|m
expr_stmt|;
block|}
comment|/** @return the master */
specifier|public
name|HMaster
name|getMaster
parameter_list|()
block|{
return|return
name|this
operator|.
name|master
return|;
block|}
block|}
comment|/**    * Creates a {@link MasterThread}.    * Call 'start' on the returned thread to make it run.    * @param c Configuration to use.    * @param hmc Class to create.    * @param index Used distinguishing the object returned.    * @throws IOException    * @return Master added.    */
specifier|public
specifier|static
name|JVMClusterUtil
operator|.
name|MasterThread
name|createMasterThread
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|hmc
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|HMaster
name|server
decl_stmt|;
try|try
block|{
name|server
operator|=
name|hmc
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|Throwable
name|target
init|=
name|ite
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed construction of Master: "
operator|+
name|hmc
operator|.
name|toString
argument_list|()
operator|+
operator|(
operator|(
name|target
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|target
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
else|:
literal|""
operator|)
argument_list|,
name|target
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Needed if a master based registry is configured for internal cluster connections. Here, we
comment|// just add the current master host port since we do not know other master addresses up front
comment|// in mini cluster tests.
name|c
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|MASTER_ADDRS_KEY
argument_list|,
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|JVMClusterUtil
operator|.
name|MasterThread
argument_list|(
name|server
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|JVMClusterUtil
operator|.
name|MasterThread
name|findActiveMaster
parameter_list|(
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|MasterThread
argument_list|>
name|masters
parameter_list|)
block|{
for|for
control|(
name|JVMClusterUtil
operator|.
name|MasterThread
name|t
range|:
name|masters
control|)
block|{
if|if
condition|(
name|t
operator|.
name|master
operator|.
name|isActiveMaster
argument_list|()
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Start the cluster.  Waits until there is a primary master initialized    * and returns its address.    * @param masters    * @param regionservers    * @return Address to use contacting primary master.    */
specifier|public
specifier|static
name|String
name|startup
parameter_list|(
specifier|final
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|MasterThread
argument_list|>
name|masters
parameter_list|,
specifier|final
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|regionservers
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Implementation note: This method relies on timed sleeps in a loop. It's not great, and
comment|// should probably be re-written to use actual synchronization objects, but it's ok for now
name|Configuration
name|configuration
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|masters
operator|==
literal|null
operator|||
name|masters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|JVMClusterUtil
operator|.
name|MasterThread
name|t
range|:
name|masters
control|)
block|{
name|configuration
operator|=
name|t
operator|.
name|getMaster
argument_list|()
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Wait for an active master
comment|//  having an active master before starting the region threads allows
comment|//  then to succeed on their connection to master
specifier|final
name|int
name|startTimeout
init|=
name|configuration
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
literal|"hbase.master.start.timeout.localHBaseCluster"
argument_list|,
literal|"30000"
argument_list|)
argument_list|)
else|:
literal|30000
decl_stmt|;
name|waitForEvent
argument_list|(
name|startTimeout
argument_list|,
literal|"active"
argument_list|,
parameter_list|()
lambda|->
name|findActiveMaster
argument_list|(
name|masters
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionservers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|t
range|:
name|regionservers
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Wait for an active master to be initialized (implies being master)
comment|//  with this, when we return the cluster is complete
specifier|final
name|int
name|initTimeout
init|=
name|configuration
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
literal|"hbase.master.init.timeout.localHBaseCluster"
argument_list|,
literal|"200000"
argument_list|)
argument_list|)
else|:
literal|200000
decl_stmt|;
name|waitForEvent
argument_list|(
name|initTimeout
argument_list|,
literal|"initialized"
argument_list|,
parameter_list|()
lambda|->
block|{
name|JVMClusterUtil
operator|.
name|MasterThread
name|t
init|=
name|findActiveMaster
argument_list|(
name|masters
argument_list|)
decl_stmt|;
comment|// master thread should never be null at this point, but let's keep the check anyway
return|return
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|master
operator|.
name|isInitialized
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|findActiveMaster
argument_list|(
name|masters
argument_list|)
operator|.
name|master
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Utility method to wait some time for an event to occur, and then return control to the caller.    * @param millis How long to wait, in milliseconds.    * @param action The action that we are waiting for. Will be used in log message if the event    *               does not occur.    * @param check A Supplier that will be checked periodically to produce an updated true/false    *              result indicating if the expected event has happened or not.    * @throws InterruptedIOException If we are interrupted while waiting for the event.    * @throws RuntimeException If we reach the specified timeout while waiting for the event.    */
specifier|private
specifier|static
name|void
name|waitForEvent
parameter_list|(
name|long
name|millis
parameter_list|,
name|String
name|action
parameter_list|,
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|check
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|long
name|end
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|millis
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|check
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|>
name|end
condition|)
block|{
name|String
name|msg
init|=
literal|"Master not "
operator|+
name|action
operator|+
literal|" after "
operator|+
name|millis
operator|+
literal|"ms"
decl_stmt|;
name|Threads
operator|.
name|printThreadInfo
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|"Thread dump because: "
operator|+
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * @param masters    * @param regionservers    */
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|(
specifier|final
name|List
argument_list|<
name|MasterThread
argument_list|>
name|masters
parameter_list|,
specifier|final
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|regionservers
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutting down HBase Cluster"
argument_list|)
expr_stmt|;
if|if
condition|(
name|masters
operator|!=
literal|null
condition|)
block|{
comment|// Do backups first.
name|JVMClusterUtil
operator|.
name|MasterThread
name|activeMaster
init|=
literal|null
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|MasterThread
name|t
range|:
name|masters
control|)
block|{
comment|// Master was killed but could be still considered as active. Check first if it is stopped.
if|if
condition|(
operator|!
name|t
operator|.
name|master
operator|.
name|isStopped
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|t
operator|.
name|master
operator|.
name|isActiveMaster
argument_list|()
condition|)
block|{
try|try
block|{
name|t
operator|.
name|master
operator|.
name|stopMaster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception occurred while stopping master"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopped backup Master {} is stopped: {}"
argument_list|,
name|t
operator|.
name|master
operator|.
name|hashCode
argument_list|()
argument_list|,
name|t
operator|.
name|master
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|activeMaster
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found more than 1 active master, hash {}"
argument_list|,
name|activeMaster
operator|.
name|master
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|activeMaster
operator|=
name|t
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found active master hash={}, stopped={}"
argument_list|,
name|t
operator|.
name|master
operator|.
name|hashCode
argument_list|()
argument_list|,
name|t
operator|.
name|master
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Do active after.
if|if
condition|(
name|activeMaster
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|activeMaster
operator|.
name|master
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception occurred in HMaster.shutdown()"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|wasInterrupted
init|=
literal|false
decl_stmt|;
specifier|final
name|long
name|maxTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30
operator|*
literal|1000
decl_stmt|;
if|if
condition|(
name|regionservers
operator|!=
literal|null
condition|)
block|{
comment|// first try nicely.
for|for
control|(
name|RegionServerThread
name|t
range|:
name|regionservers
control|)
block|{
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|stop
argument_list|(
literal|"Shutdown requested"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RegionServerThread
name|t
range|:
name|regionservers
control|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|wasInterrupted
operator|&&
name|now
operator|<
name|maxTime
condition|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|(
name|maxTime
operator|-
name|now
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got InterruptedException on shutdown - "
operator|+
literal|"not waiting anymore on region server ends"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|wasInterrupted
operator|=
literal|true
expr_stmt|;
comment|// someone wants us to speed up.
block|}
block|}
block|}
comment|// Let's try to interrupt the remaining threads if any.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|boolean
name|atLeastOneLiveServer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|t
range|:
name|regionservers
control|)
block|{
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|atLeastOneLiveServer
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"RegionServerThreads remaining, give one more chance before interrupting"
argument_list|)
expr_stmt|;
name|t
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|wasInterrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|atLeastOneLiveServer
condition|)
break|break;
for|for
control|(
name|RegionServerThread
name|t
range|:
name|regionservers
control|)
block|{
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"RegionServerThreads taking too long to stop, interrupting; thread dump "
operator|+
literal|"if> 3 attempts: i="
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|3
condition|)
block|{
name|Threads
operator|.
name|printThreadInfo
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|"Thread dump "
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|masters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JVMClusterUtil
operator|.
name|MasterThread
name|t
range|:
name|masters
control|)
block|{
while|while
condition|(
name|t
operator|.
name|master
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|wasInterrupted
condition|)
block|{
try|try
block|{
comment|// The below has been replaced to debug sometime hangs on end of
comment|// tests.
comment|// this.master.join():
name|Threads
operator|.
name|threadDumpingIsAlive
argument_list|(
name|t
operator|.
name|master
operator|.
name|getThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got InterruptedException on shutdown - "
operator|+
literal|"not waiting anymore on master ends"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|wasInterrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown of "
operator|+
operator|(
operator|(
name|masters
operator|!=
literal|null
operator|)
condition|?
name|masters
operator|.
name|size
argument_list|()
else|:
literal|"0"
operator|)
operator|+
literal|" master(s) and "
operator|+
operator|(
operator|(
name|regionservers
operator|!=
literal|null
operator|)
condition|?
name|regionservers
operator|.
name|size
argument_list|()
else|:
literal|"0"
operator|)
operator|+
literal|" regionserver(s) "
operator|+
operator|(
name|wasInterrupted
condition|?
literal|"interrupted"
else|:
literal|"complete"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasInterrupted
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

