begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|BlockingRpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|ResultSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ExportProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|Export
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|Import
import|;
end_import

begin_comment
comment|/** * Export an HBase table. * Writes content to sequence files up in HDFS.  Use {@link Import} to read it * back in again. * It is implemented by the endpoint technique. * @see Export */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ExportEndpoint
extends|extends
name|ExportProtos
operator|.
name|ExportService
implements|implements
name|Coprocessor
implements|,
name|CoprocessorService
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExportEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RegionCoprocessorEnvironment
name|env
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|environment
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|environment
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
name|this
operator|.
name|env
operator|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|environment
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
literal|"Must be loaded on a table region!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|this
return|;
block|}
specifier|private
specifier|static
name|boolean
name|getCompression
parameter_list|(
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasCompressed
argument_list|()
condition|)
block|{
return|return
name|request
operator|.
name|getCompressed
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|SequenceFile
operator|.
name|CompressionType
name|getCompressionType
parameter_list|(
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasCompressType
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getCompressType
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CompressionCodec
name|getCompressionCodec
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasCompressCodec
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|codecClass
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|request
operator|.
name|getCompressCodec
argument_list|()
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|CompressionCodec
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Compression codec "
operator|+
name|request
operator|.
name|getCompressCodec
argument_list|()
operator|+
literal|" was not found."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
name|getOutputPath
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HRegionInfo
name|info
parameter_list|,
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|request
operator|.
name|getOutputPath
argument_list|()
argument_list|,
literal|"export-"
operator|+
name|info
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|file
operator|+
literal|" exists"
argument_list|)
throw|;
block|}
return|return
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
argument_list|>
name|getWriterOptions
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HRegionInfo
name|info
parameter_list|,
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
argument_list|>
name|rval
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|rval
operator|.
name|add
argument_list|(
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|rval
operator|.
name|add
argument_list|(
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Result
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|rval
operator|.
name|add
argument_list|(
name|getOutputPath
argument_list|(
name|conf
argument_list|,
name|info
argument_list|,
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|compressed
init|=
name|getCompression
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressed
condition|)
block|{
name|SequenceFile
operator|.
name|CompressionType
name|type
init|=
name|getCompressionType
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|CompressionCodec
name|codec
init|=
name|getCompressionCodec
argument_list|(
name|conf
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|rval
operator|.
name|add
argument_list|(
name|SequenceFile
operator|.
name|Writer
operator|.
name|compression
argument_list|(
name|type
argument_list|,
name|codec
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rval
return|;
block|}
specifier|private
name|Scan
name|validateKey
parameter_list|(
specifier|final
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
block|{
name|byte
index|[]
name|regionStartKey
init|=
name|region
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|originStartKey
init|=
name|scan
operator|.
name|getStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|originStartKey
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|originStartKey
argument_list|,
name|regionStartKey
argument_list|)
operator|<
literal|0
condition|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|regionStartKey
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|regionEndKey
init|=
name|region
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|originEndKey
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|originEndKey
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|originEndKey
argument_list|,
name|regionEndKey
argument_list|)
operator|>
literal|0
condition|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|regionEndKey
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|ExportProtos
operator|.
name|ExportResponse
argument_list|>
name|done
parameter_list|)
block|{
name|Region
name|region
init|=
name|env
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|env
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"io.serializations"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"io.serializations"
argument_list|)
argument_list|,
name|ResultSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Scan
name|scan
init|=
name|validateKey
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ExportProtos
operator|.
name|ExportResponse
name|response
init|=
name|processData
argument_list|(
name|conf
argument_list|,
name|region
argument_list|,
name|scan
argument_list|,
name|getWriterOptions
argument_list|(
name|conf
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ExportProtos
operator|.
name|ExportResponse
name|processData
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|List
argument_list|<
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
argument_list|>
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|region
operator|.
name|startRegionOperation
argument_list|()
expr_stmt|;
try|try
init|(
name|SequenceFile
operator|.
name|Writer
name|out
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|opts
operator|.
name|toArray
argument_list|(
operator|new
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
index|[
name|opts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
init|;
name|RegionScanner
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|ImmutableBytesWritable
name|key
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|long
name|rowCount
init|=
literal|0
decl_stmt|;
name|long
name|cellCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|buf
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|hasMore
decl_stmt|;
do|do
block|{
name|hasMore
operator|=
name|scanner
operator|.
name|nextRaw
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|buf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Cell
name|firstCell
init|=
name|buf
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|buf
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|firstCell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Why the RegionScanner#nextRaw returns the data of different rows??"
argument_list|)
throw|;
block|}
block|}
name|key
operator|.
name|set
argument_list|(
name|firstCell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|Result
operator|.
name|create
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|rowCount
expr_stmt|;
name|cellCount
operator|+=
name|buf
operator|.
name|size
argument_list|()
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
return|return
name|ExportProtos
operator|.
name|ExportResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRowCount
argument_list|(
name|rowCount
argument_list|)
operator|.
name|setCellCount
argument_list|(
name|cellCount
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
name|region
operator|.
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|Throwable
block|{
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ExportProtos
operator|.
name|ExportResponse
argument_list|>
name|run
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|Throwable
block|{
name|String
index|[]
name|otherArgs
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
operator|.
name|getRemainingArgs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Export
operator|.
name|checkArguments
argument_list|(
name|otherArgs
argument_list|)
condition|)
block|{
name|Export
operator|.
name|usage
argument_list|(
literal|"Wrong number of arguments: "
operator|+
name|otherArgs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|otherArgs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|dir
init|=
name|otherArgs
index|[
literal|1
index|]
decl_stmt|;
name|checkDir
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
name|Export
operator|.
name|getConfiguredScanForJob
argument_list|(
name|conf
argument_list|,
name|otherArgs
argument_list|)
decl_stmt|;
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
init|=
name|getConfiguredRequestForJob
argument_list|(
name|conf
argument_list|,
name|otherArgs
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|con
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|con
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
return|return
name|table
operator|.
name|coprocessorService
argument_list|(
name|ExportProtos
operator|.
name|ExportService
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|ExportProtos
operator|.
name|ExportService
argument_list|,
name|ExportProtos
operator|.
name|ExportResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ExportProtos
operator|.
name|ExportResponse
name|call
parameter_list|(
name|ExportProtos
operator|.
name|ExportService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|ExportProtos
operator|.
name|ExportResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<>
argument_list|()
decl_stmt|;
name|service
operator|.
name|export
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
if|if
condition|(
name|controller
operator|.
name|failedOnException
argument_list|()
condition|)
block|{
throw|throw
name|controller
operator|.
name|getFailedOn
argument_list|()
throw|;
block|}
return|return
name|rpcCallback
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkDir
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The "
operator|+
name|path
operator|+
literal|" exists"
argument_list|)
throw|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ExportProtos
operator|.
name|ExportRequest
name|getConfiguredRequestForJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dir
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|boolean
name|compressed
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|compressionType
init|=
name|conf
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|,
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|RECORD
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|compressionCodec
init|=
name|conf
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|,
name|DefaultCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"compressed="
operator|+
name|compressed
operator|+
literal|", compression type="
operator|+
name|compressionType
operator|+
literal|", compression codec="
operator|+
name|compressionCodec
argument_list|)
expr_stmt|;
return|return
name|ExportProtos
operator|.
name|ExportRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setScan
argument_list|(
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|scan
argument_list|)
argument_list|)
operator|.
name|setOutputPath
argument_list|(
name|dir
argument_list|)
operator|.
name|setCompressed
argument_list|(
name|compressed
argument_list|)
operator|.
name|setCompressCodec
argument_list|(
name|compressionCodec
argument_list|)
operator|.
name|setCompressType
argument_list|(
name|compressionType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

