begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnexpectedStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|TableProcedureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
operator|.
name|RemoteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
operator|.
name|RemoteProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|RegionTransitionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
operator|.
name|TransitionCode
import|;
end_import

begin_comment
comment|/**  * Leave here only for checking if we can successfully start the master.  * @deprecated Do not use any more.  * @see TransitRegionStateProcedure  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|RegionTransitionProcedure
extends|extends
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
implements|implements
name|TableProcedureInterface
implements|,
name|RemoteProcedure
argument_list|<
name|MasterProcedureEnv
argument_list|,
name|ServerName
argument_list|>
block|{
specifier|protected
specifier|final
name|AtomicBoolean
name|aborted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|RegionTransitionState
name|transitionState
init|=
name|RegionTransitionState
operator|.
name|REGION_TRANSITION_QUEUE
decl_stmt|;
specifier|private
name|RegionInfo
name|regionInfo
decl_stmt|;
specifier|private
name|int
name|attempt
decl_stmt|;
comment|// Required by the Procedure framework to create the procedure on replay
specifier|public
name|RegionTransitionProcedure
parameter_list|()
block|{   }
specifier|public
name|RegionTransitionProcedure
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|RegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionInfo
return|;
block|}
specifier|protected
name|void
name|setRegionInfo
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
block|}
specifier|protected
name|void
name|setAttempt
parameter_list|(
name|int
name|attempt
parameter_list|)
block|{
name|this
operator|.
name|attempt
operator|=
name|attempt
expr_stmt|;
block|}
specifier|protected
name|int
name|getAttempt
parameter_list|()
block|{
return|return
name|this
operator|.
name|attempt
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
name|RegionInfo
name|hri
init|=
name|getRegionInfo
argument_list|()
decl_stmt|;
return|return
name|hri
operator|!=
literal|null
condition|?
name|hri
operator|.
name|getTable
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|boolean
name|isMeta
parameter_list|()
block|{
return|return
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toStringClassDetails
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" table="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", region="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getRegionInfo
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionStateNode
name|getRegionState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getOrCreateRegionStateNode
argument_list|(
name|getRegionInfo
argument_list|()
argument_list|)
return|;
block|}
name|void
name|setTransitionState
parameter_list|(
specifier|final
name|RegionTransitionState
name|state
parameter_list|)
block|{
name|this
operator|.
name|transitionState
operator|=
name|state
expr_stmt|;
block|}
name|RegionTransitionState
name|getTransitionState
parameter_list|()
block|{
return|return
name|transitionState
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|startTransition
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|)
throws|throws
name|IOException
throws|,
name|ProcedureSuspendedException
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|updateTransition
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|)
throws|throws
name|IOException
throws|,
name|ProcedureSuspendedException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|finishTransition
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|)
throws|throws
name|IOException
throws|,
name|ProcedureSuspendedException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|reportTransition
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|,
name|TransitionCode
name|code
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|UnexpectedStateException
function_decl|;
annotation|@
name|Override
specifier|public
specifier|abstract
name|Optional
argument_list|<
name|RemoteOperation
argument_list|>
name|remoteCallBuild
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|remoteCallFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|,
name|IOException
name|exception
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|remoteCallFailed
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|IOException
name|exception
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|protected
name|void
name|toStringState
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
name|super
operator|.
name|toStringState
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|RegionTransitionState
name|ts
init|=
name|this
operator|.
name|transitionState
decl_stmt|;
if|if
condition|(
operator|!
name|isFinished
argument_list|()
operator|&&
name|ts
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Procedure
index|[]
name|execute
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{   }
specifier|protected
specifier|abstract
name|boolean
name|isRollbackSupported
parameter_list|(
specifier|final
name|RegionTransitionState
name|state
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|isRollbackSupported
argument_list|(
name|transitionState
argument_list|)
condition|)
block|{
name|aborted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteOperationCompleted
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
comment|// should not be called for region operation until we modified the open/close region procedure
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteOperationFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RemoteProcedureException
name|error
parameter_list|)
block|{
comment|// should not be called for region operation until we modified the open/close region procedure
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

