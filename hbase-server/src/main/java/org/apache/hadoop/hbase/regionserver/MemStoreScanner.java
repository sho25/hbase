begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_comment
comment|/**  * This is the scanner for any MemStore implementation, derived from MemStore.  * The MemStoreScanner combines KeyValueScanner from different Segments and  * uses the key-value heap and the reversed key-value heap for the aggregated key-values set.  * It is assumed that only traversing forward or backward is used (without zigzagging in between)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MemStoreScanner
extends|extends
name|NonLazyKeyValueScanner
block|{
comment|// heap of scanners, lazily initialized
specifier|private
name|KeyValueHeap
name|heap
decl_stmt|;
comment|// indicates if the scanner is created for inmemoryCompaction
specifier|private
name|boolean
name|inmemoryCompaction
decl_stmt|;
comment|// remember the initial version of the scanners list
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
decl_stmt|;
specifier|private
specifier|final
name|CellComparator
name|comparator
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
comment|/**    * Creates either a forward KeyValue heap or Reverse KeyValue heap based on the type of scan    * and the heap is lazily initialized    * @param comparator Cell Comparator    * @param scanners List of scanners, from which the heap will be built    * @param inmemoryCompaction true if used for inmemoryCompaction.    *        In this case, creates a forward heap always.    */
specifier|public
name|MemStoreScanner
parameter_list|(
name|CellComparator
name|comparator
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|boolean
name|inmemoryCompaction
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|scanners
operator|=
name|scanners
expr_stmt|;
if|if
condition|(
name|Trace
operator|.
name|isTracing
argument_list|()
operator|&&
name|Trace
operator|.
name|currentSpan
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Trace
operator|.
name|currentSpan
argument_list|()
operator|.
name|addTimelineAnnotation
argument_list|(
literal|"Creating MemStoreScanner"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|inmemoryCompaction
operator|=
name|inmemoryCompaction
expr_stmt|;
if|if
condition|(
name|inmemoryCompaction
condition|)
block|{
comment|// init the forward scanner in case of inmemoryCompaction
name|initForwardKVHeapIfNeeded
argument_list|(
name|comparator
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates either a forward KeyValue heap or Reverse KeyValue heap based on the type of scan    * and the heap is lazily initialized    * @param comparator Cell Comparator    * @param scanners List of scanners, from which the heap will be built    */
specifier|public
name|MemStoreScanner
parameter_list|(
name|CellComparator
name|comparator
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|comparator
argument_list|,
name|scanners
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initForwardKVHeapIfNeeded
parameter_list|(
name|CellComparator
name|comparator
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|heap
operator|==
literal|null
condition|)
block|{
comment|// lazy init
comment|// In a normal scan case, at the StoreScanner level before the KVHeap is
comment|// created we do a seek or reseek. So that will happen
comment|// on all the scanners that the StoreScanner is
comment|// made of. So when we get any of those call to this scanner we init the
comment|// heap here with normal forward KVHeap.
name|this
operator|.
name|heap
operator|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|initReverseKVHeapIfNeeded
parameter_list|(
name|Cell
name|seekKey
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|res
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|heap
operator|==
literal|null
condition|)
block|{
comment|// lazy init
comment|// In a normal reverse scan case, at the ReversedStoreScanner level before the
comment|// ReverseKeyValueheap is
comment|// created we do a seekToLastRow or backwardSeek. So that will happen
comment|// on all the scanners that the ReversedStoreSCanner is
comment|// made of. So when we get any of those call to this scanner we init the
comment|// heap here with ReversedKVHeap.
if|if
condition|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|seekKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
condition|)
block|{
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|res
operator||=
name|scanner
operator|.
name|seekToLastRow
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|res
operator||=
name|scanner
operator|.
name|backwardSeek
argument_list|(
name|seekKey
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|heap
operator|=
operator|new
name|ReversedKeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Returns the cell from the top-most scanner without advancing the iterator.    * The backward traversal is assumed, only if specified explicitly    */
annotation|@
name|Override
specifier|public
name|Cell
name|peek
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|this
operator|.
name|heap
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|heap
operator|.
name|peek
argument_list|()
return|;
block|}
comment|// Doing this way in case some test cases tries to peek directly to avoid NPE
return|return
literal|null
return|;
block|}
comment|/**    * Gets the next cell from the top-most scanner. Assumed forward scanning.    */
annotation|@
name|Override
specifier|public
name|Cell
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|this
operator|.
name|heap
operator|!=
literal|null
condition|)
block|{
comment|// loop over till the next suitable value
comment|// take next value from the heap
for|for
control|(
name|Cell
name|currentCell
init|=
name|heap
operator|.
name|next
argument_list|()
init|;
name|currentCell
operator|!=
literal|null
condition|;
name|currentCell
operator|=
name|heap
operator|.
name|next
argument_list|()
control|)
block|{
comment|// all the logic of presenting cells is inside the internal KeyValueScanners
comment|// located inside the heap
return|return
name|currentCell
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Set the scanner at the seek key. Assumed forward scanning.    * Must be called only once: there is no thread safety between the scanner    * and the memStore.    *    * @param cell seek value    * @return false if the key is null or if there is no data    */
annotation|@
name|Override
specifier|public
name|boolean
name|seek
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|initForwardKVHeapIfNeeded
argument_list|(
name|comparator
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|heap
operator|.
name|seek
argument_list|(
name|cell
argument_list|)
return|;
block|}
comment|/**    * Move forward on the sub-lists set previously by seek. Assumed forward scanning.    *    * @param cell seek value (should be non-null)    * @return true if there is at least one KV to read, false otherwise    */
annotation|@
name|Override
specifier|public
name|boolean
name|reseek
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*     * See HBASE-4195& HBASE-3855& HBASE-6591 for the background on this implementation.     * This code is executed concurrently with flush and puts, without locks.     * Two points must be known when working on this code:     * 1) It's not possible to use the 'kvTail' and 'snapshot'     *  variables, as they are modified during a flush.     * 2) The ideal implementation for performance would use the sub skip list     *  implicitly pointed by the iterators 'kvsetIt' and     *  'snapshotIt'. Unfortunately the Java API does not offer a method to     *  get it. So we remember the last keys we iterated to and restore     *  the reseeked set to at least that point.     *     *  TODO: The above comment copied from the original MemStoreScanner     */
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|initForwardKVHeapIfNeeded
argument_list|(
name|comparator
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
return|return
name|heap
operator|.
name|reseek
argument_list|(
name|cell
argument_list|)
return|;
block|}
comment|/**    * MemStoreScanner returns Long.MAX_VALUE because it will always have the latest data among all    * scanners.    * @see KeyValueScanner#getScannerOrder()    */
annotation|@
name|Override
specifier|public
name|long
name|getScannerOrder
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
comment|// Ensuring that all the segment scanners are closed
if|if
condition|(
name|heap
operator|!=
literal|null
condition|)
block|{
name|heap
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// It is safe to do close as no new calls will be made to this scanner.
name|heap
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Set the scanner at the seek key. Assumed backward scanning.    *    * @param cell seek value    * @return false if the key is null or if there is no data    */
annotation|@
name|Override
specifier|public
name|boolean
name|backwardSeek
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The first time when this happens it sets the scanners to the seek key
comment|// passed by the incoming scan's start row
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|initReverseKVHeapIfNeeded
argument_list|(
name|cell
argument_list|,
name|comparator
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
return|return
name|heap
operator|.
name|backwardSeek
argument_list|(
name|cell
argument_list|)
return|;
block|}
comment|/**    * Assumed backward scanning.    *    * @param cell seek value    * @return false if the key is null or if there is no data    */
annotation|@
name|Override
specifier|public
name|boolean
name|seekToPreviousRow
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|initReverseKVHeapIfNeeded
argument_list|(
name|cell
argument_list|,
name|comparator
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
if|if
condition|(
name|heap
operator|.
name|peek
argument_list|()
operator|==
literal|null
condition|)
block|{
name|restartBackwardHeap
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
return|return
name|heap
operator|.
name|seekToPreviousRow
argument_list|(
name|cell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seekToLastRow
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|initReverseKVHeapIfNeeded
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|,
name|comparator
argument_list|,
name|scanners
argument_list|)
return|;
block|}
comment|/**    * Check if this memstore may contain the required keys    * @return False if the key definitely does not exist in this Memstore    */
annotation|@
name|Override
specifier|public
name|boolean
name|shouldUseScanner
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|Store
name|store
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|)
block|{
comment|// TODO : Check if this can be removed.
if|if
condition|(
name|inmemoryCompaction
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|KeyValueScanner
name|sc
range|:
name|scanners
control|)
block|{
if|if
condition|(
name|sc
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|oldestUnexpiredTS
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// debug method
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"scanner ("
operator|+
name|i
operator|+
literal|") "
operator|+
name|scanner
operator|.
name|toString
argument_list|()
operator|+
literal|" ||| "
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/****************** Private methods ******************/
comment|/**    * Restructure the ended backward heap after rerunning a seekToPreviousRow()    * on each scanner    * @return false if given Cell does not exist in any scanner    */
specifier|private
name|boolean
name|restartBackwardHeap
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|res
init|=
literal|false
decl_stmt|;
for|for
control|(
name|KeyValueScanner
name|scan
range|:
name|scanners
control|)
block|{
name|res
operator||=
name|scan
operator|.
name|seekToPreviousRow
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|heap
operator|=
operator|new
name|ReversedKeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

