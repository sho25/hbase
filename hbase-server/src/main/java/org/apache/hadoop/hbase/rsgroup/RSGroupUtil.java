begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable  * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License  * for the specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ClusterSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helper class for RSGroup implementation  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|RSGroupUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RSGroupUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RS_GROUP_ENABLED
init|=
literal|"hbase.balancer.rsgroup.enabled"
decl_stmt|;
specifier|private
name|RSGroupUtil
parameter_list|()
block|{   }
specifier|public
specifier|static
name|boolean
name|isRSGroupEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|RS_GROUP_ENABLED
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|enableRSGroup
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|RS_GROUP_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TableName
argument_list|>
name|listTablesInRSGroup
parameter_list|(
name|MasterServices
name|master
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isDefaultGroup
init|=
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
for|for
control|(
name|TableDescriptor
name|td
range|:
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
comment|// no config means in default group
if|if
condition|(
name|RSGroupUtil
operator|.
name|getRSGroupInfo
argument_list|(
name|master
argument_list|,
name|master
operator|.
name|getRSGroupInfoManager
argument_list|()
argument_list|,
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|g
lambda|->
name|g
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|isDefaultGroup
argument_list|)
condition|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
block|;       }
block|}
return|return
name|tables
return|;
block|}
comment|/**    * Will try to get the rsgroup from {@link TableDescriptor} first, and then try to get the rsgroup    * from the {@link NamespaceDescriptor}. If still not present, return empty.    */
specifier|public
specifier|static
name|Optional
argument_list|<
name|RSGroupInfo
argument_list|>
name|getRSGroupInfo
parameter_list|(
name|MasterServices
name|master
parameter_list|,
name|RSGroupInfoManager
name|manager
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptor
name|td
init|=
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|Optional
argument_list|<
name|String
argument_list|>
name|optGroupNameOfTable
init|=
name|td
operator|.
name|getRegionServerGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|optGroupNameOfTable
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|RSGroupInfo
name|group
init|=
name|manager
operator|.
name|getRSGroup
argument_list|(
name|optGroupNameOfTable
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|group
argument_list|)
return|;
block|}
block|}
comment|// for backward compatible, where we may still have table configs in the RSGroupInfo after
comment|// upgrading when migrating is still on-going.
name|RSGroupInfo
name|groupFromOldRSGroupInfo
init|=
name|manager
operator|.
name|getRSGroupForTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupFromOldRSGroupInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|groupFromOldRSGroupInfo
argument_list|)
return|;
block|}
name|ClusterSchema
name|clusterSchema
init|=
name|master
operator|.
name|getClusterSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterSchema
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can not get the namespace rs group config for meta table, since the"
operator|+
literal|" meta table is not online yet, will use default group to assign meta first"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ClusterSchema is null, can only use default rsgroup, should not happen?"
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|NamespaceDescriptor
name|nd
init|=
name|clusterSchema
operator|.
name|getNamespace
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|groupNameOfNs
init|=
name|nd
operator|.
name|getConfigurationValue
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupNameOfNs
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|manager
operator|.
name|getRSGroup
argument_list|(
name|groupNameOfNs
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Fill the tables field for {@link RSGroupInfo}, for backward compatibility.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|RSGroupInfo
name|fillTables
parameter_list|(
name|RSGroupInfo
name|rsGroupInfo
parameter_list|,
name|Collection
argument_list|<
name|TableDescriptor
argument_list|>
name|tds
parameter_list|)
block|{
name|RSGroupInfo
name|newRsGroupInfo
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|rsGroupInfo
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|TableDescriptor
argument_list|>
name|filter
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|filter
operator|=
name|td
lambda|->
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|optGroupName
init|=
name|td
operator|.
name|getRegionServerGroup
argument_list|()
decl_stmt|;
return|return
operator|!
name|optGroupName
operator|.
name|isPresent
argument_list|()
operator|||
name|optGroupName
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
return|;
block|}
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
name|td
lambda|->
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|optGroupName
init|=
name|td
operator|.
name|getRegionServerGroup
argument_list|()
decl_stmt|;
return|return
name|optGroupName
operator|.
name|isPresent
argument_list|()
operator|&&
name|optGroupName
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|newRsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
expr_stmt|;
block|}
name|tds
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|TableDescriptor
operator|::
name|getTableName
argument_list|)
operator|.
name|forEach
argument_list|(
name|newRsGroupInfo
operator|::
name|addTable
argument_list|)
expr_stmt|;
return|return
name|newRsGroupInfo
return|;
block|}
block|}
end_class

end_unit

