begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
operator|.
name|HFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|FSDataInputStreamWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|ReaderContext
operator|.
name|ReaderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A builder that helps in building up the ReaderContext  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReaderContextBuilder
block|{
specifier|private
name|Path
name|filePath
decl_stmt|;
specifier|private
name|FSDataInputStreamWrapper
name|fsdis
decl_stmt|;
specifier|private
name|long
name|fileSize
decl_stmt|;
specifier|private
name|HFileSystem
name|hfs
decl_stmt|;
specifier|private
name|boolean
name|primaryReplicaReader
init|=
literal|true
decl_stmt|;
specifier|private
name|ReaderType
name|type
init|=
name|ReaderType
operator|.
name|PREAD
decl_stmt|;
specifier|public
name|ReaderContextBuilder
parameter_list|()
block|{}
specifier|public
name|ReaderContextBuilder
name|withFilePath
parameter_list|(
name|Path
name|filePath
parameter_list|)
block|{
name|this
operator|.
name|filePath
operator|=
name|filePath
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderContextBuilder
name|withFileSize
parameter_list|(
name|long
name|fileSize
parameter_list|)
block|{
name|this
operator|.
name|fileSize
operator|=
name|fileSize
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderContextBuilder
name|withInputStreamWrapper
parameter_list|(
name|FSDataInputStreamWrapper
name|fsdis
parameter_list|)
block|{
name|this
operator|.
name|fsdis
operator|=
name|fsdis
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderContextBuilder
name|withFileSystem
parameter_list|(
name|HFileSystem
name|hfs
parameter_list|)
block|{
name|this
operator|.
name|hfs
operator|=
name|hfs
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderContextBuilder
name|withFileSystem
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|HFileSystem
operator|)
condition|)
block|{
name|this
operator|.
name|hfs
operator|=
operator|new
name|HFileSystem
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|hfs
operator|=
operator|(
name|HFileSystem
operator|)
name|fs
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|ReaderContextBuilder
name|withPrimaryReplicaReader
parameter_list|(
name|boolean
name|primaryReplicaReader
parameter_list|)
block|{
name|this
operator|.
name|primaryReplicaReader
operator|=
name|primaryReplicaReader
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderContextBuilder
name|withReaderType
parameter_list|(
name|ReaderType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|ReaderContextBuilder
name|withFileSystemAndPath
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|withFileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|filePath
argument_list|)
operator|.
name|withFileSize
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|filePath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|withInputStreamWrapper
argument_list|(
operator|new
name|FSDataInputStreamWrapper
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderContext
name|build
parameter_list|()
block|{
name|validateFields
argument_list|()
expr_stmt|;
return|return
operator|new
name|ReaderContext
argument_list|(
name|filePath
argument_list|,
name|fsdis
argument_list|,
name|fileSize
argument_list|,
name|hfs
argument_list|,
name|primaryReplicaReader
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|private
name|void
name|validateFields
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|checkNotNull
argument_list|(
name|filePath
argument_list|,
literal|"Illegal ReaderContext, no filePath specified."
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|fsdis
argument_list|,
literal|"Illegal ReaderContext, no StreamWrapper specified."
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|hfs
argument_list|,
literal|"Illegal ReaderContext, no HFileSystem specified."
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|fileSize
operator|>
literal|0L
argument_list|,
literal|"Illegal ReaderContext, fileSize<= 0"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

