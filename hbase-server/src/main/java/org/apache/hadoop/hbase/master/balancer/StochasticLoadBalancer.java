begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
operator|.
name|Action
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
operator|.
name|AssignRegionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
operator|.
name|LocalityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
operator|.
name|MoveRegionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
operator|.
name|SwapRegionsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  *<p>This is a best effort load balancer. Given a Cost function F(C) =&gt; x It will  * randomly try and mutate the cluster to Cprime. If F(Cprime)&lt; F(C) then the  * new cluster state becomes the plan. It includes costs functions to compute the cost of:</p>  *<ul>  *<li>Region Load</li>  *<li>Table Load</li>  *<li>Data Locality</li>  *<li>Memstore Sizes</li>  *<li>Storefile Sizes</li>  *</ul>  *  *  *<p>Every cost function returns a number between 0 and 1 inclusive; where 0 is the lowest cost  * best solution, and 1 is the highest possible cost and the worst solution.  The computed costs are  * scaled by their respective multipliers:</p>  *  *<ul>  *<li>hbase.master.balancer.stochastic.regionLoadCost</li>  *<li>hbase.master.balancer.stochastic.moveCost</li>  *<li>hbase.master.balancer.stochastic.tableLoadCost</li>  *<li>hbase.master.balancer.stochastic.localityCost</li>  *<li>hbase.master.balancer.stochastic.memstoreSizeCost</li>  *<li>hbase.master.balancer.stochastic.storefileSizeCost</li>  *</ul>  *  *<p>In addition to the above configurations, the balancer can be tuned by the following  * configuration values:</p>  *<ul>  *<li>hbase.master.balancer.stochastic.maxMoveRegions which  *   controls what the max number of regions that can be moved in a single invocation of this  *   balancer.</li>  *<li>hbase.master.balancer.stochastic.stepsPerRegion is the coefficient by which the number of  *   regions is multiplied to try and get the number of times the balancer will  *   mutate all servers.</li>  *<li>hbase.master.balancer.stochastic.maxSteps which controls the maximum number of times that  *   the balancer will try and mutate all the servers. The balancer will use the minimum of this  *   value and the above computation.</li>  *</ul>  *  *<p>This balancer is best used with hbase.master.loadbalance.bytable set to false  * so that the balancer gets the full picture of all loads on the cluster.</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"IS2_INCONSISTENT_SYNC"
argument_list|,
name|justification
operator|=
literal|"Complaint is about costFunctions not being synchronized; not end of the world"
argument_list|)
specifier|public
class|class
name|StochasticLoadBalancer
extends|extends
name|BaseLoadBalancer
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|STEPS_PER_REGION_KEY
init|=
literal|"hbase.master.balancer.stochastic.stepsPerRegion"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|MAX_STEPS_KEY
init|=
literal|"hbase.master.balancer.stochastic.maxSteps"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|RUN_MAX_STEPS_KEY
init|=
literal|"hbase.master.balancer.stochastic.runMaxSteps"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|MAX_RUNNING_TIME_KEY
init|=
literal|"hbase.master.balancer.stochastic.maxRunningTime"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|KEEP_REGION_LOADS
init|=
literal|"hbase.master.balancer.stochastic.numRegionLoadsToRemember"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_FUNCTION_SEP
init|=
literal|"_"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|MIN_COST_NEED_BALANCE_KEY
init|=
literal|"hbase.master.balancer.stochastic.minCostNeedBalance"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StochasticLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Deque
argument_list|<
name|BalancerRegionLoad
argument_list|>
argument_list|>
name|loads
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// values are defaults
specifier|private
name|int
name|maxSteps
init|=
literal|1000000
decl_stmt|;
specifier|private
name|boolean
name|runMaxSteps
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|stepsPerRegion
init|=
literal|800
decl_stmt|;
specifier|private
name|long
name|maxRunningTime
init|=
literal|30
operator|*
literal|1000
operator|*
literal|1
decl_stmt|;
comment|// 30 seconds.
specifier|private
name|int
name|numRegionLoadsToRemember
init|=
literal|15
decl_stmt|;
specifier|private
name|float
name|minCostNeedBalance
init|=
literal|0.05f
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
name|candidateGenerators
decl_stmt|;
specifier|private
name|CostFromRegionLoadFunction
index|[]
name|regionLoadFunctions
decl_stmt|;
specifier|private
name|CostFunction
index|[]
name|costFunctions
decl_stmt|;
comment|// FindBugs: Wants this protected; IS2_INCONSISTENT_SYNC
comment|// to save and report costs to JMX
specifier|private
name|Double
name|curOverallCost
init|=
literal|0d
decl_stmt|;
specifier|private
name|Double
index|[]
name|tempFunctionCosts
decl_stmt|;
specifier|private
name|Double
index|[]
name|curFunctionCosts
decl_stmt|;
comment|// Keep locality based picker and cost function to alert them
comment|// when new services are offered
specifier|private
name|LocalityBasedCandidateGenerator
name|localityCandidateGenerator
decl_stmt|;
specifier|private
name|ServerLocalityCostFunction
name|localityCost
decl_stmt|;
specifier|private
name|RackLocalityCostFunction
name|rackLocalityCost
decl_stmt|;
specifier|private
name|RegionReplicaHostCostFunction
name|regionReplicaHostCostFunction
decl_stmt|;
specifier|private
name|RegionReplicaRackCostFunction
name|regionReplicaRackCostFunction
decl_stmt|;
specifier|private
name|boolean
name|isByTable
init|=
literal|false
decl_stmt|;
specifier|private
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
comment|/**    * The constructor that pass a MetricsStochasticBalancer to BaseLoadBalancer to replace its    * default MetricsBalancer    */
specifier|public
name|StochasticLoadBalancer
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|MetricsStochasticBalancer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onConfigurationChange
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maxSteps
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_STEPS_KEY
argument_list|,
name|maxSteps
argument_list|)
expr_stmt|;
name|stepsPerRegion
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|STEPS_PER_REGION_KEY
argument_list|,
name|stepsPerRegion
argument_list|)
expr_stmt|;
name|maxRunningTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MAX_RUNNING_TIME_KEY
argument_list|,
name|maxRunningTime
argument_list|)
expr_stmt|;
name|runMaxSteps
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|RUN_MAX_STEPS_KEY
argument_list|,
name|runMaxSteps
argument_list|)
expr_stmt|;
name|numRegionLoadsToRemember
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|KEEP_REGION_LOADS
argument_list|,
name|numRegionLoadsToRemember
argument_list|)
expr_stmt|;
name|isByTable
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCE_BYTABLE
argument_list|,
name|isByTable
argument_list|)
expr_stmt|;
name|minCostNeedBalance
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MIN_COST_NEED_BALANCE_KEY
argument_list|,
name|minCostNeedBalance
argument_list|)
expr_stmt|;
if|if
condition|(
name|localityCandidateGenerator
operator|==
literal|null
condition|)
block|{
name|localityCandidateGenerator
operator|=
operator|new
name|LocalityBasedCandidateGenerator
argument_list|(
name|services
argument_list|)
expr_stmt|;
block|}
name|localityCost
operator|=
operator|new
name|ServerLocalityCostFunction
argument_list|(
name|conf
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|rackLocalityCost
operator|=
operator|new
name|RackLocalityCostFunction
argument_list|(
name|conf
argument_list|,
name|services
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|candidateGenerators
operator|==
literal|null
condition|)
block|{
name|candidateGenerators
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|candidateGenerators
operator|.
name|add
argument_list|(
operator|new
name|RandomCandidateGenerator
argument_list|()
argument_list|)
expr_stmt|;
name|candidateGenerators
operator|.
name|add
argument_list|(
operator|new
name|LoadCandidateGenerator
argument_list|()
argument_list|)
expr_stmt|;
name|candidateGenerators
operator|.
name|add
argument_list|(
name|localityCandidateGenerator
argument_list|)
expr_stmt|;
name|candidateGenerators
operator|.
name|add
argument_list|(
operator|new
name|RegionReplicaRackCandidateGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|regionLoadFunctions
operator|=
operator|new
name|CostFromRegionLoadFunction
index|[]
block|{
operator|new
name|ReadRequestCostFunction
argument_list|(
name|conf
argument_list|)
block|,
operator|new
name|WriteRequestCostFunction
argument_list|(
name|conf
argument_list|)
block|,
operator|new
name|MemstoreSizeCostFunction
argument_list|(
name|conf
argument_list|)
block|,
operator|new
name|StoreFileCostFunction
argument_list|(
name|conf
argument_list|)
block|}
expr_stmt|;
name|regionReplicaHostCostFunction
operator|=
operator|new
name|RegionReplicaHostCostFunction
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|regionReplicaRackCostFunction
operator|=
operator|new
name|RegionReplicaRackCostFunction
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|costFunctions
operator|=
operator|new
name|CostFunction
index|[]
block|{
operator|new
name|RegionCountSkewCostFunction
argument_list|(
name|conf
argument_list|)
block|,
operator|new
name|PrimaryRegionCountSkewCostFunction
argument_list|(
name|conf
argument_list|)
block|,
operator|new
name|MoveCostFunction
argument_list|(
name|conf
argument_list|)
block|,
name|localityCost
block|,
name|rackLocalityCost
block|,
operator|new
name|TableSkewCostFunction
argument_list|(
name|conf
argument_list|)
block|,
name|regionReplicaHostCostFunction
block|,
name|regionReplicaRackCostFunction
block|,
name|regionLoadFunctions
index|[
literal|0
index|]
block|,
name|regionLoadFunctions
index|[
literal|1
index|]
block|,
name|regionLoadFunctions
index|[
literal|2
index|]
block|,
name|regionLoadFunctions
index|[
literal|3
index|]
block|,     }
expr_stmt|;
name|curFunctionCosts
operator|=
operator|new
name|Double
index|[
name|costFunctions
operator|.
name|length
index|]
expr_stmt|;
name|tempFunctionCosts
operator|=
operator|new
name|Double
index|[
name|costFunctions
operator|.
name|length
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded config; maxSteps="
operator|+
name|maxSteps
operator|+
literal|", stepsPerRegion="
operator|+
name|stepsPerRegion
operator|+
literal|", maxRunningTime="
operator|+
name|maxRunningTime
operator|+
literal|", isByTable="
operator|+
name|isByTable
operator|+
literal|", etc."
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setCandidateGenerators
parameter_list|(
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
name|customCandidateGenerators
parameter_list|)
block|{
name|this
operator|.
name|candidateGenerators
operator|=
name|customCandidateGenerators
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setSlop
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|slop
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
literal|0.001F
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setClusterStatus
parameter_list|(
name|ClusterStatus
name|st
parameter_list|)
block|{
name|super
operator|.
name|setClusterStatus
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|updateRegionLoad
argument_list|()
expr_stmt|;
for|for
control|(
name|CostFromRegionLoadFunction
name|cost
range|:
name|regionLoadFunctions
control|)
block|{
name|cost
operator|.
name|setClusterStatus
argument_list|(
name|st
argument_list|)
expr_stmt|;
block|}
comment|// update metrics size
try|try
block|{
comment|// by-table or ensemble mode
name|int
name|tablesCount
init|=
name|isByTable
condition|?
name|services
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|1
decl_stmt|;
name|int
name|functionsCount
init|=
name|getCostFunctionNames
argument_list|()
operator|.
name|length
decl_stmt|;
name|updateMetricsSize
argument_list|(
name|tablesCount
operator|*
operator|(
name|functionsCount
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// +1 for overall
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to get the size of all tables"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update the number of metrics that are reported to JMX    */
specifier|public
name|void
name|updateMetricsSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|metricsBalancer
operator|instanceof
name|MetricsStochasticBalancer
condition|)
block|{
operator|(
operator|(
name|MetricsStochasticBalancer
operator|)
name|metricsBalancer
operator|)
operator|.
name|updateMetricsSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setMasterServices
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|super
operator|.
name|setMasterServices
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|localityCost
operator|.
name|setServices
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|rackLocalityCost
operator|.
name|setServices
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|localityCandidateGenerator
operator|.
name|setServices
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|boolean
name|areSomeRegionReplicasColocated
parameter_list|(
name|Cluster
name|c
parameter_list|)
block|{
name|regionReplicaHostCostFunction
operator|.
name|init
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionReplicaHostCostFunction
operator|.
name|cost
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
name|regionReplicaRackCostFunction
operator|.
name|init
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionReplicaRackCostFunction
operator|.
name|cost
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|needsBalance
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|ClusterLoadState
name|cs
init|=
operator|new
name|ClusterLoadState
argument_list|(
name|cluster
operator|.
name|clusterState
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|.
name|getNumServers
argument_list|()
operator|<
name|MIN_SERVER_BALANCE
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because only "
operator|+
name|cs
operator|.
name|getNumServers
argument_list|()
operator|+
literal|" active regionserver(s)"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|areSomeRegionReplicasColocated
argument_list|(
name|cluster
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|double
name|total
init|=
literal|0.0
decl_stmt|;
name|float
name|sumMultiplier
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|CostFunction
name|c
range|:
name|costFunctions
control|)
block|{
name|float
name|multiplier
init|=
name|c
operator|.
name|getMultiplier
argument_list|()
decl_stmt|;
if|if
condition|(
name|multiplier
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|c
operator|.
name|isNeeded
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|c
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" indicated that its cost should not be considered"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|sumMultiplier
operator|+=
name|multiplier
expr_stmt|;
name|total
operator|+=
name|c
operator|.
name|cost
argument_list|()
operator|*
name|multiplier
expr_stmt|;
block|}
if|if
condition|(
name|total
operator|<=
literal|0
operator|||
name|sumMultiplier
operator|<=
literal|0
operator|||
operator|(
name|sumMultiplier
operator|>
literal|0
operator|&&
operator|(
name|total
operator|/
name|sumMultiplier
operator|)
operator|<
name|minCostNeedBalance
operator|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping load balancing because balanced cluster; "
operator|+
literal|"total cost is "
operator|+
name|total
operator|+
literal|", sum multiplier is "
operator|+
name|sumMultiplier
operator|+
literal|" min cost which need balance is "
operator|+
name|minCostNeedBalance
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|balanceCluster
argument_list|(
name|clusterState
argument_list|)
return|;
block|}
comment|/**    * Given the cluster state this will try and approach an optimal balance. This    * should always approach the optimal state given enough steps.    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|balanceMasterRegions
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
if|if
condition|(
name|plans
operator|!=
literal|null
operator|||
name|clusterState
operator|==
literal|null
operator|||
name|clusterState
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
name|plans
return|;
block|}
if|if
condition|(
name|masterServerName
operator|!=
literal|null
operator|&&
name|clusterState
operator|.
name|containsKey
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|size
argument_list|()
operator|<=
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
name|clusterState
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
name|clusterState
operator|.
name|remove
argument_list|(
name|masterServerName
argument_list|)
expr_stmt|;
block|}
comment|// On clusters with lots of HFileLinks or lots of reference files,
comment|// instantiating the storefile infos can be quite expensive.
comment|// Allow turning this feature off if the locality cost is not going to
comment|// be used in any computations.
name|RegionLocationFinder
name|finder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|localityCost
operator|!=
literal|null
operator|&&
name|this
operator|.
name|localityCost
operator|.
name|getMultiplier
argument_list|()
operator|>
literal|0
operator|||
name|this
operator|.
name|rackLocalityCost
operator|!=
literal|null
operator|&&
name|this
operator|.
name|rackLocalityCost
operator|.
name|getMultiplier
argument_list|()
operator|>
literal|0
condition|)
block|{
name|finder
operator|=
name|this
operator|.
name|regionFinder
expr_stmt|;
block|}
comment|//The clusterState that is given to this method contains the state
comment|//of all the regions in the table(s) (that's true today)
comment|// Keep track of servers to iterate through them.
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
name|loads
argument_list|,
name|finder
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|initCosts
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needsBalance
argument_list|(
name|cluster
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|double
name|currentCost
init|=
name|computeCost
argument_list|(
name|cluster
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|curOverallCost
operator|=
name|currentCost
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|curFunctionCosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|curFunctionCosts
index|[
name|i
index|]
operator|=
name|tempFunctionCosts
index|[
name|i
index|]
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"start StochasticLoadBalancer.balancer, initCost="
operator|+
name|currentCost
operator|+
literal|", functionCost="
operator|+
name|functionCost
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|initCost
init|=
name|currentCost
decl_stmt|;
name|double
name|newCost
init|=
name|currentCost
decl_stmt|;
name|long
name|computedMaxSteps
decl_stmt|;
if|if
condition|(
name|runMaxSteps
condition|)
block|{
name|computedMaxSteps
operator|=
name|Math
operator|.
name|max
argument_list|(
name|this
operator|.
name|maxSteps
argument_list|,
operator|(
operator|(
name|long
operator|)
name|cluster
operator|.
name|numRegions
operator|*
operator|(
name|long
operator|)
name|this
operator|.
name|stepsPerRegion
operator|*
operator|(
name|long
operator|)
name|cluster
operator|.
name|numServers
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|computedMaxSteps
operator|=
name|Math
operator|.
name|min
argument_list|(
name|this
operator|.
name|maxSteps
argument_list|,
operator|(
operator|(
name|long
operator|)
name|cluster
operator|.
name|numRegions
operator|*
operator|(
name|long
operator|)
name|this
operator|.
name|stepsPerRegion
operator|*
operator|(
name|long
operator|)
name|cluster
operator|.
name|numServers
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Perform a stochastic walk to see if we can get a good fit.
name|long
name|step
decl_stmt|;
for|for
control|(
name|step
operator|=
literal|0
init|;
name|step
operator|<
name|computedMaxSteps
condition|;
name|step
operator|++
control|)
block|{
name|int
name|generatorIdx
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|candidateGenerators
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|CandidateGenerator
name|p
init|=
name|candidateGenerators
operator|.
name|get
argument_list|(
name|generatorIdx
argument_list|)
decl_stmt|;
name|Cluster
operator|.
name|Action
name|action
init|=
name|p
operator|.
name|generate
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|type
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
continue|continue;
block|}
name|cluster
operator|.
name|doAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|updateCostsWithAction
argument_list|(
name|cluster
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|newCost
operator|=
name|computeCost
argument_list|(
name|cluster
argument_list|,
name|currentCost
argument_list|)
expr_stmt|;
comment|// Should this be kept?
if|if
condition|(
name|newCost
operator|<
name|currentCost
condition|)
block|{
name|currentCost
operator|=
name|newCost
expr_stmt|;
comment|// save for JMX
name|curOverallCost
operator|=
name|currentCost
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|curFunctionCosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|curFunctionCosts
index|[
name|i
index|]
operator|=
name|tempFunctionCosts
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Put things back the way they were before.
comment|// TODO: undo by remembering old values
name|Action
name|undoAction
init|=
name|action
operator|.
name|undoAction
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|doAction
argument_list|(
name|undoAction
argument_list|)
expr_stmt|;
name|updateCostsWithAction
argument_list|(
name|cluster
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
operator|>
name|maxRunningTime
condition|)
block|{
break|break;
block|}
block|}
name|long
name|endTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|metricsBalancer
operator|.
name|balanceCluster
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
comment|// update costs metrics
name|updateStochasticCosts
argument_list|(
name|tableName
argument_list|,
name|curOverallCost
argument_list|,
name|curFunctionCosts
argument_list|)
expr_stmt|;
if|if
condition|(
name|initCost
operator|>
name|currentCost
condition|)
block|{
name|plans
operator|=
name|createRegionPlans
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished computing new load balance plan.  Computation took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|"ms to try "
operator|+
name|step
operator|+
literal|" different iterations.  Found a solution that moves "
operator|+
name|plans
operator|.
name|size
argument_list|()
operator|+
literal|" regions; Going from a computed cost of "
operator|+
name|initCost
operator|+
literal|" to a new cost of "
operator|+
name|currentCost
argument_list|)
expr_stmt|;
block|}
return|return
name|plans
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not find a better load balance plan.  Tried "
operator|+
name|step
operator|+
literal|" different configurations in "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|"ms, and did not find anything with a computed cost less than "
operator|+
name|initCost
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * update costs to JMX    */
specifier|private
name|void
name|updateStochasticCosts
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Double
name|overall
parameter_list|,
name|Double
index|[]
name|subCosts
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
return|return;
comment|// check if the metricsBalancer is MetricsStochasticBalancer before casting
if|if
condition|(
name|metricsBalancer
operator|instanceof
name|MetricsStochasticBalancer
condition|)
block|{
name|MetricsStochasticBalancer
name|balancer
init|=
operator|(
name|MetricsStochasticBalancer
operator|)
name|metricsBalancer
decl_stmt|;
comment|// overall cost
name|balancer
operator|.
name|updateStochasticCost
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
literal|"Overall"
argument_list|,
literal|"Overall cost"
argument_list|,
name|overall
argument_list|)
expr_stmt|;
comment|// each cost function
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|costFunctions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CostFunction
name|costFunction
init|=
name|costFunctions
index|[
name|i
index|]
decl_stmt|;
name|String
name|costFunctionName
init|=
name|costFunction
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|Double
name|costPercent
init|=
operator|(
name|overall
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
operator|(
name|subCosts
index|[
name|i
index|]
operator|/
name|overall
operator|)
decl_stmt|;
comment|// TODO: cost function may need a specific description
name|balancer
operator|.
name|updateStochasticCost
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|costFunctionName
argument_list|,
literal|"The percent of "
operator|+
name|costFunctionName
argument_list|,
name|costPercent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|functionCost
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|CostFunction
name|c
range|:
name|costFunctions
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|c
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" : ("
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|c
operator|.
name|getMultiplier
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|c
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"); "
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create all of the RegionPlan's needed to move from the initial cluster state to the desired    * state.    *    * @param cluster The state of the cluster    * @return List of RegionPlan's that represent the moves needed to get to desired final state.    */
specifier|private
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|createRegionPlans
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|regionIndex
init|=
literal|0
init|;
name|regionIndex
operator|<
name|cluster
operator|.
name|regionIndexToServerIndex
operator|.
name|length
condition|;
name|regionIndex
operator|++
control|)
block|{
name|int
name|initialServerIndex
init|=
name|cluster
operator|.
name|initialRegionIndexToServerIndex
index|[
name|regionIndex
index|]
decl_stmt|;
name|int
name|newServerIndex
init|=
name|cluster
operator|.
name|regionIndexToServerIndex
index|[
name|regionIndex
index|]
decl_stmt|;
if|if
condition|(
name|initialServerIndex
operator|!=
name|newServerIndex
condition|)
block|{
name|HRegionInfo
name|region
init|=
name|cluster
operator|.
name|regions
index|[
name|regionIndex
index|]
decl_stmt|;
name|ServerName
name|initialServer
init|=
name|cluster
operator|.
name|servers
index|[
name|initialServerIndex
index|]
decl_stmt|;
name|ServerName
name|newServer
init|=
name|cluster
operator|.
name|servers
index|[
name|newServerIndex
index|]
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Moving Region "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" from server "
operator|+
name|initialServer
operator|.
name|getHostname
argument_list|()
operator|+
literal|" to "
operator|+
name|newServer
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RegionPlan
name|rp
init|=
operator|new
name|RegionPlan
argument_list|(
name|region
argument_list|,
name|initialServer
argument_list|,
name|newServer
argument_list|)
decl_stmt|;
name|plans
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|plans
return|;
block|}
comment|/**    * Store the current region loads.    */
specifier|private
specifier|synchronized
name|void
name|updateRegionLoad
parameter_list|()
block|{
comment|// We create a new hashmap so that regions that are no longer there are removed.
comment|// However we temporarily need the old loads so we can use them to keep the rolling average.
name|Map
argument_list|<
name|String
argument_list|,
name|Deque
argument_list|<
name|BalancerRegionLoad
argument_list|>
argument_list|>
name|oldLoads
init|=
name|loads
decl_stmt|;
name|loads
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|clusterStatus
operator|.
name|getServers
argument_list|()
control|)
block|{
name|ServerLoad
name|sl
init|=
name|clusterStatus
operator|.
name|getLoad
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|entry
range|:
name|sl
operator|.
name|getRegionsLoad
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Deque
argument_list|<
name|BalancerRegionLoad
argument_list|>
name|rLoads
init|=
name|oldLoads
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rLoads
operator|==
literal|null
condition|)
block|{
comment|// There was nothing there
name|rLoads
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rLoads
operator|.
name|size
argument_list|()
operator|>=
name|numRegionLoadsToRemember
condition|)
block|{
name|rLoads
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|rLoads
operator|.
name|add
argument_list|(
operator|new
name|BalancerRegionLoad
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loads
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|rLoads
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CostFromRegionLoadFunction
name|cost
range|:
name|regionLoadFunctions
control|)
block|{
name|cost
operator|.
name|setLoads
argument_list|(
name|loads
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initCosts
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
for|for
control|(
name|CostFunction
name|c
range|:
name|costFunctions
control|)
block|{
name|c
operator|.
name|init
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateCostsWithAction
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|Action
name|action
parameter_list|)
block|{
for|for
control|(
name|CostFunction
name|c
range|:
name|costFunctions
control|)
block|{
name|c
operator|.
name|postAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the names of the cost functions    */
specifier|public
name|String
index|[]
name|getCostFunctionNames
parameter_list|()
block|{
if|if
condition|(
name|costFunctions
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
index|[]
name|ret
init|=
operator|new
name|String
index|[
name|costFunctions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|costFunctions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CostFunction
name|c
init|=
name|costFunctions
index|[
name|i
index|]
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|c
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * This is the main cost function.  It will compute a cost associated with a proposed cluster    * state.  All different costs will be combined with their multipliers to produce a double cost.    *    * @param cluster The state of the cluster    * @param previousCost the previous cost. This is used as an early out.    * @return a double of a cost associated with the proposed cluster state.  This cost is an    *         aggregate of all individual cost functions.    */
specifier|protected
name|double
name|computeCost
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|double
name|previousCost
parameter_list|)
block|{
name|double
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|costFunctions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CostFunction
name|c
init|=
name|costFunctions
index|[
name|i
index|]
decl_stmt|;
name|this
operator|.
name|tempFunctionCosts
index|[
name|i
index|]
operator|=
literal|0.0
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getMultiplier
argument_list|()
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
name|Float
name|multiplier
init|=
name|c
operator|.
name|getMultiplier
argument_list|()
decl_stmt|;
name|Double
name|cost
init|=
name|c
operator|.
name|cost
argument_list|()
decl_stmt|;
name|this
operator|.
name|tempFunctionCosts
index|[
name|i
index|]
operator|=
name|multiplier
operator|*
name|cost
expr_stmt|;
name|total
operator|+=
name|this
operator|.
name|tempFunctionCosts
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|total
operator|>
name|previousCost
condition|)
block|{
break|break;
block|}
block|}
return|return
name|total
return|;
block|}
comment|/** Generates a candidate action to be applied to the cluster for cost function search */
specifier|abstract
specifier|static
class|class
name|CandidateGenerator
block|{
specifier|abstract
name|Cluster
operator|.
name|Action
name|generate
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
function_decl|;
comment|/**      * From a list of regions pick a random one. Null can be returned which      * {@link StochasticLoadBalancer#balanceCluster(Map)} recognize as signal to try a region move      * rather than swap.      *      * @param cluster        The state of the cluster      * @param server         index of the server      * @param chanceOfNoSwap Chance that this will decide to try a move rather      *                       than a swap.      * @return a random {@link HRegionInfo} or null if an asymmetrical move is      *         suggested.      */
specifier|protected
name|int
name|pickRandomRegion
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|int
name|server
parameter_list|,
name|double
name|chanceOfNoSwap
parameter_list|)
block|{
comment|// Check to see if this is just a move.
if|if
condition|(
name|cluster
operator|.
name|regionsPerServer
index|[
name|server
index|]
operator|.
name|length
operator|==
literal|0
operator|||
name|RANDOM
operator|.
name|nextFloat
argument_list|()
operator|<
name|chanceOfNoSwap
condition|)
block|{
comment|// signal a move only.
return|return
operator|-
literal|1
return|;
block|}
name|int
name|rand
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|cluster
operator|.
name|regionsPerServer
index|[
name|server
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|cluster
operator|.
name|regionsPerServer
index|[
name|server
index|]
index|[
name|rand
index|]
return|;
block|}
specifier|protected
name|int
name|pickRandomServer
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
if|if
condition|(
name|cluster
operator|.
name|numServers
operator|<
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|cluster
operator|.
name|numServers
argument_list|)
return|;
block|}
specifier|protected
name|int
name|pickRandomRack
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
if|if
condition|(
name|cluster
operator|.
name|numRacks
operator|<
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|cluster
operator|.
name|numRacks
argument_list|)
return|;
block|}
specifier|protected
name|int
name|pickOtherRandomServer
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|int
name|serverIndex
parameter_list|)
block|{
if|if
condition|(
name|cluster
operator|.
name|numServers
operator|<
literal|2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|otherServerIndex
init|=
name|pickRandomServer
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherServerIndex
operator|!=
name|serverIndex
condition|)
block|{
return|return
name|otherServerIndex
return|;
block|}
block|}
block|}
specifier|protected
name|int
name|pickOtherRandomRack
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|int
name|rackIndex
parameter_list|)
block|{
if|if
condition|(
name|cluster
operator|.
name|numRacks
operator|<
literal|2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|otherRackIndex
init|=
name|pickRandomRack
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherRackIndex
operator|!=
name|rackIndex
condition|)
block|{
return|return
name|otherRackIndex
return|;
block|}
block|}
block|}
specifier|protected
name|Cluster
operator|.
name|Action
name|pickRandomRegions
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|int
name|thisServer
parameter_list|,
name|int
name|otherServer
parameter_list|)
block|{
if|if
condition|(
name|thisServer
operator|<
literal|0
operator|||
name|otherServer
operator|<
literal|0
condition|)
block|{
return|return
name|Cluster
operator|.
name|NullAction
return|;
block|}
comment|// Decide who is most likely to need another region
name|int
name|thisRegionCount
init|=
name|cluster
operator|.
name|getNumRegions
argument_list|(
name|thisServer
argument_list|)
decl_stmt|;
name|int
name|otherRegionCount
init|=
name|cluster
operator|.
name|getNumRegions
argument_list|(
name|otherServer
argument_list|)
decl_stmt|;
comment|// Assign the chance based upon the above
name|double
name|thisChance
init|=
operator|(
name|thisRegionCount
operator|>
name|otherRegionCount
operator|)
condition|?
literal|0
else|:
literal|0.5
decl_stmt|;
name|double
name|otherChance
init|=
operator|(
name|thisRegionCount
operator|<=
name|otherRegionCount
operator|)
condition|?
literal|0
else|:
literal|0.5
decl_stmt|;
name|int
name|thisRegion
init|=
name|pickRandomRegion
argument_list|(
name|cluster
argument_list|,
name|thisServer
argument_list|,
name|thisChance
argument_list|)
decl_stmt|;
name|int
name|otherRegion
init|=
name|pickRandomRegion
argument_list|(
name|cluster
argument_list|,
name|otherServer
argument_list|,
name|otherChance
argument_list|)
decl_stmt|;
return|return
name|getAction
argument_list|(
name|thisServer
argument_list|,
name|thisRegion
argument_list|,
name|otherServer
argument_list|,
name|otherRegion
argument_list|)
return|;
block|}
specifier|protected
name|Cluster
operator|.
name|Action
name|getAction
parameter_list|(
name|int
name|fromServer
parameter_list|,
name|int
name|fromRegion
parameter_list|,
name|int
name|toServer
parameter_list|,
name|int
name|toRegion
parameter_list|)
block|{
if|if
condition|(
name|fromServer
operator|<
literal|0
operator|||
name|toServer
operator|<
literal|0
condition|)
block|{
return|return
name|Cluster
operator|.
name|NullAction
return|;
block|}
if|if
condition|(
name|fromRegion
operator|>
literal|0
operator|&&
name|toRegion
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|Cluster
operator|.
name|SwapRegionsAction
argument_list|(
name|fromServer
argument_list|,
name|fromRegion
argument_list|,
name|toServer
argument_list|,
name|toRegion
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fromRegion
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|Cluster
operator|.
name|MoveRegionAction
argument_list|(
name|fromRegion
argument_list|,
name|fromServer
argument_list|,
name|toServer
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toRegion
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|Cluster
operator|.
name|MoveRegionAction
argument_list|(
name|toRegion
argument_list|,
name|toServer
argument_list|,
name|fromServer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Cluster
operator|.
name|NullAction
return|;
block|}
block|}
comment|/**      * Returns a random iteration order of indexes of an array with size length      */
specifier|protected
name|List
argument_list|<
name|Integer
argument_list|>
name|getRandomIterationOrder
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|order
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|order
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|order
argument_list|)
expr_stmt|;
return|return
name|order
return|;
block|}
block|}
specifier|static
class|class
name|RandomCandidateGenerator
extends|extends
name|CandidateGenerator
block|{
annotation|@
name|Override
name|Cluster
operator|.
name|Action
name|generate
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|int
name|thisServer
init|=
name|pickRandomServer
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
comment|// Pick the other server
name|int
name|otherServer
init|=
name|pickOtherRandomServer
argument_list|(
name|cluster
argument_list|,
name|thisServer
argument_list|)
decl_stmt|;
return|return
name|pickRandomRegions
argument_list|(
name|cluster
argument_list|,
name|thisServer
argument_list|,
name|otherServer
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|LoadCandidateGenerator
extends|extends
name|CandidateGenerator
block|{
annotation|@
name|Override
name|Cluster
operator|.
name|Action
name|generate
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|cluster
operator|.
name|sortServersByRegionCount
argument_list|()
expr_stmt|;
name|int
name|thisServer
init|=
name|pickMostLoadedServer
argument_list|(
name|cluster
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|otherServer
init|=
name|pickLeastLoadedServer
argument_list|(
name|cluster
argument_list|,
name|thisServer
argument_list|)
decl_stmt|;
return|return
name|pickRandomRegions
argument_list|(
name|cluster
argument_list|,
name|thisServer
argument_list|,
name|otherServer
argument_list|)
return|;
block|}
specifier|private
name|int
name|pickLeastLoadedServer
parameter_list|(
specifier|final
name|Cluster
name|cluster
parameter_list|,
name|int
name|thisServer
parameter_list|)
block|{
name|Integer
index|[]
name|servers
init|=
name|cluster
operator|.
name|serverIndicesSortedByRegionCount
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|servers
index|[
name|index
index|]
operator|==
literal|null
operator|||
name|servers
index|[
name|index
index|]
operator|==
name|thisServer
condition|)
block|{
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|servers
operator|.
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|servers
index|[
name|index
index|]
return|;
block|}
specifier|private
name|int
name|pickMostLoadedServer
parameter_list|(
specifier|final
name|Cluster
name|cluster
parameter_list|,
name|int
name|thisServer
parameter_list|)
block|{
name|Integer
index|[]
name|servers
init|=
name|cluster
operator|.
name|serverIndicesSortedByRegionCount
decl_stmt|;
name|int
name|index
init|=
name|servers
operator|.
name|length
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|servers
index|[
name|index
index|]
operator|==
literal|null
operator|||
name|servers
index|[
name|index
index|]
operator|==
name|thisServer
condition|)
block|{
name|index
operator|--
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|servers
index|[
name|index
index|]
return|;
block|}
block|}
specifier|static
class|class
name|LocalityBasedCandidateGenerator
extends|extends
name|CandidateGenerator
block|{
specifier|private
name|MasterServices
name|masterServices
decl_stmt|;
name|LocalityBasedCandidateGenerator
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
block|}
annotation|@
name|Override
name|Cluster
operator|.
name|Action
name|generate
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|masterServices
operator|==
literal|null
condition|)
block|{
name|int
name|thisServer
init|=
name|pickRandomServer
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
comment|// Pick the other server
name|int
name|otherServer
init|=
name|pickOtherRandomServer
argument_list|(
name|cluster
argument_list|,
name|thisServer
argument_list|)
decl_stmt|;
return|return
name|pickRandomRegions
argument_list|(
name|cluster
argument_list|,
name|thisServer
argument_list|,
name|otherServer
argument_list|)
return|;
block|}
comment|// Randomly iterate through regions until you find one that is not on ideal host
for|for
control|(
name|int
name|region
range|:
name|getRandomIterationOrder
argument_list|(
name|cluster
operator|.
name|numRegions
argument_list|)
control|)
block|{
name|int
name|currentServer
init|=
name|cluster
operator|.
name|regionIndexToServerIndex
index|[
name|region
index|]
decl_stmt|;
if|if
condition|(
name|currentServer
operator|!=
name|cluster
operator|.
name|getOrComputeRegionsToMostLocalEntities
argument_list|(
name|LocalityType
operator|.
name|SERVER
argument_list|)
index|[
name|region
index|]
condition|)
block|{
name|Optional
argument_list|<
name|Action
argument_list|>
name|potential
init|=
name|tryMoveOrSwap
argument_list|(
name|cluster
argument_list|,
name|currentServer
argument_list|,
name|region
argument_list|,
name|cluster
operator|.
name|getOrComputeRegionsToMostLocalEntities
argument_list|(
name|LocalityType
operator|.
name|SERVER
argument_list|)
index|[
name|region
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|potential
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|potential
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|Cluster
operator|.
name|NullAction
return|;
block|}
comment|/**      * Try to generate a move/swap fromRegion between fromServer and toServer such that locality is improved.      * Returns empty optional if no move can be found      */
specifier|private
name|Optional
argument_list|<
name|Action
argument_list|>
name|tryMoveOrSwap
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|int
name|fromServer
parameter_list|,
name|int
name|fromRegion
parameter_list|,
name|int
name|toServer
parameter_list|)
block|{
comment|// Try move first. We know apriori fromRegion has the highest locality on toServer
if|if
condition|(
name|cluster
operator|.
name|serverHasTooFewRegions
argument_list|(
name|toServer
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getAction
argument_list|(
name|fromServer
argument_list|,
name|fromRegion
argument_list|,
name|toServer
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
comment|// Compare locality gain/loss from swapping fromRegion with regions on toServer
name|double
name|fromRegionLocalityDelta
init|=
name|getWeightedLocality
argument_list|(
name|cluster
argument_list|,
name|fromRegion
argument_list|,
name|toServer
argument_list|)
operator|-
name|getWeightedLocality
argument_list|(
name|cluster
argument_list|,
name|fromRegion
argument_list|,
name|fromServer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|toRegionIndex
range|:
name|getRandomIterationOrder
argument_list|(
name|cluster
operator|.
name|regionsPerServer
index|[
name|toServer
index|]
operator|.
name|length
argument_list|)
control|)
block|{
name|int
name|toRegion
init|=
name|cluster
operator|.
name|regionsPerServer
index|[
name|toServer
index|]
index|[
name|toRegionIndex
index|]
decl_stmt|;
name|double
name|toRegionLocalityDelta
init|=
name|getWeightedLocality
argument_list|(
name|cluster
argument_list|,
name|toRegion
argument_list|,
name|fromServer
argument_list|)
operator|-
name|getWeightedLocality
argument_list|(
name|cluster
argument_list|,
name|toRegion
argument_list|,
name|toServer
argument_list|)
decl_stmt|;
comment|// If locality would remain neutral or improve, attempt the swap
if|if
condition|(
name|fromRegionLocalityDelta
operator|+
name|toRegionLocalityDelta
operator|>=
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getAction
argument_list|(
name|fromServer
argument_list|,
name|fromRegion
argument_list|,
name|toServer
argument_list|,
name|toRegion
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
specifier|private
name|double
name|getWeightedLocality
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|int
name|region
parameter_list|,
name|int
name|server
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|getOrComputeWeightedLocality
argument_list|(
name|region
argument_list|,
name|server
argument_list|,
name|LocalityType
operator|.
name|SERVER
argument_list|)
return|;
block|}
name|void
name|setServices
parameter_list|(
name|MasterServices
name|services
parameter_list|)
block|{
name|this
operator|.
name|masterServices
operator|=
name|services
expr_stmt|;
block|}
block|}
comment|/**    * Generates candidates which moves the replicas out of the region server for    * co-hosted region replicas    */
specifier|static
class|class
name|RegionReplicaCandidateGenerator
extends|extends
name|CandidateGenerator
block|{
name|RandomCandidateGenerator
name|randomGenerator
init|=
operator|new
name|RandomCandidateGenerator
argument_list|()
decl_stmt|;
comment|/**      * Randomly select one regionIndex out of all region replicas co-hosted in the same group      * (a group is a server, host or rack)      * @param primariesOfRegionsPerGroup either Cluster.primariesOfRegionsPerServer,      * primariesOfRegionsPerHost or primariesOfRegionsPerRack      * @param regionsPerGroup either Cluster.regionsPerServer, regionsPerHost or regionsPerRack      * @param regionIndexToPrimaryIndex Cluster.regionsIndexToPrimaryIndex      * @return a regionIndex for the selected primary or -1 if there is no co-locating      */
name|int
name|selectCoHostedRegionPerGroup
parameter_list|(
name|int
index|[]
name|primariesOfRegionsPerGroup
parameter_list|,
name|int
index|[]
name|regionsPerGroup
parameter_list|,
name|int
index|[]
name|regionIndexToPrimaryIndex
parameter_list|)
block|{
name|int
name|currentPrimary
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|currentPrimaryIndex
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|selectedPrimaryIndex
init|=
operator|-
literal|1
decl_stmt|;
name|double
name|currentLargestRandom
init|=
operator|-
literal|1
decl_stmt|;
comment|// primariesOfRegionsPerGroup is a sorted array. Since it contains the primary region
comment|// ids for the regions hosted in server, a consecutive repetition means that replicas
comment|// are co-hosted
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|primariesOfRegionsPerGroup
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|primary
init|=
name|j
operator|<
name|primariesOfRegionsPerGroup
operator|.
name|length
condition|?
name|primariesOfRegionsPerGroup
index|[
name|j
index|]
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|primary
operator|!=
name|currentPrimary
condition|)
block|{
comment|// check for whether we see a new primary
name|int
name|numReplicas
init|=
name|j
operator|-
name|currentPrimaryIndex
decl_stmt|;
if|if
condition|(
name|numReplicas
operator|>
literal|1
condition|)
block|{
comment|// means consecutive primaries, indicating co-location
comment|// decide to select this primary region id or not
name|double
name|currentRandom
init|=
name|RANDOM
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
comment|// we don't know how many region replicas are co-hosted, we will randomly select one
comment|// using reservoir sampling (http://gregable.com/2007/10/reservoir-sampling.html)
if|if
condition|(
name|currentRandom
operator|>
name|currentLargestRandom
condition|)
block|{
name|selectedPrimaryIndex
operator|=
name|currentPrimary
expr_stmt|;
name|currentLargestRandom
operator|=
name|currentRandom
expr_stmt|;
block|}
block|}
name|currentPrimary
operator|=
name|primary
expr_stmt|;
name|currentPrimaryIndex
operator|=
name|j
expr_stmt|;
block|}
block|}
comment|// we have found the primary id for the region to move. Now find the actual regionIndex
comment|// with the given primary, prefer to move the secondary region.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|regionsPerGroup
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|regionIndex
init|=
name|regionsPerGroup
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|selectedPrimaryIndex
operator|==
name|regionIndexToPrimaryIndex
index|[
name|regionIndex
index|]
condition|)
block|{
comment|// always move the secondary, not the primary
if|if
condition|(
name|selectedPrimaryIndex
operator|!=
name|regionIndex
condition|)
block|{
return|return
name|regionIndex
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
name|Cluster
operator|.
name|Action
name|generate
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|int
name|serverIndex
init|=
name|pickRandomServer
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|cluster
operator|.
name|numServers
operator|<=
literal|1
operator|||
name|serverIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|Cluster
operator|.
name|NullAction
return|;
block|}
name|int
name|regionIndex
init|=
name|selectCoHostedRegionPerGroup
argument_list|(
name|cluster
operator|.
name|primariesOfRegionsPerServer
index|[
name|serverIndex
index|]
argument_list|,
name|cluster
operator|.
name|regionsPerServer
index|[
name|serverIndex
index|]
argument_list|,
name|cluster
operator|.
name|regionIndexToPrimaryIndex
argument_list|)
decl_stmt|;
comment|// if there are no pairs of region replicas co-hosted, default to random generator
if|if
condition|(
name|regionIndex
operator|==
operator|-
literal|1
condition|)
block|{
comment|// default to randompicker
return|return
name|randomGenerator
operator|.
name|generate
argument_list|(
name|cluster
argument_list|)
return|;
block|}
name|int
name|toServerIndex
init|=
name|pickOtherRandomServer
argument_list|(
name|cluster
argument_list|,
name|serverIndex
argument_list|)
decl_stmt|;
name|int
name|toRegionIndex
init|=
name|pickRandomRegion
argument_list|(
name|cluster
argument_list|,
name|toServerIndex
argument_list|,
literal|0.9f
argument_list|)
decl_stmt|;
return|return
name|getAction
argument_list|(
name|serverIndex
argument_list|,
name|regionIndex
argument_list|,
name|toServerIndex
argument_list|,
name|toRegionIndex
argument_list|)
return|;
block|}
block|}
comment|/**    * Generates candidates which moves the replicas out of the rack for    * co-hosted region replicas in the same rack    */
specifier|static
class|class
name|RegionReplicaRackCandidateGenerator
extends|extends
name|RegionReplicaCandidateGenerator
block|{
annotation|@
name|Override
name|Cluster
operator|.
name|Action
name|generate
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|int
name|rackIndex
init|=
name|pickRandomRack
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|cluster
operator|.
name|numRacks
operator|<=
literal|1
operator|||
name|rackIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|super
operator|.
name|generate
argument_list|(
name|cluster
argument_list|)
return|;
block|}
name|int
name|regionIndex
init|=
name|selectCoHostedRegionPerGroup
argument_list|(
name|cluster
operator|.
name|primariesOfRegionsPerRack
index|[
name|rackIndex
index|]
argument_list|,
name|cluster
operator|.
name|regionsPerRack
index|[
name|rackIndex
index|]
argument_list|,
name|cluster
operator|.
name|regionIndexToPrimaryIndex
argument_list|)
decl_stmt|;
comment|// if there are no pairs of region replicas co-hosted, default to random generator
if|if
condition|(
name|regionIndex
operator|==
operator|-
literal|1
condition|)
block|{
comment|// default to randompicker
return|return
name|randomGenerator
operator|.
name|generate
argument_list|(
name|cluster
argument_list|)
return|;
block|}
name|int
name|serverIndex
init|=
name|cluster
operator|.
name|regionIndexToServerIndex
index|[
name|regionIndex
index|]
decl_stmt|;
name|int
name|toRackIndex
init|=
name|pickOtherRandomRack
argument_list|(
name|cluster
argument_list|,
name|rackIndex
argument_list|)
decl_stmt|;
name|int
name|rand
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|cluster
operator|.
name|serversPerRack
index|[
name|toRackIndex
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|toServerIndex
init|=
name|cluster
operator|.
name|serversPerRack
index|[
name|toRackIndex
index|]
index|[
name|rand
index|]
decl_stmt|;
name|int
name|toRegionIndex
init|=
name|pickRandomRegion
argument_list|(
name|cluster
argument_list|,
name|toServerIndex
argument_list|,
literal|0.9f
argument_list|)
decl_stmt|;
return|return
name|getAction
argument_list|(
name|serverIndex
argument_list|,
name|regionIndex
argument_list|,
name|toServerIndex
argument_list|,
name|toRegionIndex
argument_list|)
return|;
block|}
block|}
comment|/**    * Base class of StochasticLoadBalancer's Cost Functions.    */
specifier|abstract
specifier|static
class|class
name|CostFunction
block|{
specifier|private
name|float
name|multiplier
init|=
literal|0
decl_stmt|;
specifier|protected
name|Cluster
name|cluster
decl_stmt|;
name|CostFunction
parameter_list|(
name|Configuration
name|c
parameter_list|)
block|{     }
name|boolean
name|isNeeded
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
name|float
name|getMultiplier
parameter_list|()
block|{
return|return
name|multiplier
return|;
block|}
name|void
name|setMultiplier
parameter_list|(
name|float
name|m
parameter_list|)
block|{
name|this
operator|.
name|multiplier
operator|=
name|m
expr_stmt|;
block|}
comment|/** Called once per LB invocation to give the cost function      * to initialize it's state, and perform any costly calculation.      */
name|void
name|init
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
block|}
comment|/** Called once per cluster Action to give the cost function      * an opportunity to update it's state. postAction() is always      * called at least once before cost() is called with the cluster      * that this action is performed on. */
name|void
name|postAction
parameter_list|(
name|Action
name|action
parameter_list|)
block|{
switch|switch
condition|(
name|action
operator|.
name|type
condition|)
block|{
case|case
name|NULL
case|:
break|break;
case|case
name|ASSIGN_REGION
case|:
name|AssignRegionAction
name|ar
init|=
operator|(
name|AssignRegionAction
operator|)
name|action
decl_stmt|;
name|regionMoved
argument_list|(
name|ar
operator|.
name|region
argument_list|,
operator|-
literal|1
argument_list|,
name|ar
operator|.
name|server
argument_list|)
expr_stmt|;
break|break;
case|case
name|MOVE_REGION
case|:
name|MoveRegionAction
name|mra
init|=
operator|(
name|MoveRegionAction
operator|)
name|action
decl_stmt|;
name|regionMoved
argument_list|(
name|mra
operator|.
name|region
argument_list|,
name|mra
operator|.
name|fromServer
argument_list|,
name|mra
operator|.
name|toServer
argument_list|)
expr_stmt|;
break|break;
case|case
name|SWAP_REGIONS
case|:
name|SwapRegionsAction
name|a
init|=
operator|(
name|SwapRegionsAction
operator|)
name|action
decl_stmt|;
name|regionMoved
argument_list|(
name|a
operator|.
name|fromRegion
argument_list|,
name|a
operator|.
name|fromServer
argument_list|,
name|a
operator|.
name|toServer
argument_list|)
expr_stmt|;
name|regionMoved
argument_list|(
name|a
operator|.
name|toRegion
argument_list|,
name|a
operator|.
name|toServer
argument_list|,
name|a
operator|.
name|fromServer
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Uknown action:"
operator|+
name|action
operator|.
name|type
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|regionMoved
parameter_list|(
name|int
name|region
parameter_list|,
name|int
name|oldServer
parameter_list|,
name|int
name|newServer
parameter_list|)
block|{     }
specifier|abstract
name|double
name|cost
parameter_list|()
function_decl|;
comment|/**      * Function to compute a scaled cost using {@link org.apache.commons.math3.stat.descriptive.DescriptiveStatistics}.      * It assumes that this is a zero sum set of costs.  It assumes that the worst case      * possible is all of the elements in one region server and the rest having 0.      *      * @param stats the costs      * @return a scaled set of costs.      */
specifier|protected
name|double
name|costFromArray
parameter_list|(
name|double
index|[]
name|stats
parameter_list|)
block|{
name|double
name|totalCost
init|=
literal|0
decl_stmt|;
name|double
name|total
init|=
name|getSum
argument_list|(
name|stats
argument_list|)
decl_stmt|;
name|double
name|count
init|=
name|stats
operator|.
name|length
decl_stmt|;
name|double
name|mean
init|=
name|total
operator|/
name|count
decl_stmt|;
comment|// Compute max as if all region servers had 0 and one had the sum of all costs.  This must be
comment|// a zero sum cost for this to make sense.
name|double
name|max
init|=
operator|(
operator|(
name|count
operator|-
literal|1
operator|)
operator|*
name|mean
operator|)
operator|+
operator|(
name|total
operator|-
name|mean
operator|)
decl_stmt|;
comment|// It's possible that there aren't enough regions to go around
name|double
name|min
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|total
condition|)
block|{
name|min
operator|=
operator|(
operator|(
name|count
operator|-
name|total
operator|)
operator|*
name|mean
operator|)
operator|+
operator|(
operator|(
literal|1
operator|-
name|mean
operator|)
operator|*
name|total
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// Some will have 1 more than everything else.
name|int
name|numHigh
init|=
call|(
name|int
call|)
argument_list|(
name|total
operator|-
operator|(
name|Math
operator|.
name|floor
argument_list|(
name|mean
argument_list|)
operator|*
name|count
operator|)
argument_list|)
decl_stmt|;
name|int
name|numLow
init|=
call|(
name|int
call|)
argument_list|(
name|count
operator|-
name|numHigh
argument_list|)
decl_stmt|;
name|min
operator|=
operator|(
name|numHigh
operator|*
operator|(
name|Math
operator|.
name|ceil
argument_list|(
name|mean
argument_list|)
operator|-
name|mean
operator|)
operator|)
operator|+
operator|(
name|numLow
operator|*
operator|(
name|mean
operator|-
name|Math
operator|.
name|floor
argument_list|(
name|mean
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
name|min
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|min
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|n
init|=
name|stats
index|[
name|i
index|]
decl_stmt|;
name|double
name|diff
init|=
name|Math
operator|.
name|abs
argument_list|(
name|mean
operator|-
name|n
argument_list|)
decl_stmt|;
name|totalCost
operator|+=
name|diff
expr_stmt|;
block|}
name|double
name|scaled
init|=
name|scale
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|totalCost
argument_list|)
decl_stmt|;
return|return
name|scaled
return|;
block|}
specifier|private
name|double
name|getSum
parameter_list|(
name|double
index|[]
name|stats
parameter_list|)
block|{
name|double
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|s
range|:
name|stats
control|)
block|{
name|total
operator|+=
name|s
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**      * Scale the value between 0 and 1.      *      * @param min   Min value      * @param max   The Max value      * @param value The value to be scaled.      * @return The scaled value.      */
specifier|protected
name|double
name|scale
parameter_list|(
name|double
name|min
parameter_list|,
name|double
name|max
parameter_list|,
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|max
operator|<=
name|min
operator|||
name|value
operator|<=
name|min
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|(
name|max
operator|-
name|min
operator|)
operator|==
literal|0
condition|)
return|return
literal|0
return|;
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0d
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|1d
argument_list|,
operator|(
name|value
operator|-
name|min
operator|)
operator|/
operator|(
name|max
operator|-
name|min
operator|)
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Given the starting state of the regions and a potential ending state    * compute cost based upon the number of regions that have moved.    */
specifier|static
class|class
name|MoveCostFunction
extends|extends
name|CostFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MOVE_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.moveCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MAX_MOVES_PERCENT_KEY
init|=
literal|"hbase.master.balancer.stochastic.maxMovePercent"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_MOVE_COST
init|=
literal|7
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_MOVES
init|=
literal|600
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_MAX_MOVE_PERCENT
init|=
literal|0.25f
decl_stmt|;
specifier|private
specifier|final
name|float
name|maxMovesPercent
decl_stmt|;
name|MoveCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Move cost multiplier should be the same cost or higher than the rest of the costs to ensure
comment|// that large benefits are need to overcome the cost of a move.
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|MOVE_COST_KEY
argument_list|,
name|DEFAULT_MOVE_COST
argument_list|)
argument_list|)
expr_stmt|;
comment|// What percent of the number of regions a single run of the balancer can move.
name|maxMovesPercent
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MAX_MOVES_PERCENT_KEY
argument_list|,
name|DEFAULT_MAX_MOVE_PERCENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|double
name|cost
parameter_list|()
block|{
comment|// Try and size the max number of Moves, but always be prepared to move some.
name|int
name|maxMoves
init|=
name|Math
operator|.
name|max
argument_list|(
call|(
name|int
call|)
argument_list|(
name|cluster
operator|.
name|numRegions
operator|*
name|maxMovesPercent
argument_list|)
argument_list|,
name|DEFAULT_MAX_MOVES
argument_list|)
decl_stmt|;
name|double
name|moveCost
init|=
name|cluster
operator|.
name|numMovedRegions
decl_stmt|;
comment|// Don't let this single balance move more than the max moves.
comment|// This allows better scaling to accurately represent the actual cost of a move.
if|if
condition|(
name|moveCost
operator|>
name|maxMoves
condition|)
block|{
return|return
literal|1000000
return|;
comment|// return a number much greater than any of the other cost
block|}
return|return
name|scale
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|cluster
operator|.
name|numRegions
argument_list|,
name|maxMoves
argument_list|)
argument_list|,
name|moveCost
argument_list|)
return|;
block|}
block|}
comment|/**    * Compute the cost of a potential cluster state from skew in number of    * regions on a cluster.    */
specifier|static
class|class
name|RegionCountSkewCostFunction
extends|extends
name|CostFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REGION_COUNT_SKEW_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.regionCountCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_REGION_COUNT_SKEW_COST
init|=
literal|500
decl_stmt|;
specifier|private
name|double
index|[]
name|stats
init|=
literal|null
decl_stmt|;
name|RegionCountSkewCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Load multiplier should be the greatest as it is the most general way to balance data.
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|REGION_COUNT_SKEW_COST_KEY
argument_list|,
name|DEFAULT_REGION_COUNT_SKEW_COST
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|double
name|cost
parameter_list|()
block|{
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|!=
name|cluster
operator|.
name|numServers
condition|)
block|{
name|stats
operator|=
operator|new
name|double
index|[
name|cluster
operator|.
name|numServers
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|numServers
condition|;
name|i
operator|++
control|)
block|{
name|stats
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|regionsPerServer
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
block|}
return|return
name|costFromArray
argument_list|(
name|stats
argument_list|)
return|;
block|}
block|}
comment|/**    * Compute the cost of a potential cluster state from skew in number of    * primary regions on a cluster.    */
specifier|static
class|class
name|PrimaryRegionCountSkewCostFunction
extends|extends
name|CostFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PRIMARY_REGION_COUNT_SKEW_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.primaryRegionCountCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_PRIMARY_REGION_COUNT_SKEW_COST
init|=
literal|500
decl_stmt|;
specifier|private
name|double
index|[]
name|stats
init|=
literal|null
decl_stmt|;
name|PrimaryRegionCountSkewCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Load multiplier should be the greatest as primary regions serve majority of reads/writes.
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|PRIMARY_REGION_COUNT_SKEW_COST_KEY
argument_list|,
name|DEFAULT_PRIMARY_REGION_COUNT_SKEW_COST
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|double
name|cost
parameter_list|()
block|{
if|if
condition|(
operator|!
name|cluster
operator|.
name|hasRegionReplicas
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|!=
name|cluster
operator|.
name|numServers
condition|)
block|{
name|stats
operator|=
operator|new
name|double
index|[
name|cluster
operator|.
name|numServers
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|numServers
condition|;
name|i
operator|++
control|)
block|{
name|stats
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|regionIdx
range|:
name|cluster
operator|.
name|regionsPerServer
index|[
name|i
index|]
control|)
block|{
if|if
condition|(
name|regionIdx
operator|==
name|cluster
operator|.
name|regionIndexToPrimaryIndex
index|[
name|regionIdx
index|]
condition|)
block|{
name|stats
index|[
name|i
index|]
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|costFromArray
argument_list|(
name|stats
argument_list|)
return|;
block|}
block|}
comment|/**    * Compute the cost of a potential cluster configuration based upon how evenly    * distributed tables are.    */
specifier|static
class|class
name|TableSkewCostFunction
extends|extends
name|CostFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_SKEW_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.tableSkewCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_TABLE_SKEW_COST
init|=
literal|35
decl_stmt|;
name|TableSkewCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|TABLE_SKEW_COST_KEY
argument_list|,
name|DEFAULT_TABLE_SKEW_COST
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|double
name|cost
parameter_list|()
block|{
name|double
name|max
init|=
name|cluster
operator|.
name|numRegions
decl_stmt|;
name|double
name|min
init|=
operator|(
operator|(
name|double
operator|)
name|cluster
operator|.
name|numRegions
operator|)
operator|/
name|cluster
operator|.
name|numServers
decl_stmt|;
name|double
name|value
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|numMaxRegionsPerTable
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|value
operator|+=
name|cluster
operator|.
name|numMaxRegionsPerTable
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|scale
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
comment|/**    * Compute a cost of a potential cluster configuration based upon where    * {@link org.apache.hadoop.hbase.regionserver.StoreFile}s are located.    */
specifier|static
specifier|abstract
class|class
name|LocalityBasedCostFunction
extends|extends
name|CostFunction
block|{
specifier|private
specifier|final
name|LocalityType
name|type
decl_stmt|;
specifier|private
name|double
name|bestLocality
decl_stmt|;
comment|// best case locality across cluster weighted by local data size
specifier|private
name|double
name|locality
decl_stmt|;
comment|// current locality across cluster weighted by local data size
specifier|private
name|MasterServices
name|services
decl_stmt|;
name|LocalityBasedCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MasterServices
name|srv
parameter_list|,
name|LocalityType
name|type
parameter_list|,
name|String
name|localityCostKey
parameter_list|,
name|float
name|defaultLocalityCost
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|localityCostKey
argument_list|,
name|defaultLocalityCost
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|services
operator|=
name|srv
expr_stmt|;
name|this
operator|.
name|locality
operator|=
literal|0.0
expr_stmt|;
name|this
operator|.
name|bestLocality
operator|=
literal|0.0
expr_stmt|;
block|}
comment|/**      * Maps region to the current entity (server or rack) on which it is stored      */
specifier|abstract
name|int
name|regionIndexToEntityIndex
parameter_list|(
name|int
name|region
parameter_list|)
function_decl|;
specifier|public
name|void
name|setServices
parameter_list|(
name|MasterServices
name|srvc
parameter_list|)
block|{
name|this
operator|.
name|services
operator|=
name|srvc
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|init
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|locality
operator|=
literal|0.0
expr_stmt|;
name|bestLocality
operator|=
literal|0.0
expr_stmt|;
comment|// If no master, no computation will work, so assume 0 cost
if|if
condition|(
name|this
operator|.
name|services
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|region
init|=
literal|0
init|;
name|region
operator|<
name|cluster
operator|.
name|numRegions
condition|;
name|region
operator|++
control|)
block|{
name|locality
operator|+=
name|getWeightedLocality
argument_list|(
name|region
argument_list|,
name|regionIndexToEntityIndex
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|bestLocality
operator|+=
name|getWeightedLocality
argument_list|(
name|region
argument_list|,
name|getMostLocalEntityForRegion
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We normalize locality to be a score between 0 and 1.0 representing how good it
comment|// is compared to how good it could be
name|locality
operator|/=
name|bestLocality
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|regionMoved
parameter_list|(
name|int
name|region
parameter_list|,
name|int
name|oldServer
parameter_list|,
name|int
name|newServer
parameter_list|)
block|{
name|int
name|oldEntity
init|=
name|type
operator|==
name|LocalityType
operator|.
name|SERVER
condition|?
name|oldServer
else|:
name|cluster
operator|.
name|serverIndexToRackIndex
index|[
name|oldServer
index|]
decl_stmt|;
name|int
name|newEntity
init|=
name|type
operator|==
name|LocalityType
operator|.
name|SERVER
condition|?
name|newServer
else|:
name|cluster
operator|.
name|serverIndexToRackIndex
index|[
name|newServer
index|]
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|services
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|double
name|localityDelta
init|=
name|getWeightedLocality
argument_list|(
name|region
argument_list|,
name|newEntity
argument_list|)
operator|-
name|getWeightedLocality
argument_list|(
name|region
argument_list|,
name|oldEntity
argument_list|)
decl_stmt|;
name|double
name|normalizedDelta
init|=
name|localityDelta
operator|/
name|bestLocality
decl_stmt|;
name|locality
operator|+=
name|normalizedDelta
expr_stmt|;
block|}
annotation|@
name|Override
name|double
name|cost
parameter_list|()
block|{
return|return
literal|1
operator|-
name|locality
return|;
block|}
specifier|private
name|int
name|getMostLocalEntityForRegion
parameter_list|(
name|int
name|region
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|getOrComputeRegionsToMostLocalEntities
argument_list|(
name|type
argument_list|)
index|[
name|region
index|]
return|;
block|}
specifier|private
name|double
name|getWeightedLocality
parameter_list|(
name|int
name|region
parameter_list|,
name|int
name|entity
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|getOrComputeWeightedLocality
argument_list|(
name|region
argument_list|,
name|entity
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|ServerLocalityCostFunction
extends|extends
name|LocalityBasedCostFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LOCALITY_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.localityCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_LOCALITY_COST
init|=
literal|25
decl_stmt|;
name|ServerLocalityCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MasterServices
name|srv
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|srv
argument_list|,
name|LocalityType
operator|.
name|SERVER
argument_list|,
name|LOCALITY_COST_KEY
argument_list|,
name|DEFAULT_LOCALITY_COST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|int
name|regionIndexToEntityIndex
parameter_list|(
name|int
name|region
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|regionIndexToServerIndex
index|[
name|region
index|]
return|;
block|}
block|}
specifier|static
class|class
name|RackLocalityCostFunction
extends|extends
name|LocalityBasedCostFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|RACK_LOCALITY_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.rackLocalityCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_RACK_LOCALITY_COST
init|=
literal|15
decl_stmt|;
specifier|public
name|RackLocalityCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MasterServices
name|services
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|services
argument_list|,
name|LocalityType
operator|.
name|RACK
argument_list|,
name|RACK_LOCALITY_COST_KEY
argument_list|,
name|DEFAULT_RACK_LOCALITY_COST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|int
name|regionIndexToEntityIndex
parameter_list|(
name|int
name|region
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|getRackForRegion
argument_list|(
name|region
argument_list|)
return|;
block|}
block|}
comment|/**    * Base class the allows writing costs functions from rolling average of some    * number from RegionLoad.    */
specifier|abstract
specifier|static
class|class
name|CostFromRegionLoadFunction
extends|extends
name|CostFunction
block|{
specifier|private
name|ClusterStatus
name|clusterStatus
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Deque
argument_list|<
name|BalancerRegionLoad
argument_list|>
argument_list|>
name|loads
init|=
literal|null
decl_stmt|;
specifier|private
name|double
index|[]
name|stats
init|=
literal|null
decl_stmt|;
name|CostFromRegionLoadFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|void
name|setClusterStatus
parameter_list|(
name|ClusterStatus
name|status
parameter_list|)
block|{
name|this
operator|.
name|clusterStatus
operator|=
name|status
expr_stmt|;
block|}
name|void
name|setLoads
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Deque
argument_list|<
name|BalancerRegionLoad
argument_list|>
argument_list|>
name|l
parameter_list|)
block|{
name|this
operator|.
name|loads
operator|=
name|l
expr_stmt|;
block|}
annotation|@
name|Override
name|double
name|cost
parameter_list|()
block|{
if|if
condition|(
name|clusterStatus
operator|==
literal|null
operator|||
name|loads
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|!=
name|cluster
operator|.
name|numServers
condition|)
block|{
name|stats
operator|=
operator|new
name|double
index|[
name|cluster
operator|.
name|numServers
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//Cost this server has from RegionLoad
name|long
name|cost
init|=
literal|0
decl_stmt|;
comment|// for every region on this server get the rl
for|for
control|(
name|int
name|regionIndex
range|:
name|cluster
operator|.
name|regionsPerServer
index|[
name|i
index|]
control|)
block|{
name|Collection
argument_list|<
name|BalancerRegionLoad
argument_list|>
name|regionLoadList
init|=
name|cluster
operator|.
name|regionLoads
index|[
name|regionIndex
index|]
decl_stmt|;
comment|// Now if we found a region load get the type of cost that was requested.
if|if
condition|(
name|regionLoadList
operator|!=
literal|null
condition|)
block|{
name|cost
operator|+=
name|getRegionLoadCost
argument_list|(
name|regionLoadList
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the total cost to the stats.
name|stats
index|[
name|i
index|]
operator|=
name|cost
expr_stmt|;
block|}
comment|// Now return the scaled cost from data held in the stats object.
return|return
name|costFromArray
argument_list|(
name|stats
argument_list|)
return|;
block|}
specifier|protected
name|double
name|getRegionLoadCost
parameter_list|(
name|Collection
argument_list|<
name|BalancerRegionLoad
argument_list|>
name|regionLoadList
parameter_list|)
block|{
name|double
name|cost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BalancerRegionLoad
name|rl
range|:
name|regionLoadList
control|)
block|{
name|cost
operator|+=
name|getCostFromRl
argument_list|(
name|rl
argument_list|)
expr_stmt|;
block|}
return|return
name|cost
operator|/
name|regionLoadList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|double
name|getCostFromRl
parameter_list|(
name|BalancerRegionLoad
name|rl
parameter_list|)
function_decl|;
block|}
comment|/**    * Class to be used for the subset of RegionLoad costs that should be treated as rates.    * We do not compare about the actual rate in requests per second but rather the rate relative    * to the rest of the regions.    */
specifier|abstract
specifier|static
class|class
name|CostFromRegionLoadAsRateFunction
extends|extends
name|CostFromRegionLoadFunction
block|{
name|CostFromRegionLoadAsRateFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|double
name|getRegionLoadCost
parameter_list|(
name|Collection
argument_list|<
name|BalancerRegionLoad
argument_list|>
name|regionLoadList
parameter_list|)
block|{
name|double
name|cost
init|=
literal|0
decl_stmt|;
name|double
name|previous
init|=
literal|0
decl_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|BalancerRegionLoad
name|rl
range|:
name|regionLoadList
control|)
block|{
name|double
name|current
init|=
name|getCostFromRl
argument_list|(
name|rl
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFirst
condition|)
block|{
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|cost
operator|+=
name|current
operator|-
name|previous
expr_stmt|;
block|}
name|previous
operator|=
name|current
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|cost
operator|/
operator|(
name|regionLoadList
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Compute the cost of total number of read requests  The more unbalanced the higher the    * computed cost will be.  This uses a rolling average of regionload.    */
specifier|static
class|class
name|ReadRequestCostFunction
extends|extends
name|CostFromRegionLoadAsRateFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|READ_REQUEST_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.readRequestCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_READ_REQUEST_COST
init|=
literal|5
decl_stmt|;
name|ReadRequestCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|READ_REQUEST_COST_KEY
argument_list|,
name|DEFAULT_READ_REQUEST_COST
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|double
name|getCostFromRl
parameter_list|(
name|BalancerRegionLoad
name|rl
parameter_list|)
block|{
return|return
name|rl
operator|.
name|getReadRequestsCount
argument_list|()
return|;
block|}
block|}
comment|/**    * Compute the cost of total number of write requests.  The more unbalanced the higher the    * computed cost will be.  This uses a rolling average of regionload.    */
specifier|static
class|class
name|WriteRequestCostFunction
extends|extends
name|CostFromRegionLoadAsRateFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|WRITE_REQUEST_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.writeRequestCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_WRITE_REQUEST_COST
init|=
literal|5
decl_stmt|;
name|WriteRequestCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|WRITE_REQUEST_COST_KEY
argument_list|,
name|DEFAULT_WRITE_REQUEST_COST
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|double
name|getCostFromRl
parameter_list|(
name|BalancerRegionLoad
name|rl
parameter_list|)
block|{
return|return
name|rl
operator|.
name|getWriteRequestsCount
argument_list|()
return|;
block|}
block|}
comment|/**    * A cost function for region replicas. We give a very high cost to hosting    * replicas of the same region in the same host. We do not prevent the case    * though, since if numReplicas> numRegionServers, we still want to keep the    * replica open.    */
specifier|static
class|class
name|RegionReplicaHostCostFunction
extends|extends
name|CostFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REGION_REPLICA_HOST_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.regionReplicaHostCostKey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_REGION_REPLICA_HOST_COST_KEY
init|=
literal|100000
decl_stmt|;
name|long
name|maxCost
init|=
literal|0
decl_stmt|;
name|long
index|[]
name|costsPerGroup
decl_stmt|;
comment|// group is either server, host or rack
name|int
index|[]
index|[]
name|primariesOfRegionsPerGroup
decl_stmt|;
specifier|public
name|RegionReplicaHostCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|REGION_REPLICA_HOST_COST_KEY
argument_list|,
name|DEFAULT_REGION_REPLICA_HOST_COST_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|init
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// max cost is the case where every region replica is hosted together regardless of host
name|maxCost
operator|=
name|cluster
operator|.
name|numHosts
operator|>
literal|1
condition|?
name|getMaxCost
argument_list|(
name|cluster
argument_list|)
else|:
literal|0
expr_stmt|;
name|costsPerGroup
operator|=
operator|new
name|long
index|[
name|cluster
operator|.
name|numHosts
index|]
expr_stmt|;
name|primariesOfRegionsPerGroup
operator|=
name|cluster
operator|.
name|multiServersPerHost
comment|// either server based or host based
condition|?
name|cluster
operator|.
name|primariesOfRegionsPerHost
else|:
name|cluster
operator|.
name|primariesOfRegionsPerServer
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|primariesOfRegionsPerGroup
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|costsPerGroup
index|[
name|i
index|]
operator|=
name|costPerGroup
argument_list|(
name|primariesOfRegionsPerGroup
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|getMaxCost
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cluster
operator|.
name|hasRegionReplicas
condition|)
block|{
return|return
literal|0
return|;
comment|// short circuit
block|}
comment|// max cost is the case where every region replica is hosted together regardless of host
name|int
index|[]
name|primariesOfRegions
init|=
operator|new
name|int
index|[
name|cluster
operator|.
name|numRegions
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|cluster
operator|.
name|regionIndexToPrimaryIndex
argument_list|,
literal|0
argument_list|,
name|primariesOfRegions
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|regions
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|primariesOfRegions
argument_list|)
expr_stmt|;
comment|// compute numReplicas from the sorted array
return|return
name|costPerGroup
argument_list|(
name|primariesOfRegions
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|isNeeded
parameter_list|()
block|{
return|return
name|cluster
operator|.
name|hasRegionReplicas
return|;
block|}
annotation|@
name|Override
name|double
name|cost
parameter_list|()
block|{
if|if
condition|(
name|maxCost
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|totalCost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|costsPerGroup
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|totalCost
operator|+=
name|costsPerGroup
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|scale
argument_list|(
literal|0
argument_list|,
name|maxCost
argument_list|,
name|totalCost
argument_list|)
return|;
block|}
comment|/**      * For each primary region, it computes the total number of replicas in the array (numReplicas)      * and returns a sum of numReplicas-1 squared. For example, if the server hosts      * regions a, b, c, d, e, f where a and b are same replicas, and c,d,e are same replicas, it      * returns (2-1) * (2-1) + (3-1) * (3-1) + (1-1) * (1-1).      * @param primariesOfRegions a sorted array of primary regions ids for the regions hosted      * @return a sum of numReplicas-1 squared for each primary region in the group.      */
specifier|protected
name|long
name|costPerGroup
parameter_list|(
name|int
index|[]
name|primariesOfRegions
parameter_list|)
block|{
name|long
name|cost
init|=
literal|0
decl_stmt|;
name|int
name|currentPrimary
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|currentPrimaryIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|// primariesOfRegions is a sorted array of primary ids of regions. Replicas of regions
comment|// sharing the same primary will have consecutive numbers in the array.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|primariesOfRegions
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|primary
init|=
name|j
operator|<
name|primariesOfRegions
operator|.
name|length
condition|?
name|primariesOfRegions
index|[
name|j
index|]
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|primary
operator|!=
name|currentPrimary
condition|)
block|{
comment|// we see a new primary
name|int
name|numReplicas
init|=
name|j
operator|-
name|currentPrimaryIndex
decl_stmt|;
comment|// square the cost
if|if
condition|(
name|numReplicas
operator|>
literal|1
condition|)
block|{
comment|// means consecutive primaries, indicating co-location
name|cost
operator|+=
operator|(
name|numReplicas
operator|-
literal|1
operator|)
operator|*
operator|(
name|numReplicas
operator|-
literal|1
operator|)
expr_stmt|;
block|}
name|currentPrimary
operator|=
name|primary
expr_stmt|;
name|currentPrimaryIndex
operator|=
name|j
expr_stmt|;
block|}
block|}
return|return
name|cost
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|regionMoved
parameter_list|(
name|int
name|region
parameter_list|,
name|int
name|oldServer
parameter_list|,
name|int
name|newServer
parameter_list|)
block|{
if|if
condition|(
name|maxCost
operator|<=
literal|0
condition|)
block|{
return|return;
comment|// no need to compute
block|}
if|if
condition|(
name|cluster
operator|.
name|multiServersPerHost
condition|)
block|{
name|int
name|oldHost
init|=
name|cluster
operator|.
name|serverIndexToHostIndex
index|[
name|oldServer
index|]
decl_stmt|;
name|int
name|newHost
init|=
name|cluster
operator|.
name|serverIndexToHostIndex
index|[
name|newServer
index|]
decl_stmt|;
if|if
condition|(
name|newHost
operator|!=
name|oldHost
condition|)
block|{
name|costsPerGroup
index|[
name|oldHost
index|]
operator|=
name|costPerGroup
argument_list|(
name|cluster
operator|.
name|primariesOfRegionsPerHost
index|[
name|oldHost
index|]
argument_list|)
expr_stmt|;
name|costsPerGroup
index|[
name|newHost
index|]
operator|=
name|costPerGroup
argument_list|(
name|cluster
operator|.
name|primariesOfRegionsPerHost
index|[
name|newHost
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|costsPerGroup
index|[
name|oldServer
index|]
operator|=
name|costPerGroup
argument_list|(
name|cluster
operator|.
name|primariesOfRegionsPerServer
index|[
name|oldServer
index|]
argument_list|)
expr_stmt|;
name|costsPerGroup
index|[
name|newServer
index|]
operator|=
name|costPerGroup
argument_list|(
name|cluster
operator|.
name|primariesOfRegionsPerServer
index|[
name|newServer
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A cost function for region replicas for the rack distribution. We give a relatively high    * cost to hosting replicas of the same region in the same rack. We do not prevent the case    * though.    */
specifier|static
class|class
name|RegionReplicaRackCostFunction
extends|extends
name|RegionReplicaHostCostFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REGION_REPLICA_RACK_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.regionReplicaRackCostKey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_REGION_REPLICA_RACK_COST_KEY
init|=
literal|10000
decl_stmt|;
specifier|public
name|RegionReplicaRackCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|REGION_REPLICA_RACK_COST_KEY
argument_list|,
name|DEFAULT_REGION_REPLICA_RACK_COST_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|init
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
if|if
condition|(
name|cluster
operator|.
name|numRacks
operator|<=
literal|1
condition|)
block|{
name|maxCost
operator|=
literal|0
expr_stmt|;
return|return;
comment|// disabled for 1 rack
block|}
comment|// max cost is the case where every region replica is hosted together regardless of rack
name|maxCost
operator|=
name|getMaxCost
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|costsPerGroup
operator|=
operator|new
name|long
index|[
name|cluster
operator|.
name|numRacks
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|primariesOfRegionsPerRack
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|costsPerGroup
index|[
name|i
index|]
operator|=
name|costPerGroup
argument_list|(
name|cluster
operator|.
name|primariesOfRegionsPerRack
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|regionMoved
parameter_list|(
name|int
name|region
parameter_list|,
name|int
name|oldServer
parameter_list|,
name|int
name|newServer
parameter_list|)
block|{
if|if
condition|(
name|maxCost
operator|<=
literal|0
condition|)
block|{
return|return;
comment|// no need to compute
block|}
name|int
name|oldRack
init|=
name|cluster
operator|.
name|serverIndexToRackIndex
index|[
name|oldServer
index|]
decl_stmt|;
name|int
name|newRack
init|=
name|cluster
operator|.
name|serverIndexToRackIndex
index|[
name|newServer
index|]
decl_stmt|;
if|if
condition|(
name|newRack
operator|!=
name|oldRack
condition|)
block|{
name|costsPerGroup
index|[
name|oldRack
index|]
operator|=
name|costPerGroup
argument_list|(
name|cluster
operator|.
name|primariesOfRegionsPerRack
index|[
name|oldRack
index|]
argument_list|)
expr_stmt|;
name|costsPerGroup
index|[
name|newRack
index|]
operator|=
name|costPerGroup
argument_list|(
name|cluster
operator|.
name|primariesOfRegionsPerRack
index|[
name|newRack
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Compute the cost of total memstore size.  The more unbalanced the higher the    * computed cost will be.  This uses a rolling average of regionload.    */
specifier|static
class|class
name|MemstoreSizeCostFunction
extends|extends
name|CostFromRegionLoadAsRateFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MEMSTORE_SIZE_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.memstoreSizeCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_MEMSTORE_SIZE_COST
init|=
literal|5
decl_stmt|;
name|MemstoreSizeCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|MEMSTORE_SIZE_COST_KEY
argument_list|,
name|DEFAULT_MEMSTORE_SIZE_COST
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|double
name|getCostFromRl
parameter_list|(
name|BalancerRegionLoad
name|rl
parameter_list|)
block|{
return|return
name|rl
operator|.
name|getMemStoreSizeMB
argument_list|()
return|;
block|}
block|}
comment|/**    * Compute the cost of total open storefiles size.  The more unbalanced the higher the    * computed cost will be.  This uses a rolling average of regionload.    */
specifier|static
class|class
name|StoreFileCostFunction
extends|extends
name|CostFromRegionLoadFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|STOREFILE_SIZE_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.storefileSizeCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_STOREFILE_SIZE_COST
init|=
literal|5
decl_stmt|;
name|StoreFileCostFunction
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|STOREFILE_SIZE_COST_KEY
argument_list|,
name|DEFAULT_STOREFILE_SIZE_COST
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|double
name|getCostFromRl
parameter_list|(
name|BalancerRegionLoad
name|rl
parameter_list|)
block|{
return|return
name|rl
operator|.
name|getStorefileSizeMB
argument_list|()
return|;
block|}
block|}
comment|/**    * A helper function to compose the attribute name from tablename and costfunction name    */
specifier|public
specifier|static
name|String
name|composeAttributeName
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|costFunctionName
parameter_list|)
block|{
return|return
name|tableName
operator|+
name|TABLE_FUNCTION_SEP
operator|+
name|costFunctionName
return|;
block|}
block|}
end_class

end_unit

