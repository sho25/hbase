begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|DescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  *<p>This is a best effort load balancer. Given a Cost function F(C) => x It will  * randomly try and mutate the cluster to Cprime. If F(Cprime)< F(C) then the  * new cluster state becomes the plan. It includes costs functions to compute the cost of:</p>  *<ul>  *<li>Region Load</li>  *<li>Table Load</li>  *<li>Data Locality</li>  *<li>Memstore Sizes</li>  *<li>Storefile Sizes</li>  *</ul>  *  *  *<p>Every cost function returns a number between 0 and 1 inclusive; where 0 is the lowest cost  * best solution, and 1 is the highest possible cost and the worst solution.  The computed costs are  * scaled by their respective multipliers:</p>  *  *<ul>  *<li>hbase.master.balancer.stochastic.regionLoadCost</li>  *<li>hbase.master.balancer.stochastic.moveCost</li>  *<li>hbase.master.balancer.stochastic.tableLoadCost</li>  *<li>hbase.master.balancer.stochastic.localityCost</li>  *<li>hbase.master.balancer.stochastic.memstoreSizeCost</li>  *<li>hbase.master.balancer.stochastic.storefileSizeCost</li>  *</ul>  *  *<p>In addition to the above configurations, the balancer can be tuned by the following  * configuration values:</p>  *<ul>  *<li>hbase.master.balancer.stochastic.maxMoveRegions which  *   controls what the max number of regions that can be moved in a single invocation of this  *   balancer.</li>  *<li>hbase.master.balancer.stochastic.stepsPerRegion is the coefficient by which the number of  *   regions is multiplied to try and get the number of times the balancer will  *   mutate all servers.</li>  *<li>hbase.master.balancer.stochastic.maxSteps which controls the maximum number of times that  *   the balancer will try and mutate all the servers. The balancer will use the minimum of this  *   value and the above computation.</li>  *</ul>  *  *<p>This balancer is best used with hbase.master.loadbalance.bytable set to false  * so that the balancer gets the full picture of all loads on the cluster.</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|StochasticLoadBalancer
extends|extends
name|BaseLoadBalancer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|STOREFILE_SIZE_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.storefileSizeCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MEMSTORE_SIZE_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.memstoreSizeCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WRITE_REQUEST_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.writeRequestCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|READ_REQUEST_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.readRequestCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCALITY_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.localityCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_LOAD_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.tableLoadCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MOVE_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.moveCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGION_LOAD_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.regionLoadCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STEPS_PER_REGION_KEY
init|=
literal|"hbase.master.balancer.stochastic.stepsPerRegion"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MAX_STEPS_KEY
init|=
literal|"hbase.master.balancer.stochastic.maxSteps"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MAX_MOVES_KEY
init|=
literal|"hbase.master.balancer.stochastic.maxMoveRegions"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StochasticLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RegionLocationFinder
name|regionFinder
init|=
operator|new
name|RegionLocationFinder
argument_list|()
decl_stmt|;
specifier|private
name|ClusterStatus
name|clusterStatus
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RegionLoad
argument_list|>
name|loads
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RegionLoad
argument_list|>
argument_list|()
decl_stmt|;
comment|// values are defaults
specifier|private
name|int
name|maxSteps
init|=
literal|15000
decl_stmt|;
specifier|private
name|int
name|stepsPerRegion
init|=
literal|110
decl_stmt|;
specifier|private
name|int
name|maxMoves
init|=
literal|600
decl_stmt|;
specifier|private
name|float
name|loadMultiplier
init|=
literal|55
decl_stmt|;
specifier|private
name|float
name|moveCostMultiplier
init|=
literal|5
decl_stmt|;
specifier|private
name|float
name|tableMultiplier
init|=
literal|5
decl_stmt|;
specifier|private
name|float
name|localityMultiplier
init|=
literal|5
decl_stmt|;
specifier|private
name|float
name|readRequestMultiplier
init|=
literal|0
decl_stmt|;
specifier|private
name|float
name|writeRequestMultiplier
init|=
literal|0
decl_stmt|;
specifier|private
name|float
name|memStoreSizeMultiplier
init|=
literal|5
decl_stmt|;
specifier|private
name|float
name|storeFileSizeMultiplier
init|=
literal|5
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|regionFinder
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maxSteps
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_STEPS_KEY
argument_list|,
name|maxSteps
argument_list|)
expr_stmt|;
name|maxMoves
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_MOVES_KEY
argument_list|,
name|maxMoves
argument_list|)
expr_stmt|;
name|stepsPerRegion
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|STEPS_PER_REGION_KEY
argument_list|,
name|stepsPerRegion
argument_list|)
expr_stmt|;
comment|// Load multiplier should be the greatest as it is the most general way to balance data.
name|loadMultiplier
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|REGION_LOAD_COST_KEY
argument_list|,
name|loadMultiplier
argument_list|)
expr_stmt|;
comment|// Move cost multiplier should be the same cost or higer than the rest of the costs to ensure
comment|// that two costs must get better to justify a move cost.
name|moveCostMultiplier
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MOVE_COST_KEY
argument_list|,
name|moveCostMultiplier
argument_list|)
expr_stmt|;
comment|// These are the added costs so that the stochastic load balancer can get a little bit smarter
comment|// about where to move regions.
name|tableMultiplier
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|TABLE_LOAD_COST_KEY
argument_list|,
name|tableMultiplier
argument_list|)
expr_stmt|;
name|localityMultiplier
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|LOCALITY_COST_KEY
argument_list|,
name|localityMultiplier
argument_list|)
expr_stmt|;
name|memStoreSizeMultiplier
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MEMSTORE_SIZE_COST_KEY
argument_list|,
name|memStoreSizeMultiplier
argument_list|)
expr_stmt|;
name|storeFileSizeMultiplier
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|STOREFILE_SIZE_COST_KEY
argument_list|,
name|storeFileSizeMultiplier
argument_list|)
expr_stmt|;
comment|// These are not used currently.
comment|// TODO: Start using these once rolling averages are implemented for read/write load.
name|readRequestMultiplier
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|READ_REQUEST_COST_KEY
argument_list|,
name|readRequestMultiplier
argument_list|)
expr_stmt|;
name|writeRequestMultiplier
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|WRITE_REQUEST_COST_KEY
argument_list|,
name|writeRequestMultiplier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClusterStatus
parameter_list|(
name|ClusterStatus
name|st
parameter_list|)
block|{
name|super
operator|.
name|setClusterStatus
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|regionFinder
operator|.
name|setClusterStatus
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterStatus
operator|=
name|st
expr_stmt|;
name|updateRegionLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMasterServices
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|super
operator|.
name|setMasterServices
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|services
operator|=
name|masterServices
expr_stmt|;
name|this
operator|.
name|regionFinder
operator|.
name|setServices
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
block|}
comment|/**    * Given the cluster state this will try and approach an optimal balance. This    * should always approach the optimal state given enough steps.    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
comment|// No need to balance a one node cluster.
if|if
condition|(
name|clusterState
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping load balance as cluster has only one node."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Keep track of servers to iterate through them.
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|clusterState
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|initialRegionMapping
init|=
name|createRegionMapping
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|double
name|currentCost
decl_stmt|,
name|newCost
decl_stmt|,
name|initCost
decl_stmt|;
name|currentCost
operator|=
name|newCost
operator|=
name|initCost
operator|=
name|computeCost
argument_list|(
name|initialRegionMapping
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|int
name|computedMaxSteps
init|=
name|Math
operator|.
name|min
argument_list|(
name|this
operator|.
name|maxSteps
argument_list|,
operator|(
name|initialRegionMapping
operator|.
name|size
argument_list|()
operator|*
name|this
operator|.
name|stepsPerRegion
operator|)
argument_list|)
decl_stmt|;
comment|// Perform a stochastic walk to see if we can get a good fit.
for|for
control|(
name|int
name|step
init|=
literal|0
init|;
name|step
operator|<
name|computedMaxSteps
condition|;
name|step
operator|++
control|)
block|{
comment|// try and perform a mutation
for|for
control|(
name|ServerName
name|leftServer
range|:
name|servers
control|)
block|{
comment|// What server are we going to be swapping regions with ?
name|ServerName
name|rightServer
init|=
name|pickOtherServer
argument_list|(
name|leftServer
argument_list|,
name|servers
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightServer
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// Get the regions.
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|leftRegionList
init|=
name|clusterState
operator|.
name|get
argument_list|(
name|leftServer
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|rightRegionList
init|=
name|clusterState
operator|.
name|get
argument_list|(
name|rightServer
argument_list|)
decl_stmt|;
comment|// Pick what regions to swap around.
comment|// If we get a null for one then this isn't a swap just a move
name|HRegionInfo
name|lRegion
init|=
name|pickRandomRegion
argument_list|(
name|leftRegionList
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|HRegionInfo
name|rRegion
init|=
name|pickRandomRegion
argument_list|(
name|rightRegionList
argument_list|,
literal|0.5
argument_list|)
decl_stmt|;
comment|// We randomly picked to do nothing.
if|if
condition|(
name|lRegion
operator|==
literal|null
operator|&&
name|rRegion
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|rRegion
operator|!=
literal|null
condition|)
block|{
name|leftRegionList
operator|.
name|add
argument_list|(
name|rRegion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lRegion
operator|!=
literal|null
condition|)
block|{
name|rightRegionList
operator|.
name|add
argument_list|(
name|lRegion
argument_list|)
expr_stmt|;
block|}
name|newCost
operator|=
name|computeCost
argument_list|(
name|initialRegionMapping
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// Should this be kept?
if|if
condition|(
name|newCost
operator|<
name|currentCost
condition|)
block|{
name|currentCost
operator|=
name|newCost
expr_stmt|;
block|}
else|else
block|{
comment|// Put things back the way they were before.
if|if
condition|(
name|rRegion
operator|!=
literal|null
condition|)
block|{
name|leftRegionList
operator|.
name|remove
argument_list|(
name|rRegion
argument_list|)
expr_stmt|;
name|rightRegionList
operator|.
name|add
argument_list|(
name|rRegion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lRegion
operator|!=
literal|null
condition|)
block|{
name|rightRegionList
operator|.
name|remove
argument_list|(
name|lRegion
argument_list|)
expr_stmt|;
name|leftRegionList
operator|.
name|add
argument_list|(
name|lRegion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|initCost
operator|>
name|currentCost
condition|)
block|{
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|createRegionPlans
argument_list|(
name|initialRegionMapping
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished computing new laod balance plan.  Computation took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|"ms to try "
operator|+
name|computedMaxSteps
operator|+
literal|" different iterations.  Found a solution that moves "
operator|+
name|plans
operator|.
name|size
argument_list|()
operator|+
literal|" regions; Going from a computed cost of "
operator|+
name|initCost
operator|+
literal|" to a new cost of "
operator|+
name|currentCost
argument_list|)
expr_stmt|;
return|return
name|plans
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not find a better load balance plan.  Tried "
operator|+
name|computedMaxSteps
operator|+
literal|" different configurations in "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|"ms, and did not find anything with a computed cost less than "
operator|+
name|initCost
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Create all of the RegionPlan's needed to move from the initial cluster state to the desired    * state.    *    * @param initialRegionMapping Initial mapping of Region to Server    * @param clusterState The desired mapping of ServerName to Regions    * @return List of RegionPlan's that represent the moves needed to get to desired final state.    */
specifier|private
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|createRegionPlans
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|initialRegionMapping
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
operator|new
name|LinkedList
argument_list|<
name|RegionPlan
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|clusterState
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|newServer
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ServerName
name|initialServer
init|=
name|initialRegionMapping
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newServer
operator|.
name|equals
argument_list|(
name|initialServer
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Moving Region "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" from server "
operator|+
name|initialServer
operator|.
name|getHostname
argument_list|()
operator|+
literal|" to "
operator|+
name|newServer
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|RegionPlan
name|rp
init|=
operator|new
name|RegionPlan
argument_list|(
name|region
argument_list|,
name|initialServer
argument_list|,
name|newServer
argument_list|)
decl_stmt|;
name|plans
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|plans
return|;
block|}
comment|/**    * Create a map that will represent the initial location of regions on a    * {@link ServerName}    *    * @param clusterState starting state of the cluster and regions.    * @return A map of {@link HRegionInfo} to the {@link ServerName} that is    *         currently hosting that region    */
specifier|private
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|createRegionMapping
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|clusterState
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mapping
return|;
block|}
comment|/** Store the current region loads. */
specifier|private
name|void
name|updateRegionLoad
parameter_list|()
block|{
name|loads
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|clusterStatus
operator|.
name|getServers
argument_list|()
control|)
block|{
name|ServerLoad
name|sl
init|=
name|clusterStatus
operator|.
name|getLoad
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|entry
range|:
name|sl
operator|.
name|getRegionsLoad
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|loads
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * From a list of regions pick a random one. Null can be returned which    * {@link StochasticLoadBalancer#balanceCluster(Map)} recognize as signal to try a region move    * rather than swap.    *    * @param regions        list of regions.    * @param chanceOfNoSwap Chance that this will decide to try a move rather    *                       than a swap.    * @return a random {@link HRegionInfo} or null if an asymmetrical move is    *         suggested.    */
specifier|private
name|HRegionInfo
name|pickRandomRegion
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|double
name|chanceOfNoSwap
parameter_list|)
block|{
comment|//Check to see if this is just a move.
if|if
condition|(
name|regions
operator|.
name|isEmpty
argument_list|()
operator|||
name|RANDOM
operator|.
name|nextFloat
argument_list|()
operator|<
name|chanceOfNoSwap
condition|)
block|{
comment|//signal a move only.
return|return
literal|null
return|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|HRegionInfo
name|r
init|=
literal|null
decl_stmt|;
comment|//We will try and find a region up to 10 times.  If we always
while|while
condition|(
name|count
operator|<
literal|10
operator|&&
name|r
operator|==
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|r
operator|=
name|regions
operator|.
name|get
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// If this is a special region we always try not to move it.
comment|// so clear out r.  try again
if|if
condition|(
name|r
operator|.
name|isMetaRegion
argument_list|()
operator|||
name|r
operator|.
name|isRootRegion
argument_list|()
condition|)
block|{
name|r
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|regions
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**    * Given a server we will want to switch regions with another server. This    * function picks a random server from the list.    *    * @param server     Current Server. This server will never be the return value.    * @param allServers list of all server from which to pick    * @return random server. Null if no other servers were found.    */
specifier|private
name|ServerName
name|pickOtherServer
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|allServers
parameter_list|)
block|{
name|ServerName
name|s
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
literal|100
operator|&&
operator|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|equals
argument_list|(
name|server
argument_list|)
operator|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|s
operator|=
name|allServers
operator|.
name|get
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|allServers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If nothing but the current server was found return null.
return|return
operator|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|equals
argument_list|(
name|server
argument_list|)
operator|)
condition|?
literal|null
else|:
name|s
return|;
block|}
comment|/**    * This is the main cost function.  It will compute a cost associated with a proposed cluster    * state.  All different costs will be combined with their multipliers to produce a double cost.    *    * @param initialRegionMapping Map of where the regions started.    * @param clusterState Map of ServerName to list of regions.    * @return a double of a cost associated with the proposed    */
specifier|protected
name|double
name|computeCost
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|initialRegionMapping
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|double
name|moveCost
init|=
name|moveCostMultiplier
operator|*
name|computeMoveCost
argument_list|(
name|initialRegionMapping
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|double
name|regionCountSkewCost
init|=
name|loadMultiplier
operator|*
name|computeSkewLoadCost
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|double
name|tableSkewCost
init|=
name|tableMultiplier
operator|*
name|computeTableSkewLoadCost
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|double
name|localityCost
init|=
name|localityMultiplier
operator|*
name|computeDataLocalityCost
argument_list|(
name|initialRegionMapping
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
comment|// TODO: Add Read and Write requests back in here after keeping a running average on per
comment|// region load metrics.
name|double
name|memstoreSizeCost
init|=
name|memStoreSizeMultiplier
operator|*
name|computeRegionLoadCost
argument_list|(
name|clusterState
argument_list|,
name|RegionLoadCostType
operator|.
name|MEMSTORE_SIZE
argument_list|)
decl_stmt|;
name|double
name|storefileSizeCost
init|=
name|storeFileSizeMultiplier
operator|*
name|computeRegionLoadCost
argument_list|(
name|clusterState
argument_list|,
name|RegionLoadCostType
operator|.
name|STOREFILE_SIZE
argument_list|)
decl_stmt|;
name|double
name|total
init|=
name|moveCost
operator|+
name|regionCountSkewCost
operator|+
name|tableSkewCost
operator|+
name|localityCost
operator|+
name|memstoreSizeCost
operator|+
name|storefileSizeCost
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Computed weights for a potential balancing total = "
operator|+
name|total
operator|+
literal|" moveCost = "
operator|+
name|moveCost
operator|+
literal|" regionCountSkewCost = "
operator|+
name|regionCountSkewCost
operator|+
literal|" tableSkewCost = "
operator|+
name|tableSkewCost
operator|+
literal|" localityCost = "
operator|+
name|localityCost
operator|+
literal|" memstoreSizeCost = "
operator|+
name|memstoreSizeCost
operator|+
literal|" storefileSizeCost = "
operator|+
name|storefileSizeCost
argument_list|)
expr_stmt|;
return|return
name|total
return|;
block|}
comment|/**    * Given the starting state of the regions and a potential ending state    * compute cost based upon the number of regions that have moved.    *    * @param initialRegionMapping The starting location of regions.    * @param clusterState         The potential new cluster state.    * @return The cost. Between 0 and 1.    */
name|double
name|computeMoveCost
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|initialRegionMapping
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|float
name|moveCost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|clusterState
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|initialRegionMapping
operator|.
name|get
argument_list|(
name|region
argument_list|)
operator|!=
name|entry
operator|.
name|getKey
argument_list|()
condition|)
block|{
name|moveCost
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
comment|//Don't let this single balance move more than the max moves.
comment|//This allows better scaling to accurately represent the actual cost of a move.
if|if
condition|(
name|moveCost
operator|>
name|maxMoves
condition|)
block|{
return|return
literal|10000
return|;
comment|//return a number much greater than any of the other cost functions
block|}
return|return
name|scale
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxMoves
argument_list|,
name|initialRegionMapping
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|moveCost
argument_list|)
return|;
block|}
comment|/**    * Compute the cost of a potential cluster state from skew in number of    * regions on a cluster    *    * @param clusterState The proposed cluster state    * @return The cost of region load imbalance.    */
name|double
name|computeSkewLoadCost
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|DescriptiveStatistics
name|stats
init|=
operator|new
name|DescriptiveStatistics
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
range|:
name|clusterState
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|size
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
name|stats
operator|.
name|addValue
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
return|return
name|costFromStats
argument_list|(
name|stats
argument_list|)
return|;
block|}
comment|/**    * Compute the cost of a potential cluster configuration based upon how evenly    * distributed tables are.    *    * @param clusterState Proposed cluster state.    * @return Cost of imbalance in table.    */
name|double
name|computeTableSkewLoadCost
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|tableRegionsTotal
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|tableRegionsOnCurrentServer
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tableCostSeenSoFar
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// Go through everything per server
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|clusterState
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tableRegionsOnCurrentServer
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// For all of the regions count how many are from each table
for|for
control|(
name|HRegionInfo
name|region
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|tableName
init|=
name|region
operator|.
name|getTableNameAsString
argument_list|()
decl_stmt|;
comment|// See if this table already has a count on this server
name|MutableInt
name|regionsOnServerCount
init|=
name|tableRegionsOnCurrentServer
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// If this is the first time we've seen this table on this server
comment|// create a new mutable int.
if|if
condition|(
name|regionsOnServerCount
operator|==
literal|null
condition|)
block|{
name|regionsOnServerCount
operator|=
operator|new
name|MutableInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tableRegionsOnCurrentServer
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|regionsOnServerCount
argument_list|)
expr_stmt|;
block|}
comment|// Increment the count of how many regions from this table are host on
comment|// this server
name|regionsOnServerCount
operator|.
name|increment
argument_list|()
expr_stmt|;
comment|// Now count the number of regions in this table.
name|MutableInt
name|totalCount
init|=
name|tableRegionsTotal
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// If this is the first region from this table create a new counter for
comment|// this table.
if|if
condition|(
name|totalCount
operator|==
literal|null
condition|)
block|{
name|totalCount
operator|=
operator|new
name|MutableInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tableRegionsTotal
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|totalCount
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
comment|// Now go through all of the tables we have seen and keep the max number
comment|// of regions of this table a single region server is hosting.
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|currentServerEntry
range|:
name|tableRegionsOnCurrentServer
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tableName
init|=
name|currentServerEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|thisCount
init|=
name|currentServerEntry
operator|.
name|getValue
argument_list|()
operator|.
name|toInteger
argument_list|()
decl_stmt|;
name|Integer
name|maxCountSoFar
init|=
name|tableCostSeenSoFar
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCountSoFar
operator|==
literal|null
operator|||
name|thisCount
operator|.
name|compareTo
argument_list|(
name|maxCountSoFar
argument_list|)
operator|>
literal|0
condition|)
block|{
name|tableCostSeenSoFar
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|thisCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|double
name|max
init|=
literal|0
decl_stmt|;
name|double
name|min
init|=
literal|0
decl_stmt|;
name|double
name|value
init|=
literal|0
decl_stmt|;
comment|// Compute the min, value, and max.
for|for
control|(
name|String
name|tableName
range|:
name|tableRegionsTotal
operator|.
name|keySet
argument_list|()
control|)
block|{
name|max
operator|+=
name|tableRegionsTotal
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
name|min
operator|+=
name|tableRegionsTotal
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|doubleValue
argument_list|()
operator|/
operator|(
name|double
operator|)
name|clusterState
operator|.
name|size
argument_list|()
expr_stmt|;
name|value
operator|+=
name|tableCostSeenSoFar
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
return|return
name|scale
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Compute a cost of a potential cluster configuration based upon where    * {@link org.apache.hadoop.hbase.regionserver.StoreFile}s are located.    *    * @param clusterState The state of the cluster    * @return A cost between 0 and 1. 0 Means all regions are on the sever with    *         the most local store files.    */
name|double
name|computeDataLocalityCost
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|initialRegionMapping
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|double
name|max
init|=
literal|0
decl_stmt|;
name|double
name|cost
init|=
literal|0
decl_stmt|;
comment|// If there's no master so there's no way anything else works.
if|if
condition|(
name|this
operator|.
name|services
operator|==
literal|null
condition|)
return|return
name|cost
return|;
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|clusterState
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|sn
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|max
operator|+=
literal|1
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|dataOnServers
init|=
name|regionFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// If we can't find where the data is getTopBlock returns null.
comment|// so count that as being the best possible.
if|if
condition|(
name|dataOnServers
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|int
name|index
init|=
name|dataOnServers
operator|.
name|indexOf
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|cost
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|cost
operator|+=
operator|(
name|double
operator|)
name|index
operator|/
operator|(
name|double
operator|)
name|dataOnServers
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|scale
argument_list|(
literal|0
argument_list|,
name|max
argument_list|,
name|cost
argument_list|)
return|;
block|}
comment|/** The cost's that can be derived from RegionLoad */
specifier|private
enum|enum
name|RegionLoadCostType
block|{
name|READ_REQUEST
block|,
name|WRITE_REQUEST
block|,
name|MEMSTORE_SIZE
block|,
name|STOREFILE_SIZE
block|}
comment|/**    * Compute the cost of the current cluster state due to some RegionLoadCost type    *    * @param clusterState the cluster    * @param costType     what type of cost to consider    * @return the scaled cost.    */
specifier|private
name|double
name|computeRegionLoadCost
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|,
name|RegionLoadCostType
name|costType
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|clusterStatus
operator|==
literal|null
operator|||
name|this
operator|.
name|loads
operator|==
literal|null
operator|||
name|this
operator|.
name|loads
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|DescriptiveStatistics
name|stats
init|=
operator|new
name|DescriptiveStatistics
argument_list|()
decl_stmt|;
comment|// For every server look at the cost of each region
for|for
control|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
range|:
name|clusterState
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|cost
init|=
literal|0
decl_stmt|;
comment|//Cost this server has from RegionLoad
comment|// For each region
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
comment|// Try and get the region using the regionNameAsString
name|RegionLoad
name|rl
init|=
name|loads
operator|.
name|get
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
decl_stmt|;
comment|// That could have failed if the RegionLoad is using the other regionName
if|if
condition|(
name|rl
operator|==
literal|null
condition|)
block|{
comment|// Try getting the region load using encoded name.
name|rl
operator|=
name|loads
operator|.
name|get
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now if we found a region load get the type of cost that was requested.
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
name|cost
operator|+=
name|getRegionLoadCost
argument_list|(
name|rl
argument_list|,
name|costType
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the total cost to the stats.
name|stats
operator|.
name|addValue
argument_list|(
name|cost
argument_list|)
expr_stmt|;
block|}
comment|// No return the scaled cost from data held in the stats object.
return|return
name|costFromStats
argument_list|(
name|stats
argument_list|)
return|;
block|}
comment|/**    * Get the un-scaled cost from a RegionLoad    *    * @param rl   the Region load    * @param type The type of cost to extract    * @return the double representing the cost    */
specifier|private
name|double
name|getRegionLoadCost
parameter_list|(
name|RegionLoad
name|rl
parameter_list|,
name|RegionLoadCostType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|READ_REQUEST
case|:
return|return
name|rl
operator|.
name|getReadRequestsCount
argument_list|()
return|;
case|case
name|WRITE_REQUEST
case|:
return|return
name|rl
operator|.
name|getWriteRequestsCount
argument_list|()
return|;
case|case
name|MEMSTORE_SIZE
case|:
return|return
name|rl
operator|.
name|getMemStoreSizeMB
argument_list|()
return|;
case|case
name|STOREFILE_SIZE
case|:
return|return
name|rl
operator|.
name|getStorefileSizeMB
argument_list|()
return|;
default|default:
assert|assert
literal|false
operator|:
literal|"RegionLoad cost type not supported."
assert|;
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Function to compute a scaled cost using {@link DescriptiveStatistics}. It    * assumes that this is a zero sum set of costs.  It assumes that the worst case    * possible is all of the elements in one region server and the rest having 0.    *    * @param stats the costs    * @return a scaled set of costs.    */
name|double
name|costFromStats
parameter_list|(
name|DescriptiveStatistics
name|stats
parameter_list|)
block|{
name|double
name|totalCost
init|=
literal|0
decl_stmt|;
name|double
name|mean
init|=
name|stats
operator|.
name|getMean
argument_list|()
decl_stmt|;
comment|//Compute max as if all region servers had 0 and one had the sum of all costs.  This must be
comment|// a zero sum cost for this to make sense.
name|double
name|max
init|=
operator|(
operator|(
name|stats
operator|.
name|getN
argument_list|()
operator|-
literal|1
operator|)
operator|*
name|stats
operator|.
name|getMean
argument_list|()
operator|)
operator|+
operator|(
name|stats
operator|.
name|getSum
argument_list|()
operator|-
name|stats
operator|.
name|getMean
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|double
name|n
range|:
name|stats
operator|.
name|getValues
argument_list|()
control|)
block|{
name|totalCost
operator|+=
name|Math
operator|.
name|abs
argument_list|(
name|mean
operator|-
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|scale
argument_list|(
literal|0
argument_list|,
name|max
argument_list|,
name|totalCost
argument_list|)
return|;
block|}
comment|/**    * Scale the value between 0 and 1.    *    * @param min   Min value    * @param max   The Max value    * @param value The value to be scaled.    * @return The scaled value.    */
specifier|private
name|double
name|scale
parameter_list|(
name|double
name|min
parameter_list|,
name|double
name|max
parameter_list|,
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|max
operator|==
literal|0
operator|||
name|value
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0d
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|1d
argument_list|,
operator|(
name|value
operator|-
name|min
operator|)
operator|/
name|max
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

