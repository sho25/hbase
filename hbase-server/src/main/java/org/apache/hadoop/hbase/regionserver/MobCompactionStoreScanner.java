begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_comment
comment|/**  * Scanner scans the MOB Store. Coalesce KeyValue stream into List<KeyValue>  * for a single row. It's only used in the compaction of mob-enabled columns.  * It outputs the normal cells and delete markers when outputDeleteMarkers is set as true.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MobCompactionStoreScanner
extends|extends
name|StoreScanner
block|{
comment|/*    * The delete markers are probably contained in the output of the scanner, for instance the    * minor compaction. If outputDeleteMarkers is set as true, these delete markers could be    * written to the del file, otherwise it's not allowed.    */
specifier|protected
name|boolean
name|outputDeleteMarkers
decl_stmt|;
comment|/**    * Used for compactions.<p>    *    * Opens a scanner across specified StoreFiles.    * @param store who we scan    * @param scan the spec    * @param scanners ancillary scanners    * @param smallestReadPoint the readPoint that we should use for tracking    *          versions    */
specifier|public
name|MobCompactionStoreScanner
parameter_list|(
name|Store
name|store
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|boolean
name|outputDeleteMarkers
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|store
argument_list|,
name|scanInfo
argument_list|,
name|scan
argument_list|,
name|scanners
argument_list|,
name|scanType
argument_list|,
name|smallestReadPoint
argument_list|,
name|earliestPutTs
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputDeleteMarkers
operator|=
name|outputDeleteMarkers
expr_stmt|;
block|}
comment|/**    * Gets whether the delete markers could be written to the del files.    * @return True if the delete markers could be written del files, false if it's not allowed.    */
specifier|public
name|boolean
name|isOutputDeleteMarkers
parameter_list|()
block|{
return|return
name|this
operator|.
name|outputDeleteMarkers
return|;
block|}
block|}
end_class

end_unit

