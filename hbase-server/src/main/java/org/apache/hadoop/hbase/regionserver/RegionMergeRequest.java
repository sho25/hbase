begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
operator|.
name|TransitionCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Handles processing region merges. Put in a queue, owned by HRegionServer.  */
end_comment

begin_comment
comment|// UNUSED: REMOVE!!!
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|RegionMergeRequest
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionMergeRequest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HRegionInfo
name|region_a
decl_stmt|;
specifier|private
specifier|final
name|HRegionInfo
name|region_b
decl_stmt|;
specifier|private
specifier|final
name|HRegionServer
name|server
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|forcible
decl_stmt|;
specifier|private
specifier|final
name|User
name|user
decl_stmt|;
name|RegionMergeRequest
parameter_list|(
name|Region
name|a
parameter_list|,
name|Region
name|b
parameter_list|,
name|HRegionServer
name|hrs
parameter_list|,
name|boolean
name|forcible
parameter_list|,
name|long
name|masterSystemTime
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|hrs
argument_list|)
expr_stmt|;
name|this
operator|.
name|region_a
operator|=
name|a
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|this
operator|.
name|region_b
operator|=
name|b
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|hrs
expr_stmt|;
name|this
operator|.
name|forcible
operator|=
name|forcible
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MergeRequest,regions:"
operator|+
name|region_a
operator|+
literal|", "
operator|+
name|region_b
operator|+
literal|", forcible="
operator|+
name|forcible
return|;
block|}
specifier|private
name|void
name|doMerge
parameter_list|()
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
comment|//server.metricsRegionServer.incrMergeRequest();
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|getUGI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|user
operator|.
name|getUGI
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|requestRegionMerge
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requestRegionMerge
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|requestRegionMerge
parameter_list|()
block|{
specifier|final
name|TableName
name|table
init|=
name|region_a
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|equals
argument_list|(
name|region_b
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't merge regions from two different tables: "
operator|+
name|region_a
operator|+
literal|", "
operator|+
name|region_b
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO: fake merged region for compat with the report protocol
specifier|final
name|HRegionInfo
name|merged
init|=
operator|new
name|HRegionInfo
argument_list|(
name|table
argument_list|)
decl_stmt|;
comment|// Send the split request to the master. the master will do the validation on the split-key.
comment|// The parent region will be unassigned and the two new regions will be assigned.
comment|// hri_a and hri_b objects may not reflect the regions that will be created, those objectes
comment|// are created just to pass the information to the reportRegionStateTransition().
if|if
condition|(
operator|!
name|server
operator|.
name|reportRegionStateTransition
argument_list|(
name|TransitionCode
operator|.
name|READY_TO_MERGE
argument_list|,
name|merged
argument_list|,
name|region_a
argument_list|,
name|region_b
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to ask master to merge: "
operator|+
name|region_a
operator|+
literal|", "
operator|+
name|region_b
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|.
name|isStopping
argument_list|()
operator|||
name|this
operator|.
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping merge because server is stopping="
operator|+
name|this
operator|.
name|server
operator|.
name|isStopping
argument_list|()
operator|+
literal|" or stopped="
operator|+
name|this
operator|.
name|server
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|doMerge
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

