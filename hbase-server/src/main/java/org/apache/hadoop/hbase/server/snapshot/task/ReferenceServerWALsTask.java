begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|task
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|TakeSnapshotUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|error
operator|.
name|SnapshotExceptionSnare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_comment
comment|/**  * Reference all the WAL files under a server's WAL directory  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ReferenceServerWALsTask
extends|extends
name|SnapshotTask
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReferenceServerWALsTask
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// XXX does this need to be HasThread?
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|String
name|serverName
decl_stmt|;
specifier|private
name|Path
name|logDir
decl_stmt|;
comment|/**    * @param snapshot snapshot being run    * @param failureListener listener to check for errors while running the operation and to    *          propagate errors found while running the task    * @param logDir log directory for the server. Name of the directory is taken as the name of the    *          server    * @param conf {@link Configuration} to extract fileystem information    * @param fs filesystem where the log files are stored and should be referenced    * @throws IOException    */
specifier|public
name|ReferenceServerWALsTask
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|,
name|SnapshotExceptionSnare
name|failureListener
parameter_list|,
specifier|final
name|Path
name|logDir
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
name|failureListener
argument_list|,
literal|"Reference WALs for server:"
operator|+
name|logDir
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|serverName
operator|=
name|logDir
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|logDir
operator|=
name|logDir
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO switch to using a single file to reference all required WAL files
comment|// Iterate through each of the log files and add a reference to it.
comment|// assumes that all the files under the server's logs directory is a log
name|FileStatus
index|[]
name|serverLogs
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|logDir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverLogs
operator|==
literal|null
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"No logs for server directory:"
operator|+
name|logDir
operator|+
literal|", done referencing files."
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding references for WAL files:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|serverLogs
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|serverLogs
control|)
block|{
name|this
operator|.
name|failOnError
argument_list|()
expr_stmt|;
comment|// TODO - switch to using MonitoredTask
comment|// add the reference to the file
comment|// 0. Build a reference path based on the file name
comment|// get the current snapshot directory
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|this
operator|.
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|Path
name|snapshotLogDir
init|=
name|TakeSnapshotUtils
operator|.
name|getSnapshotHLogsDir
argument_list|(
name|snapshotDir
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
comment|// actually store the reference on disk (small file)
name|Path
name|ref
init|=
operator|new
name|Path
argument_list|(
name|snapshotLogDir
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|createNewFile
argument_list|(
name|ref
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|ref
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create reference for:"
operator|+
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed WAL referencing for: "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" to "
operator|+
name|ref
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully completed WAL referencing for ALL files"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

