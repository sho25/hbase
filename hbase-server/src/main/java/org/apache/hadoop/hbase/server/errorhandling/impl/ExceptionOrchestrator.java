begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_comment
comment|/**  * The orchestrator acts as a central point of control of error handling. Any exceptions passed to  *<tt>this</tt> get passed directly to the listeners.  *<p>  * Any exception listener added will only be<b>weakly referenced</b>, so you must keep a reference  * to it if you want to use it other places. This allows minimal effort error monitoring, allowing  * you to register an error listener and then not worry about having to unregister the listener.  *<p>  * A single {@link ExceptionOrchestrator} should be used for each set of operation attempts (e.g.  * one parent operation with child operations, potentially multiple levels deep) to monitor. This  * allows for a single source of truth for exception dispatch between all the interested operation  * attempts.  * @param<E> Type of {@link Exception} to expect when receiving errors  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ExceptionOrchestrator
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
implements|implements
name|ExceptionListener
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExceptionOrchestrator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Name
name|name
decl_stmt|;
specifier|protected
specifier|final
name|ListMultimap
argument_list|<
name|ExceptionVisitor
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|listeners
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/** Error visitor for framework listeners */
specifier|public
specifier|final
name|ForwardingErrorVisitor
name|genericVisitor
init|=
operator|new
name|ForwardingErrorVisitor
argument_list|()
decl_stmt|;
specifier|public
name|ExceptionOrchestrator
parameter_list|()
block|{
name|this
argument_list|(
literal|"generic-error-dispatcher"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExceptionOrchestrator
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
operator|new
name|Name
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Name
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
specifier|synchronized
name|void
name|receiveError
parameter_list|(
name|String
name|message
parameter_list|,
name|E
name|e
parameter_list|,
name|Object
modifier|...
name|info
parameter_list|)
block|{
comment|// update all the listeners with the passed error
name|LOG
operator|.
name|debug
argument_list|(
name|name
operator|.
name|getNamePrefixForLog
argument_list|()
operator|+
literal|" Recieved error, notifying listeners..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|ExceptionVisitor
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|ExceptionVisitor
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ExceptionVisitor
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|listeners
operator|.
name|entries
argument_list|()
control|)
block|{
name|Object
name|o
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
comment|// if the listener doesn't have a reference, then drop it from the list
comment|// need to copy this over b/c guava is finicky with the entries
name|toRemove
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|ExceptionVisitor
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// otherwise notify the listener that we had a failure
operator|(
operator|(
name|ExceptionVisitor
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|visit
argument_list|(
name|o
argument_list|,
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
comment|// cleanup all visitors that aren't referenced anymore
if|if
condition|(
name|toRemove
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|LOG
operator|.
name|debug
argument_list|(
name|name
operator|.
name|getNamePrefixForLog
argument_list|()
operator|+
literal|" Cleaning up entries."
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|ExceptionVisitor
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|toRemove
control|)
block|{
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getFirst
argument_list|()
argument_list|,
name|entry
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Listen for failures to a given process    * @param visitor pass error notifications onto the typed listener, possibly transforming or    *          ignore the error notification    * @param errorable listener for the errors    */
specifier|public
specifier|synchronized
parameter_list|<
name|L
parameter_list|>
name|void
name|addErrorListener
parameter_list|(
name|ExceptionVisitor
argument_list|<
name|L
argument_list|>
name|visitor
parameter_list|,
name|L
name|errorable
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|put
argument_list|(
name|visitor
argument_list|,
operator|new
name|WeakReference
argument_list|<
name|L
argument_list|>
argument_list|(
name|errorable
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A simple error visitor that just forwards the received error to a generic listener.    */
specifier|private
class|class
name|ForwardingErrorVisitor
implements|implements
name|ExceptionVisitor
argument_list|<
name|ExceptionListener
argument_list|<
name|E
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|visit
parameter_list|(
name|ExceptionListener
argument_list|<
name|E
argument_list|>
name|listener
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|e
parameter_list|,
name|Object
modifier|...
name|info
parameter_list|)
block|{
name|listener
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
operator|(
name|E
operator|)
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

