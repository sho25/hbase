begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|CallCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|SingleByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RequestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceInfo
import|;
end_import

begin_comment
comment|/**  * RpcConnection implementation for netty rpc server.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|NettyServerRpcConnection
extends|extends
name|ServerRpcConnection
block|{
specifier|final
name|Channel
name|channel
decl_stmt|;
name|NettyServerRpcConnection
parameter_list|(
name|NettyRpcServer
name|rpcServer
parameter_list|,
name|Channel
name|channel
parameter_list|)
block|{
name|super
argument_list|(
name|rpcServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|InetSocketAddress
name|inetSocketAddress
init|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|channel
operator|.
name|remoteAddress
argument_list|()
operator|)
decl_stmt|;
name|this
operator|.
name|addr
operator|=
name|inetSocketAddress
operator|.
name|getAddress
argument_list|()
expr_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|hostAddress
operator|=
literal|"*Unknown*"
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|hostAddress
operator|=
name|inetSocketAddress
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|remotePort
operator|=
name|inetSocketAddress
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
name|void
name|process
parameter_list|(
specifier|final
name|ByteBuf
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|connectionHeaderRead
condition|)
block|{
name|this
operator|.
name|callCleanup
operator|=
operator|new
name|RpcServer
operator|.
name|CallCleanup
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|buf
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|process
argument_list|(
operator|new
name|SingleByteBuff
argument_list|(
name|buf
operator|.
name|nioBuffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBuffer
name|connectionHeader
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|buf
operator|.
name|readableBytes
argument_list|()
argument_list|)
decl_stmt|;
name|buf
operator|.
name|readBytes
argument_list|(
name|connectionHeader
argument_list|)
expr_stmt|;
name|buf
operator|.
name|release
argument_list|()
expr_stmt|;
name|process
argument_list|(
name|connectionHeader
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|process
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|process
argument_list|(
operator|new
name|SingleByteBuff
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|process
parameter_list|(
name|ByteBuff
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
if|if
condition|(
name|skipInitialSaslHandshake
condition|)
block|{
name|skipInitialSaslHandshake
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|callCleanup
operator|!=
literal|null
condition|)
block|{
name|callCleanup
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|useSasl
condition|)
block|{
name|saslReadAndProcess
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processOneRpc
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|callCleanup
operator|!=
literal|null
condition|)
block|{
name|callCleanup
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|callCleanup
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|disposeSasl
argument_list|()
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
name|callCleanup
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isConnectionOpen
parameter_list|()
block|{
return|return
name|channel
operator|.
name|isOpen
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NettyServerCall
name|createCall
parameter_list|(
name|int
name|id
parameter_list|,
specifier|final
name|BlockingService
name|service
parameter_list|,
specifier|final
name|MethodDescriptor
name|md
parameter_list|,
name|RequestHeader
name|header
parameter_list|,
name|Message
name|param
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|,
name|long
name|size
parameter_list|,
name|TraceInfo
name|tinfo
parameter_list|,
specifier|final
name|InetAddress
name|remoteAddress
parameter_list|,
name|int
name|timeout
parameter_list|,
name|CallCleanup
name|reqCleanup
parameter_list|)
block|{
return|return
operator|new
name|NettyServerCall
argument_list|(
name|id
argument_list|,
name|service
argument_list|,
name|md
argument_list|,
name|header
argument_list|,
name|param
argument_list|,
name|cellScanner
argument_list|,
name|this
argument_list|,
name|size
argument_list|,
name|tinfo
argument_list|,
name|remoteAddress
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|timeout
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
name|reqCleanup
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRespond
parameter_list|(
name|RpcResponse
name|resp
parameter_list|)
block|{
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

