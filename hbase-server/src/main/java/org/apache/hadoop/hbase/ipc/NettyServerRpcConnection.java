begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|CallCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|SingleByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RequestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceInfo
import|;
end_import

begin_comment
comment|/**  * RpcConnection implementation for netty rpc server.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|NettyServerRpcConnection
extends|extends
name|ServerRpcConnection
block|{
specifier|final
name|Channel
name|channel
decl_stmt|;
name|NettyServerRpcConnection
parameter_list|(
name|NettyRpcServer
name|rpcServer
parameter_list|,
name|Channel
name|channel
parameter_list|)
block|{
name|super
argument_list|(
name|rpcServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|InetSocketAddress
name|inetSocketAddress
init|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|channel
operator|.
name|remoteAddress
argument_list|()
operator|)
decl_stmt|;
name|this
operator|.
name|addr
operator|=
name|inetSocketAddress
operator|.
name|getAddress
argument_list|()
expr_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|hostAddress
operator|=
literal|"*Unknown*"
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|hostAddress
operator|=
name|inetSocketAddress
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|remotePort
operator|=
name|inetSocketAddress
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|saslCall
operator|=
operator|new
name|NettyServerCall
argument_list|(
name|SASL_CALLID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|setConnectionHeaderResponseCall
operator|=
operator|new
name|NettyServerCall
argument_list|(
name|CONNECTION_HEADER_RESPONSE_CALLID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|authFailedCall
operator|=
operator|new
name|NettyServerCall
argument_list|(
name|AUTHORIZATION_FAILED_CALLID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|void
name|readPreamble
parameter_list|(
name|ByteBuf
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rpcHead
init|=
block|{
name|buffer
operator|.
name|readByte
argument_list|()
block|,
name|buffer
operator|.
name|readByte
argument_list|()
block|,
name|buffer
operator|.
name|readByte
argument_list|()
block|,
name|buffer
operator|.
name|readByte
argument_list|()
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|RPC_HEADER
argument_list|,
name|rpcHead
argument_list|)
condition|)
block|{
name|doBadPreambleHandling
argument_list|(
literal|"Expected HEADER="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|HConstants
operator|.
name|RPC_HEADER
argument_list|)
operator|+
literal|" but received HEADER="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|rpcHead
argument_list|)
operator|+
literal|" from "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Now read the next two bytes, the version and the auth to use.
name|int
name|version
init|=
name|buffer
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|authbyte
init|=
name|buffer
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|this
operator|.
name|authMethod
operator|=
name|AuthMethod
operator|.
name|valueOf
argument_list|(
name|authbyte
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|NettyRpcServer
operator|.
name|CURRENT_VERSION
condition|)
block|{
name|String
name|msg
init|=
name|getFatalConnectionString
argument_list|(
name|version
argument_list|,
name|authbyte
argument_list|)
decl_stmt|;
name|doBadPreambleHandling
argument_list|(
name|msg
argument_list|,
operator|new
name|WrongVersionException
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|authMethod
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|getFatalConnectionString
argument_list|(
name|version
argument_list|,
name|authbyte
argument_list|)
decl_stmt|;
name|doBadPreambleHandling
argument_list|(
name|msg
argument_list|,
operator|new
name|BadAuthException
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|.
name|isSecurityEnabled
operator|&&
name|authMethod
operator|==
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|.
name|allowFallbackToSimpleAuth
condition|)
block|{
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|authenticationFallback
argument_list|()
expr_stmt|;
name|authenticatedWithFallback
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|AccessDeniedException
name|ae
init|=
operator|new
name|AccessDeniedException
argument_list|(
literal|"Authentication is required"
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|setupResponse
argument_list|(
name|authFailedResponse
argument_list|,
name|authFailedCall
argument_list|,
name|ae
argument_list|,
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NettyServerCall
operator|)
name|authFailedCall
operator|)
operator|.
name|sendResponseIfReady
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|rpcServer
operator|.
name|isSecurityEnabled
operator|&&
name|authMethod
operator|!=
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
name|doRawSaslReply
argument_list|(
name|SaslStatus
operator|.
name|SUCCESS
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|SaslUtil
operator|.
name|SWITCH_TO_SIMPLE_AUTH
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
comment|// client has already sent the initial Sasl message and we
comment|// should ignore it. Both client and server should fall back
comment|// to simple auth from now on.
name|skipInitialSaslHandshake
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|authMethod
operator|!=
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
name|useSasl
operator|=
literal|true
expr_stmt|;
block|}
name|connectionPreambleRead
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|doBadPreambleHandling
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|doBadPreambleHandling
argument_list|(
name|msg
argument_list|,
operator|new
name|FatalConnectionException
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doBadPreambleHandling
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
specifier|final
name|Exception
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|NettyRpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|NettyServerCall
name|fakeCall
init|=
operator|new
name|NettyServerCall
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|setupResponse
argument_list|(
literal|null
argument_list|,
name|fakeCall
argument_list|,
name|e
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|// closes out the connection.
name|fakeCall
operator|.
name|sendResponseIfReady
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
name|void
name|process
parameter_list|(
specifier|final
name|ByteBuf
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|connectionHeaderRead
condition|)
block|{
name|this
operator|.
name|callCleanup
operator|=
operator|new
name|RpcServer
operator|.
name|CallCleanup
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|buf
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|process
argument_list|(
operator|new
name|SingleByteBuff
argument_list|(
name|buf
operator|.
name|nioBuffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|readableBytes
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|readBytes
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|ByteBuffer
name|connectionHeader
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|buf
operator|.
name|release
argument_list|()
expr_stmt|;
name|process
argument_list|(
name|connectionHeader
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|process
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|process
argument_list|(
operator|new
name|SingleByteBuff
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|process
parameter_list|(
name|ByteBuff
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
if|if
condition|(
name|skipInitialSaslHandshake
condition|)
block|{
name|skipInitialSaslHandshake
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|callCleanup
operator|!=
literal|null
condition|)
block|{
name|callCleanup
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|useSasl
condition|)
block|{
name|saslReadAndProcess
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processOneRpc
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|callCleanup
operator|!=
literal|null
condition|)
block|{
name|callCleanup
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|callCleanup
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|disposeSasl
argument_list|()
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
name|callCleanup
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isConnectionOpen
parameter_list|()
block|{
return|return
name|channel
operator|.
name|isOpen
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NettyServerCall
name|createCall
parameter_list|(
name|int
name|id
parameter_list|,
specifier|final
name|BlockingService
name|service
parameter_list|,
specifier|final
name|MethodDescriptor
name|md
parameter_list|,
name|RequestHeader
name|header
parameter_list|,
name|Message
name|param
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|,
name|long
name|size
parameter_list|,
name|TraceInfo
name|tinfo
parameter_list|,
specifier|final
name|InetAddress
name|remoteAddress
parameter_list|,
name|int
name|timeout
parameter_list|,
name|CallCleanup
name|reqCleanup
parameter_list|)
block|{
return|return
operator|new
name|NettyServerCall
argument_list|(
name|id
argument_list|,
name|service
argument_list|,
name|md
argument_list|,
name|header
argument_list|,
name|param
argument_list|,
name|cellScanner
argument_list|,
name|this
argument_list|,
name|size
argument_list|,
name|tinfo
argument_list|,
name|remoteAddress
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|timeout
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
name|reqCleanup
argument_list|)
return|;
block|}
block|}
end_class

end_unit

