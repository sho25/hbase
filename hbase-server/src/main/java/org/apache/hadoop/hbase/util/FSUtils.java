begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HDFSBlocksDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
operator|.
name|HFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlacementMaintainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FSProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * Utility methods for interacting with the underlying file system.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|FSUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Full access permissions (starting point for a umask) */
specifier|public
specifier|static
specifier|final
name|String
name|FULL_RWX_PERMISSIONS
init|=
literal|"777"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THREAD_POOLSIZE
init|=
literal|"hbase.client.localityCheck.threadPoolSize"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_THREAD_POOLSIZE
init|=
literal|2
decl_stmt|;
comment|/** Set to true on Windows platforms */
specifier|public
specifier|static
specifier|final
name|boolean
name|WINDOWS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
specifier|protected
name|FSUtils
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Compare of path component. Does not consider schema; i.e. if schemas different but<code>path    *<code> starts with<code>rootPath<code>, then the function returns true    * @param rootPath    * @param path    * @return True if<code>path</code> starts with<code>rootPath</code>    */
specifier|public
specifier|static
name|boolean
name|isStartingWithPath
parameter_list|(
specifier|final
name|Path
name|rootPath
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
block|{
name|String
name|uriRootPath
init|=
name|rootPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|tailUriPath
init|=
operator|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|tailUriPath
operator|.
name|startsWith
argument_list|(
name|uriRootPath
argument_list|)
return|;
block|}
comment|/**    * Compare path component of the Path URI; e.g. if hdfs://a/b/c and /a/b/c, it will compare the    * '/a/b/c' part. Does not consider schema; i.e. if schemas different but path or subpath matches,    * the two will equate.    * @param pathToSearch Path we will be trying to match.    * @param pathTail    * @return True if<code>pathTail</code> is tail on the path of<code>pathToSearch</code>    */
specifier|public
specifier|static
name|boolean
name|isMatchingTail
parameter_list|(
specifier|final
name|Path
name|pathToSearch
parameter_list|,
name|String
name|pathTail
parameter_list|)
block|{
return|return
name|isMatchingTail
argument_list|(
name|pathToSearch
argument_list|,
operator|new
name|Path
argument_list|(
name|pathTail
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Compare path component of the Path URI; e.g. if hdfs://a/b/c and /a/b/c, it will compare the    * '/a/b/c' part. If you passed in 'hdfs://a/b/c and b/c, it would return true.  Does not consider    * schema; i.e. if schemas different but path or subpath matches, the two will equate.    * @param pathToSearch Path we will be trying to match.    * @param pathTail    * @return True if<code>pathTail</code> is tail on the path of<code>pathToSearch</code>    */
specifier|public
specifier|static
name|boolean
name|isMatchingTail
parameter_list|(
specifier|final
name|Path
name|pathToSearch
parameter_list|,
specifier|final
name|Path
name|pathTail
parameter_list|)
block|{
if|if
condition|(
name|pathToSearch
operator|.
name|depth
argument_list|()
operator|!=
name|pathTail
operator|.
name|depth
argument_list|()
condition|)
return|return
literal|false
return|;
name|Path
name|tailPath
init|=
name|pathTail
decl_stmt|;
name|String
name|tailName
decl_stmt|;
name|Path
name|toSearch
init|=
name|pathToSearch
decl_stmt|;
name|String
name|toSearchName
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
do|do
block|{
name|tailName
operator|=
name|tailPath
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|tailName
operator|==
literal|null
operator|||
name|tailName
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|toSearchName
operator|=
name|toSearch
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|toSearchName
operator|==
literal|null
operator|||
name|toSearchName
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
break|break;
comment|// Move up a parent on each path for next go around.  Path doesn't let us go off the end.
name|tailPath
operator|=
name|tailPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|toSearch
operator|=
name|toSearch
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|tailName
operator|.
name|equals
argument_list|(
name|toSearchName
argument_list|)
condition|)
do|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|FSUtils
name|getInstance
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|scheme
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find scheme for uri "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
operator|+
literal|", default to hdfs"
argument_list|)
expr_stmt|;
name|scheme
operator|=
literal|"hdfs"
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|fsUtilsClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.fsutil."
operator|+
name|scheme
operator|+
literal|".impl"
argument_list|,
name|FSHDFSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Default to HDFS impl
name|FSUtils
name|fsUtils
init|=
operator|(
name|FSUtils
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|fsUtilsClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|fsUtils
return|;
block|}
comment|/**    * Delete if exists.    * @param fs filesystem object    * @param dir directory to delete    * @return True if deleted<code>dir</code>    * @throws IOException e    */
specifier|public
specifier|static
name|boolean
name|deleteDirectory
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
operator|&&
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Return the number of bytes that large input files should be optimally    * be split into to minimize i/o time.    *    * use reflection to search for getDefaultBlockSize(Path f)    * if the method doesn't exist, fall back to using getDefaultBlockSize()    *    * @param fs filesystem object    * @return the default block size for the path's filesystem    * @throws IOException e    */
specifier|public
specifier|static
name|long
name|getDefaultBlockSize
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Method
name|m
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|FileSystem
argument_list|>
name|cls
init|=
name|fs
operator|.
name|getClass
argument_list|()
decl_stmt|;
try|try
block|{
name|m
operator|=
name|cls
operator|.
name|getMethod
argument_list|(
literal|"getDefaultBlockSize"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Path
operator|.
name|class
block|}
block|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FileSystem doesn't support getDefaultBlockSize"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Doesn't have access to getDefaultBlockSize on FileSystems"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|m
operator|=
literal|null
expr_stmt|;
comment|// could happen on setAccessible()
block|}
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
name|Object
name|ret
init|=
name|m
operator|.
name|invoke
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Long
operator|)
name|ret
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|/*    * Get the default replication.    *    * use reflection to search for getDefaultReplication(Path f)    * if the method doesn't exist, fall back to using getDefaultReplication()    *    * @param fs filesystem object    * @param f path of file    * @return default replication for the path's filesystem    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|short
name|getDefaultReplication
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Method
name|m
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|FileSystem
argument_list|>
name|cls
init|=
name|fs
operator|.
name|getClass
argument_list|()
decl_stmt|;
try|try
block|{
name|m
operator|=
name|cls
operator|.
name|getMethod
argument_list|(
literal|"getDefaultReplication"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Path
operator|.
name|class
block|}
block|)
empty_stmt|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FileSystem doesn't support getDefaultReplication"
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Doesn't have access to getDefaultReplication on FileSystems"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|m
operator|=
literal|null
expr_stmt|;
comment|// could happen on setAccessible()
block|}
end_catch

begin_if
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
name|Object
name|ret
init|=
name|m
operator|.
name|invoke
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Number
operator|)
name|ret
operator|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_if

begin_comment
unit|}
comment|/**    * Returns the default buffer size to use during writes.    *    * The size of the buffer should probably be a multiple of hardware    * page size (4096 on Intel x86), and it determines how much data is    * buffered during read and write operations.    *    * @param fs filesystem object    * @return default buffer size to use during writes    */
end_comment

begin_function
unit|public
specifier|static
name|int
name|getDefaultBufferSize
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Create the specified file on the filesystem. By default, this will:    *<ol>    *<li>overwrite the file if it exists</li>    *<li>apply the umask in the configuration (if it is enabled)</li>    *<li>use the fs configured buffer size (or 4096 if not set)</li>    *<li>use the default replication</li>    *<li>use the default block size</li>    *<li>not track progress</li>    *</ol>    *    * @param fs {@link FileSystem} on which to write the file    * @param path {@link Path} to the file to write    * @param perm permissions    * @param favoredNodes    * @return output stream to the created file    * @throws IOException if the file cannot be created    */
end_comment

begin_function
specifier|public
specifier|static
name|FSDataOutputStream
name|create
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|FsPermission
name|perm
parameter_list|,
name|InetSocketAddress
index|[]
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|instanceof
name|HFileSystem
condition|)
block|{
name|FileSystem
name|backingFs
init|=
operator|(
operator|(
name|HFileSystem
operator|)
name|fs
operator|)
operator|.
name|getBackingFs
argument_list|()
decl_stmt|;
if|if
condition|(
name|backingFs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
comment|// Try to use the favoredNodes version via reflection to allow backwards-
comment|// compatibility.
try|try
block|{
return|return
call|(
name|FSDataOutputStream
call|)
argument_list|(
name|DistributedFileSystem
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"create"
argument_list|,
name|Path
operator|.
name|class
argument_list|,
name|FsPermission
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|short
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Progressable
operator|.
name|class
argument_list|,
name|InetSocketAddress
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|backingFs
argument_list|,
name|path
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|,
name|getDefaultBufferSize
argument_list|(
name|backingFs
argument_list|)
argument_list|,
name|getDefaultReplication
argument_list|(
name|backingFs
argument_list|,
name|path
argument_list|)
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|backingFs
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|,
name|favoredNodes
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
comment|// Function was properly called, but threw it's own exception.
throw|throw
operator|new
name|IOException
argument_list|(
name|ite
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DFS Client does not support most favored nodes create; using default create"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ignoring; use default create"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring (most likely Reflection related exception) "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring (most likely Reflection related exception) "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring (most likely Reflection related exception) "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|create
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Create the specified file on the filesystem. By default, this will:    *<ol>    *<li>apply the umask in the configuration (if it is enabled)</li>    *<li>use the fs configured buffer size (or 4096 if not set)</li>    *<li>use the default replication</li>    *<li>use the default block size</li>    *<li>not track progress</li>    *</ol>    *    * @param fs {@link FileSystem} on which to write the file    * @param path {@link Path} to the file to write    * @param perm    * @param overwrite Whether or not the created file should be overwritten.    * @return output stream to the created file    * @throws IOException if the file cannot be created    */
end_comment

begin_function
specifier|public
specifier|static
name|FSDataOutputStream
name|create
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|FsPermission
name|perm
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating file="
operator|+
name|path
operator|+
literal|" with permission="
operator|+
name|perm
operator|+
literal|", overwrite="
operator|+
name|overwrite
argument_list|)
expr_stmt|;
block|}
return|return
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|perm
argument_list|,
name|overwrite
argument_list|,
name|getDefaultBufferSize
argument_list|(
name|fs
argument_list|)
argument_list|,
name|getDefaultReplication
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Get the file permissions specified in the configuration, if they are    * enabled.    *    * @param fs filesystem that the file will be created on.    * @param conf configuration to read for determining if permissions are    *          enabled and which to use    * @param permssionConfKey property key in the configuration to use when    *          finding the permission    * @return the permission to use when creating a new file on the fs. If    *         special permissions are not specified in the configuration, then    *         the default permissions on the the fs will be returned.    */
end_comment

begin_function
specifier|public
specifier|static
name|FsPermission
name|getFilePermissions
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|permssionConfKey
parameter_list|)
block|{
name|boolean
name|enablePermissions
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|ENABLE_DATA_FILE_UMASK
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|enablePermissions
condition|)
block|{
try|try
block|{
name|FsPermission
name|perm
init|=
operator|new
name|FsPermission
argument_list|(
name|FULL_RWX_PERMISSIONS
argument_list|)
decl_stmt|;
comment|// make sure that we have a mask, if not, go default.
name|String
name|mask
init|=
name|conf
operator|.
name|get
argument_list|(
name|permssionConfKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|mask
operator|==
literal|null
condition|)
return|return
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
return|;
comment|// appy the umask
name|FsPermission
name|umask
init|=
operator|new
name|FsPermission
argument_list|(
name|mask
argument_list|)
decl_stmt|;
return|return
name|perm
operator|.
name|applyUMask
argument_list|(
name|umask
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Incorrect umask attempted to be created: "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|permssionConfKey
argument_list|)
operator|+
literal|", using default file permissions."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
return|;
block|}
block|}
return|return
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Checks to see if the specified file system is available    *    * @param fs filesystem    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|checkFileSystemAvailable
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
return|return;
block|}
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
operator|instanceof
name|RemoteException
condition|?
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
else|:
name|e
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"file system close failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|IOException
name|io
init|=
operator|new
name|IOException
argument_list|(
literal|"File system is not available"
argument_list|)
decl_stmt|;
name|io
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
expr_stmt|;
throw|throw
name|io
throw|;
block|}
end_function

begin_comment
comment|/**    * We use reflection because {@link DistributedFileSystem#setSafeMode(    * FSConstants.SafeModeAction action, boolean isChecked)} is not in hadoop 1.1    *    * @param dfs    * @return whether we're in safe mode    * @throws IOException    */
end_comment

begin_function
specifier|private
specifier|static
name|boolean
name|isInSafeMode
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|inSafeMode
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Method
name|m
init|=
name|DistributedFileSystem
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setSafeMode"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
operator|.
name|class
operator|,
name|boolean
operator|.
name|class
block|}
block|)
empty_stmt|;
name|inSafeMode
operator|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|dfs
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|e
throw|;
comment|// Check whether dfs is on safemode.
name|inSafeMode
operator|=
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|)
expr_stmt|;
block|}
end_catch

begin_return
return|return
name|inSafeMode
return|;
end_return

begin_comment
unit|}
comment|/**    * Check whether dfs is in safemode.    * @param conf    * @throws IOException    */
end_comment

begin_function
unit|public
specifier|static
name|void
name|checkDfsSafeMode
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isInSafeMode
init|=
literal|false
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|isInSafeMode
operator|=
name|isInSafeMode
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isInSafeMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File system is in safemode, it can't be written now"
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Verifies current version of file system    *    * @param fs filesystem object    * @param rootdir root hbase directory    * @return null if no version file exists, version string otherwise.    * @throws IOException e    * @throws org.apache.hadoop.hbase.exceptions.DeserializationException    */
end_comment

begin_function
specifier|public
specifier|static
name|String
name|getVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
throws|,
name|DeserializationException
block|{
name|Path
name|versionFile
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// hadoop 2.0 throws FNFE if directory does not exist.
comment|// hadoop 1.0 returns null if directory does not exist.
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|versionFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|String
name|version
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|status
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
index|]
decl_stmt|;
name|FSDataInputStream
name|s
init|=
name|fs
operator|.
name|open
argument_list|(
name|versionFile
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|readFully
argument_list|(
name|s
argument_list|,
name|content
argument_list|,
literal|0
argument_list|,
name|content
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|content
argument_list|)
condition|)
block|{
name|version
operator|=
name|parseVersionFrom
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Presume it pre-pb format.
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
name|version
operator|=
name|dis
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Version file was empty, odd, will try to set it."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|version
return|;
block|}
end_function

begin_comment
comment|/**    * Parse the content of the ${HBASE_ROOTDIR}/hbase.version file.    * @param bytes The byte content of the hbase.version file.    * @return The version found in the file as a String.    * @throws DeserializationException    */
end_comment

begin_function
specifier|static
name|String
name|parseVersionFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|FSProtos
operator|.
name|HBaseVersionFileContent
operator|.
name|Builder
name|builder
init|=
name|FSProtos
operator|.
name|HBaseVersionFileContent
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|FSProtos
operator|.
name|HBaseVersionFileContent
name|fileContent
decl_stmt|;
try|try
block|{
name|fileContent
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|fileContent
operator|.
name|getVersion
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
comment|// Convert
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Create the content to write into the ${HBASE_ROOTDIR}/hbase.version file.    * @param version Version to persist    * @return Serialized protobuf with<code>version</code> content and a bit of pb magic for a prefix.    */
end_comment

begin_function
specifier|static
name|byte
index|[]
name|toVersionByteArray
parameter_list|(
specifier|final
name|String
name|version
parameter_list|)
block|{
name|FSProtos
operator|.
name|HBaseVersionFileContent
operator|.
name|Builder
name|builder
init|=
name|FSProtos
operator|.
name|HBaseVersionFileContent
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|builder
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Verifies current version of file system    *    * @param fs file system    * @param rootdir root directory of HBase installation    * @param message if true, issues a message on System.out    *    * @throws IOException e    * @throws DeserializationException    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|checkVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|boolean
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|DeserializationException
block|{
name|checkVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|message
argument_list|,
literal|0
argument_list|,
name|HConstants
operator|.
name|DEFAULT_VERSION_FILE_WRITE_ATTEMPTS
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Verifies current version of file system    *    * @param fs file system    * @param rootdir root directory of HBase installation    * @param message if true, issues a message on System.out    * @param wait wait interval    * @param retries number of times to retry    *    * @throws IOException e    * @throws DeserializationException    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|checkVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|boolean
name|message
parameter_list|,
name|int
name|wait
parameter_list|,
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
throws|,
name|DeserializationException
block|{
name|String
name|version
init|=
name|getVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|metaRegionExists
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
condition|)
block|{
comment|// rootDir is empty (no version file and no root region)
comment|// just create new version file (HBASE-1195)
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|wait
argument_list|,
name|retries
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|version
operator|.
name|compareTo
argument_list|(
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
argument_list|)
operator|==
literal|0
condition|)
return|return;
comment|// version is deprecated require migration
comment|// Output on stdout so user sees it in terminal.
name|String
name|msg
init|=
literal|"HBase file layout needs to be upgraded."
operator|+
literal|" You have version "
operator|+
name|version
operator|+
literal|" and I want version "
operator|+
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
operator|+
literal|". Consult http://hbase.apache.org/book.html for further information about upgrading HBase."
operator|+
literal|" Is your hbase.rootdir valid? If so, you may need to run "
operator|+
literal|"'hbase hbck -fixVersionFile'."
decl_stmt|;
if|if
condition|(
name|message
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING! "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FileSystemVersionException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
end_function

begin_comment
comment|/**    * Sets version of file system    *    * @param fs filesystem object    * @param rootdir hbase root    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|setVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
argument_list|,
literal|0
argument_list|,
name|HConstants
operator|.
name|DEFAULT_VERSION_FILE_WRITE_ATTEMPTS
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Sets version of file system    *    * @param fs filesystem object    * @param rootdir hbase root    * @param wait time to wait for retry    * @param retries number of times to retry before failing    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|setVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|int
name|wait
parameter_list|,
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
block|{
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
argument_list|,
name|wait
argument_list|,
name|retries
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Sets version of file system    *    * @param fs filesystem object    * @param rootdir hbase root directory    * @param version version to set    * @param wait time to wait for retry    * @param retries number of times to retry before throwing an IOException    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|setVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|String
name|version
parameter_list|,
name|int
name|wait
parameter_list|,
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|versionFile
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|tempVersionFile
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|HBASE_TEMP_DIRECTORY
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
comment|// Write the version to a temporary file
name|FSDataOutputStream
name|s
init|=
name|fs
operator|.
name|create
argument_list|(
name|tempVersionFile
argument_list|)
decl_stmt|;
try|try
block|{
name|s
operator|.
name|write
argument_list|(
name|toVersionByteArray
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|=
literal|null
expr_stmt|;
comment|// Move the temp version file to its normal location. Returns false
comment|// if the rename failed. Throw an IOE in that case.
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tempVersionFile
argument_list|,
name|versionFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to move temp version file to "
operator|+
name|versionFile
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
comment|// Cleaning up the temporary if the rename failed would be trying
comment|// too hard. We'll unconditionally create it again the next time
comment|// through anyway, files are overwritten by default by create().
comment|// Attempt to close the stream on the way out if it is still open.
try|try
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{ }
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created version file at "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
operator|+
literal|" with version="
operator|+
name|version
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|retries
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create version file at "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
operator|+
literal|", retrying"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|versionFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|wait
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|wait
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|retries
operator|--
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Checks that a cluster ID file exists in the HBase root directory    * @param fs the root directory FileSystem    * @param rootdir the HBase root directory in HDFS    * @param wait how long to wait between retries    * @return<code>true</code> if the file exists, otherwise<code>false</code>    * @throws IOException if checking the FileSystem fails    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|checkClusterIdExists
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|int
name|wait
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|CLUSTER_ID_FILE_NAME
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|wait
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to check cluster ID file in "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
operator|+
literal|", retrying in "
operator|+
name|wait
operator|+
literal|"msec: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|wait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Returns the value of the unique cluster ID stored for this HBase instance.    * @param fs the root directory FileSystem    * @param rootdir the path to the HBase root directory    * @return the unique cluster identifier    * @throws IOException if reading the cluster ID file fails    */
end_comment

begin_function
specifier|public
specifier|static
name|ClusterId
name|getClusterId
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|idPath
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|CLUSTER_ID_FILE_NAME
argument_list|)
decl_stmt|;
name|ClusterId
name|clusterId
init|=
literal|null
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|exists
argument_list|(
name|idPath
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|idPath
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|int
name|len
init|=
name|Ints
operator|.
name|checkedCast
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|idPath
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cluster ID file "
operator|+
name|idPath
operator|.
name|toString
argument_list|()
operator|+
literal|" was empty"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|clusterId
operator|=
name|ClusterId
operator|.
name|parseFrom
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"content="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|content
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// If not pb'd, make it so.
if|if
condition|(
operator|!
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|content
argument_list|)
condition|)
block|{
name|String
name|cid
init|=
literal|null
decl_stmt|;
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|idPath
argument_list|)
expr_stmt|;
try|try
block|{
name|cid
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|clusterId
operator|=
operator|new
name|ClusterId
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cluster ID file "
operator|+
name|idPath
operator|.
name|toString
argument_list|()
operator|+
literal|" was empty"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|rewriteAsPb
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|idPath
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterId
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cluster ID file does not exist at "
operator|+
name|idPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterId
return|;
block|}
end_function

begin_comment
comment|/**    * @param cid    * @throws IOException    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|rewriteAsPb
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootdir
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|ClusterId
name|cid
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Rewrite the file as pb.  Move aside the old one first, write new
comment|// then delete the moved-aside file.
name|Path
name|movedAsideName
init|=
operator|new
name|Path
argument_list|(
name|p
operator|+
literal|"."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|p
argument_list|,
name|movedAsideName
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed rename of "
operator|+
name|p
argument_list|)
throw|;
name|setClusterId
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|cid
argument_list|,
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|movedAsideName
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed delete of "
operator|+
name|movedAsideName
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rewrote the hbase.id file as pb"
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Writes a new unique identifier for this cluster to the "hbase.id" file    * in the HBase root directory    * @param fs the root directory FileSystem    * @param rootdir the path to the HBase root directory    * @param clusterId the unique identifier to store    * @param wait how long (in milliseconds) to wait between retries    * @throws IOException if writing to the FileSystem fails and no wait value    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|setClusterId
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|ClusterId
name|clusterId
parameter_list|,
name|int
name|wait
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Path
name|idFile
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|CLUSTER_ID_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|tempIdFile
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|HBASE_TEMP_DIRECTORY
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|HConstants
operator|.
name|CLUSTER_ID_FILE_NAME
argument_list|)
decl_stmt|;
comment|// Write the id file to a temporary location
name|FSDataOutputStream
name|s
init|=
name|fs
operator|.
name|create
argument_list|(
name|tempIdFile
argument_list|)
decl_stmt|;
try|try
block|{
name|s
operator|.
name|write
argument_list|(
name|clusterId
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|=
literal|null
expr_stmt|;
comment|// Move the temporary file to its normal location. Throw an IOE if
comment|// the rename failed
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tempIdFile
argument_list|,
name|idFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to move temp version file to "
operator|+
name|idFile
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
comment|// Attempt to close the stream if still open on the way out
try|try
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{ }
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created cluster ID file at "
operator|+
name|idFile
operator|.
name|toString
argument_list|()
operator|+
literal|" with ID: "
operator|+
name|clusterId
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|wait
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create cluster ID file in "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
operator|+
literal|", retrying in "
operator|+
name|wait
operator|+
literal|"msec: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|wait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Verifies root directory path is a valid URI with a scheme    *    * @param root root directory path    * @return Passed<code>root</code> argument.    * @throws IOException if not a valid URI with a scheme    */
end_comment

begin_function
specifier|public
specifier|static
name|Path
name|validateRootPath
parameter_list|(
name|Path
name|root
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|URI
name|rootURI
init|=
operator|new
name|URI
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
name|rootURI
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Root directory does not have a scheme"
argument_list|)
throw|;
block|}
return|return
name|root
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|IOException
name|io
init|=
operator|new
name|IOException
argument_list|(
literal|"Root directory path is not a valid "
operator|+
literal|"URI -- check your "
operator|+
name|HConstants
operator|.
name|HBASE_DIR
operator|+
literal|" configuration"
argument_list|)
decl_stmt|;
name|io
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|io
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Checks for the presence of the root path (using the provided conf object) in the given path. If    * it exists, this method removes it and returns the String representation of remaining relative path.    * @param path    * @param conf    * @return String representation of the remaining relative path    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|String
name|removeRootPath
parameter_list|(
name|Path
name|path
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|pathStr
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// check that the path is absolute... it has the root path in it.
if|if
condition|(
operator|!
name|pathStr
operator|.
name|startsWith
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
return|return
name|pathStr
return|;
comment|// if not, return as it is.
return|return
name|pathStr
operator|.
name|substring
argument_list|(
name|root
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
comment|// remove the "/" too.
block|}
end_function

begin_comment
comment|/**    * If DFS, check safe mode and if so, wait until we clear it.    * @param conf configuration    * @param wait Sleep between retries    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|waitOnSafeMode
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|long
name|wait
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
return|return;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
comment|// Make sure dfs is not in safe mode
while|while
condition|(
name|isInSafeMode
argument_list|(
name|dfs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for dfs to exit safe mode..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|wait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Return the 'path' component of a Path.  In Hadoop, Path is an URI.  This    * method returns the 'path' component of a Path's URI: e.g. If a Path is    *<code>hdfs://example.org:9000/hbase_trunk/TestTable/compaction.dir</code>,    * this method returns<code>/hbase_trunk/TestTable/compaction.dir</code>.    * This method is useful if you want to print out a Path without qualifying    * Filesystem instance.    * @param p Filesystem Path whose 'path' component we are to return.    * @return Path portion of the Filesystem    */
end_comment

begin_function
specifier|public
specifier|static
name|String
name|getPath
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * @param c configuration    * @return Path to hbase root directory: i.e.<code>hbase.rootdir</code> from    * configuration as a qualified Path.    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|Path
name|getRootDir
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|setRootDir
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|Path
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|c
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|root
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|setFsDefault
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|Path
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|c
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|root
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// for hadoop 0.21+
block|}
end_function

begin_comment
comment|/**    * Checks if meta region exists    *    * @param fs file system    * @param rootdir root directory of HBase installation    * @return true if exists    * @throws IOException e    */
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|boolean
name|metaRegionExists
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|metaRegionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|rootdir
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|metaRegionDir
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Compute HDFS blocks distribution of a given file, or a portion of the file    * @param fs file system    * @param status file status of the file    * @param start start position of the portion    * @param length length of the portion    * @return The HDFS blocks distribution    */
end_comment

begin_function
specifier|static
specifier|public
name|HDFSBlocksDistribution
name|computeHDFSBlocksDistribution
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|status
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|HDFSBlocksDistribution
name|blocksDistribution
init|=
operator|new
name|HDFSBlocksDistribution
argument_list|()
decl_stmt|;
name|BlockLocation
index|[]
name|blockLocations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockLocation
name|bl
range|:
name|blockLocations
control|)
block|{
name|String
index|[]
name|hosts
init|=
name|bl
operator|.
name|getHosts
argument_list|()
decl_stmt|;
name|long
name|len
init|=
name|bl
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|blocksDistribution
operator|.
name|addHostsAndBlockWeight
argument_list|(
name|hosts
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
return|return
name|blocksDistribution
return|;
block|}
end_function

begin_comment
comment|/**    * Runs through the hbase rootdir and checks all stores have only    * one file in them -- that is, they've been major compacted.  Looks    * at root and meta tables too.    * @param fs filesystem    * @param hbaseRootDir hbase root directory    * @return True if this hbase install is major compacted.    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|isMajorCompacted
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|tableDirs
init|=
name|getTableDirs
argument_list|(
name|fs
argument_list|,
name|hbaseRootDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|d
range|:
name|tableDirs
control|)
block|{
name|FileStatus
index|[]
name|regionDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|Path
name|dd
init|=
name|regionDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Else its a region name.  Now look in region for families.
name|FileStatus
index|[]
name|familyDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dd
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|familyDir
range|:
name|familyDirs
control|)
block|{
name|Path
name|family
init|=
name|familyDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Now in family make sure only one file.
name|FileStatus
index|[]
name|familyStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyStatus
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|family
operator|.
name|toString
argument_list|()
operator|+
literal|" has "
operator|+
name|familyStatus
operator|.
name|length
operator|+
literal|" files."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function

begin_comment
comment|// TODO move this method OUT of FSUtils. No dependencies to HMaster
end_comment

begin_comment
comment|/**    * Returns the total overall fragmentation percentage. Includes hbase:meta and    * -ROOT- as well.    *    * @param master  The master defining the HBase root and file system.    * @return A map for each table and its percentage.    * @throws IOException When scanning the directory fails.    */
end_comment

begin_function
specifier|public
specifier|static
name|int
name|getTotalTableFragmentation
parameter_list|(
specifier|final
name|HMaster
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|getTableFragmentation
argument_list|(
name|master
argument_list|)
decl_stmt|;
return|return
name|map
operator|!=
literal|null
operator|&&
name|map
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|map
operator|.
name|get
argument_list|(
literal|"-TOTAL-"
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/**    * Runs through the HBase rootdir and checks how many stores for each table    * have more than one file in them. Checks -ROOT- and hbase:meta too. The total    * percentage across all tables is stored under the special key "-TOTAL-".    *    * @param master  The master defining the HBase root and file system.    * @return A map for each table and its percentage.    *    * @throws IOException When scanning the directory fails.    */
end_comment

begin_function
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getTableFragmentation
parameter_list|(
specifier|final
name|HMaster
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getRootDir
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// since HMaster.getFileSystem() is package private
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getTableFragmentation
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Runs through the HBase rootdir and checks how many stores for each table    * have more than one file in them. Checks -ROOT- and hbase:meta too. The total    * percentage across all tables is stored under the special key "-TOTAL-".    *    * @param fs  The file system to use.    * @param hbaseRootDir  The root directory to scan.    * @return A map for each table and its percentage.    * @throws IOException When scanning the directory fails.    */
end_comment

begin_function
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getTableFragmentation
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|frags
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|cfCountTotal
init|=
literal|0
decl_stmt|;
name|int
name|cfFragTotal
init|=
literal|0
decl_stmt|;
name|DirFilter
name|df
init|=
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|tableDirs
init|=
name|getTableDirs
argument_list|(
name|fs
argument_list|,
name|hbaseRootDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|d
range|:
name|tableDirs
control|)
block|{
name|int
name|cfCount
init|=
literal|0
decl_stmt|;
name|int
name|cfFrag
init|=
literal|0
decl_stmt|;
name|FileStatus
index|[]
name|regionDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|,
name|df
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|Path
name|dd
init|=
name|regionDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// else its a region name, now look in region for families
name|FileStatus
index|[]
name|familyDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dd
argument_list|,
name|df
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|familyDir
range|:
name|familyDirs
control|)
block|{
name|cfCount
operator|++
expr_stmt|;
name|cfCountTotal
operator|++
expr_stmt|;
name|Path
name|family
init|=
name|familyDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// now in family make sure only one file
name|FileStatus
index|[]
name|familyStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyStatus
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|cfFrag
operator|++
expr_stmt|;
name|cfFragTotal
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// compute percentage per table and store in result list
name|frags
operator|.
name|put
argument_list|(
name|FSUtils
operator|.
name|getTableName
argument_list|(
name|d
argument_list|)
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|Math
operator|.
name|round
argument_list|(
operator|(
name|float
operator|)
name|cfFrag
operator|/
name|cfCount
operator|*
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set overall percentage for all tables
name|frags
operator|.
name|put
argument_list|(
literal|"-TOTAL-"
argument_list|,
name|Math
operator|.
name|round
argument_list|(
operator|(
name|float
operator|)
name|cfFragTotal
operator|/
name|cfCountTotal
operator|*
literal|100
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|frags
return|;
block|}
end_function

begin_comment
comment|/**    * Expects to find -ROOT- directory.    * @param fs filesystem    * @param hbaseRootDir hbase root directory    * @return True if this a pre020 layout.    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|isPre020FileLayout
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|mapfiles
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|hbaseRootDir
argument_list|,
literal|"-ROOT-"
argument_list|)
argument_list|,
literal|"70236052"
argument_list|)
argument_list|,
literal|"info"
argument_list|)
argument_list|,
literal|"mapfiles"
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|mapfiles
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Runs through the hbase rootdir and checks all stores have only    * one file in them -- that is, they've been major compacted.  Looks    * at root and meta tables too.  This version differs from    * {@link #isMajorCompacted(FileSystem, Path)} in that it expects a    * pre-0.20.0 hbase layout on the filesystem.  Used migrating.    * @param fs filesystem    * @param hbaseRootDir hbase root directory    * @return True if this hbase install is major compacted.    * @throws IOException e    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|isMajorCompactedPre020
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Presumes any directory under hbase.rootdir is a table.
name|List
argument_list|<
name|Path
argument_list|>
name|tableDirs
init|=
name|getTableDirs
argument_list|(
name|fs
argument_list|,
name|hbaseRootDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|d
range|:
name|tableDirs
control|)
block|{
comment|// Inside a table, there are compaction.dir directories to skip.
comment|// Otherwise, all else should be regions.  Then in each region, should
comment|// only be family directories.  Under each of these, should be a mapfile
comment|// and info directory and in these only one file.
if|if
condition|(
name|d
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|FileStatus
index|[]
name|regionDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|Path
name|dd
init|=
name|regionDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Else its a region name.  Now look in region for families.
name|FileStatus
index|[]
name|familyDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dd
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|familyDir
range|:
name|familyDirs
control|)
block|{
name|Path
name|family
init|=
name|familyDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|infoAndMapfile
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Assert that only info and mapfile in family dir.
if|if
condition|(
name|infoAndMapfile
operator|.
name|length
operator|!=
literal|0
operator|&&
name|infoAndMapfile
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|family
operator|.
name|toString
argument_list|()
operator|+
literal|" has more than just info and mapfile: "
operator|+
name|infoAndMapfile
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Make sure directory named info or mapfile.
for|for
control|(
name|int
name|ll
init|=
literal|0
init|;
name|ll
operator|<
literal|2
condition|;
name|ll
operator|++
control|)
block|{
if|if
condition|(
name|infoAndMapfile
index|[
name|ll
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"info"
argument_list|)
operator|||
name|infoAndMapfile
index|[
name|ll
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"mapfiles"
argument_list|)
condition|)
continue|continue;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected directory name: "
operator|+
name|infoAndMapfile
index|[
name|ll
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Now in family, there are 'mapfile' and 'info' subdirs.  Just
comment|// look in the 'mapfile' subdir.
name|FileStatus
index|[]
name|familyStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|family
argument_list|,
literal|"mapfiles"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyStatus
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|family
operator|.
name|toString
argument_list|()
operator|+
literal|" has "
operator|+
name|familyStatus
operator|.
name|length
operator|+
literal|" files."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the {@link org.apache.hadoop.fs.Path} object representing the table directory under    * path rootdir    *    * @param rootdir qualified path of HBase root directory    * @param tableName name of table    * @return {@link org.apache.hadoop.fs.Path} for table    */
end_comment

begin_function
specifier|public
specifier|static
name|Path
name|getTableDir
parameter_list|(
name|Path
name|rootdir
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getNamespaceDir
argument_list|(
name|rootdir
argument_list|,
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
argument_list|,
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the {@link org.apache.hadoop.hbase.TableName} object representing    * the table directory under    * path rootdir    *    * @param tablePath path of table    * @return {@link org.apache.hadoop.fs.Path} for table    */
end_comment

begin_function
specifier|public
specifier|static
name|TableName
name|getTableName
parameter_list|(
name|Path
name|tablePath
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePath
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tablePath
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the {@link org.apache.hadoop.fs.Path} object representing    * the namespace directory under path rootdir    *    * @param rootdir qualified path of HBase root directory    * @param namespace namespace name    * @return {@link org.apache.hadoop.fs.Path} for table    */
end_comment

begin_function
specifier|public
specifier|static
name|Path
name|getNamespaceDir
parameter_list|(
name|Path
name|rootdir
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
operator|new
name|Path
argument_list|(
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|,
operator|new
name|Path
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * A {@link PathFilter} that returns only regular files.    */
end_comment

begin_class
specifier|static
class|class
name|FileFilter
implements|implements
name|PathFilter
block|{
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|public
name|FileFilter
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
try|try
block|{
return|return
name|fs
operator|.
name|isFile
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unable to verify if path="
operator|+
name|p
operator|+
literal|" is a regular file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Directory filter that doesn't include any of the directories in the specified blacklist    */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|BlackListDirFilter
implements|implements
name|PathFilter
block|{
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|blacklist
decl_stmt|;
comment|/**      * Create a filter on the give filesystem with the specified blacklist      * @param fs filesystem to filter      * @param directoryNameBlackList list of the names of the directories to filter. If      *<tt>null</tt>, all directories are returned      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|BlackListDirFilter
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|directoryNameBlackList
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|blacklist
operator|=
call|(
name|List
argument_list|<
name|String
argument_list|>
call|)
argument_list|(
name|directoryNameBlackList
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|directoryNameBlackList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|boolean
name|isValid
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|blacklist
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|isValid
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDirectory
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An error occurred while verifying if ["
operator|+
name|p
operator|.
name|toString
argument_list|()
operator|+
literal|"] is a valid directory. Returning 'not valid' and continuing."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|isValid
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * A {@link PathFilter} that only allows directories.    */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|DirFilter
extends|extends
name|BlackListDirFilter
block|{
specifier|public
name|DirFilter
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * A {@link PathFilter} that returns usertable directories. To get all directories use the    * {@link BlackListDirFilter} with a<tt>null</tt> blacklist    */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|UserTableDirFilter
extends|extends
name|BlackListDirFilter
block|{
specifier|public
name|UserTableDirFilter
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|HConstants
operator|.
name|HBASE_NON_TABLE_DIRS
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * Heuristic to determine whether is safe or not to open a file for append    * Looks both for dfs.support.append and use reflection to search    * for SequenceFile.Writer.syncFs() or FSDataOutputStream.hflush()    * @param conf    * @return True if append support    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|isAppendSupported
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|append
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|append
condition|)
block|{
try|try
block|{
comment|// TODO: The implementation that comes back when we do a createWriter
comment|// may not be using SequenceFile so the below is not a definitive test.
comment|// Will do for now (hdfs-200).
name|SequenceFile
operator|.
name|Writer
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"syncFs"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
name|append
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|append
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function

begin_if
if|if
condition|(
operator|!
name|append
condition|)
block|{
comment|// Look for the 0.21, 0.22, new-style append evidence.
try|try
block|{
name|FSDataOutputStream
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"hflush"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
name|append
operator|=
literal|true
expr_stmt|;
block|}
end_if

begin_catch
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|append
operator|=
literal|false
expr_stmt|;
block|}
end_catch

begin_expr_stmt
unit|}     return
name|append
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**    * @param conf    * @return True if this filesystem whose scheme is 'hdfs'.    * @throws IOException    */
end_comment

begin_function
unit|public
specifier|static
name|boolean
name|isHDFS
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
return|return
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"hdfs"
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Recover file lease. Used when a file might be suspect    * to be had been left open by another process.    * @param fs FileSystem handle    * @param p Path of file to recover lease    * @param conf Configuration handle    * @throws IOException    */
end_comment

begin_function_decl
specifier|public
specifier|abstract
name|void
name|recoverFileLease
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
function_decl|;
end_function_decl

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|getTableDirs
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|tableDirs
init|=
operator|new
name|LinkedList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
operator|new
name|Path
argument_list|(
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|,
literal|"*"
argument_list|)
argument_list|)
argument_list|)
control|)
block|{
name|tableDirs
operator|.
name|addAll
argument_list|(
name|FSUtils
operator|.
name|getLocalTableDirs
argument_list|(
name|fs
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tableDirs
return|;
block|}
end_function

begin_comment
comment|/**    * @param fs    * @param rootdir    * @return All the table directories under<code>rootdir</code>. Ignore non table hbase folders such as    * .logs, .oldlogs, .corrupt folders.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|getLocalTableDirs
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// presumes any directory under hbase.rootdir is a table
name|FileStatus
index|[]
name|dirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootdir
argument_list|,
operator|new
name|UserTableDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|tabledirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|dirs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|dir
range|:
name|dirs
control|)
block|{
name|tabledirs
operator|.
name|add
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tabledirs
return|;
block|}
end_function

begin_comment
comment|/**    * Checks if the given path is the one with 'recovered.edits' dir.    * @param path    * @return True if we recovered edits    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|isRecoveredEdits
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|HConstants
operator|.
name|RECOVERED_EDITS_DIR
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Filter for all dirs that don't start with '.'    */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|RegionDirFilter
implements|implements
name|PathFilter
block|{
comment|// This pattern will accept 0.90+ style hex region dirs and older numeric region dir names.
specifier|final
specifier|public
specifier|static
name|Pattern
name|regionDirPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[0-9a-f]*$"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|public
name|RegionDirFilter
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|rd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|regionDirPattern
operator|.
name|matcher
argument_list|(
name|rd
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|rd
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Maybe the file was moved or the fs was disconnected.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping file "
operator|+
name|rd
operator|+
literal|" due to IOException"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Given a particular table dir, return all the regiondirs inside it, excluding files such as    * .tableinfo    * @param fs A file system for the Path    * @param tableDir Path to a specific table directory<hbase.rootdir>/<tabledir>    * @return List of paths to valid region directories in table dir.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|getRegionDirs
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|tableDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// assumes we are in a table dir.
name|FileStatus
index|[]
name|rds
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableDir
argument_list|,
operator|new
name|RegionDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|regionDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|rds
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|rdfs
range|:
name|rds
control|)
block|{
name|Path
name|rdPath
init|=
name|rdfs
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|regionDirs
operator|.
name|add
argument_list|(
name|rdPath
argument_list|)
expr_stmt|;
block|}
return|return
name|regionDirs
return|;
block|}
end_function

begin_comment
comment|/**    * Filter for all dirs that are legal column family names.  This is generally used for colfam    * dirs<hbase.rootdir>/<tabledir>/<regiondir>/<colfamdir>.    */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|FamilyDirFilter
implements|implements
name|PathFilter
block|{
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|public
name|FamilyDirFilter
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|rd
parameter_list|)
block|{
try|try
block|{
comment|// throws IAE if invalid
name|HColumnDescriptor
operator|.
name|isLegalFamilyName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rd
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// path name is an invalid family name and thus is excluded.
return|return
literal|false
return|;
block|}
try|try
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|rd
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Maybe the file was moved or the fs was disconnected.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping file "
operator|+
name|rd
operator|+
literal|" due to IOException"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Given a particular region dir, return all the familydirs inside it    *    * @param fs A file system for the Path    * @param regionDir Path to a specific region directory    * @return List of paths to valid family directories in region dir.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|getFamilyDirs
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|regionDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// assumes we are in a region dir.
name|FileStatus
index|[]
name|fds
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|regionDir
argument_list|,
operator|new
name|FamilyDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|familyDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|fds
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fdfs
range|:
name|fds
control|)
block|{
name|Path
name|fdPath
init|=
name|fdfs
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|familyDirs
operator|.
name|add
argument_list|(
name|fdPath
argument_list|)
expr_stmt|;
block|}
return|return
name|familyDirs
return|;
block|}
end_function

begin_comment
comment|/**    * Filter for HFiles that excludes reference files.    */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|HFileFilter
implements|implements
name|PathFilter
block|{
comment|// This pattern will accept 0.90+ style hex hfies files but reject reference files
specifier|final
specifier|public
specifier|static
name|Pattern
name|hfilePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9a-f]+)$"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|public
name|HFileFilter
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|rd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hfilePattern
operator|.
name|matcher
argument_list|(
name|rd
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
comment|// only files
return|return
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|rd
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Maybe the file was moved or the fs was disconnected.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping file "
operator|+
name|rd
operator|+
literal|" due to IOException"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * @param conf    * @return Returns the filesystem of the hbase rootdir.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|FileSystem
name|getCurrentFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRootDir
argument_list|(
name|conf
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Runs through the HBase rootdir/tablename and creates a reverse lookup map for    * table StoreFile names to the full Path.    *<br>    * Example...<br>    * Key = 3944417774205889744<br>    * Value = hdfs://localhost:51169/user/userid/-ROOT-/70236052/info/3944417774205889744    *    * @param map map to add values.  If null, this method will create and populate one to return    * @param fs  The file system to use.    * @param hbaseRootDir  The root directory to scan.    * @param tableName name of the table to scan.    * @return Map keyed by StoreFile name with a value of the full Path.    * @throws IOException When scanning the directory fails.    */
end_comment

begin_function
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|getTableStoreFilePathMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|map
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// only include the directory paths to tables
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|hbaseRootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
comment|// Inside a table, there are compaction.dir directories to skip.  Otherwise, all else
comment|// should be regions.
name|PathFilter
name|df
init|=
operator|new
name|BlackListDirFilter
argument_list|(
name|fs
argument_list|,
name|HConstants
operator|.
name|HBASE_NON_TABLE_DIRS
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|regionDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|Path
name|dd
init|=
name|regionDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// else its a region name, now look in region for families
name|FileStatus
index|[]
name|familyDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dd
argument_list|,
name|df
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|familyDir
range|:
name|familyDirs
control|)
block|{
name|Path
name|family
init|=
name|familyDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// now in family, iterate over the StoreFiles and
comment|// put in map
name|FileStatus
index|[]
name|familyStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|family
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|sfStatus
range|:
name|familyStatus
control|)
block|{
name|Path
name|sf
init|=
name|sfStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|sf
operator|.
name|getName
argument_list|()
argument_list|,
name|sf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
end_function

begin_comment
comment|/**    * Runs through the HBase rootdir and creates a reverse lookup map for    * table StoreFile names to the full Path.    *<br>    * Example...<br>    * Key = 3944417774205889744<br>    * Value = hdfs://localhost:51169/user/userid/-ROOT-/70236052/info/3944417774205889744    *    * @param fs  The file system to use.    * @param hbaseRootDir  The root directory to scan.    * @return Map keyed by StoreFile name with a value of the full Path.    * @throws IOException When scanning the directory fails.    */
end_comment

begin_function
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|getTableStoreFilePathMap
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|// if this method looks similar to 'getTableFragmentation' that is because
comment|// it was borrowed from it.
comment|// only include the directory paths to tables
for|for
control|(
name|Path
name|tableDir
range|:
name|FSUtils
operator|.
name|getTableDirs
argument_list|(
name|fs
argument_list|,
name|hbaseRootDir
argument_list|)
control|)
block|{
name|getTableStoreFilePathMap
argument_list|(
name|map
argument_list|,
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|FSUtils
operator|.
name|getTableName
argument_list|(
name|tableDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
end_function

begin_comment
comment|/**    * Calls fs.listStatus() and treats FileNotFoundException as non-fatal    * This accommodates differences between hadoop versions, where hadoop 1    * does not throw a FileNotFoundException, and return an empty FileStatus[]    * while Hadoop 2 will throw FileNotFoundException.    *    * @param fs file system    * @param dir directory    * @param filter path filter    * @return null if dir is empty or doesn't exist, otherwise FileStatus array    */
end_comment

begin_function
specifier|public
specifier|static
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|status
operator|=
name|filter
operator|==
literal|null
condition|?
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
else|:
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// if directory doesn't exist, return null
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|dir
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|length
operator|<
literal|1
condition|)
return|return
literal|null
return|;
return|return
name|status
return|;
block|}
end_function

begin_comment
comment|/**    * Calls fs.listStatus() and treats FileNotFoundException as non-fatal    * This would accommodates differences between hadoop versions    *    * @param fs file system    * @param dir directory    * @return null if dir is empty or doesn't exist, otherwise FileStatus array    */
end_comment

begin_function
specifier|public
specifier|static
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listStatus
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Calls fs.delete() and returns the value returned by the fs.delete()    *    * @param fs    * @param path    * @param recursive    * @return the value returned by the fs.delete()    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|delete
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|recursive
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Calls fs.exists(). Checks if the specified path exists    *    * @param fs    * @param path    * @return the value returned by fs.exists()    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|isExists
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Throw an exception if an action is not permitted by a user on a file.    *    * @param ugi    *          the user    * @param file    *          the file    * @param action    *          the action    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|FileStatus
name|file
parameter_list|,
name|FsAction
name|action
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|getPermission
argument_list|()
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|contains
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|,
name|file
operator|.
name|getGroup
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|getPermission
argument_list|()
operator|.
name|getGroupAction
argument_list|()
operator|.
name|implies
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|getPermission
argument_list|()
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Permission denied:"
operator|+
literal|" action="
operator|+
name|action
operator|+
literal|" path="
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" user="
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
throw|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|String
index|[]
name|groups
parameter_list|,
name|String
name|user
parameter_list|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|group
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|/**    * Log the current state of the filesystem from a certain root directory    * @param fs filesystem to investigate    * @param root root file/directory to start logging from    * @param LOG log to output information    * @throws IOException if an unexpected exception occurs    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|logFileSystemState
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|root
parameter_list|,
name|Log
name|LOG
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current file system:"
argument_list|)
expr_stmt|;
name|logFSTree
argument_list|(
name|LOG
argument_list|,
name|fs
argument_list|,
name|root
argument_list|,
literal|"|-"
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Recursive helper to log the state of the FS    *    * @see #logFileSystemState(FileSystem, Path, Log)    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|logFSTree
parameter_list|(
name|Log
name|LOG
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|root
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|files
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|prefix
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|logFSTree
argument_list|(
name|LOG
argument_list|,
name|fs
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|prefix
operator|+
literal|"---"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|prefix
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|renameAndSetModifyTime
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set the modify time for TimeToLive Cleaner
name|fs
operator|.
name|setTimes
argument_list|(
name|src
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * This function is to scan the root path of the file system to get the    * degree of locality for each region on each of the servers having at least    * one block of that region.    * This is used by the tool {@link RegionPlacementMaintainer}    *    * @param conf    *          the configuration to use    * @return the mapping from region encoded name to a map of server names to    *           locality fraction    * @throws IOException    *           in case of file system errors or interrupts    */
end_comment

begin_function
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|getRegionDegreeLocalityMappingFromFS
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRegionDegreeLocalityMappingFromFS
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|THREAD_POOLSIZE
argument_list|,
name|DEFAULT_THREAD_POOLSIZE
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * This function is to scan the root path of the file system to get the    * degree of locality for each region on each of the servers having at least    * one block of that region.    *    * @param conf    *          the configuration to use    * @param desiredTable    *          the table you wish to scan locality for    * @param threadPoolSize    *          the thread pool size to use    * @return the mapping from region encoded name to a map of server names to    *           locality fraction    * @throws IOException    *           in case of file system errors or interrupts    */
end_comment

begin_function
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|getRegionDegreeLocalityMappingFromFS
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|desiredTable
parameter_list|,
name|int
name|threadPoolSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|regionDegreeLocalityMapping
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|getRegionLocalityMappingFromFS
argument_list|(
name|conf
argument_list|,
name|desiredTable
argument_list|,
name|threadPoolSize
argument_list|,
literal|null
argument_list|,
name|regionDegreeLocalityMapping
argument_list|)
expr_stmt|;
return|return
name|regionDegreeLocalityMapping
return|;
block|}
end_function

begin_comment
comment|/**    * This function is to scan the root path of the file system to get either the    * mapping between the region name and its best locality region server or the    * degree of locality of each region on each of the servers having at least    * one block of that region. The output map parameters are both optional.    *    * @param conf    *          the configuration to use    * @param desiredTable    *          the table you wish to scan locality for    * @param threadPoolSize    *          the thread pool size to use    * @param regionToBestLocalityRSMapping    *          the map into which to put the best locality mapping or null    * @param regionDegreeLocalityMapping    *          the map into which to put the locality degree mapping or null,    *          must be a thread-safe implementation    * @throws IOException    *           in case of file system errors or interrupts    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|getRegionLocalityMappingFromFS
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|desiredTable
parameter_list|,
name|int
name|threadPoolSize
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|regionToBestLocalityRSMapping
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|regionDegreeLocalityMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootPath
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Path
name|queryPath
decl_stmt|;
comment|// The table files are in ${hbase.rootdir}/data/<namespace>/<table>/*
if|if
condition|(
literal|null
operator|==
name|desiredTable
condition|)
block|{
name|queryPath
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"/*/*/*/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryPath
operator|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootPath
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|desiredTable
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"/*/"
argument_list|)
expr_stmt|;
block|}
comment|// reject all paths that are not appropriate
name|PathFilter
name|pathFilter
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// this is the region name; it may get some noise data
if|if
condition|(
literal|null
operator|==
name|path
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// no parent?
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|parent
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|regionName
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|regionName
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|regionName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|matches
argument_list|(
literal|"[0-9a-f]+"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|FileStatus
index|[]
name|statusList
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|queryPath
argument_list|,
name|pathFilter
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|statusList
condition|)
block|{
return|return;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Query Path: "
operator|+
name|queryPath
operator|+
literal|" ; # list of files: "
operator|+
name|statusList
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// lower the number of threads in case we have very few expected regions
name|threadPoolSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|threadPoolSize
argument_list|,
name|statusList
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// run in multiple threads
name|ThreadPoolExecutor
name|tpe
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|threadPoolSize
argument_list|,
name|threadPoolSize
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|statusList
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// ignore all file status items that are not of interest
for|for
control|(
name|FileStatus
name|regionStatus
range|:
name|statusList
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|regionStatus
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|regionStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Path
name|regionPath
init|=
name|regionStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|regionPath
condition|)
block|{
continue|continue;
block|}
name|tpe
operator|.
name|execute
argument_list|(
operator|new
name|FSRegionScanner
argument_list|(
name|fs
argument_list|,
name|regionPath
argument_list|,
name|regionToBestLocalityRSMapping
argument_list|,
name|regionDegreeLocalityMapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tpe
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|int
name|threadWakeFrequency
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
try|try
block|{
comment|// here we wait until TPE terminates, which is either naturally or by
comment|// exceptions in the execution of the threads
while|while
condition|(
operator|!
name|tpe
operator|.
name|awaitTermination
argument_list|(
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
comment|// printing out rough estimate, so as to not introduce
comment|// AtomicInteger
name|LOG
operator|.
name|info
argument_list|(
literal|"Locality checking is underway: { Scanned Regions : "
operator|+
name|tpe
operator|.
name|getCompletedTaskCount
argument_list|()
operator|+
literal|"/"
operator|+
name|tpe
operator|.
name|getTaskCount
argument_list|()
operator|+
literal|" }"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|long
name|overhead
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|String
name|overheadMsg
init|=
literal|"Scan DFS for locality info takes "
operator|+
name|overhead
operator|+
literal|" ms"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|overheadMsg
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Do our short circuit read setup.    * Checks buffer size to use and whether to do checksumming in hbase or hdfs.    * @param conf    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|setupShortCircuitRead
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Check that the user has not set the "dfs.client.read.shortcircuit.skip.checksum" property.
name|boolean
name|shortCircuitSkipChecksum
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"dfs.client.read.shortcircuit.skip.checksum"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|useHBaseChecksum
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_CHECKSUM_VERIFICATION
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|shortCircuitSkipChecksum
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration \"dfs.client.read.shortcircuit.skip.checksum\" should not "
operator|+
literal|"be set to true."
operator|+
operator|(
name|useHBaseChecksum
condition|?
literal|" HBase checksum doesn't require "
operator|+
literal|"it, see https://issues.apache.org/jira/browse/HBASE-6868."
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|shortCircuitSkipChecksum
assert|;
comment|//this will fail if assertions are on
block|}
name|checkShortCircuitReadBufferSize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Check if short circuit read buffer size is set and if not, set it to hbase value.    * @param conf    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|checkShortCircuitReadBufferSize
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|int
name|defaultSize
init|=
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
operator|*
literal|2
decl_stmt|;
specifier|final
name|int
name|notSet
init|=
operator|-
literal|1
decl_stmt|;
comment|// DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_BUFFER_SIZE_KEY is only defined in h2
specifier|final
name|String
name|dfsKey
init|=
literal|"dfs.client.read.shortcircuit.buffer.size"
decl_stmt|;
name|int
name|size
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|dfsKey
argument_list|,
name|notSet
argument_list|)
decl_stmt|;
comment|// If a size is set, return -- we will use it.
if|if
condition|(
name|size
operator|!=
name|notSet
condition|)
return|return;
comment|// But short circuit buffer size is normally not set.  Put in place the hbase wanted size.
name|int
name|hbaseSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase."
operator|+
name|dfsKey
argument_list|,
name|defaultSize
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setIfUnset
argument_list|(
name|dfsKey
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|hbaseSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

