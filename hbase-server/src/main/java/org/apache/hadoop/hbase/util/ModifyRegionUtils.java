begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HFileArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_comment
comment|/**  * Utility methods for interacting with the regions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|ModifyRegionUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ModifyRegionUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ModifyRegionUtils
parameter_list|()
block|{   }
specifier|public
interface|interface
name|RegionFillTask
block|{
name|void
name|fillRegion
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Create new set of regions on the specified file-system.    * NOTE: that you should add the regions to .META. after this operation.    *    * @param conf {@link Configuration}    * @param rootDir Root directory for HBase instance    * @param hTableDescriptor description of the table    * @param newRegions {@link HRegionInfo} that describes the regions to create    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|createRegions
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|,
specifier|final
name|HRegionInfo
index|[]
name|newRegions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createRegions
argument_list|(
name|conf
argument_list|,
name|rootDir
argument_list|,
name|hTableDescriptor
argument_list|,
name|newRegions
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Create new set of regions on the specified file-system.    * NOTE: that you should add the regions to .META. after this operation.    *    * @param conf {@link Configuration}    * @param rootDir Root directory for HBase instance    * @param hTableDescriptor description of the table    * @param newRegions {@link HRegionInfo} that describes the regions to create    * @param task {@link RegionFillTask} custom code to populate region after creation    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|createRegions
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|,
specifier|final
name|HRegionInfo
index|[]
name|newRegions
parameter_list|,
specifier|final
name|RegionFillTask
name|task
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|newRegions
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|regionNumber
init|=
name|newRegions
operator|.
name|length
decl_stmt|;
name|ThreadPoolExecutor
name|regionOpenAndInitThreadPool
init|=
name|getRegionOpenAndInitThreadPool
argument_list|(
name|conf
argument_list|,
literal|"RegionOpenAndInitThread-"
operator|+
name|hTableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|,
name|regionNumber
argument_list|)
decl_stmt|;
name|CompletionService
argument_list|<
name|HRegionInfo
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|regionOpenAndInitThreadPool
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|HRegionInfo
name|newRegion
range|:
name|newRegions
control|)
block|{
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|HRegionInfo
name|call
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 1. Create HRegion
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|newRegion
argument_list|,
name|rootDir
argument_list|,
name|conf
argument_list|,
name|hTableDescriptor
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
comment|// 2. Custom user code to interact with the created region
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|fillRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// 3. Close the new region to flush to disk. Close log file too.
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|region
operator|.
name|getRegionInfo
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// 4. wait for all regions to finish creation
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionNumber
condition|;
name|i
operator|++
control|)
block|{
name|Future
argument_list|<
name|HRegionInfo
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|regionInfos
operator|.
name|add
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught "
operator|+
name|e
operator|+
literal|" during region creation"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|regionOpenAndInitThreadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
return|return
name|regionInfos
return|;
block|}
comment|/*    * used by createRegions() to get the thread pool executor based on the    * "hbase.hregion.open.and.init.threads.max" property.    */
specifier|static
name|ThreadPoolExecutor
name|getRegionOpenAndInitThreadPool
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|threadNamePrefix
parameter_list|,
name|int
name|regionNumber
parameter_list|)
block|{
name|int
name|maxThreads
init|=
name|Math
operator|.
name|min
argument_list|(
name|regionNumber
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hregion.open.and.init.threads.max"
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|regionOpenAndInitThreadPool
init|=
name|Threads
operator|.
name|getBoundedCachedThreadPool
argument_list|(
name|maxThreads
argument_list|,
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|1
decl_stmt|;
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|threadNamePrefix
operator|+
literal|"-"
operator|+
name|count
operator|++
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|regionOpenAndInitThreadPool
return|;
block|}
comment|/**    * Trigger immediate assignment of the regions in round-robin fashion    *    * @param assignmentManager    * @param regions    */
specifier|public
specifier|static
name|void
name|assignRegions
parameter_list|(
specifier|final
name|AssignmentManager
name|assignmentManager
parameter_list|,
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|createRegionStates
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|assignmentManager
operator|.
name|assign
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught "
operator|+
name|e
operator|+
literal|" during round-robin assignment"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

