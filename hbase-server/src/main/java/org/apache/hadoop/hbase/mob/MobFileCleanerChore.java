begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HFileArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The class MobFileCleanerChore for running cleaner regularly to remove the expired  * and obsolete (files which have no active references to) mob files.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MobFileCleanerChore
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MobFileCleanerChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HMaster
name|master
decl_stmt|;
specifier|private
name|ExpiredMobFileCleaner
name|cleaner
decl_stmt|;
static|static
block|{
name|Configuration
operator|.
name|addDeprecation
argument_list|(
name|MobConstants
operator|.
name|DEPRECATED_MOB_CLEANER_PERIOD
argument_list|,
name|MobConstants
operator|.
name|MOB_CLEANER_PERIOD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MobFileCleanerChore
parameter_list|(
name|HMaster
name|master
parameter_list|)
block|{
name|super
argument_list|(
name|master
operator|.
name|getServerName
argument_list|()
operator|+
literal|"-MobFileCleanerChore"
argument_list|,
name|master
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MobConstants
operator|.
name|MOB_CLEANER_PERIOD
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_CLEANER_PERIOD
argument_list|)
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MobConstants
operator|.
name|MOB_CLEANER_PERIOD
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_CLEANER_PERIOD
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|cleaner
operator|=
operator|new
name|ExpiredMobFileCleaner
argument_list|()
expr_stmt|;
name|cleaner
operator|.
name|setConf
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|checkObsoleteConfigurations
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkObsoleteConfigurations
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.mob.compaction.mergeable.threshold"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"'hbase.mob.compaction.mergeable.threshold' is obsolete and not used anymore."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.mob.delfile.max.count"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"'hbase.mob.delfile.max.count' is obsolete and not used anymore."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.mob.compaction.threads.max"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"'hbase.mob.compaction.threads.max' is obsolete and not used anymore."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.mob.compaction.batch.size"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"'hbase.mob.compaction.batch.size' is obsolete and not used anymore."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|MobFileCleanerChore
parameter_list|()
block|{
name|this
operator|.
name|master
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|TableDescriptors
name|htds
init|=
name|master
operator|.
name|getTableDescriptors
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TableDescriptor
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
try|try
block|{
name|map
operator|=
name|htds
operator|.
name|getAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MobFileCleanerChore failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|TableDescriptor
name|htd
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|htd
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
if|if
condition|(
name|hcd
operator|.
name|isMobEnabled
argument_list|()
operator|&&
name|hcd
operator|.
name|getMinVersions
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|cleaner
operator|.
name|cleanExpiredMobFiles
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to clean the expired mob files table={} family={}"
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|hcd
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
comment|// Now clean obsolete files for a table
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning obsolete MOB files from table={}"
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupObsoleteMobFiles
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning obsolete MOB files finished for table={}"
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to clean the obsolete mob files for table={}"
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Performs housekeeping file cleaning (called by MOB Cleaner chore)    * @param conf configuration    * @param table table name    * @throws IOException exception    */
specifier|public
name|void
name|cleanupObsoleteMobFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|minAgeToArchive
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MobConstants
operator|.
name|MIN_AGE_TO_ARCHIVE_KEY
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MIN_AGE_TO_ARCHIVE
argument_list|)
decl_stmt|;
comment|// We check only those MOB files, which creation time is less
comment|// than maxCreationTimeToArchive. This is a current time - 1h. 1 hour gap
comment|// gives us full confidence that all corresponding store files will
comment|// exist at the time cleaning procedure begins and will be examined.
comment|// So, if MOB file creation time is greater than this maxTimeToArchive,
comment|// this will be skipped and won't be archived.
name|long
name|maxCreationTimeToArchive
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|minAgeToArchive
decl_stmt|;
try|try
init|(
specifier|final
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|final
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;
init|)
block|{
name|TableDescriptor
name|htd
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|list
init|=
name|MobUtils
operator|.
name|getMobColumnFamilies
argument_list|(
name|htd
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping non-MOB table [{}]"
argument_list|,
name|table
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only MOB files whose creation time older than {} will be archived, table={}"
argument_list|,
name|maxCreationTimeToArchive
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|table
argument_list|)
decl_stmt|;
comment|// How safe is this call?
name|List
argument_list|<
name|Path
argument_list|>
name|regionDirs
init|=
name|FSUtils
operator|.
name|getRegionDirs
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|,
name|tableDir
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allActiveMobFileName
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|regionPath
range|:
name|regionDirs
control|)
block|{
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|list
control|)
block|{
name|String
name|family
init|=
name|hcd
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|Path
name|storePath
init|=
operator|new
name|Path
argument_list|(
name|regionPath
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|boolean
name|succeed
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|regionMobs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|succeed
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|storePath
argument_list|)
condition|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Directory %s was deleted during MOB file cleaner chore"
operator|+
literal|" execution, aborting MOB file cleaner chore."
argument_list|,
name|storePath
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|rit
init|=
name|fs
operator|.
name|listLocatedStatus
argument_list|(
name|storePath
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|storeFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|// Load list of store files first
while|while
condition|(
name|rit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Path
name|p
init|=
name|rit
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|isFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|storeFiles
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} store files in: {}"
argument_list|,
name|storeFiles
operator|.
name|size
argument_list|()
argument_list|,
name|storePath
argument_list|)
expr_stmt|;
name|Path
name|currentPath
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Path
name|pp
range|:
name|storeFiles
control|)
block|{
name|currentPath
operator|=
name|pp
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Store file: {}"
argument_list|,
name|pp
argument_list|)
expr_stmt|;
name|HStoreFile
name|sf
init|=
operator|new
name|HStoreFile
argument_list|(
name|fs
argument_list|,
name|pp
argument_list|,
name|conf
argument_list|,
name|CacheConfig
operator|.
name|DISABLED
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|sf
operator|.
name|initReader
argument_list|()
expr_stmt|;
name|byte
index|[]
name|mobRefData
init|=
name|sf
operator|.
name|getMetadataValue
argument_list|(
name|HStoreFile
operator|.
name|MOB_FILE_REFS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bulkloadMarkerData
init|=
name|sf
operator|.
name|getMetadataValue
argument_list|(
name|HStoreFile
operator|.
name|BULKLOAD_TASK_KEY
argument_list|)
decl_stmt|;
comment|// close store file to avoid memory leaks
name|sf
operator|.
name|closeStoreFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|mobRefData
operator|==
literal|null
operator|&&
name|bulkloadMarkerData
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found old store file with no MOB_FILE_REFS: {} - "
operator|+
literal|"can not proceed until all old files will be MOB-compacted."
argument_list|,
name|pp
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|mobRefData
operator|==
literal|null
operator|&&
name|bulkloadMarkerData
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping file without MOB references (bulkloaded file):{}"
argument_list|,
name|pp
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// mobRefData will never be null here, but to make FindBugs happy
if|if
condition|(
name|mobRefData
operator|!=
literal|null
operator|&&
name|mobRefData
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// if length = 1 means NULL, that there are no MOB references
comment|// in this store file, but the file was created by new MOB code
name|String
index|[]
name|mobs
init|=
operator|new
name|String
argument_list|(
name|mobRefData
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found: {} mob references: {}"
argument_list|,
name|mobs
operator|.
name|length
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|mobs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found: {} mob references"
argument_list|,
name|mobs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|regionMobs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|mobs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"File {} does not have mob references"
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing file:{} Starting MOB cleaning cycle from the beginning"
operator|+
literal|" due to error"
argument_list|,
name|currentPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|regionMobs
operator|.
name|clear
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|succeed
operator|=
literal|true
expr_stmt|;
block|}
comment|// Add MOB references for current region/family
name|allActiveMobFileName
operator|.
name|addAll
argument_list|(
name|regionMobs
argument_list|)
expr_stmt|;
block|}
comment|// END column families
block|}
comment|// END regions
comment|// Check if number of MOB files too big (over 1M)
if|if
condition|(
name|allActiveMobFileName
operator|.
name|size
argument_list|()
operator|>
literal|1000000
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found too many active MOB files: {}, table={}, "
operator|+
literal|"this may result in high memory pressure."
argument_list|,
name|allActiveMobFileName
operator|.
name|size
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found: {} active mob refs for table={}"
argument_list|,
name|allActiveMobFileName
operator|.
name|size
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|allActiveMobFileName
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|LOG
operator|::
name|trace
argument_list|)
expr_stmt|;
comment|// Now scan MOB directories and find MOB files with no references to them
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|list
control|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|toArchive
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|family
init|=
name|hcd
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|rit
init|=
name|fs
operator|.
name|listLocatedStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
while|while
condition|(
name|rit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|lfs
init|=
name|rit
operator|.
name|next
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|lfs
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|allActiveMobFileName
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// MOB is not in a list of active references, but it can be too
comment|// fresh, skip it in this case
name|long
name|creationTime
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|creationTime
operator|<
name|maxCreationTimeToArchive
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Archiving MOB file {} creation time={}"
argument_list|,
name|p
argument_list|,
operator|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getModificationTime
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|toArchive
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping fresh file: {}. Creation time={}"
argument_list|,
name|p
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Keeping active MOB file: {}"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|" MOB Cleaner found {} files to archive for table={} family={}"
argument_list|,
name|toArchive
operator|.
name|size
argument_list|()
argument_list|,
name|table
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|archiveMobFiles
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|family
operator|.
name|getBytes
argument_list|()
argument_list|,
name|toArchive
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" MOB Cleaner archived {} files, table={} family={}"
argument_list|,
name|toArchive
operator|.
name|size
argument_list|()
argument_list|,
name|table
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Archives the mob files.    * @param conf The current configuration.    * @param tableName The table name.    * @param family The name of the column family.    * @param storeFiles The files to be archived.    * @throws IOException exception    */
specifier|public
name|void
name|archiveMobFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|storeFiles
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storeFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// nothing to remove
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping archiving old MOB files - no files found for table={} cf={}"
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Path
name|mobTableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|conf
argument_list|)
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|storeFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|storeFiles
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MOB Cleaner is archiving: {}"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|HFileArchiver
operator|.
name|archiveStoreFile
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|MobUtils
operator|.
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|mobTableDir
argument_list|,
name|family
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

