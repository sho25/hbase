begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * This queue allows a ThreadPoolExecutor to steal jobs from another ThreadPoolExecutor.  * This queue also acts as the factory for creating the PriorityBlockingQueue to be used in the  * steal-from ThreadPoolExecutor. The behavior of this queue is the same as a normal  * PriorityBlockingQueue except the take/poll(long,TimeUnit) methods would also check whether there  * are jobs in the steal-from queue if this q ueue is empty.  *  * Note the workers in ThreadPoolExecutor must be pre-started so that they can steal job from the  * other queue, otherwise the worker will only be started after there are jobs submitted to main  * queue.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|StealJobQueue
parameter_list|<
name|T
parameter_list|>
extends|extends
name|PriorityBlockingQueue
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6334572230936888291L
decl_stmt|;
specifier|private
name|BlockingQueue
argument_list|<
name|T
argument_list|>
name|stealFromQueue
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|transient
name|Condition
name|notEmpty
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|public
name|StealJobQueue
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
argument_list|(
literal|11
argument_list|,
literal|11
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StealJobQueue
parameter_list|(
name|int
name|initCapacity
parameter_list|,
name|int
name|stealFromQueueInitCapacity
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comparator
parameter_list|)
block|{
name|super
argument_list|(
name|initCapacity
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|stealFromQueue
operator|=
operator|new
name|PriorityBlockingQueue
argument_list|<
name|T
argument_list|>
argument_list|(
name|stealFromQueueInitCapacity
argument_list|,
name|comparator
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6805567216580184701L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|T
name|t
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|notEmpty
operator|.
name|signal
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|offer
argument_list|(
name|t
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
comment|/**    * Get a queue whose job might be stolen by the consumer of this original queue    * @return the queue whose job could be stolen    */
specifier|public
name|BlockingQueue
argument_list|<
name|T
argument_list|>
name|getStealFromQueue
parameter_list|()
block|{
return|return
name|stealFromQueue
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|T
name|t
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|notEmpty
operator|.
name|signal
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|offer
argument_list|(
name|t
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|T
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|T
name|retVal
init|=
name|this
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|retVal
operator|==
literal|null
condition|)
block|{
name|retVal
operator|=
name|stealFromQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|retVal
operator|==
literal|null
condition|)
block|{
name|notEmpty
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|retVal
return|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|T
name|poll
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|nanos
init|=
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|T
name|retVal
init|=
name|this
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|retVal
operator|==
literal|null
condition|)
block|{
name|retVal
operator|=
name|stealFromQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|retVal
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nanos
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
name|nanos
operator|=
name|notEmpty
operator|.
name|awaitNanos
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|retVal
return|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

