begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Chore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
operator|.
name|TableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|filecompactions
operator|.
name|MobFileCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|filecompactions
operator|.
name|PartitionedMobFileCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_comment
comment|/**  * The Class MobFileCompactChore for running compaction regularly to merge small mob files.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MobFileCompactionChore
extends|extends
name|Chore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MobFileCompactionChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HMaster
name|master
decl_stmt|;
specifier|private
name|TableLockManager
name|tableLockManager
decl_stmt|;
specifier|private
name|ExecutorService
name|pool
decl_stmt|;
specifier|public
name|MobFileCompactionChore
parameter_list|(
name|HMaster
name|master
parameter_list|)
block|{
name|super
argument_list|(
name|master
operator|.
name|getServerName
argument_list|()
operator|+
literal|"-MobFileCompactChore"
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MobConstants
operator|.
name|MOB_FILE_COMPACTION_CHORE_PERIOD
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_FILE_COMPACTION_CHORE_PERIOD
argument_list|)
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|tableLockManager
operator|=
name|master
operator|.
name|getTableLockManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|createThreadPool
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
name|String
name|className
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|MobConstants
operator|.
name|MOB_FILE_COMPACTOR_CLASS_KEY
argument_list|,
name|PartitionedMobFileCompactor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptors
name|htds
init|=
name|master
operator|.
name|getTableDescriptors
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
name|map
init|=
name|htds
operator|.
name|getAll
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|htd
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hcd
operator|.
name|isMobEnabled
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// instantiate the mob file compactor.
name|MobFileCompactor
name|compactor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|compactor
operator|=
name|ReflectionUtils
operator|.
name|instantiateWithCustomCtor
argument_list|(
name|className
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Configuration
operator|.
name|class
block|,
name|FileSystem
operator|.
name|class
block|,
name|TableName
operator|.
name|class
block|,
name|HColumnDescriptor
operator|.
name|class
block|,
name|ExecutorService
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|master
operator|.
name|getConfiguration
argument_list|()
block|,
name|master
operator|.
name|getFileSystem
argument_list|()
block|,
name|htd
operator|.
name|getTableName
argument_list|()
block|,
name|hcd
block|,
name|pool
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to load configured mob file compactor '"
operator|+
name|className
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// compact only for mob-enabled column.
comment|// obtain a write table lock before performing compaction to avoid race condition
comment|// with major compaction in mob-enabled column.
name|boolean
name|tableLocked
init|=
literal|false
decl_stmt|;
name|TableLock
name|lock
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// the tableLockManager might be null in testing. In that case, it is lock-free.
if|if
condition|(
name|tableLockManager
operator|!=
literal|null
condition|)
block|{
name|lock
operator|=
name|tableLockManager
operator|.
name|writeLock
argument_list|(
name|MobUtils
operator|.
name|getTableLockName
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
literal|"Run MobFileCompactChore"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
name|tableLocked
operator|=
literal|true
expr_stmt|;
name|compactor
operator|.
name|compact
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to compact the mob files for the column "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" in the table "
operator|+
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
operator|&&
name|tableLocked
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to release the write lock for the table "
operator|+
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to clean the expired mob files"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|cleanup
parameter_list|()
block|{
name|super
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a thread pool.    * @return A thread pool.    */
specifier|private
name|ExecutorService
name|createThreadPool
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|int
name|maxThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MobConstants
operator|.
name|MOB_FILE_COMPACTION_CHORE_THREADS_MAX
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_FILE_COMPACTION_CHORE_THREADS_MAX
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxThreads
operator|==
literal|0
condition|)
block|{
name|maxThreads
operator|=
literal|1
expr_stmt|;
block|}
name|long
name|keepAliveTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MobConstants
operator|.
name|MOB_FILE_COMPACTION_CHORE_THREADS_KEEPALIVETIME
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_FILE_COMPACTION_CHORE_THREADS_KEEPALIVETIME
argument_list|)
decl_stmt|;
specifier|final
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|pool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|maxThreads
argument_list|,
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|queue
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
literal|"MobFileCompactionChore"
argument_list|)
argument_list|,
operator|new
name|RejectedExecutionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|rejectedExecution
parameter_list|(
name|Runnable
name|r
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|)
block|{
try|try
block|{
comment|// waiting for a thread to pick up instead of throwing exceptions.
name|queue
operator|.
name|put
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|pool
operator|)
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|pool
return|;
block|}
block|}
end_class

end_unit

