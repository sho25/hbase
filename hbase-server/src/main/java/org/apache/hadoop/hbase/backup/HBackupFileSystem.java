begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|LoadIncrementalHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * View to an on-disk Backup Image FileSytem  * Provides the set of methods necessary to interact with the on-disk Backup Image data.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|HBackupFileSystem
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBackupFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|RESTORE_TMP_PATH
init|=
literal|"/tmp/restoreTemp"
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|ignoreDirs
init|=
block|{
literal|"recovered.edits"
block|}
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|backupRootPath
decl_stmt|;
specifier|private
specifier|final
name|String
name|backupId
decl_stmt|;
comment|/**    * Create a view to the on-disk Backup Image.     * @param conf  to use    * @param backupPath  to where the backup Image stored    * @param backupId represent backup Image    */
name|HBackupFileSystem
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|backupRootPath
parameter_list|,
specifier|final
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|backupRootPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|backupRootPath
operator|=
name|backupRootPath
expr_stmt|;
name|this
operator|.
name|backupId
operator|=
name|backupId
expr_stmt|;
comment|// the backup ID for the lead backup Image
block|}
comment|/**    * @param tableName is the table backuped    * @return {@link HTableDescriptor} saved in backup image of the table    */
specifier|protected
name|HTableDescriptor
name|getTableDesc
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Path
name|tableInfoPath
init|=
name|this
operator|.
name|getTableInfoPath
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"tableInfoPath = "
operator|+
name|tableInfoPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SnapshotDescription
name|desc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|tableInfoPath
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"desc = "
operator|+
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableInfoPath
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDescriptor
init|=
name|manifest
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
comment|/*      * for HBase 0.96 or 0.98 HTableDescriptor tableDescriptor =      * FSTableDescriptors.getTableDescriptorFromFs(fs, tableInfoPath);      */
if|if
condition|(
operator|!
name|tableDescriptor
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"couldn't find Table Desc for table: "
operator|+
name|tableName
operator|+
literal|" under tableInfoPath: "
operator|+
name|tableInfoPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"tableDescriptor.getNameAsString() = "
operator|+
name|tableDescriptor
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tableDescriptor
return|;
block|}
comment|/**    * Given the backup root dir, backup id and the table name, return the backup image location,    * which is also where the backup manifest file is. return value look like:    * "hdfs://backup.hbase.org:9000/user/biadmin/backup1/default/t1_dn/backup_1396650096738"    * @param backupRootDir backup root directory    * @param backupId  backup id    * @param table table name    * @return backupPath String for the particular table    */
specifier|protected
specifier|static
name|String
name|getTableBackupDir
parameter_list|(
name|String
name|backupRootDir
parameter_list|,
name|String
name|backupId
parameter_list|,
name|String
name|table
parameter_list|)
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
decl_stmt|;
return|return
name|backupRootDir
operator|+
name|File
operator|.
name|separator
operator|+
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|backupId
return|;
block|}
comment|/**    * Given the backup root dir, backup id and the table name, return the backup image location,    * which is also where the backup manifest file is. return value look like:    * "hdfs://backup.hbase.org:9000/user/biadmin/backup1/default/t1_dn/backup_1396650096738"    * @param tableN table name    * @return backupPath for the particular table    */
specifier|protected
name|Path
name|getTableBackupPath
parameter_list|(
name|String
name|tableN
parameter_list|)
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableN
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|this
operator|.
name|backupRootPath
argument_list|,
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|backupId
argument_list|)
return|;
block|}
comment|/**    * return value represent path for:    * ".../user/biadmin/backup1/default/t1_dn/backup_1396650096738/.hbase-snapshot"    * @param tableName table name    * @return path for snapshot    */
specifier|protected
name|Path
name|getTableSnapshotPath
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|this
operator|.
name|getTableBackupPath
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|HConstants
operator|.
name|SNAPSHOT_DIR_NAME
argument_list|)
return|;
block|}
comment|/**    * return value represent path for:    * "..../default/t1_dn/backup_1396650096738/.hbase-snapshot/snapshot_1396650097621_default_t1_dn"    * this path contains .snapshotinfo, .tabledesc (0.96 and 0.98) this path contains .snapshotinfo,    * .data.manifest (trunk)    * @param tableName table name    * @return path to table info    * @throws FileNotFoundException exception    * @throws IOException exception    */
specifier|protected
name|Path
name|getTableInfoPath
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Path
name|tableSnapShotPath
init|=
name|this
operator|.
name|getTableSnapshotPath
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Path
name|tableInfoPath
init|=
literal|null
decl_stmt|;
comment|// can't build the path directly as the timestamp values are different
name|FileStatus
index|[]
name|snapshots
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableSnapShotPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|snapshot
range|:
name|snapshots
control|)
block|{
name|tableInfoPath
operator|=
name|snapshot
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|// SnapshotManifest.DATA_MANIFEST_NAME = "data.manifest";
if|if
condition|(
name|tableInfoPath
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"data.manifest"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"find Snapshot Manifest"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|tableInfoPath
return|;
block|}
comment|/**    * return value represent path for:    * ".../user/biadmin/backup1/default/t1_dn/backup_1396650096738/archive/data/default/t1_dn"    * @param tabelName table name    * @return path to table archive    * @throws IOException exception    */
specifier|protected
name|Path
name|getTableArchivePath
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
name|getTableBackupPath
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
decl_stmt|;
name|Path
name|dataDir
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
decl_stmt|;
name|Path
name|archivePath
init|=
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tableArchivePath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|tableArchivePath
argument_list|)
operator|||
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|tableArchivePath
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Folder tableArchivePath: "
operator|+
name|tableArchivePath
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exists"
argument_list|)
expr_stmt|;
name|tableArchivePath
operator|=
literal|null
expr_stmt|;
comment|// empty table has no archive
block|}
return|return
name|tableArchivePath
return|;
block|}
comment|/**    * Given the backup root dir and the backup id, return the log file location for an incremental    * backup.    * @param backupRootDir backup root directory    * @param backupId backup id    * @return logBackupDir: ".../user/biadmin/backup1/WALs/backup_1396650096738"    */
specifier|protected
specifier|static
name|String
name|getLogBackupDir
parameter_list|(
name|String
name|backupRootDir
parameter_list|,
name|String
name|backupId
parameter_list|)
block|{
return|return
name|backupRootDir
operator|+
name|File
operator|.
name|separator
operator|+
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
operator|+
name|File
operator|.
name|separator
operator|+
name|backupId
return|;
block|}
specifier|protected
specifier|static
name|Path
name|getLogBackupPath
parameter_list|(
name|String
name|backupRootDir
parameter_list|,
name|String
name|backupId
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getLogBackupDir
argument_list|(
name|backupRootDir
argument_list|,
name|backupId
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getManifestPath
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|manifestPath
init|=
operator|new
name|Path
argument_list|(
name|getTableBackupPath
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|BackupManifest
operator|.
name|FILE_NAME
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking for "
operator|+
name|manifestPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|manifestPath
argument_list|)
condition|)
block|{
comment|// check log dir for incremental backup case
name|manifestPath
operator|=
operator|new
name|Path
argument_list|(
name|getLogBackupDir
argument_list|(
name|this
operator|.
name|backupRootPath
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|backupId
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|BackupManifest
operator|.
name|FILE_NAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking for "
operator|+
name|manifestPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|manifestPath
argument_list|)
condition|)
block|{
name|String
name|errorMsg
init|=
literal|"Could not find backup manifest for "
operator|+
name|backupId
operator|+
literal|" in "
operator|+
name|backupRootPath
operator|.
name|toString
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
block|}
return|return
name|manifestPath
return|;
block|}
specifier|protected
name|BackupManifest
name|getManifest
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|BackupManifest
name|manifest
init|=
operator|new
name|BackupManifest
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|getManifestPath
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|manifest
return|;
block|}
comment|/**    * Gets region list    * @param tableName table name    * @return RegionList region list    * @throws FileNotFoundException exception    * @throws IOException exception    */
specifier|protected
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|getRegionList
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Path
name|tableArchivePath
init|=
name|this
operator|.
name|getTableArchivePath
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionDirList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|children
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableArchivePath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|childStatus
range|:
name|children
control|)
block|{
comment|// here child refer to each region(Name)
name|Path
name|child
init|=
name|childStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|regionDirList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|regionDirList
return|;
block|}
comment|/**    * Gets region list    * @param tableArchivePath table archive path    * @return RegionList region list    * @throws FileNotFoundException exception    * @throws IOException exception    */
specifier|protected
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|getRegionList
parameter_list|(
name|Path
name|tableArchivePath
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionDirList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|children
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableArchivePath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|childStatus
range|:
name|children
control|)
block|{
comment|// here child refer to each region(Name)
name|Path
name|child
init|=
name|childStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|regionDirList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|regionDirList
return|;
block|}
comment|/**    * Counts the number of files in all subdirectories of an HBase tables, i.e. HFiles. And finds the    * maximum number of files in one HBase table.    * @param tableArchivePath archive path    * @return the maximum number of files found in 1 HBase table    * @throws IOException exception    */
specifier|protected
name|int
name|getMaxNumberOfFilesInSubDir
parameter_list|(
name|Path
name|tableArchivePath
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionPathList
init|=
name|this
operator|.
name|getRegionList
argument_list|(
name|tableArchivePath
argument_list|)
decl_stmt|;
comment|// tableArchivePath = this.getTableArchivePath(tableName);
if|if
condition|(
name|regionPathList
operator|==
literal|null
operator|||
name|regionPathList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot restore hbase table because directory '"
operator|+
name|tableArchivePath
operator|+
literal|"' is not a directory."
argument_list|)
throw|;
block|}
for|for
control|(
name|Path
name|regionPath
range|:
name|regionPathList
control|)
block|{
name|result
operator|=
name|Math
operator|.
name|max
argument_list|(
name|result
argument_list|,
name|getNumberOfFilesInDir
argument_list|(
name|regionPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Counts the number of files in all subdirectories of an HBase table, i.e. HFiles.    * @param regionPath Path to an HBase table directory    * @return the number of files all directories    * @throws IOException exception    */
specifier|protected
name|int
name|getNumberOfFilesInDir
parameter_list|(
name|Path
name|regionPath
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|regionPath
argument_list|)
operator|||
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|regionPath
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot restore hbase table because directory '"
operator|+
name|regionPath
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not a directory."
argument_list|)
throw|;
block|}
name|FileStatus
index|[]
name|tableDirContent
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|regionPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|subDirStatus
range|:
name|tableDirContent
control|)
block|{
name|FileStatus
index|[]
name|colFamilies
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|subDirStatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|colFamilyStatus
range|:
name|colFamilies
control|)
block|{
name|FileStatus
index|[]
name|colFamilyContent
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|colFamilyStatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|+=
name|colFamilyContent
operator|.
name|length
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Duplicate the backup image if it's on local cluster    * @see HStore#bulkLoadHFile(String, long)    * @see HRegionFileSystem#bulkLoadStoreFile(String familyName, Path srcPath, long seqNum)    * @param tableArchivePath archive path    * @return the new tableArchivePath     * @throws IOException exception    */
specifier|protected
name|Path
name|checkLocalAndBackup
parameter_list|(
name|Path
name|tableArchivePath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Move the file if it's on local cluster
name|boolean
name|isCopyNeeded
init|=
literal|false
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|tableArchivePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|desFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableArchivePath
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|isCopyNeeded
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// This should match what is done in @see HRegionFileSystem#bulkLoadStoreFile(String, Path,
comment|// long)
if|if
condition|(
name|srcFs
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|desFs
operator|.
name|getUri
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cluster hold the backup image: "
operator|+
name|srcFs
operator|.
name|getUri
argument_list|()
operator|+
literal|"; local cluster node: "
operator|+
name|desFs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|isCopyNeeded
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isCopyNeeded
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"File "
operator|+
name|tableArchivePath
operator|+
literal|" on local cluster, back it up before restore"
argument_list|)
expr_stmt|;
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
name|RESTORE_TMP_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|desFs
operator|.
name|exists
argument_list|(
name|tmpPath
argument_list|)
condition|)
block|{
try|try
block|{
name|desFs
operator|.
name|delete
argument_list|(
name|tmpPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to delete path: "
operator|+
name|tmpPath
operator|+
literal|", need to check whether restore target DFS cluster is healthy"
argument_list|)
expr_stmt|;
block|}
block|}
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcFs
argument_list|,
name|tableArchivePath
argument_list|,
name|desFs
argument_list|,
name|tmpPath
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copied to temporary path on local cluster: "
operator|+
name|tmpPath
argument_list|)
expr_stmt|;
name|tableArchivePath
operator|=
name|tmpPath
expr_stmt|;
block|}
return|return
name|tableArchivePath
return|;
block|}
comment|/**    * Calculate region boundaries and add all the column families to the table descriptor    * @param regionDirList region dir list    * @return a set of keys to store the boundaries    */
specifier|protected
name|byte
index|[]
index|[]
name|generateBoundaryKeys
parameter_list|(
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionDirList
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|// Build a set of keys to store the boundaries
name|byte
index|[]
index|[]
name|keys
init|=
literal|null
decl_stmt|;
comment|// calculate region boundaries and add all the column families to the table descriptor
for|for
control|(
name|Path
name|regionDir
range|:
name|regionDirList
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing region dir: "
operator|+
name|regionDir
argument_list|)
expr_stmt|;
name|Path
name|hfofDir
init|=
name|regionDir
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|hfofDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HFileOutputFormat dir "
operator|+
name|hfofDir
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
name|FileStatus
index|[]
name|familyDirStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hfofDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyDirStatuses
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No families found in "
operator|+
name|hfofDir
argument_list|)
throw|;
block|}
for|for
control|(
name|FileStatus
name|stat
range|:
name|familyDirStatuses
control|)
block|{
if|if
condition|(
operator|!
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping non-directory "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|isIgnore
init|=
literal|false
decl_stmt|;
name|String
name|pathName
init|=
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ignore
range|:
name|ignoreDirs
control|)
block|{
if|if
condition|(
name|pathName
operator|.
name|contains
argument_list|(
name|ignore
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping non-family directory"
operator|+
name|pathName
argument_list|)
expr_stmt|;
name|isIgnore
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isIgnore
condition|)
block|{
continue|continue;
block|}
name|Path
name|familyDir
init|=
name|stat
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing family dir ["
operator|+
name|familyDir
operator|.
name|toString
argument_list|()
operator|+
literal|" in region ["
operator|+
name|regionDir
operator|+
literal|"]"
argument_list|)
expr_stmt|;
comment|// Skip _logs, etc
if|if
condition|(
name|familyDir
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|||
name|familyDir
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// start to parse hfile inside one family dir
name|Path
index|[]
name|hfiles
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|familyDir
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|hfile
range|:
name|hfiles
control|)
block|{
if|if
condition|(
name|hfile
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|||
name|hfile
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
operator|||
name|StoreFileInfo
operator|.
name|isReference
argument_list|(
name|hfile
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|hfile
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|hfile
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|first
decl_stmt|,
name|last
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|first
operator|=
name|reader
operator|.
name|getFirstRowKey
argument_list|()
expr_stmt|;
name|last
operator|=
name|reader
operator|.
name|getLastRowKey
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to figure out region boundaries hfile="
operator|+
name|hfile
operator|+
literal|" first="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
argument_list|)
operator|+
literal|" last="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
comment|// To eventually infer start key-end key boundaries
name|Integer
name|value
init|=
name|map
operator|.
name|containsKey
argument_list|(
name|first
argument_list|)
condition|?
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
name|first
argument_list|)
else|:
literal|0
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|first
argument_list|,
name|value
operator|+
literal|1
argument_list|)
expr_stmt|;
name|value
operator|=
name|map
operator|.
name|containsKey
argument_list|(
name|last
argument_list|)
condition|?
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
name|last
argument_list|)
else|:
literal|0
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|last
argument_list|,
name|value
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|keys
operator|=
name|LoadIncrementalHFiles
operator|.
name|inferBoundaries
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|keys
return|;
block|}
comment|/**    * Check whether the backup path exist    * @param backupStr backup    * @param conf configuration    * @return Yes if path exists    * @throws IOException exception    */
specifier|protected
specifier|static
name|boolean
name|checkPathExist
parameter_list|(
name|String
name|backupStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isExist
init|=
literal|false
decl_stmt|;
name|Path
name|backupPath
init|=
operator|new
name|Path
argument_list|(
name|backupStr
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|backupPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|targetFsScheme
init|=
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Schema of given url: "
operator|+
name|backupStr
operator|+
literal|" is: "
operator|+
name|targetFsScheme
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileSys
operator|.
name|exists
argument_list|(
name|backupPath
argument_list|)
condition|)
block|{
name|isExist
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|isExist
return|;
block|}
comment|/**    * Check whether the backup image path and there is manifest file in the path.    * @param backupManifestMap If all the manifests are found, then they are put into this map    * @param tableArray the tables involved    * @throws IOException exception    */
specifier|protected
name|void
name|checkImageManifestExist
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|BackupManifest
argument_list|>
name|backupManifestMap
parameter_list|,
name|String
index|[]
name|tableArray
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
for|for
control|(
name|String
name|tableName
range|:
name|tableArray
control|)
block|{
name|BackupManifest
name|manifest
init|=
name|this
operator|.
name|getManifest
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|backupManifestMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|manifest
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|expMsg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|expMsg
operator|.
name|contains
argument_list|(
literal|"No FileSystem for scheme"
argument_list|)
condition|)
block|{
if|if
condition|(
name|expMsg
operator|.
name|contains
argument_list|(
literal|"gpfs"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Please change to use webhdfs url when "
operator|+
literal|"the backup image to restore locates on gpfs cluster"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unsupported filesystem scheme found in the backup target url, "
operator|+
literal|"please check the url to make sure no typo in it"
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|expMsg
operator|.
name|contains
argument_list|(
literal|"no authority supported"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Please change to use webhdfs url when "
operator|+
literal|"the backup image to restore locates on gpfs cluster"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|expMsg
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|sep
init|=
name|BackupRestoreConstants
operator|.
name|TABLENAME_DELIMITER_IN_COMMAND
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|names
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|sep
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

