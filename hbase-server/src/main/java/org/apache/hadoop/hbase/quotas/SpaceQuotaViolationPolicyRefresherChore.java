begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A {@link ScheduledChore} which periodically updates a local copy of tables which have  * space quota violation policies enacted on them.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SpaceQuotaViolationPolicyRefresherChore
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SpaceQuotaViolationPolicyRefresherChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_PERIOD_KEY
init|=
literal|"hbase.regionserver.quotas.policy.refresher.chore.period"
decl_stmt|;
specifier|static
specifier|final
name|int
name|POLICY_REFRESHER_CHORE_PERIOD_DEFAULT
init|=
literal|1000
operator|*
literal|60
operator|*
literal|5
decl_stmt|;
comment|// 5 minutes in millis
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_DELAY_KEY
init|=
literal|"hbase.regionserver.quotas.policy.refresher.chore.delay"
decl_stmt|;
specifier|static
specifier|final
name|long
name|POLICY_REFRESHER_CHORE_DELAY_DEFAULT
init|=
literal|1000L
operator|*
literal|60L
decl_stmt|;
comment|// 1 minute
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_TIMEUNIT_KEY
init|=
literal|"hbase.regionserver.quotas.policy.refresher.chore.timeunit"
decl_stmt|;
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_TIMEUNIT_DEFAULT
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_REPORT_PERCENT_KEY
init|=
literal|"hbase.regionserver.quotas.policy.refresher.report.percent"
decl_stmt|;
specifier|static
specifier|final
name|double
name|POLICY_REFRESHER_CHORE_REPORT_PERCENT_DEFAULT
init|=
literal|0.95
decl_stmt|;
specifier|private
specifier|final
name|RegionServerSpaceQuotaManager
name|manager
decl_stmt|;
specifier|public
name|SpaceQuotaViolationPolicyRefresherChore
parameter_list|(
name|RegionServerSpaceQuotaManager
name|manager
parameter_list|)
block|{
name|super
argument_list|(
name|SpaceQuotaViolationPolicyRefresherChore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|manager
operator|.
name|getRegionServerServices
argument_list|()
argument_list|,
name|getPeriod
argument_list|(
name|manager
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|getInitialDelay
argument_list|(
name|manager
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|getTimeUnit
argument_list|(
name|manager
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
comment|// Tables with a policy currently enforced
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|activeViolationPolicies
decl_stmt|;
comment|// Tables with policies that should be enforced
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|violationPolicies
decl_stmt|;
try|try
block|{
comment|// Tables with a policy currently enforced
name|activeViolationPolicies
operator|=
name|manager
operator|.
name|getActiveViolationPolicyEnforcements
argument_list|()
expr_stmt|;
comment|// Tables with policies that should be enforced
name|violationPolicies
operator|=
name|manager
operator|.
name|getViolationPoliciesToEnforce
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to fetch enforced quota violation policies, will retry."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Ensure each policy which should be enacted is enacted.
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|entry
range|:
name|violationPolicies
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|TableName
name|tableName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|SpaceViolationPolicy
name|policyToEnforce
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|SpaceViolationPolicy
name|currentPolicy
init|=
name|activeViolationPolicies
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPolicy
operator|!=
name|policyToEnforce
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Enabling "
operator|+
name|policyToEnforce
operator|+
literal|" on "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|enforceViolationPolicy
argument_list|(
name|tableName
argument_list|,
name|policyToEnforce
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove policies which should no longer be enforced
name|Iterator
argument_list|<
name|TableName
argument_list|>
name|iter
init|=
name|activeViolationPolicies
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|TableName
name|localTableWithPolicy
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|violationPolicies
operator|.
name|containsKey
argument_list|(
name|localTableWithPolicy
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing quota violation policy on "
operator|+
name|localTableWithPolicy
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|disableViolationPolicyEnforcement
argument_list|(
name|localTableWithPolicy
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Extracts the period for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore period or the default value.    */
specifier|static
name|int
name|getPeriod
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|POLICY_REFRESHER_CHORE_PERIOD_KEY
argument_list|,
name|POLICY_REFRESHER_CHORE_PERIOD_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the initial delay for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore initial delay or the default value.    */
specifier|static
name|long
name|getInitialDelay
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|POLICY_REFRESHER_CHORE_DELAY_KEY
argument_list|,
name|POLICY_REFRESHER_CHORE_DELAY_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the time unit for the chore period and initial delay from the configuration. The    * configuration value for {@link #POLICY_REFRESHER_CHORE_TIMEUNIT_KEY} must correspond to    * a {@link TimeUnit} value.    *    * @param conf The configuration object.    * @return The configured time unit for the chore period and initial delay or the default value.    */
specifier|static
name|TimeUnit
name|getTimeUnit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|POLICY_REFRESHER_CHORE_TIMEUNIT_KEY
argument_list|,
name|POLICY_REFRESHER_CHORE_TIMEUNIT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Extracts the percent of Regions for a table to have been reported to enable quota violation    * state change.    *    * @param conf The configuration object.    * @return The percent of regions reported to use.    */
specifier|static
name|Double
name|getRegionReportPercent
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getDouble
argument_list|(
name|POLICY_REFRESHER_CHORE_REPORT_PERCENT_KEY
argument_list|,
name|POLICY_REFRESHER_CHORE_REPORT_PERCENT_DEFAULT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

