begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionMovedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteBufferListOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|CallCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|CellBlockMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RequestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|ResponseHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceInfo
import|;
end_import

begin_comment
comment|/**  * Datastructure that holds all necessary to a method invocation and then afterward, carries  * the result.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|abstract
class|class
name|ServerCall
parameter_list|<
name|T
extends|extends
name|ServerRpcConnection
parameter_list|>
implements|implements
name|RpcCall
block|{
specifier|protected
specifier|final
name|int
name|id
decl_stmt|;
comment|// the client's call id
specifier|protected
specifier|final
name|BlockingService
name|service
decl_stmt|;
specifier|protected
specifier|final
name|MethodDescriptor
name|md
decl_stmt|;
specifier|protected
specifier|final
name|RequestHeader
name|header
decl_stmt|;
specifier|protected
name|Message
name|param
decl_stmt|;
comment|// the parameter passed
comment|// Optional cell data passed outside of protobufs.
specifier|protected
specifier|final
name|CellScanner
name|cellScanner
decl_stmt|;
specifier|protected
specifier|final
name|T
name|connection
decl_stmt|;
comment|// connection to client
specifier|protected
specifier|final
name|long
name|receiveTime
decl_stmt|;
comment|// the time received when response is null
comment|// the time served when response is not null
specifier|protected
specifier|final
name|int
name|timeout
decl_stmt|;
specifier|protected
name|long
name|startTime
decl_stmt|;
specifier|protected
specifier|final
name|long
name|deadline
decl_stmt|;
comment|// the deadline to handle this call, if exceed we can drop it.
specifier|protected
specifier|final
name|ByteBufferPool
name|reservoir
decl_stmt|;
specifier|protected
specifier|final
name|CellBlockBuilder
name|cellBlockBuilder
decl_stmt|;
comment|/**    * Chain of buffers to send as response.    */
specifier|protected
name|BufferChain
name|response
decl_stmt|;
specifier|protected
specifier|final
name|long
name|size
decl_stmt|;
comment|// size of current call
specifier|protected
name|boolean
name|isError
decl_stmt|;
specifier|protected
specifier|final
name|TraceInfo
name|tinfo
decl_stmt|;
specifier|protected
name|ByteBufferListOutputStream
name|cellBlockStream
init|=
literal|null
decl_stmt|;
specifier|protected
name|CallCleanup
name|reqCleanup
init|=
literal|null
decl_stmt|;
specifier|protected
name|User
name|user
decl_stmt|;
specifier|protected
specifier|final
name|InetAddress
name|remoteAddress
decl_stmt|;
specifier|protected
name|RpcCallback
name|rpcCallback
decl_stmt|;
specifier|private
name|long
name|responseCellSize
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|responseBlockSize
init|=
literal|0
decl_stmt|;
comment|// cumulative size of serialized exceptions
specifier|private
name|long
name|exceptionSize
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|retryImmediatelySupported
decl_stmt|;
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NP_NULL_ON_SOME_PATH"
argument_list|,
name|justification
operator|=
literal|"Can't figure why this complaint is happening... see below"
argument_list|)
name|ServerCall
parameter_list|(
name|int
name|id
parameter_list|,
name|BlockingService
name|service
parameter_list|,
name|MethodDescriptor
name|md
parameter_list|,
name|RequestHeader
name|header
parameter_list|,
name|Message
name|param
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|,
name|T
name|connection
parameter_list|,
name|long
name|size
parameter_list|,
name|TraceInfo
name|tinfo
parameter_list|,
name|InetAddress
name|remoteAddress
parameter_list|,
name|long
name|receiveTime
parameter_list|,
name|int
name|timeout
parameter_list|,
name|ByteBufferPool
name|reservoir
parameter_list|,
name|CellBlockBuilder
name|cellBlockBuilder
parameter_list|,
name|CallCleanup
name|reqCleanup
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|md
operator|=
name|md
expr_stmt|;
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
name|this
operator|.
name|param
operator|=
name|param
expr_stmt|;
name|this
operator|.
name|cellScanner
operator|=
name|cellScanner
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|receiveTime
operator|=
name|receiveTime
expr_stmt|;
name|this
operator|.
name|response
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|isError
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|tinfo
operator|=
name|tinfo
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|connection
operator|==
literal|null
condition|?
literal|null
else|:
name|connection
operator|.
name|user
expr_stmt|;
comment|// FindBugs: NP_NULL_ON_SOME_PATH
name|this
operator|.
name|remoteAddress
operator|=
name|remoteAddress
expr_stmt|;
name|this
operator|.
name|retryImmediatelySupported
operator|=
name|connection
operator|==
literal|null
condition|?
literal|false
else|:
name|connection
operator|.
name|retryImmediatelySupported
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|deadline
operator|=
name|this
operator|.
name|timeout
operator|>
literal|0
condition|?
name|this
operator|.
name|receiveTime
operator|+
name|this
operator|.
name|timeout
else|:
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|this
operator|.
name|reservoir
operator|=
name|reservoir
expr_stmt|;
name|this
operator|.
name|cellBlockBuilder
operator|=
name|cellBlockBuilder
expr_stmt|;
name|this
operator|.
name|reqCleanup
operator|=
name|reqCleanup
expr_stmt|;
block|}
comment|/**    * Call is done. Execution happened and we returned results to client. It is    * now safe to cleanup.    */
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"IS2_INCONSISTENT_SYNC"
argument_list|,
name|justification
operator|=
literal|"Presume the lock on processing request held by caller is protection enough"
argument_list|)
name|void
name|done
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|cellBlockStream
operator|!=
literal|null
condition|)
block|{
comment|// This will return back the BBs which we got from pool.
name|this
operator|.
name|cellBlockStream
operator|.
name|releaseResources
argument_list|()
expr_stmt|;
name|this
operator|.
name|cellBlockStream
operator|=
literal|null
expr_stmt|;
block|}
comment|// If the call was run successfuly, we might have already returned the BB
comment|// back to pool. No worries..Then inputCellBlock will be null
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|reqCleanup
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|reqCleanup
operator|.
name|run
argument_list|()
expr_stmt|;
name|this
operator|.
name|reqCleanup
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toShortString
argument_list|()
operator|+
literal|" param: "
operator|+
operator|(
name|this
operator|.
name|param
operator|!=
literal|null
condition|?
name|ProtobufUtil
operator|.
name|getShortTextFormat
argument_list|(
name|this
operator|.
name|param
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|" connection: "
operator|+
name|connection
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RequestHeader
name|getHeader
parameter_list|()
block|{
return|return
name|this
operator|.
name|header
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|this
operator|.
name|header
operator|.
name|getPriority
argument_list|()
return|;
block|}
comment|/*    * Short string representation without param info because param itself could be huge depends on    * the payload of a command    */
annotation|@
name|Override
specifier|public
name|String
name|toShortString
parameter_list|()
block|{
name|String
name|serviceName
init|=
name|this
operator|.
name|connection
operator|.
name|service
operator|!=
literal|null
condition|?
name|this
operator|.
name|connection
operator|.
name|service
operator|.
name|getDescriptorForType
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"null"
decl_stmt|;
return|return
literal|"callId: "
operator|+
name|this
operator|.
name|id
operator|+
literal|" service: "
operator|+
name|serviceName
operator|+
literal|" methodName: "
operator|+
operator|(
operator|(
name|this
operator|.
name|md
operator|!=
literal|null
operator|)
condition|?
name|this
operator|.
name|md
operator|.
name|getName
argument_list|()
else|:
literal|"n/a"
operator|)
operator|+
literal|" size: "
operator|+
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|this
operator|.
name|size
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
operator|+
literal|" connection: "
operator|+
name|connection
operator|.
name|toString
argument_list|()
operator|+
literal|" deadline: "
operator|+
name|deadline
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setSaslTokenResponse
parameter_list|(
name|ByteBuffer
name|response
parameter_list|)
block|{
name|ByteBuffer
index|[]
name|responseBufs
init|=
operator|new
name|ByteBuffer
index|[
literal|1
index|]
decl_stmt|;
name|responseBufs
index|[
literal|0
index|]
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|response
operator|=
operator|new
name|BufferChain
argument_list|(
name|responseBufs
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setConnectionHeaderResponse
parameter_list|(
name|ByteBuffer
name|response
parameter_list|)
block|{
name|ByteBuffer
index|[]
name|responseBufs
init|=
operator|new
name|ByteBuffer
index|[
literal|1
index|]
decl_stmt|;
name|responseBufs
index|[
literal|0
index|]
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|response
operator|=
operator|new
name|BufferChain
argument_list|(
name|responseBufs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setResponse
parameter_list|(
name|Message
name|m
parameter_list|,
specifier|final
name|CellScanner
name|cells
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|String
name|errorMsg
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|isError
condition|)
return|return;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|this
operator|.
name|isError
operator|=
literal|true
expr_stmt|;
name|BufferChain
name|bc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ResponseHeader
operator|.
name|Builder
name|headerBuilder
init|=
name|ResponseHeader
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// Call id.
name|headerBuilder
operator|.
name|setCallId
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|setExceptionResponse
argument_list|(
name|t
argument_list|,
name|errorMsg
argument_list|,
name|headerBuilder
argument_list|)
expr_stmt|;
block|}
comment|// Pass reservoir to buildCellBlock. Keep reference to returne so can add it back to the
comment|// reservoir when finished. This is hacky and the hack is not contained but benefits are
comment|// high when we can avoid a big buffer allocation on each rpc.
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|cellBlock
init|=
literal|null
decl_stmt|;
name|int
name|cellBlockSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|reservoir
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cellBlockStream
operator|=
name|this
operator|.
name|cellBlockBuilder
operator|.
name|buildCellBlockStream
argument_list|(
name|this
operator|.
name|connection
operator|.
name|codec
argument_list|,
name|this
operator|.
name|connection
operator|.
name|compressionCodec
argument_list|,
name|cells
argument_list|,
name|this
operator|.
name|reservoir
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cellBlockStream
operator|!=
literal|null
condition|)
block|{
name|cellBlock
operator|=
name|this
operator|.
name|cellBlockStream
operator|.
name|getByteBuffers
argument_list|()
expr_stmt|;
name|cellBlockSize
operator|=
name|this
operator|.
name|cellBlockStream
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|ByteBuffer
name|b
init|=
name|this
operator|.
name|cellBlockBuilder
operator|.
name|buildCellBlock
argument_list|(
name|this
operator|.
name|connection
operator|.
name|codec
argument_list|,
name|this
operator|.
name|connection
operator|.
name|compressionCodec
argument_list|,
name|cells
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|cellBlockSize
operator|=
name|b
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|cellBlock
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cellBlock
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cellBlockSize
operator|>
literal|0
condition|)
block|{
name|CellBlockMeta
operator|.
name|Builder
name|cellBlockBuilder
init|=
name|CellBlockMeta
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// Presumes the cellBlock bytebuffer has been flipped so limit has total size in it.
name|cellBlockBuilder
operator|.
name|setLength
argument_list|(
name|cellBlockSize
argument_list|)
expr_stmt|;
name|headerBuilder
operator|.
name|setCellBlockMeta
argument_list|(
name|cellBlockBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Message
name|header
init|=
name|headerBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ByteBuffer
name|headerBuf
init|=
name|createHeaderAndMessageBytes
argument_list|(
name|m
argument_list|,
name|header
argument_list|,
name|cellBlockSize
argument_list|,
name|cellBlock
argument_list|)
decl_stmt|;
name|ByteBuffer
index|[]
name|responseBufs
init|=
literal|null
decl_stmt|;
name|int
name|cellBlockBufferSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cellBlock
operator|!=
literal|null
condition|)
block|{
name|cellBlockBufferSize
operator|=
name|cellBlock
operator|.
name|size
argument_list|()
expr_stmt|;
name|responseBufs
operator|=
operator|new
name|ByteBuffer
index|[
literal|1
operator|+
name|cellBlockBufferSize
index|]
expr_stmt|;
block|}
else|else
block|{
name|responseBufs
operator|=
operator|new
name|ByteBuffer
index|[
literal|1
index|]
expr_stmt|;
block|}
name|responseBufs
index|[
literal|0
index|]
operator|=
name|headerBuf
expr_stmt|;
if|if
condition|(
name|cellBlock
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellBlockBufferSize
condition|;
name|i
operator|++
control|)
block|{
name|responseBufs
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|cellBlock
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|bc
operator|=
operator|new
name|BufferChain
argument_list|(
name|responseBufs
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|useWrap
condition|)
block|{
name|bc
operator|=
name|wrapWithSasl
argument_list|(
name|bc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|RpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while creating response "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|response
operator|=
name|bc
expr_stmt|;
comment|// Once a response message is created and set to this.response, this Call can be treated as
comment|// done. The Responder thread will do the n/w write of this message back to client.
if|if
condition|(
name|this
operator|.
name|rpcCallback
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|rpcCallback
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Don't allow any exception here to kill this handler thread.
name|RpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while running the Rpc Callback."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|setExceptionResponse
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|String
name|errorMsg
parameter_list|,
name|ResponseHeader
operator|.
name|Builder
name|headerBuilder
parameter_list|)
block|{
name|ExceptionResponse
operator|.
name|Builder
name|exceptionBuilder
init|=
name|ExceptionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|exceptionBuilder
operator|.
name|setExceptionClassName
argument_list|(
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|exceptionBuilder
operator|.
name|setStackTrace
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
name|exceptionBuilder
operator|.
name|setDoNotRetry
argument_list|(
name|t
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|RegionMovedException
condition|)
block|{
comment|// Special casing for this exception.  This is only one carrying a payload.
comment|// Do this instead of build a generic system for allowing exceptions carry
comment|// any kind of payload.
name|RegionMovedException
name|rme
init|=
operator|(
name|RegionMovedException
operator|)
name|t
decl_stmt|;
name|exceptionBuilder
operator|.
name|setHostname
argument_list|(
name|rme
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|exceptionBuilder
operator|.
name|setPort
argument_list|(
name|rme
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Set the exception as the result of the method invocation.
name|headerBuilder
operator|.
name|setException
argument_list|(
name|exceptionBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ByteBuffer
name|createHeaderAndMessageBytes
parameter_list|(
name|Message
name|result
parameter_list|,
name|Message
name|header
parameter_list|,
name|int
name|cellBlockSize
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|cellBlock
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Organize the response as a set of bytebuffers rather than collect it all together inside
comment|// one big byte array; save on allocations.
comment|// for writing the header, we check if there is available space in the buffers
comment|// created for the cellblock itself. If there is space for the header, we reuse
comment|// the last buffer in the cellblock. This applies to the cellblock created from the
comment|// pool or even the onheap cellblock buffer in case there is no pool enabled.
comment|// Possible reuse would avoid creating a temporary array for storing the header every time.
name|ByteBuffer
name|possiblePBBuf
init|=
operator|(
name|cellBlockSize
operator|>
literal|0
operator|)
condition|?
name|cellBlock
operator|.
name|get
argument_list|(
name|cellBlock
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
else|:
literal|null
decl_stmt|;
name|int
name|headerSerializedSize
init|=
literal|0
decl_stmt|,
name|resultSerializedSize
init|=
literal|0
decl_stmt|,
name|headerVintSize
init|=
literal|0
decl_stmt|,
name|resultVintSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|headerSerializedSize
operator|=
name|header
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|headerVintSize
operator|=
name|CodedOutputStream
operator|.
name|computeUInt32SizeNoTag
argument_list|(
name|headerSerializedSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|resultSerializedSize
operator|=
name|result
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|resultVintSize
operator|=
name|CodedOutputStream
operator|.
name|computeUInt32SizeNoTag
argument_list|(
name|resultSerializedSize
argument_list|)
expr_stmt|;
block|}
comment|// calculate the total size
name|int
name|totalSize
init|=
name|headerSerializedSize
operator|+
name|headerVintSize
operator|+
operator|(
name|resultSerializedSize
operator|+
name|resultVintSize
operator|)
operator|+
name|cellBlockSize
decl_stmt|;
name|int
name|totalPBSize
init|=
name|headerSerializedSize
operator|+
name|headerVintSize
operator|+
name|resultSerializedSize
operator|+
name|resultVintSize
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
decl_stmt|;
comment|// Only if the last buffer has enough space for header use it. Else allocate
comment|// a new buffer. Assume they are all flipped
if|if
condition|(
name|possiblePBBuf
operator|!=
literal|null
operator|&&
name|possiblePBBuf
operator|.
name|limit
argument_list|()
operator|+
name|totalPBSize
operator|<=
name|possiblePBBuf
operator|.
name|capacity
argument_list|()
condition|)
block|{
comment|// duplicate the buffer. This is where the header is going to be written
name|ByteBuffer
name|pbBuf
init|=
name|possiblePBBuf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
comment|// get the current limit
name|int
name|limit
init|=
name|pbBuf
operator|.
name|limit
argument_list|()
decl_stmt|;
comment|// Position such that we write the header to the end of the buffer
name|pbBuf
operator|.
name|position
argument_list|(
name|limit
argument_list|)
expr_stmt|;
comment|// limit to the header size
name|pbBuf
operator|.
name|limit
argument_list|(
name|totalPBSize
operator|+
name|limit
argument_list|)
expr_stmt|;
comment|// mark the current position
name|pbBuf
operator|.
name|mark
argument_list|()
expr_stmt|;
name|writeToCOS
argument_list|(
name|result
argument_list|,
name|header
argument_list|,
name|totalSize
argument_list|,
name|pbBuf
argument_list|)
expr_stmt|;
comment|// reset the buffer back to old position
name|pbBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|pbBuf
return|;
block|}
else|else
block|{
return|return
name|createHeaderAndMessageBytes
argument_list|(
name|result
argument_list|,
name|header
argument_list|,
name|totalSize
argument_list|,
name|totalPBSize
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|writeToCOS
parameter_list|(
name|Message
name|result
parameter_list|,
name|Message
name|header
parameter_list|,
name|int
name|totalSize
parameter_list|,
name|ByteBuffer
name|pbBuf
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|pbBuf
argument_list|,
name|totalSize
argument_list|)
expr_stmt|;
comment|// create COS that works on BB
name|CodedOutputStream
name|cos
init|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|pbBuf
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|cos
operator|.
name|writeMessageNoTag
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|cos
operator|.
name|writeMessageNoTag
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|cos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|cos
operator|.
name|checkNoSpaceLeft
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ByteBuffer
name|createHeaderAndMessageBytes
parameter_list|(
name|Message
name|result
parameter_list|,
name|Message
name|header
parameter_list|,
name|int
name|totalSize
parameter_list|,
name|int
name|totalPBSize
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|pbBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|totalPBSize
argument_list|)
decl_stmt|;
name|writeToCOS
argument_list|(
name|result
argument_list|,
name|header
argument_list|,
name|totalSize
argument_list|,
name|pbBuf
argument_list|)
expr_stmt|;
name|pbBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|pbBuf
return|;
block|}
specifier|protected
name|BufferChain
name|wrapWithSasl
parameter_list|(
name|BufferChain
name|bc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|connection
operator|.
name|useSasl
condition|)
return|return
name|bc
return|;
comment|// Looks like no way around this; saslserver wants a byte array.  I have to make it one.
comment|// THIS IS A BIG UGLY COPY.
name|byte
index|[]
name|responseBytes
init|=
name|bc
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|token
decl_stmt|;
comment|// synchronization may be needed since there can be multiple Handler
comment|// threads using saslServer or Crypto AES to wrap responses.
if|if
condition|(
name|connection
operator|.
name|useCryptoAesWrap
condition|)
block|{
comment|// wrap with Crypto AES
synchronized|synchronized
init|(
name|connection
operator|.
name|cryptoAES
init|)
block|{
name|token
operator|=
name|connection
operator|.
name|cryptoAES
operator|.
name|wrap
argument_list|(
name|responseBytes
argument_list|,
literal|0
argument_list|,
name|responseBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|connection
operator|.
name|saslServer
init|)
block|{
name|token
operator|=
name|connection
operator|.
name|saslServer
operator|.
name|wrap
argument_list|(
name|responseBytes
argument_list|,
literal|0
argument_list|,
name|responseBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|RpcServer
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|RpcServer
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding saslServer wrapped token of size "
operator|+
name|token
operator|.
name|length
operator|+
literal|" as call response."
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
index|[]
name|responseBufs
init|=
operator|new
name|ByteBuffer
index|[
literal|2
index|]
decl_stmt|;
name|responseBufs
index|[
literal|0
index|]
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|token
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|responseBufs
index|[
literal|1
index|]
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
operator|new
name|BufferChain
argument_list|(
name|responseBufs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|disconnectSince
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|connection
operator|.
name|isConnectionOpen
argument_list|()
condition|)
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|receiveTime
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1L
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isClientCellBlockSupported
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
operator|!=
literal|null
operator|&&
name|this
operator|.
name|connection
operator|.
name|codec
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getResponseCellSize
parameter_list|()
block|{
return|return
name|responseCellSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incrementResponseCellSize
parameter_list|(
name|long
name|cellSize
parameter_list|)
block|{
name|responseCellSize
operator|+=
name|cellSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getResponseBlockSize
parameter_list|()
block|{
return|return
name|responseBlockSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incrementResponseBlockSize
parameter_list|(
name|long
name|blockSize
parameter_list|)
block|{
name|responseBlockSize
operator|+=
name|blockSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getResponseExceptionSize
parameter_list|()
block|{
return|return
name|exceptionSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incrementResponseExceptionSize
parameter_list|(
name|long
name|exSize
parameter_list|)
block|{
name|exceptionSize
operator|+=
name|exSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDeadline
parameter_list|()
block|{
return|return
name|deadline
return|;
block|}
annotation|@
name|Override
specifier|public
name|User
name|getRequestUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRequestUserName
parameter_list|()
block|{
name|User
name|user
init|=
name|getRequestUser
argument_list|()
decl_stmt|;
return|return
name|user
operator|==
literal|null
condition|?
literal|null
else|:
name|user
operator|.
name|getShortName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InetAddress
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|remoteAddress
return|;
block|}
annotation|@
name|Override
specifier|public
name|VersionInfo
name|getClientVersionInfo
parameter_list|()
block|{
return|return
name|connection
operator|.
name|getVersionInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setCallBack
parameter_list|(
name|RpcCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|rpcCallback
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRetryImmediatelySupported
parameter_list|()
block|{
return|return
name|retryImmediatelySupported
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlockingService
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
annotation|@
name|Override
specifier|public
name|MethodDescriptor
name|getMethod
parameter_list|()
block|{
return|return
name|md
return|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|getParam
parameter_list|()
block|{
return|return
name|param
return|;
block|}
annotation|@
name|Override
specifier|public
name|CellScanner
name|getCellScanner
parameter_list|()
block|{
return|return
name|cellScanner
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReceiveTime
parameter_list|()
block|{
return|return
name|receiveTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStartTime
parameter_list|(
name|long
name|t
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|t
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRemotePort
parameter_list|()
block|{
return|return
name|connection
operator|.
name|getRemotePort
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TraceInfo
name|getTraceInfo
parameter_list|()
block|{
return|return
name|tinfo
return|;
block|}
block|}
end_class

end_unit

