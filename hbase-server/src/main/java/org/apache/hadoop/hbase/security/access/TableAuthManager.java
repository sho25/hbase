begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|computeIfAbsent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|Superusers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Performs authorization checks for a given user's assigned permissions  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TableAuthManager
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
class|class
name|PermissionCache
parameter_list|<
name|T
extends|extends
name|Permission
parameter_list|>
block|{
comment|/** Cache of user permissions */
specifier|private
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|userCache
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/** Cache of group permissions */
specifier|private
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|groupCache
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|userCache
operator|.
name|get
argument_list|(
name|user
argument_list|)
return|;
block|}
specifier|public
name|void
name|putUser
parameter_list|(
name|String
name|user
parameter_list|,
name|T
name|perm
parameter_list|)
block|{
name|userCache
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|replaceUser
parameter_list|(
name|String
name|user
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|perms
parameter_list|)
block|{
return|return
name|userCache
operator|.
name|replaceValues
argument_list|(
name|user
argument_list|,
name|perms
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
return|return
name|groupCache
operator|.
name|get
argument_list|(
name|group
argument_list|)
return|;
block|}
specifier|public
name|void
name|putGroup
parameter_list|(
name|String
name|group
parameter_list|,
name|T
name|perm
parameter_list|)
block|{
name|groupCache
operator|.
name|put
argument_list|(
name|group
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|replaceGroup
parameter_list|(
name|String
name|group
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|perms
parameter_list|)
block|{
return|return
name|groupCache
operator|.
name|replaceValues
argument_list|(
name|group
argument_list|,
name|perms
argument_list|)
return|;
block|}
comment|/**      * Returns a combined map of user and group permissions, with group names      * distinguished according to {@link AuthUtil#isGroupPrincipal(String)}.      */
specifier|public
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|getAllPermissions
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|tmp
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|tmp
operator|.
name|putAll
argument_list|(
name|userCache
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groupCache
operator|.
name|keySet
argument_list|()
control|)
block|{
name|tmp
operator|.
name|putAll
argument_list|(
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|group
argument_list|)
argument_list|,
name|groupCache
operator|.
name|get
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TableAuthManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Cache of global permissions */
specifier|private
specifier|volatile
name|PermissionCache
argument_list|<
name|Permission
argument_list|>
name|globalCache
decl_stmt|;
specifier|private
name|ConcurrentSkipListMap
argument_list|<
name|TableName
argument_list|,
name|PermissionCache
argument_list|<
name|TablePermission
argument_list|>
argument_list|>
name|tableCache
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|PermissionCache
argument_list|<
name|TablePermission
argument_list|>
argument_list|>
name|nsCache
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|ZKPermissionWatcher
name|zkperms
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|mtime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|private
name|TableAuthManager
parameter_list|(
name|ZKWatcher
name|watcher
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
comment|// initialize global permissions based on configuration
name|globalCache
operator|=
name|initGlobal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkperms
operator|=
operator|new
name|ZKPermissionWatcher
argument_list|(
name|watcher
argument_list|,
name|this
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|zkperms
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ZooKeeper initialization failed"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|zkperms
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns a new {@code PermissionCache} initialized with permission assignments    * from the {@code hbase.superuser} configuration key.    */
specifier|private
name|PermissionCache
argument_list|<
name|Permission
argument_list|>
name|initGlobal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UserProvider
name|userProvider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|userProvider
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to obtain the current user, "
operator|+
literal|"authorization checks for internal operations will not work correctly!"
argument_list|)
throw|;
block|}
name|PermissionCache
argument_list|<
name|Permission
argument_list|>
name|newCache
init|=
operator|new
name|PermissionCache
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|currentUser
init|=
name|user
operator|.
name|getShortName
argument_list|()
decl_stmt|;
comment|// the system user is always included
name|List
argument_list|<
name|String
argument_list|>
name|superusers
init|=
name|Lists
operator|.
name|asList
argument_list|(
name|currentUser
argument_list|,
name|conf
operator|.
name|getStrings
argument_list|(
name|Superusers
operator|.
name|SUPERUSER_CONF_KEY
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|superusers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|superusers
control|)
block|{
if|if
condition|(
name|AuthUtil
operator|.
name|isGroupPrincipal
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|newCache
operator|.
name|putGroup
argument_list|(
name|AuthUtil
operator|.
name|getGroupName
argument_list|(
name|name
argument_list|)
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newCache
operator|.
name|putUser
argument_list|(
name|name
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|newCache
return|;
block|}
specifier|public
name|ZKPermissionWatcher
name|getZKPermissionWatcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|zkperms
return|;
block|}
specifier|public
name|void
name|refreshTableCacheFromWritable
parameter_list|(
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
decl_stmt|;
try|try
block|{
name|perms
operator|=
name|AccessControlLists
operator|.
name|readPermissions
argument_list|(
name|data
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_GLOBAL_NAME
argument_list|)
condition|)
block|{
name|updateGlobalCache
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateTableCache
argument_list|(
name|table
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping permission cache refresh because writable data is empty"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshNamespaceCacheFromWritable
parameter_list|(
name|String
name|namespace
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
decl_stmt|;
try|try
block|{
name|perms
operator|=
name|AccessControlLists
operator|.
name|readPermissions
argument_list|(
name|data
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
name|updateNsCache
argument_list|(
name|namespace
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping permission cache refresh because writable data is empty"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Updates the internal global permissions cache    *    * @param userPerms    */
specifier|private
name|void
name|updateGlobalCache
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|userPerms
parameter_list|)
block|{
name|PermissionCache
argument_list|<
name|Permission
argument_list|>
name|newCache
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newCache
operator|=
name|initGlobal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|entry
range|:
name|userPerms
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|AuthUtil
operator|.
name|isGroupPrincipal
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|newCache
operator|.
name|putGroup
argument_list|(
name|AuthUtil
operator|.
name|getGroupName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Permission
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newCache
operator|.
name|putUser
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|globalCache
operator|=
name|newCache
expr_stmt|;
name|mtime
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Never happens
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occurred while updating the global cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Updates the internal permissions cache for a single table, splitting    * the permissions listed into separate caches for users and groups to optimize    * group lookups.    *    * @param table    * @param tablePerms    */
specifier|private
name|void
name|updateTableCache
parameter_list|(
name|TableName
name|table
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|tablePerms
parameter_list|)
block|{
name|PermissionCache
argument_list|<
name|TablePermission
argument_list|>
name|newTablePerms
init|=
operator|new
name|PermissionCache
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|entry
range|:
name|tablePerms
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|AuthUtil
operator|.
name|isGroupPrincipal
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|newTablePerms
operator|.
name|putGroup
argument_list|(
name|AuthUtil
operator|.
name|getGroupName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newTablePerms
operator|.
name|putUser
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|tableCache
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|newTablePerms
argument_list|)
expr_stmt|;
name|mtime
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Updates the internal permissions cache for a single table, splitting    * the permissions listed into separate caches for users and groups to optimize    * group lookups.    *    * @param namespace    * @param tablePerms    */
specifier|private
name|void
name|updateNsCache
parameter_list|(
name|String
name|namespace
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|tablePerms
parameter_list|)
block|{
name|PermissionCache
argument_list|<
name|TablePermission
argument_list|>
name|newTablePerms
init|=
operator|new
name|PermissionCache
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|entry
range|:
name|tablePerms
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|AuthUtil
operator|.
name|isGroupPrincipal
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|newTablePerms
operator|.
name|putGroup
argument_list|(
name|AuthUtil
operator|.
name|getGroupName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newTablePerms
operator|.
name|putUser
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|nsCache
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|newTablePerms
argument_list|)
expr_stmt|;
name|mtime
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|PermissionCache
argument_list|<
name|TablePermission
argument_list|>
name|getTablePermissions
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
return|return
name|computeIfAbsent
argument_list|(
name|tableCache
argument_list|,
name|table
argument_list|,
name|PermissionCache
operator|::
operator|new
argument_list|)
return|;
block|}
specifier|private
name|PermissionCache
argument_list|<
name|TablePermission
argument_list|>
name|getNamespacePermissions
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|computeIfAbsent
argument_list|(
name|nsCache
argument_list|,
name|namespace
argument_list|,
name|PermissionCache
operator|::
operator|new
argument_list|)
return|;
block|}
comment|/**    * Authorizes a global permission    * @param perms    * @param action    * @return true if authorized, false otherwise    */
specifier|private
name|boolean
name|authorize
parameter_list|(
name|List
argument_list|<
name|Permission
argument_list|>
name|perms
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
name|p
range|:
name|perms
control|)
block|{
if|if
condition|(
name|p
operator|.
name|implies
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No permissions found for "
operator|+
name|action
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Authorize a global permission based on ACLs for the given user and the    * user's groups.    * @param user    * @param action    * @return true if known and authorized, false otherwise    */
specifier|public
name|boolean
name|authorize
parameter_list|(
name|User
name|user
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|authorize
argument_list|(
name|globalCache
operator|.
name|getUser
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
index|[]
name|groups
init|=
name|user
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|authorize
argument_list|(
name|globalCache
operator|.
name|getGroup
argument_list|(
name|group
argument_list|)
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|authorize
parameter_list|(
name|List
argument_list|<
name|TablePermission
argument_list|>
name|perms
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TablePermission
name|p
range|:
name|perms
control|)
block|{
if|if
condition|(
name|p
operator|.
name|implies
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No permissions found for table="
operator|+
name|table
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|hasAccess
parameter_list|(
name|List
argument_list|<
name|TablePermission
argument_list|>
name|perms
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TablePermission
name|p
range|:
name|perms
control|)
block|{
if|if
condition|(
name|p
operator|.
name|implies
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No permissions found for table="
operator|+
name|table
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Authorize a user for a given KV. This is called from AccessControlFilter.    */
specifier|public
name|boolean
name|authorize
parameter_list|(
name|User
name|user
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|AccessControlLists
operator|.
name|getCellPermissionsForUser
argument_list|(
name|user
argument_list|,
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Perms for user "
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|" in cell "
operator|+
name|cell
operator|+
literal|": "
operator|+
operator|(
name|perms
operator|!=
literal|null
condition|?
name|perms
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
name|p
range|:
name|perms
control|)
block|{
if|if
condition|(
name|p
operator|.
name|implies
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We failed to parse the KV tag
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed parse of ACL tag in cell "
operator|+
name|cell
argument_list|)
expr_stmt|;
comment|// Fall through to check with the table and CF perms we were able
comment|// to collect regardless
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|authorize
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
comment|// Global authorizations supercede namespace level
if|if
condition|(
name|authorize
argument_list|(
name|user
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check namespace permissions
name|PermissionCache
argument_list|<
name|TablePermission
argument_list|>
name|tablePerms
init|=
name|nsCache
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePerms
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|TablePermission
argument_list|>
name|userPerms
init|=
name|tablePerms
operator|.
name|getUser
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorize
argument_list|(
name|userPerms
argument_list|,
name|namespace
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
index|[]
name|groupNames
init|=
name|user
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groupNames
control|)
block|{
name|List
argument_list|<
name|TablePermission
argument_list|>
name|groupPerms
init|=
name|tablePerms
operator|.
name|getGroup
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorize
argument_list|(
name|groupPerms
argument_list|,
name|namespace
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|authorize
parameter_list|(
name|List
argument_list|<
name|TablePermission
argument_list|>
name|perms
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TablePermission
name|p
range|:
name|perms
control|)
block|{
if|if
condition|(
name|p
operator|.
name|implies
argument_list|(
name|namespace
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No permissions for authorize() check, table="
operator|+
name|namespace
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Checks authorization to a given table and column family for a user, based on the    * stored user permissions.    *    * @param user    * @param table    * @param family    * @param action    * @return true if known and authorized, false otherwise    */
specifier|public
name|boolean
name|authorizeUser
parameter_list|(
name|User
name|user
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
return|return
name|authorizeUser
argument_list|(
name|user
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
literal|null
argument_list|,
name|action
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|authorizeUser
parameter_list|(
name|User
name|user
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
name|table
operator|=
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
expr_stmt|;
comment|// Global and namespace authorizations supercede table level
if|if
condition|(
name|authorize
argument_list|(
name|user
argument_list|,
name|table
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check table permissions
return|return
name|authorize
argument_list|(
name|getTablePermissions
argument_list|(
name|table
argument_list|)
operator|.
name|getUser
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Checks if the user has access to the full table or at least a family/qualifier    * for the specified action.    *    * @param user    * @param table    * @param action    * @return true if the user has access to the table, false otherwise    */
specifier|public
name|boolean
name|userHasAccess
parameter_list|(
name|User
name|user
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
name|table
operator|=
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
expr_stmt|;
comment|// Global and namespace authorizations supercede table level
if|if
condition|(
name|authorize
argument_list|(
name|user
argument_list|,
name|table
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check table permissions
return|return
name|hasAccess
argument_list|(
name|getTablePermissions
argument_list|(
name|table
argument_list|)
operator|.
name|getUser
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
name|table
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Checks global authorization for a given action for a group, based on the stored    * permissions.    */
specifier|public
name|boolean
name|authorizeGroup
parameter_list|(
name|String
name|groupName
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|globalCache
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"authorizing "
operator|+
operator|(
name|perms
operator|!=
literal|null
operator|&&
operator|!
name|perms
operator|.
name|isEmpty
argument_list|()
condition|?
name|perms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|" for "
operator|+
name|action
argument_list|)
expr_stmt|;
block|}
return|return
name|authorize
argument_list|(
name|perms
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Checks authorization to a given table, column family and column for a group, based    * on the stored permissions.    * @param groupName    * @param table    * @param family    * @param qualifier    * @param action    * @return true if known and authorized, false otherwise    */
specifier|public
name|boolean
name|authorizeGroup
parameter_list|(
name|String
name|groupName
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
comment|// Global authorization supercedes table level
if|if
condition|(
name|authorizeGroup
argument_list|(
name|groupName
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|table
operator|==
literal|null
condition|)
name|table
operator|=
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
expr_stmt|;
comment|// Namespace authorization supercedes table level
name|String
name|namespace
init|=
name|table
operator|.
name|getNamespaceAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|authorize
argument_list|(
name|getNamespacePermissions
argument_list|(
name|namespace
argument_list|)
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
argument_list|,
name|namespace
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check table level
name|List
argument_list|<
name|TablePermission
argument_list|>
name|tblPerms
init|=
name|getTablePermissions
argument_list|(
name|table
argument_list|)
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"authorizing "
operator|+
operator|(
name|tblPerms
operator|!=
literal|null
operator|&&
operator|!
name|tblPerms
operator|.
name|isEmpty
argument_list|()
condition|?
name|tblPerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|" for "
operator|+
name|groupName
operator|+
literal|" on "
operator|+
name|table
operator|+
literal|"."
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"."
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|" with "
operator|+
name|action
argument_list|)
expr_stmt|;
block|}
return|return
name|authorize
argument_list|(
name|tblPerms
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Checks if the user has access to the full table or at least a family/qualifier    * for the specified action.    * @param groupName    * @param table    * @param action    * @return true if the group has access to the table, false otherwise    */
specifier|public
name|boolean
name|groupHasAccess
parameter_list|(
name|String
name|groupName
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
comment|// Global authorization supercedes table level
if|if
condition|(
name|authorizeGroup
argument_list|(
name|groupName
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|table
operator|==
literal|null
condition|)
name|table
operator|=
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
expr_stmt|;
comment|// Namespace authorization supercedes table level
if|if
condition|(
name|hasAccess
argument_list|(
name|getNamespacePermissions
argument_list|(
name|table
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
argument_list|,
name|table
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check table level
return|return
name|hasAccess
argument_list|(
name|getTablePermissions
argument_list|(
name|table
argument_list|)
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
argument_list|,
name|table
argument_list|,
name|action
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|authorize
parameter_list|(
name|User
name|user
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|authorizeUser
argument_list|(
name|user
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
index|[]
name|groups
init|=
name|user
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|authorizeGroup
argument_list|(
name|group
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasAccess
parameter_list|(
name|User
name|user
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|userHasAccess
argument_list|(
name|user
argument_list|,
name|table
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
index|[]
name|groups
init|=
name|user
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|groupHasAccess
argument_list|(
name|group
argument_list|,
name|table
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|authorize
parameter_list|(
name|User
name|user
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
return|return
name|authorize
argument_list|(
name|user
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
literal|null
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Returns true if the given user has a {@link TablePermission} matching up    * to the column family portion of a permission.  Note that this permission    * may be scoped to a given column qualifier and does not guarantee that    * authorize() on the same column family would return true.    */
specifier|public
name|boolean
name|matchPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
name|PermissionCache
argument_list|<
name|TablePermission
argument_list|>
name|tablePerms
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePerms
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|TablePermission
argument_list|>
name|userPerms
init|=
name|tablePerms
operator|.
name|getUser
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userPerms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TablePermission
name|p
range|:
name|userPerms
control|)
block|{
if|if
condition|(
name|p
operator|.
name|matchesFamily
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|String
index|[]
name|groups
init|=
name|user
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
name|List
argument_list|<
name|TablePermission
argument_list|>
name|groupPerms
init|=
name|tablePerms
operator|.
name|getGroup
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupPerms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TablePermission
name|p
range|:
name|groupPerms
control|)
block|{
if|if
condition|(
name|p
operator|.
name|matchesFamily
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|matchPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
name|PermissionCache
argument_list|<
name|TablePermission
argument_list|>
name|tablePerms
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePerms
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|TablePermission
argument_list|>
name|userPerms
init|=
name|tablePerms
operator|.
name|getUser
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userPerms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TablePermission
name|p
range|:
name|userPerms
control|)
block|{
if|if
condition|(
name|p
operator|.
name|matchesFamilyQualifier
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|String
index|[]
name|groups
init|=
name|user
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
name|List
argument_list|<
name|TablePermission
argument_list|>
name|groupPerms
init|=
name|tablePerms
operator|.
name|getGroup
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupPerms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TablePermission
name|p
range|:
name|groupPerms
control|)
block|{
if|if
condition|(
name|p
operator|.
name|matchesFamilyQualifier
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|byte
index|[]
name|ns
parameter_list|)
block|{
name|nsCache
operator|.
name|remove
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeTable
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
name|tableCache
operator|.
name|remove
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getMTime
parameter_list|()
block|{
return|return
name|mtime
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|ZKWatcher
argument_list|,
name|TableAuthManager
argument_list|>
name|managerMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|TableAuthManager
argument_list|,
name|Integer
argument_list|>
name|refCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Returns a TableAuthManager from the cache. If not cached, constructs a new one. Returned    * instance should be released back by calling {@link #release(TableAuthManager)}. */
specifier|public
specifier|synchronized
specifier|static
name|TableAuthManager
name|getOrCreate
parameter_list|(
name|ZKWatcher
name|watcher
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|TableAuthManager
name|instance
init|=
name|managerMap
operator|.
name|get
argument_list|(
name|watcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|TableAuthManager
argument_list|(
name|watcher
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|managerMap
operator|.
name|put
argument_list|(
name|watcher
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
name|int
name|ref
init|=
name|refCount
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|refCount
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|refCount
operator|.
name|put
argument_list|(
name|instance
argument_list|,
name|ref
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|int
name|getTotalRefCount
parameter_list|()
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|count
range|:
name|refCount
operator|.
name|values
argument_list|()
control|)
block|{
name|total
operator|+=
name|count
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**    * Releases the resources for the given TableAuthManager if the reference count is down to 0.    * @param instance TableAuthManager to be released    */
specifier|public
specifier|synchronized
specifier|static
name|void
name|release
parameter_list|(
name|TableAuthManager
name|instance
parameter_list|)
block|{
if|if
condition|(
name|refCount
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|==
literal|null
operator|||
name|refCount
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|<
literal|1
condition|)
block|{
name|String
name|msg
init|=
literal|"Something wrong with the TableAuthManager reference counting: "
operator|+
name|instance
operator|+
literal|" whose count is "
operator|+
name|refCount
operator|.
name|get
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|instance
operator|.
name|close
argument_list|()
expr_stmt|;
name|managerMap
operator|.
name|remove
argument_list|(
name|instance
operator|.
name|getZKPermissionWatcher
argument_list|()
operator|.
name|getWatcher
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|getZKPermissionWatcher
argument_list|()
operator|.
name|getWatcher
argument_list|()
operator|.
name|abort
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ref
init|=
name|refCount
operator|.
name|get
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|refCount
operator|.
name|put
argument_list|(
name|instance
argument_list|,
name|ref
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|-
literal|1
operator|==
literal|0
condition|)
block|{
name|instance
operator|.
name|close
argument_list|()
expr_stmt|;
name|managerMap
operator|.
name|remove
argument_list|(
name|instance
operator|.
name|getZKPermissionWatcher
argument_list|()
operator|.
name|getWatcher
argument_list|()
argument_list|)
expr_stmt|;
name|refCount
operator|.
name|remove
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

