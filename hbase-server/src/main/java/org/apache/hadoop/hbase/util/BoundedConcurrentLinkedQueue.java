begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A ConcurrentLinkedQueue that enforces a maximum queue size.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|BoundedConcurrentLinkedQueue
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ConcurrentLinkedQueue
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|size
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxSize
decl_stmt|;
specifier|public
name|BoundedConcurrentLinkedQueue
parameter_list|()
block|{
name|this
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BoundedConcurrentLinkedQueue
parameter_list|(
name|long
name|maxSize
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|long
name|currentSize
init|=
name|size
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|nextSize
init|=
name|currentSize
operator|+
name|c
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextSize
operator|>
name|maxSize
condition|)
block|{
comment|// already exceeded limit
return|return
literal|false
return|;
block|}
if|if
condition|(
name|size
operator|.
name|compareAndSet
argument_list|(
name|currentSize
argument_list|,
name|nextSize
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|super
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
return|;
comment|// Always true for ConcurrentLinkedQueue
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
comment|// override this method to batch update size.
name|long
name|removed
init|=
literal|0L
decl_stmt|;
while|while
condition|(
name|super
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|removed
operator|++
expr_stmt|;
block|}
name|size
operator|.
name|addAndGet
argument_list|(
operator|-
name|removed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|T
name|e
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|long
name|currentSize
init|=
name|size
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentSize
operator|>=
name|maxSize
condition|)
block|{
comment|// already exceeded limit
return|return
literal|false
return|;
block|}
if|if
condition|(
name|size
operator|.
name|compareAndSet
argument_list|(
name|currentSize
argument_list|,
name|currentSize
operator|+
literal|1
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|super
operator|.
name|offer
argument_list|(
name|e
argument_list|)
return|;
comment|// Always true for ConcurrentLinkedQueue
block|}
annotation|@
name|Override
specifier|public
name|T
name|poll
parameter_list|()
block|{
name|T
name|result
init|=
name|super
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|boolean
name|result
init|=
name|super
operator|.
name|remove
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|size
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
name|long
name|removed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|element
init|;
operator|(
name|element
operator|=
name|super
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|removed
operator|++
expr_stmt|;
block|}
comment|// Limit the number of operations on size by only reporting size change after the drain is
comment|// completed.
name|size
operator|.
name|addAndGet
argument_list|(
operator|-
name|removed
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|remainingCapacity
parameter_list|()
block|{
return|return
name|maxSize
operator|-
name|size
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

