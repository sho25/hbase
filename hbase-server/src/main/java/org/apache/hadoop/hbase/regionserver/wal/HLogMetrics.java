begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_class
specifier|public
class|class
name|HLogMetrics
block|{
specifier|public
specifier|static
class|class
name|Metric
block|{
specifier|public
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|public
name|long
name|max
init|=
literal|0
decl_stmt|;
specifier|public
name|long
name|total
init|=
literal|0
decl_stmt|;
specifier|public
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|synchronized
name|void
name|inc
parameter_list|(
specifier|final
name|long
name|val
parameter_list|)
block|{
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|total
operator|+=
name|val
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
specifier|synchronized
name|Metric
name|get
parameter_list|()
block|{
name|Metric
name|copy
init|=
operator|new
name|Metric
argument_list|()
decl_stmt|;
name|copy
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|copy
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|copy
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|copy
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|this
operator|.
name|max
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|total
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
return|return
name|copy
return|;
block|}
block|}
comment|// For measuring latency of writes
specifier|static
name|Metric
name|writeTime
init|=
operator|new
name|Metric
argument_list|()
decl_stmt|;
specifier|static
name|Metric
name|writeSize
init|=
operator|new
name|Metric
argument_list|()
decl_stmt|;
comment|// For measuring latency of syncs
specifier|static
name|Metric
name|syncTime
init|=
operator|new
name|Metric
argument_list|()
decl_stmt|;
comment|//For measuring slow HLog appends
specifier|static
name|AtomicLong
name|slowHLogAppendCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|static
name|Metric
name|slowHLogAppendTime
init|=
operator|new
name|Metric
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Metric
name|getWriteTime
parameter_list|()
block|{
return|return
name|writeTime
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Metric
name|getWriteSize
parameter_list|()
block|{
return|return
name|writeSize
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Metric
name|getSyncTime
parameter_list|()
block|{
return|return
name|syncTime
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|getSlowAppendCount
parameter_list|()
block|{
return|return
name|slowHLogAppendCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Metric
name|getSlowAppendTime
parameter_list|()
block|{
return|return
name|slowHLogAppendTime
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

