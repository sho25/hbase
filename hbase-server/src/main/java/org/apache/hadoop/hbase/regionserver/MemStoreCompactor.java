begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * The ongoing MemStore Compaction manager, dispatches a solo running compaction and interrupts  * the compaction if requested. The compaction is interrupted and stopped by CompactingMemStore,  * for example when another compaction needs to be started.  * Prior to compaction the MemStoreCompactor evaluates  * the compacting ratio and aborts the compaction if it is not worthy.  * The MemStoreScanner is used to traverse the compaction pipeline. The MemStoreScanner  * is included in internal store scanner, where all compaction logic is implemented.  * Threads safety: It is assumed that the compaction pipeline is immutable,  * therefore no special synchronization is required.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|MemStoreCompactor
block|{
comment|// Option for external guidance whether flattening is allowed
specifier|static
specifier|final
name|String
name|MEMSTORE_COMPACTOR_FLATTENING
init|=
literal|"hbase.hregion.compacting.memstore.flatten"
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|MEMSTORE_COMPACTOR_FLATTENING_DEFAULT
init|=
literal|true
decl_stmt|;
comment|// Option for external setting of the compacted structure (SkipList, CellArray, etc.)
specifier|static
specifier|final
name|String
name|COMPACTING_MEMSTORE_TYPE_KEY
init|=
literal|"hbase.hregion.compacting.memstore.type"
decl_stmt|;
specifier|static
specifier|final
name|int
name|COMPACTING_MEMSTORE_TYPE_DEFAULT
init|=
literal|2
decl_stmt|;
comment|// COMPACT_TO_ARRAY_MAP as default
comment|// What percentage of the duplications is causing compaction?
specifier|static
specifier|final
name|String
name|COMPACTION_THRESHOLD_REMAIN_FRACTION
init|=
literal|"hbase.hregion.compacting.memstore.comactPercent"
decl_stmt|;
specifier|static
specifier|final
name|double
name|COMPACTION_THRESHOLD_REMAIN_FRACTION_DEFAULT
init|=
literal|0.2
decl_stmt|;
comment|// Option for external guidance whether the flattening is allowed
specifier|static
specifier|final
name|String
name|MEMSTORE_COMPACTOR_AVOID_SPECULATIVE_SCAN
init|=
literal|"hbase.hregion.compacting.memstore.avoidSpeculativeScan"
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|MEMSTORE_COMPACTOR_AVOID_SPECULATIVE_SCAN_DEFAULT
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MemStoreCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CompactingMemStore
name|compactingMemStore
decl_stmt|;
comment|// a static version of the segment list from the pipeline
specifier|private
name|VersionedSegmentsList
name|versionedList
decl_stmt|;
comment|// a flag raised when compaction is requested to stop
specifier|private
specifier|final
name|AtomicBoolean
name|isInterrupted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// the limit to the size of the groups to be later provided to MemStoreCompactorIterator
specifier|private
specifier|final
name|int
name|compactionKVMax
decl_stmt|;
name|double
name|fraction
init|=
literal|0.8
decl_stmt|;
name|int
name|immutCellsNum
init|=
literal|0
decl_stmt|;
comment|// number of immutable for compaction cells
comment|/**    * Types of Compaction    */
specifier|private
enum|enum
name|Type
block|{
name|COMPACT_TO_SKIPLIST_MAP
block|,
name|COMPACT_TO_ARRAY_MAP
block|}
specifier|private
name|Type
name|type
init|=
name|Type
operator|.
name|COMPACT_TO_ARRAY_MAP
decl_stmt|;
specifier|public
name|MemStoreCompactor
parameter_list|(
name|CompactingMemStore
name|compactingMemStore
parameter_list|)
block|{
name|this
operator|.
name|compactingMemStore
operator|=
name|compactingMemStore
expr_stmt|;
name|this
operator|.
name|compactionKVMax
operator|=
name|compactingMemStore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|COMPACTION_KV_MAX
argument_list|,
name|HConstants
operator|.
name|COMPACTION_KV_MAX_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|fraction
operator|=
literal|1
operator|-
name|compactingMemStore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDouble
argument_list|(
name|COMPACTION_THRESHOLD_REMAIN_FRACTION
argument_list|,
name|COMPACTION_THRESHOLD_REMAIN_FRACTION_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**----------------------------------------------------------------------    * The request to dispatch the compaction asynchronous task.    * The method returns true if compaction was successfully dispatched, or false if there    * is already an ongoing compaction or no segments to compact.    */
specifier|public
name|boolean
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|compactingMemStore
operator|.
name|hasImmutableSegments
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// no compaction on empty
name|int
name|t
init|=
name|compactingMemStore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|COMPACTING_MEMSTORE_TYPE_DEFAULT
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
literal|1
case|:
name|type
operator|=
name|Type
operator|.
name|COMPACT_TO_SKIPLIST_MAP
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|type
operator|=
name|Type
operator|.
name|COMPACT_TO_ARRAY_MAP
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type "
operator|+
name|type
argument_list|)
throw|;
comment|// sanity check
block|}
comment|// get a snapshot of the list of the segments from the pipeline,
comment|// this local copy of the list is marked with specific version
name|versionedList
operator|=
name|compactingMemStore
operator|.
name|getImmutableSegments
argument_list|()
expr_stmt|;
name|immutCellsNum
operator|=
name|versionedList
operator|.
name|getNumOfCells
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting the MemStore In-Memory Shrink of type "
operator|+
name|type
operator|+
literal|" for store "
operator|+
name|compactingMemStore
operator|.
name|getStore
argument_list|()
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doCompaction
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**----------------------------------------------------------------------   * The request to cancel the compaction asynchronous task   * The compaction may still happen if the request was sent too late   * Non-blocking request   */
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|isInterrupted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**----------------------------------------------------------------------   * Close the scanners and clear the pointers in order to allow good   * garbage collection   */
specifier|private
name|void
name|releaseResources
parameter_list|()
block|{
name|isInterrupted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|versionedList
operator|=
literal|null
expr_stmt|;
block|}
comment|/**----------------------------------------------------------------------    * Check whether there are some signs to definitely not to flatten,    * returns false if we must compact. If this method returns true we    * still need to evaluate the compaction.    */
specifier|private
name|boolean
name|shouldFlatten
parameter_list|()
block|{
name|boolean
name|userToFlatten
init|=
comment|// the user configurable option to flatten or not to flatten
name|compactingMemStore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|MEMSTORE_COMPACTOR_FLATTENING
argument_list|,
name|MEMSTORE_COMPACTOR_FLATTENING_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|userToFlatten
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"In-Memory shrink is doing compaction, as user asked to avoid flattening"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// the user doesn't want to flatten
block|}
comment|// limit the number of the segments in the pipeline
name|int
name|numOfSegments
init|=
name|versionedList
operator|.
name|getNumOfSegments
argument_list|()
decl_stmt|;
if|if
condition|(
name|numOfSegments
operator|>
literal|3
condition|)
block|{
comment|// hard-coded for now as it is going to move to policy
name|LOG
operator|.
name|debug
argument_list|(
literal|"In-Memory shrink is doing compaction, as there already are "
operator|+
name|numOfSegments
operator|+
literal|" segments in the compaction pipeline"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// to avoid "too many open files later", compact now
block|}
comment|// till here we hvae all the signs that it is possible to flatten, run the speculative scan
comment|// (if allowed by the user) to check the efficiency of compaction
name|boolean
name|avoidSpeculativeScan
init|=
comment|// the user configurable option to avoid the speculative scan
name|compactingMemStore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|MEMSTORE_COMPACTOR_AVOID_SPECULATIVE_SCAN
argument_list|,
name|MEMSTORE_COMPACTOR_AVOID_SPECULATIVE_SCAN_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|avoidSpeculativeScan
operator|==
literal|true
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"In-Memory shrink is doing flattening, as user asked to avoid compaction "
operator|+
literal|"evaluation"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// flatten without checking the compaction expedience
block|}
try|try
block|{
name|immutCellsNum
operator|=
name|countCellsForCompaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|immutCellsNum
operator|>
name|fraction
operator|*
name|versionedList
operator|.
name|getNumOfCells
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**----------------------------------------------------------------------   * The worker thread performs the compaction asynchronously.   * The solo (per compactor) thread only reads the compaction pipeline.   * There is at most one thread per memstore instance.   */
specifier|private
name|void
name|doCompaction
parameter_list|()
block|{
name|ImmutableSegment
name|result
init|=
literal|null
decl_stmt|;
name|boolean
name|resultSwapped
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// PHASE I: estimate the compaction expedience - EVALUATE COMPACTION
if|if
condition|(
name|shouldFlatten
argument_list|()
condition|)
block|{
comment|// too much cells "survive" the possible compaction, we do not want to compact!
name|LOG
operator|.
name|debug
argument_list|(
literal|"In-Memory compaction does not pay off - storing the flattened segment"
operator|+
literal|" for store: "
operator|+
name|compactingMemStore
operator|.
name|getFamilyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Looking for Segment in the pipeline with SkipList index, to make it flat
name|compactingMemStore
operator|.
name|flattenOneSegment
argument_list|(
name|versionedList
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// PHASE II: create the new compacted ImmutableSegment - START COPY-COMPACTION
if|if
condition|(
operator|!
name|isInterrupted
operator|.
name|get
argument_list|()
condition|)
block|{
name|result
operator|=
name|compact
argument_list|(
name|immutCellsNum
argument_list|)
expr_stmt|;
block|}
comment|// Phase III: swap the old compaction pipeline - END COPY-COMPACTION
if|if
condition|(
operator|!
name|isInterrupted
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|resultSwapped
operator|=
name|compactingMemStore
operator|.
name|swapCompactedSegments
argument_list|(
name|versionedList
argument_list|,
name|result
argument_list|)
condition|)
block|{
comment|// update the wal so it can be truncated and not get too long
name|compactingMemStore
operator|.
name|updateLowestUnflushedSequenceIdInWAL
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// only if greater
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupting the MemStore in-memory compaction for store "
operator|+
name|compactingMemStore
operator|.
name|getFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|(
name|result
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|resultSwapped
operator|)
condition|)
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
name|releaseResources
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**----------------------------------------------------------------------    * The copy-compaction is the creation of the ImmutableSegment (from the relevant type)    * based on the Compactor Iterator. The new ImmutableSegment is returned.    */
specifier|private
name|ImmutableSegment
name|compact
parameter_list|(
name|int
name|numOfCells
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"In-Memory compaction does pay off - The estimated number of cells "
operator|+
literal|"after compaction is "
operator|+
name|numOfCells
operator|+
literal|", while number of cells before is "
operator|+
name|versionedList
operator|.
name|getNumOfCells
argument_list|()
operator|+
literal|". The fraction of remaining cells should be: "
operator|+
name|fraction
argument_list|)
expr_stmt|;
name|ImmutableSegment
name|result
init|=
literal|null
decl_stmt|;
name|MemStoreCompactorIterator
name|iterator
init|=
operator|new
name|MemStoreCompactorIterator
argument_list|(
name|versionedList
operator|.
name|getStoreSegments
argument_list|()
argument_list|,
name|compactingMemStore
operator|.
name|getComparator
argument_list|()
argument_list|,
name|compactionKVMax
argument_list|,
name|compactingMemStore
operator|.
name|getStore
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|COMPACT_TO_SKIPLIST_MAP
case|:
name|result
operator|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
operator|.
name|createImmutableSegment
argument_list|(
name|compactingMemStore
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|compactingMemStore
operator|.
name|getComparator
argument_list|()
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMPACT_TO_ARRAY_MAP
case|:
name|result
operator|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
operator|.
name|createImmutableSegment
argument_list|(
name|compactingMemStore
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|compactingMemStore
operator|.
name|getComparator
argument_list|()
argument_list|,
name|iterator
argument_list|,
name|numOfCells
argument_list|,
name|ImmutableSegment
operator|.
name|Type
operator|.
name|ARRAY_MAP_BASED
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type "
operator|+
name|type
argument_list|)
throw|;
comment|// sanity check
block|}
block|}
finally|finally
block|{
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**----------------------------------------------------------------------    * Count cells to estimate the efficiency of the future compaction    */
specifier|private
name|int
name|countCellsForCompaction
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|MemStoreCompactorIterator
name|iterator
init|=
operator|new
name|MemStoreCompactorIterator
argument_list|(
name|versionedList
operator|.
name|getStoreSegments
argument_list|()
argument_list|,
name|compactingMemStore
operator|.
name|getComparator
argument_list|()
argument_list|,
name|compactionKVMax
argument_list|,
name|compactingMemStore
operator|.
name|getStore
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|iterator
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|cnt
return|;
block|}
block|}
end_class

end_unit

