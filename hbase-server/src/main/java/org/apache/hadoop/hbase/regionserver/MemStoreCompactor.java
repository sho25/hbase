begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * The ongoing MemStore Compaction manager, dispatches a solo running compaction  * and interrupts the compaction if requested.  * The MemStoreScanner is used to traverse the compaction pipeline. The MemStoreScanner  * is included in internal store scanner, where all compaction logic is implemented.  * Threads safety: It is assumed that the compaction pipeline is immutable,  * therefore no special synchronization is required.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|MemStoreCompactor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MemStoreCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CompactingMemStore
name|compactingMemStore
decl_stmt|;
specifier|private
name|MemStoreScanner
name|scanner
decl_stmt|;
comment|// scanner for pipeline only
comment|// scanner on top of MemStoreScanner that uses ScanQueryMatcher
specifier|private
name|StoreScanner
name|compactingScanner
decl_stmt|;
comment|// smallest read point for any ongoing MemStore scan
specifier|private
name|long
name|smallestReadPoint
decl_stmt|;
comment|// a static version of the segment list from the pipeline
specifier|private
name|VersionedSegmentsList
name|versionedList
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isInterrupted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|MemStoreCompactor
parameter_list|(
name|CompactingMemStore
name|compactingMemStore
parameter_list|)
block|{
name|this
operator|.
name|compactingMemStore
operator|=
name|compactingMemStore
expr_stmt|;
block|}
comment|/**    * The request to dispatch the compaction asynchronous task.    * The method returns true if compaction was successfully dispatched, or false if there    * is already an ongoing compaction or nothing to compact.    */
specifier|public
name|boolean
name|startCompaction
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|compactingMemStore
operator|.
name|hasCompactibleSegments
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// no compaction on empty
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValueScanner
argument_list|>
argument_list|()
decl_stmt|;
comment|// get the list of segments from the pipeline
name|versionedList
operator|=
name|compactingMemStore
operator|.
name|getCompactibleSegments
argument_list|()
expr_stmt|;
comment|// the list is marked with specific version
comment|// create the list of scanners with maximally possible read point, meaning that
comment|// all KVs are going to be returned by the pipeline traversing
for|for
control|(
name|Segment
name|segment
range|:
name|versionedList
operator|.
name|getStoreSegments
argument_list|()
control|)
block|{
name|scanners
operator|.
name|add
argument_list|(
name|segment
operator|.
name|getSegmentScanner
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|=
operator|new
name|MemStoreScanner
argument_list|(
name|compactingMemStore
argument_list|,
name|scanners
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|MemStoreScanner
operator|.
name|Type
operator|.
name|COMPACT_FORWARD
argument_list|)
expr_stmt|;
name|smallestReadPoint
operator|=
name|compactingMemStore
operator|.
name|getSmallestReadPoint
argument_list|()
expr_stmt|;
name|compactingScanner
operator|=
name|createScanner
argument_list|(
name|compactingMemStore
operator|.
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting the MemStore in-memory compaction for store "
operator|+
name|compactingMemStore
operator|.
name|getStore
argument_list|()
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doCompaction
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**   * The request to cancel the compaction asynchronous task   * The compaction may still happen if the request was sent too late   * Non-blocking request   */
specifier|public
name|void
name|stopCompact
parameter_list|()
block|{
name|isInterrupted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**   * Close the scanners and clear the pointers in order to allow good   * garbage collection   */
specifier|private
name|void
name|releaseResources
parameter_list|()
block|{
name|isInterrupted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner
operator|=
literal|null
expr_stmt|;
name|compactingScanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|compactingScanner
operator|=
literal|null
expr_stmt|;
name|versionedList
operator|=
literal|null
expr_stmt|;
block|}
comment|/**   * The worker thread performs the compaction asynchronously.   * The solo (per compactor) thread only reads the compaction pipeline.   * There is at most one thread per memstore instance.   */
specifier|private
name|void
name|doCompaction
parameter_list|()
block|{
name|ImmutableSegment
name|result
init|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
comment|// create the scanner
operator|.
name|createImmutableSegment
argument_list|(
name|compactingMemStore
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|compactingMemStore
operator|.
name|getComparator
argument_list|()
argument_list|,
name|CompactingMemStore
operator|.
name|DEEP_OVERHEAD_PER_PIPELINE_ITEM
argument_list|)
decl_stmt|;
comment|// the compaction processing
try|try
block|{
comment|// Phase I: create the compacted MutableCellSetSegment
name|compactSegments
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Phase II: swap the old compaction pipeline
if|if
condition|(
operator|!
name|isInterrupted
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|compactingMemStore
operator|.
name|swapCompactedSegments
argument_list|(
name|versionedList
argument_list|,
name|result
argument_list|)
condition|)
block|{
comment|// update the wal so it can be truncated and not get too long
name|compactingMemStore
operator|.
name|updateLowestUnflushedSequenceIdInWAL
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// only if greater
block|}
else|else
block|{
comment|// We just ignored the Segment 'result' and swap did not happen.
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We just ignore the Segment 'result'.
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupting the MemStore in-memory compaction for store "
operator|+
name|compactingMemStore
operator|.
name|getFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
finally|finally
block|{
name|releaseResources
argument_list|()
expr_stmt|;
name|compactingMemStore
operator|.
name|setInMemoryFlushInProgress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates the scanner for compacting the pipeline.    *    * @return the scanner    */
specifier|private
name|StoreScanner
name|createScanner
parameter_list|(
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|//Get all available versions
name|StoreScanner
name|internalScanner
init|=
operator|new
name|StoreScanner
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getScanInfo
argument_list|()
argument_list|,
name|scan
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|scanner
argument_list|)
argument_list|,
name|ScanType
operator|.
name|COMPACT_RETAIN_DELETES
argument_list|,
name|smallestReadPoint
argument_list|,
name|HConstants
operator|.
name|OLDEST_TIMESTAMP
argument_list|)
decl_stmt|;
return|return
name|internalScanner
return|;
block|}
comment|/**    * Updates the given single Segment using the internal store scanner,    * who in turn uses ScanQueryMatcher    */
specifier|private
name|void
name|compactSegments
parameter_list|(
name|Segment
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
comment|// get the limit to the size of the groups to be returned by compactingScanner
name|int
name|compactionKVMax
init|=
name|compactingMemStore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|COMPACTION_KV_MAX
argument_list|,
name|HConstants
operator|.
name|COMPACTION_KV_MAX_DEFAULT
argument_list|)
decl_stmt|;
name|ScannerContext
name|scannerContext
init|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBatchLimit
argument_list|(
name|compactionKVMax
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|boolean
name|hasMore
decl_stmt|;
do|do
block|{
name|hasMore
operator|=
name|compactingScanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|kvs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Cell
name|c
range|:
name|kvs
control|)
block|{
comment|// The scanner is doing all the elimination logic
comment|// now we just copy it to the new segment
name|Cell
name|newKV
init|=
name|result
operator|.
name|maybeCloneWithAllocator
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|result
operator|.
name|internalAdd
argument_list|(
name|newKV
argument_list|)
expr_stmt|;
block|}
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|hasMore
operator|&&
operator|(
operator|!
name|isInterrupted
operator|.
name|get
argument_list|()
operator|)
condition|)
do|;
block|}
block|}
end_class

end_unit

