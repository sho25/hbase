begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * A custom RegionSplitPolicy implementing a SplitPolicy that groups  * rows by a prefix of the row-key with a delimiter. Only the first delimiter  * for the row key will define the prefix of the row key that is used for grouping.  *  * This ensures that a region is not split "inside" a prefix of a row key.  * I.e. rows can be co-located in a region by their prefix.  *  * As an example, if you have row keys delimited with<code>_</code>, like  *<code>userid_eventtype_eventid</code>, and use prefix delimiter _, this split policy  * ensures that all rows starting with the same userid, belongs to the same region.  * @see KeyPrefixRegionSplitPolicy  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DelimitedKeyPrefixRegionSplitPolicy
extends|extends
name|IncreasingToUpperBoundRegionSplitPolicy
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DelimitedKeyPrefixRegionSplitPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELIMITER_KEY
init|=
literal|"DelimitedKeyPrefixRegionSplitPolicy.delimiter"
decl_stmt|;
specifier|private
name|byte
index|[]
name|delimiter
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|configureForRegion
parameter_list|(
name|HRegion
name|region
parameter_list|)
block|{
name|super
operator|.
name|configureForRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
comment|// read the prefix length from the table descriptor
name|String
name|delimiterString
init|=
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getValue
argument_list|(
name|DELIMITER_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|delimiterString
operator|==
literal|null
operator|||
name|delimiterString
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|DELIMITER_KEY
operator|+
literal|" not specified for table "
operator|+
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|". Using default RegionSplitPolicy"
argument_list|)
expr_stmt|;
return|return;
block|}
name|delimiter
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|delimiterString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|getSplitPoint
parameter_list|()
block|{
name|byte
index|[]
name|splitPoint
init|=
name|super
operator|.
name|getSplitPoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|splitPoint
operator|!=
literal|null
operator|&&
name|delimiter
operator|!=
literal|null
condition|)
block|{
comment|//find the first occurrence of delimiter in split point
name|int
name|index
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Bytes
operator|.
name|indexOf
argument_list|(
name|splitPoint
argument_list|,
name|delimiter
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Delimiter "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|delimiter
argument_list|)
operator|+
literal|"  not found for split key "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|splitPoint
return|;
block|}
comment|// group split keys by a prefix
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|splitPoint
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|index
argument_list|,
name|splitPoint
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|splitPoint
return|;
block|}
block|}
block|}
end_class

end_unit

