begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HeapMemoryManager
operator|.
name|HeapMemoryTuneObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Does the management of memstoreLAB chunk creations. A monotonically incrementing id is associated  * with every chunk  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ChunkCreator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ChunkCreator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// monotonically increasing chunkid
specifier|private
name|AtomicInteger
name|chunkID
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// maps the chunk against the monotonically increasing chunk id. We need to preserve the
comment|// natural ordering of the key
comment|// CellChunkMap creation should convert the weak ref to hard reference
comment|// chunk id of each chunk is the first integer written on each chunk,
comment|// the header size need to be changed in case chunk id size is changed
specifier|public
specifier|static
specifier|final
name|int
name|SIZEOF_CHUNK_HEADER
init|=
name|Bytes
operator|.
name|SIZEOF_INT
decl_stmt|;
comment|// An object pointed by a weak reference can be garbage collected, in opposite to an object
comment|// referenced by a strong (regular) reference. Every chunk created via ChunkCreator is referenced
comment|// from either weakChunkIdMap or strongChunkIdMap.
comment|// Upon chunk C creation, C's ID is mapped into weak reference to C, in order not to disturb C's
comment|// GC in case all other reference to C are going to be removed.
comment|// When chunk C is referenced from CellChunkMap (via C's ID) it is possible to GC the chunk C.
comment|// To avoid that upon inserting C into CellChunkMap, C's ID is mapped into strong (regular)
comment|// reference to C.
comment|// map that doesn't influence GC
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|WeakReference
argument_list|<
name|Chunk
argument_list|>
argument_list|>
name|weakChunkIdMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|WeakReference
argument_list|<
name|Chunk
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// map that keeps chunks from garbage collection
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Chunk
argument_list|>
name|strongChunkIdMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|Chunk
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|offheap
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
name|ChunkCreator
name|INSTANCE
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
name|boolean
name|chunkPoolDisabled
init|=
literal|false
decl_stmt|;
specifier|private
name|MemStoreChunkPool
name|pool
decl_stmt|;
annotation|@
name|VisibleForTesting
name|ChunkCreator
parameter_list|(
name|int
name|chunkSize
parameter_list|,
name|boolean
name|offheap
parameter_list|,
name|long
name|globalMemStoreSize
parameter_list|,
name|float
name|poolSizePercentage
parameter_list|,
name|float
name|initialCountPercentage
parameter_list|,
name|HeapMemoryManager
name|heapMemoryManager
parameter_list|)
block|{
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|offheap
operator|=
name|offheap
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|initializePool
argument_list|(
name|globalMemStoreSize
argument_list|,
name|poolSizePercentage
argument_list|,
name|initialCountPercentage
argument_list|)
expr_stmt|;
if|if
condition|(
name|heapMemoryManager
operator|!=
literal|null
operator|&&
name|this
operator|.
name|pool
operator|!=
literal|null
condition|)
block|{
comment|// Register with Heap Memory manager
name|heapMemoryManager
operator|.
name|registerTuneObserver
argument_list|(
name|this
operator|.
name|pool
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initializes the instance of MSLABChunkCreator    * @param chunkSize the chunkSize    * @param offheap indicates if the chunk is to be created offheap or not    * @param globalMemStoreSize  the global memstore size    * @param poolSizePercentage pool size percentage    * @param initialCountPercentage the initial count of the chunk pool if any    * @param heapMemoryManager the heapmemory manager    * @return singleton MSLABChunkCreator    */
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"LI_LAZY_INIT_STATIC"
argument_list|,
name|justification
operator|=
literal|"Method is called by single thread at the starting of RS"
argument_list|)
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|ChunkCreator
name|initialize
parameter_list|(
name|int
name|chunkSize
parameter_list|,
name|boolean
name|offheap
parameter_list|,
name|long
name|globalMemStoreSize
parameter_list|,
name|float
name|poolSizePercentage
parameter_list|,
name|float
name|initialCountPercentage
parameter_list|,
name|HeapMemoryManager
name|heapMemoryManager
parameter_list|)
block|{
if|if
condition|(
name|INSTANCE
operator|!=
literal|null
condition|)
return|return
name|INSTANCE
return|;
name|INSTANCE
operator|=
operator|new
name|ChunkCreator
argument_list|(
name|chunkSize
argument_list|,
name|offheap
argument_list|,
name|globalMemStoreSize
argument_list|,
name|poolSizePercentage
argument_list|,
name|initialCountPercentage
argument_list|,
name|heapMemoryManager
argument_list|)
expr_stmt|;
return|return
name|INSTANCE
return|;
block|}
specifier|static
name|ChunkCreator
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
comment|/**    * Creates and inits a chunk.    * @return the chunk that was initialized    */
name|Chunk
name|getChunk
parameter_list|()
block|{
name|Chunk
name|chunk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
comment|//  the pool creates the chunk internally. The chunk#init() call happens here
name|chunk
operator|=
name|this
operator|.
name|pool
operator|.
name|getChunk
argument_list|()
expr_stmt|;
comment|// the pool has run out of maxCount
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The chunk pool is full. Reached maxCount= "
operator|+
name|this
operator|.
name|pool
operator|.
name|getMaxCount
argument_list|()
operator|+
literal|". Creating chunk onheap."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|chunk
operator|=
name|createChunk
argument_list|()
expr_stmt|;
block|}
comment|// put this chunk initially into the weakChunkIdMap
name|this
operator|.
name|weakChunkIdMap
operator|.
name|put
argument_list|(
name|chunk
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|WeakReference
argument_list|<>
argument_list|(
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
comment|// now we need to actually do the expensive memory allocation step in case of a new chunk,
comment|// else only the offset is set to the beginning of the chunk to accept allocations
name|chunk
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|chunk
return|;
block|}
specifier|private
name|Chunk
name|createChunk
parameter_list|()
block|{
return|return
name|createChunk
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Creates the chunk either onheap or offheap    * @param pool indicates if the chunks have to be created which will be used by the Pool    * @return the chunk    */
specifier|private
name|Chunk
name|createChunk
parameter_list|(
name|boolean
name|pool
parameter_list|)
block|{
name|int
name|id
init|=
name|chunkID
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
assert|assert
name|id
operator|>
literal|0
assert|;
comment|// do not create offheap chunk on demand
if|if
condition|(
name|pool
operator|&&
name|this
operator|.
name|offheap
condition|)
block|{
return|return
operator|new
name|OffheapChunk
argument_list|(
name|chunkSize
argument_list|,
name|id
argument_list|,
name|pool
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|OnheapChunk
argument_list|(
name|chunkSize
argument_list|,
name|id
argument_list|,
name|pool
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
comment|// Used to translate the ChunkID into a chunk ref
name|Chunk
name|getChunk
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|WeakReference
argument_list|<
name|Chunk
argument_list|>
name|ref
init|=
name|weakChunkIdMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
return|return
name|ref
operator|.
name|get
argument_list|()
return|;
block|}
comment|// check also the strong mapping
return|return
name|strongChunkIdMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|// transfer the weak pointer to be a strong chunk pointer
name|Chunk
name|saveChunkFromGC
parameter_list|(
name|int
name|chunkID
parameter_list|)
block|{
name|Chunk
name|c
init|=
name|strongChunkIdMap
operator|.
name|get
argument_list|(
name|chunkID
argument_list|)
decl_stmt|;
comment|// check whether the chunk is already protected
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
comment|// with strong pointer
return|return
name|c
return|;
name|WeakReference
argument_list|<
name|Chunk
argument_list|>
name|ref
init|=
name|weakChunkIdMap
operator|.
name|get
argument_list|(
name|chunkID
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|ref
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
comment|// put this strong reference to chunk into the strongChunkIdMap
comment|// the read of the weakMap is always happening before the read of the strongMap
comment|// so no synchronization issues here
name|this
operator|.
name|strongChunkIdMap
operator|.
name|put
argument_list|(
name|chunkID
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|weakChunkIdMap
operator|.
name|remove
argument_list|(
name|chunkID
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
comment|// we should actually never return null as someone should not ask to save from GC a chunk,
comment|// which is already released. However, we are not asserting it here and we let the caller
comment|// to deal with the return value an assert if needed
return|return
literal|null
return|;
block|}
name|int
name|getChunkSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|chunkSize
return|;
block|}
name|boolean
name|isOffheap
parameter_list|()
block|{
return|return
name|this
operator|.
name|offheap
return|;
block|}
specifier|private
name|void
name|removeChunks
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|chunkIDs
parameter_list|)
block|{
name|this
operator|.
name|weakChunkIdMap
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|chunkIDs
argument_list|)
expr_stmt|;
name|this
operator|.
name|strongChunkIdMap
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|chunkIDs
argument_list|)
expr_stmt|;
block|}
name|Chunk
name|removeChunk
parameter_list|(
name|int
name|chunkId
parameter_list|)
block|{
name|WeakReference
argument_list|<
name|Chunk
argument_list|>
name|weak
init|=
name|this
operator|.
name|weakChunkIdMap
operator|.
name|remove
argument_list|(
name|chunkId
argument_list|)
decl_stmt|;
name|Chunk
name|strong
init|=
name|this
operator|.
name|strongChunkIdMap
operator|.
name|remove
argument_list|(
name|chunkId
argument_list|)
decl_stmt|;
if|if
condition|(
name|weak
operator|!=
literal|null
condition|)
block|{
return|return
name|weak
operator|.
name|get
argument_list|()
return|;
block|}
return|return
name|strong
return|;
block|}
annotation|@
name|VisibleForTesting
comment|// the chunks in the weakChunkIdMap may already be released so we shouldn't relay
comment|// on this counting for strong correctness. This method is used only in testing.
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|weakChunkIdMap
operator|.
name|size
argument_list|()
operator|+
name|this
operator|.
name|strongChunkIdMap
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|clearChunkIds
parameter_list|()
block|{
name|this
operator|.
name|strongChunkIdMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|weakChunkIdMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * A pool of {@link Chunk} instances.    *    * MemStoreChunkPool caches a number of retired chunks for reusing, it could    * decrease allocating bytes when writing, thereby optimizing the garbage    * collection on JVM.    */
specifier|private
class|class
name|MemStoreChunkPool
implements|implements
name|HeapMemoryTuneObserver
block|{
specifier|private
name|int
name|maxCount
decl_stmt|;
comment|// A queue of reclaimed chunks
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Chunk
argument_list|>
name|reclaimedChunks
decl_stmt|;
specifier|private
specifier|final
name|float
name|poolSizePercentage
decl_stmt|;
comment|/** Statistics thread schedule pool */
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduleThreadPool
decl_stmt|;
comment|/** Statistics thread */
specifier|private
specifier|static
specifier|final
name|int
name|statThreadPeriod
init|=
literal|60
operator|*
literal|5
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|chunkCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|reusedChunkCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|MemStoreChunkPool
parameter_list|(
name|int
name|maxCount
parameter_list|,
name|int
name|initialCount
parameter_list|,
name|float
name|poolSizePercentage
parameter_list|)
block|{
name|this
operator|.
name|maxCount
operator|=
name|maxCount
expr_stmt|;
name|this
operator|.
name|poolSizePercentage
operator|=
name|poolSizePercentage
expr_stmt|;
name|this
operator|.
name|reclaimedChunks
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialCount
condition|;
name|i
operator|++
control|)
block|{
name|Chunk
name|chunk
init|=
name|createChunk
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|chunk
operator|.
name|init
argument_list|()
expr_stmt|;
name|reclaimedChunks
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
name|chunkCount
operator|.
name|set
argument_list|(
name|initialCount
argument_list|)
expr_stmt|;
specifier|final
name|String
name|n
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|scheduleThreadPool
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
name|n
operator|+
literal|"-MemStoreChunkPool Statistics"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduleThreadPool
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|StatisticsThread
argument_list|()
argument_list|,
name|statThreadPeriod
argument_list|,
name|statThreadPeriod
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Poll a chunk from the pool, reset it if not null, else create a new chunk to return if we have      * not yet created max allowed chunks count. When we have already created max allowed chunks and      * no free chunks as of now, return null. It is the responsibility of the caller to make a chunk      * then.      * Note: Chunks returned by this pool must be put back to the pool after its use.      * @return a chunk      * @see #putbackChunks(Set)      */
name|Chunk
name|getChunk
parameter_list|()
block|{
name|Chunk
name|chunk
init|=
name|reclaimedChunks
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|chunk
operator|!=
literal|null
condition|)
block|{
name|chunk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|reusedChunkCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Make a chunk iff we have not yet created the maxCount chunks
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|created
init|=
name|this
operator|.
name|chunkCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|created
operator|<
name|this
operator|.
name|maxCount
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|chunkCount
operator|.
name|compareAndSet
argument_list|(
name|created
argument_list|,
name|created
operator|+
literal|1
argument_list|)
condition|)
block|{
name|chunk
operator|=
name|createChunk
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
name|chunk
return|;
block|}
comment|/**      * Add the chunks to the pool, when the pool achieves the max size, it will skip the remaining      * chunks      * @param chunks      */
specifier|private
name|void
name|putbackChunks
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|chunks
parameter_list|)
block|{
name|int
name|toAdd
init|=
name|Math
operator|.
name|min
argument_list|(
name|chunks
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|maxCount
operator|-
name|reclaimedChunks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|chunks
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Integer
name|chunkId
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// remove the chunks every time though they are from the pool or not
name|Chunk
name|chunk
init|=
name|ChunkCreator
operator|.
name|this
operator|.
name|removeChunk
argument_list|(
name|chunkId
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunk
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|chunk
operator|.
name|isFromPool
argument_list|()
operator|&&
name|toAdd
operator|>
literal|0
condition|)
block|{
name|reclaimedChunks
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
name|toAdd
operator|--
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|StatisticsThread
extends|extends
name|Thread
block|{
name|StatisticsThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"MemStoreChunkPool.StatisticsThread"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|logStats
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|logStats
parameter_list|()
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
return|return;
name|long
name|created
init|=
name|chunkCount
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|reused
init|=
name|reusedChunkCount
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|total
init|=
name|created
operator|+
name|reused
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats: current pool size="
operator|+
name|reclaimedChunks
operator|.
name|size
argument_list|()
operator|+
literal|",created chunk count="
operator|+
name|created
operator|+
literal|",reused chunk count="
operator|+
name|reused
operator|+
literal|",reuseRatio="
operator|+
operator|(
name|total
operator|==
literal|0
condition|?
literal|"0"
else|:
name|StringUtils
operator|.
name|formatPercent
argument_list|(
operator|(
name|float
operator|)
name|reused
operator|/
operator|(
name|float
operator|)
name|total
argument_list|,
literal|2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getMaxCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onHeapMemoryTune
parameter_list|(
name|long
name|newMemstoreSize
parameter_list|,
name|long
name|newBlockCacheSize
parameter_list|)
block|{
comment|// don't do any tuning in case of offheap memstore
if|if
condition|(
name|isOffheap
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not tuning the chunk pool as it is offheap"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|newMaxCount
init|=
call|(
name|int
call|)
argument_list|(
name|newMemstoreSize
operator|*
name|poolSizePercentage
operator|/
name|getChunkSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMaxCount
operator|!=
name|this
operator|.
name|maxCount
condition|)
block|{
comment|// We need an adjustment in the chunks numbers
if|if
condition|(
name|newMaxCount
operator|>
name|this
operator|.
name|maxCount
condition|)
block|{
comment|// Max chunks getting increased. Just change the variable. Later calls to getChunk() would
comment|// create and add them to Q
name|LOG
operator|.
name|info
argument_list|(
literal|"Max count for chunks increased from "
operator|+
name|this
operator|.
name|maxCount
operator|+
literal|" to "
operator|+
name|newMaxCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCount
operator|=
name|newMaxCount
expr_stmt|;
block|}
else|else
block|{
comment|// Max chunks getting decreased. We may need to clear off some of the pooled chunks now
comment|// itself. If the extra chunks are serving already, do not pool those when we get them back
name|LOG
operator|.
name|info
argument_list|(
literal|"Max count for chunks decreased from "
operator|+
name|this
operator|.
name|maxCount
operator|+
literal|" to "
operator|+
name|newMaxCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCount
operator|=
name|newMaxCount
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|reclaimedChunks
operator|.
name|size
argument_list|()
operator|>
name|newMaxCount
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
name|this
operator|.
name|reclaimedChunks
operator|.
name|size
argument_list|()
operator|>
name|newMaxCount
condition|)
block|{
name|this
operator|.
name|reclaimedChunks
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|clearDisableFlag
parameter_list|()
block|{
name|chunkPoolDisabled
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|MemStoreChunkPool
name|initializePool
parameter_list|(
name|long
name|globalMemStoreSize
parameter_list|,
name|float
name|poolSizePercentage
parameter_list|,
name|float
name|initialCountPercentage
parameter_list|)
block|{
if|if
condition|(
name|poolSizePercentage
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"PoolSizePercentage is less than 0. So not using pool"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|chunkPoolDisabled
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|poolSizePercentage
operator|>
literal|1.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MemStoreLAB
operator|.
name|CHUNK_POOL_MAXSIZE_KEY
operator|+
literal|" must be between 0.0 and 1.0"
argument_list|)
throw|;
block|}
name|int
name|maxCount
init|=
call|(
name|int
call|)
argument_list|(
name|globalMemStoreSize
operator|*
name|poolSizePercentage
operator|/
name|getChunkSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialCountPercentage
operator|>
literal|1.0
operator|||
name|initialCountPercentage
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MemStoreLAB
operator|.
name|CHUNK_POOL_INITIALSIZE_KEY
operator|+
literal|" must be between 0.0 and 1.0"
argument_list|)
throw|;
block|}
name|int
name|initialCount
init|=
call|(
name|int
call|)
argument_list|(
name|initialCountPercentage
operator|*
name|maxCount
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocating MemStoreChunkPool with chunk size "
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|getChunkSize
argument_list|()
argument_list|)
operator|+
literal|", max count "
operator|+
name|maxCount
operator|+
literal|", initial count "
operator|+
name|initialCount
argument_list|)
expr_stmt|;
return|return
operator|new
name|MemStoreChunkPool
argument_list|(
name|maxCount
argument_list|,
name|initialCount
argument_list|,
name|poolSizePercentage
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|int
name|getMaxCount
parameter_list|()
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
return|return
name|pool
operator|.
name|getMaxCount
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|VisibleForTesting
name|int
name|getPoolSize
parameter_list|()
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
return|return
name|pool
operator|.
name|reclaimedChunks
operator|.
name|size
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/*    * Only used in testing    */
annotation|@
name|VisibleForTesting
name|void
name|clearChunksInPool
parameter_list|()
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|reclaimedChunks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
name|void
name|putbackChunks
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|chunks
parameter_list|)
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|putbackChunks
argument_list|(
name|chunks
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|removeChunks
argument_list|(
name|chunks
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

