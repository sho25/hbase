begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cloudera
operator|.
name|htrace
operator|.
name|SpanReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cloudera
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_comment
comment|/**  * This class provides functions for reading the names of SpanReceivers from  * hbase-site.xml, adding those SpanReceivers to the Tracer, and closing those  * SpanReceivers when appropriate.  */
end_comment

begin_class
specifier|public
class|class
name|SpanReceiverHost
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SPAN_RECEIVERS_CONF_KEY
init|=
literal|"hbase.trace.spanreceiver.classes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SpanReceiverHost
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|SpanReceiver
argument_list|>
name|receivers
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|SpanReceiverHost
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|receivers
operator|=
operator|new
name|HashSet
argument_list|<
name|SpanReceiver
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Reads the names of classes specified in the    * "hbase.trace.spanreceiver.classes" property and instantiates and registers    * them with the Tracer as SpanReceiver's.    *     * The nullary constructor is called during construction, but if the classes    * specified implement the Configurable interface, setConfiguration() will be    * called on them. This allows SpanReceivers to use values from    * hbase-site.xml. See    * {@link org.apache.hadoop.hbase.trace.HBaseLocalFileSpanReceiver} for an    * example.    */
specifier|public
name|void
name|loadSpanReceivers
parameter_list|()
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|receiverNames
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|SPAN_RECEIVERS_CONF_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|receiverNames
operator|==
literal|null
operator|||
name|receiverNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|className
range|:
name|receiverNames
control|)
block|{
name|className
operator|=
name|className
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
name|implClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|receivers
operator|.
name|add
argument_list|(
name|loadInstance
argument_list|(
name|implClass
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SpanReceiver "
operator|+
name|className
operator|+
literal|" was loaded successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Class "
operator|+
name|className
operator|+
literal|" cannot be found. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Load SpanReceiver "
operator|+
name|className
operator|+
literal|" failed. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|SpanReceiver
name|rcvr
range|:
name|receivers
control|)
block|{
name|Trace
operator|.
name|addReceiver
argument_list|(
name|rcvr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SpanReceiver
name|loadInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|)
throws|throws
name|IOException
block|{
name|SpanReceiver
name|impl
decl_stmt|;
try|try
block|{
name|Object
name|o
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|implClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|impl
operator|=
operator|(
name|SpanReceiver
operator|)
name|o
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|impl
return|;
block|}
comment|/**    * Calls close() on all SpanReceivers created by this SpanReceiverHost.    */
specifier|public
name|void
name|closeReceivers
parameter_list|()
block|{
for|for
control|(
name|SpanReceiver
name|rcvr
range|:
name|receivers
control|)
block|{
try|try
block|{
name|rcvr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to close SpanReceiver correctly: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

