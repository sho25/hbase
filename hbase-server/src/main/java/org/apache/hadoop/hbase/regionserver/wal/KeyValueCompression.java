begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * Compression class for {@link KeyValue}s written to the WAL. This is not  * synchronized, so synchronization should be handled outside.  *   * Class only compresses and uncompresses row keys, family names, and the  * qualifier. More may be added depending on use patterns.  */
end_comment

begin_class
class|class
name|KeyValueCompression
block|{
comment|/**    * Uncompresses a KeyValue from a DataInput and returns it.    *     * @param in the DataInput    * @param readContext the compressionContext to use.    * @return an uncompressed KeyValue    * @throws IOException    */
specifier|public
specifier|static
name|KeyValue
name|readKV
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|CompressionContext
name|readContext
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|keylength
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|vlength
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|KeyValue
operator|.
name|KEYVALUE_INFRASTRUCTURE_SIZE
operator|+
name|keylength
operator|+
name|vlength
decl_stmt|;
name|byte
index|[]
name|backingArray
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|pos
operator|=
name|Bytes
operator|.
name|putInt
argument_list|(
name|backingArray
argument_list|,
name|pos
argument_list|,
name|keylength
argument_list|)
expr_stmt|;
name|pos
operator|=
name|Bytes
operator|.
name|putInt
argument_list|(
name|backingArray
argument_list|,
name|pos
argument_list|,
name|vlength
argument_list|)
expr_stmt|;
comment|// the row
name|int
name|elemLen
init|=
name|Compressor
operator|.
name|uncompressIntoArray
argument_list|(
name|backingArray
argument_list|,
name|pos
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
argument_list|,
name|in
argument_list|,
name|readContext
operator|.
name|rowDict
argument_list|)
decl_stmt|;
name|checkLength
argument_list|(
name|elemLen
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|pos
operator|=
name|Bytes
operator|.
name|putShort
argument_list|(
name|backingArray
argument_list|,
name|pos
argument_list|,
operator|(
name|short
operator|)
name|elemLen
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|elemLen
expr_stmt|;
comment|// family
name|elemLen
operator|=
name|Compressor
operator|.
name|uncompressIntoArray
argument_list|(
name|backingArray
argument_list|,
name|pos
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
argument_list|,
name|in
argument_list|,
name|readContext
operator|.
name|familyDict
argument_list|)
expr_stmt|;
name|checkLength
argument_list|(
name|elemLen
argument_list|,
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|pos
operator|=
name|Bytes
operator|.
name|putByte
argument_list|(
name|backingArray
argument_list|,
name|pos
argument_list|,
operator|(
name|byte
operator|)
name|elemLen
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|elemLen
expr_stmt|;
comment|// qualifier
name|elemLen
operator|=
name|Compressor
operator|.
name|uncompressIntoArray
argument_list|(
name|backingArray
argument_list|,
name|pos
argument_list|,
name|in
argument_list|,
name|readContext
operator|.
name|qualifierDict
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|elemLen
expr_stmt|;
comment|// the rest
name|in
operator|.
name|readFully
argument_list|(
name|backingArray
argument_list|,
name|pos
argument_list|,
name|length
operator|-
name|pos
argument_list|)
expr_stmt|;
return|return
operator|new
name|KeyValue
argument_list|(
name|backingArray
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|checkLength
parameter_list|(
name|int
name|len
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|max
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid length for compresesed portion of keyvalue: "
operator|+
name|len
argument_list|)
throw|;
block|}
block|}
comment|/**    * Compresses and writes ourKV to out, a DataOutput.    *     * @param out the DataOutput    * @param keyVal the KV to compress and write    * @param writeContext the compressionContext to use.    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeKV
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|,
name|KeyValue
name|keyVal
parameter_list|,
name|CompressionContext
name|writeContext
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|backingArray
init|=
name|keyVal
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|keyVal
operator|.
name|getOffset
argument_list|()
decl_stmt|;
comment|// we first write the KeyValue infrastructure as VInts.
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|keyVal
operator|.
name|getKeyLength
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|keyVal
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// now we write the row key, as the row key is likely to be repeated
comment|// We save space only if we attempt to compress elements with duplicates
name|Compressor
operator|.
name|writeCompressed
argument_list|(
name|keyVal
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|keyVal
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|keyVal
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|out
argument_list|,
name|writeContext
operator|.
name|rowDict
argument_list|)
expr_stmt|;
comment|// now family, if it exists. if it doesn't, we write a 0 length array.
name|Compressor
operator|.
name|writeCompressed
argument_list|(
name|keyVal
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|keyVal
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|keyVal
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|out
argument_list|,
name|writeContext
operator|.
name|familyDict
argument_list|)
expr_stmt|;
comment|// qualifier next
name|Compressor
operator|.
name|writeCompressed
argument_list|(
name|keyVal
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|keyVal
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|keyVal
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|out
argument_list|,
name|writeContext
operator|.
name|qualifierDict
argument_list|)
expr_stmt|;
comment|// now we write the rest uncompressed
name|int
name|pos
init|=
name|keyVal
operator|.
name|getTimestampOffset
argument_list|()
decl_stmt|;
name|int
name|remainingLength
init|=
name|keyVal
operator|.
name|getLength
argument_list|()
operator|+
name|offset
operator|-
operator|(
name|pos
operator|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|backingArray
argument_list|,
name|pos
argument_list|,
name|remainingLength
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

