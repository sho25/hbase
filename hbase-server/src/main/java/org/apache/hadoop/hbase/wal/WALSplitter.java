begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitUtil
operator|.
name|finishSplitLogFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|SplitLogWorkerCoordination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|LastSequenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALCellCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CancelableProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALProvider
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|RegionStoreSequenceIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|StoreSequenceId
import|;
end_import

begin_comment
comment|/**  * This class is responsible for splitting up a bunch of regionserver commit log  * files that are no longer being written to, into new files, one per region, for  * recovering data on startup. Delete the old log files when finished.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|WALSplitter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WALSplitter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** By default we retry errors in splitting, rather than skipping. */
specifier|public
specifier|static
specifier|final
name|boolean
name|SPLIT_SKIP_ERRORS_DEFAULT
init|=
literal|false
decl_stmt|;
comment|// Parameters for split process
specifier|protected
specifier|final
name|Path
name|walDir
decl_stmt|;
specifier|protected
specifier|final
name|FileSystem
name|walFS
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Major subcomponents of the split process.
comment|// These are separated into inner classes to make testing easier.
name|OutputSink
name|outputSink
decl_stmt|;
specifier|private
name|EntryBuffers
name|entryBuffers
decl_stmt|;
specifier|private
name|SplitLogWorkerCoordination
name|splitLogWorkerCoordination
decl_stmt|;
specifier|private
specifier|final
name|WALFactory
name|walFactory
decl_stmt|;
specifier|private
name|MonitoredTask
name|status
decl_stmt|;
comment|// For checking the latest flushed sequence id
specifier|protected
specifier|final
name|LastSequenceId
name|sequenceIdChecker
decl_stmt|;
comment|// Map encodedRegionName -> lastFlushedSequenceId
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastFlushedSequenceIds
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Map encodedRegionName -> maxSeqIdInStores
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|>
name|regionMaxSeqIdInStores
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// the file being split currently
specifier|private
name|FileStatus
name|fileBeingSplit
decl_stmt|;
comment|// if we limit the number of writers opened for sinking recovered edits
specifier|private
specifier|final
name|boolean
name|splitWriterCreationBounded
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|SPLIT_WRITER_CREATION_BOUNDED
init|=
literal|"hbase.split.writer.creation.bounded"
decl_stmt|;
annotation|@
name|VisibleForTesting
name|WALSplitter
parameter_list|(
specifier|final
name|WALFactory
name|factory
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|walDir
parameter_list|,
name|FileSystem
name|walFS
parameter_list|,
name|LastSequenceId
name|idChecker
parameter_list|,
name|SplitLogWorkerCoordination
name|splitLogWorkerCoordination
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|codecClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|WALCellCodec
operator|.
name|WAL_CELL_CODEC_CLASS_KEY
argument_list|,
name|WALCellCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|RPC_CODEC_CONF_KEY
argument_list|,
name|codecClassName
argument_list|)
expr_stmt|;
name|this
operator|.
name|walDir
operator|=
name|walDir
expr_stmt|;
name|this
operator|.
name|walFS
operator|=
name|walFS
expr_stmt|;
name|this
operator|.
name|sequenceIdChecker
operator|=
name|idChecker
expr_stmt|;
name|this
operator|.
name|splitLogWorkerCoordination
operator|=
name|splitLogWorkerCoordination
expr_stmt|;
name|this
operator|.
name|walFactory
operator|=
name|factory
expr_stmt|;
name|PipelineController
name|controller
init|=
operator|new
name|PipelineController
argument_list|()
decl_stmt|;
name|this
operator|.
name|splitWriterCreationBounded
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SPLIT_WRITER_CREATION_BOUNDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|entryBuffers
operator|=
operator|new
name|EntryBuffers
argument_list|(
name|controller
argument_list|,
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.buffersize"
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|,
name|splitWriterCreationBounded
argument_list|)
expr_stmt|;
name|int
name|numWriterThreads
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.writer.threads"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitWriterCreationBounded
condition|)
block|{
name|outputSink
operator|=
operator|new
name|BoundedLogWriterCreationOutputSink
argument_list|(
name|this
argument_list|,
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|numWriterThreads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputSink
operator|=
operator|new
name|LogRecoveredEditsOutputSink
argument_list|(
name|this
argument_list|,
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|numWriterThreads
argument_list|)
expr_stmt|;
block|}
block|}
name|WALFactory
name|getWalFactory
parameter_list|()
block|{
return|return
name|this
operator|.
name|walFactory
return|;
block|}
name|FileStatus
name|getFileBeingSplit
parameter_list|()
block|{
return|return
name|fileBeingSplit
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getRegionMaxSeqIdInStores
parameter_list|()
block|{
return|return
name|regionMaxSeqIdInStores
return|;
block|}
comment|/**    * Splits a WAL file into region's recovered-edits directory.    * This is the main entry point for distributed log splitting from SplitLogWorker.    *<p>    * If the log file has N regions then N recovered.edits files will be produced.    *<p>    * @return false if it is interrupted by the progress-able.    */
specifier|public
specifier|static
name|boolean
name|splitLogFile
parameter_list|(
name|Path
name|walDir
parameter_list|,
name|FileStatus
name|logfile
parameter_list|,
name|FileSystem
name|walFS
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|,
name|LastSequenceId
name|idChecker
parameter_list|,
name|SplitLogWorkerCoordination
name|splitLogWorkerCoordination
parameter_list|,
specifier|final
name|WALFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|WALSplitter
name|s
init|=
operator|new
name|WALSplitter
argument_list|(
name|factory
argument_list|,
name|conf
argument_list|,
name|walDir
argument_list|,
name|walFS
argument_list|,
name|idChecker
argument_list|,
name|splitLogWorkerCoordination
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|splitLogFile
argument_list|(
name|logfile
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|// A wrapper to split one log folder using the method used by distributed
comment|// log splitting. Used by tools and unit tests. It should be package private.
comment|// It is public only because TestWALObserver is in a different package,
comment|// which uses this method to do log splitting.
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|split
parameter_list|(
name|Path
name|rootDir
parameter_list|,
name|Path
name|logDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|,
name|FileSystem
name|walFS
parameter_list|,
name|Configuration
name|conf
parameter_list|,
specifier|final
name|WALFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileStatus
index|[]
name|logfiles
init|=
name|SplitLogManager
operator|.
name|getFileList
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|logDir
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ArrayUtils
operator|.
name|isNotEmpty
argument_list|(
name|logfiles
argument_list|)
condition|)
block|{
for|for
control|(
name|FileStatus
name|logfile
range|:
name|logfiles
control|)
block|{
name|WALSplitter
name|s
init|=
operator|new
name|WALSplitter
argument_list|(
name|factory
argument_list|,
name|conf
argument_list|,
name|rootDir
argument_list|,
name|walFS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|splitLogFile
argument_list|(
name|logfile
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|finishSplitLogFile
argument_list|(
name|rootDir
argument_list|,
name|oldLogDir
argument_list|,
name|logfile
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|outputSink
operator|.
name|splits
operator|!=
literal|null
condition|)
block|{
name|splits
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|outputSink
operator|.
name|splits
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|walFS
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete src dir: "
operator|+
name|logDir
argument_list|)
throw|;
block|}
return|return
name|splits
return|;
block|}
comment|/**    * log splitting implementation, splits one log file.    * @param logfile should be an actual log file.    */
annotation|@
name|VisibleForTesting
name|boolean
name|splitLogFile
parameter_list|(
name|FileStatus
name|logfile
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|status
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|logfile
operator|.
name|isFile
argument_list|()
argument_list|,
literal|"passed in file status is for something other than a regular file."
argument_list|)
expr_stmt|;
name|boolean
name|isCorrupted
init|=
literal|false
decl_stmt|;
name|boolean
name|skipErrors
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.hlog.split.skip.errors"
argument_list|,
name|SPLIT_SKIP_ERRORS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|interval
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.report.interval.loglines"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|Path
name|logPath
init|=
name|logfile
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|outputSinkStarted
init|=
literal|false
decl_stmt|;
name|boolean
name|progress_failed
init|=
literal|false
decl_stmt|;
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
name|int
name|editsSkipped
init|=
literal|0
decl_stmt|;
name|status
operator|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Splitting log file "
operator|+
name|logfile
operator|.
name|getPath
argument_list|()
operator|+
literal|"into a temporary staging area."
argument_list|)
expr_stmt|;
name|Reader
name|logFileReader
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|fileBeingSplit
operator|=
name|logfile
expr_stmt|;
try|try
block|{
name|long
name|logLength
init|=
name|logfile
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Splitting WAL={}, length={}"
argument_list|,
name|logPath
argument_list|,
name|logLength
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Opening log file"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|logFileReader
operator|=
name|getReader
argument_list|(
name|logfile
argument_list|,
name|skipErrors
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
if|if
condition|(
name|logFileReader
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nothing to split in WAL={}"
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|int
name|numOpenedFilesBeforeReporting
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.report.openedfiles"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
name|numOpenedFilesLastCheck
init|=
literal|0
decl_stmt|;
name|outputSink
operator|.
name|setReporter
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|outputSink
operator|.
name|startWriterThreads
argument_list|()
expr_stmt|;
name|outputSinkStarted
operator|=
literal|true
expr_stmt|;
name|Entry
name|entry
decl_stmt|;
name|Long
name|lastFlushedSequenceId
init|=
operator|-
literal|1L
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|getNextLogLine
argument_list|(
name|logFileReader
argument_list|,
name|logPath
argument_list|,
name|skipErrors
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|String
name|encodedRegionNameAsStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|lastFlushedSequenceId
operator|=
name|lastFlushedSequenceIds
operator|.
name|get
argument_list|(
name|encodedRegionNameAsStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastFlushedSequenceId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sequenceIdChecker
operator|!=
literal|null
condition|)
block|{
name|RegionStoreSequenceIds
name|ids
init|=
name|sequenceIdChecker
operator|.
name|getLastSequenceId
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|maxSeqIdInStores
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|StoreSequenceId
name|storeSeqId
range|:
name|ids
operator|.
name|getStoreSequenceIdList
argument_list|()
control|)
block|{
name|maxSeqIdInStores
operator|.
name|put
argument_list|(
name|storeSeqId
operator|.
name|getFamilyName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|storeSeqId
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|regionMaxSeqIdInStores
operator|.
name|put
argument_list|(
name|encodedRegionNameAsStr
argument_list|,
name|maxSeqIdInStores
argument_list|)
expr_stmt|;
name|lastFlushedSequenceId
operator|=
name|ids
operator|.
name|getLastFlushedSequenceId
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DLS Last flushed sequenceid for "
operator|+
name|encodedRegionNameAsStr
operator|+
literal|": "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|ids
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastFlushedSequenceId
operator|==
literal|null
condition|)
block|{
name|lastFlushedSequenceId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|lastFlushedSequenceIds
operator|.
name|put
argument_list|(
name|encodedRegionNameAsStr
argument_list|,
name|lastFlushedSequenceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastFlushedSequenceId
operator|>=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
condition|)
block|{
name|editsSkipped
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Don't send Compaction/Close/Open region events to recovered edit type sinks.
if|if
condition|(
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|isMetaEdit
argument_list|()
operator|&&
operator|!
name|outputSink
operator|.
name|keepRegionEvent
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|editsSkipped
operator|++
expr_stmt|;
continue|continue;
block|}
name|entryBuffers
operator|.
name|appendEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
name|int
name|moreWritersFromLastCheck
init|=
name|this
operator|.
name|getNumOpenWriters
argument_list|()
operator|-
name|numOpenedFilesLastCheck
decl_stmt|;
comment|// If sufficient edits have passed, check if we should report progress.
if|if
condition|(
name|editsCount
operator|%
name|interval
operator|==
literal|0
operator|||
name|moreWritersFromLastCheck
operator|>
name|numOpenedFilesBeforeReporting
condition|)
block|{
name|numOpenedFilesLastCheck
operator|=
name|this
operator|.
name|getNumOpenWriters
argument_list|()
expr_stmt|;
name|String
name|countsStr
init|=
operator|(
name|editsCount
operator|-
operator|(
name|editsSkipped
operator|+
name|outputSink
operator|.
name|getSkippedEdits
argument_list|()
operator|)
operator|)
operator|+
literal|" edits, skipped "
operator|+
name|editsSkipped
operator|+
literal|" edits."
decl_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Split "
operator|+
name|countsStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
catch|catch
parameter_list|(
name|CorruptedLogFileException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not parse, corrupted WAL={}"
argument_list|,
name|logPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|splitLogWorkerCoordination
operator|!=
literal|null
condition|)
block|{
comment|// Some tests pass in a csm of null.
name|splitLogWorkerCoordination
operator|.
name|markCorrupted
argument_list|(
name|walDir
argument_list|,
name|logfile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walFS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for tests only
name|ZKSplitLog
operator|.
name|markCorrupted
argument_list|(
name|walDir
argument_list|,
name|logfile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walFS
argument_list|)
expr_stmt|;
block|}
name|isCorrupted
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|e
operator|instanceof
name|RemoteException
condition|?
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
else|:
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finishing writing output logs and closing down"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|logFileReader
condition|)
block|{
name|logFileReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not close WAL reader"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|outputSinkStarted
condition|)
block|{
comment|// Set progress_failed to true as the immediate following statement will reset its value
comment|// when finishWritingAndClose() throws exception, progress_failed has the right value
name|progress_failed
operator|=
literal|true
expr_stmt|;
name|progress_failed
operator|=
name|outputSink
operator|.
name|finishWritingAndClose
argument_list|()
operator|==
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|String
name|msg
init|=
literal|"Processed "
operator|+
name|editsCount
operator|+
literal|" edits across "
operator|+
name|outputSink
operator|.
name|getNumberOfRecoveredRegions
argument_list|()
operator|+
literal|" regions; edits skipped="
operator|+
name|editsSkipped
operator|+
literal|"; log file="
operator|+
name|logPath
operator|+
literal|", length="
operator|+
name|logfile
operator|.
name|getLen
argument_list|()
operator|+
comment|// See if length got updated post lease recovery
literal|", corrupted="
operator|+
name|isCorrupted
operator|+
literal|", progress failed="
operator|+
name|progress_failed
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|status
operator|.
name|markComplete
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|!
name|progress_failed
return|;
block|}
comment|/**    * Create a new {@link Reader} for reading logs to split.    */
specifier|protected
name|Reader
name|getReader
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|boolean
name|skipErrors
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
throws|,
name|CorruptedLogFileException
block|{
name|Path
name|path
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|file
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Reader
name|in
decl_stmt|;
comment|// Check for possibly empty file. With appends, currently Hadoop reports a
comment|// zero length even if the file has been sync'd. Revisit if HDFS-376 or
comment|// HDFS-878 is committed.
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} might be still open, length is 0"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|FSUtils
operator|.
name|getInstance
argument_list|(
name|walFS
argument_list|,
name|conf
argument_list|)
operator|.
name|recoverFileLease
argument_list|(
name|walFS
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|=
name|getReader
argument_list|(
name|path
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
comment|// TODO should we ignore an empty, not-last log file if skip.errors
comment|// is false? Either way, the caller should decide what to do. E.g.
comment|// ignore if this is the last log in sequence.
comment|// TODO is this scenario still possible if the log has been
comment|// recovered (i.e. closed)
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not open {} for reading. File is empty"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// EOFException being ignored
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|FileNotFoundException
condition|)
block|{
comment|// A wal file may not exist anymore. Nothing can be recovered so move on
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} does not exist anymore"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|skipErrors
operator|||
name|e
operator|instanceof
name|InterruptedIOException
condition|)
block|{
throw|throw
name|e
throw|;
comment|// Don't mark the file corrupted if interrupted, or not skipErrors
block|}
name|CorruptedLogFileException
name|t
init|=
operator|new
name|CorruptedLogFileException
argument_list|(
literal|"skipErrors=true Could not open wal "
operator|+
name|path
operator|+
literal|" ignoring"
argument_list|)
decl_stmt|;
name|t
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
return|return
name|in
return|;
block|}
specifier|static
specifier|private
name|Entry
name|getNextLogLine
parameter_list|(
name|Reader
name|in
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|skipErrors
parameter_list|)
throws|throws
name|CorruptedLogFileException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|in
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
comment|// truncated files are expected if a RS crashes (see HBASE-2643)
name|LOG
operator|.
name|info
argument_list|(
literal|"EOF from wal {}. Continuing."
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If the IOE resulted from bad file format,
comment|// then this problem is idempotent and retrying won't help
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
operator|||
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Parse exception from wal {}. Continuing"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|skipErrors
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|CorruptedLogFileException
name|t
init|=
operator|new
name|CorruptedLogFileException
argument_list|(
literal|"skipErrors=true Ignoring exception"
operator|+
literal|" while parsing wal "
operator|+
name|path
operator|+
literal|". Marking as corrupted"
argument_list|)
decl_stmt|;
name|t
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
comment|/**    * Create a new {@link WALProvider.Writer} for writing log splits.    * @return a new Writer instance, caller should close    */
specifier|protected
name|WALProvider
operator|.
name|Writer
name|createWriter
parameter_list|(
name|Path
name|logfile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|walFactory
operator|.
name|createRecoveredEditsWriter
argument_list|(
name|walFS
argument_list|,
name|logfile
argument_list|)
return|;
block|}
comment|/**    * Create a new {@link Reader} for reading logs to split.    * @return new Reader instance, caller should close    */
specifier|protected
name|Reader
name|getReader
parameter_list|(
name|Path
name|curLogFile
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|walFactory
operator|.
name|createReader
argument_list|(
name|walFS
argument_list|,
name|curLogFile
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|/**    * Get current open writers    */
specifier|private
name|int
name|getNumOpenWriters
parameter_list|()
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|outputSink
operator|!=
literal|null
condition|)
block|{
name|result
operator|+=
name|this
operator|.
name|outputSink
operator|.
name|getNumOpenWriters
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Contains some methods to control WAL-entries producer / consumer interactions    */
specifier|public
specifier|static
class|class
name|PipelineController
block|{
comment|// If an exception is thrown by one of the other threads, it will be
comment|// stored here.
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|thrown
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Wait/notify for when data has been produced by the writer thread,
comment|// consumed by the reader thread, or an exception occurred
specifier|final
name|Object
name|dataAvailable
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|void
name|writerThreadError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|thrown
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check for errors in the writer threads. If any is found, rethrow it.      */
name|void
name|checkForErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|Throwable
name|thrown
init|=
name|this
operator|.
name|thrown
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|thrown
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|thrown
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * A buffer of some number of edits for a given region.    * This accumulates edits and also provides a memory optimization in order to    * share a single byte array instance for the table and region name.    * Also tracks memory usage of the accumulated edits.    */
specifier|public
specifier|static
class|class
name|RegionEntryBuffer
implements|implements
name|HeapSize
block|{
name|long
name|heapInBuffer
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entryBuffer
decl_stmt|;
name|TableName
name|tableName
decl_stmt|;
name|byte
index|[]
name|encodedRegionName
decl_stmt|;
name|RegionEntryBuffer
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|region
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|encodedRegionName
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|entryBuffer
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|long
name|appendEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|internify
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entryBuffer
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|long
name|incrHeap
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|heapSize
argument_list|()
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
literal|2
operator|*
name|ClassSize
operator|.
name|REFERENCE
argument_list|)
operator|+
comment|// WALKey pointers
literal|0
decl_stmt|;
comment|// TODO linkedlist entry
name|heapInBuffer
operator|+=
name|incrHeap
expr_stmt|;
return|return
name|incrHeap
return|;
block|}
specifier|private
name|void
name|internify
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|WALKeyImpl
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|k
operator|.
name|internTableName
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|k
operator|.
name|internEncodedRegionName
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|heapInBuffer
return|;
block|}
specifier|public
name|byte
index|[]
name|getEncodedRegionName
parameter_list|()
block|{
return|return
name|encodedRegionName
return|;
block|}
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|getEntryBuffer
parameter_list|()
block|{
return|return
name|entryBuffer
return|;
block|}
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
block|}
comment|/**    * Class wraps the actual writer which writes data out and related statistics    */
specifier|public
specifier|abstract
specifier|static
class|class
name|SinkWriter
block|{
comment|/* Count of edits written to this path */
name|long
name|editsWritten
init|=
literal|0
decl_stmt|;
comment|/* Count of edits skipped to this path */
name|long
name|editsSkipped
init|=
literal|0
decl_stmt|;
comment|/* Number of nanos spent writing to this log */
name|long
name|nanosSpent
init|=
literal|0
decl_stmt|;
name|void
name|incrementEdits
parameter_list|(
name|int
name|edits
parameter_list|)
block|{
name|editsWritten
operator|+=
name|edits
expr_stmt|;
block|}
name|void
name|incrementSkippedEdits
parameter_list|(
name|int
name|skipped
parameter_list|)
block|{
name|editsSkipped
operator|+=
name|skipped
expr_stmt|;
block|}
name|void
name|incrementNanoTime
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|nanosSpent
operator|+=
name|nanos
expr_stmt|;
block|}
block|}
comment|/**    * Private data structure that wraps a Writer and its Path, also collecting statistics about the    * data written to this output.    */
specifier|final
specifier|static
class|class
name|WriterAndPath
extends|extends
name|SinkWriter
block|{
specifier|final
name|Path
name|path
decl_stmt|;
specifier|final
name|Writer
name|writer
decl_stmt|;
specifier|final
name|long
name|minLogSeqNum
decl_stmt|;
name|WriterAndPath
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|Writer
name|writer
parameter_list|,
specifier|final
name|long
name|minLogSeqNum
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|minLogSeqNum
operator|=
name|minLogSeqNum
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CorruptedLogFileException
extends|extends
name|Exception
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|CorruptedLogFileException
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

