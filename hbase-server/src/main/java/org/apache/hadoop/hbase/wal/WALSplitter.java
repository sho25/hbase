begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|SplitLogWorkerCoordination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|LastSequenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|AbstractFSWAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALCellCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CancelableProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALProvider
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WALEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|RegionStoreSequenceIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|StoreSequenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_comment
comment|/**  * This class is responsible for splitting up a bunch of regionserver commit log  * files that are no longer being written to, into new files, one per region, for  * recovering data on startup. Delete the old log files when finished.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|WALSplitter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WALSplitter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** By default we retry errors in splitting, rather than skipping. */
specifier|public
specifier|static
specifier|final
name|boolean
name|SPLIT_SKIP_ERRORS_DEFAULT
init|=
literal|false
decl_stmt|;
comment|// Parameters for split process
specifier|protected
specifier|final
name|Path
name|walDir
decl_stmt|;
specifier|protected
specifier|final
name|FileSystem
name|walFS
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Major subcomponents of the split process.
comment|// These are separated into inner classes to make testing easier.
name|OutputSink
name|outputSink
decl_stmt|;
specifier|private
name|EntryBuffers
name|entryBuffers
decl_stmt|;
specifier|private
name|SplitLogWorkerCoordination
name|splitLogWorkerCoordination
decl_stmt|;
specifier|private
specifier|final
name|WALFactory
name|walFactory
decl_stmt|;
specifier|private
name|MonitoredTask
name|status
decl_stmt|;
comment|// For checking the latest flushed sequence id
specifier|protected
specifier|final
name|LastSequenceId
name|sequenceIdChecker
decl_stmt|;
comment|// Map encodedRegionName -> lastFlushedSequenceId
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastFlushedSequenceIds
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Map encodedRegionName -> maxSeqIdInStores
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|>
name|regionMaxSeqIdInStores
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// the file being split currently
specifier|private
name|FileStatus
name|fileBeingSplit
decl_stmt|;
comment|// if we limit the number of writers opened for sinking recovered edits
specifier|private
specifier|final
name|boolean
name|splitWriterCreationBounded
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|SPLIT_WRITER_CREATION_BOUNDED
init|=
literal|"hbase.split.writer.creation.bounded"
decl_stmt|;
annotation|@
name|VisibleForTesting
name|WALSplitter
parameter_list|(
specifier|final
name|WALFactory
name|factory
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|walDir
parameter_list|,
name|FileSystem
name|walFS
parameter_list|,
name|LastSequenceId
name|idChecker
parameter_list|,
name|SplitLogWorkerCoordination
name|splitLogWorkerCoordination
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|codecClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|WALCellCodec
operator|.
name|WAL_CELL_CODEC_CLASS_KEY
argument_list|,
name|WALCellCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|RPC_CODEC_CONF_KEY
argument_list|,
name|codecClassName
argument_list|)
expr_stmt|;
name|this
operator|.
name|walDir
operator|=
name|walDir
expr_stmt|;
name|this
operator|.
name|walFS
operator|=
name|walFS
expr_stmt|;
name|this
operator|.
name|sequenceIdChecker
operator|=
name|idChecker
expr_stmt|;
name|this
operator|.
name|splitLogWorkerCoordination
operator|=
name|splitLogWorkerCoordination
expr_stmt|;
name|this
operator|.
name|walFactory
operator|=
name|factory
expr_stmt|;
name|PipelineController
name|controller
init|=
operator|new
name|PipelineController
argument_list|()
decl_stmt|;
name|this
operator|.
name|splitWriterCreationBounded
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SPLIT_WRITER_CREATION_BOUNDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|entryBuffers
operator|=
operator|new
name|EntryBuffers
argument_list|(
name|controller
argument_list|,
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.buffersize"
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|,
name|splitWriterCreationBounded
argument_list|)
expr_stmt|;
name|int
name|numWriterThreads
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.writer.threads"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitWriterCreationBounded
condition|)
block|{
name|outputSink
operator|=
operator|new
name|BoundedLogWriterCreationOutputSink
argument_list|(
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|numWriterThreads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputSink
operator|=
operator|new
name|LogRecoveredEditsOutputSink
argument_list|(
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|numWriterThreads
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Splits a WAL file into region's recovered-edits directory.    * This is the main entry point for distributed log splitting from SplitLogWorker.    *<p>    * If the log file has N regions then N recovered.edits files will be produced.    *<p>    * @return false if it is interrupted by the progress-able.    */
specifier|public
specifier|static
name|boolean
name|splitLogFile
parameter_list|(
name|Path
name|walDir
parameter_list|,
name|FileStatus
name|logfile
parameter_list|,
name|FileSystem
name|walFS
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|,
name|LastSequenceId
name|idChecker
parameter_list|,
name|SplitLogWorkerCoordination
name|splitLogWorkerCoordination
parameter_list|,
specifier|final
name|WALFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|WALSplitter
name|s
init|=
operator|new
name|WALSplitter
argument_list|(
name|factory
argument_list|,
name|conf
argument_list|,
name|walDir
argument_list|,
name|walFS
argument_list|,
name|idChecker
argument_list|,
name|splitLogWorkerCoordination
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|splitLogFile
argument_list|(
name|logfile
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|// A wrapper to split one log folder using the method used by distributed
comment|// log splitting. Used by tools and unit tests. It should be package private.
comment|// It is public only because TestWALObserver is in a different package,
comment|// which uses this method to do log splitting.
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|split
parameter_list|(
name|Path
name|rootDir
parameter_list|,
name|Path
name|logDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|,
name|FileSystem
name|walFS
parameter_list|,
name|Configuration
name|conf
parameter_list|,
specifier|final
name|WALFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileStatus
index|[]
name|logfiles
init|=
name|SplitLogManager
operator|.
name|getFileList
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|logDir
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ArrayUtils
operator|.
name|isNotEmpty
argument_list|(
name|logfiles
argument_list|)
condition|)
block|{
for|for
control|(
name|FileStatus
name|logfile
range|:
name|logfiles
control|)
block|{
name|WALSplitter
name|s
init|=
operator|new
name|WALSplitter
argument_list|(
name|factory
argument_list|,
name|conf
argument_list|,
name|rootDir
argument_list|,
name|walFS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|splitLogFile
argument_list|(
name|logfile
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|finishSplitLogFile
argument_list|(
name|rootDir
argument_list|,
name|oldLogDir
argument_list|,
name|logfile
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|outputSink
operator|.
name|splits
operator|!=
literal|null
condition|)
block|{
name|splits
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|outputSink
operator|.
name|splits
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|walFS
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete src dir: "
operator|+
name|logDir
argument_list|)
throw|;
block|}
return|return
name|splits
return|;
block|}
comment|/**    * log splitting implementation, splits one log file.    * @param logfile should be an actual log file.    */
annotation|@
name|VisibleForTesting
name|boolean
name|splitLogFile
parameter_list|(
name|FileStatus
name|logfile
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|status
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|logfile
operator|.
name|isFile
argument_list|()
argument_list|,
literal|"passed in file status is for something other than a regular file."
argument_list|)
expr_stmt|;
name|boolean
name|isCorrupted
init|=
literal|false
decl_stmt|;
name|boolean
name|skipErrors
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.hlog.split.skip.errors"
argument_list|,
name|SPLIT_SKIP_ERRORS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|interval
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.report.interval.loglines"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|Path
name|logPath
init|=
name|logfile
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|outputSinkStarted
init|=
literal|false
decl_stmt|;
name|boolean
name|progress_failed
init|=
literal|false
decl_stmt|;
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
name|int
name|editsSkipped
init|=
literal|0
decl_stmt|;
name|status
operator|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Splitting log file "
operator|+
name|logfile
operator|.
name|getPath
argument_list|()
operator|+
literal|"into a temporary staging area."
argument_list|)
expr_stmt|;
name|Reader
name|logFileReader
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|fileBeingSplit
operator|=
name|logfile
expr_stmt|;
try|try
block|{
name|long
name|logLength
init|=
name|logfile
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Splitting WAL={}, length={}"
argument_list|,
name|logPath
argument_list|,
name|logLength
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Opening log file"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|logFileReader
operator|=
name|getReader
argument_list|(
name|logfile
argument_list|,
name|skipErrors
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
if|if
condition|(
name|logFileReader
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nothing to split in WAL={}"
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|int
name|numOpenedFilesBeforeReporting
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.report.openedfiles"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
name|numOpenedFilesLastCheck
init|=
literal|0
decl_stmt|;
name|outputSink
operator|.
name|setReporter
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|outputSink
operator|.
name|startWriterThreads
argument_list|()
expr_stmt|;
name|outputSinkStarted
operator|=
literal|true
expr_stmt|;
name|Entry
name|entry
decl_stmt|;
name|Long
name|lastFlushedSequenceId
init|=
operator|-
literal|1L
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|getNextLogLine
argument_list|(
name|logFileReader
argument_list|,
name|logPath
argument_list|,
name|skipErrors
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|String
name|encodedRegionNameAsStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|lastFlushedSequenceId
operator|=
name|lastFlushedSequenceIds
operator|.
name|get
argument_list|(
name|encodedRegionNameAsStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastFlushedSequenceId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sequenceIdChecker
operator|!=
literal|null
condition|)
block|{
name|RegionStoreSequenceIds
name|ids
init|=
name|sequenceIdChecker
operator|.
name|getLastSequenceId
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|maxSeqIdInStores
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|StoreSequenceId
name|storeSeqId
range|:
name|ids
operator|.
name|getStoreSequenceIdList
argument_list|()
control|)
block|{
name|maxSeqIdInStores
operator|.
name|put
argument_list|(
name|storeSeqId
operator|.
name|getFamilyName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|storeSeqId
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|regionMaxSeqIdInStores
operator|.
name|put
argument_list|(
name|encodedRegionNameAsStr
argument_list|,
name|maxSeqIdInStores
argument_list|)
expr_stmt|;
name|lastFlushedSequenceId
operator|=
name|ids
operator|.
name|getLastFlushedSequenceId
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DLS Last flushed sequenceid for "
operator|+
name|encodedRegionNameAsStr
operator|+
literal|": "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|ids
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastFlushedSequenceId
operator|==
literal|null
condition|)
block|{
name|lastFlushedSequenceId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|lastFlushedSequenceIds
operator|.
name|put
argument_list|(
name|encodedRegionNameAsStr
argument_list|,
name|lastFlushedSequenceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastFlushedSequenceId
operator|>=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
condition|)
block|{
name|editsSkipped
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Don't send Compaction/Close/Open region events to recovered edit type sinks.
if|if
condition|(
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|isMetaEdit
argument_list|()
operator|&&
operator|!
name|outputSink
operator|.
name|keepRegionEvent
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|editsSkipped
operator|++
expr_stmt|;
continue|continue;
block|}
name|entryBuffers
operator|.
name|appendEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
name|int
name|moreWritersFromLastCheck
init|=
name|this
operator|.
name|getNumOpenWriters
argument_list|()
operator|-
name|numOpenedFilesLastCheck
decl_stmt|;
comment|// If sufficient edits have passed, check if we should report progress.
if|if
condition|(
name|editsCount
operator|%
name|interval
operator|==
literal|0
operator|||
name|moreWritersFromLastCheck
operator|>
name|numOpenedFilesBeforeReporting
condition|)
block|{
name|numOpenedFilesLastCheck
operator|=
name|this
operator|.
name|getNumOpenWriters
argument_list|()
expr_stmt|;
name|String
name|countsStr
init|=
operator|(
name|editsCount
operator|-
operator|(
name|editsSkipped
operator|+
name|outputSink
operator|.
name|getSkippedEdits
argument_list|()
operator|)
operator|)
operator|+
literal|" edits, skipped "
operator|+
name|editsSkipped
operator|+
literal|" edits."
decl_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Split "
operator|+
name|countsStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
catch|catch
parameter_list|(
name|CorruptedLogFileException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not parse, corrupted WAL={}"
argument_list|,
name|logPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|splitLogWorkerCoordination
operator|!=
literal|null
condition|)
block|{
comment|// Some tests pass in a csm of null.
name|splitLogWorkerCoordination
operator|.
name|markCorrupted
argument_list|(
name|walDir
argument_list|,
name|logfile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walFS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for tests only
name|ZKSplitLog
operator|.
name|markCorrupted
argument_list|(
name|walDir
argument_list|,
name|logfile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walFS
argument_list|)
expr_stmt|;
block|}
name|isCorrupted
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|e
operator|instanceof
name|RemoteException
condition|?
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
else|:
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finishing writing output logs and closing down"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|logFileReader
condition|)
block|{
name|logFileReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not close WAL reader"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|outputSinkStarted
condition|)
block|{
comment|// Set progress_failed to true as the immediate following statement will reset its value
comment|// when finishWritingAndClose() throws exception, progress_failed has the right value
name|progress_failed
operator|=
literal|true
expr_stmt|;
name|progress_failed
operator|=
name|outputSink
operator|.
name|finishWritingAndClose
argument_list|()
operator|==
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|String
name|msg
init|=
literal|"Processed "
operator|+
name|editsCount
operator|+
literal|" edits across "
operator|+
name|outputSink
operator|.
name|getNumberOfRecoveredRegions
argument_list|()
operator|+
literal|" regions; edits skipped="
operator|+
name|editsSkipped
operator|+
literal|"; log file="
operator|+
name|logPath
operator|+
literal|", length="
operator|+
name|logfile
operator|.
name|getLen
argument_list|()
operator|+
comment|// See if length got updated post lease recovery
literal|", corrupted="
operator|+
name|isCorrupted
operator|+
literal|", progress failed="
operator|+
name|progress_failed
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|status
operator|.
name|markComplete
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|!
name|progress_failed
return|;
block|}
comment|/**    * Completes the work done by splitLogFile by archiving logs    *<p>    * It is invoked by SplitLogManager once it knows that one of the    * SplitLogWorkers have completed the splitLogFile() part. If the master    * crashes then this function might get called multiple times.    *<p>    * @param logfile    * @param conf    * @throws IOException    */
specifier|public
specifier|static
name|void
name|finishSplitLogFile
parameter_list|(
name|String
name|logfile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|walDir
init|=
name|FSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|logPath
decl_stmt|;
if|if
condition|(
name|FSUtils
operator|.
name|isStartingWithPath
argument_list|(
name|walDir
argument_list|,
name|logfile
argument_list|)
condition|)
block|{
name|logPath
operator|=
operator|new
name|Path
argument_list|(
name|logfile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logPath
operator|=
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|logfile
argument_list|)
expr_stmt|;
block|}
name|finishSplitLogFile
argument_list|(
name|walDir
argument_list|,
name|oldLogDir
argument_list|,
name|logPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|finishSplitLogFile
parameter_list|(
name|Path
name|walDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|processedLogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedLogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|FileSystem
name|walFS
init|=
name|walDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|ZKSplitLog
operator|.
name|isCorrupted
argument_list|(
name|walDir
argument_list|,
name|logPath
operator|.
name|getName
argument_list|()
argument_list|,
name|walFS
argument_list|)
condition|)
block|{
name|corruptedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
name|archiveLogs
argument_list|(
name|corruptedLogs
argument_list|,
name|processedLogs
argument_list|,
name|oldLogDir
argument_list|,
name|walFS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|stagingDir
init|=
name|ZKSplitLog
operator|.
name|getSplitLogDir
argument_list|(
name|walDir
argument_list|,
name|logPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|walFS
operator|.
name|delete
argument_list|(
name|stagingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Moves processed logs to a oldLogDir after successful processing Moves    * corrupted logs (any log that couldn't be successfully parsed to corruptDir    * (.corrupt) for later investigation    *    * @param corruptedLogs    * @param processedLogs    * @param oldLogDir    * @param walFS WAL FileSystem to archive files on.    * @param conf    * @throws IOException    */
specifier|private
specifier|static
name|void
name|archiveLogs
parameter_list|(
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedLogs
parameter_list|,
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|processedLogs
parameter_list|,
specifier|final
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|FileSystem
name|walFS
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|corruptDir
init|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|HConstants
operator|.
name|CORRUPT_DIR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.corrupt.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.corrupt.dir is deprecated. Default to {}"
argument_list|,
name|corruptDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|walFS
operator|.
name|mkdirs
argument_list|(
name|corruptDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to mkdir {}"
argument_list|,
name|corruptDir
argument_list|)
expr_stmt|;
block|}
name|walFS
operator|.
name|mkdirs
argument_list|(
name|oldLogDir
argument_list|)
expr_stmt|;
comment|// this method can get restarted or called multiple times for archiving
comment|// the same log files.
for|for
control|(
name|Path
name|corrupted
range|:
name|corruptedLogs
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|corruptDir
argument_list|,
name|corrupted
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|corrupted
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|walFS
operator|.
name|rename
argument_list|(
name|corrupted
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to move corrupted log {} to {}"
argument_list|,
name|corrupted
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Moved corrupted log {} to {}"
argument_list|,
name|corrupted
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Path
name|p
range|:
name|processedLogs
control|)
block|{
name|Path
name|newPath
init|=
name|AbstractFSWAL
operator|.
name|getWALArchivePath
argument_list|(
name|oldLogDir
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|FSUtils
operator|.
name|renameAndSetModifyTime
argument_list|(
name|walFS
argument_list|,
name|p
argument_list|,
name|newPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to move {} to {}"
argument_list|,
name|p
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Archived processed log {} to {}"
argument_list|,
name|p
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Path to a file under RECOVERED_EDITS_DIR directory of the region found in    *<code>logEntry</code> named for the sequenceid in the passed    *<code>logEntry</code>: e.g. /hbase/some_table/2323432434/recovered.edits/2332.    * This method also ensures existence of RECOVERED_EDITS_DIR under the region    * creating it if necessary.    * @param logEntry    * @param fileNameBeingSplit the file being split currently. Used to generate tmp file name.    * @param tmpDirName of the directory used to sideline old recovered edits file    * @param conf    * @return Path to file into which to dump split log edits.    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|VisibleForTesting
specifier|static
name|Path
name|getRegionSplitEditsPath
parameter_list|(
specifier|final
name|Entry
name|logEntry
parameter_list|,
name|String
name|fileNameBeingSplit
parameter_list|,
name|String
name|tmpDirName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|walFS
init|=
name|FSUtils
operator|.
name|getWALFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getWALTableDir
argument_list|(
name|conf
argument_list|,
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|encodedRegionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|tableDir
argument_list|,
name|encodedRegionName
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regionDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
operator|&&
name|walFS
operator|.
name|isFile
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|tmpDirName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|exists
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|walFS
operator|.
name|mkdirs
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|=
operator|new
name|Path
argument_list|(
name|tmp
argument_list|,
name|HConstants
operator|.
name|RECOVERED_EDITS_DIR
operator|+
literal|"_"
operator|+
name|encodedRegionName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old file: {}. It could be some "
operator|+
literal|"leftover of an old installation. It should be a folder instead. "
operator|+
literal|"So moving it to {}"
argument_list|,
name|dir
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|rename
argument_list|(
name|dir
argument_list|,
name|tmp
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to sideline old file {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|walFS
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
operator|&&
operator|!
name|walFS
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"mkdir failed on {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// Append fileBeingSplit to prevent name conflict since we may have duplicate wal entries now.
comment|// Append file name ends with RECOVERED_LOG_TMPFILE_SUFFIX to ensure
comment|// region's replayRecoveredEdits will not delete it
name|String
name|fileName
init|=
name|formatRecoveredEditsFileName
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|fileName
operator|=
name|getTmpRecoveredEditsFileName
argument_list|(
name|fileName
operator|+
literal|"-"
operator|+
name|fileNameBeingSplit
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getTmpRecoveredEditsFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|fileName
operator|+
name|RECOVERED_LOG_TMPFILE_SUFFIX
return|;
block|}
comment|/**    * Get the completed recovered edits file path, renaming it to be by last edit    * in the file from its first edit. Then we could use the name to skip    * recovered edits when doing {@link HRegion#replayRecoveredEditsIfAny}.    * @param srcPath    * @param maximumEditLogSeqNum    * @return dstPath take file's last edit log seq num as the name    */
specifier|private
specifier|static
name|Path
name|getCompletedRecoveredEditsFilePath
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|long
name|maximumEditLogSeqNum
parameter_list|)
block|{
name|String
name|fileName
init|=
name|formatRecoveredEditsFileName
argument_list|(
name|maximumEditLogSeqNum
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|srcPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|fileName
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|String
name|formatRecoveredEditsFileName
parameter_list|(
specifier|final
name|long
name|seqid
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|seqid
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|EDITFILES_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-?[0-9]+"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RECOVERED_LOG_TMPFILE_SUFFIX
init|=
literal|".temp"
decl_stmt|;
comment|/**    * @param regionDir    *          This regions directory in the filesystem.    * @return The directory that holds recovered edits files for the region    *<code>regionDir</code>    */
specifier|public
specifier|static
name|Path
name|getRegionDirRecoveredEditsDir
parameter_list|(
specifier|final
name|Path
name|regionDir
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|HConstants
operator|.
name|RECOVERED_EDITS_DIR
argument_list|)
return|;
block|}
comment|/**    * Check whether there is recovered.edits in the region dir    * @param walFS FileSystem    * @param conf conf    * @param regionInfo the region to check    * @throws IOException IOException    * @return true if recovered.edits exist in the region dir    */
specifier|public
specifier|static
name|boolean
name|hasRecoveredEdits
parameter_list|(
specifier|final
name|FileSystem
name|walFS
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No recovered.edits for non default replica regions
if|if
condition|(
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//Only default replica region can reach here, so we can use regioninfo
comment|//directly without converting it to default replica's regioninfo.
name|Path
name|regionDir
init|=
name|FSUtils
operator|.
name|getWALRegionDir
argument_list|(
name|conf
argument_list|,
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|getSplitEditFilesSorted
argument_list|(
name|walFS
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
return|return
name|files
operator|!=
literal|null
operator|&&
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Returns sorted set of edit files made by splitter, excluding files    * with '.temp' suffix.    *    * @param walFS WAL FileSystem used to retrieving split edits files.    * @param regionDir WAL region dir to look for recovered edits files under.    * @return Files in passed<code>regionDir</code> as a sorted set.    * @throws IOException    */
specifier|public
specifier|static
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|getSplitEditFilesSorted
parameter_list|(
specifier|final
name|FileSystem
name|walFS
parameter_list|,
specifier|final
name|Path
name|regionDir
parameter_list|)
throws|throws
name|IOException
block|{
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|filesSorted
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|editsdir
init|=
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regionDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|exists
argument_list|(
name|editsdir
argument_list|)
condition|)
block|{
return|return
name|filesSorted
return|;
block|}
name|FileStatus
index|[]
name|files
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|walFS
argument_list|,
name|editsdir
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Return files and only files that match the editfile names pattern.
comment|// There can be other files in this directory other than edit files.
comment|// In particular, on error, we'll move aside the bad edit file giving
comment|// it a timestamp suffix. See moveAsideBadEditsFile.
name|Matcher
name|m
init|=
name|EDITFILES_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|walFS
operator|.
name|isFile
argument_list|(
name|p
argument_list|)
operator|&&
name|m
operator|.
name|matches
argument_list|()
expr_stmt|;
comment|// Skip the file whose name ends with RECOVERED_LOG_TMPFILE_SUFFIX,
comment|// because it means splitwal thread is writting this file.
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|RECOVERED_LOG_TMPFILE_SUFFIX
argument_list|)
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
comment|// Skip SeqId Files
if|if
condition|(
name|isSequenceIdFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed isFile check on {}"
argument_list|,
name|p
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|ArrayUtils
operator|.
name|isNotEmpty
argument_list|(
name|files
argument_list|)
condition|)
block|{
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|forEach
argument_list|(
name|status
lambda|->
name|filesSorted
operator|.
name|add
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|filesSorted
return|;
block|}
comment|/**    * Move aside a bad edits file.    *    * @param walFS WAL FileSystem used to rename bad edits file.    * @param edits    *          Edits file to move aside.    * @return The name of the moved aside file.    * @throws IOException    */
specifier|public
specifier|static
name|Path
name|moveAsideBadEditsFile
parameter_list|(
specifier|final
name|FileSystem
name|walFS
parameter_list|,
specifier|final
name|Path
name|edits
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|moveAsideName
init|=
operator|new
name|Path
argument_list|(
name|edits
operator|.
name|getParent
argument_list|()
argument_list|,
name|edits
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|rename
argument_list|(
name|edits
argument_list|,
name|moveAsideName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rename failed from {} to {}"
argument_list|,
name|edits
argument_list|,
name|moveAsideName
argument_list|)
expr_stmt|;
block|}
return|return
name|moveAsideName
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|SEQUENCE_ID_FILE_SUFFIX
init|=
literal|".seqid"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OLD_SEQUENCE_ID_FILE_SUFFIX
init|=
literal|"_seqid"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SEQUENCE_ID_FILE_SUFFIX_LENGTH
init|=
name|SEQUENCE_ID_FILE_SUFFIX
operator|.
name|length
argument_list|()
decl_stmt|;
comment|/**    * Is the given file a region open sequence id file.    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|boolean
name|isSequenceIdFile
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|SEQUENCE_ID_FILE_SUFFIX
argument_list|)
operator|||
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|OLD_SEQUENCE_ID_FILE_SUFFIX
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|FileStatus
index|[]
name|getSequenceIdFiles
parameter_list|(
name|FileSystem
name|walFS
parameter_list|,
name|Path
name|regionDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Why are we using a method in here as part of our normal region open where
comment|// there is no splitting involved? Fix. St.Ack 01/20/2017.
name|Path
name|editsDir
init|=
name|WALSplitter
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regionDir
argument_list|)
decl_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|files
init|=
name|walFS
operator|.
name|listStatus
argument_list|(
name|editsDir
argument_list|,
name|WALSplitter
operator|::
name|isSequenceIdFile
argument_list|)
decl_stmt|;
return|return
name|files
operator|!=
literal|null
condition|?
name|files
else|:
operator|new
name|FileStatus
index|[
literal|0
index|]
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|private
specifier|static
name|long
name|getMaxSequenceId
parameter_list|(
name|FileStatus
index|[]
name|files
parameter_list|)
block|{
name|long
name|maxSeqId
init|=
operator|-
literal|1L
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|String
name|fileName
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|maxSeqId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSeqId
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
operator|-
name|SEQUENCE_ID_FILE_SUFFIX_LENGTH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid SeqId File Name={}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|maxSeqId
return|;
block|}
comment|/**    * Get the max sequence id which is stored in the region directory. -1 if none.    */
specifier|public
specifier|static
name|long
name|getMaxRegionSequenceId
parameter_list|(
name|FileSystem
name|walFS
parameter_list|,
name|Path
name|regionDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getMaxSequenceId
argument_list|(
name|getSequenceIdFiles
argument_list|(
name|walFS
argument_list|,
name|regionDir
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a file with name as region's max sequence id    */
specifier|public
specifier|static
name|void
name|writeRegionSequenceIdFile
parameter_list|(
name|FileSystem
name|walFS
parameter_list|,
name|Path
name|regionDir
parameter_list|,
name|long
name|newMaxSeqId
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|files
init|=
name|getSequenceIdFiles
argument_list|(
name|walFS
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
name|long
name|maxSeqId
init|=
name|getMaxSequenceId
argument_list|(
name|files
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxSeqId
operator|>
name|newMaxSeqId
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The new max sequence id "
operator|+
name|newMaxSeqId
operator|+
literal|" is less than the old max sequence id "
operator|+
name|maxSeqId
argument_list|)
throw|;
block|}
comment|// write a new seqId file
name|Path
name|newSeqIdFile
init|=
operator|new
name|Path
argument_list|(
name|WALSplitter
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regionDir
argument_list|)
argument_list|,
name|newMaxSeqId
operator|+
name|SEQUENCE_ID_FILE_SUFFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMaxSeqId
operator|!=
name|maxSeqId
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|walFS
operator|.
name|createNewFile
argument_list|(
name|newSeqIdFile
argument_list|)
operator|&&
operator|!
name|walFS
operator|.
name|exists
argument_list|(
name|newSeqIdFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create SeqId file:"
operator|+
name|newSeqIdFile
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wrote file={}, newMaxSeqId={}, maxSeqId={}"
argument_list|,
name|newSeqIdFile
argument_list|,
name|newMaxSeqId
argument_list|,
name|maxSeqId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|ignored
parameter_list|)
block|{
comment|// latest hdfs throws this exception. it's all right if newSeqIdFile already exists
block|}
block|}
comment|// remove old ones
for|for
control|(
name|FileStatus
name|status
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|newSeqIdFile
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|walFS
operator|.
name|delete
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a new {@link Reader} for reading logs to split.    *    * @param file    * @return A new Reader instance, caller should close    * @throws IOException    * @throws CorruptedLogFileException    */
specifier|protected
name|Reader
name|getReader
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|boolean
name|skipErrors
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
throws|,
name|CorruptedLogFileException
block|{
name|Path
name|path
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|file
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Reader
name|in
decl_stmt|;
comment|// Check for possibly empty file. With appends, currently Hadoop reports a
comment|// zero length even if the file has been sync'd. Revisit if HDFS-376 or
comment|// HDFS-878 is committed.
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} might be still open, length is 0"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|FSUtils
operator|.
name|getInstance
argument_list|(
name|walFS
argument_list|,
name|conf
argument_list|)
operator|.
name|recoverFileLease
argument_list|(
name|walFS
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|=
name|getReader
argument_list|(
name|path
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
comment|// TODO should we ignore an empty, not-last log file if skip.errors
comment|// is false? Either way, the caller should decide what to do. E.g.
comment|// ignore if this is the last log in sequence.
comment|// TODO is this scenario still possible if the log has been
comment|// recovered (i.e. closed)
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not open {} for reading. File is empty"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// EOFException being ignored
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|FileNotFoundException
condition|)
block|{
comment|// A wal file may not exist anymore. Nothing can be recovered so move on
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} does not exist anymore"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|skipErrors
operator|||
name|e
operator|instanceof
name|InterruptedIOException
condition|)
block|{
throw|throw
name|e
throw|;
comment|// Don't mark the file corrupted if interrupted, or not skipErrors
block|}
name|CorruptedLogFileException
name|t
init|=
operator|new
name|CorruptedLogFileException
argument_list|(
literal|"skipErrors=true Could not open wal "
operator|+
name|path
operator|+
literal|" ignoring"
argument_list|)
decl_stmt|;
name|t
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
return|return
name|in
return|;
block|}
specifier|static
specifier|private
name|Entry
name|getNextLogLine
parameter_list|(
name|Reader
name|in
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|skipErrors
parameter_list|)
throws|throws
name|CorruptedLogFileException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|in
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
comment|// truncated files are expected if a RS crashes (see HBASE-2643)
name|LOG
operator|.
name|info
argument_list|(
literal|"EOF from wal {}. Continuing."
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If the IOE resulted from bad file format,
comment|// then this problem is idempotent and retrying won't help
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
operator|||
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Parse exception from wal {}. Continuing"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|skipErrors
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|CorruptedLogFileException
name|t
init|=
operator|new
name|CorruptedLogFileException
argument_list|(
literal|"skipErrors=true Ignoring exception"
operator|+
literal|" while parsing wal "
operator|+
name|path
operator|+
literal|". Marking as corrupted"
argument_list|)
decl_stmt|;
name|t
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
comment|/**    * Create a new {@link Writer} for writing log splits.    * @return a new Writer instance, caller should close    */
specifier|protected
name|Writer
name|createWriter
parameter_list|(
name|Path
name|logfile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|walFactory
operator|.
name|createRecoveredEditsWriter
argument_list|(
name|walFS
argument_list|,
name|logfile
argument_list|)
return|;
block|}
comment|/**    * Create a new {@link Reader} for reading logs to split.    * @return new Reader instance, caller should close    */
specifier|protected
name|Reader
name|getReader
parameter_list|(
name|Path
name|curLogFile
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|walFactory
operator|.
name|createReader
argument_list|(
name|walFS
argument_list|,
name|curLogFile
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|/**    * Get current open writers    */
specifier|private
name|int
name|getNumOpenWriters
parameter_list|()
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|outputSink
operator|!=
literal|null
condition|)
block|{
name|result
operator|+=
name|this
operator|.
name|outputSink
operator|.
name|getNumOpenWriters
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Contains some methods to control WAL-entries producer / consumer interactions    */
specifier|public
specifier|static
class|class
name|PipelineController
block|{
comment|// If an exception is thrown by one of the other threads, it will be
comment|// stored here.
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|thrown
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Wait/notify for when data has been produced by the writer thread,
comment|// consumed by the reader thread, or an exception occurred
specifier|public
specifier|final
name|Object
name|dataAvailable
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|void
name|writerThreadError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|thrown
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check for errors in the writer threads. If any is found, rethrow it.      */
name|void
name|checkForErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|Throwable
name|thrown
init|=
name|this
operator|.
name|thrown
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|thrown
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|thrown
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Class which accumulates edits and separates them into a buffer per region    * while simultaneously accounting RAM usage. Blocks if the RAM usage crosses    * a predefined threshold.    *    * Writer threads then pull region-specific buffers from this class.    */
specifier|public
specifier|static
class|class
name|EntryBuffers
block|{
name|PipelineController
name|controller
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
name|buffers
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|/* Track which regions are currently in the middle of writing. We don't allow        an IO thread to pick up bytes from a region if we're already writing        data for that region in a different IO thread. */
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|currentlyWriting
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|long
name|totalBuffered
init|=
literal|0
decl_stmt|;
name|long
name|maxHeapUsage
decl_stmt|;
name|boolean
name|splitWriterCreationBounded
decl_stmt|;
specifier|public
name|EntryBuffers
parameter_list|(
name|PipelineController
name|controller
parameter_list|,
name|long
name|maxHeapUsage
parameter_list|)
block|{
name|this
argument_list|(
name|controller
argument_list|,
name|maxHeapUsage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EntryBuffers
parameter_list|(
name|PipelineController
name|controller
parameter_list|,
name|long
name|maxHeapUsage
parameter_list|,
name|boolean
name|splitWriterCreationBounded
parameter_list|)
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|maxHeapUsage
operator|=
name|maxHeapUsage
expr_stmt|;
name|this
operator|.
name|splitWriterCreationBounded
operator|=
name|splitWriterCreationBounded
expr_stmt|;
block|}
comment|/**      * Append a log entry into the corresponding region buffer.      * Blocks if the total heap usage has crossed the specified threshold.      *      * @throws InterruptedException      * @throws IOException      */
specifier|public
name|void
name|appendEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|WALKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RegionEntryBuffer
name|buffer
decl_stmt|;
name|long
name|incrHeap
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|buffer
operator|=
name|buffers
operator|.
name|get
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|RegionEntryBuffer
argument_list|(
name|key
operator|.
name|getTableName
argument_list|()
argument_list|,
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|buffers
operator|.
name|put
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
name|incrHeap
operator|=
name|buffer
operator|.
name|appendEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// If we crossed the chunk threshold, wait for more space to be available
synchronized|synchronized
init|(
name|controller
operator|.
name|dataAvailable
init|)
block|{
name|totalBuffered
operator|+=
name|incrHeap
expr_stmt|;
while|while
condition|(
name|totalBuffered
operator|>
name|maxHeapUsage
operator|&&
name|controller
operator|.
name|thrown
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Used {} bytes of buffered edits, waiting for IO threads"
argument_list|,
name|totalBuffered
argument_list|)
expr_stmt|;
name|controller
operator|.
name|dataAvailable
operator|.
name|wait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
name|controller
operator|.
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|controller
operator|.
name|checkForErrors
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return RegionEntryBuffer a buffer of edits to be written.      */
specifier|synchronized
name|RegionEntryBuffer
name|getChunkToWrite
parameter_list|()
block|{
comment|// The core part of limiting opening writers is it doesn't return chunk only if the
comment|// heap size is over maxHeapUsage. Thus it doesn't need to create a writer for each
comment|// region during splitting. It will flush all the logs in the buffer after splitting
comment|// through a threadpool, which means the number of writers it created is under control.
if|if
condition|(
name|splitWriterCreationBounded
operator|&&
name|totalBuffered
operator|<
name|maxHeapUsage
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|biggestSize
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|biggestBufferKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
name|entry
range|:
name|buffers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|size
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|heapSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|biggestSize
operator|&&
operator|(
operator|!
name|currentlyWriting
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|biggestSize
operator|=
name|size
expr_stmt|;
name|biggestBufferKey
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|biggestBufferKey
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RegionEntryBuffer
name|buffer
init|=
name|buffers
operator|.
name|remove
argument_list|(
name|biggestBufferKey
argument_list|)
decl_stmt|;
name|currentlyWriting
operator|.
name|add
argument_list|(
name|biggestBufferKey
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
name|void
name|doneWriting
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|boolean
name|removed
init|=
name|currentlyWriting
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
assert|assert
name|removed
assert|;
block|}
name|long
name|size
init|=
name|buffer
operator|.
name|heapSize
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|controller
operator|.
name|dataAvailable
init|)
block|{
name|totalBuffered
operator|-=
name|size
expr_stmt|;
comment|// We may unblock writers
name|controller
operator|.
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
name|boolean
name|isRegionCurrentlyWriting
parameter_list|(
name|byte
index|[]
name|region
parameter_list|)
block|{
return|return
name|currentlyWriting
operator|.
name|contains
argument_list|(
name|region
argument_list|)
return|;
block|}
specifier|public
name|void
name|waitUntilDrained
parameter_list|()
block|{
synchronized|synchronized
init|(
name|controller
operator|.
name|dataAvailable
init|)
block|{
while|while
condition|(
name|totalBuffered
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|controller
operator|.
name|dataAvailable
operator|.
name|wait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got interrupted while waiting for EntryBuffers is drained"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
comment|/**    * A buffer of some number of edits for a given region.    * This accumulates edits and also provides a memory optimization in order to    * share a single byte array instance for the table and region name.    * Also tracks memory usage of the accumulated edits.    */
specifier|public
specifier|static
class|class
name|RegionEntryBuffer
implements|implements
name|HeapSize
block|{
name|long
name|heapInBuffer
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entryBuffer
decl_stmt|;
name|TableName
name|tableName
decl_stmt|;
name|byte
index|[]
name|encodedRegionName
decl_stmt|;
name|RegionEntryBuffer
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|region
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|encodedRegionName
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|entryBuffer
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|long
name|appendEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|internify
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entryBuffer
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|long
name|incrHeap
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|heapSize
argument_list|()
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
literal|2
operator|*
name|ClassSize
operator|.
name|REFERENCE
argument_list|)
operator|+
comment|// WALKey pointers
literal|0
decl_stmt|;
comment|// TODO linkedlist entry
name|heapInBuffer
operator|+=
name|incrHeap
expr_stmt|;
return|return
name|incrHeap
return|;
block|}
specifier|private
name|void
name|internify
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|WALKeyImpl
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|k
operator|.
name|internTableName
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|k
operator|.
name|internEncodedRegionName
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|heapInBuffer
return|;
block|}
specifier|public
name|byte
index|[]
name|getEncodedRegionName
parameter_list|()
block|{
return|return
name|encodedRegionName
return|;
block|}
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|getEntryBuffer
parameter_list|()
block|{
return|return
name|entryBuffer
return|;
block|}
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|WriterThread
extends|extends
name|Thread
block|{
specifier|private
specifier|volatile
name|boolean
name|shouldStop
init|=
literal|false
decl_stmt|;
specifier|private
name|PipelineController
name|controller
decl_stmt|;
specifier|private
name|EntryBuffers
name|entryBuffers
decl_stmt|;
specifier|private
name|OutputSink
name|outputSink
init|=
literal|null
decl_stmt|;
name|WriterThread
parameter_list|(
name|PipelineController
name|controller
parameter_list|,
name|EntryBuffers
name|entryBuffers
parameter_list|,
name|OutputSink
name|sink
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-Writer-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|entryBuffers
operator|=
name|entryBuffers
expr_stmt|;
name|outputSink
operator|=
name|sink
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doRun
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exiting thread"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|controller
operator|.
name|writerThreadError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doRun
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Writer thread starting"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|RegionEntryBuffer
name|buffer
init|=
name|entryBuffers
operator|.
name|getChunkToWrite
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
comment|// No data currently available, wait on some more to show up
synchronized|synchronized
init|(
name|controller
operator|.
name|dataAvailable
init|)
block|{
if|if
condition|(
name|shouldStop
operator|&&
operator|!
name|this
operator|.
name|outputSink
operator|.
name|flush
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|controller
operator|.
name|dataAvailable
operator|.
name|wait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shouldStop
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
continue|continue;
block|}
assert|assert
name|buffer
operator|!=
literal|null
assert|;
try|try
block|{
name|writeBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|entryBuffers
operator|.
name|doneWriting
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeBuffer
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|outputSink
operator|.
name|append
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|void
name|finish
parameter_list|()
block|{
synchronized|synchronized
init|(
name|controller
operator|.
name|dataAvailable
init|)
block|{
name|shouldStop
operator|=
literal|true
expr_stmt|;
name|controller
operator|.
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * The following class is an abstraction class to provide a common interface to support    * different ways of consuming recovered edits.    */
specifier|public
specifier|static
specifier|abstract
class|class
name|OutputSink
block|{
specifier|protected
name|PipelineController
name|controller
decl_stmt|;
specifier|protected
name|EntryBuffers
name|entryBuffers
decl_stmt|;
specifier|protected
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|SinkWriter
argument_list|>
name|writers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|regionMaximumEditLogSeqNum
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|WriterThread
argument_list|>
name|writerThreads
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/* Set of regions which we've decided should not output edits */
specifier|protected
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|blacklistedRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|closeAndCleanCompleted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|writersClosed
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|int
name|numThreads
decl_stmt|;
specifier|protected
name|CancelableProgressable
name|reporter
init|=
literal|null
decl_stmt|;
specifier|protected
name|AtomicLong
name|skippedEdits
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
literal|null
decl_stmt|;
specifier|public
name|OutputSink
parameter_list|(
name|PipelineController
name|controller
parameter_list|,
name|EntryBuffers
name|entryBuffers
parameter_list|,
name|int
name|numWriters
parameter_list|)
block|{
name|numThreads
operator|=
name|numWriters
expr_stmt|;
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|entryBuffers
operator|=
name|entryBuffers
expr_stmt|;
block|}
name|void
name|setReporter
parameter_list|(
name|CancelableProgressable
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
comment|/**      * Start the threads that will pump data from the entryBuffers to the output files.      */
specifier|public
specifier|synchronized
name|void
name|startWriterThreads
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|WriterThread
name|t
init|=
operator|new
name|WriterThread
argument_list|(
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|this
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|writerThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *      * Update region's maximum edit log SeqNum.      */
name|void
name|updateRegionMaximumEditLogSeqNum
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionMaximumEditLogSeqNum
init|)
block|{
name|String
name|regionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|currentMaxSeqNum
init|=
name|regionMaximumEditLogSeqNum
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentMaxSeqNum
operator|==
literal|null
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
operator|>
name|currentMaxSeqNum
condition|)
block|{
name|regionMaximumEditLogSeqNum
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return the number of currently opened writers      */
name|int
name|getNumOpenWriters
parameter_list|()
block|{
return|return
name|this
operator|.
name|writers
operator|.
name|size
argument_list|()
return|;
block|}
name|long
name|getSkippedEdits
parameter_list|()
block|{
return|return
name|this
operator|.
name|skippedEdits
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Wait for writer threads to dump all info to the sink      * @return true when there is no error      * @throws IOException      */
specifier|protected
name|boolean
name|finishWriting
parameter_list|(
name|boolean
name|interrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for split writer threads to finish"
argument_list|)
expr_stmt|;
name|boolean
name|progress_failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
name|t
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|interrupt
condition|)
block|{
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// interrupt the writer threads. We are stopping now.
block|}
block|}
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
if|if
condition|(
operator|!
name|progress_failed
operator|&&
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
block|}
name|controller
operator|.
name|checkForErrors
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} split writers finished; closing."
argument_list|,
name|this
operator|.
name|writerThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
operator|!
name|progress_failed
operator|)
return|;
block|}
specifier|public
specifier|abstract
name|List
argument_list|<
name|Path
argument_list|>
name|finishWritingAndClose
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * @return a map from encoded region ID to the number of edits written out for that region.      */
specifier|public
specifier|abstract
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
function_decl|;
comment|/**      * @return number of regions we've recovered      */
specifier|public
specifier|abstract
name|int
name|getNumberOfRecoveredRegions
parameter_list|()
function_decl|;
comment|/**      * @param buffer A WAL Edit Entry      * @throws IOException      */
specifier|public
specifier|abstract
name|void
name|append
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * WriterThread call this function to help flush internal remaining edits in buffer before close      * @return true when underlying sink has something to flush      */
specifier|public
name|boolean
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Some WALEdit's contain only KV's for account on what happened to a region.      * Not all sinks will want to get all of those edits.      *      * @return Return true if this sink wants to accept this region-level WALEdit.      */
specifier|public
specifier|abstract
name|boolean
name|keepRegionEvent
parameter_list|(
name|Entry
name|entry
parameter_list|)
function_decl|;
block|}
comment|/**    * Class that manages the output streams from the log splitting process.    */
class|class
name|LogRecoveredEditsOutputSink
extends|extends
name|OutputSink
block|{
specifier|public
name|LogRecoveredEditsOutputSink
parameter_list|(
name|PipelineController
name|controller
parameter_list|,
name|EntryBuffers
name|entryBuffers
parameter_list|,
name|int
name|numWriters
parameter_list|)
block|{
comment|// More threads could potentially write faster at the expense
comment|// of causing more disk seeks as the logs are split.
comment|// 3. After a certain setting (probably around 3) the
comment|// process will be bound on the reader in the current
comment|// implementation anyway.
name|super
argument_list|(
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|numWriters
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return null if failed to report progress      * @throws IOException      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|finishWritingAndClose
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|isSuccessful
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|isSuccessful
operator|=
name|finishWriting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|result
operator|=
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
name|closeLogWriters
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|thrown
argument_list|)
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isSuccessful
condition|)
block|{
name|splits
operator|=
name|result
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
comment|// delete the one with fewer wal entries
specifier|private
name|void
name|deleteOneWithFewerEntries
parameter_list|(
name|WriterAndPath
name|wap
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|dstMinLogSeqNum
init|=
operator|-
literal|1L
decl_stmt|;
try|try
init|(
name|WAL
operator|.
name|Reader
name|reader
init|=
name|walFactory
operator|.
name|createReader
argument_list|(
name|walFS
argument_list|,
name|dst
argument_list|)
init|)
block|{
name|WAL
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|dstMinLogSeqNum
operator|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got EOF when reading first WAL entry from {}, an empty or broken WAL file?"
argument_list|,
name|dst
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wap
operator|.
name|minLogSeqNum
operator|<
name|dstMinLogSeqNum
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old edits file. It could be the result of a previous failed"
operator|+
literal|" split attempt or we have duplicated wal entries. Deleting "
operator|+
name|dst
operator|+
literal|", length="
operator|+
name|walFS
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|delete
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting of old {}"
argument_list|,
name|dst
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed deleting of old "
operator|+
name|dst
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old edits file and we have less entries. Deleting "
operator|+
name|wap
operator|.
name|p
operator|+
literal|", length="
operator|+
name|walFS
operator|.
name|getFileStatus
argument_list|(
name|wap
operator|.
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|delete
argument_list|(
name|wap
operator|.
name|p
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting of {}"
argument_list|,
name|wap
operator|.
name|p
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed deleting of "
operator|+
name|wap
operator|.
name|p
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Close all of the output streams.      * @return the list of paths written.      */
name|List
argument_list|<
name|Path
argument_list|>
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|closeAndCleanCompleted
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|closeThreadPool
init|=
name|Threads
operator|.
name|getBoundedCachedThreadPool
argument_list|(
name|numThreads
argument_list|,
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"split-log-closeStream-"
operator|+
name|count
operator|++
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|closeThreadPool
argument_list|)
decl_stmt|;
name|boolean
name|progress_failed
decl_stmt|;
try|try
block|{
name|progress_failed
operator|=
name|executeCloseTask
argument_list|(
name|completionService
argument_list|,
name|thrown
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeThreadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|thrown
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
name|writersClosed
operator|=
literal|true
expr_stmt|;
name|closeAndCleanCompleted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|progress_failed
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|paths
return|;
block|}
comment|/**      * @param completionService threadPool to execute the closing tasks      * @param thrown store the exceptions      * @param paths arrayList to store the paths written      * @return if close tasks executed successful      */
name|boolean
name|executeCloseTask
parameter_list|(
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|completionService
parameter_list|,
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SinkWriter
argument_list|>
name|writersEntry
range|:
name|writers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Submitting close of "
operator|+
operator|(
operator|(
name|WriterAndPath
operator|)
name|writersEntry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|p
argument_list|)
expr_stmt|;
block|}
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|WriterAndPath
name|wap
init|=
operator|(
name|WriterAndPath
operator|)
name|writersEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Path
name|dst
init|=
name|closeWriter
argument_list|(
name|writersEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|wap
argument_list|,
name|thrown
argument_list|)
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|dst
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|boolean
name|progress_failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|this
operator|.
name|writers
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|progress_failed
operator|&&
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|progress_failed
return|;
block|}
name|Path
name|closeWriter
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|WriterAndPath
name|wap
parameter_list|,
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Closing {}"
argument_list|,
name|wap
operator|.
name|p
argument_list|)
expr_stmt|;
try|try
block|{
name|wap
operator|.
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not close log at {}"
argument_list|,
name|wap
operator|.
name|p
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed wap "
operator|+
name|wap
operator|.
name|p
operator|+
literal|" (wrote "
operator|+
name|wap
operator|.
name|editsWritten
operator|+
literal|" edits, skipped "
operator|+
name|wap
operator|.
name|editsSkipped
operator|+
literal|" edits in "
operator|+
operator|(
name|wap
operator|.
name|nanosSpent
operator|/
literal|1000
operator|/
literal|1000
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wap
operator|.
name|editsWritten
operator|==
literal|0
condition|)
block|{
comment|// just remove the empty recovered.edits file
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|wap
operator|.
name|p
argument_list|)
operator|&&
operator|!
name|walFS
operator|.
name|delete
argument_list|(
name|wap
operator|.
name|p
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting empty {}"
argument_list|,
name|wap
operator|.
name|p
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed deleting empty  "
operator|+
name|wap
operator|.
name|p
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
name|Path
name|dst
init|=
name|getCompletedRecoveredEditsFilePath
argument_list|(
name|wap
operator|.
name|p
argument_list|,
name|regionMaximumEditLogSeqNum
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|dst
operator|.
name|equals
argument_list|(
name|wap
operator|.
name|p
argument_list|)
operator|&&
name|walFS
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
name|deleteOneWithFewerEntries
argument_list|(
name|wap
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|// Skip the unit tests which create a splitter that reads and
comment|// writes the data without touching disk.
comment|// TestHLogSplit#testThreading is an example.
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|wap
operator|.
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|walFS
operator|.
name|rename
argument_list|(
name|wap
operator|.
name|p
argument_list|,
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed renaming "
operator|+
name|wap
operator|.
name|p
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Rename {} to {}"
argument_list|,
name|wap
operator|.
name|p
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not rename {} to {}"
argument_list|,
name|wap
operator|.
name|p
argument_list|,
name|dst
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|dst
return|;
block|}
specifier|private
name|List
argument_list|<
name|IOException
argument_list|>
name|closeLogWriters
parameter_list|(
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writersClosed
condition|)
block|{
return|return
name|thrown
return|;
block|}
if|if
condition|(
name|thrown
operator|==
literal|null
condition|)
block|{
name|thrown
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|t
operator|.
name|shouldStop
operator|=
literal|true
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|t
operator|.
name|join
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|WriterAndPath
name|wap
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SinkWriter
name|tmpWAP
range|:
name|writers
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|wap
operator|=
operator|(
name|WriterAndPath
operator|)
name|tmpWAP
expr_stmt|;
name|wap
operator|.
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't close log at {}"
argument_list|,
name|wap
operator|.
name|p
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed log "
operator|+
name|wap
operator|.
name|p
operator|+
literal|" (wrote "
operator|+
name|wap
operator|.
name|editsWritten
operator|+
literal|" edits in "
operator|+
operator|(
name|wap
operator|.
name|nanosSpent
operator|/
literal|1000
operator|/
literal|1000
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
block|}
name|writersClosed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|thrown
return|;
block|}
comment|/**      * Get a writer and path for a log starting at the given entry. This function is threadsafe so      * long as multiple threads are always acting on different regions.      * @return null if this region shouldn't output any logs      */
name|WriterAndPath
name|getWriterAndPath
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|boolean
name|reusable
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|region
index|[]
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|String
name|regionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|WriterAndPath
name|ret
init|=
operator|(
name|WriterAndPath
operator|)
name|writers
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
comment|// If we already decided that this region doesn't get any output
comment|// we don't need to check again.
if|if
condition|(
name|blacklistedRegions
operator|.
name|contains
argument_list|(
name|region
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ret
operator|=
name|createWAP
argument_list|(
name|region
argument_list|,
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|blacklistedRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|reusable
condition|)
block|{
name|writers
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * @return a path with a write for that path. caller should close.      */
name|WriterAndPath
name|createWAP
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|Entry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tmpDirName
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|TEMPORARY_FS_DIRECTORY_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_TEMPORARY_HDFS_DIRECTORY
argument_list|)
decl_stmt|;
name|Path
name|regionedits
init|=
name|getRegionSplitEditsPath
argument_list|(
name|entry
argument_list|,
name|fileBeingSplit
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tmpDirName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionedits
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FileSystem
name|walFs
init|=
name|FSUtils
operator|.
name|getWALFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|walFs
operator|.
name|exists
argument_list|(
name|regionedits
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found old edits file. It could be the "
operator|+
literal|"result of a previous failed split attempt. Deleting "
operator|+
name|regionedits
operator|+
literal|", length="
operator|+
name|walFs
operator|.
name|getFileStatus
argument_list|(
name|regionedits
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walFs
operator|.
name|delete
argument_list|(
name|regionedits
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed delete of old {}"
argument_list|,
name|regionedits
argument_list|)
expr_stmt|;
block|}
block|}
name|Writer
name|w
init|=
name|createWriter
argument_list|(
name|regionedits
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating writer path={}"
argument_list|,
name|regionedits
argument_list|)
expr_stmt|;
return|return
operator|new
name|WriterAndPath
argument_list|(
name|regionedits
argument_list|,
name|w
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
argument_list|)
return|;
block|}
name|void
name|filterCellByStore
parameter_list|(
name|Entry
name|logEntry
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|maxSeqIdInStores
init|=
name|regionMaxSeqIdInStores
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|MapUtils
operator|.
name|isEmpty
argument_list|(
name|maxSeqIdInStores
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Create the array list for the cells that aren't filtered.
comment|// We make the assumption that most cells will be kept.
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|keptCells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|logEntry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|logEntry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|cell
argument_list|,
name|WALEdit
operator|.
name|METAFAMILY
argument_list|)
condition|)
block|{
name|keptCells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|family
init|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|Long
name|maxSeqId
init|=
name|maxSeqIdInStores
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Do not skip cell even if maxSeqId is null. Maybe we are in a rolling upgrade,
comment|// or the master was crashed before and we can not get the information.
if|if
condition|(
name|maxSeqId
operator|==
literal|null
operator|||
name|maxSeqId
operator|.
name|longValue
argument_list|()
operator|<
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
condition|)
block|{
name|keptCells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Anything in the keptCells array list is still live.
comment|// So rather than removing the cells from the array list
comment|// which would be an O(n^2) operation, we just replace the list
name|logEntry
operator|.
name|getEdit
argument_list|()
operator|.
name|setCells
argument_list|(
name|keptCells
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|appendBuffer
argument_list|(
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|WriterAndPath
name|appendBuffer
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|,
name|boolean
name|reusable
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
name|buffer
operator|.
name|entryBuffer
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"got an empty buffer, skipping"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|WriterAndPath
name|wap
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
name|logEntry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|wap
operator|==
literal|null
condition|)
block|{
name|wap
operator|=
name|getWriterAndPath
argument_list|(
name|logEntry
argument_list|,
name|reusable
argument_list|)
expr_stmt|;
if|if
condition|(
name|wap
operator|==
literal|null
condition|)
block|{
comment|// This log spews the full edit. Can be massive in the log. Enable only debugging
comment|// WAL lost edit issues.
name|LOG
operator|.
name|trace
argument_list|(
literal|"getWriterAndPath decided we don't need to write edits for {}"
argument_list|,
name|logEntry
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|filterCellByStore
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|logEntry
operator|.
name|getEdit
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wap
operator|.
name|w
operator|.
name|append
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateRegionMaximumEditLogSeqNum
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|wap
operator|.
name|incrementSkippedEdits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Pass along summary statistics
name|wap
operator|.
name|incrementEdits
argument_list|(
name|editsCount
argument_list|)
expr_stmt|;
name|wap
operator|.
name|incrementNanoTime
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|e
operator|instanceof
name|RemoteException
condition|?
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
else|:
name|e
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Got while writing log entry to log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|wap
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|keepRegionEvent
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|WALEdit
operator|.
name|isCompactionMarker
argument_list|(
name|cell
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * @return a map from encoded region ID to the number of edits written out for that region.      */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|ret
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SinkWriter
argument_list|>
name|entry
range|:
name|writers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|editsWritten
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfRecoveredRegions
parameter_list|()
block|{
return|return
name|writers
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**    *    */
class|class
name|BoundedLogWriterCreationOutputSink
extends|extends
name|LogRecoveredEditsOutputSink
block|{
specifier|private
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|regionRecoverStatMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|BoundedLogWriterCreationOutputSink
parameter_list|(
name|PipelineController
name|controller
parameter_list|,
name|EntryBuffers
name|entryBuffers
parameter_list|,
name|int
name|numWriters
parameter_list|)
block|{
name|super
argument_list|(
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|numWriters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|finishWritingAndClose
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|isSuccessful
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|result
decl_stmt|;
try|try
block|{
name|isSuccessful
operator|=
name|finishWriting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|result
operator|=
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isSuccessful
condition|)
block|{
name|splits
operator|=
name|result
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
annotation|@
name|Override
name|boolean
name|executeCloseTask
parameter_list|(
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|completionService
parameter_list|,
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
name|buffer
range|:
name|entryBuffers
operator|.
name|buffers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitting writeThenClose of {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|buffer
operator|.
name|getValue
argument_list|()
operator|.
name|encodedRegionName
argument_list|)
argument_list|)
expr_stmt|;
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dst
init|=
name|writeThenClose
argument_list|(
name|buffer
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|dst
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|boolean
name|progress_failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|entryBuffers
operator|.
name|buffers
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|progress_failed
operator|&&
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|progress_failed
return|;
block|}
comment|/**      * since the splitting process may create multiple output files, we need a map      * regionRecoverStatMap to track the output count of each region.      * @return a map from encoded region ID to the number of edits written out for that region.      */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|regionRecoverStatMapResult
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|regionRecoverStatMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|regionRecoverStatMapResult
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regionRecoverStatMapResult
return|;
block|}
comment|/**      * @return the number of recovered regions      */
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfRecoveredRegions
parameter_list|()
block|{
return|return
name|regionRecoverStatMap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Append the buffer to a new recovered edits file, then close it after all done      * @param buffer contain all entries of a certain region      * @throws IOException when closeWriter failed      */
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|writeThenClose
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|writeThenClose
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|WriterAndPath
name|wap
init|=
name|appendBuffer
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|wap
operator|!=
literal|null
condition|)
block|{
name|String
name|encodedRegionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|buffer
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
name|Long
name|value
init|=
name|regionRecoverStatMap
operator|.
name|putIfAbsent
argument_list|(
name|encodedRegionName
argument_list|,
name|wap
operator|.
name|editsWritten
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Long
name|newValue
init|=
name|regionRecoverStatMap
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
operator|+
name|wap
operator|.
name|editsWritten
decl_stmt|;
name|regionRecoverStatMap
operator|.
name|put
argument_list|(
name|encodedRegionName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
name|Path
name|dst
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|wap
operator|!=
literal|null
condition|)
block|{
name|dst
operator|=
name|closeWriter
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|buffer
operator|.
name|encodedRegionName
argument_list|)
argument_list|,
name|wap
argument_list|,
name|thrown
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|thrown
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
return|return
name|dst
return|;
block|}
block|}
comment|/**    * Class wraps the actual writer which writes data out and related statistics    */
specifier|public
specifier|abstract
specifier|static
class|class
name|SinkWriter
block|{
comment|/* Count of edits written to this path */
name|long
name|editsWritten
init|=
literal|0
decl_stmt|;
comment|/* Count of edits skipped to this path */
name|long
name|editsSkipped
init|=
literal|0
decl_stmt|;
comment|/* Number of nanos spent writing to this log */
name|long
name|nanosSpent
init|=
literal|0
decl_stmt|;
name|void
name|incrementEdits
parameter_list|(
name|int
name|edits
parameter_list|)
block|{
name|editsWritten
operator|+=
name|edits
expr_stmt|;
block|}
name|void
name|incrementSkippedEdits
parameter_list|(
name|int
name|skipped
parameter_list|)
block|{
name|editsSkipped
operator|+=
name|skipped
expr_stmt|;
block|}
name|void
name|incrementNanoTime
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|nanosSpent
operator|+=
name|nanos
expr_stmt|;
block|}
block|}
comment|/**    * Private data structure that wraps a Writer and its Path, also collecting statistics about the    * data written to this output.    */
specifier|private
specifier|final
specifier|static
class|class
name|WriterAndPath
extends|extends
name|SinkWriter
block|{
specifier|final
name|Path
name|p
decl_stmt|;
specifier|final
name|Writer
name|w
decl_stmt|;
specifier|final
name|long
name|minLogSeqNum
decl_stmt|;
name|WriterAndPath
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|Writer
name|w
parameter_list|,
specifier|final
name|long
name|minLogSeqNum
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
name|this
operator|.
name|minLogSeqNum
operator|=
name|minLogSeqNum
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CorruptedLogFileException
extends|extends
name|Exception
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|CorruptedLogFileException
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** A struct used by getMutationsFromWALEntry */
specifier|public
specifier|static
class|class
name|MutationReplay
implements|implements
name|Comparable
argument_list|<
name|MutationReplay
argument_list|>
block|{
specifier|public
name|MutationReplay
parameter_list|(
name|MutationType
name|type
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|long
name|nonce
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|mutation
operator|=
name|mutation
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mutation
operator|.
name|getDurability
argument_list|()
operator|!=
name|Durability
operator|.
name|SKIP_WAL
condition|)
block|{
comment|// using ASYNC_WAL for relay
name|this
operator|.
name|mutation
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nonceGroup
operator|=
name|nonceGroup
expr_stmt|;
name|this
operator|.
name|nonce
operator|=
name|nonce
expr_stmt|;
block|}
specifier|public
specifier|final
name|MutationType
name|type
decl_stmt|;
specifier|public
specifier|final
name|Mutation
name|mutation
decl_stmt|;
specifier|public
specifier|final
name|long
name|nonceGroup
decl_stmt|;
specifier|public
specifier|final
name|long
name|nonce
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|MutationReplay
name|d
parameter_list|)
block|{
return|return
name|this
operator|.
name|mutation
operator|.
name|compareTo
argument_list|(
name|d
operator|.
name|mutation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|MutationReplay
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|MutationReplay
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutation
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**    * This function is used to construct mutations from a WALEntry. It also    * reconstructs WALKey&amp; WALEdit from the passed in WALEntry    * @param entry    * @param cells    * @param logEntry pair of WALKey and WALEdit instance stores WALKey and WALEdit instances    *          extracted from the passed in WALEntry.    * @return list of Pair&lt;MutationType, Mutation&gt; to be replayed    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|MutationReplay
argument_list|>
name|getMutationsFromWALEntry
parameter_list|(
name|WALEntry
name|entry
parameter_list|,
name|CellScanner
name|cells
parameter_list|,
name|Pair
argument_list|<
name|WALKey
argument_list|,
name|WALEdit
argument_list|>
name|logEntry
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
comment|// return an empty array
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|long
name|replaySeqId
init|=
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|hasOrigSequenceNumber
argument_list|()
operator|)
condition|?
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getOrigSequenceNumber
argument_list|()
else|:
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSequenceNumber
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|entry
operator|.
name|getAssociatedCellCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MutationReplay
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Cell
name|previousCell
init|=
literal|null
decl_stmt|;
name|Mutation
name|m
init|=
literal|null
decl_stmt|;
name|WALKeyImpl
name|key
init|=
literal|null
decl_stmt|;
name|WALEdit
name|val
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|logEntry
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
operator|new
name|WALEdit
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|// Throw index out of bounds if our cell count is off
if|if
condition|(
operator|!
name|cells
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"Expected="
operator|+
name|count
operator|+
literal|", index="
operator|+
name|i
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cells
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|val
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|boolean
name|isNewRowOrType
init|=
name|previousCell
operator|==
literal|null
operator|||
name|previousCell
operator|.
name|getTypeByte
argument_list|()
operator|!=
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|||
operator|!
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|previousCell
argument_list|,
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNewRowOrType
condition|)
block|{
comment|// Create new mutation
if|if
condition|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|cell
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|Delete
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deletes don't have nonces.
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|MutationReplay
argument_list|(
name|MutationType
operator|.
name|DELETE
argument_list|,
name|m
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
operator|new
name|Put
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Puts might come from increment or append, thus we need nonces.
name|long
name|nonceGroup
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|hasNonceGroup
argument_list|()
condition|?
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getNonceGroup
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
name|long
name|nonce
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|hasNonce
argument_list|()
condition|?
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getNonce
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|MutationReplay
argument_list|(
name|MutationType
operator|.
name|PUT
argument_list|,
name|m
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|cell
argument_list|)
condition|)
block|{
operator|(
operator|(
name|Delete
operator|)
name|m
operator|)
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|Put
operator|)
name|m
operator|)
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|setDurability
argument_list|(
name|durability
argument_list|)
expr_stmt|;
name|previousCell
operator|=
name|cell
expr_stmt|;
block|}
comment|// reconstruct WALKey
if|if
condition|(
name|logEntry
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALKey
name|walKeyProto
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|walKeyProto
operator|.
name|getClusterIdsCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|UUID
name|uuid
range|:
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterIdsList
argument_list|()
control|)
block|{
name|clusterIds
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|uuid
operator|.
name|getMostSigBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSigBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
operator|new
name|WALKeyImpl
argument_list|(
name|walKeyProto
operator|.
name|getEncodedRegionName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|walKeyProto
operator|.
name|getTableName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|replaySeqId
argument_list|,
name|walKeyProto
operator|.
name|getWriteTime
argument_list|()
argument_list|,
name|clusterIds
argument_list|,
name|walKeyProto
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|walKeyProto
operator|.
name|getNonce
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|logEntry
operator|.
name|setFirst
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|logEntry
operator|.
name|setSecond
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|mutations
return|;
block|}
block|}
end_class

end_unit

