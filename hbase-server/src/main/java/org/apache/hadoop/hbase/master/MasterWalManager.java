begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class abstracts a bunch of operations the HMaster needs  * when splitting log files e.g. finding log files, dirs etc.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MasterWalManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MasterWalManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|PathFilter
name|META_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|AbstractFSWALProvider
operator|.
name|isMetaFile
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
specifier|static
name|PathFilter
name|NON_META_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
operator|!
name|AbstractFSWALProvider
operator|.
name|isMetaFile
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// metrics for master
comment|// TODO: Rename it, since those metrics are split-manager related
specifier|private
specifier|final
name|MetricsMasterFileSystem
name|metricsMasterFilesystem
init|=
operator|new
name|MetricsMasterFileSystem
argument_list|()
decl_stmt|;
comment|// Keep around for convenience.
specifier|private
specifier|final
name|MasterServices
name|services
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
comment|// The Path to the old logs dir
specifier|private
specifier|final
name|Path
name|oldLogDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootDir
decl_stmt|;
comment|// create the split log lock
specifier|private
specifier|final
name|Lock
name|splitLogLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SplitLogManager
name|splitLogManager
decl_stmt|;
comment|// Is the fileystem ok?
specifier|private
specifier|volatile
name|boolean
name|fsOk
init|=
literal|true
decl_stmt|;
specifier|public
name|MasterWalManager
parameter_list|(
name|MasterServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|services
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getWALFileSystem
argument_list|()
argument_list|,
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getWALRootDir
argument_list|()
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MasterWalManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|MasterServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
name|this
operator|.
name|services
operator|=
name|services
expr_stmt|;
name|this
operator|.
name|splitLogManager
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|services
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|oldLogDir
operator|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|splitLogManager
operator|!=
literal|null
condition|)
block|{
name|splitLogManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|SplitLogManager
name|getSplitLogManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|splitLogManager
return|;
block|}
comment|/**    * Get the directory where old logs go    * @return the dir    */
name|Path
name|getOldLogDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|oldLogDir
return|;
block|}
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|fs
return|;
block|}
comment|/**    * Checks to see if the file system is still accessible.    * If not, sets closed    * @return false if file system is not available    */
specifier|private
name|boolean
name|checkFileSystem
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|fsOk
condition|)
block|{
try|try
block|{
name|FSUtils
operator|.
name|checkFileSystemAvailable
argument_list|(
name|this
operator|.
name|fs
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|checkDfsSafeMode
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|services
operator|.
name|abort
argument_list|(
literal|"Shutting down HBase cluster: file system not available"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsOk
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|fsOk
return|;
block|}
comment|/**    * @return Return listing of ServerNames found in the filesystem under the WAL directory    *   that COULD BE 'alive'; excludes those that have a '-splitting' suffix as these are already    *   being split -- they cannot be 'alive'.    */
specifier|public
name|Set
argument_list|<
name|ServerName
argument_list|>
name|getLiveServersFromWALDir
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|walDirPath
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|walDirForLiveServers
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|walDirPath
argument_list|,
name|p
lambda|->
operator|!
name|p
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|AbstractFSWALProvider
operator|.
name|SPLITTING_EXT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|walDirForLiveServers
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
return|return
name|Stream
operator|.
name|of
argument_list|(
name|walDirForLiveServers
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
block|{
name|ServerName
name|serverName
init|=
name|AbstractFSWALProvider
operator|.
name|getServerNameFromWALDirectoryName
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Log folder {} doesn't look like its name includes a "
operator|+
literal|"region server name; leaving in place. If you see later errors about missing "
operator|+
literal|"write ahead logs they may be saved in this location."
argument_list|,
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|serverName
return|;
block|}
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|!=
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Inspect the log directory to find dead servers which need recovery work    * @return A set of ServerNames which aren't running but still have WAL files left in file system    * @deprecated With proc-v2, we can record the crash server with procedure store, so do not need    *             to scan the wal directory to find out the splitting wal directory any more. Leave    *             it here only because {@code RecoverMetaProcedure}(which is also deprecated) uses    *             it.    */
annotation|@
name|Deprecated
specifier|public
name|Set
argument_list|<
name|ServerName
argument_list|>
name|getFailedServersFromLogFolders
parameter_list|()
block|{
name|boolean
name|retrySplitting
init|=
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.hlog.split.skip.errors"
argument_list|,
name|WALSplitter
operator|.
name|SPLIT_SKIP_ERRORS_DEFAULT
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|logsDirPath
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
do|do
block|{
if|if
condition|(
name|services
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Master stopped while trying to get failed servers."
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|logsDirPath
argument_list|)
condition|)
return|return
name|serverNames
return|;
name|FileStatus
index|[]
name|logFolders
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|logsDirPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Get online servers after getting log folders to avoid log folder deletion of newly
comment|// checked in region servers . see HBASE-5916
name|Set
argument_list|<
name|ServerName
argument_list|>
name|onlineServers
init|=
name|services
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|logFolders
operator|==
literal|null
operator|||
name|logFolders
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No log files to split, proceeding..."
argument_list|)
expr_stmt|;
return|return
name|serverNames
return|;
block|}
for|for
control|(
name|FileStatus
name|status
range|:
name|logFolders
control|)
block|{
name|FileStatus
index|[]
name|curLogFiles
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|curLogFiles
operator|==
literal|null
operator|||
name|curLogFiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// Empty log folder. No recovery needed
continue|continue;
block|}
specifier|final
name|ServerName
name|serverName
init|=
name|AbstractFSWALProvider
operator|.
name|getServerNameFromWALDirectoryName
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|serverName
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Log folder "
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|+
literal|" doesn't look like its name includes a "
operator|+
literal|"region server name; leaving in place. If you see later errors about missing "
operator|+
literal|"write ahead logs they may be saved in this location."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|onlineServers
operator|.
name|contains
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Log folder "
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|+
literal|" doesn't belong "
operator|+
literal|"to a known region server, splitting"
argument_list|)
expr_stmt|;
name|serverNames
operator|.
name|add
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Log folder "
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|+
literal|" belongs to an existing region server"
argument_list|)
expr_stmt|;
block|}
block|}
name|retrySplitting
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed getting failed servers to be recovered."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkFileSystem
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad Filesystem, exiting"
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|retrySplitting
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hlog.split.failure.retry.interval"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted, aborting since cannot return w/o splitting"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|retrySplitting
operator|=
literal|false
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|retrySplitting
condition|)
do|;
return|return
name|serverNames
return|;
block|}
specifier|public
name|void
name|splitLog
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
name|splitLog
argument_list|(
name|Collections
operator|.
expr|<
name|ServerName
operator|>
name|singleton
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Specialized method to handle the splitting for meta WAL    * @param serverName logs belonging to this server will be split    */
specifier|public
name|void
name|splitMetaLog
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
name|splitMetaLog
argument_list|(
name|Collections
operator|.
expr|<
name|ServerName
operator|>
name|singleton
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Specialized method to handle the splitting for meta WAL    * @param serverNames logs belonging to these servers will be split    */
specifier|public
name|void
name|splitMetaLog
parameter_list|(
specifier|final
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverNames
parameter_list|)
throws|throws
name|IOException
block|{
name|splitLog
argument_list|(
name|serverNames
argument_list|,
name|META_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"UL_UNRELEASED_LOCK"
argument_list|,
name|justification
operator|=
literal|"We only release this lock when we set it. Updates to code that uses it should verify use "
operator|+
literal|"of the guard boolean."
argument_list|)
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|getLogDirs
parameter_list|(
specifier|final
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverNames
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|logDirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|needReleaseLock
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|services
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
comment|// during master initialization, we could have multiple places splitting a same wal
comment|// XXX: Does this still exist after we move to proc-v2?
name|this
operator|.
name|splitLogLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|needReleaseLock
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|ServerName
name|serverName
range|:
name|serverNames
control|)
block|{
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|serverName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|splitDir
init|=
name|logDir
operator|.
name|suffix
argument_list|(
name|AbstractFSWALProvider
operator|.
name|SPLITTING_EXT
argument_list|)
decl_stmt|;
comment|// Rename the directory so a rogue RS doesn't create more WALs
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|logDir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|rename
argument_list|(
name|logDir
argument_list|,
name|splitDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed fs.rename for log split: "
operator|+
name|logDir
argument_list|)
throw|;
block|}
name|logDir
operator|=
name|splitDir
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renamed region directory: "
operator|+
name|splitDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|splitDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Log dir for server "
operator|+
name|serverName
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|logDirs
operator|.
name|add
argument_list|(
name|splitDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkFileSystem
argument_list|()
condition|)
block|{
name|this
operator|.
name|services
operator|.
name|abort
argument_list|(
literal|"Aborting due to filesystem unavailable"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|needReleaseLock
condition|)
block|{
name|this
operator|.
name|splitLogLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|logDirs
return|;
block|}
specifier|public
name|void
name|splitLog
parameter_list|(
specifier|final
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverNames
parameter_list|)
throws|throws
name|IOException
block|{
name|splitLog
argument_list|(
name|serverNames
argument_list|,
name|NON_META_FILTER
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method is the base split method that splits WAL files matching a filter. Callers should    * pass the appropriate filter for meta and non-meta WALs.    * @param serverNames logs belonging to these servers will be split; this will rename the log    *                    directory out from under a soft-failed server    */
specifier|public
name|void
name|splitLog
parameter_list|(
specifier|final
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverNames
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|splitTime
init|=
literal|0
decl_stmt|,
name|splitLogSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|logDirs
init|=
name|getLogDirs
argument_list|(
name|serverNames
argument_list|)
decl_stmt|;
name|splitLogManager
operator|.
name|handleDeadWorkers
argument_list|(
name|serverNames
argument_list|)
expr_stmt|;
name|splitTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|splitLogSize
operator|=
name|splitLogManager
operator|.
name|splitLogDistributed
argument_list|(
name|serverNames
argument_list|,
name|logDirs
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|splitTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|splitTime
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|metricsMasterFilesystem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|filter
operator|==
name|META_FILTER
condition|)
block|{
name|this
operator|.
name|metricsMasterFilesystem
operator|.
name|addMetaWALSplit
argument_list|(
name|splitTime
argument_list|,
name|splitLogSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|metricsMasterFilesystem
operator|.
name|addSplit
argument_list|(
name|splitTime
argument_list|,
name|splitLogSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

