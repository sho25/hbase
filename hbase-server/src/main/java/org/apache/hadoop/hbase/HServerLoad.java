begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VersionedWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * This class is used exporting current state of load on a RegionServer.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|HServerLoad
extends|extends
name|VersionedWritable
implements|implements
name|WritableComparable
argument_list|<
name|HServerLoad
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|byte
name|VERSION
init|=
literal|2
decl_stmt|;
comment|// Empty load instance.
specifier|public
specifier|static
specifier|final
name|HServerLoad
name|EMPTY_HSERVERLOAD
init|=
operator|new
name|HServerLoad
argument_list|()
decl_stmt|;
comment|/** Number of requests per second since last report.    */
comment|// TODO: Instead build this up out of region counters.
specifier|private
name|int
name|numberOfRequests
init|=
literal|0
decl_stmt|;
comment|/** Total Number of requests from the start of the region server.    */
specifier|private
name|int
name|totalNumberOfRequests
init|=
literal|0
decl_stmt|;
comment|/** the amount of used heap, in MB */
specifier|private
name|int
name|usedHeapMB
init|=
literal|0
decl_stmt|;
comment|/** the maximum allowable size of the heap, in MB */
specifier|private
name|int
name|maxHeapMB
init|=
literal|0
decl_stmt|;
comment|// Regionserver-level coprocessors, e.g., WALObserver implementations.
comment|// Region-level coprocessors, on the other hand, are stored inside RegionLoad
comment|// objects.
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|coprocessors
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * HBASE-4070: Improve region server metrics to report loaded coprocessors.    *    * @return Returns the set of all coprocessors on this    * regionserver, where this set is the union of the    * regionserver-level coprocessors on one hand, and all of the region-level    * coprocessors, on the other.    *    * We must iterate through all regions loaded on this regionserver to    * obtain all of the region-level coprocessors.    */
specifier|public
name|String
index|[]
name|getCoprocessors
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|returnValue
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|coprocessors
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|rls
range|:
name|getRegionsLoad
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|coprocessor
range|:
name|rls
operator|.
name|getValue
argument_list|()
operator|.
name|getCoprocessors
argument_list|()
control|)
block|{
name|returnValue
operator|.
name|add
argument_list|(
name|coprocessor
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|returnValue
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/** per-region load metrics */
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionLoad
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|/** @return the object version number */
specifier|public
name|byte
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
comment|/**    * Encapsulates per-region loading metrics.    */
specifier|public
specifier|static
class|class
name|RegionLoad
extends|extends
name|VersionedWritable
block|{
specifier|private
specifier|static
specifier|final
name|byte
name|VERSION
init|=
literal|2
decl_stmt|;
comment|/** @return the object version number */
specifier|public
name|byte
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
comment|/** the region name */
specifier|private
name|byte
index|[]
name|name
decl_stmt|;
comment|/** the number of stores for the region */
specifier|private
name|int
name|stores
decl_stmt|;
comment|/** the number of storefiles for the region */
specifier|private
name|int
name|storefiles
decl_stmt|;
comment|/** the total size of the store files for the region, uncompressed, in MB */
specifier|private
name|int
name|storeUncompressedSizeMB
decl_stmt|;
comment|/** the current total size of the store files for the region, in MB */
specifier|private
name|int
name|storefileSizeMB
decl_stmt|;
comment|/** the current size of the memstore for the region, in MB */
specifier|private
name|int
name|memstoreSizeMB
decl_stmt|;
comment|/**      * The current total size of root-level store file indexes for the region,      * in MB. The same as {@link #rootIndexSizeKB} but in MB.      */
specifier|private
name|int
name|storefileIndexSizeMB
decl_stmt|;
comment|/** the current total read requests made to region */
specifier|private
name|long
name|readRequestsCount
decl_stmt|;
comment|/** the current total write requests made to region */
specifier|private
name|long
name|writeRequestsCount
decl_stmt|;
comment|/** the total compacting key values in currently running compaction */
specifier|private
name|long
name|totalCompactingKVs
decl_stmt|;
comment|/** the completed count of key values in currently running compaction */
specifier|private
name|long
name|currentCompactedKVs
decl_stmt|;
comment|/** The current total size of root-level indexes for the region, in KB. */
specifier|private
name|int
name|rootIndexSizeKB
decl_stmt|;
comment|/** The total size of all index blocks, not just the root level, in KB. */
specifier|private
name|int
name|totalStaticIndexSizeKB
decl_stmt|;
comment|/**      * The total size of all Bloom filter blocks, not just loaded into the      * block cache, in KB.      */
specifier|private
name|int
name|totalStaticBloomSizeKB
decl_stmt|;
comment|// Region-level coprocessors.
name|Set
argument_list|<
name|String
argument_list|>
name|coprocessors
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Constructor, for Writable      */
specifier|public
name|RegionLoad
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param name      * @param stores      * @param storefiles      * @param storeUncompressedSizeMB      * @param storefileSizeMB      * @param memstoreSizeMB      * @param storefileIndexSizeMB      * @param readRequestsCount      * @param writeRequestsCount      * @param totalCompactingKVs      * @param currentCompactedKVs      * @param coprocessors      */
specifier|public
name|RegionLoad
parameter_list|(
specifier|final
name|byte
index|[]
name|name
parameter_list|,
specifier|final
name|int
name|stores
parameter_list|,
specifier|final
name|int
name|storefiles
parameter_list|,
specifier|final
name|int
name|storeUncompressedSizeMB
parameter_list|,
specifier|final
name|int
name|storefileSizeMB
parameter_list|,
specifier|final
name|int
name|memstoreSizeMB
parameter_list|,
specifier|final
name|int
name|storefileIndexSizeMB
parameter_list|,
specifier|final
name|int
name|rootIndexSizeKB
parameter_list|,
specifier|final
name|int
name|totalStaticIndexSizeKB
parameter_list|,
specifier|final
name|int
name|totalStaticBloomSizeKB
parameter_list|,
specifier|final
name|long
name|readRequestsCount
parameter_list|,
specifier|final
name|long
name|writeRequestsCount
parameter_list|,
specifier|final
name|long
name|totalCompactingKVs
parameter_list|,
specifier|final
name|long
name|currentCompactedKVs
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|coprocessors
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|stores
operator|=
name|stores
expr_stmt|;
name|this
operator|.
name|storefiles
operator|=
name|storefiles
expr_stmt|;
name|this
operator|.
name|storeUncompressedSizeMB
operator|=
name|storeUncompressedSizeMB
expr_stmt|;
name|this
operator|.
name|storefileSizeMB
operator|=
name|storefileSizeMB
expr_stmt|;
name|this
operator|.
name|memstoreSizeMB
operator|=
name|memstoreSizeMB
expr_stmt|;
name|this
operator|.
name|storefileIndexSizeMB
operator|=
name|storefileIndexSizeMB
expr_stmt|;
name|this
operator|.
name|rootIndexSizeKB
operator|=
name|rootIndexSizeKB
expr_stmt|;
name|this
operator|.
name|totalStaticIndexSizeKB
operator|=
name|totalStaticIndexSizeKB
expr_stmt|;
name|this
operator|.
name|totalStaticBloomSizeKB
operator|=
name|totalStaticBloomSizeKB
expr_stmt|;
name|this
operator|.
name|readRequestsCount
operator|=
name|readRequestsCount
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|=
name|writeRequestsCount
expr_stmt|;
name|this
operator|.
name|totalCompactingKVs
operator|=
name|totalCompactingKVs
expr_stmt|;
name|this
operator|.
name|currentCompactedKVs
operator|=
name|currentCompactedKVs
expr_stmt|;
name|this
operator|.
name|coprocessors
operator|=
name|coprocessors
expr_stmt|;
block|}
comment|// Getters
specifier|private
name|String
index|[]
name|getCoprocessors
parameter_list|()
block|{
return|return
name|coprocessors
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**      * @return the region name      */
specifier|public
name|byte
index|[]
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return the region name as a string      */
specifier|public
name|String
name|getNameAsString
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * @return the number of stores      */
specifier|public
name|int
name|getStores
parameter_list|()
block|{
return|return
name|stores
return|;
block|}
comment|/**      * @return the number of storefiles      */
specifier|public
name|int
name|getStorefiles
parameter_list|()
block|{
return|return
name|storefiles
return|;
block|}
comment|/**      * @return the total size of the storefiles, in MB      */
specifier|public
name|int
name|getStorefileSizeMB
parameter_list|()
block|{
return|return
name|storefileSizeMB
return|;
block|}
comment|/**      * @return the memstore size, in MB      */
specifier|public
name|int
name|getMemStoreSizeMB
parameter_list|()
block|{
return|return
name|memstoreSizeMB
return|;
block|}
comment|/**      * @return the approximate size of storefile indexes on the heap, in MB      */
specifier|public
name|int
name|getStorefileIndexSizeMB
parameter_list|()
block|{
return|return
name|storefileIndexSizeMB
return|;
block|}
comment|/**      * @return the number of requests made to region      */
specifier|public
name|long
name|getRequestsCount
parameter_list|()
block|{
return|return
name|readRequestsCount
operator|+
name|writeRequestsCount
return|;
block|}
comment|/**      * @return the number of read requests made to region      */
specifier|public
name|long
name|getReadRequestsCount
parameter_list|()
block|{
return|return
name|readRequestsCount
return|;
block|}
comment|/**      * @return the number of read requests made to region      */
specifier|public
name|long
name|getWriteRequestsCount
parameter_list|()
block|{
return|return
name|writeRequestsCount
return|;
block|}
comment|/**      * @return The current total size of root-level indexes for the region, in KB.      */
specifier|public
name|int
name|getRootIndexSizeKB
parameter_list|()
block|{
return|return
name|rootIndexSizeKB
return|;
block|}
comment|/**      * @return The total size of all index blocks, not just the root level, in KB.      */
specifier|public
name|int
name|getTotalStaticIndexSizeKB
parameter_list|()
block|{
return|return
name|totalStaticIndexSizeKB
return|;
block|}
comment|/**      * @return The total size of all Bloom filter blocks, not just loaded into the      * block cache, in KB.      */
specifier|public
name|int
name|getTotalStaticBloomSizeKB
parameter_list|()
block|{
return|return
name|totalStaticBloomSizeKB
return|;
block|}
comment|/**      * @return the total number of kvs in current compaction      */
specifier|public
name|long
name|getTotalCompactingKVs
parameter_list|()
block|{
return|return
name|totalCompactingKVs
return|;
block|}
comment|/**      * @return the number of already compacted kvs in current compaction      */
specifier|public
name|long
name|getCurrentCompactedKVs
parameter_list|()
block|{
return|return
name|currentCompactedKVs
return|;
block|}
comment|// Setters
comment|/**      * @param name the region name      */
specifier|public
name|void
name|setName
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * @param stores the number of stores      */
specifier|public
name|void
name|setStores
parameter_list|(
name|int
name|stores
parameter_list|)
block|{
name|this
operator|.
name|stores
operator|=
name|stores
expr_stmt|;
block|}
comment|/**      * @param storefiles the number of storefiles      */
specifier|public
name|void
name|setStorefiles
parameter_list|(
name|int
name|storefiles
parameter_list|)
block|{
name|this
operator|.
name|storefiles
operator|=
name|storefiles
expr_stmt|;
block|}
comment|/**      * @param memstoreSizeMB the memstore size, in MB      */
specifier|public
name|void
name|setMemStoreSizeMB
parameter_list|(
name|int
name|memstoreSizeMB
parameter_list|)
block|{
name|this
operator|.
name|memstoreSizeMB
operator|=
name|memstoreSizeMB
expr_stmt|;
block|}
comment|/**      * @param storefileIndexSizeMB the approximate size of storefile indexes      *  on the heap, in MB      */
specifier|public
name|void
name|setStorefileIndexSizeMB
parameter_list|(
name|int
name|storefileIndexSizeMB
parameter_list|)
block|{
name|this
operator|.
name|storefileIndexSizeMB
operator|=
name|storefileIndexSizeMB
expr_stmt|;
block|}
comment|/**      * @param requestsCount the number of read requests to region      */
specifier|public
name|void
name|setReadRequestsCount
parameter_list|(
name|int
name|requestsCount
parameter_list|)
block|{
name|this
operator|.
name|readRequestsCount
operator|=
name|requestsCount
expr_stmt|;
block|}
comment|/**      * @param requestsCount the number of write requests to region      */
specifier|public
name|void
name|setWriteRequestsCount
parameter_list|(
name|int
name|requestsCount
parameter_list|)
block|{
name|this
operator|.
name|writeRequestsCount
operator|=
name|requestsCount
expr_stmt|;
block|}
comment|/**      * @param totalCompactingKVs the number of kvs total in current compaction      */
specifier|public
name|void
name|setTotalCompactingKVs
parameter_list|(
name|long
name|totalCompactingKVs
parameter_list|)
block|{
name|this
operator|.
name|totalCompactingKVs
operator|=
name|totalCompactingKVs
expr_stmt|;
block|}
comment|/**      * @param currentCompactedKVs the number of kvs already compacted in      * current compaction      */
specifier|public
name|void
name|setCurrentCompactedKVs
parameter_list|(
name|long
name|currentCompactedKVs
parameter_list|)
block|{
name|this
operator|.
name|currentCompactedKVs
operator|=
name|currentCompactedKVs
expr_stmt|;
block|}
comment|/**      * HBASE-5256 and HBASE-5283 introduced incompatible serialization changes      * This method reads the fields in 0.92 serialization format, ex-version field      * @param in      * @throws IOException      */
specifier|private
name|void
name|readFields92
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// in 0.92, the version was actually written twice, consume the second copy
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// version
name|int
name|namelen
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|name
operator|=
operator|new
name|byte
index|[
name|namelen
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|stores
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|storefiles
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|storeUncompressedSizeMB
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|storefileSizeMB
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|memstoreSizeMB
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|storefileIndexSizeMB
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|readRequestsCount
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootIndexSizeKB
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalStaticIndexSizeKB
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalStaticBloomSizeKB
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalCompactingKVs
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentCompactedKVs
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|coprocessorsSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|coprocessors
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coprocessorsSize
condition|;
name|i
operator|++
control|)
block|{
name|coprocessors
operator|.
name|add
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Writable
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|>
name|VERSION
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Version mismatch; "
operator|+
name|version
argument_list|)
throw|;
if|if
condition|(
name|version
operator|==
literal|1
condition|)
block|{
name|readFields92
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|namelen
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|this
operator|.
name|name
operator|=
operator|new
name|byte
index|[
name|namelen
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|stores
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|storefiles
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|storeUncompressedSizeMB
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|storefileSizeMB
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstoreSizeMB
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|storefileIndexSizeMB
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|readRequestsCount
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootIndexSizeKB
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalStaticIndexSizeKB
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalStaticBloomSizeKB
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalCompactingKVs
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentCompactedKVs
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|coprocessorsSize
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|coprocessors
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coprocessorsSize
condition|;
name|i
operator|++
control|)
block|{
name|coprocessors
operator|.
name|add
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|name
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|stores
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|storefiles
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|storeUncompressedSizeMB
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|storefileSizeMB
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|memstoreSizeMB
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|storefileIndexSizeMB
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|readRequestsCount
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|writeRequestsCount
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|rootIndexSizeKB
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|totalStaticIndexSizeKB
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|totalStaticBloomSizeKB
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|totalCompactingKVs
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|currentCompactedKVs
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|coprocessors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|coprocessor
range|:
name|coprocessors
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|coprocessor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see java.lang.Object#toString()      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|,
literal|"numberOfStores"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|stores
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"numberOfStorefiles"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|storefiles
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"storefileUncompressedSizeMB"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|storeUncompressedSizeMB
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"storefileSizeMB"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|storefileSizeMB
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|storeUncompressedSizeMB
operator|!=
literal|0
condition|)
block|{
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"compressionRatio"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%.4f"
argument_list|,
operator|(
name|float
operator|)
name|this
operator|.
name|storefileSizeMB
operator|/
operator|(
name|float
operator|)
name|this
operator|.
name|storeUncompressedSizeMB
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"memstoreSizeMB"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|memstoreSizeMB
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"storefileIndexSizeMB"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|storefileIndexSizeMB
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"readRequestsCount"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|readRequestsCount
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"writeRequestsCount"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|writeRequestsCount
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"rootIndexSizeKB"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|rootIndexSizeKB
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"totalStaticIndexSizeKB"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|totalStaticIndexSizeKB
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"totalStaticBloomSizeKB"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|totalStaticBloomSizeKB
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"totalCompactingKVs"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|totalCompactingKVs
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"currentCompactedKVs"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|currentCompactedKVs
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|compactionProgressPct
init|=
name|Float
operator|.
name|NaN
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|totalCompactingKVs
operator|>
literal|0
condition|)
block|{
name|compactionProgressPct
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
operator|(
name|float
operator|)
name|this
operator|.
name|currentCompactedKVs
operator|/
name|this
operator|.
name|totalCompactingKVs
argument_list|)
expr_stmt|;
block|}
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"compactionProgressPct"
argument_list|,
name|compactionProgressPct
argument_list|)
expr_stmt|;
name|String
name|coprocessors
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|getCoprocessors
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|coprocessors
operator|!=
literal|null
condition|)
block|{
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"coprocessors"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|getCoprocessors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/*    * TODO: Other metrics that might be considered when the master is actually    * doing load balancing instead of merely trying to decide where to assign    * a region:    *<ul>    *<li># of CPUs, heap size (to determine the "class" of machine). For    *       now, we consider them to be homogeneous.</li>    *<li>#requests per region (Map<{String|HRegionInfo}, Integer>)</li>    *<li>#compactions and/or #splits (churn)</li>    *<li>server death rate (maybe there is something wrong with this server)</li>    *</ul>    */
comment|/** default constructor (used by Writable) */
specifier|public
name|HServerLoad
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor    * @param numberOfRequests    * @param usedHeapMB    * @param maxHeapMB    * @param coprocessors : coprocessors loaded at the regionserver-level    */
specifier|public
name|HServerLoad
parameter_list|(
specifier|final
name|int
name|totalNumberOfRequests
parameter_list|,
specifier|final
name|int
name|numberOfRequests
parameter_list|,
specifier|final
name|int
name|usedHeapMB
parameter_list|,
specifier|final
name|int
name|maxHeapMB
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionLoad
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|coprocessors
parameter_list|)
block|{
name|this
operator|.
name|numberOfRequests
operator|=
name|numberOfRequests
expr_stmt|;
name|this
operator|.
name|usedHeapMB
operator|=
name|usedHeapMB
expr_stmt|;
name|this
operator|.
name|maxHeapMB
operator|=
name|maxHeapMB
expr_stmt|;
name|this
operator|.
name|regionLoad
operator|=
name|regionLoad
expr_stmt|;
name|this
operator|.
name|totalNumberOfRequests
operator|=
name|totalNumberOfRequests
expr_stmt|;
name|this
operator|.
name|coprocessors
operator|=
name|coprocessors
expr_stmt|;
block|}
comment|/**    * Constructor    * @param hsl the template HServerLoad    */
specifier|public
name|HServerLoad
parameter_list|(
specifier|final
name|HServerLoad
name|hsl
parameter_list|)
block|{
name|this
argument_list|(
name|hsl
operator|.
name|totalNumberOfRequests
argument_list|,
name|hsl
operator|.
name|numberOfRequests
argument_list|,
name|hsl
operator|.
name|usedHeapMB
argument_list|,
name|hsl
operator|.
name|maxHeapMB
argument_list|,
name|hsl
operator|.
name|getRegionsLoad
argument_list|()
argument_list|,
name|hsl
operator|.
name|coprocessors
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|e
range|:
name|hsl
operator|.
name|regionLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|regionLoad
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Originally, this method factored in the effect of requests going to the    * server as well. However, this does not interact very well with the current    * region rebalancing code, which only factors number of regions. For the    * interim, until we can figure out how to make rebalancing use all the info    * available, we're just going to make load purely the number of regions.    *    * @return load factor for this server    */
specifier|public
name|int
name|getLoad
parameter_list|()
block|{
comment|// int load = numberOfRequests == 0 ? 1 : numberOfRequests;
comment|// load *= numberOfRegions == 0 ? 1 : numberOfRegions;
comment|// return load;
return|return
name|this
operator|.
name|regionLoad
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * @see java.lang.Object#toString()    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Returns toString() with the number of requests divided by the message    * interval in seconds    * @param msgInterval    * @return The load as a String    */
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|msgInterval
parameter_list|)
block|{
name|int
name|numberOfRegions
init|=
name|this
operator|.
name|regionLoad
operator|.
name|size
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"requestsPerSecond"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|numberOfRequests
operator|/
name|msgInterval
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"numberOfOnlineRegions"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|numberOfRegions
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"usedHeapMB"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|usedHeapMB
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Strings
operator|.
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
literal|"maxHeapMB"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|maxHeapMB
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @see java.lang.Object#equals(java.lang.Object)    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|HServerLoad
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
comment|// Getters
comment|/**    * @return the numberOfRegions    */
specifier|public
name|int
name|getNumberOfRegions
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionLoad
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * @return the numberOfRequests per second.    */
specifier|public
name|int
name|getNumberOfRequests
parameter_list|()
block|{
return|return
name|numberOfRequests
return|;
block|}
comment|/**    * @return the numberOfRequests    */
specifier|public
name|int
name|getTotalNumberOfRequests
parameter_list|()
block|{
return|return
name|totalNumberOfRequests
return|;
block|}
comment|/**    * @return the amount of heap in use, in MB    */
specifier|public
name|int
name|getUsedHeapMB
parameter_list|()
block|{
return|return
name|usedHeapMB
return|;
block|}
comment|/**    * @return the maximum allowable heap size, in MB    */
specifier|public
name|int
name|getMaxHeapMB
parameter_list|()
block|{
return|return
name|maxHeapMB
return|;
block|}
comment|/**    * @return region load metrics    */
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|getRegionsLoad
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|regionLoad
argument_list|)
return|;
block|}
comment|/**    * @return Count of storefiles on this regionserver    */
specifier|public
name|int
name|getStorefiles
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RegionLoad
name|info
range|:
name|regionLoad
operator|.
name|values
argument_list|()
control|)
name|count
operator|+=
name|info
operator|.
name|getStorefiles
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
comment|/**    * @return Total size of store files in MB    */
specifier|public
name|int
name|getStorefileSizeInMB
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RegionLoad
name|info
range|:
name|regionLoad
operator|.
name|values
argument_list|()
control|)
name|count
operator|+=
name|info
operator|.
name|getStorefileSizeMB
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
comment|/**    * @return Size of memstores in MB    */
specifier|public
name|int
name|getMemStoreSizeInMB
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RegionLoad
name|info
range|:
name|regionLoad
operator|.
name|values
argument_list|()
control|)
name|count
operator|+=
name|info
operator|.
name|getMemStoreSizeMB
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
comment|/**    * @return Size of store file indexes in MB    */
specifier|public
name|int
name|getStorefileIndexSizeInMB
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RegionLoad
name|info
range|:
name|regionLoad
operator|.
name|values
argument_list|()
control|)
name|count
operator|+=
name|info
operator|.
name|getStorefileIndexSizeMB
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
specifier|public
specifier|static
name|HServerLoad
name|convert
parameter_list|(
name|ServerLoad
name|sl
parameter_list|)
block|{
comment|// TODO: This conversion of ServerLoad to HServerLoad is temporary,
comment|// will be cleaned up in HBASE-5445.  Using the ClusterStatus proto brings
comment|// in a lot of other changes, so it makes sense to break this up.
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionLoad
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|RegionLoad
name|rl
range|:
name|sl
operator|.
name|getRegionLoadsList
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|regionCoprocessors
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|Coprocessor
name|coprocessor
range|:
name|rl
operator|.
name|getCoprocessorsList
argument_list|()
control|)
block|{
name|regionCoprocessors
operator|.
name|add
argument_list|(
name|coprocessor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|regionName
init|=
name|rl
operator|.
name|getRegionSpecifier
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionLoad
name|converted
init|=
operator|new
name|RegionLoad
argument_list|(
name|regionName
argument_list|,
name|rl
operator|.
name|getStores
argument_list|()
argument_list|,
name|rl
operator|.
name|getStorefiles
argument_list|()
argument_list|,
name|rl
operator|.
name|getStoreUncompressedSizeMB
argument_list|()
argument_list|,
name|rl
operator|.
name|getStorefileSizeMB
argument_list|()
argument_list|,
name|rl
operator|.
name|getMemstoreSizeMB
argument_list|()
argument_list|,
name|rl
operator|.
name|getStorefileIndexSizeMB
argument_list|()
argument_list|,
name|rl
operator|.
name|getRootIndexSizeKB
argument_list|()
argument_list|,
name|rl
operator|.
name|getTotalStaticIndexSizeKB
argument_list|()
argument_list|,
name|rl
operator|.
name|getTotalStaticBloomSizeKB
argument_list|()
argument_list|,
name|rl
operator|.
name|getReadRequestsCount
argument_list|()
argument_list|,
name|rl
operator|.
name|getWriteRequestsCount
argument_list|()
argument_list|,
name|rl
operator|.
name|getTotalCompactingKVs
argument_list|()
argument_list|,
name|rl
operator|.
name|getCurrentCompactedKVs
argument_list|()
argument_list|,
name|regionCoprocessors
argument_list|)
decl_stmt|;
name|regionLoad
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|converted
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|coprocessors
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ServerLoad
operator|.
name|getRegionServerCoprocessors
argument_list|(
name|sl
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HServerLoad
name|hsl
init|=
operator|new
name|HServerLoad
argument_list|(
name|sl
operator|.
name|getTotalNumberOfRequests
argument_list|()
argument_list|,
name|sl
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|sl
operator|.
name|getUsedHeapMB
argument_list|()
argument_list|,
name|sl
operator|.
name|getMaxHeapMB
argument_list|()
argument_list|,
name|regionLoad
argument_list|,
name|coprocessors
argument_list|)
decl_stmt|;
return|return
name|hsl
return|;
block|}
comment|// Writable
comment|/**    * @deprecated Writables are going away.    */
annotation|@
name|Deprecated
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|>
name|VERSION
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Version mismatch; "
operator|+
name|version
argument_list|)
throw|;
name|numberOfRequests
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|usedHeapMB
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|maxHeapMB
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|numberOfRegions
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRegions
condition|;
name|i
operator|++
control|)
block|{
name|RegionLoad
name|rl
init|=
operator|new
name|RegionLoad
argument_list|()
decl_stmt|;
name|rl
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|regionLoad
operator|.
name|put
argument_list|(
name|rl
operator|.
name|getName
argument_list|()
argument_list|,
name|rl
argument_list|)
expr_stmt|;
block|}
name|totalNumberOfRequests
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|coprocessorsSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coprocessorsSize
condition|;
name|i
operator|++
control|)
block|{
name|coprocessors
operator|.
name|add
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @deprecated Writables are going away.    */
annotation|@
name|Deprecated
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|numberOfRequests
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|usedHeapMB
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|maxHeapMB
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|regionLoad
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionLoad
name|rl
range|:
name|regionLoad
operator|.
name|values
argument_list|()
control|)
name|rl
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|totalNumberOfRequests
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|coprocessors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|coprocessor
range|:
name|coprocessors
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|coprocessor
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Comparable
specifier|public
name|int
name|compareTo
parameter_list|(
name|HServerLoad
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|getLoad
argument_list|()
operator|-
name|o
operator|.
name|getLoad
argument_list|()
return|;
block|}
block|}
end_class

end_unit

