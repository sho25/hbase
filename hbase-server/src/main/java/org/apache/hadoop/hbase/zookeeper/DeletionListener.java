begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * A ZooKeeper watcher meant to detect deletions of ZNodes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DeletionListener
extends|extends
name|ZooKeeperListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DeletionListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|pathToWatch
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|deletedLatch
decl_stmt|;
specifier|private
specifier|volatile
name|Throwable
name|exception
decl_stmt|;
comment|/**    * Create a new instance of the deletion watcher.    * @param zkWatcher ZookeeperWatcher instance    * @param pathToWatch (Fully qualified) ZNode path that we are waiting to    *                    be deleted.    * @param deletedLatch Count down on this latch when deletion has occurred.    */
specifier|public
name|DeletionListener
parameter_list|(
name|ZooKeeperWatcher
name|zkWatcher
parameter_list|,
name|String
name|pathToWatch
parameter_list|,
name|CountDownLatch
name|deletedLatch
parameter_list|)
block|{
name|super
argument_list|(
name|zkWatcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|pathToWatch
operator|=
name|pathToWatch
expr_stmt|;
name|this
operator|.
name|deletedLatch
operator|=
name|deletedLatch
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Check if an exception has occurred when re-setting the watch.    * @return True if we were unable to re-set a watch on a ZNode due to    *         an exception.    */
specifier|public
name|boolean
name|hasException
parameter_list|()
block|{
return|return
name|exception
operator|!=
literal|null
return|;
block|}
comment|/**    * Get the last exception which has occurred when re-setting the watch.    * Use hasException() to check whether or not an exception has occurred.    * @return The last exception observed when re-setting the watch.    */
specifier|public
name|Throwable
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeDataChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|pathToWatch
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|ZKUtil
operator|.
name|setWatchIfNodeExists
argument_list|(
name|watcher
argument_list|,
name|pathToWatch
argument_list|)
operator|)
condition|)
block|{
name|deletedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
name|deletedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when re-setting the watch on "
operator|+
name|pathToWatch
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeDeleted
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|pathToWatch
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing delete on "
operator|+
name|pathToWatch
argument_list|)
expr_stmt|;
block|}
name|deletedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

