begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
operator|.
name|NON_STARTCODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RackManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|FavoredNodes
import|;
end_import

begin_comment
comment|/**  * Helper class for {@link FavoredNodeLoadBalancer} that has all the intelligence for racks,  * meta scans, etc. Instantiated by the {@link FavoredNodeLoadBalancer} when needed (from  * within calls like {@link FavoredNodeLoadBalancer#randomAssignment(RegionInfo, List)}).  * All updates to favored nodes should only be done from {@link FavoredNodesManager} and not  * through this helper class (except for tests).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FavoredNodeAssignmentHelper
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FavoredNodeAssignmentHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RackManager
name|rackManager
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|rackToRegionServerMap
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|uniqueRackList
decl_stmt|;
comment|// This map serves as a cache for rack to sn lookups. The num of
comment|// region server entries might not match with that is in servers.
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|regionServerToRackMap
decl_stmt|;
specifier|private
name|Random
name|random
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAVOREDNODES_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fn"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|short
name|FAVORED_NODES_NUM
init|=
literal|3
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|short
name|MAX_ATTEMPTS_FN_GENERATION
init|=
literal|10
decl_stmt|;
specifier|public
name|FavoredNodeAssignmentHelper
parameter_list|(
specifier|final
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|servers
argument_list|,
operator|new
name|RackManager
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FavoredNodeAssignmentHelper
parameter_list|(
specifier|final
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
specifier|final
name|RackManager
name|rackManager
parameter_list|)
block|{
name|this
operator|.
name|servers
operator|=
name|servers
expr_stmt|;
name|this
operator|.
name|rackManager
operator|=
name|rackManager
expr_stmt|;
name|this
operator|.
name|rackToRegionServerMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionServerToRackMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|uniqueRackList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
comment|// Always initialize() when FavoredNodeAssignmentHelper is constructed.
specifier|public
name|void
name|initialize
parameter_list|()
block|{
for|for
control|(
name|ServerName
name|sn
range|:
name|this
operator|.
name|servers
control|)
block|{
name|String
name|rackName
init|=
name|getRackOfServer
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverList
init|=
name|this
operator|.
name|rackToRegionServerMap
operator|.
name|get
argument_list|(
name|rackName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverList
operator|==
literal|null
condition|)
block|{
name|serverList
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
comment|// Add the current rack to the unique rack list
name|this
operator|.
name|uniqueRackList
operator|.
name|add
argument_list|(
name|rackName
argument_list|)
expr_stmt|;
name|this
operator|.
name|rackToRegionServerMap
operator|.
name|put
argument_list|(
name|rackName
argument_list|,
name|serverList
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ServerName
name|serverName
range|:
name|serverList
control|)
block|{
if|if
condition|(
name|ServerName
operator|.
name|isSameAddress
argument_list|(
name|sn
argument_list|,
name|serverName
argument_list|)
condition|)
block|{
comment|// The server is already present, ignore.
break|break;
block|}
block|}
name|serverList
operator|.
name|add
argument_list|(
operator|(
name|sn
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServerToRackMap
operator|.
name|put
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
name|rackName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update meta table with favored nodes info    * @param regionToFavoredNodes map of RegionInfo's to their favored nodes    * @param connection connection to be used    * @throws IOException    */
specifier|public
specifier|static
name|void
name|updateMetaWithFavoredNodesInfo
parameter_list|(
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|regionToFavoredNodes
parameter_list|,
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|entry
range|:
name|regionToFavoredNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Put
name|put
init|=
name|makePutFromRegionInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|put
operator|!=
literal|null
condition|)
block|{
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
name|MetaTableAccessor
operator|.
name|putsToMetaTable
argument_list|(
name|connection
argument_list|,
name|puts
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added "
operator|+
name|puts
operator|.
name|size
argument_list|()
operator|+
literal|" regions in META"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update meta table with favored nodes info    * @param regionToFavoredNodes    * @param conf    * @throws IOException    */
specifier|public
specifier|static
name|void
name|updateMetaWithFavoredNodesInfo
parameter_list|(
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|regionToFavoredNodes
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|entry
range|:
name|regionToFavoredNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Put
name|put
init|=
name|makePutFromRegionInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|put
operator|!=
literal|null
condition|)
block|{
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write the region assignments to the meta table.
comment|// TODO: See above overrides take a Connection rather than a Configuration only the
comment|// Connection is a short circuit connection. That is not going to good in all cases, when
comment|// master and meta are not colocated. Fix when this favored nodes feature is actually used
comment|// someday.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|metaTable
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|metaTable
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Added "
operator|+
name|puts
operator|.
name|size
argument_list|()
operator|+
literal|" regions in META"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates and returns a Put containing the region info for the catalog table    * and the servers    * @param regionInfo    * @param favoredNodeList    * @return Put object    */
specifier|static
name|Put
name|makePutFromRegionInfo
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodeList
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|favoredNodeList
operator|!=
literal|null
condition|)
block|{
name|put
operator|=
name|MetaTableAccessor
operator|.
name|makePutFromRegionInfo
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
name|byte
index|[]
name|favoredNodes
init|=
name|getFavoredNodes
argument_list|(
name|favoredNodeList
argument_list|)
decl_stmt|;
name|put
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|FAVOREDNODES_QUALIFIER
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
name|favoredNodes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create the region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" with favored nodes "
operator|+
name|favoredNodeList
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
comment|/**    * @param favoredNodes The PB'ed bytes of favored nodes    * @return the array of {@link ServerName} for the byte array of favored nodes.    * @throws IOException    */
specifier|public
specifier|static
name|ServerName
index|[]
name|getFavoredNodesList
parameter_list|(
name|byte
index|[]
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|FavoredNodes
name|f
init|=
name|FavoredNodes
operator|.
name|parseFrom
argument_list|(
name|favoredNodes
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HBaseProtos
operator|.
name|ServerName
argument_list|>
name|protoNodes
init|=
name|f
operator|.
name|getFavoredNodeList
argument_list|()
decl_stmt|;
name|ServerName
index|[]
name|servers
init|=
operator|new
name|ServerName
index|[
name|protoNodes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|node
range|:
name|protoNodes
control|)
block|{
name|servers
index|[
name|i
operator|++
index|]
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
comment|/**    * @param serverAddrList    * @return PB'ed bytes of {@link FavoredNodes} generated by the server list.    */
specifier|public
specifier|static
name|byte
index|[]
name|getFavoredNodes
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverAddrList
parameter_list|)
block|{
name|FavoredNodes
operator|.
name|Builder
name|f
init|=
name|FavoredNodes
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|serverAddrList
control|)
block|{
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|Builder
name|b
init|=
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setHostName
argument_list|(
name|s
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setPort
argument_list|(
name|s
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setStartCode
argument_list|(
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
expr_stmt|;
name|f
operator|.
name|addFavoredNode
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|f
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|// Place the regions round-robin across the racks picking one server from each
comment|// rack at a time. Start with a random rack, and a random server from every rack.
comment|// If a rack doesn't have enough servers it will go to the next rack and so on.
comment|// for choosing a primary.
comment|// For example, if 4 racks (r1 .. r4) with 8 servers (s1..s8) each, one possible
comment|// placement could be r2:s5, r3:s5, r4:s5, r1:s5, r2:s6, r3:s6..
comment|// If there were fewer servers in one rack, say r3, which had 3 servers, one possible
comment|// placement could be r2:s5,<skip-r3>, r4:s5, r1:s5, r2:s6,<skip-r3> ...
comment|// The regions should be distributed proportionately to the racksizes
specifier|public
name|void
name|placePrimaryRSAsRoundRobin
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|assignmentMap
parameter_list|,
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rackList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rackToRegionServerMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|rackList
operator|.
name|addAll
argument_list|(
name|rackToRegionServerMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|rackIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|rackList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxRackSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|r
range|:
name|rackToRegionServerMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|maxRackSize
condition|)
block|{
name|maxRackSize
operator|=
name|r
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|numIterations
init|=
literal|0
decl_stmt|;
comment|// Initialize the current processing host index.
name|int
name|serverIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|maxRackSize
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|regions
control|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|currentServerList
decl_stmt|;
name|String
name|rackName
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|rackName
operator|=
name|rackList
operator|.
name|get
argument_list|(
name|rackIndex
argument_list|)
expr_stmt|;
name|numIterations
operator|++
expr_stmt|;
comment|// Get the server list for the current rack
name|currentServerList
operator|=
name|rackToRegionServerMap
operator|.
name|get
argument_list|(
name|rackName
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverIndex
operator|>=
name|currentServerList
operator|.
name|size
argument_list|()
condition|)
block|{
comment|//not enough machines in this rack
if|if
condition|(
name|numIterations
operator|%
name|rackList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|++
name|serverIndex
operator|>=
name|maxRackSize
condition|)
name|serverIndex
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|++
name|rackIndex
operator|)
operator|>=
name|rackList
operator|.
name|size
argument_list|()
condition|)
block|{
name|rackIndex
operator|=
literal|0
expr_stmt|;
comment|// reset the rack index to 0
block|}
block|}
else|else
break|break;
block|}
comment|// Get the current process region server
name|ServerName
name|currentServer
init|=
name|currentServerList
operator|.
name|get
argument_list|(
name|serverIndex
argument_list|)
decl_stmt|;
comment|// Place the current region with the current primary region server
name|primaryRSMap
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|currentServer
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignmentMap
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsForServer
init|=
name|assignmentMap
operator|.
name|get
argument_list|(
name|currentServer
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsForServer
operator|==
literal|null
condition|)
block|{
name|regionsForServer
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assignmentMap
operator|.
name|put
argument_list|(
name|currentServer
argument_list|,
name|regionsForServer
argument_list|)
expr_stmt|;
block|}
name|regionsForServer
operator|.
name|add
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
comment|// Set the next processing index
if|if
condition|(
name|numIterations
operator|%
name|rackList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
operator|++
name|serverIndex
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|++
name|rackIndex
operator|)
operator|>=
name|rackList
operator|.
name|size
argument_list|()
condition|)
block|{
name|rackIndex
operator|=
literal|0
expr_stmt|;
comment|// reset the rack index to 0
block|}
block|}
block|}
specifier|public
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|placeSecondaryAndTertiaryRS
parameter_list|(
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
parameter_list|)
block|{
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|entry
range|:
name|primaryRSMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Get the target region and its primary region server rack
name|RegionInfo
name|regionInfo
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ServerName
name|primaryRS
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Create the secondary and tertiary region server pair object.
name|ServerName
index|[]
name|favoredNodes
init|=
name|getSecondaryAndTertiary
argument_list|(
name|regionInfo
argument_list|,
name|primaryRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|favoredNodes
operator|!=
literal|null
condition|)
block|{
name|secondaryAndTertiaryMap
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|favoredNodes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Place the secondary and tertiary region server for region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot place the favored nodes for region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|secondaryAndTertiaryMap
return|;
block|}
specifier|public
name|ServerName
index|[]
name|getSecondaryAndTertiary
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|primaryRS
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerName
index|[]
name|favoredNodes
decl_stmt|;
comment|// Get the rack for the primary region server
name|String
name|primaryRack
init|=
name|getRackOfServer
argument_list|(
name|primaryRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|getTotalNumberOfRacks
argument_list|()
operator|==
literal|1
condition|)
block|{
name|favoredNodes
operator|=
name|singleRackCase
argument_list|(
name|regionInfo
argument_list|,
name|primaryRS
argument_list|,
name|primaryRack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|favoredNodes
operator|=
name|multiRackCase
argument_list|(
name|regionInfo
argument_list|,
name|primaryRS
argument_list|,
name|primaryRack
argument_list|)
expr_stmt|;
block|}
return|return
name|favoredNodes
return|;
block|}
specifier|private
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|mapRSToPrimaries
parameter_list|(
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
parameter_list|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|primaryServerMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|e
range|:
name|primaryRSMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|RegionInfo
argument_list|>
name|currentSet
init|=
name|primaryServerMap
operator|.
name|get
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSet
operator|==
literal|null
condition|)
block|{
name|currentSet
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|currentSet
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|primaryServerMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|currentSet
argument_list|)
expr_stmt|;
block|}
return|return
name|primaryServerMap
return|;
block|}
comment|/**    * For regions that share the primary, avoid placing the secondary and tertiary    * on a same RS. Used for generating new assignments for the    * primary/secondary/tertiary RegionServers    * @param primaryRSMap    * @return the map of regions to the servers the region-files should be hosted on    */
specifier|public
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|placeSecondaryAndTertiaryWithRestrictions
parameter_list|(
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
parameter_list|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|serverToPrimaries
init|=
name|mapRSToPrimaries
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|entry
range|:
name|primaryRSMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Get the target region and its primary region server rack
name|RegionInfo
name|regionInfo
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ServerName
name|primaryRS
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Get the rack for the primary region server
name|String
name|primaryRack
init|=
name|getRackOfServer
argument_list|(
name|primaryRS
argument_list|)
decl_stmt|;
name|ServerName
index|[]
name|favoredNodes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getTotalNumberOfRacks
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Single rack case: have to pick the secondary and tertiary
comment|// from the same rack
name|favoredNodes
operator|=
name|singleRackCase
argument_list|(
name|regionInfo
argument_list|,
name|primaryRS
argument_list|,
name|primaryRack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|favoredNodes
operator|=
name|multiRackCaseWithRestrictions
argument_list|(
name|serverToPrimaries
argument_list|,
name|secondaryAndTertiaryMap
argument_list|,
name|primaryRack
argument_list|,
name|primaryRS
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|favoredNodes
operator|!=
literal|null
condition|)
block|{
name|secondaryAndTertiaryMap
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|favoredNodes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Place the secondary and tertiary region server for region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot place the favored nodes for region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|secondaryAndTertiaryMap
return|;
block|}
specifier|private
name|ServerName
index|[]
name|multiRackCaseWithRestrictions
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|serverToPrimaries
parameter_list|,
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryMap
parameter_list|,
name|String
name|primaryRack
parameter_list|,
name|ServerName
name|primaryRS
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Random to choose the secondary and tertiary region server
comment|// from another rack to place the secondary and tertiary
comment|// Random to choose one rack except for the current rack
name|Set
argument_list|<
name|String
argument_list|>
name|rackSkipSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|rackSkipSet
operator|.
name|add
argument_list|(
name|primaryRack
argument_list|)
expr_stmt|;
name|String
name|secondaryRack
init|=
name|getOneRandomRack
argument_list|(
name|rackSkipSet
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverList
init|=
name|getServersFromRack
argument_list|(
name|secondaryRack
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|serverSet
operator|.
name|addAll
argument_list|(
name|serverList
argument_list|)
expr_stmt|;
name|ServerName
index|[]
name|favoredNodes
decl_stmt|;
if|if
condition|(
name|serverList
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
comment|// Randomly pick up two servers from this secondary rack
comment|// Skip the secondary for the tertiary placement
comment|// skip the servers which share the primary already
name|Set
argument_list|<
name|RegionInfo
argument_list|>
name|primaries
init|=
name|serverToPrimaries
operator|.
name|get
argument_list|(
name|primaryRS
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|skipServerSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ServerName
index|[]
name|secondaryAndTertiary
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|primaries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// check where his tertiary and secondary are
for|for
control|(
name|RegionInfo
name|primary
range|:
name|primaries
control|)
block|{
name|secondaryAndTertiary
operator|=
name|secondaryAndTertiaryMap
operator|.
name|get
argument_list|(
name|primary
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondaryAndTertiary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getRackOfServer
argument_list|(
name|secondaryAndTertiary
index|[
literal|0
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|secondaryRack
argument_list|)
condition|)
block|{
name|skipServerSet
operator|.
name|add
argument_list|(
name|secondaryAndTertiary
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getRackOfServer
argument_list|(
name|secondaryAndTertiary
index|[
literal|1
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|secondaryRack
argument_list|)
condition|)
block|{
name|skipServerSet
operator|.
name|add
argument_list|(
name|secondaryAndTertiary
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|skipServerSet
operator|.
name|size
argument_list|()
operator|+
literal|2
operator|<=
name|serverSet
operator|.
name|size
argument_list|()
condition|)
break|break;
name|skipServerSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rackSkipSet
operator|.
name|add
argument_list|(
name|secondaryRack
argument_list|)
expr_stmt|;
comment|// we used all racks
if|if
condition|(
name|rackSkipSet
operator|.
name|size
argument_list|()
operator|==
name|getTotalNumberOfRacks
argument_list|()
condition|)
block|{
comment|// remove the last two added and break
name|skipServerSet
operator|.
name|remove
argument_list|(
name|secondaryAndTertiary
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|skipServerSet
operator|.
name|remove
argument_list|(
name|secondaryAndTertiary
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
name|secondaryRack
operator|=
name|getOneRandomRack
argument_list|(
name|rackSkipSet
argument_list|)
expr_stmt|;
name|serverList
operator|=
name|getServersFromRack
argument_list|(
name|secondaryRack
argument_list|)
expr_stmt|;
name|serverSet
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|serverSet
operator|.
name|addAll
argument_list|(
name|serverList
argument_list|)
expr_stmt|;
block|}
comment|// Place the secondary RS
name|ServerName
name|secondaryRS
init|=
name|getOneRandomServer
argument_list|(
name|secondaryRack
argument_list|,
name|skipServerSet
argument_list|)
decl_stmt|;
name|skipServerSet
operator|.
name|add
argument_list|(
name|secondaryRS
argument_list|)
expr_stmt|;
comment|// Place the tertiary RS
name|ServerName
name|tertiaryRS
init|=
name|getOneRandomServer
argument_list|(
name|secondaryRack
argument_list|,
name|skipServerSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondaryRS
operator|==
literal|null
operator|||
name|tertiaryRS
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot place the secondary and tertiary"
operator|+
literal|" region server for region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create the secondary and tertiary pair
name|favoredNodes
operator|=
operator|new
name|ServerName
index|[
literal|2
index|]
expr_stmt|;
name|favoredNodes
index|[
literal|0
index|]
operator|=
name|secondaryRS
expr_stmt|;
name|favoredNodes
index|[
literal|1
index|]
operator|=
name|tertiaryRS
expr_stmt|;
block|}
else|else
block|{
comment|// Pick the secondary rs from this secondary rack
comment|// and pick the tertiary from another random rack
name|favoredNodes
operator|=
operator|new
name|ServerName
index|[
literal|2
index|]
expr_stmt|;
name|ServerName
name|secondary
init|=
name|getOneRandomServer
argument_list|(
name|secondaryRack
argument_list|)
decl_stmt|;
name|favoredNodes
index|[
literal|0
index|]
operator|=
name|secondary
expr_stmt|;
comment|// Pick the tertiary
if|if
condition|(
name|getTotalNumberOfRacks
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// Pick the tertiary from the same rack of the primary RS
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverSkipSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|serverSkipSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
name|favoredNodes
index|[
literal|1
index|]
operator|=
name|getOneRandomServer
argument_list|(
name|primaryRack
argument_list|,
name|serverSkipSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pick the tertiary from another rack
name|rackSkipSet
operator|.
name|add
argument_list|(
name|secondaryRack
argument_list|)
expr_stmt|;
name|String
name|tertiaryRandomRack
init|=
name|getOneRandomRack
argument_list|(
name|rackSkipSet
argument_list|)
decl_stmt|;
name|favoredNodes
index|[
literal|1
index|]
operator|=
name|getOneRandomServer
argument_list|(
name|tertiaryRandomRack
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|favoredNodes
return|;
block|}
specifier|private
name|ServerName
index|[]
name|singleRackCase
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|primaryRS
parameter_list|,
name|String
name|primaryRack
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Single rack case: have to pick the secondary and tertiary
comment|// from the same rack
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverList
init|=
name|getServersFromRack
argument_list|(
name|primaryRack
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|serverList
operator|==
literal|null
operator|)
operator|||
operator|(
name|serverList
operator|.
name|size
argument_list|()
operator|<=
literal|2
operator|)
condition|)
block|{
comment|// Single region server case: cannot not place the favored nodes
comment|// on any server;
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// Randomly select two region servers from the server list and make sure
comment|// they are not overlap with the primary region server;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverSkipSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|serverSkipSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
comment|// Place the secondary RS
name|ServerName
name|secondaryRS
init|=
name|getOneRandomServer
argument_list|(
name|primaryRack
argument_list|,
name|serverSkipSet
argument_list|)
decl_stmt|;
comment|// Skip the secondary for the tertiary placement
name|serverSkipSet
operator|.
name|add
argument_list|(
name|secondaryRS
argument_list|)
expr_stmt|;
name|ServerName
name|tertiaryRS
init|=
name|getOneRandomServer
argument_list|(
name|primaryRack
argument_list|,
name|serverSkipSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondaryRS
operator|==
literal|null
operator|||
name|tertiaryRS
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot place the secondary, tertiary favored node for region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create the secondary and tertiary pair
name|ServerName
index|[]
name|favoredNodes
init|=
operator|new
name|ServerName
index|[
literal|2
index|]
decl_stmt|;
name|favoredNodes
index|[
literal|0
index|]
operator|=
name|secondaryRS
expr_stmt|;
name|favoredNodes
index|[
literal|1
index|]
operator|=
name|tertiaryRS
expr_stmt|;
return|return
name|favoredNodes
return|;
block|}
block|}
comment|/**    * Place secondary and tertiary nodes in a multi rack case.    * If there are only two racks, then we try the place the secondary    * and tertiary on different rack than primary. But if the other rack has    * only one region server, then we place primary and tertiary on one rack    * and secondary on another. The aim is two distribute the three favored nodes    * on>= 2 racks.    * TODO: see how we can use generateMissingFavoredNodeMultiRack API here    * @param regionInfo Region for which we are trying to generate FN    * @param primaryRS The primary favored node.    * @param primaryRack The rack of the primary favored node.    * @return Array containing secondary and tertiary favored nodes.    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|private
name|ServerName
index|[]
name|multiRackCase
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|primaryRS
parameter_list|,
name|String
name|primaryRack
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|primaryRS
argument_list|)
decl_stmt|;
comment|// Create the secondary and tertiary pair
name|ServerName
name|secondaryRS
init|=
name|generateMissingFavoredNodeMultiRack
argument_list|(
name|favoredNodes
argument_list|)
decl_stmt|;
name|favoredNodes
operator|.
name|add
argument_list|(
name|secondaryRS
argument_list|)
expr_stmt|;
name|String
name|secondaryRack
init|=
name|getRackOfServer
argument_list|(
name|secondaryRS
argument_list|)
decl_stmt|;
name|ServerName
name|tertiaryRS
decl_stmt|;
if|if
condition|(
name|primaryRack
operator|.
name|equals
argument_list|(
name|secondaryRack
argument_list|)
condition|)
block|{
name|tertiaryRS
operator|=
name|generateMissingFavoredNode
argument_list|(
name|favoredNodes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Try to place tertiary in secondary RS rack else place on primary rack.
name|tertiaryRS
operator|=
name|getOneRandomServer
argument_list|(
name|secondaryRack
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|secondaryRS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tertiaryRS
operator|==
literal|null
condition|)
block|{
name|tertiaryRS
operator|=
name|getOneRandomServer
argument_list|(
name|primaryRack
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|primaryRS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We couldn't find anything in secondary rack, get any FN
if|if
condition|(
name|tertiaryRS
operator|==
literal|null
condition|)
block|{
name|tertiaryRS
operator|=
name|generateMissingFavoredNode
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|primaryRS
argument_list|,
name|secondaryRS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ServerName
index|[]
block|{
name|secondaryRS
block|,
name|tertiaryRS
block|}
return|;
block|}
specifier|public
name|boolean
name|canPlaceFavoredNodes
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|servers
operator|.
name|size
argument_list|()
operator|>=
name|FAVORED_NODES_NUM
operator|)
return|;
block|}
specifier|private
name|int
name|getTotalNumberOfRacks
parameter_list|()
block|{
return|return
name|this
operator|.
name|uniqueRackList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|getServersFromRack
parameter_list|(
name|String
name|rack
parameter_list|)
block|{
return|return
name|this
operator|.
name|rackToRegionServerMap
operator|.
name|get
argument_list|(
name|rack
argument_list|)
return|;
block|}
comment|/**    * Gets a random server from the specified rack and skips anything specified.     * @param rack rack from a server is needed    * @param skipServerSet the server shouldn't belong to this set    */
specifier|protected
name|ServerName
name|getOneRandomServer
parameter_list|(
name|String
name|rack
parameter_list|,
name|Set
argument_list|<
name|ServerName
argument_list|>
name|skipServerSet
parameter_list|)
block|{
comment|// Is the rack valid? Do we recognize it?
if|if
condition|(
name|rack
operator|==
literal|null
operator|||
name|getServersFromRack
argument_list|(
name|rack
argument_list|)
operator|==
literal|null
operator|||
name|getServersFromRack
argument_list|(
name|rack
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Lets use a set so we can eliminate duplicates
name|Set
argument_list|<
name|StartcodeAgnosticServerName
argument_list|>
name|serversToChooseFrom
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|getServersFromRack
argument_list|(
name|rack
argument_list|)
control|)
block|{
name|serversToChooseFrom
operator|.
name|add
argument_list|(
name|StartcodeAgnosticServerName
operator|.
name|valueOf
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skipServerSet
operator|!=
literal|null
operator|&&
name|skipServerSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ServerName
name|sn
range|:
name|skipServerSet
control|)
block|{
name|serversToChooseFrom
operator|.
name|remove
argument_list|(
name|StartcodeAgnosticServerName
operator|.
name|valueOf
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Do we have any servers left to choose from?
if|if
condition|(
name|serversToChooseFrom
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|ServerName
name|randomServer
init|=
literal|null
decl_stmt|;
name|int
name|randomIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|serversToChooseFrom
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StartcodeAgnosticServerName
name|sn
range|:
name|serversToChooseFrom
control|)
block|{
if|if
condition|(
name|j
operator|==
name|randomIndex
condition|)
block|{
name|randomServer
operator|=
name|sn
expr_stmt|;
break|break;
block|}
name|j
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|randomServer
operator|!=
literal|null
condition|)
block|{
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|randomServer
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|randomServer
operator|.
name|getStartcode
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|ServerName
name|getOneRandomServer
parameter_list|(
name|String
name|rack
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|getOneRandomServer
argument_list|(
name|rack
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getOneRandomRack
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|skipRackSet
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|skipRackSet
operator|==
literal|null
operator|||
name|uniqueRackList
operator|.
name|size
argument_list|()
operator|<=
name|skipRackSet
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot randomly pick another random server"
argument_list|)
throw|;
block|}
name|String
name|randomRack
decl_stmt|;
do|do
block|{
name|int
name|randomIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|this
operator|.
name|uniqueRackList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|randomRack
operator|=
name|this
operator|.
name|uniqueRackList
operator|.
name|get
argument_list|(
name|randomIndex
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|skipRackSet
operator|.
name|contains
argument_list|(
name|randomRack
argument_list|)
condition|)
do|;
return|return
name|randomRack
return|;
block|}
specifier|public
specifier|static
name|String
name|getFavoredNodesAsString
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|nodes
parameter_list|)
block|{
name|StringBuffer
name|strBuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ServerName
name|node
range|:
name|nodes
control|)
block|{
name|strBuf
operator|.
name|append
argument_list|(
name|node
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|!=
name|nodes
operator|.
name|size
argument_list|()
condition|)
name|strBuf
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
return|return
name|strBuf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*    * Generates a missing favored node based on the input favored nodes. This helps to generate    * new FN when there is already 2 FN and we need a third one. For eg, while generating new FN    * for split daughters after inheriting 2 FN from the parent. If the cluster has only one rack    * it generates from the same rack. If the cluster has multiple racks, then it ensures the new    * FN respects the rack constraints similar to HDFS. For eg: if there are 3 FN, they will be    * spread across 2 racks.    */
specifier|public
name|ServerName
name|generateMissingFavoredNode
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|uniqueRackList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|generateMissingFavoredNodeSingleRack
argument_list|(
name|favoredNodes
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|generateMissingFavoredNodeMultiRack
argument_list|(
name|favoredNodes
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
specifier|public
name|ServerName
name|generateMissingFavoredNode
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|excludeNodes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|uniqueRackList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|generateMissingFavoredNodeSingleRack
argument_list|(
name|favoredNodes
argument_list|,
name|excludeNodes
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|generateMissingFavoredNodeMultiRack
argument_list|(
name|favoredNodes
argument_list|,
name|excludeNodes
argument_list|)
return|;
block|}
block|}
comment|/*    * Generate FN for a single rack scenario, don't generate from one of the excluded nodes. Helps    * when we would like to find a replacement node.    */
specifier|private
name|ServerName
name|generateMissingFavoredNodeSingleRack
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|excludeNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerName
name|newServer
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|excludeFNSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|favoredNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeNodes
operator|!=
literal|null
operator|&&
name|excludeNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|excludeFNSet
operator|.
name|addAll
argument_list|(
name|excludeNodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|favoredNodes
operator|.
name|size
argument_list|()
operator|<
name|FAVORED_NODES_NUM
condition|)
block|{
name|newServer
operator|=
name|this
operator|.
name|getOneRandomServer
argument_list|(
name|this
operator|.
name|uniqueRackList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|excludeFNSet
argument_list|)
expr_stmt|;
block|}
return|return
name|newServer
return|;
block|}
specifier|private
name|ServerName
name|generateMissingFavoredNodeMultiRack
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|generateMissingFavoredNodeMultiRack
argument_list|(
name|favoredNodes
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/*    * Generates a missing FN based on the input favoredNodes and also the nodes to be skipped.    *    * Get the current layout of favored nodes arrangement and nodes to be excluded and get a    * random node that goes with HDFS block placement. Eg: If the existing nodes are on one rack,    * generate one from another rack. We exclude as much as possible so the random selection    * has more chance to generate a node within a few iterations, ideally 1.    */
specifier|private
name|ServerName
name|generateMissingFavoredNodeMultiRack
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|excludeNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|racks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|rackToFNMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Lets understand the current rack distribution of the FN
for|for
control|(
name|ServerName
name|sn
range|:
name|favoredNodes
control|)
block|{
name|String
name|rack
init|=
name|getRackOfServer
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|racks
operator|.
name|add
argument_list|(
name|rack
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serversInRack
init|=
name|rackToFNMapping
operator|.
name|get
argument_list|(
name|rack
argument_list|)
decl_stmt|;
if|if
condition|(
name|serversInRack
operator|==
literal|null
condition|)
block|{
name|serversInRack
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|rackToFNMapping
operator|.
name|put
argument_list|(
name|rack
argument_list|,
name|serversInRack
argument_list|)
expr_stmt|;
block|}
name|serversInRack
operator|.
name|add
argument_list|(
name|sn
argument_list|)
expr_stmt|;
block|}
comment|// What racks should be skipped while getting a FN?
name|Set
argument_list|<
name|String
argument_list|>
name|skipRackSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
comment|/*      * If both the FN are from the same rack, then we don't want to generate another FN on the      * same rack. If that rack fails, the region would be unavailable.      */
if|if
condition|(
name|racks
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|favoredNodes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|skipRackSet
operator|.
name|add
argument_list|(
name|racks
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * If there are no free nodes on the existing racks, we should skip those racks too. We can      * reduce the number of iterations for FN selection.      */
for|for
control|(
name|String
name|rack
range|:
name|racks
control|)
block|{
if|if
condition|(
name|getServersFromRack
argument_list|(
name|rack
argument_list|)
operator|!=
literal|null
operator|&&
name|rackToFNMapping
operator|.
name|get
argument_list|(
name|rack
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|getServersFromRack
argument_list|(
name|rack
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|skipRackSet
operator|.
name|add
argument_list|(
name|rack
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|ServerName
argument_list|>
name|favoredNodeSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|favoredNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeNodes
operator|!=
literal|null
operator|&&
name|excludeNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|favoredNodeSet
operator|.
name|addAll
argument_list|(
name|excludeNodes
argument_list|)
expr_stmt|;
block|}
comment|/*      * Lets get a random rack by excluding skipRackSet and generate a random FN from that rack.      */
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|randomRacks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|ServerName
name|newServer
init|=
literal|null
decl_stmt|;
do|do
block|{
name|String
name|randomRack
init|=
name|this
operator|.
name|getOneRandomRack
argument_list|(
name|skipRackSet
argument_list|)
decl_stmt|;
name|newServer
operator|=
name|this
operator|.
name|getOneRandomServer
argument_list|(
name|randomRack
argument_list|,
name|favoredNodeSet
argument_list|)
expr_stmt|;
name|randomRacks
operator|.
name|add
argument_list|(
name|randomRack
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|i
operator|<
name|MAX_ATTEMPTS_FN_GENERATION
operator|)
operator|&&
operator|(
name|newServer
operator|==
literal|null
operator|)
condition|)
do|;
if|if
condition|(
name|newServer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to generate additional favored nodes for %s after "
operator|+
literal|"considering racks %s and skip rack %s with a unique rack list of %s and rack "
operator|+
literal|"to RS map of %s and RS to rack map of %s"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|favoredNodes
argument_list|,
literal|","
argument_list|)
argument_list|,
name|randomRacks
argument_list|,
name|skipRackSet
argument_list|,
name|uniqueRackList
argument_list|,
name|rackToRegionServerMap
argument_list|,
name|regionServerToRackMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|" Unable to generate additional favored nodes for "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|favoredNodes
argument_list|,
literal|","
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|newServer
return|;
block|}
comment|/*    * Generate favored nodes for a region.    *    * Choose a random server as primary and then choose secondary and tertiary FN so its spread    * across two racks.    */
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|generateFavoredNodes
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesForRegion
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|FAVORED_NODES_NUM
argument_list|)
decl_stmt|;
name|ServerName
name|primary
init|=
name|servers
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|favoredNodesForRegion
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|primary
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|primaryRSMap
operator|.
name|put
argument_list|(
name|hri
argument_list|,
name|primary
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryRSMap
init|=
name|placeSecondaryAndTertiaryRS
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
name|ServerName
index|[]
name|secondaryAndTertiaryNodes
init|=
name|secondaryAndTertiaryRSMap
operator|.
name|get
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondaryAndTertiaryNodes
operator|!=
literal|null
operator|&&
name|secondaryAndTertiaryNodes
operator|.
name|length
operator|==
literal|2
condition|)
block|{
for|for
control|(
name|ServerName
name|sn
range|:
name|secondaryAndTertiaryNodes
control|)
block|{
name|favoredNodesForRegion
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|favoredNodesForRegion
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
literal|"Unable to generate secondary and tertiary favored nodes."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|generateFavoredNodesRoundRobin
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|assignmentMap
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|canPlaceFavoredNodes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Lets try to have an equal distribution for primary favored node
name|placePrimaryRSAsRoundRobin
argument_list|(
name|assignmentMap
argument_list|,
name|primaryRSMap
argument_list|,
name|regions
argument_list|)
expr_stmt|;
return|return
name|generateFavoredNodes
argument_list|(
name|primaryRSMap
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
literal|"Not enough nodes to generate favored nodes"
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/*    * Generate favored nodes for a set of regions when we know where they are currently hosted.    */
specifier|private
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|generateFavoredNodes
parameter_list|(
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
parameter_list|)
block|{
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|generatedFavNodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryRSMap
init|=
name|placeSecondaryAndTertiaryRS
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|entry
range|:
name|primaryRSMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesForRegion
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|FAVORED_NODES_NUM
argument_list|)
decl_stmt|;
name|RegionInfo
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ServerName
name|primarySN
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|favoredNodesForRegion
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|primarySN
operator|.
name|getHostname
argument_list|()
argument_list|,
name|primarySN
operator|.
name|getPort
argument_list|()
argument_list|,
name|NON_STARTCODE
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
index|[]
name|secondaryAndTertiaryNodes
init|=
name|secondaryAndTertiaryRSMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondaryAndTertiaryNodes
operator|!=
literal|null
condition|)
block|{
name|favoredNodesForRegion
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|secondaryAndTertiaryNodes
index|[
literal|0
index|]
operator|.
name|getHostname
argument_list|()
argument_list|,
name|secondaryAndTertiaryNodes
index|[
literal|0
index|]
operator|.
name|getPort
argument_list|()
argument_list|,
name|NON_STARTCODE
argument_list|)
argument_list|)
expr_stmt|;
name|favoredNodesForRegion
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|secondaryAndTertiaryNodes
index|[
literal|1
index|]
operator|.
name|getHostname
argument_list|()
argument_list|,
name|secondaryAndTertiaryNodes
index|[
literal|1
index|]
operator|.
name|getPort
argument_list|()
argument_list|,
name|NON_STARTCODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|generatedFavNodes
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|favoredNodesForRegion
argument_list|)
expr_stmt|;
block|}
return|return
name|generatedFavNodes
return|;
block|}
comment|/*    * Get the rack of server from local mapping when present, saves lookup by the RackManager.    */
specifier|private
name|String
name|getRackOfServer
parameter_list|(
name|ServerName
name|sn
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|regionServerToRackMap
operator|.
name|containsKey
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|regionServerToRackMap
operator|.
name|get
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|rack
init|=
name|this
operator|.
name|rackManager
operator|.
name|getRack
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|this
operator|.
name|regionServerToRackMap
operator|.
name|put
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
name|rack
argument_list|)
expr_stmt|;
return|return
name|rack
return|;
block|}
block|}
block|}
end_class

end_unit

