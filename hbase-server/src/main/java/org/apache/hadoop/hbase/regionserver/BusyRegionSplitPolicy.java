begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * This class represents a split policy which makes the split decision based  * on how busy a region is. The metric that is used here is the fraction of  * total write requests that are blocked due to high memstore utilization.  * This fractional rate is calculated over a running window of  * "hbase.busy.policy.aggWindow" milliseconds. The rate is a time-weighted  * aggregated average of the rate in the current window and the  * true average rate in the previous window.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|BusyRegionSplitPolicy
extends|extends
name|IncreasingToUpperBoundRegionSplitPolicy
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BusyRegionSplitPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Maximum fraction blocked write requests before region is considered for split
specifier|private
name|float
name|maxBlockedRequests
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_MAX_BLOCKED_REQUESTS
init|=
literal|0.2f
decl_stmt|;
comment|// Minimum age of the region in milliseconds before it is considered for split
specifier|private
name|long
name|minAge
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_MIN_AGE_MS
init|=
literal|600000
decl_stmt|;
comment|// 10 minutes
comment|// The window time in milliseconds over which the blocked requests rate is calculated
specifier|private
name|long
name|aggregationWindow
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_AGGREGATION_WINDOW
init|=
literal|300000
decl_stmt|;
comment|// 5 minutes
specifier|private
name|HRegion
name|region
decl_stmt|;
specifier|private
name|long
name|prevTime
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
name|long
name|writeRequestCount
decl_stmt|;
specifier|private
name|long
name|blockedRequestCount
decl_stmt|;
specifier|private
name|float
name|blockedRate
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|configureForRegion
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
block|{
name|super
operator|.
name|configureForRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|maxBlockedRequests
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.busy.policy.blockedRequests"
argument_list|,
name|DEFAULT_MAX_BLOCKED_REQUESTS
argument_list|)
expr_stmt|;
name|minAge
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.busy.policy.minAge"
argument_list|,
name|DEFAULT_MIN_AGE_MS
argument_list|)
expr_stmt|;
name|aggregationWindow
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.busy.policy.aggWindow"
argument_list|,
name|DEFAULT_AGGREGATION_WINDOW
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxBlockedRequests
argument_list|<
literal|0.00001f
operator|||
name|maxBlockedRequests
argument_list|>
literal|0.99999f
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Threshold for maximum blocked requests is set too low or too high, "
operator|+
literal|" resetting to default of "
operator|+
name|DEFAULT_MAX_BLOCKED_REQUESTS
argument_list|)
expr_stmt|;
name|maxBlockedRequests
operator|=
name|DEFAULT_MAX_BLOCKED_REQUESTS
expr_stmt|;
block|}
if|if
condition|(
name|aggregationWindow
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Aggregation window size is too low: "
operator|+
name|aggregationWindow
operator|+
literal|". Resetting it to default of "
operator|+
name|DEFAULT_AGGREGATION_WINDOW
argument_list|)
expr_stmt|;
name|aggregationWindow
operator|=
name|DEFAULT_AGGREGATION_WINDOW
expr_stmt|;
block|}
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|init
parameter_list|()
block|{
name|startTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|prevTime
operator|=
name|startTime
expr_stmt|;
name|blockedRequestCount
operator|=
name|region
operator|.
name|getBlockedRequestsCount
argument_list|()
expr_stmt|;
name|writeRequestCount
operator|=
name|region
operator|.
name|getWriteRequestsCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldSplit
parameter_list|()
block|{
name|float
name|blockedReqRate
init|=
name|updateRate
argument_list|()
decl_stmt|;
if|if
condition|(
name|super
operator|.
name|shouldSplit
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|startTime
operator|+
name|minAge
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|HStore
name|store
range|:
name|region
operator|.
name|getStores
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|store
operator|.
name|canSplit
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|blockedReqRate
operator|>=
name|maxBlockedRequests
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to split region "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because it's too busy. Blocked Request rate: "
operator|+
name|blockedReqRate
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Update the blocked request rate based on number of blocked and total write requests in the    * last aggregation window, or since last call to this method, whichever is farthest in time.    * Uses weighted rate calculation based on the previous rate and new data.    *    * @return Updated blocked request rate.    */
specifier|private
specifier|synchronized
name|float
name|updateRate
parameter_list|()
block|{
name|float
name|aggBlockedRate
decl_stmt|;
name|long
name|curTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|newBlockedReqs
init|=
name|region
operator|.
name|getBlockedRequestsCount
argument_list|()
decl_stmt|;
name|long
name|newWriteReqs
init|=
name|region
operator|.
name|getWriteRequestsCount
argument_list|()
decl_stmt|;
name|aggBlockedRate
operator|=
operator|(
name|newBlockedReqs
operator|-
name|blockedRequestCount
operator|)
operator|/
operator|(
name|newWriteReqs
operator|-
name|writeRequestCount
operator|+
literal|0.00001f
operator|)
expr_stmt|;
if|if
condition|(
name|curTime
operator|-
name|prevTime
operator|>=
name|aggregationWindow
condition|)
block|{
name|blockedRate
operator|=
name|aggBlockedRate
expr_stmt|;
name|prevTime
operator|=
name|curTime
expr_stmt|;
name|blockedRequestCount
operator|=
name|newBlockedReqs
expr_stmt|;
name|writeRequestCount
operator|=
name|newWriteReqs
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|curTime
operator|-
name|startTime
operator|>=
name|aggregationWindow
condition|)
block|{
comment|// Calculate the aggregate blocked rate as the weighted sum of
comment|// previous window's average blocked rate and blocked rate in this window so far.
name|float
name|timeSlice
init|=
operator|(
name|curTime
operator|-
name|prevTime
operator|)
operator|/
operator|(
name|aggregationWindow
operator|+
literal|0.0f
operator|)
decl_stmt|;
name|aggBlockedRate
operator|=
operator|(
literal|1
operator|-
name|timeSlice
operator|)
operator|*
name|blockedRate
operator|+
name|timeSlice
operator|*
name|aggBlockedRate
expr_stmt|;
block|}
else|else
block|{
name|aggBlockedRate
operator|=
literal|0.0f
expr_stmt|;
block|}
return|return
name|aggBlockedRate
return|;
block|}
block|}
end_class

end_unit

