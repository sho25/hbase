begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotAllMetaRegionsOnlineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SnapshotSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|CreateTableHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RestoreSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RestoreSnapshotHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Handler to Clone a snapshot.  *  *<p>Uses {@link RestoreSnapshotHelper} to create a new table with the same  * content of the specified snapshot.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CloneSnapshotHandler
extends|extends
name|CreateTableHandler
implements|implements
name|SnapshotSentinel
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CloneSnapshotHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NAME
init|=
literal|"Master CloneSnapshotHandler"
decl_stmt|;
specifier|private
specifier|final
name|SnapshotDescription
name|snapshot
decl_stmt|;
specifier|private
specifier|final
name|ForeignExceptionDispatcher
name|monitor
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|public
name|CloneSnapshotHandler
parameter_list|(
specifier|final
name|MasterServices
name|masterServices
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|NotAllMetaRegionsOnlineException
throws|,
name|TableExistsException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|masterServices
argument_list|,
name|masterServices
operator|.
name|getMasterFileSystem
argument_list|()
argument_list|,
name|hTableDescriptor
argument_list|,
name|masterServices
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
name|masterServices
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// Snapshot information
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
comment|// Monitor
name|this
operator|.
name|monitor
operator|=
operator|new
name|ForeignExceptionDispatcher
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|handleCreateRegions
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|fileSystemManager
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|rootDir
init|=
name|fileSystemManager
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|Path
name|tableDir
init|=
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Execute the Clone
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|RestoreSnapshotHelper
name|restoreHelper
init|=
operator|new
name|RestoreSnapshotHelper
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|catalogTracker
argument_list|,
name|snapshot
argument_list|,
name|snapshotDir
argument_list|,
name|hTableDescriptor
argument_list|,
name|tableDir
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|restoreHelper
operator|.
name|restore
argument_list|()
expr_stmt|;
comment|// At this point the clone is complete. Next step is enabling the table.
name|LOG
operator|.
name|info
argument_list|(
literal|"Clone snapshot="
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" on table="
operator|+
name|tableName
operator|+
literal|" completed!"
argument_list|)
expr_stmt|;
return|return
name|MetaReader
operator|.
name|getTableRegions
argument_list|(
name|catalogTracker
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"clone snapshot="
operator|+
name|snapshot
operator|+
literal|" failed"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|IOException
name|rse
init|=
operator|new
name|RestoreSnapshotException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
decl_stmt|;
comment|// these handlers aren't futures so we need to register the error here.
name|this
operator|.
name|monitor
operator|.
name|receive
argument_list|(
operator|new
name|ForeignException
argument_list|(
name|NAME
argument_list|,
name|rse
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|rse
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|SnapshotDescription
name|getSnapshot
parameter_list|()
block|{
return|return
name|snapshot
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|(
name|String
name|why
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
return|return;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping clone snapshot="
operator|+
name|snapshot
operator|+
literal|" because: "
operator|+
name|why
argument_list|)
expr_stmt|;
name|this
operator|.
name|monitor
operator|.
name|receive
argument_list|(
operator|new
name|ForeignException
argument_list|(
name|NAME
argument_list|,
operator|new
name|CancellationException
argument_list|(
name|why
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ForeignException
name|getExceptionIfFailed
parameter_list|()
block|{
return|return
name|this
operator|.
name|monitor
operator|.
name|getException
argument_list|()
return|;
block|}
block|}
end_class

end_unit

