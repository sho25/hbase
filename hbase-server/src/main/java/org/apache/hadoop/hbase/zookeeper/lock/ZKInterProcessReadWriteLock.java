begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|InterProcessLock
operator|.
name|MetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|InterProcessReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_comment
comment|/**  * ZooKeeper based implementation of {@link InterProcessReadWriteLock}. This lock is fair,  * not reentrant, and not revocable.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZKInterProcessReadWriteLock
implements|implements
name|InterProcessReadWriteLock
block|{
specifier|private
specifier|final
name|ZooKeeperWatcher
name|zkWatcher
decl_stmt|;
specifier|private
specifier|final
name|String
name|znode
decl_stmt|;
specifier|private
specifier|final
name|MetadataHandler
name|handler
decl_stmt|;
comment|/**    * Creates a DistributedReadWriteLock instance.    * @param zkWatcher    * @param znode ZNode path for the lock    * @param handler An object that will handle de-serializing and processing    *                the metadata associated with reader or writer locks    *                created by this object or null if none desired.    */
specifier|public
name|ZKInterProcessReadWriteLock
parameter_list|(
name|ZooKeeperWatcher
name|zkWatcher
parameter_list|,
name|String
name|znode
parameter_list|,
name|MetadataHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|zkWatcher
operator|=
name|zkWatcher
expr_stmt|;
name|this
operator|.
name|znode
operator|=
name|znode
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
specifier|public
name|ZKInterProcessReadLock
name|readLock
parameter_list|(
name|byte
index|[]
name|metadata
parameter_list|)
block|{
return|return
operator|new
name|ZKInterProcessReadLock
argument_list|(
name|zkWatcher
argument_list|,
name|znode
argument_list|,
name|metadata
argument_list|,
name|handler
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
specifier|public
name|ZKInterProcessWriteLock
name|writeLock
parameter_list|(
name|byte
index|[]
name|metadata
parameter_list|)
block|{
return|return
operator|new
name|ZKInterProcessWriteLock
argument_list|(
name|zkWatcher
argument_list|,
name|znode
argument_list|,
name|metadata
argument_list|,
name|handler
argument_list|)
return|;
block|}
block|}
end_class

end_unit

