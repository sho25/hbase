begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|map
operator|.
name|AbstractReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|map
operator|.
name|ReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BulkLoadObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorServiceBackwardCompatiblity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|EndpointObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MetricsCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|FSDataInputStreamWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionLifeCycleTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
operator|.
name|DeleteTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CoprocessorClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Implements the coprocessor environment and runtime support for coprocessors  * loaded within a {@link Region}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|RegionCoprocessorHost
extends|extends
name|CoprocessorHost
argument_list|<
name|RegionCoprocessor
argument_list|,
name|RegionCoprocessorEnvironment
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionCoprocessorHost
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The shared data map
specifier|private
specifier|static
specifier|final
name|ReferenceMap
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|SHARED_DATA_MAP
init|=
operator|new
name|ReferenceMap
argument_list|<>
argument_list|(
name|AbstractReferenceMap
operator|.
name|ReferenceStrength
operator|.
name|HARD
argument_list|,
name|AbstractReferenceMap
operator|.
name|ReferenceStrength
operator|.
name|WEAK
argument_list|)
decl_stmt|;
comment|// optimization: no need to call postScannerFilterRow, if no coprocessor implements it
specifier|private
specifier|final
name|boolean
name|hasCustomPostScannerFilterRow
decl_stmt|;
comment|/**    *    * Encapsulation of the environment of each coprocessor    */
specifier|static
class|class
name|RegionEnvironment
extends|extends
name|BaseEnvironment
argument_list|<
name|RegionCoprocessor
argument_list|>
implements|implements
name|RegionCoprocessorEnvironment
block|{
specifier|private
name|Region
name|region
decl_stmt|;
specifier|private
name|RegionServerServices
name|rsServices
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sharedData
decl_stmt|;
specifier|private
specifier|final
name|MetricRegistry
name|metricRegistry
decl_stmt|;
comment|/**      * Constructor      * @param impl the coprocessor instance      * @param priority chaining priority      */
specifier|public
name|RegionEnvironment
parameter_list|(
specifier|final
name|RegionCoprocessor
name|impl
parameter_list|,
specifier|final
name|int
name|priority
parameter_list|,
specifier|final
name|int
name|seq
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|,
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sharedData
parameter_list|)
block|{
name|super
argument_list|(
name|impl
argument_list|,
name|priority
argument_list|,
name|seq
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|rsServices
operator|=
name|services
expr_stmt|;
name|this
operator|.
name|sharedData
operator|=
name|sharedData
expr_stmt|;
name|this
operator|.
name|metricRegistry
operator|=
name|MetricsCoprocessor
operator|.
name|createRegistryForRegionCoprocessor
argument_list|(
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** @return the region */
annotation|@
name|Override
specifier|public
name|Region
name|getRegion
parameter_list|()
block|{
return|return
name|region
return|;
block|}
comment|/** @return reference to the region server services */
annotation|@
name|Override
specifier|public
name|CoprocessorRegionServerServices
name|getCoprocessorRegionServerServices
parameter_list|()
block|{
return|return
name|rsServices
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|MetricsCoprocessor
operator|.
name|removeRegistry
argument_list|(
name|this
operator|.
name|metricRegistry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSharedData
parameter_list|()
block|{
return|return
name|sharedData
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|region
operator|.
name|getRegionInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricRegistry
name|getMetricRegistryForRegionServer
parameter_list|()
block|{
return|return
name|metricRegistry
return|;
block|}
block|}
specifier|static
class|class
name|TableCoprocessorAttribute
block|{
specifier|private
name|Path
name|path
decl_stmt|;
specifier|private
name|String
name|className
decl_stmt|;
specifier|private
name|int
name|priority
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|TableCoprocessorAttribute
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|className
parameter_list|,
name|int
name|priority
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
comment|/** The region server services */
name|RegionServerServices
name|rsServices
decl_stmt|;
comment|/** The region */
name|Region
name|region
decl_stmt|;
comment|/**    * Constructor    * @param region the region    * @param rsServices interface to available region server functionality    * @param conf the configuration    */
specifier|public
name|RegionCoprocessorHost
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|RegionServerServices
name|rsServices
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|rsServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rsServices
operator|=
name|rsServices
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|pathPrefix
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// load system default cp's from configuration.
name|loadSystemCoprocessors
argument_list|(
name|conf
argument_list|,
name|REGION_COPROCESSOR_CONF_KEY
argument_list|)
expr_stmt|;
comment|// load system default cp's for user tables from configuration.
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|loadSystemCoprocessors
argument_list|(
name|conf
argument_list|,
name|USER_REGION_COPROCESSOR_CONF_KEY
argument_list|)
expr_stmt|;
block|}
comment|// load Coprocessor From HDFS
name|loadTableCoprocessors
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// now check whether any coprocessor implements postScannerFilterRow
name|boolean
name|hasCustomPostScannerFilterRow
init|=
literal|false
decl_stmt|;
name|out
label|:
for|for
control|(
name|RegionCoprocessorEnvironment
name|env
range|:
name|coprocEnvironments
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|env
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// we must have directly implemented RegionObserver
name|hasCustomPostScannerFilterRow
operator|=
literal|true
expr_stmt|;
break|break
name|out
break|;
block|}
try|try
block|{
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
literal|"postScannerFilterRow"
argument_list|,
name|ObserverContext
operator|.
name|class
argument_list|,
name|InternalScanner
operator|.
name|class
argument_list|,
name|Cell
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// this coprocessor has a custom version of postScannerFilterRow
name|hasCustomPostScannerFilterRow
operator|=
literal|true
expr_stmt|;
break|break
name|out
break|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ignore
parameter_list|)
block|{           }
comment|// the deprecated signature still exists
try|try
block|{
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
literal|"postScannerFilterRow"
argument_list|,
name|ObserverContext
operator|.
name|class
argument_list|,
name|InternalScanner
operator|.
name|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|short
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// this coprocessor has a custom version of postScannerFilterRow
name|hasCustomPostScannerFilterRow
operator|=
literal|true
expr_stmt|;
break|break
name|out
break|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ignore
parameter_list|)
block|{           }
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|hasCustomPostScannerFilterRow
operator|=
name|hasCustomPostScannerFilterRow
expr_stmt|;
block|}
specifier|static
name|List
argument_list|<
name|TableCoprocessorAttribute
argument_list|>
name|getTableCoprocessorAttrsFromSchema
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|)
block|{
name|List
argument_list|<
name|TableCoprocessorAttribute
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|e
range|:
name|htd
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|key
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|spec
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// found one
try|try
block|{
name|Matcher
name|matcher
init|=
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|spec
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// jar file path can be empty if the cp class can be loaded
comment|// from class loader.
name|Path
name|path
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Path
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Malformed table coprocessor specification: key="
operator|+
name|key
operator|+
literal|", spec: "
operator|+
name|spec
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|priorityStr
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|priority
init|=
name|priorityStr
operator|.
name|isEmpty
argument_list|()
condition|?
name|Coprocessor
operator|.
name|PRIORITY_USER
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|priorityStr
argument_list|)
decl_stmt|;
name|String
name|cfgSpec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cfgSpec
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|Configuration
name|ourConf
decl_stmt|;
if|if
condition|(
name|cfgSpec
operator|!=
literal|null
operator|&&
operator|!
name|cfgSpec
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"|"
argument_list|)
condition|)
block|{
name|cfgSpec
operator|=
name|cfgSpec
operator|.
name|substring
argument_list|(
name|cfgSpec
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// do an explicit deep copy of the passed configuration
name|ourConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|ourConf
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Matcher
name|m
init|=
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PARAM_PATTERN
operator|.
name|matcher
argument_list|(
name|cfgSpec
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|ourConf
operator|.
name|set
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ourConf
operator|=
name|conf
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|TableCoprocessorAttribute
argument_list|(
name|path
argument_list|,
name|className
argument_list|,
name|priority
argument_list|,
name|ourConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Malformed table coprocessor specification: key="
operator|+
name|key
operator|+
literal|", spec: "
operator|+
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Malformed table coprocessor specification: key="
operator|+
name|key
operator|+
literal|", spec: "
operator|+
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Sanity check the table coprocessor attributes of the supplied schema. Will    * throw an exception if there is a problem.    * @param conf    * @param htd    * @throws IOException    */
specifier|public
specifier|static
name|void
name|testTableCoprocessorAttrs
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|pathPrefix
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|TableCoprocessorAttribute
name|attr
range|:
name|getTableCoprocessorAttrsFromSchema
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|)
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|getPriority
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Priority for coprocessor "
operator|+
name|attr
operator|.
name|getClassName
argument_list|()
operator|+
literal|" cannot be less than 0"
argument_list|)
throw|;
block|}
name|ClassLoader
name|old
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ClassLoader
name|cl
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cl
operator|=
name|CoprocessorClassLoader
operator|.
name|getClassLoader
argument_list|(
name|attr
operator|.
name|getPath
argument_list|()
argument_list|,
name|CoprocessorHost
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|pathPrefix
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cl
operator|=
name|CoprocessorHost
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|cl
operator|.
name|loadClass
argument_list|(
name|attr
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Class "
operator|+
name|attr
operator|.
name|getClassName
argument_list|()
operator|+
literal|" cannot be loaded"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|loadTableCoprocessors
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|coprocessorsEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|COPROCESSORS_ENABLED_CONF_KEY
argument_list|,
name|DEFAULT_COPROCESSORS_ENABLED
argument_list|)
decl_stmt|;
name|boolean
name|tableCoprocessorsEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|USER_COPROCESSORS_ENABLED_CONF_KEY
argument_list|,
name|DEFAULT_USER_COPROCESSORS_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|coprocessorsEnabled
operator|&&
name|tableCoprocessorsEnabled
operator|)
condition|)
block|{
return|return;
block|}
comment|// scan the table attributes for coprocessor load specifications
comment|// initialize the coprocessors
name|List
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|configured
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableCoprocessorAttribute
name|attr
range|:
name|getTableCoprocessorAttrsFromSchema
argument_list|(
name|conf
argument_list|,
name|region
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
control|)
block|{
comment|// Load encompasses classloading and coprocessor initialization
try|try
block|{
name|RegionCoprocessorEnvironment
name|env
init|=
name|load
argument_list|(
name|attr
operator|.
name|getPath
argument_list|()
argument_list|,
name|attr
operator|.
name|getClassName
argument_list|()
argument_list|,
name|attr
operator|.
name|getPriority
argument_list|()
argument_list|,
name|attr
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|env
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|configured
operator|.
name|add
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded coprocessor "
operator|+
name|attr
operator|.
name|getClassName
argument_list|()
operator|+
literal|" from HTD of "
operator|+
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Coprocessor failed to load, do we abort on error?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|ABORT_ON_ERROR_KEY
argument_list|,
name|DEFAULT_ABORT_ON_ERROR
argument_list|)
condition|)
block|{
name|abortServer
argument_list|(
name|attr
operator|.
name|getClassName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load coprocessor "
operator|+
name|attr
operator|.
name|getClassName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add together to coprocessor set for COW efficiency
name|coprocEnvironments
operator|.
name|addAll
argument_list|(
name|configured
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RegionEnvironment
name|createEnvironment
parameter_list|(
name|RegionCoprocessor
name|instance
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|seq
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// If coprocessor exposes any services, register them.
for|for
control|(
name|Service
name|service
range|:
name|instance
operator|.
name|getServices
argument_list|()
control|)
block|{
name|region
operator|.
name|registerService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|classData
decl_stmt|;
comment|// make sure only one thread can add maps
synchronized|synchronized
init|(
name|SHARED_DATA_MAP
init|)
block|{
comment|// as long as at least one RegionEnvironment holds on to its classData it will
comment|// remain in this map
name|classData
operator|=
name|SHARED_DATA_MAP
operator|.
name|computeIfAbsent
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RegionEnvironment
argument_list|(
name|instance
argument_list|,
name|priority
argument_list|,
name|seq
argument_list|,
name|conf
argument_list|,
name|region
argument_list|,
name|rsServices
argument_list|,
name|classData
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionCoprocessor
name|checkAndGetInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
if|if
condition|(
name|RegionCoprocessor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|implClass
argument_list|)
condition|)
block|{
return|return
operator|(
name|RegionCoprocessor
operator|)
name|implClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|CoprocessorService
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|implClass
argument_list|)
condition|)
block|{
comment|// For backward compatibility with old CoprocessorService impl which don't extend
comment|// RegionCoprocessor.
return|return
operator|new
name|CoprocessorServiceBackwardCompatiblity
operator|.
name|RegionCoprocessorService
argument_list|(
operator|(
name|CoprocessorService
operator|)
name|implClass
operator|.
name|newInstance
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|implClass
operator|.
name|getName
argument_list|()
operator|+
literal|" is not of type RegionCoprocessor. Check the "
operator|+
literal|"configuration "
operator|+
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|ObserverGetter
argument_list|<
name|RegionCoprocessor
argument_list|,
name|RegionObserver
argument_list|>
name|regionObserverGetter
init|=
name|RegionCoprocessor
operator|::
name|getRegionObserver
decl_stmt|;
specifier|private
name|ObserverGetter
argument_list|<
name|RegionCoprocessor
argument_list|,
name|EndpointObserver
argument_list|>
name|endpointObserverGetter
init|=
name|RegionCoprocessor
operator|::
name|getEndpointObserver
decl_stmt|;
specifier|abstract
class|class
name|RegionObserverOperation
extends|extends
name|ObserverOperationWithoutResult
argument_list|<
name|RegionObserver
argument_list|>
block|{
specifier|public
name|RegionObserverOperation
parameter_list|()
block|{
name|super
argument_list|(
name|regionObserverGetter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionObserverOperation
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|super
argument_list|(
name|regionObserverGetter
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
specifier|abstract
class|class
name|BulkLoadObserverOperation
extends|extends
name|ObserverOperationWithoutResult
argument_list|<
name|BulkLoadObserver
argument_list|>
block|{
specifier|public
name|BulkLoadObserverOperation
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|super
argument_list|(
name|RegionCoprocessor
operator|::
name|getBulkLoadObserver
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////////////////////////
comment|// Observer operations
comment|//////////////////////////////////////////////////////////////////////////////////////////////////
comment|//////////////////////////////////////////////////////////////////////////////////////////////////
comment|// Observer operations
comment|//////////////////////////////////////////////////////////////////////////////////////////////////
comment|/**    * Invoked before a region open.    *    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
name|void
name|preOpen
parameter_list|()
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preOpen
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invoked after a region open    */
specifier|public
name|void
name|postOpen
parameter_list|()
block|{
try|try
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postOpen
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Invoked after log replay on region    */
specifier|public
name|void
name|postLogReplay
parameter_list|()
block|{
try|try
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postLogReplay
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Invoked before a region is closed    * @param abortRequested true if the server is aborting    */
specifier|public
name|void
name|preClose
parameter_list|(
specifier|final
name|boolean
name|abortRequested
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
literal|false
argument_list|,
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preClose
argument_list|(
name|this
argument_list|,
name|abortRequested
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invoked after a region is closed    * @param abortRequested true if the server is aborting    */
specifier|public
name|void
name|postClose
parameter_list|(
specifier|final
name|boolean
name|abortRequested
parameter_list|)
block|{
try|try
block|{
name|execOperation
argument_list|(
literal|false
argument_list|,
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postClose
argument_list|(
name|this
argument_list|,
name|abortRequested
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postEnvCall
parameter_list|()
block|{
name|shutdown
argument_list|(
name|this
operator|.
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * See    * {@link RegionObserver#preCompactScannerOpen(ObserverContext, Store, List, ScanType, long,    *   InternalScanner, CompactionLifeCycleTracker, CompactionRequest, long)}    */
specifier|public
name|InternalScanner
name|preCompactScannerOpen
parameter_list|(
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
specifier|final
name|ScanType
name|scanType
parameter_list|,
specifier|final
name|long
name|earliestPutTs
parameter_list|,
specifier|final
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
specifier|final
name|CompactionRequest
name|request
parameter_list|,
specifier|final
name|User
name|user
parameter_list|,
specifier|final
name|long
name|readPoint
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|null
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|InternalScanner
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|,
name|user
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|InternalScanner
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preCompactScannerOpen
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|scanners
argument_list|,
name|scanType
argument_list|,
name|earliestPutTs
argument_list|,
name|getResult
argument_list|()
argument_list|,
name|tracker
argument_list|,
name|request
argument_list|,
name|readPoint
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Called prior to selecting the {@link HStoreFile}s for compaction from the list of currently    * available candidates.    * @param store The store where compaction is being requested    * @param candidates The currently available store files    * @param tracker used to track the life cycle of a compaction    * @param request the compaction request    * @param user the user    * @return If {@code true}, skip the normal selection process and use the current list    * @throws IOException    */
specifier|public
name|boolean
name|preCompactSelection
parameter_list|(
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|List
argument_list|<
name|HStoreFile
argument_list|>
name|candidates
parameter_list|,
specifier|final
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
specifier|final
name|CompactionRequest
name|request
parameter_list|,
specifier|final
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|(
name|user
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preCompactSelection
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|candidates
argument_list|,
name|tracker
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Called after the {@link HStoreFile}s to be compacted have been selected from the available    * candidates.    * @param store The store where compaction is being requested    * @param selected The store files selected to compact    * @param tracker used to track the life cycle of a compaction    * @param request the compaction request    * @param user the user    */
specifier|public
name|void
name|postCompactSelection
parameter_list|(
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|ImmutableList
argument_list|<
name|HStoreFile
argument_list|>
name|selected
parameter_list|,
specifier|final
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
specifier|final
name|CompactionRequest
name|request
parameter_list|,
specifier|final
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|(
name|user
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postCompactSelection
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|selected
argument_list|,
name|tracker
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called prior to rewriting the store files selected for compaction    * @param store the store being compacted    * @param scanner the scanner used to read store data during compaction    * @param scanType type of Scan    * @param tracker used to track the life cycle of a compaction    * @param request the compaction request    * @param user the user    * @throws IOException    */
specifier|public
name|InternalScanner
name|preCompact
parameter_list|(
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|InternalScanner
name|scanner
parameter_list|,
specifier|final
name|ScanType
name|scanType
parameter_list|,
specifier|final
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
specifier|final
name|CompactionRequest
name|request
parameter_list|,
specifier|final
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|false
argument_list|,
name|scanner
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|InternalScanner
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|,
name|user
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|InternalScanner
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preCompact
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|getResult
argument_list|()
argument_list|,
name|scanType
argument_list|,
name|tracker
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Called after the store compaction has completed.    * @param store the store being compacted    * @param resultFile the new store file written during compaction    * @param tracker used to track the life cycle of a compaction    * @param request the compaction request    * @param user the user    * @throws IOException    */
specifier|public
name|void
name|postCompact
parameter_list|(
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|HStoreFile
name|resultFile
parameter_list|,
specifier|final
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
specifier|final
name|CompactionRequest
name|request
parameter_list|,
specifier|final
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|(
name|user
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postCompact
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|resultFile
argument_list|,
name|tracker
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invoked before a memstore flush    * @throws IOException    */
specifier|public
name|InternalScanner
name|preFlush
parameter_list|(
name|HStore
name|store
parameter_list|,
specifier|final
name|InternalScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|false
argument_list|,
name|scanner
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|InternalScanner
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|InternalScanner
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preFlush
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Invoked before a memstore flush    * @throws IOException    */
specifier|public
name|void
name|preFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preFlush
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * See    * {@link RegionObserver#preFlushScannerOpen(ObserverContext, Store, List, InternalScanner, long)}    */
specifier|public
name|InternalScanner
name|preFlushScannerOpen
parameter_list|(
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
specifier|final
name|long
name|readPoint
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|null
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|InternalScanner
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|InternalScanner
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preFlushScannerOpen
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|scanners
argument_list|,
name|getResult
argument_list|()
argument_list|,
name|readPoint
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Invoked after a memstore flush    * @throws IOException    */
specifier|public
name|void
name|postFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postFlush
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invoked after a memstore flush    * @throws IOException    */
specifier|public
name|void
name|postFlush
parameter_list|(
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|HStoreFile
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postFlush
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|storeFile
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// RegionObserver support
comment|/**    * @param get the Get request    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|preGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preGetOp
argument_list|(
name|this
argument_list|,
name|get
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param get the Get request    * @param results the result sett    * @exception IOException Exception    */
specifier|public
name|void
name|postGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postGetOp
argument_list|(
name|this
argument_list|,
name|get
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param get the Get request    * @return true or false to return to client if bypassing normal operation,    * or null otherwise    * @exception IOException Exception    */
specifier|public
name|Boolean
name|preExists
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preExists
argument_list|(
name|this
argument_list|,
name|get
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param get the Get request    * @param exists the result returned by the region server    * @return the result to return to the client    * @exception IOException Exception    */
specifier|public
name|boolean
name|postExists
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
name|boolean
name|exists
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|exists
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postExists
argument_list|(
name|this
argument_list|,
name|get
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param put The Put object    * @param edit The WALEdit object.    * @param durability The durability used    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|prePut
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|prePut
argument_list|(
name|this
argument_list|,
name|put
argument_list|,
name|edit
argument_list|,
name|durability
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param mutation - the current mutation    * @param kv - the current cell    * @param byteNow - current timestamp in bytes    * @param get - the get that could be used    * Note that the get only does not specify the family and qualifier that should be used    * @return true if default processing should be bypassed    * @exception IOException    *              Exception    */
specifier|public
name|boolean
name|prePrepareTimeStampForDeleteVersion
parameter_list|(
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|Cell
name|kv
parameter_list|,
specifier|final
name|byte
index|[]
name|byteNow
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|prePrepareTimeStampForDeleteVersion
argument_list|(
name|this
argument_list|,
name|mutation
argument_list|,
name|kv
argument_list|,
name|byteNow
argument_list|,
name|get
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param put The Put object    * @param edit The WALEdit object.    * @param durability The durability used    * @exception IOException Exception    */
specifier|public
name|void
name|postPut
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postPut
argument_list|(
name|this
argument_list|,
name|put
argument_list|,
name|edit
argument_list|,
name|durability
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param delete The Delete object    * @param edit The WALEdit object.    * @param durability The durability used    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|preDelete
parameter_list|(
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preDelete
argument_list|(
name|this
argument_list|,
name|delete
argument_list|,
name|edit
argument_list|,
name|durability
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param delete The Delete object    * @param edit The WALEdit object.    * @param durability The durability used    * @exception IOException Exception    */
specifier|public
name|void
name|postDelete
parameter_list|(
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postDelete
argument_list|(
name|this
argument_list|,
name|delete
argument_list|,
name|edit
argument_list|,
name|durability
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param miniBatchOp    * @return true if default processing should be bypassed    * @throws IOException    */
specifier|public
name|boolean
name|preBatchMutate
parameter_list|(
specifier|final
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preBatchMutate
argument_list|(
name|this
argument_list|,
name|miniBatchOp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param miniBatchOp    * @throws IOException    */
specifier|public
name|void
name|postBatchMutate
parameter_list|(
specifier|final
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postBatchMutate
argument_list|(
name|this
argument_list|,
name|miniBatchOp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|postBatchMutateIndispensably
parameter_list|(
specifier|final
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|,
specifier|final
name|boolean
name|success
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postBatchMutateIndispensably
argument_list|(
name|this
argument_list|,
name|miniBatchOp
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param put data to put if check succeeds    * @return true or false to return to client if default processing should    * be bypassed, or null otherwise    * @throws IOException e    */
specifier|public
name|Boolean
name|preCheckAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOperator
name|op
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preCheckAndPut
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|op
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param put data to put if check succeeds    * @return true or false to return to client if default processing should    * be bypassed, or null otherwise    * @throws IOException e    */
specifier|public
name|Boolean
name|preCheckAndPutAfterRowLock
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOperator
name|op
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preCheckAndPutAfterRowLock
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|op
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param put data to put if check succeeds    * @throws IOException e    */
specifier|public
name|boolean
name|postCheckAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOperator
name|op
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|result
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postCheckAndPut
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|op
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param delete delete to commit if check succeeds    * @return true or false to return to client if default processing should    * be bypassed, or null otherwise    * @throws IOException e    */
specifier|public
name|Boolean
name|preCheckAndDelete
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOperator
name|op
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preCheckAndDelete
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|op
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param delete delete to commit if check succeeds    * @return true or false to return to client if default processing should    * be bypassed, or null otherwise    * @throws IOException e    */
specifier|public
name|Boolean
name|preCheckAndDeleteAfterRowLock
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOperator
name|op
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preCheckAndDeleteAfterRowLock
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|op
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param delete delete to commit if check succeeds    * @throws IOException e    */
specifier|public
name|boolean
name|postCheckAndDelete
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOperator
name|op
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|result
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postCheckAndDelete
argument_list|(
name|this
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|op
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param append append object    * @return result to return to client if default operation should be    * bypassed, null otherwise    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|preAppend
parameter_list|(
specifier|final
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Result
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Result
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preAppend
argument_list|(
name|this
argument_list|,
name|append
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param append append object    * @return result to return to client if default operation should be    * bypassed, null otherwise    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|preAppendAfterRowLock
parameter_list|(
specifier|final
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Result
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Result
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preAppendAfterRowLock
argument_list|(
name|this
argument_list|,
name|append
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param increment increment object    * @return result to return to client if default operation should be    * bypassed, null otherwise    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|preIncrement
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Result
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Result
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preIncrement
argument_list|(
name|this
argument_list|,
name|increment
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param increment increment object    * @return result to return to client if default operation should be    * bypassed, null otherwise    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|preIncrementAfterRowLock
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Result
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Result
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preIncrementAfterRowLock
argument_list|(
name|this
argument_list|,
name|increment
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param append Append object    * @param result the result returned by the append    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|postAppend
parameter_list|(
specifier|final
name|Append
name|append
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|result
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Result
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Result
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postAppend
argument_list|(
name|this
argument_list|,
name|append
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param increment increment object    * @param result the result returned by postIncrement    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|postIncrement
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|,
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|result
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Result
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Result
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postIncrement
argument_list|(
name|this
argument_list|,
name|increment
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param scan the Scan specification    * @return scanner id to return to client if default operation should be    * bypassed, null otherwise    * @exception IOException Exception    */
specifier|public
name|RegionScanner
name|preScannerOpen
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|RegionScanner
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RegionScanner
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preScannerOpen
argument_list|(
name|this
argument_list|,
name|scan
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * See    * {@link RegionObserver#preStoreScannerOpen(ObserverContext, Store, Scan, NavigableSet, KeyValueScanner, long)}    */
specifier|public
name|KeyValueScanner
name|preStoreScannerOpen
parameter_list|(
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|targetCols
parameter_list|,
specifier|final
name|long
name|readPt
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|null
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|KeyValueScanner
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|KeyValueScanner
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preStoreScannerOpen
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|scan
argument_list|,
name|targetCols
argument_list|,
name|getResult
argument_list|()
argument_list|,
name|readPt
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param scan the Scan specification    * @param s the scanner    * @return the scanner instance to use    * @exception IOException Exception    */
specifier|public
name|RegionScanner
name|postScannerOpen
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|,
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|s
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|RegionScanner
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RegionScanner
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postScannerOpen
argument_list|(
name|this
argument_list|,
name|scan
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param s the scanner    * @param results the result set returned by the region server    * @param limit the maximum number of results to return    * @return 'has next' indication to client if bypassing default behavior, or    * null otherwise    * @exception IOException Exception    */
specifier|public
name|Boolean
name|preScannerNext
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preScannerNext
argument_list|(
name|this
argument_list|,
name|s
argument_list|,
name|results
argument_list|,
name|limit
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param s the scanner    * @param results the result set returned by the region server    * @param limit the maximum number of results to return    * @param hasMore    * @return 'has more' indication to give to client    * @exception IOException Exception    */
specifier|public
name|boolean
name|postScannerNext
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
name|boolean
name|hasMore
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|hasMore
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postScannerNext
argument_list|(
name|this
argument_list|,
name|s
argument_list|,
name|results
argument_list|,
name|limit
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * This will be called by the scan flow when the current scanned row is being filtered out by the    * filter.    * @param s the scanner    * @param curRowCell The cell in the current row which got filtered out    * @return whether more rows are available for the scanner or not    * @throws IOException    */
specifier|public
name|boolean
name|postScannerFilterRow
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|Cell
name|curRowCell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// short circuit for performance
if|if
condition|(
operator|!
name|hasCustomPostScannerFilterRow
condition|)
return|return
literal|true
return|;
return|return
name|execOperationWithResult
argument_list|(
literal|true
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postScannerFilterRow
argument_list|(
name|this
argument_list|,
name|s
argument_list|,
name|curRowCell
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param s the scanner    * @return true if default behavior should be bypassed, false otherwise    * @exception IOException Exception    */
specifier|public
name|boolean
name|preScannerClose
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preScannerClose
argument_list|(
name|this
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @exception IOException Exception    */
specifier|public
name|void
name|postScannerClose
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postScannerClose
argument_list|(
name|this
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param info the RegionInfo for this region    * @param edits the file of recovered edits    * @throws IOException Exception    */
specifier|public
name|void
name|preReplayWALs
parameter_list|(
specifier|final
name|RegionInfo
name|info
parameter_list|,
specifier|final
name|Path
name|edits
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preReplayWALs
argument_list|(
name|this
argument_list|,
name|info
argument_list|,
name|edits
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param info the RegionInfo for this region    * @param edits the file of recovered edits    * @throws IOException Exception    */
specifier|public
name|void
name|postReplayWALs
parameter_list|(
specifier|final
name|RegionInfo
name|info
parameter_list|,
specifier|final
name|Path
name|edits
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postReplayWALs
argument_list|(
name|this
argument_list|,
name|info
argument_list|,
name|edits
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param info    * @param logKey    * @param logEdit    * @return true if default behavior should be bypassed, false otherwise    * @throws IOException    */
specifier|public
name|boolean
name|preWALRestore
parameter_list|(
specifier|final
name|RegionInfo
name|info
parameter_list|,
specifier|final
name|WALKey
name|logKey
parameter_list|,
specifier|final
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preWALRestore
argument_list|(
name|this
argument_list|,
name|info
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param info    * @param logKey    * @param logEdit    * @throws IOException    */
specifier|public
name|void
name|postWALRestore
parameter_list|(
specifier|final
name|RegionInfo
name|info
parameter_list|,
specifier|final
name|WALKey
name|logKey
parameter_list|,
specifier|final
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postWALRestore
argument_list|(
name|this
argument_list|,
name|info
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param familyPaths pairs of { CF, file path } submitted for bulk load    * @return true if the default operation should be bypassed    * @throws IOException    */
specifier|public
name|boolean
name|preBulkLoadHFile
parameter_list|(
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preBulkLoadHFile
argument_list|(
name|this
argument_list|,
name|familyPaths
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|preCommitStoreFile
parameter_list|(
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|pairs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preCommitStoreFile
argument_list|(
name|this
argument_list|,
name|family
argument_list|,
name|pairs
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|void
name|postCommitStoreFile
parameter_list|(
specifier|final
name|byte
index|[]
name|family
parameter_list|,
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postCommitStoreFile
argument_list|(
name|this
argument_list|,
name|family
argument_list|,
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param familyPaths pairs of { CF, file path } submitted for bulk load    * @param map Map of CF to List of file paths for the final loaded files    * @param hasLoaded whether load was successful or not    * @return the possibly modified value of hasLoaded    * @throws IOException    */
specifier|public
name|boolean
name|postBulkLoadHFile
parameter_list|(
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
parameter_list|,
name|boolean
name|hasLoaded
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|hasLoaded
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postBulkLoadHFile
argument_list|(
name|this
argument_list|,
name|familyPaths
argument_list|,
name|map
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|void
name|postStartRegionOperation
parameter_list|(
specifier|final
name|Operation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postStartRegionOperation
argument_list|(
name|this
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|postCloseRegionOperation
parameter_list|(
specifier|final
name|Operation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RegionObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postCloseRegionOperation
argument_list|(
name|this
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param fs fileystem to read from    * @param p path to the file    * @param in {@link FSDataInputStreamWrapper}    * @param size Full size of the file    * @param cacheConf    * @param r original reference file. This will be not null only when reading a split file.    * @return a Reader instance to use instead of the base reader if overriding    * default behavior, null otherwise    * @throws IOException    */
specifier|public
name|StoreFileReader
name|preStoreFileReaderOpen
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|FSDataInputStreamWrapper
name|in
parameter_list|,
specifier|final
name|long
name|size
parameter_list|,
specifier|final
name|CacheConfig
name|cacheConf
parameter_list|,
specifier|final
name|Reference
name|r
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
literal|null
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|StoreFileReader
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|StoreFileReader
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preStoreFileReaderOpen
argument_list|(
name|this
argument_list|,
name|fs
argument_list|,
name|p
argument_list|,
name|in
argument_list|,
name|size
argument_list|,
name|cacheConf
argument_list|,
name|r
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * @param fs fileystem to read from    * @param p path to the file    * @param in {@link FSDataInputStreamWrapper}    * @param size Full size of the file    * @param cacheConf    * @param r original reference file. This will be not null only when reading a split file.    * @param reader the base reader instance    * @return The reader to use    * @throws IOException    */
specifier|public
name|StoreFileReader
name|postStoreFileReaderOpen
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|FSDataInputStreamWrapper
name|in
parameter_list|,
specifier|final
name|long
name|size
parameter_list|,
specifier|final
name|CacheConfig
name|cacheConf
parameter_list|,
specifier|final
name|Reference
name|r
parameter_list|,
specifier|final
name|StoreFileReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|reader
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|StoreFileReader
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|StoreFileReader
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postStoreFileReaderOpen
argument_list|(
name|this
argument_list|,
name|fs
argument_list|,
name|p
argument_list|,
name|in
argument_list|,
name|size
argument_list|,
name|cacheConf
argument_list|,
name|r
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Cell
name|postMutationBeforeWAL
parameter_list|(
specifier|final
name|MutationType
name|opType
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|Cell
name|oldCell
parameter_list|,
name|Cell
name|newCell
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|newCell
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Cell
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postMutationBeforeWAL
argument_list|(
name|this
argument_list|,
name|opType
argument_list|,
name|mutation
argument_list|,
name|oldCell
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Message
name|preEndpointInvocation
parameter_list|(
specifier|final
name|Service
name|service
parameter_list|,
specifier|final
name|String
name|methodName
parameter_list|,
name|Message
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|request
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|EndpointObserver
argument_list|,
name|Message
argument_list|>
argument_list|(
name|endpointObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Message
name|call
parameter_list|(
name|EndpointObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|preEndpointInvocation
argument_list|(
name|this
argument_list|,
name|service
argument_list|,
name|methodName
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|void
name|postEndpointInvocation
parameter_list|(
specifier|final
name|Service
name|service
parameter_list|,
specifier|final
name|String
name|methodName
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
operator|.
name|Builder
name|responseBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithoutResult
argument_list|<
name|EndpointObserver
argument_list|>
argument_list|(
name|endpointObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|EndpointObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postEndpointInvocation
argument_list|(
name|this
argument_list|,
name|service
argument_list|,
name|methodName
argument_list|,
name|request
argument_list|,
name|responseBuilder
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DeleteTracker
name|postInstantiateDeleteTracker
parameter_list|(
name|DeleteTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperationWithResult
argument_list|(
name|tracker
argument_list|,
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ObserverOperationWithResult
argument_list|<
name|RegionObserver
argument_list|,
name|DeleteTracker
argument_list|>
argument_list|(
name|regionObserverGetter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DeleteTracker
name|call
parameter_list|(
name|RegionObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|observer
operator|.
name|postInstantiateDeleteTracker
argument_list|(
name|this
argument_list|,
name|getResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////////////////////////////
comment|// BulkLoadObserver hooks
comment|/////////////////////////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|prePrepareBulkLoad
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|BulkLoadObserverOperation
argument_list|(
name|user
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|call
parameter_list|(
name|BulkLoadObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|prePrepareBulkLoad
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|preCleanupBulkLoad
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|BulkLoadObserverOperation
argument_list|(
name|user
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|call
parameter_list|(
name|BulkLoadObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preCleanupBulkLoad
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

