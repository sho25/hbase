begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|AbstractReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|ReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Implements the coprocessor environment and runtime support for coprocessors  * loaded within a {@link HRegion}.  */
end_comment

begin_class
specifier|public
class|class
name|RegionCoprocessorHost
extends|extends
name|CoprocessorHost
argument_list|<
name|RegionCoprocessorHost
operator|.
name|RegionEnvironment
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionCoprocessorHost
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The shared data map
specifier|private
specifier|static
name|ReferenceMap
name|sharedDataMap
init|=
operator|new
name|ReferenceMap
argument_list|(
name|AbstractReferenceMap
operator|.
name|HARD
argument_list|,
name|AbstractReferenceMap
operator|.
name|WEAK
argument_list|)
decl_stmt|;
comment|/**    * Encapsulation of the environment of each coprocessor    */
specifier|static
class|class
name|RegionEnvironment
extends|extends
name|CoprocessorHost
operator|.
name|Environment
implements|implements
name|RegionCoprocessorEnvironment
block|{
specifier|private
name|HRegion
name|region
decl_stmt|;
specifier|private
name|RegionServerServices
name|rsServices
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sharedData
decl_stmt|;
comment|/**      * Constructor      * @param impl the coprocessor instance      * @param priority chaining priority      */
specifier|public
name|RegionEnvironment
parameter_list|(
specifier|final
name|Coprocessor
name|impl
parameter_list|,
specifier|final
name|int
name|priority
parameter_list|,
specifier|final
name|int
name|seq
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|,
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sharedData
parameter_list|)
block|{
name|super
argument_list|(
name|impl
argument_list|,
name|priority
argument_list|,
name|seq
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|rsServices
operator|=
name|services
expr_stmt|;
name|this
operator|.
name|sharedData
operator|=
name|sharedData
expr_stmt|;
block|}
comment|/** @return the region */
annotation|@
name|Override
specifier|public
name|HRegion
name|getRegion
parameter_list|()
block|{
return|return
name|region
return|;
block|}
comment|/** @return reference to the region server services */
annotation|@
name|Override
specifier|public
name|RegionServerServices
name|getRegionServerServices
parameter_list|()
block|{
return|return
name|rsServices
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSharedData
parameter_list|()
block|{
return|return
name|sharedData
return|;
block|}
block|}
comment|/** The region server services */
name|RegionServerServices
name|rsServices
decl_stmt|;
comment|/** The region */
name|HRegion
name|region
decl_stmt|;
comment|/**    * Constructor    * @param region the region    * @param rsServices interface to available region server functionality    * @param conf the configuration    */
specifier|public
name|RegionCoprocessorHost
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|RegionServerServices
name|rsServices
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rsServices
operator|=
name|rsServices
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|pathPrefix
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// load system default cp's from configuration.
name|loadSystemCoprocessors
argument_list|(
name|conf
argument_list|,
name|REGION_COPROCESSOR_CONF_KEY
argument_list|)
expr_stmt|;
comment|// load system default cp's for user tables from configuration.
if|if
condition|(
operator|!
name|HTableDescriptor
operator|.
name|isMetaTable
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|loadSystemCoprocessors
argument_list|(
name|conf
argument_list|,
name|USER_REGION_COPROCESSOR_CONF_KEY
argument_list|)
expr_stmt|;
block|}
comment|// load Coprocessor From HDFS
name|loadTableCoprocessors
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|void
name|loadTableCoprocessors
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
comment|// scan the table attributes for coprocessor load specifications
comment|// initialize the coprocessors
name|List
argument_list|<
name|RegionEnvironment
argument_list|>
name|configured
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionEnvironment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|spec
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|key
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// found one
try|try
block|{
name|Matcher
name|matcher
init|=
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|spec
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// jar file path can be empty if the cp class can be loaded
comment|// from class loader.
name|Path
name|path
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Path
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|priority
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|Coprocessor
operator|.
name|PRIORITY_USER
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|cfgSpec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cfgSpec
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|cfgSpec
operator|!=
literal|null
condition|)
block|{
name|cfgSpec
operator|=
name|cfgSpec
operator|.
name|substring
argument_list|(
name|cfgSpec
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PARAM_PATTERN
operator|.
name|matcher
argument_list|(
name|cfgSpec
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|newConf
operator|.
name|set
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|configured
operator|.
name|add
argument_list|(
name|load
argument_list|(
name|path
argument_list|,
name|className
argument_list|,
name|priority
argument_list|,
name|newConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configured
operator|.
name|add
argument_list|(
name|load
argument_list|(
name|path
argument_list|,
name|className
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Load coprocessor "
operator|+
name|className
operator|+
literal|" from HTD of "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|" successfully."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"specification does not match pattern"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"attribute '"
operator|+
name|key
operator|+
literal|"' has invalid coprocessor specification '"
operator|+
name|spec
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add together to coprocessor set for COW efficiency
name|coprocessors
operator|.
name|addAll
argument_list|(
name|configured
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RegionEnvironment
name|createEnvironment
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|,
name|Coprocessor
name|instance
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|seq
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Check if it's an Endpoint.
comment|// Due to current dynamic protocol design, Endpoint
comment|// uses a different way to be registered and executed.
comment|// It uses a visitor pattern to invoke registered Endpoint
comment|// method.
for|for
control|(
name|Class
name|c
range|:
name|implClass
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|CoprocessorService
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|region
operator|.
name|registerService
argument_list|(
operator|(
operator|(
name|CoprocessorService
operator|)
name|instance
operator|)
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|classData
decl_stmt|;
comment|// make sure only one thread can add maps
synchronized|synchronized
init|(
name|sharedDataMap
init|)
block|{
comment|// as long as at least one RegionEnvironment holds on to its classData it will
comment|// remain in this map
name|classData
operator|=
operator|(
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|sharedDataMap
operator|.
name|get
argument_list|(
name|implClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|classData
operator|==
literal|null
condition|)
block|{
name|classData
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|sharedDataMap
operator|.
name|put
argument_list|(
name|implClass
operator|.
name|getName
argument_list|()
argument_list|,
name|classData
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RegionEnvironment
argument_list|(
name|instance
argument_list|,
name|priority
argument_list|,
name|seq
argument_list|,
name|conf
argument_list|,
name|region
argument_list|,
name|rsServices
argument_list|,
name|classData
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|abortServer
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|env
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|abortServer
argument_list|(
literal|"regionserver"
argument_list|,
name|rsServices
argument_list|,
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-4014 : This is used by coprocessor hooks which are not declared to throw exceptions.    *    * For example, {@link    * org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost#preOpen()} and    * {@link org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost#postOpen()} are such hooks.    *    * See also    * {@link org.apache.hadoop.hbase.master.MasterCoprocessorHost#handleCoprocessorThrowable(    *    CoprocessorEnvironment, Throwable)}    * @param env The coprocessor that threw the exception.    * @param e The exception that was thrown.    */
specifier|private
name|void
name|handleCoprocessorThrowableNoRethrow
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|env
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// We cannot throw exceptions from the caller hook, so ignore.
name|LOG
operator|.
name|warn
argument_list|(
literal|"handleCoprocessorThrowable() threw an IOException while attempting to handle Throwable "
operator|+
name|e
operator|+
literal|". Ignoring."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Invoked before a region open.    *    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
name|void
name|preOpen
parameter_list|()
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preOpen
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked after a region open    */
specifier|public
name|void
name|postOpen
parameter_list|()
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postOpen
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowableNoRethrow
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked before a region is closed    * @param abortRequested true if the server is aborting    */
specifier|public
name|void
name|preClose
parameter_list|(
name|boolean
name|abortRequested
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preClose
argument_list|(
name|ctx
argument_list|,
name|abortRequested
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Invoked after a region is closed    * @param abortRequested true if the server is aborting    */
specifier|public
name|void
name|postClose
parameter_list|(
name|boolean
name|abortRequested
parameter_list|)
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postClose
argument_list|(
name|ctx
argument_list|,
name|abortRequested
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowableNoRethrow
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|shutdown
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * See    * {@link RegionObserver#preCompactScannerOpen(ObserverContext, Store, List, ScanType, long, InternalScanner, CompactionRequest)}    */
specifier|public
name|InternalScanner
name|preCompactScannerOpen
parameter_list|(
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
name|InternalScanner
name|s
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preCompactScannerOpen
argument_list|(
name|ctx
argument_list|,
name|store
argument_list|,
name|scanners
argument_list|,
name|scanType
argument_list|,
name|earliestPutTs
argument_list|,
name|s
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|s
return|;
block|}
comment|/**    * Called prior to selecting the {@link StoreFile}s for compaction from the list of currently    * available candidates.    * @param store The store where compaction is being requested    * @param candidates The currently available store files    * @param request custom compaction request    * @return If {@code true}, skip the normal selection process and use the current list    * @throws IOException    */
specifier|public
name|boolean
name|preCompactSelection
parameter_list|(
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
name|candidates
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preCompactSelection
argument_list|(
name|ctx
argument_list|,
name|store
argument_list|,
name|candidates
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * Called after the {@link StoreFile}s to be compacted have been selected from the available    * candidates.    * @param store The store where compaction is being requested    * @param selected The store files selected to compact    * @param request custom compaction    */
specifier|public
name|void
name|postCompactSelection
parameter_list|(
name|Store
name|store
parameter_list|,
name|ImmutableList
argument_list|<
name|StoreFile
argument_list|>
name|selected
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postCompactSelection
argument_list|(
name|ctx
argument_list|,
name|store
argument_list|,
name|selected
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowableNoRethrow
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Called prior to rewriting the store files selected for compaction    * @param store the store being compacted    * @param scanner the scanner used to read store data during compaction    * @param scanType type of Scan    * @param request the compaction that will be executed    * @throws IOException    */
specifier|public
name|InternalScanner
name|preCompact
parameter_list|(
name|Store
name|store
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|scanner
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preCompact
argument_list|(
name|ctx
argument_list|,
name|store
argument_list|,
name|scanner
argument_list|,
name|scanType
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
literal|null
else|:
name|scanner
return|;
block|}
comment|/**    * Called after the store compaction has completed.    * @param store the store being compacted    * @param resultFile the new store file written during compaction    * @param request the compaction that is being executed    * @throws IOException    */
specifier|public
name|void
name|postCompact
parameter_list|(
name|Store
name|store
parameter_list|,
name|StoreFile
name|resultFile
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postCompact
argument_list|(
name|ctx
argument_list|,
name|store
argument_list|,
name|resultFile
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked before a memstore flush    * @throws IOException    */
specifier|public
name|InternalScanner
name|preFlush
parameter_list|(
name|Store
name|store
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|scanner
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preFlush
argument_list|(
name|ctx
argument_list|,
name|store
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
literal|null
else|:
name|scanner
return|;
block|}
comment|/**    * Invoked before a memstore flush    * @throws IOException    */
specifier|public
name|void
name|preFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preFlush
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * See    * {@link RegionObserver#preFlushScannerOpen(ObserverContext,    *    Store, KeyValueScanner, InternalScanner)}    */
specifier|public
name|InternalScanner
name|preFlushScannerOpen
parameter_list|(
name|Store
name|store
parameter_list|,
name|KeyValueScanner
name|memstoreScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
name|InternalScanner
name|s
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preFlushScannerOpen
argument_list|(
name|ctx
argument_list|,
name|store
argument_list|,
name|memstoreScanner
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|s
return|;
block|}
comment|/**    * Invoked after a memstore flush    * @throws IOException    */
specifier|public
name|void
name|postFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postFlush
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked after a memstore flush    * @throws IOException    */
specifier|public
name|void
name|postFlush
parameter_list|(
specifier|final
name|Store
name|store
parameter_list|,
specifier|final
name|StoreFile
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postFlush
argument_list|(
name|ctx
argument_list|,
name|store
argument_list|,
name|storeFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked just before a split    * @throws IOException    */
specifier|public
name|void
name|preSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preSplit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked just before a split    * @throws IOException    */
specifier|public
name|void
name|preSplit
parameter_list|(
name|byte
index|[]
name|splitRow
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preSplit
argument_list|(
name|ctx
argument_list|,
name|splitRow
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked just after a split    * @param l the new left-hand daughter region    * @param r the new right-hand daughter region    * @throws IOException    */
specifier|public
name|void
name|postSplit
parameter_list|(
name|HRegion
name|l
parameter_list|,
name|HRegion
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postSplit
argument_list|(
name|ctx
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked just before the rollback of a failed split is started    * @throws IOException    */
specifier|public
name|void
name|preRollBackSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preRollBackSplit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked just after the rollback of a failed split is done    * @throws IOException    */
specifier|public
name|void
name|postRollBackSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postRollBackSplit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Invoked after a split is completed irrespective of a failure or success.    * @throws IOException    */
specifier|public
name|void
name|postCompleteSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postCompleteSplit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|// RegionObserver support
comment|/**    * @param row the row key    * @param family the family    * @param result the result set from the region    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|preGetClosestRowBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preGetClosestRowBefore
argument_list|(
name|ctx
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * @param row the row key    * @param family the family    * @param result the result set from the region    * @exception IOException Exception    */
specifier|public
name|void
name|postGetClosestRowBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postGetClosestRowBefore
argument_list|(
name|ctx
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * @param get the Get request    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|preGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preGet
argument_list|(
name|ctx
argument_list|,
name|get
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * @param get the Get request    * @param results the result set    * @exception IOException Exception    */
specifier|public
name|void
name|postGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postGet
argument_list|(
name|ctx
argument_list|,
name|get
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * @param get the Get request    * @return true or false to return to client if bypassing normal operation,    * or null otherwise    * @exception IOException Exception    */
specifier|public
name|Boolean
name|preExists
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|exists
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preExists
argument_list|(
name|ctx
argument_list|,
name|get
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|exists
else|:
literal|null
return|;
block|}
comment|/**    * @param get the Get request    * @param exists the result returned by the region server    * @return the result to return to the client    * @exception IOException Exception    */
specifier|public
name|boolean
name|postExists
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
name|boolean
name|exists
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|exists
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postExists
argument_list|(
name|ctx
argument_list|,
name|get
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|exists
return|;
block|}
comment|/**    * @param put The Put object    * @param edit The WALEdit object.    * @param durability The durability used    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|prePut
parameter_list|(
name|Put
name|put
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|prePut
argument_list|(
name|ctx
argument_list|,
name|put
argument_list|,
name|edit
argument_list|,
name|durability
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * @param put The Put object    * @param edit The WALEdit object.    * @param durability The durability used    * @exception IOException Exception    */
specifier|public
name|void
name|postPut
parameter_list|(
name|Put
name|put
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postPut
argument_list|(
name|ctx
argument_list|,
name|put
argument_list|,
name|edit
argument_list|,
name|durability
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * @param delete The Delete object    * @param edit The WALEdit object.    * @param durability The durability used    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|preDelete
parameter_list|(
name|Delete
name|delete
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preDelete
argument_list|(
name|ctx
argument_list|,
name|delete
argument_list|,
name|edit
argument_list|,
name|durability
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * @param delete The Delete object    * @param edit The WALEdit object.    * @param durability The durability used    * @exception IOException Exception    */
specifier|public
name|void
name|postDelete
parameter_list|(
name|Delete
name|delete
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postDelete
argument_list|(
name|ctx
argument_list|,
name|delete
argument_list|,
name|edit
argument_list|,
name|durability
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * @param miniBatchOp    * @return true if default processing should be bypassed    * @throws IOException    */
specifier|public
name|boolean
name|preBatchMutate
parameter_list|(
specifier|final
name|MiniBatchOperationInProgress
argument_list|<
name|Pair
argument_list|<
name|Mutation
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preBatchMutate
argument_list|(
name|ctx
argument_list|,
name|miniBatchOp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * @param miniBatchOp    * @throws IOException    */
specifier|public
name|void
name|postBatchMutate
parameter_list|(
specifier|final
name|MiniBatchOperationInProgress
argument_list|<
name|Pair
argument_list|<
name|Mutation
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postBatchMutate
argument_list|(
name|ctx
argument_list|,
name|miniBatchOp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param compareOp the comparison operation    * @param comparator the comparator    * @param put data to put if check succeeds    * @return true or false to return to client if default processing should    * be bypassed, or null otherwise    * @throws IOException e    */
specifier|public
name|Boolean
name|preCheckAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preCheckAndPut
argument_list|(
name|ctx
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|result
else|:
literal|null
return|;
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param compareOp the comparison operation    * @param comparator the comparator    * @param put data to put if check succeeds    * @throws IOException e    */
specifier|public
name|boolean
name|postCheckAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postCheckAndPut
argument_list|(
name|ctx
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param compareOp the comparison operation    * @param comparator the comparator    * @param delete delete to commit if check succeeds    * @return true or false to return to client if default processing should    * be bypassed, or null otherwise    * @throws IOException e    */
specifier|public
name|Boolean
name|preCheckAndDelete
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preCheckAndDelete
argument_list|(
name|ctx
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|result
else|:
literal|null
return|;
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param compareOp the comparison operation    * @param comparator the comparator    * @param delete delete to commit if check succeeds    * @throws IOException e    */
specifier|public
name|boolean
name|postCheckAndDelete
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postCheckAndDelete
argument_list|(
name|ctx
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param append append object    * @return result to return to client if default operation should be    * bypassed, null otherwise    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|preAppend
parameter_list|(
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preAppend
argument_list|(
name|ctx
argument_list|,
name|append
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|result
else|:
literal|null
return|;
block|}
comment|/**    * @param increment increment object    * @return result to return to client if default operation should be    * bypassed, null otherwise    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|preIncrement
parameter_list|(
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preIncrement
argument_list|(
name|ctx
argument_list|,
name|increment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|result
else|:
literal|null
return|;
block|}
comment|/**    * @param append Append object    * @param result the result returned by postAppend    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|void
name|postAppend
parameter_list|(
specifier|final
name|Append
name|append
parameter_list|,
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postAppend
argument_list|(
name|ctx
argument_list|,
name|append
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * @param increment increment object    * @param result the result returned by postIncrement    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|postIncrement
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|,
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postIncrement
argument_list|(
name|ctx
argument_list|,
name|increment
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param scan the Scan specification    * @return scanner id to return to client if default operation should be    * bypassed, false otherwise    * @exception IOException Exception    */
specifier|public
name|RegionScanner
name|preScannerOpen
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|RegionScanner
name|s
init|=
literal|null
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preScannerOpen
argument_list|(
name|ctx
argument_list|,
name|scan
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|s
else|:
literal|null
return|;
block|}
comment|/**    * See    * {@link RegionObserver#preStoreScannerOpen(ObserverContext,    *    Store, Scan, NavigableSet, KeyValueScanner)}    */
specifier|public
name|KeyValueScanner
name|preStoreScannerOpen
parameter_list|(
name|Store
name|store
parameter_list|,
name|Scan
name|scan
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|targetCols
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyValueScanner
name|s
init|=
literal|null
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preStoreScannerOpen
argument_list|(
name|ctx
argument_list|,
name|store
argument_list|,
name|scan
argument_list|,
name|targetCols
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|s
return|;
block|}
comment|/**    * @param scan the Scan specification    * @param s the scanner    * @return the scanner instance to use    * @exception IOException Exception    */
specifier|public
name|RegionScanner
name|postScannerOpen
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|,
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postScannerOpen
argument_list|(
name|ctx
argument_list|,
name|scan
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|s
return|;
block|}
comment|/**    * @param s the scanner    * @param results the result set returned by the region server    * @param limit the maximum number of results to return    * @return 'has next' indication to client if bypassing default behavior, or    * null otherwise    * @exception IOException Exception    */
specifier|public
name|Boolean
name|preScannerNext
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|boolean
name|hasNext
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|hasNext
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preScannerNext
argument_list|(
name|ctx
argument_list|,
name|s
argument_list|,
name|results
argument_list|,
name|limit
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|hasNext
else|:
literal|null
return|;
block|}
comment|/**    * @param s the scanner    * @param results the result set returned by the region server    * @param limit the maximum number of results to return    * @param hasMore    * @return 'has more' indication to give to client    * @exception IOException Exception    */
specifier|public
name|boolean
name|postScannerNext
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
name|boolean
name|hasMore
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|hasMore
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postScannerNext
argument_list|(
name|ctx
argument_list|,
name|s
argument_list|,
name|results
argument_list|,
name|limit
argument_list|,
name|hasMore
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|hasMore
return|;
block|}
comment|/**    * This will be called by the scan flow when the current scanned row is being filtered out by the    * filter.    * @param s the scanner    * @param currentRow The current rowkey which got filtered out    * @return whether more rows are available for the scanner or not    * @throws IOException    */
specifier|public
name|boolean
name|postScannerFilterRow
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|byte
index|[]
name|currentRow
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasMore
init|=
literal|true
decl_stmt|;
comment|// By default assume more rows there.
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|hasMore
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postScannerFilterRow
argument_list|(
name|ctx
argument_list|,
name|s
argument_list|,
name|currentRow
argument_list|,
name|hasMore
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|hasMore
return|;
block|}
comment|/**    * @param s the scanner    * @return true if default behavior should be bypassed, false otherwise    * @exception IOException Exception    */
specifier|public
name|boolean
name|preScannerClose
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preScannerClose
argument_list|(
name|ctx
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * @param s the scanner    * @exception IOException Exception    */
specifier|public
name|void
name|postScannerClose
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postScannerClose
argument_list|(
name|ctx
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * @param info    * @param logKey    * @param logEdit    * @return true if default behavior should be bypassed, false otherwise    * @throws IOException    */
specifier|public
name|boolean
name|preWALRestore
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preWALRestore
argument_list|(
name|ctx
argument_list|,
name|info
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * @param info    * @param logKey    * @param logEdit    * @throws IOException    */
specifier|public
name|void
name|postWALRestore
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postWALRestore
argument_list|(
name|ctx
argument_list|,
name|info
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * @param familyPaths pairs of { CF, file path } submitted for bulk load    * @return true if the default operation should be bypassed    * @throws IOException    */
specifier|public
name|boolean
name|preBulkLoadHFile
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preBulkLoadHFile
argument_list|(
name|ctx
argument_list|,
name|familyPaths
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * @param familyPaths pairs of { CF, file path } submitted for bulk load    * @param hasLoaded whether load was successful or not    * @return the possibly modified value of hasLoaded    * @throws IOException    */
specifier|public
name|boolean
name|postBulkLoadHFile
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
parameter_list|,
name|boolean
name|hasLoaded
parameter_list|)
throws|throws
name|IOException
block|{
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|RegionObserver
condition|)
block|{
name|ctx
operator|=
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|env
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|hasLoaded
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postBulkLoadHFile
argument_list|(
name|ctx
argument_list|,
name|familyPaths
argument_list|,
name|hasLoaded
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|hasLoaded
return|;
block|}
block|}
end_class

end_unit

