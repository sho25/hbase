begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_comment
comment|/**  * Utility methods related to BloomFilters  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|BloomFilterUtil
block|{
comment|/** Record separator for the Bloom filter statistics human-readable string */
specifier|public
specifier|static
specifier|final
name|String
name|STATS_RECORD_SEP
init|=
literal|"; "
decl_stmt|;
comment|/**    * Used in computing the optimal Bloom filter size. This approximately equals    * 0.480453.    */
specifier|public
specifier|static
specifier|final
name|double
name|LOG2_SQUARED
init|=
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|/**    * A random number generator to use for "fake lookups" when testing to    * estimate the ideal false positive rate.    */
specifier|private
specifier|static
name|Random
name|randomGeneratorForTest
decl_stmt|;
comment|/** Bit-value lookup array to prevent doing the same work over and over */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|bitvals
init|=
block|{
operator|(
name|byte
operator|)
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x02
block|,
operator|(
name|byte
operator|)
literal|0x04
block|,
operator|(
name|byte
operator|)
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0x10
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x80
block|}
decl_stmt|;
comment|/**    * Private constructor to keep this class from being instantiated.    */
specifier|private
name|BloomFilterUtil
parameter_list|()
block|{   }
comment|/**    * @param maxKeys    * @param errorRate    * @return the number of bits for a Bloom filter than can hold the given    *         number of keys and provide the given error rate, assuming that the    *         optimal number of hash functions is used and it does not have to    *         be an integer.    */
specifier|public
specifier|static
name|long
name|computeBitSize
parameter_list|(
name|long
name|maxKeys
parameter_list|,
name|double
name|errorRate
parameter_list|)
block|{
return|return
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|maxKeys
operator|*
operator|(
operator|-
name|Math
operator|.
name|log
argument_list|(
name|errorRate
argument_list|)
operator|/
name|LOG2_SQUARED
operator|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setFakeLookupMode
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|randomGeneratorForTest
operator|=
operator|new
name|Random
argument_list|(
literal|283742987L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|randomGeneratorForTest
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * The maximum number of keys we can put into a Bloom filter of a certain    * size to maintain the given error rate, assuming the number of hash    * functions is chosen optimally and does not even have to be an integer    * (hence the "ideal" in the function name).    *    * @param bitSize    * @param errorRate    * @return maximum number of keys that can be inserted into the Bloom filter    * @see #computeMaxKeys(long, double, int) for a more precise estimate    */
specifier|public
specifier|static
name|long
name|idealMaxKeys
parameter_list|(
name|long
name|bitSize
parameter_list|,
name|double
name|errorRate
parameter_list|)
block|{
comment|// The reason we need to use floor here is that otherwise we might put
comment|// more keys in a Bloom filter than is allowed by the target error rate.
return|return
call|(
name|long
call|)
argument_list|(
name|bitSize
operator|*
operator|(
name|LOG2_SQUARED
operator|/
operator|-
name|Math
operator|.
name|log
argument_list|(
name|errorRate
argument_list|)
operator|)
argument_list|)
return|;
block|}
comment|/**    * The maximum number of keys we can put into a Bloom filter of a certain    * size to get the given error rate, with the given number of hash functions.    *    * @param bitSize    * @param errorRate    * @param hashCount    * @return the maximum number of keys that can be inserted in a Bloom filter    *         to maintain the target error rate, if the number of hash functions    *         is provided.    */
specifier|public
specifier|static
name|long
name|computeMaxKeys
parameter_list|(
name|long
name|bitSize
parameter_list|,
name|double
name|errorRate
parameter_list|,
name|int
name|hashCount
parameter_list|)
block|{
return|return
call|(
name|long
call|)
argument_list|(
operator|-
name|bitSize
operator|*
literal|1.0
operator|/
name|hashCount
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|1
operator|-
name|Math
operator|.
name|exp
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|errorRate
argument_list|)
operator|/
name|hashCount
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Computes the actual error rate for the given number of elements, number    * of bits, and number of hash functions. Taken directly from the    *<a href=    * "http://en.wikipedia.org/wiki/Bloom_filter#Probability_of_false_positives"    *> Wikipedia Bloom filter article</a>.    *    * @param maxKeys    * @param bitSize    * @param functionCount    * @return the actual error rate    */
specifier|public
specifier|static
name|double
name|actualErrorRate
parameter_list|(
name|long
name|maxKeys
parameter_list|,
name|long
name|bitSize
parameter_list|,
name|int
name|functionCount
parameter_list|)
block|{
return|return
name|Math
operator|.
name|exp
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|1
operator|-
name|Math
operator|.
name|exp
argument_list|(
operator|-
name|functionCount
operator|*
name|maxKeys
operator|*
literal|1.0
operator|/
name|bitSize
argument_list|)
argument_list|)
operator|*
name|functionCount
argument_list|)
return|;
block|}
comment|/**    * Increases the given byte size of a Bloom filter until it can be folded by    * the given factor.    *    * @param bitSize    * @param foldFactor    * @return Foldable byte size    */
specifier|public
specifier|static
name|int
name|computeFoldableByteSize
parameter_list|(
name|long
name|bitSize
parameter_list|,
name|int
name|foldFactor
parameter_list|)
block|{
name|long
name|byteSizeLong
init|=
operator|(
name|bitSize
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|int
name|mask
init|=
operator|(
literal|1
operator|<<
name|foldFactor
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|mask
operator|&
name|byteSizeLong
operator|)
operator|!=
literal|0
condition|)
block|{
name|byteSizeLong
operator|>>=
name|foldFactor
expr_stmt|;
operator|++
name|byteSizeLong
expr_stmt|;
name|byteSizeLong
operator|<<=
name|foldFactor
expr_stmt|;
block|}
if|if
condition|(
name|byteSizeLong
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"byteSize="
operator|+
name|byteSizeLong
operator|+
literal|" too "
operator|+
literal|"large for bitSize="
operator|+
name|bitSize
operator|+
literal|", foldFactor="
operator|+
name|foldFactor
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|byteSizeLong
return|;
block|}
specifier|public
specifier|static
name|int
name|optimalFunctionCount
parameter_list|(
name|int
name|maxKeys
parameter_list|,
name|long
name|bitSize
parameter_list|)
block|{
name|long
name|i
init|=
name|bitSize
operator|/
name|maxKeys
decl_stmt|;
name|double
name|result
init|=
name|Math
operator|.
name|ceil
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|*
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"result too large for integer value."
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|result
return|;
block|}
comment|/**    * Creates a Bloom filter chunk of the given size.    *    * @param byteSizeHint the desired number of bytes for the Bloom filter bit    *          array. Will be increased so that folding is possible.    * @param errorRate target false positive rate of the Bloom filter    * @param hashType Bloom filter hash function type    * @param foldFactor    * @return the new Bloom filter of the desired size    */
specifier|public
specifier|static
name|BloomFilterChunk
name|createBySize
parameter_list|(
name|int
name|byteSizeHint
parameter_list|,
name|double
name|errorRate
parameter_list|,
name|int
name|hashType
parameter_list|,
name|int
name|foldFactor
parameter_list|)
block|{
name|BloomFilterChunk
name|bbf
init|=
operator|new
name|BloomFilterChunk
argument_list|(
name|hashType
argument_list|)
decl_stmt|;
name|bbf
operator|.
name|byteSize
operator|=
name|computeFoldableByteSize
argument_list|(
name|byteSizeHint
operator|*
literal|8L
argument_list|,
name|foldFactor
argument_list|)
expr_stmt|;
name|long
name|bitSize
init|=
name|bbf
operator|.
name|byteSize
operator|*
literal|8
decl_stmt|;
name|bbf
operator|.
name|maxKeys
operator|=
operator|(
name|int
operator|)
name|idealMaxKeys
argument_list|(
name|bitSize
argument_list|,
name|errorRate
argument_list|)
expr_stmt|;
name|bbf
operator|.
name|hashCount
operator|=
name|optimalFunctionCount
argument_list|(
name|bbf
operator|.
name|maxKeys
argument_list|,
name|bitSize
argument_list|)
expr_stmt|;
comment|// Adjust max keys to bring error rate closer to what was requested,
comment|// because byteSize was adjusted to allow for folding, and hashCount was
comment|// rounded.
name|bbf
operator|.
name|maxKeys
operator|=
operator|(
name|int
operator|)
name|computeMaxKeys
argument_list|(
name|bitSize
argument_list|,
name|errorRate
argument_list|,
name|bbf
operator|.
name|hashCount
argument_list|)
expr_stmt|;
return|return
name|bbf
return|;
block|}
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|ByteBuff
name|bloomBuf
parameter_list|,
name|int
name|bloomOffset
parameter_list|,
name|int
name|bloomSize
parameter_list|,
name|Hash
name|hash
parameter_list|,
name|int
name|hashCount
parameter_list|)
block|{
name|int
name|hash1
init|=
name|hash
operator|.
name|hash
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|hash2
init|=
name|hash
operator|.
name|hash
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|hash1
argument_list|)
decl_stmt|;
name|int
name|bloomBitSize
init|=
name|bloomSize
operator|<<
literal|3
decl_stmt|;
if|if
condition|(
name|randomGeneratorForTest
operator|==
literal|null
condition|)
block|{
comment|// Production mode.
name|int
name|compositeHash
init|=
name|hash1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hashCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|hashLoc
init|=
name|Math
operator|.
name|abs
argument_list|(
name|compositeHash
operator|%
name|bloomBitSize
argument_list|)
decl_stmt|;
name|compositeHash
operator|+=
name|hash2
expr_stmt|;
if|if
condition|(
operator|!
name|checkBit
argument_list|(
name|hashLoc
argument_list|,
name|bloomBuf
argument_list|,
name|bloomOffset
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
comment|// Test mode with "fake lookups" to estimate "ideal false positive rate".
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hashCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|hashLoc
init|=
name|randomGeneratorForTest
operator|.
name|nextInt
argument_list|(
name|bloomBitSize
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkBit
argument_list|(
name|hashLoc
argument_list|,
name|bloomBuf
argument_list|,
name|bloomOffset
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Check if bit at specified index is 1.    *    * @param pos index of bit    * @return true if bit at specified index is 1, false if 0.    */
specifier|static
name|boolean
name|checkBit
parameter_list|(
name|int
name|pos
parameter_list|,
name|ByteBuff
name|bloomBuf
parameter_list|,
name|int
name|bloomOffset
parameter_list|)
block|{
name|int
name|bytePos
init|=
name|pos
operator|>>
literal|3
decl_stmt|;
comment|//pos / 8
name|int
name|bitPos
init|=
name|pos
operator|&
literal|0x7
decl_stmt|;
comment|//pos % 8
name|byte
name|curByte
init|=
name|bloomBuf
operator|.
name|get
argument_list|(
name|bloomOffset
operator|+
name|bytePos
argument_list|)
decl_stmt|;
name|curByte
operator|&=
name|bitvals
index|[
name|bitPos
index|]
expr_stmt|;
return|return
operator|(
name|curByte
operator|!=
literal|0
operator|)
return|;
block|}
comment|/**    * A human-readable string with statistics for the given Bloom filter.    *    * @param bloomFilter the Bloom filter to output statistics for;    * @return a string consisting of "&lt;key&gt;:&lt;value&gt;" parts    *         separated by {@link #STATS_RECORD_SEP}.    */
specifier|public
specifier|static
name|String
name|formatStats
parameter_list|(
name|BloomFilterBase
name|bloomFilter
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|long
name|k
init|=
name|bloomFilter
operator|.
name|getKeyCount
argument_list|()
decl_stmt|;
name|long
name|m
init|=
name|bloomFilter
operator|.
name|getMaxKeys
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"BloomSize: "
operator|+
name|bloomFilter
operator|.
name|getByteSize
argument_list|()
operator|+
name|STATS_RECORD_SEP
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"No of Keys in bloom: "
operator|+
name|k
operator|+
name|STATS_RECORD_SEP
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Max Keys for bloom: "
operator|+
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|STATS_RECORD_SEP
operator|+
literal|"Percentage filled: "
operator|+
name|NumberFormat
operator|.
name|getPercentInstance
argument_list|()
operator|.
name|format
argument_list|(
name|k
operator|*
literal|1.0
operator|/
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|BloomFilterChunk
name|bloomFilter
parameter_list|)
block|{
return|return
name|formatStats
argument_list|(
name|bloomFilter
argument_list|)
operator|+
name|STATS_RECORD_SEP
operator|+
literal|"Actual error rate: "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%.8f"
argument_list|,
name|bloomFilter
operator|.
name|actualErrorRate
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

