begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * ZK based rpc throttle storage.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RpcThrottleStorage
block|{
specifier|public
specifier|static
specifier|final
name|String
name|RPC_THROTTLE_ZNODE
init|=
literal|"zookeeper.znode.quota.rpc.throttle"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RPC_THROTTLE_ZNODE_DEFAULT
init|=
literal|"rpc-throttle"
decl_stmt|;
specifier|private
specifier|final
name|ZKWatcher
name|zookeeper
decl_stmt|;
specifier|private
specifier|final
name|String
name|rpcThrottleZNode
decl_stmt|;
specifier|public
name|RpcThrottleStorage
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|zookeeper
operator|=
name|zookeeper
expr_stmt|;
name|this
operator|.
name|rpcThrottleZNode
operator|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|zookeeper
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|RPC_THROTTLE_ZNODE
argument_list|,
name|RPC_THROTTLE_ZNODE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRpcThrottleEnabled
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|upData
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zookeeper
argument_list|,
name|rpcThrottleZNode
argument_list|)
decl_stmt|;
return|return
name|upData
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|upData
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get rpc throttle"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Store the rpc throttle value.    * @param enable Set to<code>true</code> to enable,<code>false</code> to disable.    * @throws IOException if an unexpected io exception occurs    */
specifier|public
name|void
name|switchRpcThrottle
parameter_list|(
name|boolean
name|enable
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|upData
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|enable
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createSetData
argument_list|(
name|zookeeper
argument_list|,
name|rpcThrottleZNode
argument_list|,
name|upData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to store rpc throttle"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

