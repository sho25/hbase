begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HFileArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|ShadedAccessControlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|TablePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ModifyRegionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
import|;
end_import

begin_comment
comment|/**  * Helper to Restore/Clone a Snapshot  *  *<p>The helper assumes that a table is already created, and by calling restore()  * the content present in the snapshot will be restored as the new content of the table.  *  *<p>Clone from Snapshot: If the target table is empty, the restore operation  * is just a "clone operation", where the only operations are:  *<ul>  *<li>for each region in the snapshot create a new region  *    (note that the region will have a different name, since the encoding contains the table name)  *<li>for each file in the region create a new HFileLink to point to the original file.  *<li>restore the logs, if any  *</ul>  *  *<p>Restore from Snapshot:  *<ul>  *<li>for each region in the table verify which are available in the snapshot and which are not  *<ul>  *<li>if the region is not present in the snapshot, remove it.  *<li>if the region is present in the snapshot  *<ul>  *<li>for each file in the table region verify which are available in the snapshot  *<ul>  *<li>if the hfile is not present in the snapshot, remove it  *<li>if the hfile is present, keep it (nothing to do)  *</ul>  *<li>for each file in the snapshot region but not in the table  *<ul>  *<li>create a new HFileLink that point to the original file  *</ul>  *</ul>  *</ul>  *<li>for each region in the snapshot not present in the current table state  *<ul>  *<li>create a new region and for each file in the region create a new HFileLink  *      (This is the same as the clone operation)  *</ul>  *<li>restore the logs, if any  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RestoreSnapshotHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RestoreSnapshotHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|regionsMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|parentsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ForeignExceptionDispatcher
name|monitor
decl_stmt|;
specifier|private
specifier|final
name|MonitoredTask
name|status
decl_stmt|;
specifier|private
specifier|final
name|SnapshotManifest
name|snapshotManifest
decl_stmt|;
specifier|private
specifier|final
name|SnapshotDescription
name|snapshotDesc
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|snapshotTable
decl_stmt|;
specifier|private
specifier|final
name|TableDescriptor
name|tableDesc
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|tableDir
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|createBackRefs
decl_stmt|;
specifier|public
name|RestoreSnapshotHelper
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|SnapshotManifest
name|manifest
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|ForeignExceptionDispatcher
name|monitor
parameter_list|,
specifier|final
name|MonitoredTask
name|status
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|manifest
argument_list|,
name|tableDescriptor
argument_list|,
name|rootDir
argument_list|,
name|monitor
argument_list|,
name|status
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RestoreSnapshotHelper
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|SnapshotManifest
name|manifest
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|ForeignExceptionDispatcher
name|monitor
parameter_list|,
specifier|final
name|MonitoredTask
name|status
parameter_list|,
specifier|final
name|boolean
name|createBackRefs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|snapshotManifest
operator|=
name|manifest
expr_stmt|;
name|this
operator|.
name|snapshotDesc
operator|=
name|manifest
operator|.
name|getSnapshotDescription
argument_list|()
expr_stmt|;
name|this
operator|.
name|snapshotTable
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshotDesc
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|=
name|tableDescriptor
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
name|this
operator|.
name|tableDir
operator|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|monitor
operator|=
name|monitor
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|createBackRefs
operator|=
name|createBackRefs
expr_stmt|;
block|}
comment|/**    * Restore the on-disk table to a specified snapshot state.    * @return the set of regions touched by the restore operation    */
specifier|public
name|RestoreMetaChanges
name|restoreHdfsRegions
parameter_list|()
throws|throws
name|IOException
block|{
name|ThreadPoolExecutor
name|exec
init|=
name|SnapshotManifest
operator|.
name|createExecutor
argument_list|(
name|conf
argument_list|,
literal|"RestoreSnapshot"
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|restoreHdfsRegions
argument_list|(
name|exec
argument_list|)
return|;
block|}
finally|finally
block|{
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|RestoreMetaChanges
name|restoreHdfsRegions
parameter_list|(
specifier|final
name|ThreadPoolExecutor
name|exec
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting restore table regions using snapshot="
operator|+
name|snapshotDesc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SnapshotRegionManifest
argument_list|>
name|regionManifests
init|=
name|snapshotManifest
operator|.
name|getRegionManifestsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionManifests
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nothing to restore. Snapshot "
operator|+
name|snapshotDesc
operator|+
literal|" looks empty"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|RestoreMetaChanges
name|metaChanges
init|=
operator|new
name|RestoreMetaChanges
argument_list|(
name|tableDesc
argument_list|,
name|parentsMap
argument_list|)
decl_stmt|;
comment|// Take a copy of the manifest.keySet() since we are going to modify
comment|// this instance, by removing the regions already present in the restore dir.
name|Set
argument_list|<
name|String
argument_list|>
name|regionNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|regionManifests
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegions
init|=
name|getTableRegions
argument_list|()
decl_stmt|;
name|RegionInfo
name|mobRegion
init|=
name|MobUtils
operator|.
name|getMobRegionInfo
argument_list|(
name|snapshotManifest
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableRegions
operator|!=
literal|null
condition|)
block|{
comment|// restore the mob region in case
if|if
condition|(
name|regionNames
operator|.
name|contains
argument_list|(
name|mobRegion
operator|.
name|getEncodedName
argument_list|()
argument_list|)
condition|)
block|{
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Restoring mob region..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|mobRegions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|mobRegions
operator|.
name|add
argument_list|(
name|mobRegion
argument_list|)
expr_stmt|;
name|restoreHdfsMobRegions
argument_list|(
name|exec
argument_list|,
name|regionManifests
argument_list|,
name|mobRegions
argument_list|)
expr_stmt|;
name|regionNames
operator|.
name|remove
argument_list|(
name|mobRegion
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Finished restoring mob region."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|regionNames
operator|.
name|contains
argument_list|(
name|mobRegion
operator|.
name|getEncodedName
argument_list|()
argument_list|)
condition|)
block|{
comment|// add the mob region
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Cloning mob region..."
argument_list|)
expr_stmt|;
name|cloneHdfsMobRegion
argument_list|(
name|regionManifests
argument_list|,
name|mobRegion
argument_list|)
expr_stmt|;
name|regionNames
operator|.
name|remove
argument_list|(
name|mobRegion
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Finished cloning mob region."
argument_list|)
expr_stmt|;
block|}
comment|// Identify which region are still available and which not.
comment|// NOTE: we rely upon the region name as: "table name, start key, end key"
if|if
condition|(
name|tableRegions
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|tableRegions
control|)
block|{
name|String
name|regionName
init|=
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionNames
operator|.
name|contains
argument_list|(
name|regionName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"region to restore: "
operator|+
name|regionName
argument_list|)
expr_stmt|;
name|regionNames
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|metaChanges
operator|.
name|addRegionToRestore
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"region to remove: "
operator|+
name|regionName
argument_list|)
expr_stmt|;
name|metaChanges
operator|.
name|addRegionToRemove
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Regions to Add: present in the snapshot but not in the current table
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsToAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|regionNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|regionName
range|:
name|regionNames
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"region to add: "
operator|+
name|regionName
argument_list|)
expr_stmt|;
name|regionsToAdd
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|regionManifests
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create new regions cloning from the snapshot
comment|// HBASE-19980: We need to call cloneHdfsRegions() before restoreHdfsRegions() because
comment|// regionsMap is constructed in cloneHdfsRegions() and it can be used in restoreHdfsRegions().
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Cloning regions..."
argument_list|)
expr_stmt|;
name|RegionInfo
index|[]
name|clonedRegions
init|=
name|cloneHdfsRegions
argument_list|(
name|exec
argument_list|,
name|regionManifests
argument_list|,
name|regionsToAdd
argument_list|)
decl_stmt|;
name|metaChanges
operator|.
name|setNewRegions
argument_list|(
name|clonedRegions
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Finished cloning regions."
argument_list|)
expr_stmt|;
comment|// Restore regions using the snapshot data
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Restoring table regions..."
argument_list|)
expr_stmt|;
name|restoreHdfsRegions
argument_list|(
name|exec
argument_list|,
name|regionManifests
argument_list|,
name|metaChanges
operator|.
name|getRegionsToRestore
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Finished restoring all table regions."
argument_list|)
expr_stmt|;
comment|// Remove regions from the current table
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Starting to delete excess regions from table"
argument_list|)
expr_stmt|;
name|removeHdfsRegions
argument_list|(
name|exec
argument_list|,
name|metaChanges
operator|.
name|getRegionsToRemove
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Finished deleting excess regions from table."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finishing restore table regions using snapshot="
operator|+
name|snapshotDesc
argument_list|)
expr_stmt|;
return|return
name|metaChanges
return|;
block|}
comment|/**    * Describe the set of operations needed to update hbase:meta after restore.    */
specifier|public
specifier|static
class|class
name|RestoreMetaChanges
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|parentsMap
decl_stmt|;
specifier|private
specifier|final
name|TableDescriptor
name|htd
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsToRestore
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsToRemove
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsToAdd
init|=
literal|null
decl_stmt|;
specifier|public
name|RestoreMetaChanges
parameter_list|(
name|TableDescriptor
name|htd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|parentsMap
parameter_list|)
block|{
name|this
operator|.
name|parentsMap
operator|=
name|parentsMap
expr_stmt|;
name|this
operator|.
name|htd
operator|=
name|htd
expr_stmt|;
block|}
specifier|public
name|TableDescriptor
name|getTableDescriptor
parameter_list|()
block|{
return|return
name|htd
return|;
block|}
comment|/**      * Returns the map of parent-children_pair.      * @return the map      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getParentToChildrenPairMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|parentsMap
return|;
block|}
comment|/**      * @return true if there're new regions      */
specifier|public
name|boolean
name|hasRegionsToAdd
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionsToAdd
operator|!=
literal|null
operator|&&
name|this
operator|.
name|regionsToAdd
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Returns the list of new regions added during the on-disk restore.      * The caller is responsible to add the regions to META.      * e.g MetaTableAccessor.addRegionsToMeta(...)      * @return the list of regions to add to META      */
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsToAdd
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionsToAdd
return|;
block|}
comment|/**      * @return true if there're regions to restore      */
specifier|public
name|boolean
name|hasRegionsToRestore
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionsToRestore
operator|!=
literal|null
operator|&&
name|this
operator|.
name|regionsToRestore
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Returns the list of 'restored regions' during the on-disk restore.      * The caller is responsible to add the regions to hbase:meta if not present.      * @return the list of regions restored      */
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsToRestore
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionsToRestore
return|;
block|}
comment|/**      * @return true if there're regions to remove      */
specifier|public
name|boolean
name|hasRegionsToRemove
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionsToRemove
operator|!=
literal|null
operator|&&
name|this
operator|.
name|regionsToRemove
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Returns the list of regions removed during the on-disk restore.      * The caller is responsible to remove the regions from META.      * e.g. MetaTableAccessor.deleteRegions(...)      * @return the list of regions to remove from META      */
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsToRemove
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionsToRemove
return|;
block|}
name|void
name|setNewRegions
parameter_list|(
specifier|final
name|RegionInfo
index|[]
name|hris
parameter_list|)
block|{
if|if
condition|(
name|hris
operator|!=
literal|null
condition|)
block|{
name|regionsToAdd
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|hris
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionsToAdd
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|void
name|addRegionToRemove
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
block|{
if|if
condition|(
name|regionsToRemove
operator|==
literal|null
condition|)
block|{
name|regionsToRemove
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|regionsToRemove
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|void
name|addRegionToRestore
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
block|{
if|if
condition|(
name|regionsToRestore
operator|==
literal|null
condition|)
block|{
name|regionsToRestore
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|regionsToRestore
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateMetaParentRegions
parameter_list|(
name|Connection
name|connection
parameter_list|,
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regionInfos
operator|==
literal|null
operator|||
name|parentsMap
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// Extract region names and offlined regions
name|Map
argument_list|<
name|String
argument_list|,
name|RegionInfo
argument_list|>
name|regionsByName
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|regionInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|parentRegions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|regionInfos
control|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|isSplitParent
argument_list|()
condition|)
block|{
name|parentRegions
operator|.
name|add
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionsByName
operator|.
name|put
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update Offline parents
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|parentRegions
control|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|daughters
init|=
name|parentsMap
operator|.
name|get
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|daughters
operator|==
literal|null
condition|)
block|{
comment|// The snapshot contains an unreferenced region.
comment|// It will be removed by the CatalogJanitor.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip update of unreferenced offline parent: "
operator|+
name|regionInfo
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// One side of the split is already compacted
if|if
condition|(
name|daughters
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
name|daughters
operator|.
name|setSecond
argument_list|(
name|daughters
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Update splits parent "
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" -> "
operator|+
name|daughters
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|addSpiltsToParent
argument_list|(
name|connection
argument_list|,
name|regionInfo
argument_list|,
name|regionsByName
operator|.
name|get
argument_list|(
name|daughters
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|,
name|regionsByName
operator|.
name|get
argument_list|(
name|daughters
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Remove specified regions from the file-system, using the archiver.    */
specifier|private
name|void
name|removeHdfsRegions
parameter_list|(
specifier|final
name|ThreadPoolExecutor
name|exec
parameter_list|,
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regions
operator|==
literal|null
operator|||
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ModifyRegionUtils
operator|.
name|editRegions
argument_list|(
name|exec
argument_list|,
name|regions
argument_list|,
operator|new
name|ModifyRegionUtils
operator|.
name|RegionEditTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|editRegion
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|HFileArchiver
operator|.
name|archiveRegion
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restore specified regions by restoring content to the snapshot state.    */
specifier|private
name|void
name|restoreHdfsRegions
parameter_list|(
specifier|final
name|ThreadPoolExecutor
name|exec
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SnapshotRegionManifest
argument_list|>
name|regionManifests
parameter_list|,
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regions
operator|==
literal|null
operator|||
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ModifyRegionUtils
operator|.
name|editRegions
argument_list|(
name|exec
argument_list|,
name|regions
argument_list|,
operator|new
name|ModifyRegionUtils
operator|.
name|RegionEditTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|editRegion
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|restoreRegion
argument_list|(
name|hri
argument_list|,
name|regionManifests
operator|.
name|get
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restore specified mob regions by restoring content to the snapshot state.    */
specifier|private
name|void
name|restoreHdfsMobRegions
parameter_list|(
specifier|final
name|ThreadPoolExecutor
name|exec
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SnapshotRegionManifest
argument_list|>
name|regionManifests
parameter_list|,
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regions
operator|==
literal|null
operator|||
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ModifyRegionUtils
operator|.
name|editRegions
argument_list|(
name|exec
argument_list|,
name|regions
argument_list|,
operator|new
name|ModifyRegionUtils
operator|.
name|RegionEditTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|editRegion
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|restoreMobRegion
argument_list|(
name|hri
argument_list|,
name|regionManifests
operator|.
name|get
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SnapshotRegionManifest
operator|.
name|StoreFile
argument_list|>
argument_list|>
name|getRegionHFileReferences
parameter_list|(
specifier|final
name|SnapshotRegionManifest
name|manifest
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SnapshotRegionManifest
operator|.
name|StoreFile
argument_list|>
argument_list|>
name|familyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|manifest
operator|.
name|getFamilyFilesCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SnapshotRegionManifest
operator|.
name|FamilyFiles
name|familyFiles
range|:
name|manifest
operator|.
name|getFamilyFilesList
argument_list|()
control|)
block|{
name|familyMap
operator|.
name|put
argument_list|(
name|familyFiles
operator|.
name|getFamilyName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|familyFiles
operator|.
name|getStoreFilesList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|familyMap
return|;
block|}
comment|/**    * Restore region by removing files not in the snapshot    * and adding the missing ones from the snapshot.    */
specifier|private
name|void
name|restoreRegion
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|SnapshotRegionManifest
name|regionManifest
parameter_list|)
throws|throws
name|IOException
block|{
name|restoreRegion
argument_list|(
name|regionInfo
argument_list|,
name|regionManifest
argument_list|,
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restore mob region by removing files not in the snapshot    * and adding the missing ones from the snapshot.    */
specifier|private
name|void
name|restoreMobRegion
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|SnapshotRegionManifest
name|regionManifest
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regionManifest
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|restoreRegion
argument_list|(
name|regionInfo
argument_list|,
name|regionManifest
argument_list|,
name|MobUtils
operator|.
name|getMobRegionPath
argument_list|(
name|conf
argument_list|,
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restore region by removing files not in the snapshot    * and adding the missing ones from the snapshot.    */
specifier|private
name|void
name|restoreRegion
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|SnapshotRegionManifest
name|regionManifest
parameter_list|,
name|Path
name|regionDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SnapshotRegionManifest
operator|.
name|StoreFile
argument_list|>
argument_list|>
name|snapshotFiles
init|=
name|getRegionHFileReferences
argument_list|(
name|regionManifest
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|tableDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
comment|// Restore families present in the table
for|for
control|(
name|Path
name|familyDir
range|:
name|FSUtils
operator|.
name|getFamilyDirs
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
control|)
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|familyFiles
init|=
name|getTableRegionFamilyFiles
argument_list|(
name|familyDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotRegionManifest
operator|.
name|StoreFile
argument_list|>
name|snapshotFamilyFiles
init|=
name|snapshotFiles
operator|.
name|remove
argument_list|(
name|familyDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotFamilyFiles
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|SnapshotRegionManifest
operator|.
name|StoreFile
argument_list|>
name|hfilesToAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
range|:
name|snapshotFamilyFiles
control|)
block|{
if|if
condition|(
name|familyFiles
operator|.
name|contains
argument_list|(
name|storeFile
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// HFile already present
name|familyFiles
operator|.
name|remove
argument_list|(
name|storeFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// HFile missing
name|hfilesToAdd
operator|.
name|add
argument_list|(
name|storeFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove hfiles not present in the snapshot
for|for
control|(
name|String
name|hfileName
range|:
name|familyFiles
control|)
block|{
name|Path
name|hfile
init|=
operator|new
name|Path
argument_list|(
name|familyDir
argument_list|,
name|hfileName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing hfile="
operator|+
name|hfileName
operator|+
literal|" from region="
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|HFileArchiver
operator|.
name|archiveStoreFile
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|regionInfo
argument_list|,
name|tableDir
argument_list|,
name|family
argument_list|,
name|hfile
argument_list|)
expr_stmt|;
block|}
comment|// Restore Missing files
for|for
control|(
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
range|:
name|hfilesToAdd
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding HFileLink "
operator|+
name|storeFile
operator|.
name|getName
argument_list|()
operator|+
literal|" to region="
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|restoreStoreFile
argument_list|(
name|familyDir
argument_list|,
name|regionInfo
argument_list|,
name|storeFile
argument_list|,
name|createBackRefs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Family doesn't exists in the snapshot
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing family="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|" from region="
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|HFileArchiver
operator|.
name|archiveFamilyByFamilyDir
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|familyDir
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|familyDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add families not present in the table
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SnapshotRegionManifest
operator|.
name|StoreFile
argument_list|>
argument_list|>
name|familyEntry
range|:
name|snapshotFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Path
name|familyDir
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|familyEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|familyDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create familyDir="
operator|+
name|familyDir
argument_list|)
throw|;
block|}
for|for
control|(
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
range|:
name|familyEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding HFileLink "
operator|+
name|storeFile
operator|.
name|getName
argument_list|()
operator|+
literal|" to table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|restoreStoreFile
argument_list|(
name|familyDir
argument_list|,
name|regionInfo
argument_list|,
name|storeFile
argument_list|,
name|createBackRefs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return The set of files in the specified family directory.    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getTableRegionFamilyFiles
parameter_list|(
specifier|final
name|Path
name|familyDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|hfiles
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|familyDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|hfiles
operator|==
literal|null
condition|)
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
name|Set
argument_list|<
name|String
argument_list|>
name|familyFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|hfiles
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hfiles
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|String
name|hfileName
init|=
name|hfiles
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|familyFiles
operator|.
name|add
argument_list|(
name|hfileName
argument_list|)
expr_stmt|;
block|}
return|return
name|familyFiles
return|;
block|}
comment|/**    * Clone specified regions. For each region create a new region    * and create a HFileLink for each hfile.    */
specifier|private
name|RegionInfo
index|[]
name|cloneHdfsRegions
parameter_list|(
specifier|final
name|ThreadPoolExecutor
name|exec
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SnapshotRegionManifest
argument_list|>
name|regionManifests
parameter_list|,
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regions
operator|==
literal|null
operator|||
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RegionInfo
argument_list|>
name|snapshotRegions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// clone region info (change embedded tableName with the new one)
name|RegionInfo
index|[]
name|clonedRegionsInfo
init|=
operator|new
name|RegionInfo
index|[
name|regions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clonedRegionsInfo
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// clone the region info from the snapshot region info
name|RegionInfo
name|snapshotRegionInfo
init|=
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|clonedRegionsInfo
index|[
name|i
index|]
operator|=
name|cloneRegionInfo
argument_list|(
name|snapshotRegionInfo
argument_list|)
expr_stmt|;
comment|// add the region name mapping between snapshot and cloned
name|String
name|snapshotRegionName
init|=
name|snapshotRegionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|String
name|clonedRegionName
init|=
name|clonedRegionsInfo
index|[
name|i
index|]
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|regionsMap
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|snapshotRegionName
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|clonedRegionName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"clone region="
operator|+
name|snapshotRegionName
operator|+
literal|" as "
operator|+
name|clonedRegionName
argument_list|)
expr_stmt|;
comment|// Add mapping between cloned region name and snapshot region info
name|snapshotRegions
operator|.
name|put
argument_list|(
name|clonedRegionName
argument_list|,
name|snapshotRegionInfo
argument_list|)
expr_stmt|;
block|}
comment|// create the regions on disk
name|ModifyRegionUtils
operator|.
name|createRegions
argument_list|(
name|exec
argument_list|,
name|conf
argument_list|,
name|rootDir
argument_list|,
name|tableDesc
argument_list|,
name|clonedRegionsInfo
argument_list|,
operator|new
name|ModifyRegionUtils
operator|.
name|RegionFillTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|fillRegion
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionInfo
name|snapshotHri
init|=
name|snapshotRegions
operator|.
name|get
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|cloneRegion
argument_list|(
name|region
argument_list|,
name|snapshotHri
argument_list|,
name|regionManifests
operator|.
name|get
argument_list|(
name|snapshotHri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|clonedRegionsInfo
return|;
block|}
comment|/**    * Clone the mob region. For the region create a new region    * and create a HFileLink for each hfile.    */
specifier|private
name|void
name|cloneHdfsMobRegion
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SnapshotRegionManifest
argument_list|>
name|regionManifests
parameter_list|,
specifier|final
name|RegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
comment|// clone region info (change embedded tableName with the new one)
name|Path
name|clonedRegionPath
init|=
name|MobUtils
operator|.
name|getMobRegionPath
argument_list|(
name|conf
argument_list|,
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|cloneRegion
argument_list|(
name|clonedRegionPath
argument_list|,
name|region
argument_list|,
name|regionManifests
operator|.
name|get
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clone region directory content from the snapshot info.    *    * Each region is encoded with the table name, so the cloned region will have    * a different region name.    *    * Instead of copying the hfiles a HFileLink is created.    *    * @param regionDir {@link Path} cloned dir    * @param snapshotRegionInfo    */
specifier|private
name|void
name|cloneRegion
parameter_list|(
specifier|final
name|Path
name|regionDir
parameter_list|,
specifier|final
name|RegionInfo
name|snapshotRegionInfo
parameter_list|,
specifier|final
name|SnapshotRegionManifest
name|manifest
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|tableName
init|=
name|tableDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotRegionManifest
operator|.
name|FamilyFiles
name|familyFiles
range|:
name|manifest
operator|.
name|getFamilyFilesList
argument_list|()
control|)
block|{
name|Path
name|familyDir
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|familyFiles
operator|.
name|getFamilyName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
range|:
name|familyFiles
operator|.
name|getStoreFilesList
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding HFileLink "
operator|+
name|storeFile
operator|.
name|getName
argument_list|()
operator|+
literal|" to table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|restoreStoreFile
argument_list|(
name|familyDir
argument_list|,
name|snapshotRegionInfo
argument_list|,
name|storeFile
argument_list|,
name|createBackRefs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Clone region directory content from the snapshot info.    *    * Each region is encoded with the table name, so the cloned region will have    * a different region name.    *    * Instead of copying the hfiles a HFileLink is created.    *    * @param region {@link HRegion} cloned    * @param snapshotRegionInfo    */
specifier|private
name|void
name|cloneRegion
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|RegionInfo
name|snapshotRegionInfo
parameter_list|,
specifier|final
name|SnapshotRegionManifest
name|manifest
parameter_list|)
throws|throws
name|IOException
block|{
name|cloneRegion
argument_list|(
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|,
name|snapshotRegionInfo
argument_list|,
name|manifest
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new {@link HFileLink} to reference the store file.    *<p>The store file in the snapshot can be a simple hfile, an HFileLink or a reference.    *<ul>    *<li>hfile: abc -> table=region-abc    *<li>reference: abc.1234 -> table=region-abc.1234    *<li>hfilelink: table=region-hfile -> table=region-hfile    *</ul>    * @param familyDir destination directory for the store file    * @param regionInfo destination region info for the table    * @param createBackRef - Whether back reference should be created. Defaults to true.    * @param storeFile store file name (can be a Reference, HFileLink or simple HFile)    */
specifier|private
name|void
name|restoreStoreFile
parameter_list|(
specifier|final
name|Path
name|familyDir
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
parameter_list|,
specifier|final
name|boolean
name|createBackRef
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hfileName
init|=
name|storeFile
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|hfileName
argument_list|)
condition|)
block|{
name|HFileLink
operator|.
name|createFromHFileLink
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|familyDir
argument_list|,
name|hfileName
argument_list|,
name|createBackRef
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StoreFileInfo
operator|.
name|isReference
argument_list|(
name|hfileName
argument_list|)
condition|)
block|{
name|restoreReferenceFile
argument_list|(
name|familyDir
argument_list|,
name|regionInfo
argument_list|,
name|storeFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HFileLink
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|familyDir
argument_list|,
name|regionInfo
argument_list|,
name|hfileName
argument_list|,
name|createBackRef
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a new {@link Reference} as copy of the source one.    *<p><blockquote><pre>    * The source table looks like:    *    1234/abc      (original file)    *    5678/abc.1234 (reference file)    *    * After the clone operation looks like:    *   wxyz/table=1234-abc    *   stuv/table=1234-abc.wxyz    *    * NOTE that the region name in the clone changes (md5 of regioninfo)    * and the reference should reflect that change.    *</pre></blockquote>    * @param familyDir destination directory for the store file    * @param regionInfo destination region info for the table    * @param storeFile reference file name    */
specifier|private
name|void
name|restoreReferenceFile
parameter_list|(
specifier|final
name|Path
name|familyDir
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hfileName
init|=
name|storeFile
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Extract the referred information (hfile name and parent region)
name|Path
name|refPath
init|=
name|StoreFileInfo
operator|.
name|getReferredToFile
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|snapshotTable
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|snapshotTable
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|,
name|familyDir
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|hfileName
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|snapshotRegionName
init|=
name|refPath
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|refPath
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// The new reference should have the cloned region name as parent, if it is a clone.
name|String
name|clonedRegionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|regionsMap
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|snapshotRegionName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clonedRegionName
operator|==
literal|null
condition|)
name|clonedRegionName
operator|=
name|snapshotRegionName
expr_stmt|;
comment|// The output file should be a reference link table=snapshotRegion-fileName.clonedRegionName
name|Path
name|linkPath
init|=
literal|null
decl_stmt|;
name|String
name|refLink
init|=
name|fileName
decl_stmt|;
if|if
condition|(
operator|!
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|refLink
operator|=
name|HFileLink
operator|.
name|createHFileLinkName
argument_list|(
name|snapshotTable
argument_list|,
name|snapshotRegionName
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|linkPath
operator|=
operator|new
name|Path
argument_list|(
name|familyDir
argument_list|,
name|HFileLink
operator|.
name|createHFileLinkName
argument_list|(
name|snapshotTable
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|hfileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|outPath
init|=
operator|new
name|Path
argument_list|(
name|familyDir
argument_list|,
name|refLink
operator|+
literal|'.'
operator|+
name|clonedRegionName
argument_list|)
decl_stmt|;
comment|// Create the new reference
if|if
condition|(
name|storeFile
operator|.
name|hasReference
argument_list|()
condition|)
block|{
name|Reference
name|reference
init|=
name|Reference
operator|.
name|convert
argument_list|(
name|storeFile
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
name|reference
operator|.
name|write
argument_list|(
name|fs
argument_list|,
name|outPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InputStream
name|in
decl_stmt|;
if|if
condition|(
name|linkPath
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
name|HFileLink
operator|.
name|buildFromHFileLinkPattern
argument_list|(
name|conf
argument_list|,
name|linkPath
argument_list|)
operator|.
name|open
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|linkPath
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|snapshotManifest
operator|.
name|getSnapshotDir
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|,
name|familyDir
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|hfileName
argument_list|)
expr_stmt|;
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|linkPath
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|outPath
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// Add the daughter region to the map
name|String
name|regionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|regionsMap
operator|.
name|get
argument_list|(
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionName
operator|==
literal|null
condition|)
block|{
name|regionName
operator|=
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restore reference "
operator|+
name|regionName
operator|+
literal|" to "
operator|+
name|clonedRegionName
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|parentsMap
init|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|daughters
init|=
name|parentsMap
operator|.
name|get
argument_list|(
name|clonedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|daughters
operator|==
literal|null
condition|)
block|{
comment|// In case one side of the split is already compacted, regionName is put as both first and
comment|// second of Pair
name|daughters
operator|=
operator|new
name|Pair
argument_list|<>
argument_list|(
name|regionName
argument_list|,
name|regionName
argument_list|)
expr_stmt|;
name|parentsMap
operator|.
name|put
argument_list|(
name|clonedRegionName
argument_list|,
name|daughters
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|regionName
operator|.
name|equals
argument_list|(
name|daughters
operator|.
name|getFirst
argument_list|()
argument_list|)
condition|)
block|{
name|daughters
operator|.
name|setSecond
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a new {@link RegionInfo} from the snapshot region info.    * Keep the same startKey, endKey, regionId and split information but change    * the table name.    *    * @param snapshotRegionInfo Info for region to clone.    * @return the new HRegion instance    */
specifier|public
name|RegionInfo
name|cloneRegionInfo
parameter_list|(
specifier|final
name|RegionInfo
name|snapshotRegionInfo
parameter_list|)
block|{
return|return
name|cloneRegionInfo
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|snapshotRegionInfo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RegionInfo
name|cloneRegionInfo
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|RegionInfo
name|snapshotRegionInfo
parameter_list|)
block|{
return|return
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|snapshotRegionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|snapshotRegionInfo
operator|.
name|getEndKey
argument_list|()
argument_list|)
operator|.
name|setSplit
argument_list|(
name|snapshotRegionInfo
operator|.
name|isSplit
argument_list|()
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|snapshotRegionInfo
operator|.
name|getRegionId
argument_list|()
argument_list|)
operator|.
name|setOffline
argument_list|(
name|snapshotRegionInfo
operator|.
name|isOffline
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * @return the set of the regions contained in the table    */
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getTableRegions
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get table regions: "
operator|+
name|tableDir
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|regionDirs
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|,
operator|new
name|FSUtils
operator|.
name|RegionDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionDirs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|regionDirs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionDirs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|RegionInfo
name|hri
init|=
name|HRegionFileSystem
operator|.
name|loadRegionInfoFileContent
argument_list|(
name|fs
argument_list|,
name|regionDirs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions for table="
operator|+
name|tableDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regions
return|;
block|}
comment|/**    * Copy the snapshot files for a snapshot scanner, discards meta changes.    * @param conf    * @param fs    * @param rootDir    * @param restoreDir    * @param snapshotName    * @throws IOException    */
specifier|public
specifier|static
name|RestoreMetaChanges
name|copySnapshotForScanner
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|Path
name|restoreDir
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ensure that restore dir is not under root dir
if|if
condition|(
operator|!
name|restoreDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Filesystems for restore directory and HBase root "
operator|+
literal|"directory should be the same"
argument_list|)
throw|;
block|}
if|if
condition|(
name|restoreDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|rootDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Restore directory cannot be a sub directory of HBase "
operator|+
literal|"root directory. RootDir: "
operator|+
name|rootDir
operator|+
literal|", restoreDir: "
operator|+
name|restoreDir
argument_list|)
throw|;
block|}
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotName
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|SnapshotDescription
name|snapshotDesc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|)
decl_stmt|;
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Restoring  snapshot '"
operator|+
name|snapshotName
operator|+
literal|"' to directory "
operator|+
name|restoreDir
argument_list|)
decl_stmt|;
name|ForeignExceptionDispatcher
name|monitor
init|=
operator|new
name|ForeignExceptionDispatcher
argument_list|()
decl_stmt|;
comment|// we send createBackRefs=false so that restored hfiles do not create back reference links
comment|// in the base hbase root dir.
name|RestoreSnapshotHelper
name|helper
init|=
operator|new
name|RestoreSnapshotHelper
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|manifest
argument_list|,
name|manifest
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|restoreDir
argument_list|,
name|monitor
argument_list|,
name|status
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RestoreMetaChanges
name|metaChanges
init|=
name|helper
operator|.
name|restoreHdfsRegions
argument_list|()
decl_stmt|;
comment|// TODO: parallelize.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restored table dir:"
operator|+
name|restoreDir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|fs
argument_list|,
name|restoreDir
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
return|return
name|metaChanges
return|;
block|}
specifier|public
specifier|static
name|void
name|restoreSnapshotAcl
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|,
name|TableName
name|newTableName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|snapshot
operator|.
name|hasUsersAndPermissions
argument_list|()
operator|&&
name|snapshot
operator|.
name|getUsersAndPermissions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Restore snapshot acl to table. snapshot: "
operator|+
name|snapshot
operator|+
literal|", table: "
operator|+
name|newTableName
argument_list|)
expr_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|ShadedAccessControlUtil
operator|.
name|toUserTablePermissions
argument_list|(
name|snapshot
operator|.
name|getUsersAndPermissions
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|e
range|:
name|perms
operator|.
name|entries
argument_list|()
control|)
block|{
name|String
name|user
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TablePermission
name|perm
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|perm
operator|.
name|setTableName
argument_list|(
name|newTableName
argument_list|)
expr_stmt|;
name|AccessControlClient
operator|.
name|grant
argument_list|(
name|conn
argument_list|,
name|perm
operator|.
name|getTableName
argument_list|()
argument_list|,
name|user
argument_list|,
name|perm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|perm
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|perm
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Grant acl into newly creatd table failed. snapshot: "
operator|+
name|snapshot
operator|+
literal|", table: "
operator|+
name|newTableName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

