begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HFileArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ModifyRegionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * Helper to Restore/Clone a Snapshot  *  *<p>The helper assumes that a table is already created, and by calling restore()  * the content present in the snapshot will be restored as the new content of the table.  *  *<p>Clone from Snapshot: If the target table is empty, the restore operation  * is just a "clone operation", where the only operations are:  *<ul>  *<li>for each region in the snapshot create a new region  *    (note that the region will have a different name, since the encoding contains the table name)  *<li>for each file in the region create a new HFileLink to point to the original file.  *<li>restore the logs, if any  *</ul>  *  *<p>Restore from Snapshot:  *<ul>  *<li>for each region in the table verify which are available in the snapshot and which are not  *<ul>  *<li>if the region is not present in the snapshot, remove it.  *<li>if the region is present in the snapshot  *<ul>  *<li>for each file in the table region verify which are available in the snapshot  *<ul>  *<li>if the hfile is not present in the snapshot, remove it  *<li>if the hfile is present, keep it (nothing to do)  *</ul>  *<li>for each file in the snapshot region but not in the table  *<ul>  *<li>create a new HFileLink that point to the original file  *</ul>  *</ul>  *</ul>  *<li>for each region in the snapshot not present in the current table state  *<ul>  *<li>create a new region and for each file in the region create a new HFileLink  *      (This is the same as the clone operation)  *</ul>  *<li>restore the logs, if any  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RestoreSnapshotHelper
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RestoreSnapshotHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|regionsMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ForeignExceptionDispatcher
name|monitor
decl_stmt|;
specifier|private
specifier|final
name|SnapshotDescription
name|snapshotDesc
decl_stmt|;
specifier|private
specifier|final
name|Path
name|snapshotDir
decl_stmt|;
specifier|private
specifier|final
name|HTableDescriptor
name|tableDesc
decl_stmt|;
specifier|private
specifier|final
name|Path
name|tableDir
decl_stmt|;
specifier|private
specifier|final
name|CatalogTracker
name|catalogTracker
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|public
name|RestoreSnapshotHelper
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshotDescription
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|,
specifier|final
name|HTableDescriptor
name|tableDescriptor
parameter_list|,
specifier|final
name|Path
name|tableDir
parameter_list|,
specifier|final
name|ForeignExceptionDispatcher
name|monitor
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|catalogTracker
operator|=
name|catalogTracker
expr_stmt|;
name|this
operator|.
name|snapshotDesc
operator|=
name|snapshotDescription
expr_stmt|;
name|this
operator|.
name|snapshotDir
operator|=
name|snapshotDir
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|=
name|tableDescriptor
expr_stmt|;
name|this
operator|.
name|tableDir
operator|=
name|tableDir
expr_stmt|;
name|this
operator|.
name|monitor
operator|=
name|monitor
expr_stmt|;
block|}
comment|/**    * Restore table to a specified snapshot state.    */
specifier|public
name|void
name|restore
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"starting restore"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|snapshotRegionNames
init|=
name|SnapshotReferenceUtil
operator|.
name|getSnapshotRegionNames
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotRegionNames
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nothing to restore. Snapshot "
operator|+
name|snapshotDesc
operator|+
literal|" looks empty"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Identify which region are still available and which not.
comment|// NOTE: we rely upon the region name as: "table name, start key, end key"
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|tableRegions
init|=
name|getTableRegions
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableRegions
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToRestore
init|=
operator|new
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToRemove
init|=
operator|new
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|tableRegions
control|)
block|{
name|String
name|regionName
init|=
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotRegionNames
operator|.
name|contains
argument_list|(
name|regionName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"region to restore: "
operator|+
name|regionName
argument_list|)
expr_stmt|;
name|snapshotRegionNames
operator|.
name|remove
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
name|regionsToRestore
operator|.
name|add
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"region to remove: "
operator|+
name|regionName
argument_list|)
expr_stmt|;
name|regionsToRemove
operator|.
name|add
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Restore regions using the snapshot data
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|restoreRegions
argument_list|(
name|regionsToRestore
argument_list|)
expr_stmt|;
comment|// Remove regions from the current table
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|ModifyRegionUtils
operator|.
name|deleteRegions
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|catalogTracker
argument_list|,
name|regionsToRemove
argument_list|)
expr_stmt|;
block|}
comment|// Regions to Add: present in the snapshot but not in the current table
if|if
condition|(
name|snapshotRegionNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAdd
init|=
operator|new
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|regionName
range|:
name|snapshotRegionNames
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"region to add: "
operator|+
name|regionName
argument_list|)
expr_stmt|;
name|Path
name|regionDir
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|regionsToAdd
operator|.
name|add
argument_list|(
name|HRegion
operator|.
name|loadDotRegionInfoFileContent
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create new regions cloning from the snapshot
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|cloneRegions
argument_list|(
name|regionsToAdd
argument_list|)
expr_stmt|;
block|}
comment|// Restore WALs
name|monitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
name|restoreWALs
argument_list|()
expr_stmt|;
block|}
comment|/**    * Restore specified regions by restoring content to the snapshot state.    */
specifier|private
name|void
name|restoreRegions
parameter_list|(
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regions
operator|==
literal|null
operator|||
name|regions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regions
control|)
name|restoreRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restore region by removing files not it in the snapshot    * and adding the missing ones from the snapshot.    */
specifier|private
name|void
name|restoreRegion
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|snapshotRegionDir
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|snapshotFiles
init|=
name|SnapshotReferenceUtil
operator|.
name|getRegionHFileReferences
argument_list|(
name|fs
argument_list|,
name|snapshotRegionDir
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|tableDesc
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
comment|// Restore families present in the table
for|for
control|(
name|Path
name|familyDir
range|:
name|FSUtils
operator|.
name|getFamilyDirs
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
control|)
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|familyFiles
init|=
name|getTableRegionFamilyFiles
argument_list|(
name|familyDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|snapshotFamilyFiles
init|=
name|snapshotFiles
operator|.
name|remove
argument_list|(
name|familyDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotFamilyFiles
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hfilesToAdd
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|hfileName
range|:
name|snapshotFamilyFiles
control|)
block|{
if|if
condition|(
name|familyFiles
operator|.
name|contains
argument_list|(
name|hfileName
argument_list|)
condition|)
block|{
comment|// HFile already present
name|familyFiles
operator|.
name|remove
argument_list|(
name|hfileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// HFile missing
name|hfilesToAdd
operator|.
name|add
argument_list|(
name|hfileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Restore Missing files
for|for
control|(
name|String
name|hfileName
range|:
name|hfilesToAdd
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding HFileLink "
operator|+
name|hfileName
operator|+
literal|" to region="
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|restoreStoreFile
argument_list|(
name|familyDir
argument_list|,
name|regionInfo
argument_list|,
name|hfileName
argument_list|)
expr_stmt|;
block|}
comment|// Remove hfiles not present in the snapshot
for|for
control|(
name|String
name|hfileName
range|:
name|familyFiles
control|)
block|{
name|Path
name|hfile
init|=
operator|new
name|Path
argument_list|(
name|familyDir
argument_list|,
name|hfileName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing hfile="
operator|+
name|hfile
operator|+
literal|" from region="
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|HFileArchiver
operator|.
name|archiveStoreFile
argument_list|(
name|fs
argument_list|,
name|regionInfo
argument_list|,
name|conf
argument_list|,
name|tableDir
argument_list|,
name|family
argument_list|,
name|hfile
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Family doesn't exists in the snapshot
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing family="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|" from region="
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|HFileArchiver
operator|.
name|archiveFamily
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|tableDir
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|familyDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add families not present in the table
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|familyEntry
range|:
name|snapshotFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|familyDir
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|familyEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|familyDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create familyDir="
operator|+
name|familyDir
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|hfilesToAdd
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|hfileName
range|:
name|familyEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding HFileLink "
operator|+
name|hfileName
operator|+
literal|" to table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|restoreStoreFile
argument_list|(
name|familyDir
argument_list|,
name|regionInfo
argument_list|,
name|hfileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return The set of files in the specified family directory.    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getTableRegionFamilyFiles
parameter_list|(
specifier|final
name|Path
name|familyDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|familyFiles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|hfiles
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|familyDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|hfiles
operator|==
literal|null
condition|)
return|return
name|familyFiles
return|;
for|for
control|(
name|FileStatus
name|hfileRef
range|:
name|hfiles
control|)
block|{
name|String
name|hfileName
init|=
name|hfileRef
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|familyFiles
operator|.
name|add
argument_list|(
name|hfileName
argument_list|)
expr_stmt|;
block|}
return|return
name|familyFiles
return|;
block|}
comment|/**    * Clone specified regions. For each region create a new region    * and create a HFileLink for each hfile.    */
specifier|private
name|void
name|cloneRegions
parameter_list|(
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regions
operator|==
literal|null
operator|||
name|regions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HRegionInfo
argument_list|>
name|snapshotRegions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// clone region info (change embedded tableName with the new one)
name|HRegionInfo
index|[]
name|clonedRegionsInfo
init|=
operator|new
name|HRegionInfo
index|[
name|regions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clonedRegionsInfo
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// clone the region info from the snapshot region info
name|HRegionInfo
name|snapshotRegionInfo
init|=
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|clonedRegionsInfo
index|[
name|i
index|]
operator|=
name|cloneRegionInfo
argument_list|(
name|snapshotRegionInfo
argument_list|)
expr_stmt|;
comment|// add the region name mapping between snapshot and cloned
name|String
name|snapshotRegionName
init|=
name|snapshotRegionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|String
name|clonedRegionName
init|=
name|clonedRegionsInfo
index|[
name|i
index|]
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|regionsMap
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|snapshotRegionName
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|clonedRegionName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"clone region="
operator|+
name|snapshotRegionName
operator|+
literal|" as "
operator|+
name|clonedRegionName
argument_list|)
expr_stmt|;
comment|// Add mapping between cloned region name and snapshot region info
name|snapshotRegions
operator|.
name|put
argument_list|(
name|clonedRegionName
argument_list|,
name|snapshotRegionInfo
argument_list|)
expr_stmt|;
block|}
comment|// create the regions on disk
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|clonedRegions
init|=
name|ModifyRegionUtils
operator|.
name|createRegions
argument_list|(
name|conf
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|tableDesc
argument_list|,
name|clonedRegionsInfo
argument_list|,
name|catalogTracker
argument_list|,
operator|new
name|ModifyRegionUtils
operator|.
name|RegionFillTask
argument_list|()
block|{
specifier|public
name|void
name|fillRegion
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|cloneRegion
argument_list|(
name|region
argument_list|,
name|snapshotRegions
operator|.
name|get
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|!=
literal|null
operator|&&
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// add regions to .META.
name|MetaEditor
operator|.
name|addRegionsToMeta
argument_list|(
name|catalogTracker
argument_list|,
name|clonedRegions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Clone region directory content from the snapshot info.    *    * Each region is encoded with the table name, so the cloned region will have    * a different region name.    *    * Instead of copying the hfiles a HFileLink is created.    *    * @param region {@link HRegion} cloned    * @param snapshotRegionInfo    */
specifier|private
name|void
name|cloneRegion
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|HRegionInfo
name|snapshotRegionInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|snapshotRegionDir
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|snapshotRegionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|regionDir
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|tableDesc
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|SnapshotReferenceUtil
operator|.
name|visitRegionStoreFiles
argument_list|(
name|fs
argument_list|,
name|snapshotRegionDir
argument_list|,
operator|new
name|FSVisitor
operator|.
name|StoreFileVisitor
argument_list|()
block|{
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|String
name|region
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|String
name|hfile
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding HFileLink "
operator|+
name|hfile
operator|+
literal|" to table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Path
name|familyDir
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|restoreStoreFile
argument_list|(
name|familyDir
argument_list|,
name|snapshotRegionInfo
argument_list|,
name|hfile
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new {@link HFileLink} to reference the store file.    *    * @param familyDir destination directory for the store file    * @param regionInfo destination region info for the table    * @param hfileName store file name (can be a Reference, HFileLink or simple HFile)    */
specifier|private
name|void
name|restoreStoreFile
parameter_list|(
specifier|final
name|Path
name|familyDir
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|String
name|hfileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|hfileName
argument_list|)
condition|)
block|{
name|HFileLink
operator|.
name|createFromHFileLink
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|familyDir
argument_list|,
name|hfileName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StoreFile
operator|.
name|isReference
argument_list|(
name|hfileName
argument_list|)
condition|)
block|{
name|restoreReferenceFile
argument_list|(
name|familyDir
argument_list|,
name|regionInfo
argument_list|,
name|hfileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HFileLink
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|familyDir
argument_list|,
name|regionInfo
argument_list|,
name|hfileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a new {@link Reference} as copy of the source one.    *    * @param familyDir destination directory for the store file    * @param regionInfo destination region info for the table    * @param hfileName reference file name    */
specifier|private
name|void
name|restoreReferenceFile
parameter_list|(
specifier|final
name|Path
name|familyDir
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|String
name|hfileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|inPath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|snapshotDesc
operator|.
name|getTable
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|,
name|familyDir
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|hfileName
argument_list|)
decl_stmt|;
name|Path
name|outPath
init|=
operator|new
name|Path
argument_list|(
name|familyDir
argument_list|,
name|StoreFile
operator|.
name|getReferredToFile
argument_list|(
name|inPath
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|HFileLink
argument_list|(
name|conf
argument_list|,
name|inPath
argument_list|)
operator|.
name|open
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|outPath
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new {@link HRegionInfo} from the snapshot region info.    * Keep the same startKey, endKey, regionId and split information but change    * the table name.    *    * @param snapshotRegionInfo Info for region to clone.    * @return the new HRegion instance    */
specifier|public
name|HRegionInfo
name|cloneRegionInfo
parameter_list|(
specifier|final
name|HRegionInfo
name|snapshotRegionInfo
parameter_list|)
block|{
return|return
operator|new
name|HRegionInfo
argument_list|(
name|tableDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|snapshotRegionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|snapshotRegionInfo
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|snapshotRegionInfo
operator|.
name|isSplit
argument_list|()
argument_list|,
name|snapshotRegionInfo
operator|.
name|getRegionId
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Restore snapshot WALs.    *    * Global Snapshot keep a reference to region servers logs present during the snapshot.    * (/hbase/.snapshot/snapshotName/.logs/hostName/logName)    *    * Since each log contains different tables data, logs must be split to    * extract the table that we are interested in.    */
specifier|private
name|void
name|restoreWALs
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|SnapshotLogSplitter
name|logSplitter
init|=
operator|new
name|SnapshotLogSplitter
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|snapshotDesc
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|regionsMap
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Recover.Edits
name|SnapshotReferenceUtil
operator|.
name|visitRecoveredEdits
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
operator|new
name|FSVisitor
operator|.
name|RecoveredEditsVisitor
argument_list|()
block|{
specifier|public
name|void
name|recoveredEdits
parameter_list|(
specifier|final
name|String
name|region
parameter_list|,
specifier|final
name|String
name|logfile
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|SnapshotReferenceUtil
operator|.
name|getRecoveredEdits
argument_list|(
name|snapshotDir
argument_list|,
name|region
argument_list|,
name|logfile
argument_list|)
decl_stmt|;
name|logSplitter
operator|.
name|splitRecoveredEdit
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Region Server Logs
name|SnapshotReferenceUtil
operator|.
name|visitLogFiles
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
operator|new
name|FSVisitor
operator|.
name|LogFileVisitor
argument_list|()
block|{
specifier|public
name|void
name|logFile
parameter_list|(
specifier|final
name|String
name|server
parameter_list|,
specifier|final
name|String
name|logfile
parameter_list|)
throws|throws
name|IOException
block|{
name|logSplitter
operator|.
name|splitLog
argument_list|(
name|server
argument_list|,
name|logfile
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logSplitter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return the set of the regions contained in the table    */
specifier|private
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getTableRegions
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get table regions: "
operator|+
name|tableDir
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|regionDirs
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|,
operator|new
name|FSUtils
operator|.
name|RegionDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionDirs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|HRegion
operator|.
name|loadDotRegionInfoFileContent
argument_list|(
name|fs
argument_list|,
name|regionDir
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions for table="
operator|+
name|tableDesc
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regions
return|;
block|}
comment|/**    * Create a new table descriptor cloning the snapshot table schema.    *    * @param admin    * @param snapshotTableDescriptor    * @param tableName    * @return cloned table descriptor    * @throws IOException    */
specifier|public
specifier|static
name|HTableDescriptor
name|cloneTableSchema
parameter_list|(
specifier|final
name|HTableDescriptor
name|snapshotTableDescriptor
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|snapshotTableDescriptor
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
return|return
name|htd
return|;
block|}
block|}
end_class

end_unit

