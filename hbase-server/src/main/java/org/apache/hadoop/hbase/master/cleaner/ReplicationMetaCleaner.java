begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * This chore is to clean up the useless data in hbase:meta which is used by serial replication.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationMetaCleaner
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationMetaCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ReplicationAdmin
name|replicationAdmin
decl_stmt|;
specifier|private
name|MasterServices
name|master
decl_stmt|;
specifier|public
name|ReplicationMetaCleaner
parameter_list|(
name|MasterServices
name|master
parameter_list|,
name|Stoppable
name|stoppable
parameter_list|,
name|int
name|period
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"ReplicationMetaCleaner"
argument_list|,
name|stoppable
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|replicationAdmin
operator|=
operator|new
name|ReplicationAdmin
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
name|tables
init|=
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAllDescriptors
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|serialTables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
name|entry
range|:
name|tables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|hasSerialScope
init|=
literal|false
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|column
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getFamilies
argument_list|()
control|)
block|{
if|if
condition|(
name|column
operator|.
name|getScope
argument_list|()
operator|==
name|HConstants
operator|.
name|REPLICATION_SCOPE_SERIAL
condition|)
block|{
name|hasSerialScope
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasSerialScope
condition|)
block|{
name|serialTables
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serialTables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ReplicationPeerConfig
argument_list|>
name|peers
init|=
name|replicationAdmin
operator|.
name|listPeerConfigs
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ReplicationPeerConfig
argument_list|>
name|entry
range|:
name|peers
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|serialTables
operator|.
name|containsKey
argument_list|(
name|map
operator|.
name|getKey
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
condition|)
block|{
name|serialTables
operator|.
name|get
argument_list|(
name|map
operator|.
name|getKey
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|barrierMap
init|=
name|MetaTableAccessor
operator|.
name|getAllBarriers
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|barrierMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|encodedName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|encodedBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
name|boolean
name|canClearRegion
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|posMap
init|=
name|MetaTableAccessor
operator|.
name|getReplicationPositionForAllPeer
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|encodedBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|posMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|tableName
init|=
name|MetaTableAccessor
operator|.
name|getSerialReplicationTableName
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|encodedBytes
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|confPeers
init|=
name|serialTables
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|confPeers
operator|==
literal|null
condition|)
block|{
comment|// This table doesn't exist or all cf's scope is not serial any more, we can clear meta.
name|canClearRegion
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|allPeersHavePosition
argument_list|(
name|confPeers
argument_list|,
name|posMap
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|daughterValue
init|=
name|MetaTableAccessor
operator|.
name|getSerialReplicationDaughterRegion
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|encodedBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|daughterValue
operator|!=
literal|null
condition|)
block|{
comment|//this region is merged or split
name|boolean
name|allDaughterStart
init|=
literal|true
decl_stmt|;
name|String
index|[]
name|daughterRegions
init|=
name|daughterValue
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|daughter
range|:
name|daughterRegions
control|)
block|{
name|byte
index|[]
name|region
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|daughter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|MetaTableAccessor
operator|.
name|getReplicationBarriers
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|allPeersHavePosition
argument_list|(
name|confPeers
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationPositionForAllPeer
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
argument_list|)
argument_list|)
condition|)
block|{
name|allDaughterStart
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allDaughterStart
condition|)
block|{
name|canClearRegion
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|canClearRegion
condition|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|encodedBytes
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_POSITION_FAMILY
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|metaTable
init|=
name|master
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|metaTable
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Barriers whose seq is larger than min pos of all peers, and the last barrier whose seq
comment|// is smaller than min pos should be kept. All other barriers can be deleted.
name|long
name|minPos
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|pos
range|:
name|posMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|minPos
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minPos
argument_list|,
name|pos
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|barriers
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|barriers
argument_list|,
name|minPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
operator|-
name|index
operator|-
literal|1
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|encodedBytes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|delete
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|barriers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|metaTable
init|=
name|master
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|metaTable
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception during cleaning up."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|allPeersHavePosition
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|peers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|posMap
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|peer
range|:
name|peers
control|)
block|{
if|if
condition|(
operator|!
name|posMap
operator|.
name|containsKey
argument_list|(
name|peer
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

