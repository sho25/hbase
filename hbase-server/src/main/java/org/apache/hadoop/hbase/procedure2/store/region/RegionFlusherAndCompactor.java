begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * As long as there is no RegionServerServices for the procedure store region, we need implement the  * flush and compaction logic by our own.  *<p/>  * The flush logic is very simple, every time after calling a modification method in  * {@link RegionProcedureStore}, we will call the {@link #onUpdate()} method below, and in this  * method, we will check the memstore size and if it is above the flush size, we will call  * {@link HRegion#flush(boolean)} to force flush all stores.  *<p/>  * And for compaction, the logic is also very simple. After flush, we will check the store file  * count, if it is above the compactMin, we will do a major compaction.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|RegionFlusherAndCompactor
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionFlusherAndCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|FLUSH_SIZE_KEY
init|=
literal|"hbase.procedure.store.region.flush.size"
decl_stmt|;
specifier|static
specifier|final
name|long
name|DEFAULT_FLUSH_SIZE
init|=
name|TableDescriptorBuilder
operator|.
name|DEFAULT_MEMSTORE_FLUSH_SIZE
decl_stmt|;
specifier|static
specifier|final
name|String
name|FLUSH_PER_CHANGES_KEY
init|=
literal|"hbase.procedure.store.region.flush.per.changes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_FLUSH_PER_CHANGES
init|=
literal|1_000_000
decl_stmt|;
specifier|static
specifier|final
name|String
name|FLUSH_INTERVAL_MS_KEY
init|=
literal|"hbase.procedure.store.region.flush.interval.ms"
decl_stmt|;
comment|// default to flush every 15 minutes, for safety
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_FLUSH_INTERVAL_MS
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|COMPACT_MIN_KEY
init|=
literal|"hbase.procedure.store.region.compact.min"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_COMPACT_MIN
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
name|Abortable
name|abortable
decl_stmt|;
specifier|private
specifier|final
name|HRegion
name|region
decl_stmt|;
comment|// as we can only count this outside the region's write/flush process so it is not accurate, but
comment|// it is enough.
specifier|private
specifier|final
name|AtomicLong
name|changesAfterLastFlush
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|flushSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|flushPerChanges
decl_stmt|;
specifier|private
specifier|final
name|long
name|flushIntervalMs
decl_stmt|;
specifier|private
specifier|final
name|int
name|compactMin
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|flushThread
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|flushLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|flushCond
init|=
name|flushLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|flushRequest
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|lastFlushTime
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|compactExecutor
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|compactLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|compactRequest
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
name|RegionFlusherAndCompactor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Abortable
name|abortable
parameter_list|,
name|HRegion
name|region
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|=
name|abortable
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|flushSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|FLUSH_SIZE_KEY
argument_list|,
name|DEFAULT_FLUSH_SIZE
argument_list|)
expr_stmt|;
name|flushPerChanges
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|FLUSH_PER_CHANGES_KEY
argument_list|,
name|DEFAULT_FLUSH_PER_CHANGES
argument_list|)
expr_stmt|;
name|flushIntervalMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|FLUSH_INTERVAL_MS_KEY
argument_list|,
name|DEFAULT_FLUSH_INTERVAL_MS
argument_list|)
expr_stmt|;
name|compactMin
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|COMPACT_MIN_KEY
argument_list|,
name|DEFAULT_COMPACT_MIN
argument_list|)
expr_stmt|;
name|flushThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
operator|::
name|flushLoop
argument_list|,
literal|"Procedure-Region-Store-Flusher"
argument_list|)
expr_stmt|;
name|flushThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|flushThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|compactExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"Procedure-Region-Store-Compactor"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Constructor flushSize={}, flushPerChanges={}, flushIntervalMs={}, "
operator|+
literal|"compactMin="
argument_list|,
name|flushSize
argument_list|,
name|flushPerChanges
argument_list|,
name|flushIntervalMs
argument_list|,
name|compactMin
argument_list|)
expr_stmt|;
block|}
comment|// inject our flush related configurations
specifier|static
name|void
name|setupConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|flushSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|FLUSH_SIZE_KEY
argument_list|,
name|DEFAULT_FLUSH_SIZE
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
name|flushSize
argument_list|)
expr_stmt|;
name|long
name|flushPerChanges
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|FLUSH_PER_CHANGES_KEY
argument_list|,
name|DEFAULT_FLUSH_PER_CHANGES
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HRegion
operator|.
name|MEMSTORE_FLUSH_PER_CHANGES
argument_list|,
name|flushPerChanges
argument_list|)
expr_stmt|;
name|long
name|flushIntervalMs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|FLUSH_INTERVAL_MS_KEY
argument_list|,
name|DEFAULT_FLUSH_INTERVAL_MS
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HRegion
operator|.
name|MEMSTORE_PERIODIC_FLUSH_INTERVAL
argument_list|,
name|flushIntervalMs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Injected flushSize={}, flushPerChanges={}, flushIntervalMs={}"
argument_list|,
name|flushSize
argument_list|,
name|flushPerChanges
argument_list|,
name|flushIntervalMs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compact
parameter_list|()
block|{
try|try
block|{
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to compact procedure store region"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|compactLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|needCompaction
argument_list|()
condition|)
block|{
name|compactExecutor
operator|.
name|execute
argument_list|(
name|this
operator|::
name|compact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compactRequest
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|compactLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|needCompaction
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|region
operator|.
name|getStores
argument_list|()
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
operator|>=
name|compactMin
return|;
block|}
specifier|private
name|void
name|flushLoop
parameter_list|()
block|{
name|lastFlushTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|closed
condition|)
block|{
name|flushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|flushRequest
condition|)
block|{
name|long
name|waitTimeMs
init|=
name|lastFlushTime
operator|+
name|flushIntervalMs
operator|-
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|waitTimeMs
operator|<=
literal|0
condition|)
block|{
name|flushRequest
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|flushCond
operator|.
name|await
argument_list|(
name|waitTimeMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
name|flushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
assert|assert
name|flushRequest
assert|;
name|changesAfterLastFlush
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lastFlushTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Failed to flush procedure store region, aborting..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|abortable
operator|.
name|abort
argument_list|(
literal|"Failed to flush procedure store region"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|compactLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|compactRequest
operator|&&
name|needCompaction
argument_list|()
condition|)
block|{
name|compactRequest
operator|=
literal|true
expr_stmt|;
name|compactExecutor
operator|.
name|execute
argument_list|(
name|this
operator|::
name|compact
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|compactLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|flushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// reset the flushRequest flag
if|if
condition|(
operator|!
name|shouldFlush
argument_list|(
name|changesAfterLastFlush
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|flushRequest
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|flushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|shouldFlush
parameter_list|(
name|long
name|changes
parameter_list|)
block|{
name|long
name|heapSize
init|=
name|region
operator|.
name|getMemStoreHeapSize
argument_list|()
decl_stmt|;
name|long
name|offHeapSize
init|=
name|region
operator|.
name|getMemStoreOffHeapSize
argument_list|()
decl_stmt|;
name|boolean
name|flush
init|=
name|heapSize
operator|+
name|offHeapSize
operator|>=
name|flushSize
operator|||
name|changes
operator|>
name|flushPerChanges
decl_stmt|;
if|if
condition|(
name|flush
operator|&&
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"shouldFlush totalMemStoreSize={}, flushSize={}, changes={}, flushPerChanges={}"
argument_list|,
name|heapSize
operator|+
name|offHeapSize
argument_list|,
name|flushSize
argument_list|,
name|changes
argument_list|,
name|flushPerChanges
argument_list|)
expr_stmt|;
block|}
return|return
name|flush
return|;
block|}
name|void
name|onUpdate
parameter_list|()
block|{
name|long
name|changes
init|=
name|changesAfterLastFlush
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldFlush
argument_list|(
name|changes
argument_list|)
condition|)
block|{
name|requestFlush
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|requestFlush
parameter_list|()
block|{
name|flushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|flushRequest
condition|)
block|{
return|return;
block|}
name|flushRequest
operator|=
literal|true
expr_stmt|;
name|flushCond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|flushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|flushThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|compactExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

