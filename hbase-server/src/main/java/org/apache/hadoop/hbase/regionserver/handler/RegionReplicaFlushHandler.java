begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RetryCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RetryCounterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ServerRegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionResponse
import|;
end_import

begin_comment
comment|/**  * HBASE-11580: With the async wal approach (HBASE-11568), the edits are not persisted to wal in  * secondary region replicas. This means that a secondary region replica can serve some edits from  * it's memstore that that is still not flushed from primary. We do not want to allow secondary  * region's seqId to go back in time, when this secondary region is opened elsewhere after a  * crash or region move. We will trigger a flush cache in the primary region replica and wait  * for observing a complete flush cycle before marking the region readsEnabled. This handler does  * the flushing of the primary region replica and ensures that regular region opening is not  * blocked while the secondary replica is blocked on flush.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionReplicaFlushHandler
extends|extends
name|EventHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionReplicaFlushHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AsyncClusterConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|HRegion
name|region
decl_stmt|;
specifier|public
name|RegionReplicaFlushHandler
parameter_list|(
name|Server
name|server
parameter_list|,
name|HRegion
name|region
parameter_list|)
block|{
name|super
argument_list|(
name|server
argument_list|,
name|EventType
operator|.
name|RS_REGION_REPLICA_FLUSH
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|server
operator|.
name|getAsyncClusterConnection
argument_list|()
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|()
throws|throws
name|IOException
block|{
name|triggerFlushInPrimaryRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|InterruptedIOException
operator|||
name|t
operator|instanceof
name|InterruptedException
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught throwable while processing event "
operator|+
name|eventType
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
name|server
operator|.
name|abort
argument_list|(
literal|"ServerAborting because a runtime exception was thrown"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// something fishy since we cannot flush the primary region until all retries (retries from
comment|// rpc times 35 trigger). We cannot close the region since there is no such mechanism to
comment|// close a region without master triggering it. We just abort the server for now.
name|server
operator|.
name|abort
argument_list|(
literal|"ServerAborting because an exception was thrown"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getRetriesCount
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|numRetries
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRetries
operator|>
literal|10
condition|)
block|{
name|int
name|mult
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER
argument_list|)
decl_stmt|;
name|numRetries
operator|=
name|numRetries
operator|/
name|mult
expr_stmt|;
comment|// reset if HRS has multiplied this already
block|}
return|return
name|numRetries
return|;
block|}
name|void
name|triggerFlushInPrimaryRegion
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|pause
init|=
name|connection
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_PAUSE
argument_list|)
decl_stmt|;
name|int
name|maxAttempts
init|=
name|getRetriesCount
argument_list|(
name|connection
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|RetryCounter
name|counter
init|=
operator|new
name|RetryCounterFactory
argument_list|(
name|maxAttempts
argument_list|,
operator|(
name|int
operator|)
name|pause
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to do an RPC to the primary region replica "
operator|+
name|ServerRegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" of region "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" to trigger a flush"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|region
operator|.
name|isClosing
argument_list|()
operator|&&
operator|!
name|region
operator|.
name|isClosed
argument_list|()
operator|&&
operator|!
name|server
operator|.
name|isAborted
argument_list|()
operator|&&
operator|!
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
comment|// TODO: flushRegion() is a blocking call waiting for the flush to complete. Ideally we
comment|// do not have to wait for the whole flush here, just initiate it.
name|FlushRegionResponse
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|FutureUtils
operator|.
name|get
argument_list|(
name|connection
operator|.
name|flush
argument_list|(
name|ServerRegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|TableNotFoundException
operator|||
name|FutureUtils
operator|.
name|get
argument_list|(
name|connection
operator|.
name|getAdmin
argument_list|()
operator|.
name|isTableDisabled
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|counter
operator|.
name|shouldRetry
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// The reason that why we need to retry here is that, the retry for asynchronous admin
comment|// request is much simpler than the normal operation, if we failed to locate the region once
comment|// then we will throw the exception out and will not try to relocate again. So here we need
comment|// to add some retries by ourselves to prevent shutting down the region server too
comment|// frequent...
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to trigger a flush of primary region replica {} of region {}, retry={}"
argument_list|,
name|ServerRegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|counter
operator|.
name|getAttemptTimes
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|counter
operator|.
name|sleepUntilNextRetry
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
continue|continue;
block|}
if|if
condition|(
name|response
operator|.
name|getFlushed
argument_list|()
condition|)
block|{
comment|// then we have to wait for seeing the flush entry. All reads will be rejected until we see
comment|// a complete flush cycle or replay a region open event
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully triggered a flush of primary region replica "
operator|+
name|ServerRegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" of region "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" Now waiting and blocking reads until observing a full flush cycle"
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|setReadsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|response
operator|.
name|hasWroteFlushWalMarker
argument_list|()
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|getWroteFlushWalMarker
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully triggered an empty flush marker(memstore empty) of primary "
operator|+
literal|"region replica "
operator|+
name|ServerRegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" of region "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" Now waiting and "
operator|+
literal|"blocking reads until observing a flush marker"
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|setReadsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// somehow we were not able to get the primary to write the flush request. It may be
comment|// closing or already flushing. Retry flush again after some sleep.
if|if
condition|(
operator|!
name|counter
operator|.
name|shouldRetry
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot cause primary to flush or drop a wal marker after "
operator|+
name|counter
operator|.
name|getAttemptTimes
argument_list|()
operator|+
literal|" retries. Failing opening of this region replica "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot cause primary replica {} to flush or drop a wal marker "
operator|+
literal|"for region replica {}, retry={}"
argument_list|,
name|ServerRegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|counter
operator|.
name|getAttemptTimes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// nothing to do. Are we dealing with an old server?
name|LOG
operator|.
name|warn
argument_list|(
literal|"Was not able to trigger a flush from primary region due to old server version? "
operator|+
literal|"Continuing to open the secondary region replica: "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|setReadsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
try|try
block|{
name|counter
operator|.
name|sleepUntilNextRetry
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

