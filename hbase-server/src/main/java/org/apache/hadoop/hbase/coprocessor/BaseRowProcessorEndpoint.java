begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RowProcessorProtos
operator|.
name|ProcessRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RowProcessorProtos
operator|.
name|ProcessResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RowProcessorProtos
operator|.
name|RowProcessorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RowProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  * This class demonstrates how to implement atomic read-modify-writes  * using {@link Region#processRowsWithLocks} and Coprocessor endpoints.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|abstract
class|class
name|BaseRowProcessorEndpoint
parameter_list|<
name|S
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
extends|extends
name|RowProcessorService
implements|implements
name|CoprocessorService
implements|,
name|Coprocessor
block|{
specifier|private
name|RegionCoprocessorEnvironment
name|env
decl_stmt|;
comment|/**    * Pass a processor to region to process multiple rows atomically.    *     * The RowProcessor implementations should be the inner classes of your    * RowProcessorEndpoint. This way the RowProcessor can be class-loaded with    * the Coprocessor endpoint together.    *    * See {@code TestRowProcessorEndpoint} for example.    *    * The request contains information for constructing processor     * (see {@link #constructRowProcessorFromRequest}. The processor object defines    * the read-modify-write procedure.    */
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ProcessRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|ProcessResponse
argument_list|>
name|done
parameter_list|)
block|{
name|ProcessResponse
name|resultProto
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RowProcessor
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|processor
init|=
name|constructRowProcessorFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Region
name|region
init|=
name|env
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|long
name|nonceGroup
init|=
name|request
operator|.
name|hasNonceGroup
argument_list|()
condition|?
name|request
operator|.
name|getNonceGroup
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
name|long
name|nonce
init|=
name|request
operator|.
name|hasNonce
argument_list|()
condition|?
name|request
operator|.
name|getNonce
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
name|region
operator|.
name|processRowsWithLocks
argument_list|(
name|processor
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
expr_stmt|;
name|T
name|result
init|=
name|processor
operator|.
name|getResult
argument_list|()
decl_stmt|;
name|ProcessResponse
operator|.
name|Builder
name|b
init|=
name|ProcessResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setRowProcessorResult
argument_list|(
name|result
operator|.
name|toByteString
argument_list|()
argument_list|)
expr_stmt|;
name|resultProto
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|resultProto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**    * Stores a reference to the coprocessor environment provided by the    * {@link org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost} from the region where this    * coprocessor is loaded.  Since this is a coprocessor endpoint, it always expects to be loaded    * on a table region, so always expects this to be an instance of    * {@link RegionCoprocessorEnvironment}.    * @param env the environment provided by the coprocessor host    * @throws IOException if the provided environment is not an instance of    * {@code RegionCoprocessorEnvironment}    */
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
name|this
operator|.
name|env
operator|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
literal|"Must be loaded on a table region!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// nothing to do
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|RowProcessor
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|constructRowProcessorFromRequest
parameter_list|(
name|ProcessRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|request
operator|.
name|getRowProcessorClassName
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
try|try
block|{
name|cls
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|RowProcessor
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|ci
init|=
operator|(
name|RowProcessor
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
operator|)
name|cls
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasRowProcessorInitializerMessageName
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|imn
init|=
name|Class
operator|.
name|forName
argument_list|(
name|request
operator|.
name|getRowProcessorInitializerMessageName
argument_list|()
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|m
decl_stmt|;
try|try
block|{
name|m
operator|=
name|imn
operator|.
name|getMethod
argument_list|(
literal|"parseFrom"
argument_list|,
name|ByteString
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|S
name|s
decl_stmt|;
try|try
block|{
name|s
operator|=
operator|(
name|S
operator|)
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|request
operator|.
name|getRowProcessorInitializerMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ci
operator|.
name|initialize
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|ci
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

