begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ArrayBackedTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompoundConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MasterSwitchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseMasterAndRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BulkLoadObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|EndpointObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|AccessControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WALEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CleanupBulkLoadRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|PrepareBulkLoadRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Quotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MiniBatchOperationInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|Superusers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SimpleMutableByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  * Provides basic authorization checks for data access and administrative  * operations.  *  *<p>  * {@code AccessController} performs authorization checks for HBase operations  * based on:  *</p>  *<ul>  *<li>the identity of the user performing the operation</li>  *<li>the scope over which the operation is performed, in increasing  *   specificity: global, table, column family, or qualifier</li>  *<li>the type of action being performed (as mapped to  *   {@link Permission.Action} values)</li>  *</ul>  *<p>  * If the authorization check fails, an {@link AccessDeniedException}  * will be thrown for the operation.  *</p>  *  *<p>  * To perform authorization checks, {@code AccessController} relies on the  * RpcServerEngine being loaded to provide  * the user identities for remote requests.  *</p>  *  *<p>  * The access control lists used for authorization can be manipulated via the  * exposed {@link AccessControlService} Interface implementation, and the associated  * {@code grant}, {@code revoke}, and {@code user_permission} HBase shell  * commands.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|AccessController
extends|extends
name|BaseMasterAndRegionObserver
implements|implements
name|RegionServerObserver
implements|,
name|AccessControlService
operator|.
name|Interface
implements|,
name|CoprocessorService
implements|,
name|EndpointObserver
implements|,
name|BulkLoadObserver
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AccessController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|AUDITLOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"SecurityLogger."
operator|+
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHECK_COVERING_PERM
init|=
literal|"check_covering_perm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TAG_CHECK_PASSED
init|=
literal|"tag_check_passed"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TRUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|TableAuthManager
name|authManager
init|=
literal|null
decl_stmt|;
comment|/** flags if we are running on a region of the _acl_ table */
name|boolean
name|aclRegion
init|=
literal|false
decl_stmt|;
comment|/** defined only for Endpoint implementation, so it can have way to    access region services */
specifier|private
name|RegionCoprocessorEnvironment
name|regionEnv
decl_stmt|;
comment|/** Mapping of scanner instances to the user who created them */
specifier|private
name|Map
argument_list|<
name|InternalScanner
argument_list|,
name|String
argument_list|>
name|scannerOwners
init|=
operator|new
name|MapMaker
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|makeMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|UserPermission
argument_list|>
argument_list|>
name|tableAcls
decl_stmt|;
comment|/** Provider for mapping principal names to Users */
specifier|private
name|UserProvider
name|userProvider
decl_stmt|;
comment|/** if we are active, usually true, only not true if "hbase.security.authorization"    has been set to false in site configuration */
name|boolean
name|authorizationEnabled
decl_stmt|;
comment|/** if we are able to support cell ACLs */
name|boolean
name|cellFeaturesEnabled
decl_stmt|;
comment|/** if we should check EXEC permissions */
name|boolean
name|shouldCheckExecPermission
decl_stmt|;
comment|/** if we should terminate access checks early as soon as table or CF grants     allow access; pre-0.98 compatible behavior */
name|boolean
name|compatibleEarlyTermination
decl_stmt|;
comment|/** if we have been successfully initialized */
specifier|private
specifier|volatile
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
comment|/** if the ACL table is available, only relevant in the master */
specifier|private
specifier|volatile
name|boolean
name|aclTabAvailable
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isAuthorizationSupported
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_AUTHORIZATION_CONF_KEY
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isCellAuthorizationSupported
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|isAuthorizationSupported
argument_list|(
name|conf
argument_list|)
operator|&&
operator|(
name|HFile
operator|.
name|getFormatVersion
argument_list|(
name|conf
argument_list|)
operator|>=
name|HFile
operator|.
name|MIN_FORMAT_VERSION_WITH_TAGS
operator|)
return|;
block|}
specifier|public
name|Region
name|getRegion
parameter_list|()
block|{
return|return
name|regionEnv
operator|!=
literal|null
condition|?
name|regionEnv
operator|.
name|getRegion
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|TableAuthManager
name|getAuthManager
parameter_list|()
block|{
return|return
name|authManager
return|;
block|}
name|void
name|initialize
parameter_list|(
name|RegionCoprocessorEnvironment
name|e
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Region
name|region
init|=
name|e
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|e
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
name|tables
init|=
name|AccessControlLists
operator|.
name|loadAll
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// For each table, write out the table's permissions to the respective
comment|// znode for that table.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
name|t
range|:
name|tables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|entry
init|=
name|t
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|t
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|serialized
init|=
name|AccessControlLists
operator|.
name|writePermissionsAsBytes
argument_list|(
name|perms
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|authManager
operator|.
name|getZKPermissionWatcher
argument_list|()
operator|.
name|writeToZookeeper
argument_list|(
name|entry
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Writes all table ACLs for the tables in the given Map up into ZooKeeper    * znodes.  This is called to synchronize ACL changes following {@code _acl_}    * table updates.    */
name|void
name|updateACL
parameter_list|(
name|RegionCoprocessorEnvironment
name|e
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|familyMap
parameter_list|)
block|{
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|entries
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|f
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|f
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_LIST_FAMILY
argument_list|,
literal|0
argument_list|,
name|AccessControlLists
operator|.
name|ACL_LIST_FAMILY
operator|.
name|length
argument_list|)
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ZKPermissionWatcher
name|zkw
init|=
name|this
operator|.
name|authManager
operator|.
name|getZKPermissionWatcher
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|entry
range|:
name|entries
control|)
block|{
try|try
block|{
try|try
init|(
name|Table
name|t
init|=
name|regionEnv
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|AccessControlLists
operator|.
name|getPermissions
argument_list|(
name|conf
argument_list|,
name|entry
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|byte
index|[]
name|serialized
init|=
name|AccessControlLists
operator|.
name|writePermissionsAsBytes
argument_list|(
name|perms
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|writeToZookeeper
argument_list|(
name|entry
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed updating permissions mirror for '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
argument_list|)
operator|+
literal|"'"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check the current user for authorization to perform a specific action    * against the given set of row data.    *    *<p>Note: Ordering of the authorization checks    * has been carefully optimized to short-circuit the most common requests    * and minimize the amount of processing required.</p>    *    * @param permRequest the action being requested    * @param e the coprocessor environment    * @param families the map of column families to qualifiers present in    * the request    * @return an authorization result    */
name|AuthResult
name|permissionGranted
parameter_list|(
name|String
name|request
parameter_list|,
name|User
name|user
parameter_list|,
name|Action
name|permRequest
parameter_list|,
name|RegionCoprocessorEnvironment
name|e
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|families
parameter_list|)
block|{
name|HRegionInfo
name|hri
init|=
name|e
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|hri
operator|.
name|getTable
argument_list|()
decl_stmt|;
comment|// 1. All users need read access to hbase:meta table.
comment|// this is a very common operation, so deal with it quickly.
if|if
condition|(
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
if|if
condition|(
name|permRequest
operator|==
name|Action
operator|.
name|READ
condition|)
block|{
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"All users allowed"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"No user associated with request!"
argument_list|,
literal|null
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|// 2. check for the table-level, if successful we can short-circuit
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|// 3. check permissions against the requested families
if|if
condition|(
name|families
operator|!=
literal|null
operator|&&
name|families
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// all families must pass
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|family
range|:
name|families
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// a) check for family level access
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
continue|continue;
comment|// family-level permission overrides per-qualifier
block|}
comment|// b) qualifier level access can still succeed
if|if
condition|(
operator|(
name|family
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|family
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Set
condition|)
block|{
comment|// for each qualifier of the family
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|familySet
init|=
operator|(
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|familySet
control|)
block|{
if|if
condition|(
operator|!
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|qualifier
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Failed qualifier check"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|makeFamilyMap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|qualifier
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
comment|// List<KeyValue>
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvList
init|=
operator|(
name|List
argument_list|<
name|KeyValue
argument_list|>
operator|)
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvList
control|)
block|{
if|if
condition|(
operator|!
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Failed qualifier check"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|makeFamilyMap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// no qualifiers and family-level check already failed
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Failed family check"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|makeFamilyMap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// all family checks passed
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"All family checks passed"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|// 4. no families to check and table level access failed
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"No families to check and table permission failed"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|/**    * Check the current user for authorization to perform a specific action    * against the given set of row data.    * @param opType the operation type    * @param user the user    * @param e the coprocessor environment    * @param families the map of column families to qualifiers present in    * the request    * @param actions the desired actions    * @return an authorization result    */
name|AuthResult
name|permissionGranted
parameter_list|(
name|OpType
name|opType
parameter_list|,
name|User
name|user
parameter_list|,
name|RegionCoprocessorEnvironment
name|e
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|families
parameter_list|,
name|Action
modifier|...
name|actions
parameter_list|)
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|actions
control|)
block|{
name|result
operator|=
name|permissionGranted
argument_list|(
name|opType
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
name|e
argument_list|,
name|families
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|logResult
parameter_list|(
name|AuthResult
name|result
parameter_list|)
block|{
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|InetAddress
name|remoteAddr
init|=
name|RpcServer
operator|.
name|getRemoteAddress
argument_list|()
decl_stmt|;
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"Access "
operator|+
operator|(
name|result
operator|.
name|isAllowed
argument_list|()
condition|?
literal|"allowed"
else|:
literal|"denied"
operator|)
operator|+
literal|" for user "
operator|+
operator|(
name|result
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|?
name|result
operator|.
name|getUser
argument_list|()
operator|.
name|getShortName
argument_list|()
else|:
literal|"UNKNOWN"
operator|)
operator|+
literal|"; reason: "
operator|+
name|result
operator|.
name|getReason
argument_list|()
operator|+
literal|"; remote address: "
operator|+
operator|(
name|remoteAddr
operator|!=
literal|null
condition|?
name|remoteAddr
else|:
literal|""
operator|)
operator|+
literal|"; request: "
operator|+
name|result
operator|.
name|getRequest
argument_list|()
operator|+
literal|"; context: "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the active user to which authorization checks should be applied.    * If we are in the context of an RPC call, the remote user is used,    * otherwise the currently logged in user is used.    */
specifier|private
name|User
name|getActiveUser
parameter_list|(
name|ObserverContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|ctx
operator|.
name|getCaller
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
comment|// for non-rpc handling, fallback to system user
name|user
operator|=
name|userProvider
operator|.
name|getCurrent
argument_list|()
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
comment|/**    * Authorizes that the current user has any of the given permissions for the    * given table, column family and column qualifier.    * @param tableName Table requested    * @param family Column family requested    * @param qualifier Column qualifier requested    * @throws IOException if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|private
name|void
name|requirePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has any of the given permissions for the    * given table, column family and column qualifier.    * @param tableName Table requested    * @param family Column family param    * @param qualifier Column qualifier param    * @throws IOException if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|private
name|void
name|requireTablePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has any of the given permissions to access the table.    *    * @param tableName Table requested    * @param permissions Actions being requested    * @throws IOException if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|private
name|void
name|requireAccess
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|hasAccess
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has global privileges for the given action.    * @param perm The action being requested    * @throws IOException if obtaining the current user fails    * @throws AccessDeniedException if authorization is denied    */
specifier|private
name|void
name|requirePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
name|requireGlobalPermission
argument_list|(
name|user
argument_list|,
name|request
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that the user has the given global permission. The generated    * audit log message will contain context information for the operation    * being authorized, based on the given parameters.    * @param perm Action being requested    * @param tableName Affected table name.    * @param familyMap Affected column families.    */
specifier|private
name|void
name|requireGlobalPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|perm
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Global check allowed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
name|tableName
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Global check failed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
name|tableName
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions for user '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' (global, action="
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Checks that the user has the given global permission. The generated    * audit log message will contain context information for the operation    * being authorized, based on the given parameters.    * @param perm Action being requested    * @param namespace    */
specifier|private
name|void
name|requireGlobalPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|authResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|perm
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Global check allowed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authResult
operator|.
name|getParams
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Global check failed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authResult
operator|.
name|getParams
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions for user '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' (global, action="
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Checks that the user has the given global or namespace permission.    * @param namespace    * @param permissions Actions being requested    */
specifier|public
name|void
name|requireNamespacePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|namespace
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Namespace permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks that the user has the given global or namespace permission.    * @param namespace    * @param permissions Actions being requested    */
specifier|public
name|void
name|requireNamespacePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|namespace
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Namespace permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns<code>true</code> if the current user is allowed the given action    * over at least one of the column qualifiers in the given column families.    */
specifier|private
name|boolean
name|hasFamilyQualifierPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|Action
name|perm
parameter_list|,
name|RegionCoprocessorEnvironment
name|env
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|hri
init|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|hri
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|familyMap
operator|!=
literal|null
operator|&&
name|familyMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// at least one family must be allowed
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|family
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|family
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|matchPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|qualifier
argument_list|,
name|perm
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|authManager
operator|.
name|matchPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|perm
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Empty family map passed for permission check"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
enum|enum
name|OpType
block|{
name|GET
argument_list|(
literal|"get"
argument_list|)
block|,
name|EXISTS
argument_list|(
literal|"exists"
argument_list|)
block|,
name|SCAN
argument_list|(
literal|"scan"
argument_list|)
block|,
name|PUT
argument_list|(
literal|"put"
argument_list|)
block|,
name|DELETE
argument_list|(
literal|"delete"
argument_list|)
block|,
name|CHECK_AND_PUT
argument_list|(
literal|"checkAndPut"
argument_list|)
block|,
name|CHECK_AND_DELETE
argument_list|(
literal|"checkAndDelete"
argument_list|)
block|,
name|INCREMENT_COLUMN_VALUE
argument_list|(
literal|"incrementColumnValue"
argument_list|)
block|,
name|APPEND
argument_list|(
literal|"append"
argument_list|)
block|,
name|INCREMENT
argument_list|(
literal|"increment"
argument_list|)
block|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|private
name|OpType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
comment|/**    * Determine if cell ACLs covered by the operation grant access. This is expensive.    * @return false if cell ACLs failed to grant access, true otherwise    * @throws IOException    */
specifier|private
name|boolean
name|checkCoveringPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|OpType
name|request
parameter_list|,
name|RegionCoprocessorEnvironment
name|e
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|long
name|opTs
parameter_list|,
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|cellFeaturesEnabled
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
name|cellGrants
init|=
literal|0
decl_stmt|;
name|long
name|latestCellTs
init|=
literal|0
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// Only in case of Put/Delete op, consider TS within cell (if set for individual cells).
comment|// When every cell, within a Mutation, can be linked with diff TS we can not rely on only one
comment|// version. We have to get every cell version and check its TS against the TS asked for in
comment|// Mutation and skip those Cells which is outside this Mutation TS.In case of Put, we have to
comment|// consider only one such passing cell. In case of Delete we have to consider all the cell
comment|// versions under this passing version. When Delete Mutation contains columns which are a
comment|// version delete just consider only one version for those column cells.
name|boolean
name|considerCellTs
init|=
operator|(
name|request
operator|==
name|OpType
operator|.
name|PUT
operator|||
name|request
operator|==
name|OpType
operator|.
name|DELETE
operator|)
decl_stmt|;
if|if
condition|(
name|considerCellTs
condition|)
block|{
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|diffCellTsFromOpTs
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|col
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// TODO: HBASE-7114 could possibly unify the collection type in family
comment|// maps so we would not need to do this
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Set
condition|)
block|{
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|set
init|=
operator|(
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
operator|||
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|byte
index|[]
name|qual
range|:
name|set
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|col
argument_list|,
name|qual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Cell
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// In case of family delete, a Cell will be added into the list with Qualifier as null.
for|for
control|(
name|Cell
name|cell
range|:
name|list
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|getQualifierLength
argument_list|()
operator|==
literal|0
operator|&&
operator|(
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
operator|||
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|Type
operator|.
name|DeleteFamilyVersion
operator|.
name|getCode
argument_list|()
operator|)
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|col
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|considerCellTs
condition|)
block|{
name|long
name|cellTs
init|=
name|cell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|latestCellTs
operator|=
name|Math
operator|.
name|max
argument_list|(
name|latestCellTs
argument_list|,
name|cellTs
argument_list|)
expr_stmt|;
name|diffCellTsFromOpTs
operator|=
name|diffCellTsFromOpTs
operator|||
operator|(
name|opTs
operator|!=
name|cellTs
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unhandled collection type "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// We want to avoid looking into the future. So, if the cells of the
comment|// operation specify a timestamp, or the operation itself specifies a
comment|// timestamp, then we use the maximum ts found. Otherwise, we bound
comment|// the Get to the current server time. We add 1 to the timerange since
comment|// the upper bound of a timerange is exclusive yet we need to examine
comment|// any cells found there inclusively.
name|long
name|latestTs
init|=
name|Math
operator|.
name|max
argument_list|(
name|opTs
argument_list|,
name|latestCellTs
argument_list|)
decl_stmt|;
if|if
condition|(
name|latestTs
operator|==
literal|0
operator|||
name|latestTs
operator|==
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|)
block|{
name|latestTs
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|latestTs
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// In case of Put operation we set to read all versions. This was done to consider the case
comment|// where columns are added with TS other than the Mutation TS. But normally this wont be the
comment|// case with Put. There no need to get all versions but get latest version only.
if|if
condition|(
operator|!
name|diffCellTsFromOpTs
operator|&&
name|request
operator|==
name|OpType
operator|.
name|PUT
condition|)
block|{
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Scanning for cells with "
operator|+
name|get
argument_list|)
expr_stmt|;
block|}
comment|// This Map is identical to familyMap. The key is a BR rather than byte[].
comment|// It will be easy to do gets over this new Map as we can create get keys over the Cell cf by
comment|// new SimpleByteRange(cell.familyArray, cell.familyOffset, cell.familyLen)
name|Map
argument_list|<
name|ByteRange
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|familyMap1
init|=
operator|new
name|HashMap
argument_list|<
name|ByteRange
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
name|familyMap1
operator|.
name|put
argument_list|(
operator|new
name|SimpleMutableByteRange
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
operator|(
name|List
argument_list|<
name|Cell
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|RegionScanner
name|scanner
init|=
name|getRegion
argument_list|(
name|e
argument_list|)
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Cell
name|prevCell
init|=
literal|null
decl_stmt|;
name|ByteRange
name|curFam
init|=
operator|new
name|SimpleMutableByteRange
argument_list|()
decl_stmt|;
name|boolean
name|curColAllVersions
init|=
operator|(
name|request
operator|==
name|OpType
operator|.
name|DELETE
operator|)
decl_stmt|;
name|long
name|curColCheckTs
init|=
name|opTs
decl_stmt|;
name|boolean
name|foundColumn
init|=
literal|false
decl_stmt|;
try|try
block|{
name|boolean
name|more
init|=
literal|false
decl_stmt|;
name|ScannerContext
name|scannerContext
init|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBatchLimit
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
do|do
block|{
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// scan with limit as 1 to hold down memory use on wide rows
name|more
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found cell "
operator|+
name|cell
argument_list|)
expr_stmt|;
block|}
name|boolean
name|colChange
init|=
name|prevCell
operator|==
literal|null
operator|||
operator|!
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|prevCell
argument_list|,
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|colChange
condition|)
name|foundColumn
operator|=
literal|false
expr_stmt|;
name|prevCell
operator|=
name|cell
expr_stmt|;
if|if
condition|(
operator|!
name|curColAllVersions
operator|&&
name|foundColumn
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|colChange
operator|&&
name|considerCellTs
condition|)
block|{
name|curFam
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cols
init|=
name|familyMap1
operator|.
name|get
argument_list|(
name|curFam
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|col
range|:
name|cols
control|)
block|{
comment|// null/empty qualifier is used to denote a Family delete. The TS and delete type
comment|// associated with this is applicable for all columns within the family. That is
comment|// why the below (col.getQualifierLength() == 0) check.
if|if
condition|(
operator|(
name|col
operator|.
name|getQualifierLength
argument_list|()
operator|==
literal|0
operator|&&
name|request
operator|==
name|OpType
operator|.
name|DELETE
operator|)
operator|||
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|cell
argument_list|,
name|col
argument_list|)
condition|)
block|{
name|byte
name|type
init|=
name|col
operator|.
name|getTypeByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|considerCellTs
condition|)
block|{
name|curColCheckTs
operator|=
name|col
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
comment|// For a Delete op we pass allVersions as true. When a Delete Mutation contains
comment|// a version delete for a column no need to check all the covering cells within
comment|// that column. Check all versions when Type is DeleteColumn or DeleteFamily
comment|// One version delete types are Delete/DeleteFamilyVersion
name|curColAllVersions
operator|=
operator|(
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
operator|==
name|type
operator|)
operator|||
operator|(
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
operator|==
name|type
operator|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|cell
operator|.
name|getTimestamp
argument_list|()
operator|>
name|curColCheckTs
condition|)
block|{
comment|// Just ignore this cell. This is not a covering cell.
continue|continue;
block|}
name|foundColumn
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|actions
control|)
block|{
comment|// Are there permissions for this user for the cell?
if|if
condition|(
operator|!
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|getTableName
argument_list|(
name|e
argument_list|)
argument_list|,
name|cell
argument_list|,
name|action
argument_list|)
condition|)
block|{
comment|// We can stop if the cell ACL denies access
return|return
literal|false
return|;
block|}
block|}
name|cellGrants
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
name|more
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while getting cells to calculate covering permission"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// We should not authorize unless we have found one or more cell ACLs that
comment|// grant access. This code is used to check for additional permissions
comment|// after no table or CF grants are found.
return|return
name|cellGrants
operator|>
literal|0
return|;
block|}
specifier|private
specifier|static
name|void
name|addCellPermissions
parameter_list|(
specifier|final
name|byte
index|[]
name|perms
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|familyMap
parameter_list|)
block|{
comment|// Iterate over the entries in the familyMap, replacing the cells therein
comment|// with new cells including the ACL data
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|e
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|newCells
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
comment|// Prepend the supplied perms in a new ACL tag to an update list of tags for the cell
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
decl_stmt|;
name|tags
operator|.
name|add
argument_list|(
operator|new
name|ArrayBackedTag
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TAG_TYPE
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagIterator
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|tagIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newCells
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|createCell
argument_list|(
name|cell
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This is supposed to be safe, won't CME
name|e
operator|.
name|setValue
argument_list|(
name|newCells
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Checks whether incoming cells contain any tag with type as ACL_TAG_TYPE. This tag
comment|// type is reserved and should not be explicitly set by user.
specifier|private
name|void
name|checkForReservedTagPresence
parameter_list|(
name|User
name|user
parameter_list|,
name|Mutation
name|m
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No need to check if we're not going to throw
if|if
condition|(
operator|!
name|authorizationEnabled
condition|)
block|{
name|m
operator|.
name|setAttribute
argument_list|(
name|TAG_CHECK_PASSED
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Superusers are allowed to store cells unconditionally.
if|if
condition|(
name|Superusers
operator|.
name|isSuperUser
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|m
operator|.
name|setAttribute
argument_list|(
name|TAG_CHECK_PASSED
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We already checked (prePut vs preBatchMutation)
if|if
condition|(
name|m
operator|.
name|getAttribute
argument_list|(
name|TAG_CHECK_PASSED
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|CellScanner
name|cellScanner
init|=
name|m
operator|.
name|cellScanner
argument_list|()
init|;
name|cellScanner
operator|.
name|advance
argument_list|()
condition|;
control|)
block|{
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsItr
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|cellScanner
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|tagsItr
operator|.
name|next
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlLists
operator|.
name|ACL_TAG_TYPE
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Mutation contains cell with reserved type tag"
argument_list|)
throw|;
block|}
block|}
block|}
name|m
operator|.
name|setAttribute
argument_list|(
name|TAG_CHECK_PASSED
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
comment|/* ---- MasterObserver implementation ---- */
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|CompoundConfiguration
name|conf
init|=
operator|new
name|CompoundConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|add
argument_list|(
name|env
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|authorizationEnabled
operator|=
name|isAuthorizationSupported
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authorizationEnabled
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The AccessController has been loaded with authorization checks disabled."
argument_list|)
expr_stmt|;
block|}
name|shouldCheckExecPermission
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|AccessControlConstants
operator|.
name|EXEC_PERMISSION_CHECKS_KEY
argument_list|,
name|AccessControlConstants
operator|.
name|DEFAULT_EXEC_PERMISSION_CHECKS
argument_list|)
expr_stmt|;
name|cellFeaturesEnabled
operator|=
operator|(
name|HFile
operator|.
name|getFormatVersion
argument_list|(
name|conf
argument_list|)
operator|>=
name|HFile
operator|.
name|MIN_FORMAT_VERSION_WITH_TAGS
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|cellFeaturesEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"A minimum HFile version of "
operator|+
name|HFile
operator|.
name|MIN_FORMAT_VERSION_WITH_TAGS
operator|+
literal|" is required to persist cell ACLs. Consider setting "
operator|+
name|HFile
operator|.
name|FORMAT_VERSION_KEY
operator|+
literal|" accordingly."
argument_list|)
expr_stmt|;
block|}
name|ZooKeeperWatcher
name|zk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|env
operator|instanceof
name|MasterCoprocessorEnvironment
condition|)
block|{
comment|// if running on HMaster
name|MasterCoprocessorEnvironment
name|mEnv
init|=
operator|(
name|MasterCoprocessorEnvironment
operator|)
name|env
decl_stmt|;
name|zk
operator|=
name|mEnv
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|env
operator|instanceof
name|RegionServerCoprocessorEnvironment
condition|)
block|{
name|RegionServerCoprocessorEnvironment
name|rsEnv
init|=
operator|(
name|RegionServerCoprocessorEnvironment
operator|)
name|env
decl_stmt|;
name|zk
operator|=
name|rsEnv
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
comment|// if running at region
name|regionEnv
operator|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
expr_stmt|;
name|conf
operator|.
name|addStringMap
argument_list|(
name|regionEnv
operator|.
name|getRegion
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|zk
operator|=
name|regionEnv
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
name|compatibleEarlyTermination
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|AccessControlConstants
operator|.
name|CF_ATTRIBUTE_EARLY_OUT
argument_list|,
name|AccessControlConstants
operator|.
name|DEFAULT_ATTRIBUTE_EARLY_OUT
argument_list|)
expr_stmt|;
block|}
comment|// set the user-provider.
name|this
operator|.
name|userProvider
operator|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|env
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// If zk is null or IOException while obtaining auth manager,
comment|// throw RuntimeException so that the coprocessor is unloaded.
if|if
condition|(
name|zk
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|authManager
operator|=
name|TableAuthManager
operator|.
name|getOrCreate
argument_list|(
name|zk
argument_list|,
name|env
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error obtaining TableAuthManager"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error obtaining TableAuthManager, zk found null."
argument_list|)
throw|;
block|}
name|tableAcls
operator|=
operator|new
name|MapMaker
argument_list|()
operator|.
name|weakValues
argument_list|()
operator|.
name|makeMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|authManager
operator|!=
literal|null
condition|)
block|{
name|TableAuthManager
operator|.
name|release
argument_list|(
name|authManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|families
init|=
name|desc
operator|.
name|getFamiliesKeys
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|familyMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|requireNamespacePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"createTable"
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|familyMap
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCompletedCreateTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|HTableDescriptor
name|desc
parameter_list|,
specifier|final
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
comment|// When AC is used, it should be configured as the 1st CP.
comment|// In Master, the table operations like create, are handled by a Thread pool but the max size
comment|// for this pool is 1. So if multiple CPs create tables on startup, these creations will happen
comment|// sequentially only.
comment|// Related code in HMaster#startServiceThreads
comment|// {code}
comment|//   // We depend on there being only one instance of this executor running
comment|//   // at a time. To do concurrency, would need fencing of enable/disable of
comment|//   // tables.
comment|//   this.service.startExecutorService(ExecutorType.MASTER_TABLE_OPERATIONS, 1);
comment|// {code}
comment|// In future if we change this pool to have more threads, then there is a chance for thread,
comment|// creating acl table, getting delayed and by that time another table creation got over and
comment|// this hook is getting called. In such a case, we will need a wait logic here which will
comment|// wait till the acl table is created.
if|if
condition|(
name|AccessControlLists
operator|.
name|isAclTable
argument_list|(
name|desc
argument_list|)
condition|)
block|{
name|this
operator|.
name|aclTabAvailable
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
operator|.
name|equals
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|aclTabAvailable
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not adding owner permission for table "
operator|+
name|desc
operator|.
name|getTableName
argument_list|()
operator|+
literal|". "
operator|+
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
operator|+
literal|" is not yet created. "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" should be configured as the first Coprocessor"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|owner
init|=
name|desc
operator|.
name|getOwnerString
argument_list|()
decl_stmt|;
comment|// default the table owner to current user, if not specified.
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
name|owner
operator|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
operator|.
name|getShortName
argument_list|()
expr_stmt|;
specifier|final
name|UserPermission
name|userperm
init|=
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|owner
argument_list|)
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
comment|// switch to the real hbase master user for doing the RPC on the ACL table
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlLists
operator|.
name|addUserPermission
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|userperm
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"deleteTable"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlLists
operator|.
name|removeTablePermissions
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|authManager
operator|.
name|getZKPermissionWatcher
argument_list|()
operator|.
name|deleteTableACLNode
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preTruncateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"truncateTable"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|UserPermission
argument_list|>
name|acls
init|=
name|AccessControlLists
operator|.
name|getUserTablePermissions
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|acls
operator|!=
literal|null
condition|)
block|{
name|tableAcls
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|acls
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postTruncateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
name|tableAcls
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UserPermission
name|perm
range|:
name|perms
control|)
block|{
name|AccessControlLists
operator|.
name|addUserPermission
argument_list|(
name|conf
argument_list|,
name|perm
argument_list|,
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|tableAcls
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"modifyTable"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// default the table owner to current user, if not specified.
specifier|final
name|String
name|owner
init|=
operator|(
name|htd
operator|.
name|getOwnerString
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|htd
operator|.
name|getOwnerString
argument_list|()
else|:
name|getActiveUser
argument_list|(
name|c
argument_list|)
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|UserPermission
name|userperm
init|=
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|owner
argument_list|)
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlLists
operator|.
name|addUserPermission
argument_list|(
name|conf
argument_list|,
name|userperm
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preAddColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|requireTablePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"addColumn"
argument_list|,
name|tableName
argument_list|,
name|columnFamily
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preModifyColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"modifyColumn"
argument_list|,
name|tableName
argument_list|,
name|columnFamily
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"deleteColumn"
argument_list|,
name|tableName
argument_list|,
name|columnFamily
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlLists
operator|.
name|removeTablePermissions
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preEnableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"enableTable"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDisableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_GLOBAL_NAME
argument_list|)
condition|)
block|{
comment|// We have to unconditionally disallow disable of the ACL table when we are installed,
comment|// even if not enforcing authorizations. We are still allowing grants and revocations,
comment|// checking permissions and logging audit messages, etc. If the ACL table is not
comment|// available we will fail random actions all over the place.
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Not allowed to disable "
operator|+
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
operator|+
literal|" table with AccessController installed"
argument_list|)
throw|;
block|}
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"disableTable"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preAbortProcedure
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procEnv
parameter_list|,
specifier|final
name|long
name|procId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|procEnv
operator|.
name|isProcedureOwner
argument_list|(
name|procId
argument_list|,
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|)
condition|)
block|{
comment|// If the user is not the procedure owner, then we should further probe whether
comment|// he can abort the procedure.
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"abortProcedure"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postAbortProcedure
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// There is nothing to do at this time after the procedure abort request was sent.
block|}
annotation|@
name|Override
specifier|public
name|void
name|preListProcedures
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We are delegating the authorization check to postListProcedures as we don't have
comment|// any concrete set of procedures to work with
block|}
annotation|@
name|Override
specifier|public
name|void
name|postListProcedures
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|ProcedureInfo
argument_list|>
name|procInfoList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|procInfoList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Retains only those which passes authorization checks, as the checks weren't done as part
comment|// of preListProcedures.
name|Iterator
argument_list|<
name|ProcedureInfo
argument_list|>
name|itr
init|=
name|procInfoList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProcedureInfo
name|procInfo
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|ProcedureInfo
operator|.
name|isProcedureOwner
argument_list|(
name|procInfo
argument_list|,
name|user
argument_list|)
condition|)
block|{
comment|// If the user is not the procedure owner, then we should further probe whether
comment|// he can see the procedure.
name|requirePermission
argument_list|(
name|user
argument_list|,
literal|"listProcedures"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMove
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|srcServer
parameter_list|,
name|ServerName
name|destServer
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"move"
argument_list|,
name|region
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preAssign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"assign"
argument_list|,
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preUnassign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"unassign"
argument_list|,
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preRegionOffline
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"regionOffline"
argument_list|,
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preSetSplitOrMergeEnabled
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|boolean
name|newValue
parameter_list|,
specifier|final
name|MasterSwitchType
name|switchType
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"setSplitOrMergeEnabled"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postSetSplitOrMergeEnabled
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|boolean
name|newValue
parameter_list|,
specifier|final
name|MasterSwitchType
name|switchType
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preBalance
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"balance"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preBalanceSwitch
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|boolean
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"balanceSwitch"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
return|return
name|newValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preShutdown
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"shutdown"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preStopMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"stopMaster"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postStartMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// initialize the ACL storage table
name|AccessControlLists
operator|.
name|createACLTable
argument_list|(
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getMasterServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aclTabAvailable
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"snapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|hTableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preListSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|SnapshotDescriptionUtils
operator|.
name|isSnapshotOwner
argument_list|(
name|snapshot
argument_list|,
name|user
argument_list|)
condition|)
block|{
comment|// list it, if user is the owner of snapshot
name|AuthResult
name|result
init|=
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"listSnapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Snapshot owner check allowed"
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requirePermission
argument_list|(
name|user
argument_list|,
literal|"listSnapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCloneSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"cloneSnapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preRestoreSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|SnapshotDescriptionUtils
operator|.
name|isSnapshotOwner
argument_list|(
name|snapshot
argument_list|,
name|user
argument_list|)
condition|)
block|{
name|requirePermission
argument_list|(
name|user
argument_list|,
literal|"restoreSnapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|hTableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requirePermission
argument_list|(
name|user
argument_list|,
literal|"restoreSnapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|SnapshotDescriptionUtils
operator|.
name|isSnapshotOwner
argument_list|(
name|snapshot
argument_list|,
name|user
argument_list|)
condition|)
block|{
comment|// Snapshot owner is allowed to delete the snapshot
name|AuthResult
name|result
init|=
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"deleteSnapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Snapshot owner check allowed"
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requirePermission
argument_list|(
name|user
argument_list|,
literal|"deleteSnapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|requireGlobalPermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"createNamespace"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|requireGlobalPermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"deleteNamespace"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlLists
operator|.
name|removeNamespacePermissions
argument_list|(
name|conf
argument_list|,
name|namespace
argument_list|,
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|authManager
operator|.
name|getZKPermissionWatcher
argument_list|()
operator|.
name|deleteNamespaceACLNode
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|namespace
operator|+
literal|" entry deleted in "
operator|+
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
operator|+
literal|" table."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preModifyNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We require only global permission so that
comment|// a user with NS admin cannot altering namespace configurations. i.e. namespace quota
name|requireGlobalPermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"modifyNamespace"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetNamespaceDescriptor
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|requireNamespacePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"getNamespaceDescriptor"
argument_list|,
name|namespace
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postListNamespaceDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|descriptors
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Retains only those which passes authorization checks, as the checks weren't done as part
comment|// of preGetTableDescriptors.
name|Iterator
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|itr
init|=
name|descriptors
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NamespaceDescriptor
name|desc
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|requireNamespacePermission
argument_list|(
name|user
argument_list|,
literal|"listNamespaces"
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preTableFlush
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"flushTable"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
comment|/* ---- RegionObserver implementation ---- */
annotation|@
name|Override
specifier|public
name|void
name|preOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
specifier|final
name|Region
name|region
init|=
name|env
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"NULL region from RegionCoprocessorEnvironment in preOpen()"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HRegionInfo
name|regionInfo
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|checkSystemOrSuperUser
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"preOpen"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
block|{
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
specifier|final
name|Region
name|region
init|=
name|env
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"NULL region from RegionCoprocessorEnvironment in postOpen()"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|AccessControlLists
operator|.
name|isAclRegion
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|aclRegion
operator|=
literal|true
expr_stmt|;
comment|// When this region is under recovering state, initialize will be handled by postLogReplay
if|if
condition|(
operator|!
name|region
operator|.
name|isRecovering
argument_list|()
condition|)
block|{
try|try
block|{
name|initialize
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// if we can't obtain permissions, it's better to fail
comment|// than perform checks incorrectly
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to initialize permissions cache"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postLogReplay
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|aclRegion
condition|)
block|{
try|try
block|{
name|initialize
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// if we can't obtain permissions, it's better to fail
comment|// than perform checks incorrectly
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to initialize permissions cache"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preFlush
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"flush"
argument_list|,
name|getTableName
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSplit
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"split"
argument_list|,
name|getTableName
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSplit
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|splitRow
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"split"
argument_list|,
name|getTableName
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InternalScanner
name|preCompact
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Store
name|store
parameter_list|,
specifier|final
name|InternalScanner
name|scanner
parameter_list|,
specifier|final
name|ScanType
name|scanType
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"compact"
argument_list|,
name|getTableName
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
return|return
name|scanner
return|;
block|}
specifier|private
name|void
name|internalPreRead
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Query
name|query
parameter_list|,
name|OpType
name|opType
parameter_list|)
throws|throws
name|IOException
block|{
name|Filter
name|filter
init|=
name|query
operator|.
name|getFilter
argument_list|()
decl_stmt|;
comment|// Don't wrap an AccessControlFilter
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|instanceof
name|AccessControlFilter
condition|)
block|{
return|return;
block|}
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|opType
condition|)
block|{
case|case
name|GET
case|:
case|case
name|EXISTS
case|:
name|families
operator|=
operator|(
operator|(
name|Get
operator|)
name|query
operator|)
operator|.
name|getFamilyMap
argument_list|()
expr_stmt|;
break|break;
case|case
name|SCAN
case|:
name|families
operator|=
operator|(
operator|(
name|Scan
operator|)
name|query
operator|)
operator|.
name|getFamilyMap
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unhandled operation "
operator|+
name|opType
argument_list|)
throw|;
block|}
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|opType
argument_list|,
name|user
argument_list|,
name|env
argument_list|,
name|families
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
decl_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|TableName
name|table
init|=
name|getTableName
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ByteRange
argument_list|,
name|Integer
argument_list|>
name|cfVsMaxVersions
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|cfVsMaxVersions
operator|.
name|put
argument_list|(
operator|new
name|SimpleMutableByteRange
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|hcd
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|cellFeaturesEnabled
operator|||
name|compatibleEarlyTermination
condition|)
block|{
comment|// Old behavior: Scan with only qualifier checks if we have partial
comment|// permission. Backwards compatible behavior is to throw an
comment|// AccessDeniedException immediately if there are no grants for table
comment|// or CF or CF+qual. Only proceed with an injected filter if there are
comment|// grants for qualifiers. Otherwise we will fall through below and log
comment|// the result and throw an ADE. We may end up checking qualifier
comment|// grants three times (permissionGranted above, here, and in the
comment|// filter) but that's the price of backwards compatibility.
if|if
condition|(
name|hasFamilyQualifierPermission
argument_list|(
name|user
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|env
argument_list|,
name|families
argument_list|)
condition|)
block|{
name|authResult
operator|.
name|setAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|authResult
operator|.
name|setReason
argument_list|(
literal|"Access allowed with filter"
argument_list|)
expr_stmt|;
comment|// Only wrap the filter if we are enforcing authorizations
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
name|Filter
name|ourFilter
init|=
operator|new
name|AccessControlFilter
argument_list|(
name|authManager
argument_list|,
name|user
argument_list|,
name|table
argument_list|,
name|AccessControlFilter
operator|.
name|Strategy
operator|.
name|CHECK_TABLE_AND_CF_ONLY
argument_list|,
name|cfVsMaxVersions
argument_list|)
decl_stmt|;
comment|// wrap any existing filter
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|ourFilter
operator|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ourFilter
argument_list|,
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|opType
condition|)
block|{
case|case
name|GET
case|:
case|case
name|EXISTS
case|:
operator|(
operator|(
name|Get
operator|)
name|query
operator|)
operator|.
name|setFilter
argument_list|(
name|ourFilter
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCAN
case|:
operator|(
operator|(
name|Scan
operator|)
name|query
operator|)
operator|.
name|setFilter
argument_list|(
name|ourFilter
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unhandled operation "
operator|+
name|opType
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// New behavior: Any access we might be granted is more fine-grained
comment|// than whole table or CF. Simply inject a filter and return what is
comment|// allowed. We will not throw an AccessDeniedException. This is a
comment|// behavioral change since 0.96.
name|authResult
operator|.
name|setAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|authResult
operator|.
name|setReason
argument_list|(
literal|"Access allowed with filter"
argument_list|)
expr_stmt|;
comment|// Only wrap the filter if we are enforcing authorizations
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
name|Filter
name|ourFilter
init|=
operator|new
name|AccessControlFilter
argument_list|(
name|authManager
argument_list|,
name|user
argument_list|,
name|table
argument_list|,
name|AccessControlFilter
operator|.
name|Strategy
operator|.
name|CHECK_CELL_DEFAULT
argument_list|,
name|cfVsMaxVersions
argument_list|)
decl_stmt|;
comment|// wrap any existing filter
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|ourFilter
operator|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ourFilter
argument_list|,
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|opType
condition|)
block|{
case|case
name|GET
case|:
case|case
name|EXISTS
case|:
operator|(
operator|(
name|Get
operator|)
name|query
operator|)
operator|.
name|setFilter
argument_list|(
name|ourFilter
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCAN
case|:
operator|(
operator|(
name|Scan
operator|)
name|query
operator|)
operator|.
name|setFilter
argument_list|(
name|ourFilter
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unhandled operation "
operator|+
name|opType
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions for user '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' (table="
operator|+
name|table
operator|+
literal|", action=READ)"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|internalPreRead
argument_list|(
name|c
argument_list|,
name|get
argument_list|,
name|OpType
operator|.
name|GET
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preExists
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|boolean
name|exists
parameter_list|)
throws|throws
name|IOException
block|{
name|internalPreRead
argument_list|(
name|c
argument_list|,
name|get
argument_list|,
name|OpType
operator|.
name|EXISTS
argument_list|)
expr_stmt|;
return|return
name|exists
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|checkForReservedTagPresence
argument_list|(
name|user
argument_list|,
name|put
argument_list|)
expr_stmt|;
comment|// Require WRITE permission to the table, CF, or top visible value, if any.
comment|// NOTE: We don't need to check the permissions for any earlier Puts
comment|// because we treat the ACLs in each Put as timestamped like any other
comment|// HBase value. A new ACL in a new Put applies to that Put. It doesn't
comment|// change the ACL of any previous Put. This allows simple evolution of
comment|// security policy over time without requiring expensive updates.
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|families
init|=
name|put
operator|.
name|getFamilyCellMap
argument_list|()
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|OpType
operator|.
name|PUT
argument_list|,
name|user
argument_list|,
name|env
argument_list|,
name|families
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
operator|&&
operator|!
name|compatibleEarlyTermination
condition|)
block|{
name|put
operator|.
name|setAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Add cell ACLs from the operation to the cells themselves
name|byte
index|[]
name|bytes
init|=
name|put
operator|.
name|getAttribute
argument_list|(
name|AccessControlConstants
operator|.
name|OP_ATTRIBUTE_ACL
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
condition|)
block|{
name|addCellPermissions
argument_list|(
name|bytes
argument_list|,
name|put
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell ACLs cannot be persisted"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postPut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
block|{
if|if
condition|(
name|aclRegion
condition|)
block|{
name|updateACL
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|put
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
comment|// An ACL on a delete is useless, we shouldn't allow it
if|if
condition|(
name|delete
operator|.
name|getAttribute
argument_list|(
name|AccessControlConstants
operator|.
name|OP_ATTRIBUTE_ACL
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"ACL on delete has no effect: "
operator|+
name|delete
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Require WRITE permissions on all cells covered by the delete. Unlike
comment|// for Puts we need to check all visible prior versions, because a major
comment|// compaction could remove them. If the user doesn't have permission to
comment|// overwrite any of the visible versions ('visible' defined as not covered
comment|// by a tombstone already) then we have to disallow this operation.
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|families
init|=
name|delete
operator|.
name|getFamilyCellMap
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|OpType
operator|.
name|DELETE
argument_list|,
name|user
argument_list|,
name|env
argument_list|,
name|families
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
operator|&&
operator|!
name|compatibleEarlyTermination
condition|)
block|{
name|delete
operator|.
name|setAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preBatchMutate
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cellFeaturesEnabled
operator|&&
operator|!
name|compatibleEarlyTermination
condition|)
block|{
name|TableName
name|table
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|miniBatchOp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Mutation
name|m
init|=
name|miniBatchOp
operator|.
name|getOperation
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// We have a failure with table, cf and q perm checks and now giving a chance for cell
comment|// perm check
name|OpType
name|opType
decl_stmt|;
if|if
condition|(
name|m
operator|instanceof
name|Put
condition|)
block|{
name|checkForReservedTagPresence
argument_list|(
name|user
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|opType
operator|=
name|OpType
operator|.
name|PUT
expr_stmt|;
block|}
else|else
block|{
name|opType
operator|=
name|OpType
operator|.
name|DELETE
expr_stmt|;
block|}
name|AuthResult
name|authResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|checkCoveringPermission
argument_list|(
name|user
argument_list|,
name|opType
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|m
operator|.
name|getRow
argument_list|()
argument_list|,
name|m
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|,
name|m
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|opType
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|,
name|table
argument_list|,
name|m
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|opType
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|,
name|table
argument_list|,
name|m
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|aclRegion
condition|)
block|{
name|updateACL
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|delete
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preCheckAndPut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareFilter
operator|.
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|checkForReservedTagPresence
argument_list|(
name|user
argument_list|,
name|put
argument_list|)
expr_stmt|;
comment|// Require READ and WRITE permissions on the table, CF, and KV to update
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
name|makeFamilyMap
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|OpType
operator|.
name|CHECK_AND_PUT
argument_list|,
name|user
argument_list|,
name|env
argument_list|,
name|families
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
operator|&&
operator|!
name|compatibleEarlyTermination
condition|)
block|{
name|put
operator|.
name|setAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|byte
index|[]
name|bytes
init|=
name|put
operator|.
name|getAttribute
argument_list|(
name|AccessControlConstants
operator|.
name|OP_ATTRIBUTE_ACL
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
condition|)
block|{
name|addCellPermissions
argument_list|(
name|bytes
argument_list|,
name|put
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell ACLs cannot be persisted"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preCheckAndPutAfterRowLock
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareFilter
operator|.
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|put
operator|.
name|getAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// We had failure with table, cf and q perm checks and now giving a chance for cell
comment|// perm check
name|TableName
name|table
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
name|makeFamilyMap
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
literal|null
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkCoveringPermission
argument_list|(
name|user
argument_list|,
name|OpType
operator|.
name|CHECK_AND_PUT
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|row
argument_list|,
name|families
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|OpType
operator|.
name|CHECK_AND_PUT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|table
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|OpType
operator|.
name|CHECK_AND_PUT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|table
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preCheckAndDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareFilter
operator|.
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
comment|// An ACL on a delete is useless, we shouldn't allow it
if|if
condition|(
name|delete
operator|.
name|getAttribute
argument_list|(
name|AccessControlConstants
operator|.
name|OP_ATTRIBUTE_ACL
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"ACL on checkAndDelete has no effect: "
operator|+
name|delete
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Require READ and WRITE permissions on the table, CF, and the KV covered
comment|// by the delete
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
name|makeFamilyMap
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|OpType
operator|.
name|CHECK_AND_DELETE
argument_list|,
name|user
argument_list|,
name|env
argument_list|,
name|families
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
operator|&&
operator|!
name|compatibleEarlyTermination
condition|)
block|{
name|delete
operator|.
name|setAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preCheckAndDeleteAfterRowLock
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareFilter
operator|.
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|delete
operator|.
name|getAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// We had failure with table, cf and q perm checks and now giving a chance for cell
comment|// perm check
name|TableName
name|table
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
name|makeFamilyMap
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
literal|null
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkCoveringPermission
argument_list|(
name|user
argument_list|,
name|OpType
operator|.
name|CHECK_AND_DELETE
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|row
argument_list|,
name|families
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|OpType
operator|.
name|CHECK_AND_DELETE
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|table
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|OpType
operator|.
name|CHECK_AND_DELETE
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|table
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|preIncrementColumnValue
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Require WRITE permission to the table, CF, and the KV to be replaced by the
comment|// incremented value
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
name|makeFamilyMap
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|OpType
operator|.
name|INCREMENT_COLUMN_VALUE
argument_list|,
name|user
argument_list|,
name|env
argument_list|,
name|families
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
operator|&&
name|cellFeaturesEnabled
operator|&&
operator|!
name|compatibleEarlyTermination
condition|)
block|{
name|authResult
operator|.
name|setAllowed
argument_list|(
name|checkCoveringPermission
argument_list|(
name|user
argument_list|,
name|OpType
operator|.
name|INCREMENT_COLUMN_VALUE
argument_list|,
name|env
argument_list|,
name|row
argument_list|,
name|families
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|authResult
operator|.
name|setReason
argument_list|(
literal|"Covering cell set"
argument_list|)
expr_stmt|;
block|}
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preAppend
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|checkForReservedTagPresence
argument_list|(
name|user
argument_list|,
name|append
argument_list|)
expr_stmt|;
comment|// Require WRITE permission to the table, CF, and the KV to be appended
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|families
init|=
name|append
operator|.
name|getFamilyCellMap
argument_list|()
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|OpType
operator|.
name|APPEND
argument_list|,
name|user
argument_list|,
name|env
argument_list|,
name|families
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
operator|&&
operator|!
name|compatibleEarlyTermination
condition|)
block|{
name|append
operator|.
name|setAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|byte
index|[]
name|bytes
init|=
name|append
operator|.
name|getAttribute
argument_list|(
name|AccessControlConstants
operator|.
name|OP_ATTRIBUTE_ACL
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
condition|)
block|{
name|addCellPermissions
argument_list|(
name|bytes
argument_list|,
name|append
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell ACLs cannot be persisted"
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preAppendAfterRowLock
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|append
operator|.
name|getAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// We had failure with table, cf and q perm checks and now giving a chance for cell
comment|// perm check
name|TableName
name|table
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|AuthResult
name|authResult
init|=
literal|null
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkCoveringPermission
argument_list|(
name|user
argument_list|,
name|OpType
operator|.
name|APPEND
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|append
operator|.
name|getRow
argument_list|()
argument_list|,
name|append
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|OpType
operator|.
name|APPEND
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|,
name|table
argument_list|,
name|append
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|OpType
operator|.
name|APPEND
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|,
name|table
argument_list|,
name|append
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preIncrement
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|checkForReservedTagPresence
argument_list|(
name|user
argument_list|,
name|increment
argument_list|)
expr_stmt|;
comment|// Require WRITE permission to the table, CF, and the KV to be replaced by
comment|// the incremented value
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|families
init|=
name|increment
operator|.
name|getFamilyCellMap
argument_list|()
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|OpType
operator|.
name|INCREMENT
argument_list|,
name|user
argument_list|,
name|env
argument_list|,
name|families
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
operator|&&
operator|!
name|compatibleEarlyTermination
condition|)
block|{
name|increment
operator|.
name|setAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|byte
index|[]
name|bytes
init|=
name|increment
operator|.
name|getAttribute
argument_list|(
name|AccessControlConstants
operator|.
name|OP_ATTRIBUTE_ACL
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cellFeaturesEnabled
condition|)
block|{
name|addCellPermissions
argument_list|(
name|bytes
argument_list|,
name|increment
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell ACLs cannot be persisted"
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preIncrementAfterRowLock
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|increment
operator|.
name|getAttribute
argument_list|(
name|CHECK_COVERING_PERM
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// We had failure with table, cf and q perm checks and now giving a chance for cell
comment|// perm check
name|TableName
name|table
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|AuthResult
name|authResult
init|=
literal|null
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkCoveringPermission
argument_list|(
name|user
argument_list|,
name|OpType
operator|.
name|INCREMENT
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|increment
operator|.
name|getRow
argument_list|()
argument_list|,
name|increment
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|,
name|increment
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|OpType
operator|.
name|INCREMENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|,
name|table
argument_list|,
name|increment
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|OpType
operator|.
name|INCREMENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Covering cell set"
argument_list|,
name|user
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|,
name|table
argument_list|,
name|increment
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|authResult
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|postMutationBeforeWAL
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|MutationType
name|opType
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|Cell
name|oldCell
parameter_list|,
name|Cell
name|newCell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If the HFile version is insufficient to persist tags, we won't have any
comment|// work to do here
if|if
condition|(
operator|!
name|cellFeaturesEnabled
condition|)
block|{
return|return
name|newCell
return|;
block|}
comment|// Collect any ACLs from the old cell
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|aclTags
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldCell
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagIterator
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|oldCell
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
name|tagIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|!=
name|AccessControlLists
operator|.
name|ACL_TAG_TYPE
condition|)
block|{
comment|// Not an ACL tag, just carry it through
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Carrying forward tag from "
operator|+
name|oldCell
operator|+
literal|": type "
operator|+
name|tag
operator|.
name|getType
argument_list|()
operator|+
literal|" length "
operator|+
name|tag
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tags
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aclTags
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Do we have an ACL on the operation?
name|byte
index|[]
name|aclBytes
init|=
name|mutation
operator|.
name|getACL
argument_list|()
decl_stmt|;
if|if
condition|(
name|aclBytes
operator|!=
literal|null
condition|)
block|{
comment|// Yes, use it
name|tags
operator|.
name|add
argument_list|(
operator|new
name|ArrayBackedTag
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TAG_TYPE
argument_list|,
name|aclBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No, use what we carried forward
if|if
condition|(
name|perms
operator|!=
literal|null
condition|)
block|{
comment|// TODO: If we collected ACLs from more than one tag we may have a
comment|// List<Permission> of size> 1, this can be collapsed into a single
comment|// Permission
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Carrying forward ACLs from "
operator|+
name|oldCell
operator|+
literal|": "
operator|+
name|perms
argument_list|)
expr_stmt|;
block|}
name|tags
operator|.
name|addAll
argument_list|(
name|aclTags
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If we have no tags to add, just return
if|if
condition|(
name|tags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|newCell
return|;
block|}
name|Cell
name|rewriteCell
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|newCell
argument_list|,
name|tags
argument_list|)
decl_stmt|;
return|return
name|rewriteCell
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionScanner
name|preScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|internalPreRead
argument_list|(
name|c
argument_list|,
name|scan
argument_list|,
name|OpType
operator|.
name|SCAN
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionScanner
name|postScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|getShortName
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// store reference to scanner owner for later checks
name|scannerOwners
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preScannerNext
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|result
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
specifier|final
name|boolean
name|hasNext
parameter_list|)
throws|throws
name|IOException
block|{
name|requireScannerOwner
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preScannerClose
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|requireScannerOwner
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postScannerClose
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
comment|// clean up any associated owner mapping
name|scannerOwners
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|postScannerFilterRow
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|Cell
name|curRowCell
parameter_list|,
specifier|final
name|boolean
name|hasMore
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Impl in BaseRegionObserver might do unnecessary copy for Off heap backed Cells.
return|return
name|hasMore
return|;
block|}
comment|/**    * Verify, when servicing an RPC, that the caller is the scanner owner.    * If so, we assume that access control is correctly enforced based on    * the checks performed in preScannerOpen()    */
specifier|private
name|void
name|requireScannerOwner
parameter_list|(
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
operator|!
name|RpcServer
operator|.
name|isInRpcCallContext
argument_list|()
condition|)
return|return;
name|String
name|requestUserName
init|=
name|RpcServer
operator|.
name|getRequestUserName
argument_list|()
decl_stmt|;
name|String
name|owner
init|=
name|scannerOwners
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
name|owner
operator|!=
literal|null
operator|&&
operator|!
name|owner
operator|.
name|equals
argument_list|(
name|requestUserName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"User '"
operator|+
name|requestUserName
operator|+
literal|"' is not the scanner owner!"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verifies user has CREATE privileges on    * the Column Families involved in the bulkLoadHFile    * request. Specific Column Write privileges are presently    * ignored.    */
annotation|@
name|Override
specifier|public
name|void
name|preBulkLoadHFile
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|el
range|:
name|familyPaths
control|)
block|{
name|requirePermission
argument_list|(
name|user
argument_list|,
literal|"preBulkLoadHFile"
argument_list|,
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|el
operator|.
name|getFirst
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Authorization check for    * SecureBulkLoadProtocol.prepareBulkLoad()    * @param ctx the context    * @param request the request    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|prePrepareBulkLoad
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|PrepareBulkLoadRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|requireAccess
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"prePrepareBulkLoad"
argument_list|,
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Authorization security check for    * SecureBulkLoadProtocol.cleanupBulkLoad()    * @param ctx the context    * @param request the request    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|preCleanupBulkLoad
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|CleanupBulkLoadRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|requireAccess
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"preCleanupBulkLoad"
argument_list|,
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
comment|/* ---- EndpointObserver implementation ---- */
annotation|@
name|Override
specifier|public
name|Message
name|preEndpointInvocation
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Service
name|service
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Message
name|request
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Don't intercept calls to our own AccessControlService, we check for
comment|// appropriate permissions in the service handlers
if|if
condition|(
name|shouldCheckExecPermission
operator|&&
operator|!
operator|(
name|service
operator|instanceof
name|AccessControlService
operator|)
condition|)
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"invoke("
operator|+
name|service
operator|.
name|getDescriptorForType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|methodName
operator|+
literal|")"
argument_list|,
name|getTableName
argument_list|(
name|ctx
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|EXEC
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postEndpointInvocation
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Service
name|service
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Message
name|request
parameter_list|,
name|Message
operator|.
name|Builder
name|responseBuilder
parameter_list|)
throws|throws
name|IOException
block|{ }
comment|/* ---- Protobuf AccessControlService implementation ---- */
annotation|@
name|Override
specifier|public
name|void
name|grant
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AccessControlProtos
operator|.
name|GrantResponse
argument_list|>
name|done
parameter_list|)
block|{
specifier|final
name|UserPermission
name|perm
init|=
name|AccessControlUtil
operator|.
name|toUserPermission
argument_list|(
name|request
operator|.
name|getUserPermission
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlProtos
operator|.
name|GrantResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// verify it's only running at .acl.
if|if
condition|(
name|aclRegion
condition|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
literal|"AccessController not yet initialized"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received request to grant access permission "
operator|+
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|User
name|caller
init|=
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getUserPermission
argument_list|()
operator|.
name|getPermission
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Global
case|:
case|case
name|Table
case|:
name|requirePermission
argument_list|(
name|caller
argument_list|,
literal|"grant"
argument_list|,
name|perm
operator|.
name|getTableName
argument_list|()
argument_list|,
name|perm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|perm
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
break|break;
case|case
name|Namespace
case|:
name|requireNamespacePermission
argument_list|(
name|caller
argument_list|,
literal|"grant"
argument_list|,
name|perm
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
break|break;
block|}
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlLists
operator|.
name|addUserPermission
argument_list|(
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|perm
argument_list|,
name|regionEnv
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// audit log should store permission changes in addition to auth results
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"Granted permission "
operator|+
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
literal|"This method "
operator|+
literal|"can only execute at "
operator|+
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
operator|+
literal|" table."
argument_list|)
throw|;
block|}
name|response
operator|=
name|AccessControlProtos
operator|.
name|GrantResponse
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// pass exception back up
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|revoke
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AccessControlProtos
operator|.
name|RevokeResponse
argument_list|>
name|done
parameter_list|)
block|{
specifier|final
name|UserPermission
name|perm
init|=
name|AccessControlUtil
operator|.
name|toUserPermission
argument_list|(
name|request
operator|.
name|getUserPermission
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlProtos
operator|.
name|RevokeResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// only allowed to be called on _acl_ region
if|if
condition|(
name|aclRegion
condition|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
literal|"AccessController not yet initialized"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received request to revoke access permission "
operator|+
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|User
name|caller
init|=
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getUserPermission
argument_list|()
operator|.
name|getPermission
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Global
case|:
case|case
name|Table
case|:
name|requirePermission
argument_list|(
name|caller
argument_list|,
literal|"revoke"
argument_list|,
name|perm
operator|.
name|getTableName
argument_list|()
argument_list|,
name|perm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|perm
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
break|break;
case|case
name|Namespace
case|:
name|requireNamespacePermission
argument_list|(
name|caller
argument_list|,
literal|"revoke"
argument_list|,
name|perm
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
break|break;
block|}
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlLists
operator|.
name|removeUserPermission
argument_list|(
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|perm
argument_list|,
name|regionEnv
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// audit log should record all permission changes
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"Revoked permission "
operator|+
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
literal|"This method "
operator|+
literal|"can only execute at "
operator|+
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
operator|+
literal|" table."
argument_list|)
throw|;
block|}
name|response
operator|=
name|AccessControlProtos
operator|.
name|RevokeResponse
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// pass exception back up
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getUserPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
argument_list|>
name|done
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// only allowed to be called on _acl_ region
if|if
condition|(
name|aclRegion
condition|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
literal|"AccessController not yet initialized"
argument_list|)
throw|;
block|}
name|User
name|caller
init|=
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
condition|)
block|{
specifier|final
name|TableName
name|table
init|=
name|request
operator|.
name|hasTableName
argument_list|()
condition|?
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|requirePermission
argument_list|(
name|caller
argument_list|,
literal|"userPermissions"
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|perms
operator|=
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|List
argument_list|<
name|UserPermission
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|UserPermission
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AccessControlLists
operator|.
name|getUserTablePermissions
argument_list|(
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
condition|)
block|{
specifier|final
name|String
name|namespace
init|=
name|request
operator|.
name|getNamespaceName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
name|requireNamespacePermission
argument_list|(
name|caller
argument_list|,
literal|"userPermissions"
argument_list|,
name|namespace
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|perms
operator|=
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|List
argument_list|<
name|UserPermission
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|UserPermission
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AccessControlLists
operator|.
name|getUserNamespacePermissions
argument_list|(
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|namespace
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requirePermission
argument_list|(
name|caller
argument_list|,
literal|"userPermissions"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|perms
operator|=
name|User
operator|.
name|runAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|List
argument_list|<
name|UserPermission
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|UserPermission
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AccessControlLists
operator|.
name|getUserPermissions
argument_list|(
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Adding superusers explicitly to the result set as AccessControlLists do not store them.
comment|// Also using acl as table name to be inline  with the results of global admin and will
comment|// help in avoiding any leakage of information about being superusers.
for|for
control|(
name|String
name|user
range|:
name|Superusers
operator|.
name|getSuperUsers
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
operator|new
name|UserPermission
argument_list|(
name|user
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|=
name|AccessControlUtil
operator|.
name|buildGetUserPermissionsResponse
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
literal|"This method "
operator|+
literal|"can only execute at "
operator|+
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
operator|+
literal|" table."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// pass exception back up
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlProtos
operator|.
name|CheckPermissionsRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AccessControlProtos
operator|.
name|CheckPermissionsResponse
argument_list|>
name|done
parameter_list|)
block|{
name|Permission
index|[]
name|permissions
init|=
operator|new
name|Permission
index|[
name|request
operator|.
name|getPermissionCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|getPermissionCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|permissions
index|[
name|i
index|]
operator|=
name|AccessControlUtil
operator|.
name|toPermission
argument_list|(
name|request
operator|.
name|getPermission
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|CheckPermissionsResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|User
name|user
init|=
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|regionEnv
operator|.
name|getRegion
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|permission
operator|instanceof
name|TablePermission
condition|)
block|{
comment|// Check table permissions
name|TablePermission
name|tperm
init|=
operator|(
name|TablePermission
operator|)
name|permission
decl_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|permission
operator|.
name|getActions
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|tperm
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"This method "
operator|+
literal|"can only execute at the table specified in TablePermission. "
operator|+
literal|"Table of the region:%s , requested table:%s"
argument_list|,
name|tableName
argument_list|,
name|tperm
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|tperm
operator|.
name|getFamily
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tperm
operator|.
name|getQualifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|tperm
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
name|familyMap
operator|.
name|put
argument_list|(
name|tperm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|familyMap
operator|.
name|put
argument_list|(
name|tperm
operator|.
name|getFamily
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|AuthResult
name|result
init|=
name|permissionGranted
argument_list|(
literal|"checkPermissions"
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
name|regionEnv
argument_list|,
name|familyMap
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
comment|// Even if passive we need to throw an exception here, we support checking
comment|// effective permissions, so throw unconditionally
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions (table="
operator|+
name|tableName
operator|+
operator|(
name|familyMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
literal|", family: "
operator|+
name|result
operator|.
name|toFamilyString
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|", action="
operator|+
name|action
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|// Check global permissions
for|for
control|(
name|Action
name|action
range|:
name|permission
operator|.
name|getActions
argument_list|()
control|)
block|{
name|AuthResult
name|result
decl_stmt|;
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|action
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"checkPermissions"
argument_list|,
literal|"Global action allowed"
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
literal|"checkPermissions"
argument_list|,
literal|"Global action denied"
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
comment|// Even if passive we need to throw an exception here, we support checking
comment|// effective permissions, so throw unconditionally
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions (action="
operator|+
name|action
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|response
operator|=
name|AccessControlProtos
operator|.
name|CheckPermissionsResponse
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|AccessControlProtos
operator|.
name|AccessControlService
operator|.
name|newReflectiveService
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|private
name|Region
name|getRegion
parameter_list|(
name|RegionCoprocessorEnvironment
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getRegion
argument_list|()
return|;
block|}
specifier|private
name|TableName
name|getTableName
parameter_list|(
name|RegionCoprocessorEnvironment
name|e
parameter_list|)
block|{
name|Region
name|region
init|=
name|e
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
return|return
name|getTableName
argument_list|(
name|region
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|TableName
name|getTableName
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
name|HRegionInfo
name|regionInfo
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|regionInfo
operator|.
name|getTable
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preClose
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|boolean
name|abortRequested
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"preClose"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSystemOrSuperUser
parameter_list|(
name|User
name|activeUser
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No need to check if we're not going to throw
if|if
condition|(
operator|!
name|authorizationEnabled
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|Superusers
operator|.
name|isSuperUser
argument_list|(
name|activeUser
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"User '"
operator|+
operator|(
name|activeUser
operator|!=
literal|null
condition|?
name|activeUser
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' is not system or super user."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preStopRegionServer
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"preStopRegionServer"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|makeFamilyMap
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
if|if
condition|(
name|family
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|familyMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|qualifier
operator|!=
literal|null
condition|?
name|ImmutableSet
operator|.
name|of
argument_list|(
name|qualifier
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|familyMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetTableDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNamesList
parameter_list|,
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We are delegating the authorization check to postGetTableDescriptors as we don't have
comment|// any concrete set of table names when a regex is present or the full list is requested.
if|if
condition|(
name|regex
operator|==
literal|null
operator|&&
name|tableNamesList
operator|!=
literal|null
operator|&&
operator|!
name|tableNamesList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Otherwise, if the requestor has ADMIN or CREATE privs for all listed tables, the
comment|// request can be granted.
name|MasterServices
name|masterServices
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getMasterServices
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNamesList
control|)
block|{
comment|// Skip checks for a table that does not exist
if|if
condition|(
operator|!
name|masterServices
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTablePresent
argument_list|(
name|tableName
argument_list|)
condition|)
continue|continue;
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"getTableDescriptors"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGetTableDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNamesList
parameter_list|,
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Skipping as checks in this case are already done by preGetTableDescriptors.
if|if
condition|(
name|regex
operator|==
literal|null
operator|&&
name|tableNamesList
operator|!=
literal|null
operator|&&
operator|!
name|tableNamesList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Retains only those which passes authorization checks, as the checks weren't done as part
comment|// of preGetTableDescriptors.
name|Iterator
argument_list|<
name|HTableDescriptor
argument_list|>
name|itr
init|=
name|descriptors
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HTableDescriptor
name|htd
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"getTableDescriptors"
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGetTableNames
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Retains only those which passes authorization checks.
name|Iterator
argument_list|<
name|HTableDescriptor
argument_list|>
name|itr
init|=
name|descriptors
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HTableDescriptor
name|htd
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|requireAccess
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"getTableNames"
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Action
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDispatchMerge
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|regionA
parameter_list|,
name|HRegionInfo
name|regionB
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"mergeRegions"
argument_list|,
name|regionA
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMerge
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Region
name|regionA
parameter_list|,
name|Region
name|regionB
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"mergeRegions"
argument_list|,
name|regionA
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postMerge
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Region
name|regionA
parameter_list|,
name|Region
name|regionB
parameter_list|,
name|Region
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|preMergeCommit
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Region
name|regionA
parameter_list|,
name|Region
name|regionB
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|metaEntries
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|postMergeCommit
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Region
name|regionA
parameter_list|,
name|Region
name|regionB
parameter_list|,
name|Region
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|preRollBackMerge
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Region
name|regionA
parameter_list|,
name|Region
name|regionB
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|postRollBackMerge
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Region
name|regionA
parameter_list|,
name|Region
name|regionB
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|preRollWALWriterRequest
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"preRollLogWriterRequest"
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postRollWALWriterRequest
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|preSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"setUserQuota"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"setUserTableQuota"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"setUserNamespaceQuota"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSetTableQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"setTableQuota"
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSetNamespaceQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"setNamespaceQuota"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReplicationEndpoint
name|postCreateReplicationEndPoint
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|ReplicationEndpoint
name|endpoint
parameter_list|)
block|{
return|return
name|endpoint
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preReplicateLogEntries
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
parameter_list|,
name|CellScanner
name|cells
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"replicateLogEntries"
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postReplicateLogEntries
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
parameter_list|,
name|CellScanner
name|cells
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preMoveServers
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|HostAndPort
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"moveServers"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMoveTables
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"moveTables"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preAddRSGroup
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"addRSGroup"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preRemoveRSGroup
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"removeRSGroup"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preBalanceRSGroup
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|(
name|ctx
argument_list|)
argument_list|,
literal|"balanceRSGroup"
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

