begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Provides basic authorization checks for data access and administrative  * operations.  *  *<p>  * {@code AccessController} performs authorization checks for HBase operations  * based on:  *<ul>  *<li>the identity of the user performing the operation</li>  *<li>the scope over which the operation is performed, in increasing  *   specificity: global, table, column family, or qualifier</li>  *<li>the type of action being performed (as mapped to  *   {@link Permission.Action} values)</li>  *</ul>  * If the authorization check fails, an {@link AccessDeniedException}  * will be thrown for the operation.  *</p>  *  *<p>  * To perform authorization checks, {@code AccessController} relies on the  * {@link org.apache.hadoop.hbase.ipc.SecureRpcEngine} being loaded to provide  * the user identities for remote requests.  *</p>  *  *<p>  * The access control lists used for authorization can be manipulated via the  * exposed {@link AccessControllerProtocol} implementation, and the associated  * {@code grant}, {@code revoke}, and {@code user_permission} HBase shell  * commands.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|AccessController
extends|extends
name|BaseRegionObserver
implements|implements
name|MasterObserver
implements|,
name|AccessControllerProtocol
block|{
comment|/**    * Represents the result of an authorization check for logging and error    * reporting.    */
specifier|private
specifier|static
class|class
name|AuthResult
block|{
specifier|private
specifier|final
name|boolean
name|allowed
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|table
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|family
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|qualifier
decl_stmt|;
specifier|private
specifier|final
name|Permission
operator|.
name|Action
name|action
decl_stmt|;
specifier|private
specifier|final
name|String
name|reason
decl_stmt|;
specifier|private
specifier|final
name|User
name|user
decl_stmt|;
specifier|public
name|AuthResult
parameter_list|(
name|boolean
name|allowed
parameter_list|,
name|String
name|reason
parameter_list|,
name|User
name|user
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
name|this
operator|.
name|allowed
operator|=
name|allowed
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllowed
parameter_list|()
block|{
return|return
name|allowed
return|;
block|}
specifier|public
name|User
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|public
name|String
name|getReason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
specifier|public
name|String
name|toContextString
parameter_list|()
block|{
return|return
literal|"(user="
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getName
argument_list|()
else|:
literal|"UNKNOWN"
operator|)
operator|+
literal|", "
operator|+
literal|"scope="
operator|+
operator|(
name|table
operator|==
literal|null
condition|?
literal|"GLOBAL"
else|:
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
operator|)
operator|+
literal|", "
operator|+
literal|"family="
operator|+
operator|(
name|family
operator|!=
literal|null
condition|?
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|", "
operator|+
literal|"qualifer="
operator|+
operator|(
name|qualifier
operator|!=
literal|null
condition|?
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|", "
operator|+
literal|"action="
operator|+
operator|(
name|action
operator|!=
literal|null
condition|?
name|action
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|")"
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"AuthResult"
argument_list|)
operator|.
name|append
argument_list|(
name|toContextString
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|AuthResult
name|allow
parameter_list|(
name|String
name|reason
parameter_list|,
name|User
name|user
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
return|return
operator|new
name|AuthResult
argument_list|(
literal|true
argument_list|,
name|reason
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AuthResult
name|allow
parameter_list|(
name|String
name|reason
parameter_list|,
name|User
name|user
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|,
name|byte
index|[]
name|table
parameter_list|)
block|{
return|return
operator|new
name|AuthResult
argument_list|(
literal|true
argument_list|,
name|reason
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AuthResult
name|deny
parameter_list|(
name|String
name|reason
parameter_list|,
name|User
name|user
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|,
name|byte
index|[]
name|table
parameter_list|)
block|{
return|return
operator|new
name|AuthResult
argument_list|(
literal|false
argument_list|,
name|reason
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AuthResult
name|deny
parameter_list|(
name|String
name|reason
parameter_list|,
name|User
name|user
parameter_list|,
name|Permission
operator|.
name|Action
name|action
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
return|return
operator|new
name|AuthResult
argument_list|(
literal|false
argument_list|,
name|reason
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AccessController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|AUDITLOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"SecurityLogger."
operator|+
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Version number for AccessControllerProtocol    */
specifier|private
specifier|static
specifier|final
name|long
name|PROTOCOL_VERSION
init|=
literal|1L
decl_stmt|;
name|TableAuthManager
name|authManager
init|=
literal|null
decl_stmt|;
comment|// flags if we are running on a region of the _acl_ table
name|boolean
name|aclRegion
init|=
literal|false
decl_stmt|;
comment|// defined only for Endpoint implementation, so it can have way to
comment|// access region services.
specifier|private
name|RegionCoprocessorEnvironment
name|regionEnv
decl_stmt|;
comment|/** Mapping of scanner instances to the user who created them */
specifier|private
name|Map
argument_list|<
name|InternalScanner
argument_list|,
name|String
argument_list|>
name|scannerOwners
init|=
operator|new
name|MapMaker
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|makeMap
argument_list|()
decl_stmt|;
name|void
name|initialize
parameter_list|(
name|RegionCoprocessorEnvironment
name|e
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HRegion
name|region
init|=
name|e
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
name|tables
init|=
name|AccessControlLists
operator|.
name|loadAll
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// For each table, write out the table's permissions to the respective
comment|// znode for that table.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
name|t
range|:
name|tables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|table
init|=
name|t
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|t
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|serialized
init|=
name|AccessControlLists
operator|.
name|writePermissionsAsBytes
argument_list|(
name|perms
argument_list|,
name|e
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|authManager
operator|.
name|getZKPermissionWatcher
argument_list|()
operator|.
name|writeToZookeeper
argument_list|(
name|table
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes all table ACLs for the tables in the given Map up into ZooKeeper    * znodes.  This is called to synchronize ACL changes following {@code _acl_}    * table updates.    */
name|void
name|updateACL
parameter_list|(
name|RegionCoprocessorEnvironment
name|e
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
parameter_list|)
block|{
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|tableSet
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|f
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
name|f
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_LIST_FAMILY
argument_list|,
literal|0
argument_list|,
name|AccessControlLists
operator|.
name|ACL_LIST_FAMILY
operator|.
name|length
argument_list|)
condition|)
block|{
name|tableSet
operator|.
name|add
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ZKPermissionWatcher
name|zkw
init|=
name|this
operator|.
name|authManager
operator|.
name|getZKPermissionWatcher
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|tableName
range|:
name|tableSet
control|)
block|{
try|try
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|serialized
init|=
name|AccessControlLists
operator|.
name|writePermissionsAsBytes
argument_list|(
name|perms
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|writeToZookeeper
argument_list|(
name|tableName
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed updating permissions mirror for '"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check the current user for authorization to perform a specific action    * against the given set of row data.    *    *<p>Note: Ordering of the authorization checks    * has been carefully optimized to short-circuit the most common requests    * and minimize the amount of processing required.</p>    *    * @param permRequest the action being requested    * @param e the coprocessor environment    * @param families the map of column families to qualifiers present in    * the request    * @return    */
name|AuthResult
name|permissionGranted
parameter_list|(
name|User
name|user
parameter_list|,
name|Permission
operator|.
name|Action
name|permRequest
parameter_list|,
name|RegionCoprocessorEnvironment
name|e
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|families
parameter_list|)
block|{
name|HRegionInfo
name|hri
init|=
name|e
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
name|hri
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// 1. All users need read access to .META. and -ROOT- tables.
comment|// this is a very common operation, so deal with it quickly.
if|if
condition|(
name|hri
operator|.
name|isRootRegion
argument_list|()
operator|||
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
if|if
condition|(
name|permRequest
operator|==
name|Permission
operator|.
name|Action
operator|.
name|READ
condition|)
block|{
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"All users allowed"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
literal|"No user associated with request!"
argument_list|,
literal|null
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|// Users with CREATE/ADMIN rights need to modify .META. and _acl_ table
comment|// e.g. When a new table is created a new entry in .META. is added,
comment|// so the user need to be allowed to write on it.
comment|// e.g. When a table is removed an entry is removed from .META. and _acl_
comment|// and the user need to be allowed to write on both tables.
if|if
condition|(
name|permRequest
operator|==
name|Permission
operator|.
name|Action
operator|.
name|WRITE
operator|&&
operator|(
name|hri
operator|.
name|isRootRegion
argument_list|()
operator|||
name|hri
operator|.
name|isMetaRegion
argument_list|()
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|AccessControlLists
operator|.
name|ACL_GLOBAL_NAME
argument_list|)
operator|)
operator|&&
operator|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
operator|||
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
operator|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|// 2. check for the table-level, if successful we can short-circuit
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|// 3. check permissions against the requested families
if|if
condition|(
name|families
operator|!=
literal|null
operator|&&
name|families
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// all families must pass
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|family
range|:
name|families
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// a) check for family level access
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
continue|continue;
comment|// family-level permission overrides per-qualifier
block|}
comment|// b) qualifier level access can still succeed
if|if
condition|(
operator|(
name|family
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|family
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Set
condition|)
block|{
comment|// for each qualifier of the family
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|familySet
init|=
operator|(
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|familySet
control|)
block|{
if|if
condition|(
operator|!
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|qualifier
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
literal|"Failed qualifier check"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|qualifier
argument_list|)
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
comment|// List<KeyValue>
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvList
init|=
operator|(
name|List
argument_list|<
name|KeyValue
argument_list|>
operator|)
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvList
control|)
block|{
if|if
condition|(
operator|!
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
literal|"Failed qualifier check"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// no qualifiers and family-level check already failed
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
literal|"Failed family check"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|// all family checks passed
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"All family checks passed"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|// 4. no families to check and table level access failed
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
literal|"No families to check and table permission failed"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|void
name|logResult
parameter_list|(
name|AuthResult
name|result
parameter_list|)
block|{
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|InetAddress
name|remoteAddr
init|=
literal|null
decl_stmt|;
name|RequestContext
name|ctx
init|=
name|RequestContext
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|remoteAddr
operator|=
name|ctx
operator|.
name|getRemoteAddress
argument_list|()
expr_stmt|;
block|}
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"Access "
operator|+
operator|(
name|result
operator|.
name|isAllowed
argument_list|()
condition|?
literal|"allowed"
else|:
literal|"denied"
operator|)
operator|+
literal|" for user "
operator|+
operator|(
name|result
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|?
name|result
operator|.
name|getUser
argument_list|()
operator|.
name|getShortName
argument_list|()
else|:
literal|"UNKNOWN"
operator|)
operator|+
literal|"; reason: "
operator|+
name|result
operator|.
name|getReason
argument_list|()
operator|+
literal|"; remote address: "
operator|+
operator|(
name|remoteAddr
operator|!=
literal|null
condition|?
name|remoteAddr
else|:
literal|""
operator|)
operator|+
literal|"; context: "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the active user to which authorization checks should be applied.    * If we are in the context of an RPC call, the remote user is used,    * otherwise the currently logged in user is used.    */
specifier|private
name|User
name|getActiveUser
parameter_list|()
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|RequestContext
operator|.
name|getRequestUser
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|RequestContext
operator|.
name|isInRequestContext
argument_list|()
condition|)
block|{
comment|// for non-rpc handling, fallback to system user
name|user
operator|=
name|User
operator|.
name|getCurrent
argument_list|()
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
comment|/**    * Authorizes that the current user has any of the given permissions for the    * given table, column family and column qualifier.    * @param tableName Table requested    * @param family Column family requested    * @param qualifier Column qualifier requested    * @throws IOException if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|private
name|void
name|requirePermission
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has global privileges for the given action.    * @param perm The action being requested    * @throws IOException if obtaining the current user fails    * @throws AccessDeniedException if authorization is denied    */
specifier|private
name|void
name|requirePermission
parameter_list|(
name|Permission
operator|.
name|Action
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|perm
argument_list|)
condition|)
block|{
name|logResult
argument_list|(
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"Global check allowed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logResult
argument_list|(
name|AuthResult
operator|.
name|deny
argument_list|(
literal|"Global check failed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions for user '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' (global, action="
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has permission to perform the given    * action on the set of table column families.    * @param perm Action that is required    * @param env The current coprocessor environment    * @param families The set of column families present/required in the request    * @throws AccessDeniedException if the authorization check failed    */
specifier|private
name|void
name|requirePermission
parameter_list|(
name|Permission
operator|.
name|Action
name|perm
parameter_list|,
name|RegionCoprocessorEnvironment
name|env
parameter_list|,
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|families
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a map of family-qualifier
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|familyMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|requirePermission
argument_list|(
name|perm
argument_list|,
name|env
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Authorizes that the current user has permission to perform the given    * action on the set of table column families.    * @param perm Action that is required    * @param env The current coprocessor environment    * @param families The map of column families-qualifiers.    * @throws AccessDeniedException if the authorization check failed    */
specifier|private
name|void
name|requirePermission
parameter_list|(
name|Permission
operator|.
name|Action
name|perm
parameter_list|,
name|RegionCoprocessorEnvironment
name|env
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
name|AuthResult
name|result
init|=
name|permissionGranted
argument_list|(
name|user
argument_list|,
name|perm
argument_list|,
name|env
argument_list|,
name|families
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|families
operator|!=
literal|null
operator|&&
name|families
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|familyName
range|:
name|families
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions (table="
operator|+
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|+
operator|(
operator|(
name|families
operator|!=
literal|null
operator|&&
name|families
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
literal|", family: "
operator|+
name|sb
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|", action="
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns<code>true</code> if the current user is allowed the given action    * over at least one of the column qualifiers in the given column families.    */
specifier|private
name|boolean
name|hasFamilyQualifierPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|Permission
operator|.
name|Action
name|perm
parameter_list|,
name|RegionCoprocessorEnvironment
name|env
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|hri
init|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
name|hri
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|familyMap
operator|!=
literal|null
operator|&&
name|familyMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// at least one family must be allowed
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|family
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|family
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|matchPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|qualifier
argument_list|,
name|perm
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|authManager
operator|.
name|matchPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|perm
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Empty family map passed for permission check"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/* ---- MasterObserver implementation ---- */
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if running on HMaster
if|if
condition|(
name|env
operator|instanceof
name|MasterCoprocessorEnvironment
condition|)
block|{
name|MasterCoprocessorEnvironment
name|e
init|=
operator|(
name|MasterCoprocessorEnvironment
operator|)
name|env
decl_stmt|;
name|this
operator|.
name|authManager
operator|=
name|TableAuthManager
operator|.
name|get
argument_list|(
name|e
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|e
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if running at region
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
name|regionEnv
operator|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|AccessControlLists
operator|.
name|isAclTable
argument_list|(
name|desc
argument_list|)
condition|)
block|{
name|String
name|owner
init|=
name|desc
operator|.
name|getOwnerString
argument_list|()
decl_stmt|;
comment|// default the table owner to current user, if not specified.
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
name|owner
operator|=
name|getActiveUser
argument_list|()
operator|.
name|getShortName
argument_list|()
expr_stmt|;
name|UserPermission
name|userperm
init|=
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|owner
argument_list|)
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlLists
operator|.
name|addUserPermission
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|userperm
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCreateTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|AccessControlLists
operator|.
name|removeTablePermissions
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preModifyTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|owner
init|=
name|htd
operator|.
name|getOwnerString
argument_list|()
decl_stmt|;
comment|// default the table owner to current user, if not specified.
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
name|owner
operator|=
name|getActiveUser
argument_list|()
operator|.
name|getShortName
argument_list|()
expr_stmt|;
name|UserPermission
name|userperm
init|=
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|owner
argument_list|)
argument_list|,
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlLists
operator|.
name|addUserPermission
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|userperm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postModifyTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preAddColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preAddColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postAddColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postAddColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preModifyColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preModifyColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postModifyColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postModifyColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|col
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|col
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|col
parameter_list|)
throws|throws
name|IOException
block|{
name|AccessControlLists
operator|.
name|removeTablePermissions
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|col
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preEnableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preEnableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postEnableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postEnableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preDisableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|AccessControlLists
operator|.
name|ACL_GLOBAL_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Not allowed to disable "
operator|+
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME_STR
operator|+
literal|" table."
argument_list|)
throw|;
block|}
name|requirePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDisableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postDisableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postDisableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preMove
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|srcServer
parameter_list|,
name|ServerName
name|destServer
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|region
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postMove
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|srcServer
parameter_list|,
name|ServerName
name|destServer
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preAssign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|regionInfo
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postAssign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preUnassign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|regionInfo
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postUnassign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preBalance
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postBalance
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|boolean
name|preBalanceSwitch
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|boolean
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
return|return
name|newValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postBalanceSwitch
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|boolean
name|oldValue
parameter_list|,
name|boolean
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preShutdown
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preStopMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postStartMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// initialize the ACL storage table
name|AccessControlLists
operator|.
name|init
argument_list|(
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getMasterServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* ---- RegionObserver implementation ---- */
annotation|@
name|Override
specifier|public
name|void
name|postOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
block|{
name|RegionCoprocessorEnvironment
name|e
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
specifier|final
name|HRegion
name|region
init|=
name|e
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"NULL region from RegionCoprocessorEnvironment in postOpen()"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|this
operator|.
name|authManager
operator|=
name|TableAuthManager
operator|.
name|get
argument_list|(
name|e
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// pass along as a RuntimeException, so that the coprocessor is unloaded
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error obtaining TableAuthManager"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
name|AccessControlLists
operator|.
name|isAclRegion
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|aclRegion
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|initialize
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// if we can't obtain permissions, it's better to fail
comment|// than perform checks incorrectly
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to initialize permissions cache"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preFlush
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getTableName
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSplit
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getTableName
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSplit
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|byte
index|[]
name|splitRow
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getTableName
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InternalScanner
name|preCompact
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|InternalScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getTableName
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
return|return
name|scanner
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCompactSelection
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|HStore
name|store
parameter_list|,
specifier|final
name|List
argument_list|<
name|StoreFile
argument_list|>
name|candidates
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|getTableName
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetClosestRowBefore
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
operator|(
name|family
operator|!=
literal|null
condition|?
name|Lists
operator|.
name|newArrayList
argument_list|(
name|family
argument_list|)
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGet
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*      if column family level checks fail, check for a qualifier level permission      in one of the families.  If it is present, then continue with the AccessControlFilter.       */
name|RegionCoprocessorEnvironment
name|e
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|User
name|requestUser
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|requestUser
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|e
argument_list|,
name|get
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasFamilyQualifierPermission
argument_list|(
name|requestUser
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|e
argument_list|,
name|get
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
condition|)
block|{
name|byte
index|[]
name|table
init|=
name|getTableName
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|AccessControlFilter
name|filter
init|=
operator|new
name|AccessControlFilter
argument_list|(
name|authManager
argument_list|,
name|requestUser
argument_list|,
name|table
argument_list|)
decl_stmt|;
comment|// wrap any existing filter
if|if
condition|(
name|get
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|FilterList
name|wrapper
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filter
argument_list|,
name|get
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
name|logResult
argument_list|(
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"Access allowed with filter"
argument_list|,
name|requestUser
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|authResult
operator|.
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions (table="
operator|+
name|e
operator|.
name|getRegion
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|", action=READ)"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// log auth success
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preExists
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|boolean
name|exists
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|get
operator|.
name|familySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exists
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|put
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postPut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
block|{
if|if
condition|(
name|aclRegion
condition|)
block|{
name|updateACL
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|put
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|delete
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|aclRegion
condition|)
block|{
name|updateACL
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|delete
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preCheckAndPut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareFilter
operator|.
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|familyMap
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|)
decl_stmt|;
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preCheckAndDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareFilter
operator|.
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|ByteArrayComparable
name|comparator
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|familyMap
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|)
decl_stmt|;
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|preIncrementColumnValue
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preAppend
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|append
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preIncrement
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
name|requirePermission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|c
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|increment
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionScanner
name|preScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*      if column family level checks fail, check for a qualifier level permission      in one of the families.  If it is present, then continue with the AccessControlFilter.       */
name|RegionCoprocessorEnvironment
name|e
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|e
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasFamilyQualifierPermission
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|e
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
condition|)
block|{
name|byte
index|[]
name|table
init|=
name|getTableName
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|AccessControlFilter
name|filter
init|=
operator|new
name|AccessControlFilter
argument_list|(
name|authManager
argument_list|,
name|user
argument_list|,
name|table
argument_list|)
decl_stmt|;
comment|// wrap any existing filter
if|if
condition|(
name|scan
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|FilterList
name|wrapper
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filter
argument_list|,
name|scan
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
name|logResult
argument_list|(
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"Access allowed with filter"
argument_list|,
name|user
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|authResult
operator|.
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no table/family level perms and no qualifier level perms, reject
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions for user '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' "
operator|+
literal|"for scanner open on table "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|getTableName
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// log success
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionScanner
name|postScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|getShortName
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// store reference to scanner owner for later checks
name|scannerOwners
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preScannerNext
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|result
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
specifier|final
name|boolean
name|hasNext
parameter_list|)
throws|throws
name|IOException
block|{
name|requireScannerOwner
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preScannerClose
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|requireScannerOwner
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postScannerClose
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
comment|// clean up any associated owner mapping
name|scannerOwners
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify, when servicing an RPC, that the caller is the scanner owner.    * If so, we assume that access control is correctly enforced based on    * the checks performed in preScannerOpen()    */
specifier|private
name|void
name|requireScannerOwner
parameter_list|(
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
name|RequestContext
operator|.
name|isInRequestContext
argument_list|()
condition|)
block|{
name|String
name|requestUserName
init|=
name|RequestContext
operator|.
name|getRequestUserName
argument_list|()
decl_stmt|;
name|String
name|owner
init|=
name|scannerOwners
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
operator|&&
operator|!
name|owner
operator|.
name|equals
argument_list|(
name|requestUserName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"User '"
operator|+
name|requestUserName
operator|+
literal|"' is not the scanner owner!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/* ---- AccessControllerProtocol implementation ---- */
comment|/*    * These methods are only allowed to be called against the _acl_ region(s).    * This will be restricted by both client side and endpoint implementations.    */
annotation|@
name|Override
specifier|public
name|void
name|grant
parameter_list|(
name|UserPermission
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
comment|// verify it's only running at .acl.
if|if
condition|(
name|aclRegion
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received request to grant access permission "
operator|+
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|requirePermission
argument_list|(
name|perm
operator|.
name|getTable
argument_list|()
argument_list|,
name|perm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|perm
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|AccessControlLists
operator|.
name|addUserPermission
argument_list|(
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// audit log should store permission changes in addition to auth results
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"Granted permission "
operator|+
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
literal|"This method "
operator|+
literal|"can only execute at "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
operator|+
literal|" table."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|grant
parameter_list|(
name|byte
index|[]
name|user
parameter_list|,
name|TablePermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|grant
argument_list|(
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|permission
operator|.
name|getTable
argument_list|()
argument_list|,
name|permission
operator|.
name|getFamily
argument_list|()
argument_list|,
name|permission
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|revoke
parameter_list|(
name|UserPermission
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
comment|// only allowed to be called on _acl_ region
if|if
condition|(
name|aclRegion
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received request to revoke access permission "
operator|+
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|requirePermission
argument_list|(
name|perm
operator|.
name|getTable
argument_list|()
argument_list|,
name|perm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|perm
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|AccessControlLists
operator|.
name|removeUserPermission
argument_list|(
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// audit log should record all permission changes
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"Revoked permission "
operator|+
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
literal|"This method "
operator|+
literal|"can only execute at "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
operator|+
literal|" table."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|revoke
parameter_list|(
name|byte
index|[]
name|user
parameter_list|,
name|TablePermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|revoke
argument_list|(
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|permission
operator|.
name|getTable
argument_list|()
argument_list|,
name|permission
operator|.
name|getFamily
argument_list|()
argument_list|,
name|permission
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// only allowed to be called on _acl_ region
if|if
condition|(
name|aclRegion
condition|)
block|{
name|requirePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
name|AccessControlLists
operator|.
name|getUserPermissions
argument_list|(
name|regionEnv
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|perms
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
literal|"This method "
operator|+
literal|"can only execute at "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
operator|+
literal|" table."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermissions
parameter_list|(
name|Permission
index|[]
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|regionEnv
operator|.
name|getRegion
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|permission
operator|instanceof
name|TablePermission
condition|)
block|{
name|TablePermission
name|tperm
init|=
operator|(
name|TablePermission
operator|)
name|permission
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|action
range|:
name|permission
operator|.
name|getActions
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|tperm
operator|.
name|getTable
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"This method "
operator|+
literal|"can only execute at the table specified in TablePermission. "
operator|+
literal|"Table of the region:%s , requested table:%s"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|tperm
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|tperm
operator|.
name|getFamily
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tperm
operator|.
name|getQualifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|familyMap
operator|.
name|put
argument_list|(
name|tperm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tperm
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|familyMap
operator|.
name|put
argument_list|(
name|tperm
operator|.
name|getFamily
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|requirePermission
argument_list|(
name|action
argument_list|,
name|regionEnv
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|action
range|:
name|permission
operator|.
name|getActions
argument_list|()
control|)
block|{
name|requirePermission
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PROTOCOL_VERSION
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|AccessControllerProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProtocolSignature
argument_list|(
name|PROTOCOL_VERSION
argument_list|,
literal|null
argument_list|)
return|;
block|}
throw|throw
operator|new
name|HBaseRPC
operator|.
name|UnknownProtocolException
argument_list|(
literal|"Unexpected protocol requested: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
specifier|private
name|byte
index|[]
name|getTableName
parameter_list|(
name|RegionCoprocessorEnvironment
name|e
parameter_list|)
block|{
name|HRegion
name|region
init|=
name|e
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|HRegionInfo
name|regionInfo
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|!=
literal|null
condition|)
block|{
name|tableName
operator|=
name|regionInfo
operator|.
name|getTableName
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tableName
return|;
block|}
block|}
end_class

end_unit

