begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Data structure to describe the distribution of HDFS blocks amount hosts  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HDFSBlocksDistribution
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HostAndWeight
argument_list|>
name|hostAndWeights
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|uniqueBlocksTotalWeight
init|=
literal|0
decl_stmt|;
comment|/**    * Stores the hostname and weight for that hostname.    *    * This is used when determining the physical locations of the blocks making    * up a region.    *    * To make a prioritized list of the hosts holding the most data of a region,    * this class is used to count the total weight for each host.  The weight is    * currently just the size of the file.    */
specifier|public
specifier|static
class|class
name|HostAndWeight
block|{
specifier|private
name|String
name|host
decl_stmt|;
specifier|private
name|long
name|weight
decl_stmt|;
comment|/**      * Constructor      * @param host the host name      * @param weight the weight      */
specifier|public
name|HostAndWeight
parameter_list|(
name|String
name|host
parameter_list|,
name|long
name|weight
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
block|}
comment|/**      * add weight      * @param weight the weight      */
specifier|public
name|void
name|addWeight
parameter_list|(
name|long
name|weight
parameter_list|)
block|{
name|this
operator|.
name|weight
operator|+=
name|weight
expr_stmt|;
block|}
comment|/**      * @return the host name      */
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * @return the weight      */
specifier|public
name|long
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
comment|/**      * comparator used to sort hosts based on weight      */
specifier|public
specifier|static
class|class
name|WeightComparator
implements|implements
name|Comparator
argument_list|<
name|HostAndWeight
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HostAndWeight
name|l
parameter_list|,
name|HostAndWeight
name|r
parameter_list|)
block|{
if|if
condition|(
name|l
operator|.
name|getWeight
argument_list|()
operator|==
name|r
operator|.
name|getWeight
argument_list|()
condition|)
block|{
return|return
name|l
operator|.
name|getHost
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
return|return
name|l
operator|.
name|getWeight
argument_list|()
operator|<
name|r
operator|.
name|getWeight
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
block|}
comment|/**    * Constructor    */
specifier|public
name|HDFSBlocksDistribution
parameter_list|()
block|{
name|this
operator|.
name|hostAndWeights
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HostAndWeight
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * @see java.lang.Object#toString()    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"number of unique hosts in the disribution="
operator|+
name|this
operator|.
name|hostAndWeights
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * add some weight to a list of hosts, update the value of unique block weight    * @param hosts the list of the host    * @param weight the weight    */
specifier|public
name|void
name|addHostsAndBlockWeight
parameter_list|(
name|String
index|[]
name|hosts
parameter_list|,
name|long
name|weight
parameter_list|)
block|{
if|if
condition|(
name|hosts
operator|==
literal|null
operator|||
name|hosts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"empty hosts"
argument_list|)
throw|;
block|}
name|addUniqueWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|hostname
range|:
name|hosts
control|)
block|{
name|addHostAndBlockWeight
argument_list|(
name|hostname
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * add some weight to the total unique weight    * @param weight the weight    */
specifier|private
name|void
name|addUniqueWeight
parameter_list|(
name|long
name|weight
parameter_list|)
block|{
name|uniqueBlocksTotalWeight
operator|+=
name|weight
expr_stmt|;
block|}
comment|/**    * add some weight to a specific host    * @param host the host name    * @param weight the weight    */
specifier|private
name|void
name|addHostAndBlockWeight
parameter_list|(
name|String
name|host
parameter_list|,
name|long
name|weight
parameter_list|)
block|{
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Passed hostname is null"
argument_list|)
throw|;
block|}
name|HostAndWeight
name|hostAndWeight
init|=
name|this
operator|.
name|hostAndWeights
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostAndWeight
operator|==
literal|null
condition|)
block|{
name|hostAndWeight
operator|=
operator|new
name|HostAndWeight
argument_list|(
name|host
argument_list|,
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostAndWeights
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|hostAndWeight
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hostAndWeight
operator|.
name|addWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the hosts and their weights    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HostAndWeight
argument_list|>
name|getHostAndWeights
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostAndWeights
return|;
block|}
comment|/**    * return the weight for a specific host, that will be the total bytes of all    * blocks on the host    * @param host the host name    * @return the weight of the given host    */
specifier|public
name|long
name|getWeight
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|long
name|weight
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|HostAndWeight
name|hostAndWeight
init|=
name|this
operator|.
name|hostAndWeights
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostAndWeight
operator|!=
literal|null
condition|)
block|{
name|weight
operator|=
name|hostAndWeight
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|weight
return|;
block|}
comment|/**    * @return the sum of all unique blocks' weight    */
specifier|public
name|long
name|getUniqueBlocksTotalWeight
parameter_list|()
block|{
return|return
name|uniqueBlocksTotalWeight
return|;
block|}
comment|/**    * return the locality index of a given host    * @param host the host name    * @return the locality index of the given host    */
specifier|public
name|float
name|getBlockLocalityIndex
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|float
name|localityIndex
init|=
literal|0
decl_stmt|;
name|HostAndWeight
name|hostAndWeight
init|=
name|this
operator|.
name|hostAndWeights
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostAndWeight
operator|!=
literal|null
operator|&&
name|uniqueBlocksTotalWeight
operator|!=
literal|0
condition|)
block|{
name|localityIndex
operator|=
operator|(
name|float
operator|)
name|hostAndWeight
operator|.
name|weight
operator|/
operator|(
name|float
operator|)
name|uniqueBlocksTotalWeight
expr_stmt|;
block|}
return|return
name|localityIndex
return|;
block|}
comment|/**    * This will add the distribution from input to this object    * @param otherBlocksDistribution the other hdfs blocks distribution    */
specifier|public
name|void
name|add
parameter_list|(
name|HDFSBlocksDistribution
name|otherBlocksDistribution
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|HostAndWeight
argument_list|>
name|otherHostAndWeights
init|=
name|otherBlocksDistribution
operator|.
name|getHostAndWeights
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HostAndWeight
argument_list|>
name|otherHostAndWeight
range|:
name|otherHostAndWeights
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addHostAndBlockWeight
argument_list|(
name|otherHostAndWeight
operator|.
name|getValue
argument_list|()
operator|.
name|host
argument_list|,
name|otherHostAndWeight
operator|.
name|getValue
argument_list|()
operator|.
name|weight
argument_list|)
expr_stmt|;
block|}
name|addUniqueWeight
argument_list|(
name|otherBlocksDistribution
operator|.
name|getUniqueBlocksTotalWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * return the sorted list of hosts in terms of their weights    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTopHosts
parameter_list|()
block|{
name|NavigableSet
argument_list|<
name|HostAndWeight
argument_list|>
name|orderedHosts
init|=
operator|new
name|TreeSet
argument_list|<
name|HostAndWeight
argument_list|>
argument_list|(
operator|new
name|HostAndWeight
operator|.
name|WeightComparator
argument_list|()
argument_list|)
decl_stmt|;
name|orderedHosts
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|hostAndWeights
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|topHosts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|orderedHosts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HostAndWeight
name|haw
range|:
name|orderedHosts
operator|.
name|descendingSet
argument_list|()
control|)
block|{
name|topHosts
operator|.
name|add
argument_list|(
name|haw
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|topHosts
return|;
block|}
block|}
end_class

end_unit

