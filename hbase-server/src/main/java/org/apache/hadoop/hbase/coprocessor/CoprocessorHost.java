begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CoprocessorClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SortedList
import|;
end_import

begin_comment
comment|/**  * Provides the common setup framework and runtime services for coprocessor  * invocation from HBase services.  * @param<C> type of specific coprocessor this host will handle  * @param<E> type of specific coprocessor environment this host requires.  * provides  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|abstract
class|class
name|CoprocessorHost
parameter_list|<
name|C
extends|extends
name|Coprocessor
parameter_list|,
name|E
extends|extends
name|CoprocessorEnvironment
parameter_list|<
name|C
parameter_list|>
parameter_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|REGION_COPROCESSOR_CONF_KEY
init|=
literal|"hbase.coprocessor.region.classes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REGIONSERVER_COPROCESSOR_CONF_KEY
init|=
literal|"hbase.coprocessor.regionserver.classes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USER_REGION_COPROCESSOR_CONF_KEY
init|=
literal|"hbase.coprocessor.user.region.classes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_COPROCESSOR_CONF_KEY
init|=
literal|"hbase.coprocessor.master.classes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WAL_COPROCESSOR_CONF_KEY
init|=
literal|"hbase.coprocessor.wal.classes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ABORT_ON_ERROR_KEY
init|=
literal|"hbase.coprocessor.abortonerror"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ABORT_ON_ERROR
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COPROCESSORS_ENABLED_CONF_KEY
init|=
literal|"hbase.coprocessor.enabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_COPROCESSORS_ENABLED
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USER_COPROCESSORS_ENABLED_CONF_KEY
init|=
literal|"hbase.coprocessor.user.enabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_USER_COPROCESSORS_ENABLED
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CoprocessorHost
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Abortable
name|abortable
decl_stmt|;
comment|/** Ordered set of loaded coprocessors with lock */
specifier|protected
specifier|final
name|SortedList
argument_list|<
name|E
argument_list|>
name|coprocEnvironments
init|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
operator|new
name|EnvironmentPriorityComparator
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
comment|// unique file prefix to use for local copies of jars when classloading
specifier|protected
name|String
name|pathPrefix
decl_stmt|;
specifier|protected
name|AtomicInteger
name|loadSequence
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|public
name|CoprocessorHost
parameter_list|(
name|Abortable
name|abortable
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|=
name|abortable
expr_stmt|;
name|this
operator|.
name|pathPrefix
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|/**    * Not to be confused with the per-object _coprocessors_ (above),    * coprocessorNames is static and stores the set of all coprocessors ever    * loaded by any thread in this JVM. It is strictly additive: coprocessors are    * added to coprocessorNames, by checkAndLoadInstance() but are never removed, since    * the intention is to preserve a history of all loaded coprocessors for    * diagnosis in case of server crash (HBASE-4014).    */
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|coprocessorNames
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getLoadedCoprocessors
parameter_list|()
block|{
synchronized|synchronized
init|(
name|coprocessorNames
init|)
block|{
return|return
operator|new
name|HashSet
argument_list|(
name|coprocessorNames
argument_list|)
return|;
block|}
block|}
comment|/**    * Used to create a parameter to the HServerLoad constructor so that    * HServerLoad can provide information about the coprocessors loaded by this    * regionserver.    * (HBASE-4070: Improve region server metrics to report loaded coprocessors    * to master).    */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getCoprocessors
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|returnValue
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|coprocEnvironments
control|)
block|{
name|returnValue
operator|.
name|add
argument_list|(
name|e
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
comment|/**    * Load system coprocessors once only. Read the class names from configuration.    * Called by constructor.    */
specifier|protected
name|void
name|loadSystemCoprocessors
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confKey
parameter_list|)
block|{
name|boolean
name|coprocessorsEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|COPROCESSORS_ENABLED_CONF_KEY
argument_list|,
name|DEFAULT_COPROCESSORS_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|coprocessorsEnabled
condition|)
block|{
return|return;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
decl_stmt|;
comment|// load default coprocessors from configure file
name|String
index|[]
name|defaultCPClasses
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|confKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultCPClasses
operator|==
literal|null
operator|||
name|defaultCPClasses
operator|.
name|length
operator|==
literal|0
condition|)
return|return;
name|int
name|priority
init|=
name|Coprocessor
operator|.
name|PRIORITY_SYSTEM
decl_stmt|;
for|for
control|(
name|String
name|className
range|:
name|defaultCPClasses
control|)
block|{
name|className
operator|=
name|className
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|findCoprocessor
argument_list|(
name|className
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// If already loaded will just continue
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempted duplicate loading of "
operator|+
name|className
operator|+
literal|"; skipped"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ClassLoader
name|cl
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
try|try
block|{
name|implClass
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
comment|// Add coprocessors as we go to guard against case where a coprocessor is specified twice
comment|// in the configuration
name|E
name|env
init|=
name|checkAndLoadInstance
argument_list|(
name|implClass
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|env
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|coprocEnvironments
operator|.
name|add
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"System coprocessor "
operator|+
name|className
operator|+
literal|" was loaded "
operator|+
literal|"successfully with priority ("
operator|+
name|priority
operator|+
literal|")."
argument_list|)
expr_stmt|;
operator|++
name|priority
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// We always abort if system coprocessors cannot be loaded
name|abortServer
argument_list|(
name|className
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Load a coprocessor implementation into the host    * @param path path to implementation jar    * @param className the main class name    * @param priority chaining priority    * @param conf configuration for coprocessor    * @throws java.io.IOException Exception    */
specifier|public
name|E
name|load
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|className
parameter_list|,
name|int
name|priority
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|includedClassPrefixes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CP_HTD_ATTR_INCLUSION_KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|prefixes
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CP_HTD_ATTR_INCLUSION_KEY
argument_list|)
decl_stmt|;
name|includedClassPrefixes
operator|=
name|prefixes
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
return|return
name|load
argument_list|(
name|path
argument_list|,
name|className
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|,
name|includedClassPrefixes
argument_list|)
return|;
block|}
comment|/**    * Load a coprocessor implementation into the host    * @param path path to implementation jar    * @param className the main class name    * @param priority chaining priority    * @param conf configuration for coprocessor    * @param includedClassPrefixes class name prefixes to include    * @throws java.io.IOException Exception    */
specifier|public
name|E
name|load
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|className
parameter_list|,
name|int
name|priority
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|includedClassPrefixes
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading coprocessor class "
operator|+
name|className
operator|+
literal|" with path "
operator|+
name|path
operator|+
literal|" and priority "
operator|+
name|priority
argument_list|)
expr_stmt|;
name|ClassLoader
name|cl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|implClass
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No jar path specified for "
operator|+
name|className
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|cl
operator|=
name|CoprocessorClassLoader
operator|.
name|getClassLoader
argument_list|(
name|path
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|pathPrefix
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|implClass
operator|=
operator|(
operator|(
name|CoprocessorClassLoader
operator|)
name|cl
operator|)
operator|.
name|loadClass
argument_list|(
name|className
argument_list|,
name|includedClassPrefixes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot load external coprocessor class "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//load custom code for coprocessor
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|ClassLoader
name|hostClassLoader
init|=
name|currentThread
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
comment|// switch temporarily to the thread classloader for custom CP
name|currentThread
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|E
name|cpInstance
init|=
name|checkAndLoadInstance
argument_list|(
name|implClass
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|cpInstance
return|;
block|}
finally|finally
block|{
comment|// restore the fresh (host) classloader
name|currentThread
operator|.
name|setContextClassLoader
argument_list|(
name|hostClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|load
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|C
argument_list|>
name|implClass
parameter_list|,
name|int
name|priority
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|E
name|env
init|=
name|checkAndLoadInstance
argument_list|(
name|implClass
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|coprocEnvironments
operator|.
name|add
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param implClass Implementation class    * @param priority priority    * @param conf configuration    * @throws java.io.IOException Exception    */
specifier|public
name|E
name|checkAndLoadInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|,
name|int
name|priority
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create the instance
name|C
name|impl
decl_stmt|;
try|try
block|{
name|impl
operator|=
name|checkAndGetInstance
argument_list|(
name|implClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot load coprocessor "
operator|+
name|implClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// create the environment
name|E
name|env
init|=
name|createEnvironment
argument_list|(
name|impl
argument_list|,
name|priority
argument_list|,
name|loadSequence
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|env
operator|.
name|startup
argument_list|()
expr_stmt|;
comment|// HBASE-4014: maintain list of loaded coprocessors for later crash analysis
comment|// if server (master or regionserver) aborts.
name|coprocessorNames
operator|.
name|add
argument_list|(
name|implClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|env
return|;
block|}
comment|/**    * Called when a new Coprocessor class is loaded    */
specifier|public
specifier|abstract
name|E
name|createEnvironment
parameter_list|(
name|C
name|instance
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|sequence
parameter_list|,
name|Configuration
name|conf
parameter_list|)
function_decl|;
comment|/**    * Called when a new Coprocessor class needs to be loaded. Checks if type of the given class    * is what the corresponding host implementation expects. If it is of correct type, returns an    * instance of the coprocessor to be loaded. If not, returns null.    * If an exception occurs when trying to create instance of a coprocessor, it's passed up and    * eventually results into server aborting.    */
specifier|public
specifier|abstract
name|C
name|checkAndGetInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
function_decl|;
specifier|public
name|void
name|shutdown
parameter_list|(
name|E
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stop coprocessor "
operator|+
name|e
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Find coprocessors by full class name or simple name.    */
specifier|public
name|C
name|findCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
block|{
for|for
control|(
name|E
name|env
range|:
name|coprocEnvironments
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
operator|||
name|env
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|env
operator|.
name|getInstance
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
parameter_list|<
name|T
extends|extends
name|C
parameter_list|>
name|T
name|findCoprocessor
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
for|for
control|(
name|E
name|env
range|:
name|coprocEnvironments
control|)
block|{
if|if
condition|(
name|cls
operator|.
name|isAssignableFrom
argument_list|(
name|env
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|env
operator|.
name|getInstance
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Find list of coprocessors that extend/implement the given class/interface    * @param cls the class/interface to look for    * @return the list of coprocessors, or null if not found    */
specifier|public
parameter_list|<
name|T
extends|extends
name|C
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|findCoprocessors
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|T
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|env
range|:
name|coprocEnvironments
control|)
block|{
name|C
name|cp
init|=
name|env
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|cp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cls
operator|.
name|isAssignableFrom
argument_list|(
name|cp
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Find a coprocessor environment by class name    * @param className the class name    * @return the coprocessor, or null if not found    */
annotation|@
name|VisibleForTesting
specifier|public
name|E
name|findCoprocessorEnvironment
parameter_list|(
name|String
name|className
parameter_list|)
block|{
for|for
control|(
name|E
name|env
range|:
name|coprocEnvironments
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
operator|||
name|env
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|env
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Retrieves the set of classloaders used to instantiate Coprocessor classes defined in external    * jar files.    * @return A set of ClassLoader instances    */
name|Set
argument_list|<
name|ClassLoader
argument_list|>
name|getExternalClassLoaders
parameter_list|()
block|{
name|Set
argument_list|<
name|ClassLoader
argument_list|>
name|externalClassLoaders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ClassLoader
name|systemClassLoader
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|env
range|:
name|coprocEnvironments
control|)
block|{
name|ClassLoader
name|cl
init|=
name|env
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|!=
name|systemClassLoader
condition|)
block|{
comment|//do not include system classloader
name|externalClassLoaders
operator|.
name|add
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|externalClassLoaders
return|;
block|}
comment|/**    * Environment priority comparator.    * Coprocessors are chained in sorted order.    */
specifier|static
class|class
name|EnvironmentPriorityComparator
implements|implements
name|Comparator
argument_list|<
name|CoprocessorEnvironment
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|env1
parameter_list|,
specifier|final
name|CoprocessorEnvironment
name|env2
parameter_list|)
block|{
if|if
condition|(
name|env1
operator|.
name|getPriority
argument_list|()
operator|<
name|env2
operator|.
name|getPriority
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|env1
operator|.
name|getPriority
argument_list|()
operator|>
name|env2
operator|.
name|getPriority
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|env1
operator|.
name|getLoadSequence
argument_list|()
operator|<
name|env2
operator|.
name|getLoadSequence
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|env1
operator|.
name|getLoadSequence
argument_list|()
operator|>
name|env2
operator|.
name|getLoadSequence
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
specifier|protected
name|void
name|abortServer
parameter_list|(
specifier|final
name|E
name|environment
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|abortServer
argument_list|(
name|environment
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|abortServer
parameter_list|(
specifier|final
name|String
name|coprocessorName
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"The coprocessor "
operator|+
name|coprocessorName
operator|+
literal|" threw "
operator|+
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|abortable
operator|!=
literal|null
condition|)
block|{
name|abortable
operator|.
name|abort
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No available Abortable, process was not aborted"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is used by coprocessor hooks which are declared to throw IOException    * (or its subtypes). For such hooks, we should handle throwable objects    * depending on the Throwable's type. Those which are instances of    * IOException should be passed on to the client. This is in conformance with    * the HBase idiom regarding IOException: that it represents a circumstance    * that should be passed along to the client for its own handling. For    * example, a coprocessor that implements access controls would throw a    * subclass of IOException, such as AccessDeniedException, in its preGet()    * method to prevent an unauthorized client's performing a Get on a particular    * table.    * @param env Coprocessor Environment    * @param e Throwable object thrown by coprocessor.    * @exception IOException Exception    */
comment|// Note to devs: Class comments of all observers ({@link MasterObserver}, {@link WALObserver},
comment|// etc) mention this nuance of our exception handling so that coprocessor can throw appropriate
comment|// exceptions depending on situation. If any changes are made to this logic, make sure to
comment|// update all classes' comments.
specifier|protected
name|void
name|handleCoprocessorThrowable
parameter_list|(
specifier|final
name|E
name|env
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
throw|;
block|}
comment|// If we got here, e is not an IOException. A loaded coprocessor has a
comment|// fatal bug, and the server (master or regionserver) should remove the
comment|// faulty coprocessor from its set of active coprocessors. Setting
comment|// 'hbase.coprocessor.abortonerror' to true will cause abortServer(),
comment|// which may be useful in development and testing environments where
comment|// 'failing fast' for error analysis is desired.
if|if
condition|(
name|env
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|ABORT_ON_ERROR_KEY
argument_list|,
name|DEFAULT_ABORT_ON_ERROR
argument_list|)
condition|)
block|{
comment|// server is configured to abort.
name|abortServer
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If available, pull a table name out of the environment
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
name|String
name|tableName
init|=
operator|(
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Removing coprocessor '"
operator|+
name|env
operator|.
name|toString
argument_list|()
operator|+
literal|"' from table '"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Removing coprocessor '"
operator|+
name|env
operator|.
name|toString
argument_list|()
operator|+
literal|"' from "
operator|+
literal|"environment"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|coprocEnvironments
operator|.
name|remove
argument_list|(
name|env
argument_list|)
expr_stmt|;
try|try
block|{
name|shutdown
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|x
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Uncaught exception when shutting down coprocessor '"
operator|+
name|env
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Coprocessor: '"
operator|+
name|env
operator|.
name|toString
argument_list|()
operator|+
literal|"' threw: '"
operator|+
name|e
operator|+
literal|"' and has been removed from the active "
operator|+
literal|"coprocessor set."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Used to gracefully handle fallback to deprecated methods when we    * evolve coprocessor APIs.    *    * When a particular Coprocessor API is updated to change methods, hosts can support fallback    * to the deprecated API by using this method to determine if an instance implements the new API.    * In the event that said support is partial, then in the face of a runtime issue that prevents    * proper operation {@link #legacyWarning(Class, String)} should be used to let operators know.    *    * For examples of this in action, see the implementation of    *<ul>    *<li>{@link org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost}    *<li>{@link org.apache.hadoop.hbase.regionserver.wal.WALCoprocessorHost}    *</ul>    *    * @param clazz Coprocessor you wish to evaluate    * @param methodName the name of the non-deprecated method version    * @param parameterTypes the Class of the non-deprecated method's arguments in the order they are    *     declared.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|protected
specifier|static
name|boolean
name|useLegacyMethod
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Coprocessor
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|methodName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|parameterTypes
parameter_list|)
block|{
name|boolean
name|useLegacy
decl_stmt|;
comment|// Use reflection to see if they implement the non-deprecated version
try|try
block|{
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
name|methodName
argument_list|,
name|parameterTypes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found an implementation of '"
operator|+
name|methodName
operator|+
literal|"' that uses updated method "
operator|+
literal|"signature. Skipping legacy support for invocations in '"
operator|+
name|clazz
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|useLegacy
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|exception
parameter_list|)
block|{
name|useLegacy
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The Security Manager denied our attempt to detect if the coprocessor '"
operator|+
name|clazz
operator|+
literal|"' requires legacy support; assuming it does. If you get later errors about legacy "
operator|+
literal|"coprocessor use, consider updating your security policy to allow access to the package"
operator|+
literal|" and declared members of your implementation."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Details of Security Manager rejection."
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|useLegacy
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|useLegacy
return|;
block|}
comment|/**    * Used to limit legacy handling to once per Coprocessor class per classloader.    */
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Coprocessor
argument_list|>
argument_list|>
name|legacyWarning
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Coprocessor
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Coprocessor
argument_list|>
name|c1
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Coprocessor
argument_list|>
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|c1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|)
class|;
end_class

begin_comment
comment|/**    * limits the amount of logging to once per coprocessor class.    * Used in concert with {@link #useLegacyMethod(Class, String, Class[])} when a runtime issue    * prevents properly supporting the legacy version of a coprocessor API.    * Since coprocessors can be in tight loops this serves to limit the amount of log spam we create.    */
end_comment

begin_function
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|protected
name|void
name|legacyWarning
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Coprocessor
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|legacyWarning
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"You have a legacy coprocessor loaded and there are events we can't map to the "
operator|+
literal|" deprecated API. Your coprocessor will not see these events.  Please update '"
operator|+
name|clazz
operator|+
literal|"'. Details of the problem: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Implementations defined function to get an observer of type {@code O} from a coprocessor of    * type {@code C}. Concrete implementations of CoprocessorHost define one getter for each    * observer they can handle. For e.g. RegionCoprocessorHost will use 3 getters, one for    * each of RegionObserver, EndpointObserver and BulkLoadObserver.    * These getters are used by {@code ObserverOperation} to get appropriate observer from the    * coprocessor.    */
end_comment

begin_interface
annotation|@
name|FunctionalInterface
specifier|public
interface|interface
name|ObserverGetter
parameter_list|<
name|C
parameter_list|,
name|O
parameter_list|>
extends|extends
name|Function
argument_list|<
name|C
argument_list|,
name|Optional
argument_list|<
name|O
argument_list|>
argument_list|>
block|{}
end_interface

begin_class
specifier|private
specifier|abstract
class|class
name|ObserverOperation
parameter_list|<
name|O
parameter_list|>
extends|extends
name|ObserverContextImpl
argument_list|<
name|E
argument_list|>
block|{
name|ObserverGetter
argument_list|<
name|C
argument_list|,
name|O
argument_list|>
name|observerGetter
decl_stmt|;
name|ObserverOperation
parameter_list|(
name|ObserverGetter
argument_list|<
name|C
argument_list|,
name|O
argument_list|>
name|observerGetter
parameter_list|)
block|{
name|this
argument_list|(
name|observerGetter
argument_list|,
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ObserverOperation
parameter_list|(
name|ObserverGetter
argument_list|<
name|C
argument_list|,
name|O
argument_list|>
name|observerGetter
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|super
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|this
operator|.
name|observerGetter
operator|=
name|observerGetter
expr_stmt|;
block|}
specifier|abstract
name|void
name|callObserver
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|protected
name|void
name|postEnvCall
parameter_list|()
block|{}
block|}
end_class

begin_comment
comment|// Can't derive ObserverOperation from ObserverOperationWithResult (R = Void) because then all
end_comment

begin_comment
comment|// ObserverCaller implementations will have to have a return statement.
end_comment

begin_comment
comment|// O = observer, E = environment, C = coprocessor, R=result type
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ObserverOperationWithoutResult
parameter_list|<
name|O
parameter_list|>
extends|extends
name|ObserverOperation
argument_list|<
name|O
argument_list|>
block|{
specifier|protected
specifier|abstract
name|void
name|call
parameter_list|(
name|O
name|observer
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|public
name|ObserverOperationWithoutResult
parameter_list|(
name|ObserverGetter
argument_list|<
name|C
argument_list|,
name|O
argument_list|>
name|observerGetter
parameter_list|)
block|{
name|super
argument_list|(
name|observerGetter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObserverOperationWithoutResult
parameter_list|(
name|ObserverGetter
argument_list|<
name|C
argument_list|,
name|O
argument_list|>
name|observerGetter
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|super
argument_list|(
name|observerGetter
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
comment|/**      * In case of coprocessors which have many kinds of observers (for eg, {@link RegionCoprocessor}      * has BulkLoadObserver, RegionObserver, etc), some implementations may not need all      * observers, in which case they will return null for that observer's getter.      * We simply ignore such cases.      */
annotation|@
name|Override
name|void
name|callObserver
parameter_list|()
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|O
argument_list|>
name|observer
init|=
name|observerGetter
operator|.
name|apply
argument_list|(
name|getEnvironment
argument_list|()
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|observer
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|call
argument_list|(
name|observer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
specifier|public
specifier|abstract
class|class
name|ObserverOperationWithResult
parameter_list|<
name|O
parameter_list|,
name|R
parameter_list|>
extends|extends
name|ObserverOperation
argument_list|<
name|O
argument_list|>
block|{
specifier|protected
specifier|abstract
name|R
name|call
parameter_list|(
name|O
name|observer
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|private
name|R
name|result
decl_stmt|;
specifier|public
name|ObserverOperationWithResult
parameter_list|(
name|ObserverGetter
argument_list|<
name|C
argument_list|,
name|O
argument_list|>
name|observerGetter
parameter_list|)
block|{
name|super
argument_list|(
name|observerGetter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObserverOperationWithResult
parameter_list|(
name|ObserverGetter
argument_list|<
name|C
argument_list|,
name|O
argument_list|>
name|observerGetter
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|super
argument_list|(
name|observerGetter
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|void
name|setResult
parameter_list|(
specifier|final
name|R
name|result
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
specifier|protected
name|R
name|getResult
parameter_list|()
block|{
return|return
name|this
operator|.
name|result
return|;
block|}
name|void
name|callObserver
parameter_list|()
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|O
argument_list|>
name|observer
init|=
name|observerGetter
operator|.
name|apply
argument_list|(
name|getEnvironment
argument_list|()
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|observer
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|result
operator|=
name|call
argument_list|(
name|observer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|//////////////////////////////////////////////////////////////////////////////////////////
end_comment

begin_comment
comment|// Functions to execute observer hooks and handle results (if any)
end_comment

begin_comment
comment|//////////////////////////////////////////////////////////////////////////////////////////
end_comment

begin_function
specifier|protected
parameter_list|<
name|O
parameter_list|,
name|R
parameter_list|>
name|R
name|execOperationWithResult
parameter_list|(
specifier|final
name|R
name|defaultValue
parameter_list|,
specifier|final
name|ObserverOperationWithResult
argument_list|<
name|O
argument_list|,
name|R
argument_list|>
name|observerOperation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|observerOperation
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
name|observerOperation
operator|.
name|setResult
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|execOperation
argument_list|(
name|observerOperation
argument_list|)
expr_stmt|;
return|return
name|observerOperation
operator|.
name|getResult
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// what does bypass mean?
end_comment

begin_function
specifier|protected
parameter_list|<
name|O
parameter_list|,
name|R
parameter_list|>
name|R
name|execOperationWithResult
parameter_list|(
specifier|final
name|boolean
name|ifBypass
parameter_list|,
specifier|final
name|R
name|defaultValue
parameter_list|,
specifier|final
name|ObserverOperationWithResult
argument_list|<
name|O
argument_list|,
name|R
argument_list|>
name|observerOperation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|observerOperation
operator|==
literal|null
condition|)
block|{
return|return
name|ifBypass
condition|?
literal|null
else|:
name|defaultValue
return|;
block|}
else|else
block|{
name|observerOperation
operator|.
name|setResult
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|boolean
name|bypass
init|=
name|execOperation
argument_list|(
literal|true
argument_list|,
name|observerOperation
argument_list|)
decl_stmt|;
name|R
name|result
init|=
name|observerOperation
operator|.
name|getResult
argument_list|()
decl_stmt|;
return|return
name|bypass
operator|==
name|ifBypass
condition|?
name|result
else|:
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|protected
parameter_list|<
name|O
parameter_list|>
name|boolean
name|execOperation
parameter_list|(
specifier|final
name|ObserverOperation
argument_list|<
name|O
argument_list|>
name|observerOperation
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execOperation
argument_list|(
literal|true
argument_list|,
name|observerOperation
argument_list|)
return|;
block|}
end_function

begin_function
specifier|protected
parameter_list|<
name|O
parameter_list|>
name|boolean
name|execOperation
parameter_list|(
specifier|final
name|boolean
name|earlyExit
parameter_list|,
specifier|final
name|ObserverOperation
argument_list|<
name|O
argument_list|>
name|observerOperation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|observerOperation
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|envs
init|=
name|coprocEnvironments
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|env
range|:
name|envs
control|)
block|{
name|observerOperation
operator|.
name|prepare
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|ClassLoader
name|cl
init|=
name|currentThread
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|currentThread
operator|.
name|setContextClassLoader
argument_list|(
name|env
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|observerOperation
operator|.
name|callObserver
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|currentThread
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|observerOperation
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|earlyExit
operator|&&
name|observerOperation
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
name|observerOperation
operator|.
name|postEnvCall
argument_list|()
expr_stmt|;
block|}
return|return
name|bypass
return|;
block|}
end_function

begin_comment
comment|/**    * Coprocessor classes can be configured in any order, based on that priority is set and    * chained in a sorted order. Should be used preStop*() hooks i.e. when master/regionserver is    * going down. This function first calls coprocessor methods (using ObserverOperation.call())    * and then shutdowns the environment in postEnvCall().<br>    * Need to execute all coprocessor methods first then postEnvCall(), otherwise some coprocessors    * may remain shutdown if any exception occurs during next coprocessor execution which prevent    * master/regionserver stop or cluster shutdown. (Refer:    *<a href="https://issues.apache.org/jira/browse/HBASE-16663">HBASE-16663</a>    * @return true if bypaas coprocessor execution, false if not.    * @throws IOException    */
end_comment

begin_function
specifier|protected
parameter_list|<
name|O
parameter_list|>
name|boolean
name|execShutdown
parameter_list|(
specifier|final
name|ObserverOperation
argument_list|<
name|O
argument_list|>
name|observerOperation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|observerOperation
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|envs
init|=
name|coprocEnvironments
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Iterate the coprocessors and execute ObserverOperation's call()
for|for
control|(
name|E
name|env
range|:
name|envs
control|)
block|{
name|observerOperation
operator|.
name|prepare
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|ClassLoader
name|cl
init|=
name|currentThread
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|currentThread
operator|.
name|setContextClassLoader
argument_list|(
name|env
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|observerOperation
operator|.
name|callObserver
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleCoprocessorThrowable
argument_list|(
name|env
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|currentThread
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
name|bypass
operator||=
name|observerOperation
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|observerOperation
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
comment|// Iterate the coprocessors and execute ObserverOperation's postEnvCall()
for|for
control|(
name|E
name|env
range|:
name|envs
control|)
block|{
name|observerOperation
operator|.
name|prepare
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|observerOperation
operator|.
name|postEnvCall
argument_list|()
expr_stmt|;
block|}
return|return
name|bypass
return|;
block|}
end_function

unit|}
end_unit

