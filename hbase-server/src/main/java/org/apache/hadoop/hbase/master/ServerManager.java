begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClockOutOfSyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|YouAreDeadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|MetaServerShutdownHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|ServerShutdownHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|RegionStoreSequenceIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|StoreSequenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionOpeningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RetryCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RetryCounterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * The ServerManager class manages info about region servers.  *<p>  * Maintains lists of online and dead servers.  Processes the startups,  * shutdowns, and deaths of region servers.  *<p>  * Servers are distinguished in two different ways.  A given server has a  * location, specified by hostname and port, and of which there can only be one  * online at any given time.  A server instance is specified by the location  * (hostname and port) as well as the startcode (timestamp from when the server  * was started).  This is used to differentiate a restarted instance of a given  * server from the original instance.  *<p>  * If a sever is known not to be running any more, it is called dead. The dead  * server needs to be handled by a ServerShutdownHandler.  If the handler is not  * enabled yet, the server can't be handled right away so it is queued up.  * After the handler is enabled, the server will be submitted to a handler to handle.  * However, the handler may be just partially enabled.  If so,  * the server cannot be fully processed, and be queued up for further processing.  * A server is fully processed only after the handler is fully enabled  * and has completed the handling.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ServerManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_ON_REGIONSERVERS_MAXTOSTART
init|=
literal|"hbase.master.wait.on.regionservers.maxtostart"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_ON_REGIONSERVERS_MINTOSTART
init|=
literal|"hbase.master.wait.on.regionservers.mintostart"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_ON_REGIONSERVERS_TIMEOUT
init|=
literal|"hbase.master.wait.on.regionservers.timeout"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_ON_REGIONSERVERS_INTERVAL
init|=
literal|"hbase.master.wait.on.regionservers.interval"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ServerManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Set if we are to shutdown the cluster.
specifier|private
specifier|volatile
name|boolean
name|clusterShutdown
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|flushedSequenceIdByRegion
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|>
name|storeFlushedSequenceIdsByRegion
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|/** Map of registered servers to their current load */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|onlineServers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Map of admin interfaces per registered regionserver; these interfaces we use to control    * regionservers out on the cluster    */
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|AdminService
operator|.
name|BlockingInterface
argument_list|>
name|rsAdmins
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|AdminService
operator|.
name|BlockingInterface
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * List of region servers<ServerName> that should not get any more new    * regions.    */
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
name|drainingServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Server
name|master
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|services
decl_stmt|;
specifier|private
specifier|final
name|ClusterConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|DeadServer
name|deadservers
init|=
operator|new
name|DeadServer
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxSkew
decl_stmt|;
specifier|private
specifier|final
name|long
name|warningSkew
decl_stmt|;
specifier|private
specifier|final
name|RetryCounterFactory
name|pingRetryCounterFactory
decl_stmt|;
comment|/**    * Set of region servers which are dead but not processed immediately. If one    * server died before master enables ServerShutdownHandler, the server will be    * added to this set and will be processed through calling    * {@link ServerManager#processQueuedDeadServers()} by master.    *<p>    * A dead server is a server instance known to be dead, not listed in the /hbase/rs    * znode any more. It may have not been submitted to ServerShutdownHandler yet    * because the handler is not enabled.    *<p>    * A dead server, which has been submitted to ServerShutdownHandler while the    * handler is not enabled, is queued up.    *<p>    * So this is a set of region servers known to be dead but not submitted to    * ServerShutdownHandler for processing yet.    */
specifier|private
name|Set
argument_list|<
name|ServerName
argument_list|>
name|queuedDeadServers
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Set of region servers which are dead and submitted to ServerShutdownHandler to process but not    * fully processed immediately.    *<p>    * If one server died before assignment manager finished the failover cleanup, the server will be    * added to this set and will be processed through calling    * {@link ServerManager#processQueuedDeadServers()} by assignment manager.    *<p>    * The Boolean value indicates whether log split is needed inside ServerShutdownHandler    *<p>    * ServerShutdownHandler processes a dead server submitted to the handler after the handler is    * enabled. It may not be able to complete the processing because meta is not yet online or master    * is currently in startup mode. In this case, the dead server will be parked in this set    * temporarily.    */
specifier|private
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|requeuedDeadServers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Listeners that are called on server events. */
specifier|private
name|List
argument_list|<
name|ServerListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ServerListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Constructor.    * @param master    * @param services    * @throws ZooKeeperConnectionException    */
specifier|public
name|ServerManager
parameter_list|(
specifier|final
name|Server
name|master
parameter_list|,
specifier|final
name|MasterServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|master
argument_list|,
name|services
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ServerManager
parameter_list|(
specifier|final
name|Server
name|master
parameter_list|,
specifier|final
name|MasterServices
name|services
parameter_list|,
specifier|final
name|boolean
name|connect
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|services
operator|=
name|services
expr_stmt|;
name|Configuration
name|c
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|maxSkew
operator|=
name|c
operator|.
name|getLong
argument_list|(
literal|"hbase.master.maxclockskew"
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|warningSkew
operator|=
name|c
operator|.
name|getLong
argument_list|(
literal|"hbase.master.warningclockskew"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connect
condition|?
operator|(
name|ClusterConnection
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
else|:
literal|null
expr_stmt|;
name|int
name|pingMaxAttempts
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.master.maximum.ping.server.attempts"
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|pingSleepInterval
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.master.ping.server.retry.sleep.interval"
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|pingRetryCounterFactory
operator|=
operator|new
name|RetryCounterFactory
argument_list|(
name|pingMaxAttempts
argument_list|,
name|pingSleepInterval
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add the listener to the notification list.    * @param listener The ServerListener to register    */
specifier|public
name|void
name|registerListener
parameter_list|(
specifier|final
name|ServerListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove the listener from the notification list.    * @param listener The ServerListener to unregister    */
specifier|public
name|boolean
name|unregisterListener
parameter_list|(
specifier|final
name|ServerListener
name|listener
parameter_list|)
block|{
return|return
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
return|;
block|}
comment|/**    * Let the server manager know a new regionserver has come online    * @param request the startup request    * @param ia the InetAddress from which request is received    * @return The ServerName we know this server as.    * @throws IOException    */
name|ServerName
name|regionServerStartup
parameter_list|(
name|RegionServerStartupRequest
name|request
parameter_list|,
name|InetAddress
name|ia
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Test for case where we get a region startup message from a regionserver
comment|// that has been quickly restarted but whose znode expiration handler has
comment|// not yet run, or from a server whose fail we are currently processing.
comment|// Test its host+port combo is present in serverAddresstoServerInfo.  If it
comment|// is, reject the server and trigger its expiration. The next time it comes
comment|// in, it should have been removed from serverAddressToServerInfo and queued
comment|// for processing by ProcessServerShutdown.
specifier|final
name|String
name|hostname
init|=
name|request
operator|.
name|hasUseThisHostnameInstead
argument_list|()
condition|?
name|request
operator|.
name|getUseThisHostnameInstead
argument_list|()
else|:
name|ia
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostname
argument_list|,
name|request
operator|.
name|getPort
argument_list|()
argument_list|,
name|request
operator|.
name|getServerStartCode
argument_list|()
argument_list|)
decl_stmt|;
name|checkClockSkew
argument_list|(
name|sn
argument_list|,
name|request
operator|.
name|getServerCurrentTime
argument_list|()
argument_list|)
expr_stmt|;
name|checkIsDead
argument_list|(
name|sn
argument_list|,
literal|"STARTUP"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkAndRecordNewServer
argument_list|(
name|sn
argument_list|,
name|ServerLoad
operator|.
name|EMPTY_SERVERLOAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"THIS SHOULD NOT HAPPEN, RegionServerStartup"
operator|+
literal|" could not record the server: "
operator|+
name|sn
argument_list|)
expr_stmt|;
block|}
return|return
name|sn
return|;
block|}
specifier|private
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOrCreateStoreFlushedSequenceId
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|storeFlushedSequenceId
init|=
name|storeFlushedSequenceIdsByRegion
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeFlushedSequenceId
operator|!=
literal|null
condition|)
block|{
return|return
name|storeFlushedSequenceId
return|;
block|}
name|storeFlushedSequenceId
operator|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|alreadyPut
init|=
name|storeFlushedSequenceIdsByRegion
operator|.
name|putIfAbsent
argument_list|(
name|regionName
argument_list|,
name|storeFlushedSequenceId
argument_list|)
decl_stmt|;
return|return
name|alreadyPut
operator|==
literal|null
condition|?
name|storeFlushedSequenceId
else|:
name|alreadyPut
return|;
block|}
comment|/**    * Updates last flushed sequence Ids for the regions on server sn    * @param sn    * @param hsl    */
specifier|private
name|void
name|updateLastFlushedSequenceIds
parameter_list|(
name|ServerName
name|sn
parameter_list|,
name|ServerLoad
name|hsl
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionsLoad
init|=
name|hsl
operator|.
name|getRegionsLoad
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|entry
range|:
name|regionsLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|encodedRegionName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|existingValue
init|=
name|flushedSequenceIdByRegion
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
name|long
name|l
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getCompleteSequenceId
argument_list|()
decl_stmt|;
comment|// Don't let smaller sequence ids override greater sequence ids.
if|if
condition|(
name|existingValue
operator|==
literal|null
operator|||
operator|(
name|l
operator|!=
name|HConstants
operator|.
name|NO_SEQNUM
operator|&&
name|l
operator|>
name|existingValue
operator|)
condition|)
block|{
name|flushedSequenceIdByRegion
operator|.
name|put
argument_list|(
name|encodedRegionName
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|l
operator|!=
name|HConstants
operator|.
name|NO_SEQNUM
operator|&&
name|l
operator|<
name|existingValue
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"RegionServer "
operator|+
name|sn
operator|+
literal|" indicates a last flushed sequence id ("
operator|+
name|l
operator|+
literal|") that is less than the previous last flushed sequence id ("
operator|+
name|existingValue
operator|+
literal|") for region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|+
literal|" Ignoring."
argument_list|)
expr_stmt|;
block|}
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|storeFlushedSequenceId
init|=
name|getOrCreateStoreFlushedSequenceId
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
for|for
control|(
name|StoreSequenceId
name|storeSeqId
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getStoreCompleteSequenceId
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|storeSeqId
operator|.
name|getFamilyName
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|existingValue
operator|=
name|storeFlushedSequenceId
operator|.
name|get
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|l
operator|=
name|storeSeqId
operator|.
name|getSequenceId
argument_list|()
expr_stmt|;
comment|// Don't let smaller sequence ids override greater sequence ids.
if|if
condition|(
name|existingValue
operator|==
literal|null
operator|||
operator|(
name|l
operator|!=
name|HConstants
operator|.
name|NO_SEQNUM
operator|&&
name|l
operator|>
name|existingValue
operator|.
name|longValue
argument_list|()
operator|)
condition|)
block|{
name|storeFlushedSequenceId
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|regionServerReport
parameter_list|(
name|ServerName
name|sn
parameter_list|,
name|ServerLoad
name|sl
parameter_list|)
throws|throws
name|YouAreDeadException
block|{
name|checkIsDead
argument_list|(
name|sn
argument_list|,
literal|"REPORT"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|onlineServers
operator|.
name|replace
argument_list|(
name|sn
argument_list|,
name|sl
argument_list|)
condition|)
block|{
comment|// Already have this host+port combo and its just different start code?
comment|// Just let the server in. Presume master joining a running cluster.
comment|// recordNewServer is what happens at the end of reportServerStartup.
comment|// The only thing we are skipping is passing back to the regionserver
comment|// the ServerName to use. Here we presume a master has already done
comment|// that so we'll press on with whatever it gave us for ServerName.
if|if
condition|(
operator|!
name|checkAndRecordNewServer
argument_list|(
name|sn
argument_list|,
name|sl
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RegionServerReport ignored, could not record the server: "
operator|+
name|sn
argument_list|)
expr_stmt|;
return|return;
comment|// Not recorded, so no need to move on
block|}
block|}
name|updateLastFlushedSequenceIds
argument_list|(
name|sn
argument_list|,
name|sl
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check is a server of same host and port already exists,    * if not, or the existed one got a smaller start code, record it.    *    * @param serverName the server to check and record    * @param sl the server load on the server    * @return true if the server is recorded, otherwise, false    */
name|boolean
name|checkAndRecordNewServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|ServerLoad
name|sl
parameter_list|)
block|{
name|ServerName
name|existingServer
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|onlineServers
init|)
block|{
name|existingServer
operator|=
name|findServerWithSameHostnamePortWithLock
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingServer
operator|!=
literal|null
operator|&&
operator|(
name|existingServer
operator|.
name|getStartcode
argument_list|()
operator|>
name|serverName
operator|.
name|getStartcode
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Server serverName="
operator|+
name|serverName
operator|+
literal|" rejected; we already have "
operator|+
name|existingServer
operator|.
name|toString
argument_list|()
operator|+
literal|" registered with same hostname and port"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|recordNewServerWithLock
argument_list|(
name|serverName
argument_list|,
name|sl
argument_list|)
expr_stmt|;
block|}
comment|// Tell our listeners that a server was added
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ServerListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|listener
operator|.
name|serverAdded
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Note that we assume that same ts means same server, and don't expire in that case.
comment|//  TODO: ts can theoretically collide due to clock shifts, so this is a bit hacky.
if|if
condition|(
name|existingServer
operator|!=
literal|null
operator|&&
operator|(
name|existingServer
operator|.
name|getStartcode
argument_list|()
operator|<
name|serverName
operator|.
name|getStartcode
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Triggering server recovery; existingServer "
operator|+
name|existingServer
operator|+
literal|" looks stale, new server:"
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|expireServer
argument_list|(
name|existingServer
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Checks if the clock skew between the server and the master. If the clock skew exceeds the    * configured max, it will throw an exception; if it exceeds the configured warning threshold,    * it will log a warning but start normally.    * @param serverName Incoming servers's name    * @param serverCurrentTime    * @throws ClockOutOfSyncException if the skew exceeds the configured max value    */
specifier|private
name|void
name|checkClockSkew
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|long
name|serverCurrentTime
parameter_list|)
throws|throws
name|ClockOutOfSyncException
block|{
name|long
name|skew
init|=
name|Math
operator|.
name|abs
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|serverCurrentTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|skew
operator|>
name|maxSkew
condition|)
block|{
name|String
name|message
init|=
literal|"Server "
operator|+
name|serverName
operator|+
literal|" has been "
operator|+
literal|"rejected; Reported time is too far out of sync with master.  "
operator|+
literal|"Time difference of "
operator|+
name|skew
operator|+
literal|"ms> max allowed of "
operator|+
name|maxSkew
operator|+
literal|"ms"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ClockOutOfSyncException
argument_list|(
name|message
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|skew
operator|>
name|warningSkew
condition|)
block|{
name|String
name|message
init|=
literal|"Reported time for server "
operator|+
name|serverName
operator|+
literal|" is out of sync with master "
operator|+
literal|"by "
operator|+
name|skew
operator|+
literal|"ms. (Warning threshold is "
operator|+
name|warningSkew
operator|+
literal|"ms; "
operator|+
literal|"error threshold is "
operator|+
name|maxSkew
operator|+
literal|"ms)"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If this server is on the dead list, reject it with a YouAreDeadException.    * If it was dead but came back with a new start code, remove the old entry    * from the dead list.    * @param serverName    * @param what START or REPORT    * @throws org.apache.hadoop.hbase.YouAreDeadException    */
specifier|private
name|void
name|checkIsDead
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|String
name|what
parameter_list|)
throws|throws
name|YouAreDeadException
block|{
if|if
condition|(
name|this
operator|.
name|deadservers
operator|.
name|isDeadServer
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
comment|// host name, port and start code all match with existing one of the
comment|// dead servers. So, this server must be dead.
name|String
name|message
init|=
literal|"Server "
operator|+
name|what
operator|+
literal|" rejected; currently processing "
operator|+
name|serverName
operator|+
literal|" as dead server"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YouAreDeadException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// remove dead server with same hostname and port of newly checking in rs after master
comment|// initialization.See HBASE-5916 for more information.
if|if
condition|(
operator|(
name|this
operator|.
name|services
operator|==
literal|null
operator|||
operator|(
operator|(
name|HMaster
operator|)
name|this
operator|.
name|services
operator|)
operator|.
name|isInitialized
argument_list|()
operator|)
operator|&&
name|this
operator|.
name|deadservers
operator|.
name|cleanPreviousInstance
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
comment|// This server has now become alive after we marked it as dead.
comment|// We removed it's previous entry from the dead list to reflect it.
name|LOG
operator|.
name|debug
argument_list|(
name|what
operator|+
literal|":"
operator|+
literal|" Server "
operator|+
name|serverName
operator|+
literal|" came back up,"
operator|+
literal|" removed it from the dead servers list"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assumes onlineServers is locked.    * @return ServerName with matching hostname and port.    */
specifier|private
name|ServerName
name|findServerWithSameHostnamePortWithLock
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
for|for
control|(
name|ServerName
name|sn
range|:
name|this
operator|.
name|onlineServers
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverName
argument_list|,
name|sn
argument_list|)
condition|)
return|return
name|sn
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Adds the onlineServers list. onlineServers should be locked.    * @param serverName The remote servers name.    * @param sl    * @return Server load from the removed server, if any.    */
annotation|@
name|VisibleForTesting
name|void
name|recordNewServerWithLock
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|ServerLoad
name|sl
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering server="
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|this
operator|.
name|onlineServers
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|sl
argument_list|)
expr_stmt|;
name|this
operator|.
name|rsAdmins
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionStoreSequenceIds
name|getLastFlushedSequenceId
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|)
block|{
name|RegionStoreSequenceIds
operator|.
name|Builder
name|builder
init|=
name|RegionStoreSequenceIds
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Long
name|seqId
init|=
name|flushedSequenceIdByRegion
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setLastFlushedSequenceId
argument_list|(
name|seqId
operator|!=
literal|null
condition|?
name|seqId
operator|.
name|longValue
argument_list|()
else|:
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|storeFlushedSequenceId
init|=
name|storeFlushedSequenceIdsByRegion
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeFlushedSequenceId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|storeFlushedSequenceId
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|addStoreSequenceId
argument_list|(
name|StoreSequenceId
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFamilyName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSequenceId
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * @param serverName    * @return ServerLoad if serverName is known else null    */
specifier|public
name|ServerLoad
name|getLoad
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|this
operator|.
name|onlineServers
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
return|;
block|}
comment|/**    * Compute the average load across all region servers.    * Currently, this uses a very naive computation - just uses the number of    * regions being served, ignoring stats about number of requests.    * @return the average load    */
specifier|public
name|double
name|getAverageLoad
parameter_list|()
block|{
name|int
name|totalLoad
init|=
literal|0
decl_stmt|;
name|int
name|numServers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ServerLoad
name|sl
range|:
name|this
operator|.
name|onlineServers
operator|.
name|values
argument_list|()
control|)
block|{
name|numServers
operator|++
expr_stmt|;
name|totalLoad
operator|+=
name|sl
operator|.
name|getNumberOfRegions
argument_list|()
expr_stmt|;
block|}
return|return
name|numServers
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|double
operator|)
name|totalLoad
operator|/
operator|(
name|double
operator|)
name|numServers
return|;
block|}
comment|/** @return the count of active regionservers */
specifier|public
name|int
name|countOfRegionServers
parameter_list|()
block|{
comment|// Presumes onlineServers is a concurrent map
return|return
name|this
operator|.
name|onlineServers
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * @return Read-only map of servers to serverinfo    */
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|getOnlineServers
parameter_list|()
block|{
comment|// Presumption is that iterating the returned Map is OK.
synchronized|synchronized
init|(
name|this
operator|.
name|onlineServers
init|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|onlineServers
argument_list|)
return|;
block|}
block|}
specifier|public
name|DeadServer
name|getDeadServers
parameter_list|()
block|{
return|return
name|this
operator|.
name|deadservers
return|;
block|}
comment|/**    * Checks if any dead servers are currently in progress.    * @return true if any RS are being processed as dead, false if not    */
specifier|public
name|boolean
name|areDeadServersInProgress
parameter_list|()
block|{
return|return
name|this
operator|.
name|deadservers
operator|.
name|areDeadServersInProgress
argument_list|()
return|;
block|}
name|void
name|letRegionServersShutdown
parameter_list|()
block|{
name|long
name|previousLogTime
init|=
literal|0
decl_stmt|;
name|ServerName
name|sn
init|=
name|master
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
name|master
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|int
name|onlineServersCt
decl_stmt|;
while|while
condition|(
operator|(
name|onlineServersCt
operator|=
name|onlineServers
operator|.
name|size
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
operator|(
name|previousLogTime
operator|+
literal|1000
operator|)
condition|)
block|{
name|Set
argument_list|<
name|ServerName
argument_list|>
name|remainingServers
init|=
name|onlineServers
operator|.
name|keySet
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|onlineServers
init|)
block|{
if|if
condition|(
name|remainingServers
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|remainingServers
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
condition|)
block|{
comment|// Master will delete itself later.
return|return;
block|}
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// It's ok here to not sync on onlineServers - merely logging
for|for
control|(
name|ServerName
name|key
range|:
name|remainingServers
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on regionserver(s) to go down "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|previousLogTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|rsZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|servers
operator|==
literal|null
operator|||
name|servers
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|servers
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|servers
operator|.
name|contains
argument_list|(
name|sn
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ZK shows there is only the master self online, exiting now"
argument_list|)
expr_stmt|;
comment|// Master could have lost some ZK events, no need to wait more.
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to list regionservers"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
comment|// ZK is malfunctioning, don't hang here
break|break;
block|}
synchronized|synchronized
init|(
name|onlineServers
init|)
block|{
try|try
block|{
if|if
condition|(
name|onlineServersCt
operator|==
name|onlineServers
operator|.
name|size
argument_list|()
condition|)
name|onlineServers
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
block|}
comment|/*    * Expire the passed server.  Add it to list of dead servers and queue a    * shutdown processing.    */
specifier|public
specifier|synchronized
name|void
name|expireServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
if|if
condition|(
name|serverName
operator|.
name|equals
argument_list|(
name|master
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|master
operator|.
name|isAborted
argument_list|()
operator|||
name|master
operator|.
name|isStopped
argument_list|()
operator|)
condition|)
block|{
name|master
operator|.
name|stop
argument_list|(
literal|"We lost our znode?"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|services
operator|.
name|isServerShutdownHandlerEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Master doesn't enable ServerShutdownHandler during initialization, "
operator|+
literal|"delay expiring server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|this
operator|.
name|queuedDeadServers
operator|.
name|add
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|deadservers
operator|.
name|isDeadServer
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
comment|// TODO: Can this happen?  It shouldn't be online in this case?
name|LOG
operator|.
name|warn
argument_list|(
literal|"Expiration of "
operator|+
name|serverName
operator|+
literal|" but server shutdown already in progress"
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|onlineServers
init|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|onlineServers
operator|.
name|containsKey
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Expiration of "
operator|+
name|serverName
operator|+
literal|" but server not online"
argument_list|)
expr_stmt|;
block|}
comment|// Remove the server from the known servers lists and update load info BUT
comment|// add to deadservers first; do this so it'll show in dead servers list if
comment|// not in online servers list.
name|this
operator|.
name|deadservers
operator|.
name|add
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|this
operator|.
name|onlineServers
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|onlineServers
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rsAdmins
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
comment|// If cluster is going down, yes, servers are going to be expiring; don't
comment|// process as a dead server
if|if
condition|(
name|this
operator|.
name|clusterShutdown
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster shutdown set; "
operator|+
name|serverName
operator|+
literal|" expired; onlineServers="
operator|+
name|this
operator|.
name|onlineServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|onlineServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|master
operator|.
name|stop
argument_list|(
literal|"Cluster shutdown set; onlineServer=0"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|boolean
name|carryingMeta
init|=
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|isCarryingMeta
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|carryingMeta
condition|)
block|{
name|this
operator|.
name|services
operator|.
name|getExecutorService
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|MetaServerShutdownHandler
argument_list|(
name|this
operator|.
name|master
argument_list|,
name|this
operator|.
name|services
argument_list|,
name|this
operator|.
name|deadservers
argument_list|,
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|services
operator|.
name|getExecutorService
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|ServerShutdownHandler
argument_list|(
name|this
operator|.
name|master
argument_list|,
name|this
operator|.
name|services
argument_list|,
name|this
operator|.
name|deadservers
argument_list|,
name|serverName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added="
operator|+
name|serverName
operator|+
literal|" to dead servers, submitted shutdown handler to be executed meta="
operator|+
name|carryingMeta
argument_list|)
expr_stmt|;
comment|// Tell our listeners that a server was removed
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ServerListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|listener
operator|.
name|serverRemoved
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|processDeadServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|processDeadServer
argument_list|(
name|serverName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|processDeadServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
name|boolean
name|shouldSplitWal
parameter_list|)
block|{
comment|// When assignment manager is cleaning up the zookeeper nodes and rebuilding the
comment|// in-memory region states, region servers could be down. Meta table can and
comment|// should be re-assigned, log splitting can be done too. However, it is better to
comment|// wait till the cleanup is done before re-assigning user regions.
comment|//
comment|// We should not wait in the server shutdown handler thread since it can clog
comment|// the handler threads and meta table could not be re-assigned in case
comment|// the corresponding server is down. So we queue them up here instead.
if|if
condition|(
operator|!
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|isFailoverCleanupDone
argument_list|()
condition|)
block|{
name|requeuedDeadServers
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|shouldSplitWal
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|deadservers
operator|.
name|add
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|this
operator|.
name|services
operator|.
name|getExecutorService
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|ServerShutdownHandler
argument_list|(
name|this
operator|.
name|master
argument_list|,
name|this
operator|.
name|services
argument_list|,
name|this
operator|.
name|deadservers
argument_list|,
name|serverName
argument_list|,
name|shouldSplitWal
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process the servers which died during master's initialization. It will be    * called after HMaster#assignMeta and AssignmentManager#joinCluster.    * */
specifier|synchronized
name|void
name|processQueuedDeadServers
parameter_list|()
block|{
if|if
condition|(
operator|!
name|services
operator|.
name|isServerShutdownHandlerEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Master hasn't enabled ServerShutdownHandler"
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|ServerName
argument_list|>
name|serverIterator
init|=
name|queuedDeadServers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|serverIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ServerName
name|tmpServerName
init|=
name|serverIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|expireServer
argument_list|(
name|tmpServerName
argument_list|)
expr_stmt|;
name|serverIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|requeuedDeadServers
operator|.
name|remove
argument_list|(
name|tmpServerName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|isFailoverCleanupDone
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AssignmentManager hasn't finished failover cleanup; waiting"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ServerName
name|tmpServerName
range|:
name|requeuedDeadServers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|processDeadServer
argument_list|(
name|tmpServerName
argument_list|,
name|requeuedDeadServers
operator|.
name|get
argument_list|(
name|tmpServerName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|requeuedDeadServers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/*    * Remove the server from the drain list.    */
specifier|public
name|boolean
name|removeServerFromDrainList
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
comment|// Warn if the server (sn) is not online.  ServerName is of the form:
comment|//<hostname> ,<port> ,<startcode>
if|if
condition|(
operator|!
name|this
operator|.
name|isServerOnline
argument_list|(
name|sn
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Server "
operator|+
name|sn
operator|+
literal|" is not currently online. "
operator|+
literal|"Removing from draining list anyway, as requested."
argument_list|)
expr_stmt|;
block|}
comment|// Remove the server from the draining servers lists.
return|return
name|this
operator|.
name|drainingServers
operator|.
name|remove
argument_list|(
name|sn
argument_list|)
return|;
block|}
comment|/*    * Add the server to the drain list.    */
specifier|public
name|boolean
name|addServerToDrainList
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
comment|// Warn if the server (sn) is not online.  ServerName is of the form:
comment|//<hostname> ,<port> ,<startcode>
if|if
condition|(
operator|!
name|this
operator|.
name|isServerOnline
argument_list|(
name|sn
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Server "
operator|+
name|sn
operator|+
literal|" is not currently online. "
operator|+
literal|"Ignoring request to add it to draining list."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Add the server to the draining servers lists, if it's not already in
comment|// it.
if|if
condition|(
name|this
operator|.
name|drainingServers
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Server "
operator|+
name|sn
operator|+
literal|" is already in the draining server list."
operator|+
literal|"Ignoring request to add it again."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|drainingServers
operator|.
name|add
argument_list|(
name|sn
argument_list|)
return|;
block|}
comment|// RPC methods to region servers
comment|/**    * Sends an OPEN RPC to the specified server to open the specified region.    *<p>    * Open should not fail but can if server just crashed.    *<p>    * @param server server to open a region    * @param region region to open    * @param favoredNodes    */
specifier|public
name|RegionOpeningState
name|sendRegionOpen
parameter_list|(
specifier|final
name|ServerName
name|server
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|getRsAdmin
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Attempting to send OPEN RPC to server "
operator|+
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|" failed because no RPC connection found to this server"
argument_list|)
throw|;
block|}
name|OpenRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildOpenRegionRequest
argument_list|(
name|server
argument_list|,
name|region
argument_list|,
name|favoredNodes
argument_list|,
operator|(
name|RecoveryMode
operator|.
name|LOG_REPLAY
operator|==
name|this
operator|.
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getLogRecoveryMode
argument_list|()
operator|)
argument_list|)
decl_stmt|;
try|try
block|{
name|OpenRegionResponse
name|response
init|=
name|admin
operator|.
name|openRegion
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|getRegionOpeningState
argument_list|(
name|response
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sends an OPEN RPC to the specified server to open the specified region.    *<p>    * Open should not fail but can if server just crashed.    *<p>    * @param server server to open a region    * @param regionOpenInfos info of a list of regions to open    * @return a list of region opening states    */
specifier|public
name|List
argument_list|<
name|RegionOpeningState
argument_list|>
name|sendRegionOpen
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|>
name|regionOpenInfos
parameter_list|)
throws|throws
name|IOException
block|{
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|getRsAdmin
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Attempting to send OPEN RPC to server "
operator|+
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|" failed because no RPC connection found to this server"
argument_list|)
throw|;
block|}
name|OpenRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildOpenRegionRequest
argument_list|(
name|server
argument_list|,
name|regionOpenInfos
argument_list|,
operator|(
name|RecoveryMode
operator|.
name|LOG_REPLAY
operator|==
name|this
operator|.
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getLogRecoveryMode
argument_list|()
operator|)
argument_list|)
decl_stmt|;
try|try
block|{
name|OpenRegionResponse
name|response
init|=
name|admin
operator|.
name|openRegion
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|getRegionOpeningStateList
argument_list|(
name|response
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sends an CLOSE RPC to the specified server to close the specified region.    *<p>    * A region server could reject the close request because it either does not    * have the specified region or the region is being split.    * @param server server to open a region    * @param region region to open    * @param dest - if the region is moved to another server, the destination server. null otherwise.    * @throws IOException    */
specifier|public
name|boolean
name|sendRegionClose
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Passed server is null"
argument_list|)
throw|;
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|getRsAdmin
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Attempting to send CLOSE RPC to server "
operator|+
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|" for region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" failed because no RPC connection found to this server"
argument_list|)
throw|;
block|}
return|return
name|ProtobufUtil
operator|.
name|closeRegion
argument_list|(
name|admin
argument_list|,
name|server
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|dest
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|sendRegionClose
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|HRegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sendRegionClose
argument_list|(
name|server
argument_list|,
name|region
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Sends a WARMUP RPC to the specified server to warmup the specified region.    *<p>    * A region server could reject the close request because it either does not    * have the specified region or the region is being split.    * @param server server to warmup a region    * @param region region to  warmup    */
specifier|public
name|void
name|sendRegionWarmup
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|HRegionInfo
name|region
parameter_list|)
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|getRsAdmin
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|warmupRegion
argument_list|(
name|admin
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Received exception in RPC for warmup server:"
operator|+
name|server
operator|+
literal|"region: "
operator|+
name|region
operator|+
literal|"exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Contacts a region server and waits up to timeout ms    * to close the region.  This bypasses the active hmaster.    */
specifier|public
specifier|static
name|void
name|closeRegionSilentlyAndWait
parameter_list|(
name|ClusterConnection
name|connection
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|AdminService
operator|.
name|BlockingInterface
name|rs
init|=
name|connection
operator|.
name|getAdmin
argument_list|(
name|server
argument_list|)
decl_stmt|;
try|try
block|{
name|ProtobufUtil
operator|.
name|closeRegion
argument_list|(
name|rs
argument_list|,
name|server
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when closing region: "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|expiration
init|=
name|timeout
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|expiration
condition|)
block|{
try|try
block|{
name|HRegionInfo
name|rsRegion
init|=
name|ProtobufUtil
operator|.
name|getRegionInfo
argument_list|(
name|rs
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsRegion
operator|==
literal|null
condition|)
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|instanceof
name|NotServingRegionException
condition|)
comment|// no need to retry again
return|return;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when retrieving regioninfo from: "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Region "
operator|+
name|region
operator|+
literal|" failed to close within"
operator|+
literal|" timeout "
operator|+
name|timeout
argument_list|)
throw|;
block|}
comment|/**    * Sends an MERGE REGIONS RPC to the specified server to merge the specified    * regions.    *<p>    * A region server could reject the close request because it either does not    * have the specified region.    * @param server server to merge regions    * @param region_a region to merge    * @param region_b region to merge    * @param forcible true if do a compulsory merge, otherwise we will only merge    *          two adjacent regions    * @throws IOException    */
specifier|public
name|void
name|sendRegionsMerge
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|HRegionInfo
name|region_a
parameter_list|,
name|HRegionInfo
name|region_b
parameter_list|,
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Passed server is null"
argument_list|)
throw|;
if|if
condition|(
name|region_a
operator|==
literal|null
operator|||
name|region_b
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Passed region is null"
argument_list|)
throw|;
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|getRsAdmin
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Attempting to send MERGE REGIONS RPC to server "
operator|+
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|" for region "
operator|+
name|region_a
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|","
operator|+
name|region_b
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" failed because no RPC connection found to this server"
argument_list|)
throw|;
block|}
name|ProtobufUtil
operator|.
name|mergeRegions
argument_list|(
name|admin
argument_list|,
name|region_a
argument_list|,
name|region_b
argument_list|,
name|forcible
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if a region server is reachable and has the expected start code    */
specifier|public
name|boolean
name|isServerReachable
parameter_list|(
name|ServerName
name|server
parameter_list|)
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Passed server is null"
argument_list|)
throw|;
name|RetryCounter
name|retryCounter
init|=
name|pingRetryCounterFactory
operator|.
name|create
argument_list|()
decl_stmt|;
while|while
condition|(
name|retryCounter
operator|.
name|shouldRetry
argument_list|()
condition|)
block|{
try|try
block|{
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|getRsAdmin
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|ServerInfo
name|info
init|=
name|ProtobufUtil
operator|.
name|getServerInfo
argument_list|(
name|admin
argument_list|)
decl_stmt|;
return|return
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|hasServerName
argument_list|()
operator|&&
name|server
operator|.
name|getStartcode
argument_list|()
operator|==
name|info
operator|.
name|getServerName
argument_list|()
operator|.
name|getStartCode
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't reach "
operator|+
name|server
operator|+
literal|", try="
operator|+
name|retryCounter
operator|.
name|getAttemptTimes
argument_list|()
operator|+
literal|" of "
operator|+
name|retryCounter
operator|.
name|getMaxAttempts
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
try|try
block|{
name|retryCounter
operator|.
name|sleepUntilNextRetry
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**     * @param sn     * @return Admin interface for the remote regionserver named<code>sn</code>     * @throws IOException     * @throws RetriesExhaustedException wrapping a ConnectException if failed     */
specifier|private
name|AdminService
operator|.
name|BlockingInterface
name|getRsAdmin
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|rsAdmins
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New admin connection to "
operator|+
name|sn
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sn
operator|.
name|equals
argument_list|(
name|master
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|&&
name|master
operator|instanceof
name|HRegionServer
condition|)
block|{
comment|// A master is also a region server now, see HBASE-10569 for details
name|admin
operator|=
operator|(
operator|(
name|HRegionServer
operator|)
name|master
operator|)
operator|.
name|getRSRpcServices
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rsAdmins
operator|.
name|put
argument_list|(
name|sn
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
return|return
name|admin
return|;
block|}
comment|/**    * Wait for the region servers to report in.    * We will wait until one of this condition is met:    *  - the master is stopped    *  - the 'hbase.master.wait.on.regionservers.maxtostart' number of    *    region servers is reached    *  - the 'hbase.master.wait.on.regionservers.mintostart' is reached AND    *   there have been no new region server in for    *      'hbase.master.wait.on.regionservers.interval' time AND    *   the 'hbase.master.wait.on.regionservers.timeout' is reached    *    * @throws InterruptedException    */
specifier|public
name|void
name|waitForRegionServers
parameter_list|(
name|MonitoredTask
name|status
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|long
name|interval
init|=
name|this
operator|.
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|WAIT_ON_REGIONSERVERS_INTERVAL
argument_list|,
literal|1500
argument_list|)
decl_stmt|;
specifier|final
name|long
name|timeout
init|=
name|this
operator|.
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|WAIT_ON_REGIONSERVERS_TIMEOUT
argument_list|,
literal|4500
argument_list|)
decl_stmt|;
name|int
name|defaultMinToStart
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|BaseLoadBalancer
operator|.
name|tablesOnMaster
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
comment|// If we assign regions to master, we'd like to start
comment|// at least another region server so that we don't
comment|// assign all regions to master if other region servers
comment|// don't come up in time.
name|defaultMinToStart
operator|=
literal|2
expr_stmt|;
block|}
name|int
name|minToStart
init|=
name|this
operator|.
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
name|defaultMinToStart
argument_list|)
decl_stmt|;
if|if
condition|(
name|minToStart
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The value of '%s' (%d) can not be less than 1, ignoring."
argument_list|,
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
name|minToStart
argument_list|)
argument_list|)
expr_stmt|;
name|minToStart
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|maxToStart
init|=
name|this
operator|.
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|WAIT_ON_REGIONSERVERS_MAXTOSTART
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxToStart
operator|<
name|minToStart
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The value of '%s' (%d) is set less than '%s' (%d), ignoring."
argument_list|,
name|WAIT_ON_REGIONSERVERS_MAXTOSTART
argument_list|,
name|maxToStart
argument_list|,
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
name|minToStart
argument_list|)
argument_list|)
expr_stmt|;
name|maxToStart
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|long
name|startTime
init|=
name|now
decl_stmt|;
name|long
name|slept
init|=
literal|0
decl_stmt|;
name|long
name|lastLogTime
init|=
literal|0
decl_stmt|;
name|long
name|lastCountChange
init|=
name|startTime
decl_stmt|;
name|int
name|count
init|=
name|countOfRegionServers
argument_list|()
decl_stmt|;
name|int
name|oldCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|this
operator|.
name|master
operator|.
name|isStopped
argument_list|()
operator|&&
name|count
operator|<
name|maxToStart
operator|&&
operator|(
name|lastCountChange
operator|+
name|interval
operator|>
name|now
operator|||
name|timeout
operator|>
name|slept
operator|||
name|count
operator|<
name|minToStart
operator|)
condition|)
block|{
comment|// Log some info at every interval time or if there is a change
if|if
condition|(
name|oldCount
operator|!=
name|count
operator|||
name|lastLogTime
operator|+
name|interval
operator|<
name|now
condition|)
block|{
name|lastLogTime
operator|=
name|now
expr_stmt|;
name|String
name|msg
init|=
literal|"Waiting for region servers count to settle; currently"
operator|+
literal|" checked in "
operator|+
name|count
operator|+
literal|", slept for "
operator|+
name|slept
operator|+
literal|" ms,"
operator|+
literal|" expecting minimum of "
operator|+
name|minToStart
operator|+
literal|", maximum of "
operator|+
name|maxToStart
operator|+
literal|", timeout of "
operator|+
name|timeout
operator|+
literal|" ms, interval of "
operator|+
name|interval
operator|+
literal|" ms."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|// We sleep for some time
specifier|final
name|long
name|sleepTime
init|=
literal|50
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|now
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|slept
operator|=
name|now
operator|-
name|startTime
expr_stmt|;
name|oldCount
operator|=
name|count
expr_stmt|;
name|count
operator|=
name|countOfRegionServers
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|!=
name|oldCount
condition|)
block|{
name|lastCountChange
operator|=
name|now
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished waiting for region servers count to settle;"
operator|+
literal|" checked in "
operator|+
name|count
operator|+
literal|", slept for "
operator|+
name|slept
operator|+
literal|" ms,"
operator|+
literal|" expecting minimum of "
operator|+
name|minToStart
operator|+
literal|", maximum of "
operator|+
name|maxToStart
operator|+
literal|","
operator|+
literal|" master is "
operator|+
operator|(
name|this
operator|.
name|master
operator|.
name|isStopped
argument_list|()
condition|?
literal|"stopped."
else|:
literal|"running"
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return A copy of the internal list of online servers.    */
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getOnlineServersList
parameter_list|()
block|{
comment|// TODO: optimize the load balancer call so we don't need to make a new list
comment|// TODO: FIX. THIS IS POPULAR CALL.
return|return
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|this
operator|.
name|onlineServers
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return A copy of the internal list of draining servers.    */
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getDrainingServersList
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|this
operator|.
name|drainingServers
argument_list|)
return|;
block|}
comment|/**    * @return A copy of the internal set of deadNotExpired servers.    */
name|Set
argument_list|<
name|ServerName
argument_list|>
name|getDeadNotExpiredServers
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|this
operator|.
name|queuedDeadServers
argument_list|)
return|;
block|}
comment|/**    * During startup, if we figure it is not a failover, i.e. there is    * no more WAL files to split, we won't try to recover these dead servers.    * So we just remove them from the queue. Use caution in calling this.    */
name|void
name|removeRequeuedDeadServers
parameter_list|()
block|{
name|requeuedDeadServers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return A copy of the internal map of requeuedDeadServers servers and their corresponding    *         splitlog need flag.    */
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|getRequeuedDeadServers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|requeuedDeadServers
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isServerOnline
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|serverName
operator|!=
literal|null
operator|&&
name|onlineServers
operator|.
name|containsKey
argument_list|(
name|serverName
argument_list|)
return|;
block|}
comment|/**    * Check if a server is known to be dead.  A server can be online,    * or known to be dead, or unknown to this manager (i.e, not online,    * not known to be dead either. it is simply not tracked by the    * master any more, for example, a very old previous instance).    */
specifier|public
specifier|synchronized
name|boolean
name|isServerDead
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|serverName
operator|==
literal|null
operator|||
name|deadservers
operator|.
name|isDeadServer
argument_list|(
name|serverName
argument_list|)
operator|||
name|queuedDeadServers
operator|.
name|contains
argument_list|(
name|serverName
argument_list|)
operator|||
name|requeuedDeadServers
operator|.
name|containsKey
argument_list|(
name|serverName
argument_list|)
return|;
block|}
specifier|public
name|void
name|shutdownCluster
parameter_list|()
block|{
name|this
operator|.
name|clusterShutdown
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|master
operator|.
name|stop
argument_list|(
literal|"Cluster shutdown requested"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isClusterShutdown
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterShutdown
return|;
block|}
comment|/**    * Stop the ServerManager.  Currently closes the connection to the master.    */
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Attempt to close connection to master failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates a list of possible destinations for a region. It contains the online servers, but not    *  the draining or dying servers.    *  @param serverToExclude can be null if there is no server to exclude    */
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|createDestinationServersList
parameter_list|(
specifier|final
name|ServerName
name|serverToExclude
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ServerName
argument_list|>
name|destServers
init|=
name|getOnlineServersList
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverToExclude
operator|!=
literal|null
condition|)
block|{
name|destServers
operator|.
name|remove
argument_list|(
name|serverToExclude
argument_list|)
expr_stmt|;
block|}
comment|// Loop through the draining server list and remove them from the server list
specifier|final
name|List
argument_list|<
name|ServerName
argument_list|>
name|drainingServersCopy
init|=
name|getDrainingServersList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|drainingServersCopy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|ServerName
name|server
range|:
name|drainingServersCopy
control|)
block|{
name|destServers
operator|.
name|remove
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove the deadNotExpired servers from the server list.
name|removeDeadNotExpiredServers
argument_list|(
name|destServers
argument_list|)
expr_stmt|;
return|return
name|destServers
return|;
block|}
comment|/**    * Calls {@link #createDestinationServersList} without server to exclude.    */
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|createDestinationServersList
parameter_list|()
block|{
return|return
name|createDestinationServersList
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**     * Loop through the deadNotExpired server list and remove them from the     * servers.     * This function should be used carefully outside of this class. You should use a high level     *  method such as {@link #createDestinationServersList()} instead of managing you own list.     */
name|void
name|removeDeadNotExpiredServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|Set
argument_list|<
name|ServerName
argument_list|>
name|deadNotExpiredServersCopy
init|=
name|this
operator|.
name|getDeadNotExpiredServers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|deadNotExpiredServersCopy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ServerName
name|server
range|:
name|deadNotExpiredServersCopy
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing dead but not expired server: "
operator|+
name|server
operator|+
literal|" from eligible server pool."
argument_list|)
expr_stmt|;
name|servers
operator|.
name|remove
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * To clear any dead server with same host name and port of any online server    */
name|void
name|clearDeadServersWithSameHostNameAndPortOfOnlineServer
parameter_list|()
block|{
for|for
control|(
name|ServerName
name|serverName
range|:
name|getOnlineServersList
argument_list|()
control|)
block|{
name|deadservers
operator|.
name|cleanAllPreviousInstances
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

