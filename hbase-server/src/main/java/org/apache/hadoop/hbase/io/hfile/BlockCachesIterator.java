begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Iterator over an array of BlockCache CachedBlocks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|BlockCachesIterator
implements|implements
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|final
name|BlockCache
index|[]
name|bcs
decl_stmt|;
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|current
decl_stmt|;
name|BlockCachesIterator
parameter_list|(
specifier|final
name|BlockCache
index|[]
name|blockCaches
parameter_list|)
block|{
name|this
operator|.
name|bcs
operator|=
name|blockCaches
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|this
operator|.
name|bcs
index|[
name|this
operator|.
name|index
index|]
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|current
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|true
return|;
name|this
operator|.
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|index
operator|>=
name|this
operator|.
name|bcs
operator|.
name|length
condition|)
return|return
literal|false
return|;
name|this
operator|.
name|current
operator|=
name|this
operator|.
name|bcs
index|[
name|this
operator|.
name|index
index|]
operator|.
name|iterator
argument_list|()
expr_stmt|;
return|return
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CachedBlock
name|next
parameter_list|()
block|{
return|return
name|this
operator|.
name|current
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

