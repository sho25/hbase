begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupManifest
operator|.
name|BackupImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|master
operator|.
name|LogRollMasterProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import

begin_comment
comment|/**  * A Handler to carry the operations of backup progress  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|BackupHandler
implements|implements
name|Callable
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BackupHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// backup phase
comment|// for overall backup (for table list, some table may go online, while some may go offline)
specifier|protected
specifier|static
enum|enum
name|BACKUPPHASE
block|{
name|REQUEST
block|,
name|SNAPSHOT
block|,
name|PREPARE_INCREMENTAL
block|,
name|SNAPSHOTCOPY
block|,
name|INCREMENTAL_COPY
block|,
name|STORE_MANIFEST
block|;   }
comment|// backup status flag
specifier|protected
specifier|static
enum|enum
name|BACKUPSTATUS
block|{
name|WAITING
block|,
name|ONGOING
block|,
name|COMPLETE
block|,
name|FAILED
block|,
name|CANCELLED
block|;   }
specifier|protected
name|BackupContext
name|backupContext
decl_stmt|;
specifier|private
name|BackupManager
name|backupManager
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|BackupHandler
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|,
name|BackupManager
name|backupManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|backupContext
operator|=
name|backupContext
expr_stmt|;
name|this
operator|.
name|backupManager
operator|=
name|backupManager
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|BackupContext
name|getBackupContext
parameter_list|()
block|{
return|return
name|backupContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// overall backup begin
name|this
operator|.
name|beginBackup
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newTimestamps
init|=
literal|null
decl_stmt|;
name|boolean
name|fromExistingSnapshot
init|=
literal|false
decl_stmt|;
comment|// supported by future jira
comment|// handle full or incremental backup for table or table list
if|if
condition|(
name|backupContext
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_FULL
argument_list|)
condition|)
block|{
name|String
name|savedStartCode
init|=
literal|null
decl_stmt|;
name|HBaseAdmin
name|hbadmin
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|boolean
name|firstBackup
init|=
literal|false
decl_stmt|;
comment|// do snapshot for full table backup, if backing up from existing snapshot, then skip the
comment|// step of taking snapshot
if|if
condition|(
name|fromExistingSnapshot
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Backup from existing snapshot, so skip the snapshot step. "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"This feature will be supported by a future jira"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Backup from existing snapshot is not supported"
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
name|savedStartCode
operator|=
name|backupManager
operator|.
name|readBackupStartCode
argument_list|()
expr_stmt|;
name|firstBackup
operator|=
name|savedStartCode
operator|==
literal|null
expr_stmt|;
if|if
condition|(
name|firstBackup
condition|)
block|{
comment|// This is our first backup. Let's put some marker on ZK so that we can hold the logs
comment|// while we do the backup.
name|backupManager
operator|.
name|writeBackupStartCode
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
comment|// We roll log here before we do the snapshot. It is possible there is duplicate data
comment|// in the log that is already in the snapshot. But if we do it after the snapshot, we
comment|// could have data loss.
comment|// A better approach is to do the roll log on each RS in the same global procedure as
comment|// the snapshot.
name|LOG
operator|.
name|info
argument_list|(
literal|"Execute roll log procedure for full backup ..."
argument_list|)
expr_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hbadmin
operator|=
operator|(
name|HBaseAdmin
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|hbadmin
operator|.
name|execProcedure
argument_list|(
name|LogRollMasterProcedureManager
operator|.
name|ROLLLOG_PROCEDURE_SIGNATURE
argument_list|,
name|LogRollMasterProcedureManager
operator|.
name|ROLLLOG_PROCEDURE_NAME
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|newTimestamps
operator|=
name|backupManager
operator|.
name|readRegionServerLastLogRollResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstBackup
condition|)
block|{
comment|// Updates registered log files
comment|// We record ALL old WAL files as registered, because
comment|// this is a first full backup in the system and these
comment|// files are not needed for next incremental backup
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
name|BackupUtil
operator|.
name|getWALFilesOlderThan
argument_list|(
name|conf
argument_list|,
name|newTimestamps
argument_list|)
decl_stmt|;
name|backupManager
operator|.
name|recordWALFiles
argument_list|(
name|logFiles
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|snapshotForFullBackup
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackupException
name|e
parameter_list|)
block|{
comment|// fail the overall backup and return
name|this
operator|.
name|failBackup
argument_list|(
name|backupContext
argument_list|,
name|e
argument_list|,
literal|"Unexpected BackupException : "
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbadmin
operator|!=
literal|null
condition|)
block|{
name|hbadmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// update the faked progress currently for snapshot done
name|this
operator|.
name|updateProgress
argument_list|(
literal|"10.0%"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// do snapshot copy
try|try
block|{
name|this
operator|.
name|snapshotCopy
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fail the overall backup and return
name|this
operator|.
name|failBackup
argument_list|(
name|backupContext
argument_list|,
name|e
argument_list|,
literal|"Unexpected BackupException : "
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Updates incremental backup table set
name|backupManager
operator|.
name|addIncrementalBackupTableSet
argument_list|(
name|backupContext
operator|.
name|getTables
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|backupContext
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_INCR
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"For incremental backup, current table set is "
operator|+
name|backupManager
operator|.
name|getIncrementalBackupTableSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// do incremental table backup preparation
name|backupContext
operator|.
name|setPhase
argument_list|(
name|BACKUPPHASE
operator|.
name|PREPARE_INCREMENTAL
argument_list|)
expr_stmt|;
comment|// avoid action if has been cancelled
if|if
condition|(
name|backupContext
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|IncrementalBackupManager
name|incrBackupManager
init|=
operator|new
name|IncrementalBackupManager
argument_list|(
name|backupManager
argument_list|)
decl_stmt|;
name|newTimestamps
operator|=
name|incrBackupManager
operator|.
name|getIncrBackupLogFileList
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fail the overall backup and return
name|this
operator|.
name|failBackup
argument_list|(
name|backupContext
argument_list|,
name|e
argument_list|,
literal|"Unexpected Exception : "
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// update the faked progress currently for incremental preparation done
name|this
operator|.
name|updateProgress
argument_list|(
literal|"10.0%"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// do incremental copy
try|try
block|{
comment|// copy out the table and region info files for each table
name|BackupUtil
operator|.
name|copyTableRegionInfo
argument_list|(
name|backupContext
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|incrementalCopy
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
comment|// Save list of WAL files copied
name|backupManager
operator|.
name|recordWALFiles
argument_list|(
name|backupContext
operator|.
name|getIncrBackupFileList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fail the overall backup and return
name|this
operator|.
name|failBackup
argument_list|(
name|backupContext
argument_list|,
name|e
argument_list|,
literal|"Unexpected exception doing incremental copy : "
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unsupport backup type: "
operator|+
name|backupContext
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set overall backup status: complete. Here we make sure to complete the backup. After this
comment|// checkpoint, even if entering cancel process, will let the backup finished
name|backupContext
operator|.
name|setFlag
argument_list|(
name|BACKUPSTATUS
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fromExistingSnapshot
condition|)
block|{
if|if
condition|(
name|backupContext
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_INCR
argument_list|)
condition|)
block|{
comment|// Set the previousTimestampMap which is before this current log roll to the manifest.
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|previousTimestampMap
init|=
name|backupManager
operator|.
name|readLogTimestampMap
argument_list|()
decl_stmt|;
name|backupContext
operator|.
name|setIncrTimestampMap
argument_list|(
name|previousTimestampMap
argument_list|)
expr_stmt|;
block|}
comment|// The table list in backupContext is good for both full backup and incremental backup.
comment|// For incremental backup, it contains the incremental backup table set.
name|backupManager
operator|.
name|writeRegionServerLogTimestamp
argument_list|(
name|backupContext
operator|.
name|getTables
argument_list|()
argument_list|,
name|newTimestamps
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|newTableSetTimestampMap
init|=
name|backupManager
operator|.
name|readLogTimestampMap
argument_list|()
decl_stmt|;
name|String
name|newStartCode
init|=
name|BackupUtil
operator|.
name|getMinValue
argument_list|(
name|BackupUtil
operator|.
name|getRSLogTimestampMins
argument_list|(
name|newTableSetTimestampMap
argument_list|)
argument_list|)
decl_stmt|;
name|backupManager
operator|.
name|writeBackupStartCode
argument_list|(
name|newStartCode
argument_list|)
expr_stmt|;
block|}
comment|// backup complete
name|this
operator|.
name|completeBackup
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// even during completing backup (#completeBackup(backupContext)), exception may occur, or
comment|// exception occur during other process, fail the backup finally
name|this
operator|.
name|failBackup
argument_list|(
name|backupContext
argument_list|,
name|e
argument_list|,
literal|"Error caught during backup progress: "
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Begin the overall backup.    * @param backupContext backup context    * @throws IOException exception    */
specifier|private
name|void
name|beginBackup
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set the start timestamp of the overall backup
name|long
name|startTs
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|backupContext
operator|.
name|setStartTs
argument_list|(
name|startTs
argument_list|)
expr_stmt|;
comment|// set overall backup status: ongoing
name|backupContext
operator|.
name|setFlag
argument_list|(
name|BACKUPSTATUS
operator|.
name|ONGOING
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup "
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" starts at "
operator|+
name|startTs
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|backupManager
operator|.
name|updateBackupStatus
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Backup session "
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" has been started."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Snapshot for full table backup.    * @param backupContext backup context    * @throws IOException exception    */
specifier|private
name|void
name|snapshotForFullBackup
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HBase snapshot full backup for "
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
comment|// avoid action if has been cancelled
if|if
condition|(
name|backupContext
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
name|HBaseAdmin
name|hbadmin
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
comment|// we do HBase snapshot for tables in the table list one by one currently
for|for
control|(
name|String
name|table
range|:
name|backupContext
operator|.
name|getTables
argument_list|()
control|)
block|{
comment|// avoid action if it has been cancelled
if|if
condition|(
name|backupContext
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
name|HBaseProtos
operator|.
name|SnapshotDescription
name|backupSnapshot
decl_stmt|;
try|try
block|{
comment|// wrap a SnapshotDescription for offline/online snapshot
name|backupSnapshot
operator|=
name|this
operator|.
name|wrapSnapshotDescription
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// set the snapshot name in BackupStatus of this table
name|backupContext
operator|.
name|setSnapshotName
argument_list|(
name|table
argument_list|,
name|backupSnapshot
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Kick off snapshot for backup
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hbadmin
operator|=
operator|(
name|HBaseAdmin
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|hbadmin
operator|.
name|snapshot
argument_list|(
name|backupSnapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// In DEBUG mode we log message already.
comment|// This is not to duplicate that message.
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot has been launched, waiting to finish ..."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Snapshot failed to create "
operator|+
name|getMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// currently, we fail the overall backup if any table in the list failed, so throw the
comment|// exception out for overall backup failing
throw|throw
operator|new
name|BackupException
argument_list|(
literal|"Backup snapshot failed on table "
operator|+
name|table
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbadmin
operator|!=
literal|null
condition|)
block|{
name|hbadmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// set the snapshot name in BackupStatus of this table, only after snapshot success.
name|backupContext
operator|.
name|setSnapshotName
argument_list|(
name|table
argument_list|,
name|backupSnapshot
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// for each table in the backup table list
block|}
comment|/**    * Fail the overall backup.    * @param backupContext backup context    * @param e exception    * @throws Exception exception    */
specifier|private
name|void
name|failBackup
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|,
name|Exception
name|e
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
operator|+
name|getMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// If this is a cancel exception, then we've already cleaned.
if|if
condition|(
name|this
operator|.
name|backupContext
operator|.
name|getFlag
argument_list|()
operator|.
name|equals
argument_list|(
name|BACKUPSTATUS
operator|.
name|CANCELLED
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// set the failure timestamp of the overall backup
name|backupContext
operator|.
name|setEndTs
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// set failure message
name|backupContext
operator|.
name|setFailedMsg
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// set overall backup status: failed
name|backupContext
operator|.
name|setFlag
argument_list|(
name|BACKUPSTATUS
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// compose the backup failed data
name|String
name|backupFailedData
init|=
literal|"BackupId="
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
operator|+
literal|",startts="
operator|+
name|backupContext
operator|.
name|getStartTs
argument_list|()
operator|+
literal|",failedts="
operator|+
name|backupContext
operator|.
name|getEndTs
argument_list|()
operator|+
literal|",failedphase="
operator|+
name|backupContext
operator|.
name|getPhase
argument_list|()
operator|+
literal|",failedmessage="
operator|+
name|backupContext
operator|.
name|getFailedMsg
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|backupFailedData
argument_list|)
expr_stmt|;
name|backupManager
operator|.
name|updateBackupStatus
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
comment|// if full backup, then delete HBase snapshots if there already have snapshots taken
comment|// and also clean up export snapshot log files if exist
if|if
condition|(
name|backupContext
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_FULL
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|backupContext
operator|.
name|fromExistingSnapshot
argument_list|()
condition|)
block|{
name|this
operator|.
name|deleteSnapshot
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cleanupExportSnapshotLog
argument_list|()
expr_stmt|;
block|}
comment|/*      * else { // support incremental backup code in future jira // TODO. See HBASE-14124 }      */
comment|// clean up the uncompleted data at target directory if the ongoing backup has already entered
comment|// the copy phase
comment|// For incremental backup, DistCp logs will be cleaned with the targetDir.
name|this
operator|.
name|cleanupTargetDir
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup "
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" failed."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the ongoing back token znode with new progress.    * @param newProgress progress    * @param bytesCopied bytes copied    * @throws NoNodeException exception    */
specifier|public
name|void
name|updateProgress
parameter_list|(
name|String
name|newProgress
parameter_list|,
name|long
name|bytesCopied
parameter_list|)
throws|throws
name|IOException
block|{
comment|// compose the new backup progress data, using fake number for now
name|String
name|backupProgressData
init|=
name|newProgress
decl_stmt|;
name|backupContext
operator|.
name|setProgress
argument_list|(
name|newProgress
argument_list|)
expr_stmt|;
name|backupManager
operator|.
name|updateBackupStatus
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Backup progress data \""
operator|+
name|backupProgressData
operator|+
literal|"\" has been updated to hbase:backup for "
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Complete the overall backup.    * @param backupContext backup context    * @throws Exception exception    */
specifier|private
name|void
name|completeBackup
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// set the complete timestamp of the overall backup
name|backupContext
operator|.
name|setEndTs
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// set overall backup status: complete
name|backupContext
operator|.
name|setFlag
argument_list|(
name|BACKUPSTATUS
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// add and store the manifest for the backup
name|this
operator|.
name|addManifest
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
comment|// after major steps done and manifest persisted, do convert if needed for incremental backup
comment|/* in-fly convert code here, provided by future jira */
name|LOG
operator|.
name|debug
argument_list|(
literal|"in-fly convert code here, provided by future jira"
argument_list|)
expr_stmt|;
comment|// compose the backup complete data
name|String
name|backupCompleteData
init|=
name|this
operator|.
name|obtainBackupMetaDataStr
argument_list|(
name|backupContext
argument_list|)
operator|+
literal|",startts="
operator|+
name|backupContext
operator|.
name|getStartTs
argument_list|()
operator|+
literal|",completets="
operator|+
name|backupContext
operator|.
name|getEndTs
argument_list|()
operator|+
literal|",bytescopied="
operator|+
name|backupContext
operator|.
name|getTotalBytesCopied
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Backup "
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" finished: "
operator|+
name|backupCompleteData
argument_list|)
expr_stmt|;
block|}
name|backupManager
operator|.
name|updateBackupStatus
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
comment|// when full backup is done:
comment|// - delete HBase snapshot
comment|// - clean up directories with prefix "exportSnapshot-", which are generated when exporting
comment|// snapshots
if|if
condition|(
name|backupContext
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_FULL
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|backupContext
operator|.
name|fromExistingSnapshot
argument_list|()
condition|)
block|{
name|this
operator|.
name|deleteSnapshot
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cleanupExportSnapshotLog
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|backupContext
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_INCR
argument_list|)
condition|)
block|{
name|this
operator|.
name|cleanupDistCpLog
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|" other backup types have not been implemented yet"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup "
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" completed."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get backup request meta data dir as string.    * @param backupContext backup context    * @return meta data dir    */
specifier|private
name|String
name|obtainBackupMetaDataStr
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"type="
operator|+
name|backupContext
operator|.
name|getType
argument_list|()
operator|+
literal|",tablelist="
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|table
range|:
name|backupContext
operator|.
name|getTables
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|table
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|lastIndexOf
argument_list|(
literal|";"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|delete
argument_list|(
name|sb
operator|.
name|lastIndexOf
argument_list|(
literal|";"
argument_list|)
argument_list|,
name|sb
operator|.
name|lastIndexOf
argument_list|(
literal|";"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|",targetRootDir="
operator|+
name|backupContext
operator|.
name|getTargetRootDir
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|backupContext
operator|.
name|fromExistingSnapshot
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",snapshot="
operator|+
name|backupContext
operator|.
name|getExistingSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Do snapshot copy.    * @param backupContext backup context    * @throws Exception exception    */
specifier|private
name|void
name|snapshotCopy
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot copy is starting."
argument_list|)
expr_stmt|;
comment|// set overall backup phase: snapshot_copy
name|backupContext
operator|.
name|setPhase
argument_list|(
name|BACKUPPHASE
operator|.
name|SNAPSHOTCOPY
argument_list|)
expr_stmt|;
comment|// avoid action if has been cancelled
if|if
condition|(
name|backupContext
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// call ExportSnapshot to copy files based on hbase snapshot for backup
comment|// ExportSnapshot only support single snapshot export, need loop for multiple tables case
name|BackupCopyService
name|copyService
init|=
name|BackupRestoreServiceFactory
operator|.
name|getBackupCopyService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// number of snapshots matches number of tables
name|float
name|numOfSnapshots
init|=
name|backupContext
operator|.
name|getSnapshotNames
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"There are "
operator|+
operator|(
name|int
operator|)
name|numOfSnapshots
operator|+
literal|" snapshots to be copied."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|table
range|:
name|backupContext
operator|.
name|getTables
argument_list|()
control|)
block|{
comment|// Currently we simply set the sub copy tasks by counting the table snapshot number, we can
comment|// calculate the real files' size for the percentage in the future.
comment|// TODO this below
comment|// backupCopier.setSubTaskPercntgInWholeTask(1f / numOfSnapshots);
name|int
name|res
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-snapshot"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|backupContext
operator|.
name|getSnapshotName
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-copy-to"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
name|backupContext
operator|.
name|getBackupStatus
argument_list|(
name|table
argument_list|)
operator|.
name|getTargetDir
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copy snapshot "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" to "
operator|+
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|res
operator|=
name|copyService
operator|.
name|copy
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
name|BackupCopyService
operator|.
name|Type
operator|.
name|FULL
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|// if one snapshot export failed, do not continue for remained snapshots
if|if
condition|(
name|res
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exporting Snapshot "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" failed with return code: "
operator|+
name|res
operator|+
literal|"."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed of exporting snapshot "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" to "
operator|+
name|args
index|[
literal|3
index|]
operator|+
literal|" with reason code "
operator|+
name|res
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot copy "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" finished."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wrap a SnapshotDescription for a target table.    * @param table table    * @return a SnapshotDescription especially for backup.    */
specifier|private
name|SnapshotDescription
name|wrapSnapshotDescription
parameter_list|(
name|String
name|table
parameter_list|)
block|{
comment|// Mock a SnapshotDescription from backupContext to call SnapshotManager function,
comment|// Name it in the format "snapshot_<timestamp>_<table>"
name|HBaseProtos
operator|.
name|SnapshotDescription
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
literal|"snapshot_"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
operator|+
literal|"_"
operator|+
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
operator|+
literal|"_"
operator|+
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseProtos
operator|.
name|SnapshotDescription
name|backupSnapshot
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wrapped a SnapshotDescription "
operator|+
name|backupSnapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" from backupContext to request snapshot for backup."
argument_list|)
expr_stmt|;
return|return
name|backupSnapshot
return|;
block|}
comment|/**    * Delete HBase snapshot for backup.    * @param backupCtx backup context    * @throws Exception exception    */
specifier|private
name|void
name|deleteSnapshot
parameter_list|(
name|BackupContext
name|backupCtx
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to delete snapshot for full backup."
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Admin
name|admin
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|snapshotName
range|:
name|backupCtx
operator|.
name|getSnapshotNames
argument_list|()
control|)
block|{
if|if
condition|(
name|snapshotName
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to delete snapshot: "
operator|+
name|snapshotName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting the snapshot "
operator|+
name|snapshotName
operator|+
literal|" for backup "
operator|+
name|backupCtx
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" succeeded."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Clean up directories with prefix "exportSnapshot-", which are generated when exporting    * snapshots.    * @throws IOException exception    */
specifier|private
name|void
name|cleanupExportSnapshotLog
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FSUtils
operator|.
name|getCurrentFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|stagingDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|BackupRestoreConstants
operator|.
name|CONF_STAGING_ROOT
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|stagingDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"exportSnapshot-"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete log files of exporting snapshot: "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FSUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not delete "
operator|+
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Clean up directories with prefix "_distcp_logs-", which are generated when DistCp copying    * hlogs.    * @throws IOException exception    */
specifier|private
name|void
name|cleanupDistCpLog
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|backupContext
operator|.
name|getHLogTargetDir
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|rootPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|rootPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_distcp_logs"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete log files of DistCp: "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Clean up the uncompleted data at target directory if the ongoing backup has already entered the    * copy phase.    */
specifier|private
name|void
name|cleanupTargetDir
parameter_list|()
block|{
try|try
block|{
comment|// clean up the uncompleted data at target directory if the ongoing backup has already entered
comment|// the copy phase
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to cleanup up target dir. Current backup phase: "
operator|+
name|backupContext
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|backupContext
operator|.
name|getPhase
argument_list|()
operator|.
name|equals
argument_list|(
name|BACKUPPHASE
operator|.
name|SNAPSHOTCOPY
argument_list|)
operator|||
name|backupContext
operator|.
name|getPhase
argument_list|()
operator|.
name|equals
argument_list|(
name|BACKUPPHASE
operator|.
name|INCREMENTAL_COPY
argument_list|)
operator|||
name|backupContext
operator|.
name|getPhase
argument_list|()
operator|.
name|equals
argument_list|(
name|BACKUPPHASE
operator|.
name|STORE_MANIFEST
argument_list|)
condition|)
block|{
name|FileSystem
name|outputFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
name|backupContext
operator|.
name|getTargetRootDir
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// now treat one backup as a transaction, clean up data that has been partially copied at
comment|// table level
for|for
control|(
name|String
name|table
range|:
name|backupContext
operator|.
name|getTables
argument_list|()
control|)
block|{
name|Path
name|targetDirPath
init|=
operator|new
name|Path
argument_list|(
name|HBackupFileSystem
operator|.
name|getTableBackupDir
argument_list|(
name|backupContext
operator|.
name|getTargetRootDir
argument_list|()
argument_list|,
name|backupContext
operator|.
name|getBackupId
argument_list|()
argument_list|,
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFs
operator|.
name|delete
argument_list|(
name|targetDirPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up uncompleted backup data at "
operator|+
name|targetDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|" done."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No data has been copied to "
operator|+
name|targetDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
name|Path
name|tableDir
init|=
name|targetDirPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|backups
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|outputFs
argument_list|,
name|tableDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|backups
operator|==
literal|null
operator|||
name|backups
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|outputFs
operator|.
name|delete
argument_list|(
name|tableDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|tableDir
operator|.
name|toString
argument_list|()
operator|+
literal|" is empty, remove it."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cleaning up uncompleted backup data of "
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" at "
operator|+
name|backupContext
operator|.
name|getTargetRootDir
argument_list|()
operator|+
literal|" failed due to "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add manifest for the current backup. The manifest is stored     * within the table backup directory.      * @param backupContext The current backup context    * @throws IOException exception    * @throws BackupException exception    */
specifier|private
name|void
name|addManifest
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|BackupException
block|{
comment|// set the overall backup phase : store manifest
name|backupContext
operator|.
name|setPhase
argument_list|(
name|BACKUPPHASE
operator|.
name|STORE_MANIFEST
argument_list|)
expr_stmt|;
comment|// avoid action if has been cancelled
if|if
condition|(
name|backupContext
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
name|BackupManifest
name|manifest
decl_stmt|;
name|boolean
name|fromExistingSnapshot
init|=
literal|false
decl_stmt|;
comment|// to be implemented in future jira
comment|// Since we have each table's backup in its own directory structure,
comment|// we'll store its manifest with the table directory.
for|for
control|(
name|String
name|table
range|:
name|backupContext
operator|.
name|getTables
argument_list|()
control|)
block|{
name|manifest
operator|=
operator|new
name|BackupManifest
argument_list|(
name|backupContext
argument_list|,
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromExistingSnapshot
condition|)
block|{
comment|// mark backing up from existing snapshot in manifest, so that later, dependency analysis
comment|// can skip this backup image
name|LOG
operator|.
name|debug
argument_list|(
literal|"backup using existing snapshot will be supported in future jira"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|ancestors
init|=
name|this
operator|.
name|backupManager
operator|.
name|getAncestors
argument_list|(
name|backupContext
argument_list|,
name|table
argument_list|)
decl_stmt|;
for|for
control|(
name|BackupImage
name|image
range|:
name|ancestors
control|)
block|{
name|manifest
operator|.
name|addDependentImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|backupContext
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_INCR
argument_list|)
condition|)
block|{
comment|// We'll store the log timestamps for this table only in its manifest.
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tableTimestampMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|tableTimestampMap
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|backupContext
operator|.
name|getIncrTimestampMap
argument_list|()
operator|.
name|get
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|setIncrTimestampMap
argument_list|(
name|tableTimestampMap
argument_list|)
expr_stmt|;
block|}
name|manifest
operator|.
name|store
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// For incremental backup, we store a overall manifest in
comment|//<backup-root-dir>/WALs/<backup-id>
comment|// This is used when created the next incremental backup
if|if
condition|(
name|backupContext
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_INCR
argument_list|)
condition|)
block|{
name|manifest
operator|=
operator|new
name|BackupManifest
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
comment|// set the table region server start and end timestamps for incremental backup
name|manifest
operator|.
name|setIncrTimestampMap
argument_list|(
name|backupContext
operator|.
name|getIncrTimestampMap
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|ancestors
init|=
name|this
operator|.
name|backupManager
operator|.
name|getAncestors
argument_list|(
name|backupContext
argument_list|)
decl_stmt|;
for|for
control|(
name|BackupImage
name|image
range|:
name|ancestors
control|)
block|{
name|manifest
operator|.
name|addDependentImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
name|manifest
operator|.
name|store
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Do incremental copy.    * @param backupContext backup context    */
specifier|private
name|void
name|incrementalCopy
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental copy is starting."
argument_list|)
expr_stmt|;
comment|// set overall backup phase: incremental_copy
name|backupContext
operator|.
name|setPhase
argument_list|(
name|BACKUPPHASE
operator|.
name|INCREMENTAL_COPY
argument_list|)
expr_stmt|;
comment|// avoid action if has been cancelled
if|if
condition|(
name|backupContext
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// get incremental backup file list and prepare parms for DistCp
name|List
argument_list|<
name|String
argument_list|>
name|incrBackupFileList
init|=
name|backupContext
operator|.
name|getIncrBackupFileList
argument_list|()
decl_stmt|;
name|String
index|[]
name|strArr
init|=
name|incrBackupFileList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|incrBackupFileList
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|strArr
index|[
name|strArr
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|backupContext
operator|.
name|getHLogTargetDir
argument_list|()
expr_stmt|;
name|BackupCopyService
name|copyService
init|=
name|BackupRestoreServiceFactory
operator|.
name|getBackupCopyService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|res
init|=
name|copyService
operator|.
name|copy
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
name|BackupCopyService
operator|.
name|Type
operator|.
name|INCREMENTAL
argument_list|,
name|strArr
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Copy incremental log files failed with return code: "
operator|+
name|res
operator|+
literal|"."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed of Hadoop Distributed Copy from "
operator|+
name|incrBackupFileList
operator|+
literal|" to "
operator|+
name|backupContext
operator|.
name|getHLogTargetDir
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental copy from "
operator|+
name|incrBackupFileList
operator|+
literal|" to "
operator|+
name|backupContext
operator|.
name|getHLogTargetDir
argument_list|()
operator|+
literal|" finished."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getMessage
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
operator|||
name|msg
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|msg
operator|=
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
block|}
end_class

end_unit

