begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Used by the HMaster on startup to split meta logs and assign the meta table.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MasterMetaBootstrap
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MasterMetaBootstrap
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MonitoredTask
name|status
decl_stmt|;
specifier|private
specifier|final
name|HMaster
name|master
decl_stmt|;
specifier|public
name|MasterMetaBootstrap
parameter_list|(
specifier|final
name|HMaster
name|master
parameter_list|,
specifier|final
name|MonitoredTask
name|status
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|void
name|recoverMeta
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|master
operator|.
name|recoverMeta
argument_list|()
expr_stmt|;
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|enableCrashedServerProcessing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processDeadServers
parameter_list|()
block|{
comment|// get a list for previously failed RS which need log splitting work
comment|// we recover hbase:meta region servers inside master initialization and
comment|// handle other failed servers in SSH in order to start up master node ASAP
name|Set
argument_list|<
name|ServerName
argument_list|>
name|previouslyFailedServers
init|=
name|master
operator|.
name|getMasterWalManager
argument_list|()
operator|.
name|getFailedServersFromLogFolders
argument_list|()
decl_stmt|;
comment|// Master has recovered hbase:meta region server and we put
comment|// other failed region servers in a queue to be handled later by SSH
for|for
control|(
name|ServerName
name|tmpServer
range|:
name|previouslyFailedServers
control|)
block|{
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|processDeadServer
argument_list|(
name|tmpServer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assignMetaReplicas
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|int
name|numReplicas
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|META_REPLICAS_NUM
argument_list|,
name|HConstants
operator|.
name|DEFAULT_META_REPLICA_NUM
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numReplicas
condition|;
name|i
operator|++
control|)
block|{
name|assignMeta
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|unassignExcessMetaReplica
argument_list|(
name|numReplicas
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|unassignExcessMetaReplica
parameter_list|(
name|int
name|numMetaReplicasConfigured
parameter_list|)
block|{
specifier|final
name|ZooKeeperWatcher
name|zooKeeper
init|=
name|master
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
comment|// unassign the unneeded replicas (for e.g., if the previous master was configured
comment|// with a replication of 3 and now it is 2, we need to unassign the 1 unneeded replica)
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|metaReplicaZnodes
init|=
name|zooKeeper
operator|.
name|getMetaReplicaNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|metaReplicaZnode
range|:
name|metaReplicaZnodes
control|)
block|{
name|int
name|replicaId
init|=
name|zooKeeper
operator|.
name|znodePaths
operator|.
name|getMetaReplicaIdFromZnode
argument_list|(
name|metaReplicaZnode
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicaId
operator|>=
name|numMetaReplicasConfigured
condition|)
block|{
name|RegionState
name|r
init|=
name|MetaTableLocator
operator|.
name|getMetaRegionState
argument_list|(
name|zooKeeper
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing excess replica of meta region "
operator|+
name|r
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
comment|// send a close and wait for a max of 30 seconds
name|ServerManager
operator|.
name|closeRegionSilentlyAndWait
argument_list|(
name|master
operator|.
name|getClusterConnection
argument_list|()
argument_list|,
name|r
operator|.
name|getServerName
argument_list|()
argument_list|,
name|r
operator|.
name|getRegion
argument_list|()
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zooKeeper
argument_list|,
name|zooKeeper
operator|.
name|znodePaths
operator|.
name|getZNodeForReplica
argument_list|(
name|replicaId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore the exception since we don't want the master to be wedged due to potential
comment|// issues in the cleanup of the extra regions. We can do that cleanup via hbck or manually
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring exception "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check<code>hbase:meta</code> is assigned. If not, assign it.    */
specifier|protected
name|void
name|assignMeta
parameter_list|(
name|int
name|replicaId
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|KeeperException
block|{
specifier|final
name|AssignmentManager
name|assignmentManager
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
comment|// Work on meta region
comment|// TODO: Unimplemented
comment|// long timeout =
comment|//   master.getConfiguration().getLong("hbase.catalog.verification.timeout", 1000);
if|if
condition|(
name|replicaId
operator|==
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
name|status
operator|.
name|setStatus
argument_list|(
literal|"Assigning hbase:meta region"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|setStatus
argument_list|(
literal|"Assigning hbase:meta region, replicaId "
operator|+
name|replicaId
argument_list|)
expr_stmt|;
block|}
comment|// Get current meta state from zk.
name|RegionState
name|metaState
init|=
name|MetaTableLocator
operator|.
name|getMetaRegionState
argument_list|(
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"meta state from zookeeper: "
operator|+
name|metaState
argument_list|)
expr_stmt|;
name|RegionInfo
name|hri
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
name|assignmentManager
operator|.
name|assignMeta
argument_list|(
name|hri
argument_list|,
name|metaState
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicaId
operator|==
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
comment|// TODO: should we prevent from using state manager before meta was initialized?
comment|// tableStateManager.start();
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|setTableState
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Make sure a hbase:meta location is set. We need to enable SSH here since
comment|// if the meta region server is died at this time, we need it to be re-assigned
comment|// by SSH so that system tables can be assigned.
comment|// No need to wait for meta is assigned = 0 when meta is just verified.
if|if
condition|(
name|replicaId
operator|==
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
name|enableCrashedServerProcessing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase:meta with replicaId "
operator|+
name|replicaId
operator|+
literal|", location="
operator|+
name|master
operator|.
name|getMetaTableLocator
argument_list|()
operator|.
name|getMetaRegionLocation
argument_list|(
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|replicaId
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"META assigned."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|enableCrashedServerProcessing
parameter_list|(
specifier|final
name|boolean
name|waitForMeta
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// If crashed server processing is disabled, we enable it and expire those dead but not expired
comment|// servers. This is required so that if meta is assigning to a server which dies after
comment|// assignMeta starts assignment, ServerCrashProcedure can re-assign it. Otherwise, we will be
comment|// stuck here waiting forever if waitForMeta is specified.
if|if
condition|(
operator|!
name|master
operator|.
name|isServerCrashProcessingEnabled
argument_list|()
condition|)
block|{
name|master
operator|.
name|setServerCrashProcessingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|processQueuedDeadServers
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|waitForMeta
condition|)
block|{
name|master
operator|.
name|getMetaTableLocator
argument_list|()
operator|.
name|waitMetaRegionLocation
argument_list|(
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

