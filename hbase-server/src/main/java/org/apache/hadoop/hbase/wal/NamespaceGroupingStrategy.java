begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|RegionGroupingProvider
operator|.
name|RegionGroupingStrategy
import|;
end_import

begin_comment
comment|/**  * A WAL grouping strategy based on namespace.  * Notice: the wal-group mapping might change if we support dynamic namespace updating later,  * and special attention needed if we support feature like group-based replication.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NamespaceGroupingStrategy
implements|implements
name|RegionGroupingStrategy
block|{
name|String
name|providerId
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|group
parameter_list|(
name|byte
index|[]
name|identifier
parameter_list|,
name|byte
index|[]
name|namespace
parameter_list|)
block|{
name|String
name|namespaceString
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
operator|||
name|namespace
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|namespaceString
operator|=
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
expr_stmt|;
block|}
else|else
block|{
name|namespaceString
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
return|return
name|providerId
operator|+
name|GROUP_NAME_DELIMITER
operator|+
name|namespaceString
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|String
name|providerId
parameter_list|)
block|{
name|this
operator|.
name|providerId
operator|=
name|providerId
expr_stmt|;
block|}
block|}
end_class

end_unit

