begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteRange
import|;
end_import

begin_comment
comment|/**  * This is an abstraction of a segment maintained in a memstore, e.g., the active  * cell set or its snapshot.  *  * This abstraction facilitates the management of the compaction pipeline and the shifts of these  * segments from active set to snapshot set in the default implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|Segment
block|{
specifier|private
specifier|volatile
name|CellSet
name|cellSet
decl_stmt|;
specifier|private
specifier|final
name|CellComparator
name|comparator
decl_stmt|;
specifier|private
specifier|volatile
name|MemStoreLAB
name|memStoreLAB
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|size
decl_stmt|;
specifier|private
specifier|final
name|TimeRangeTracker
name|timeRangeTracker
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|tagsPresent
decl_stmt|;
specifier|protected
name|Segment
parameter_list|(
name|CellSet
name|cellSet
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|MemStoreLAB
name|memStoreLAB
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|cellSet
operator|=
name|cellSet
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|memStoreLAB
operator|=
name|memStoreLAB
expr_stmt|;
name|this
operator|.
name|size
operator|=
operator|new
name|AtomicLong
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeRangeTracker
operator|=
operator|new
name|TimeRangeTracker
argument_list|()
expr_stmt|;
name|this
operator|.
name|tagsPresent
operator|=
literal|false
expr_stmt|;
block|}
specifier|protected
name|Segment
parameter_list|(
name|Segment
name|segment
parameter_list|)
block|{
name|this
operator|.
name|cellSet
operator|=
name|segment
operator|.
name|getCellSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|segment
operator|.
name|getComparator
argument_list|()
expr_stmt|;
name|this
operator|.
name|memStoreLAB
operator|=
name|segment
operator|.
name|getMemStoreLAB
argument_list|()
expr_stmt|;
name|this
operator|.
name|size
operator|=
operator|new
name|AtomicLong
argument_list|(
name|segment
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeRangeTracker
operator|=
name|segment
operator|.
name|getTimeRangeTracker
argument_list|()
expr_stmt|;
name|this
operator|.
name|tagsPresent
operator|=
name|segment
operator|.
name|isTagsPresent
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates the scanner for the given read point    * @return a scanner for the given read point    */
specifier|public
name|SegmentScanner
name|getSegmentScanner
parameter_list|(
name|long
name|readPoint
parameter_list|)
block|{
return|return
operator|new
name|SegmentScanner
argument_list|(
name|this
argument_list|,
name|readPoint
argument_list|)
return|;
block|}
comment|/**    * Returns whether the segment has any cells    * @return whether the segment has any cells    */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Returns number of cells in segment    * @return number of cells in segment    */
specifier|public
name|int
name|getCellsCount
parameter_list|()
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Returns the first cell in the segment that has equal or greater key than the given cell    * @return the first cell in the segment that has equal or greater key than the given cell    */
specifier|public
name|Cell
name|getFirstAfter
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|snTailSet
init|=
name|tailSet
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|snTailSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|snTailSet
operator|.
name|first
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Closing a segment before it is being discarded    */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|MemStoreLAB
name|mslab
init|=
name|getMemStoreLAB
argument_list|()
decl_stmt|;
if|if
condition|(
name|mslab
operator|!=
literal|null
condition|)
block|{
name|mslab
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// do not set MSLab to null as scanners may still be reading the data here and need to decrease
comment|// the counter when they finish
block|}
comment|/**    * If the segment has a memory allocator the cell is being cloned to this space, and returned;    * otherwise the given cell is returned    * @return either the given cell or its clone    */
specifier|public
name|Cell
name|maybeCloneWithAllocator
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|getMemStoreLAB
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|cell
return|;
block|}
name|int
name|len
init|=
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|ByteRange
name|alloc
init|=
name|getMemStoreLAB
argument_list|()
operator|.
name|allocateBytes
argument_list|(
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|alloc
operator|==
literal|null
condition|)
block|{
comment|// The allocation was too large, allocator decided
comment|// not to do anything with it.
return|return
name|cell
return|;
block|}
assert|assert
name|alloc
operator|.
name|getBytes
argument_list|()
operator|!=
literal|null
assert|;
name|KeyValueUtil
operator|.
name|appendToByteArray
argument_list|(
name|cell
argument_list|,
name|alloc
operator|.
name|getBytes
argument_list|()
argument_list|,
name|alloc
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|newKv
init|=
operator|new
name|KeyValue
argument_list|(
name|alloc
operator|.
name|getBytes
argument_list|()
argument_list|,
name|alloc
operator|.
name|getOffset
argument_list|()
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|newKv
operator|.
name|setSequenceId
argument_list|(
name|cell
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newKv
return|;
block|}
specifier|public
name|boolean
name|shouldSeek
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|)
block|{
return|return
operator|(
name|getTimeRangeTracker
argument_list|()
operator|.
name|includesTimeRange
argument_list|(
name|scan
operator|.
name|getTimeRange
argument_list|()
argument_list|)
operator|&&
operator|(
name|getTimeRangeTracker
argument_list|()
operator|.
name|getMaximumTimestamp
argument_list|()
operator|>=
name|oldestUnexpiredTS
operator|)
operator|)
return|;
block|}
specifier|public
name|long
name|getMinTimestamp
parameter_list|()
block|{
return|return
name|getTimeRangeTracker
argument_list|()
operator|.
name|getMinimumTimestamp
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isTagsPresent
parameter_list|()
block|{
return|return
name|tagsPresent
return|;
block|}
specifier|public
name|void
name|incScannerCount
parameter_list|()
block|{
if|if
condition|(
name|getMemStoreLAB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getMemStoreLAB
argument_list|()
operator|.
name|incScannerCount
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|decScannerCount
parameter_list|()
block|{
if|if
condition|(
name|getMemStoreLAB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getMemStoreLAB
argument_list|()
operator|.
name|decScannerCount
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Setting the heap size of the segment - used to account for different class overheads    * @return this object    */
specifier|public
name|Segment
name|setSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|.
name|set
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Returns the heap size of the segment    * @return the heap size of the segment    */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Increases the heap size counter of the segment by the given delta    */
specifier|public
name|void
name|incSize
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
name|size
operator|.
name|addAndGet
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimeRangeTracker
name|getTimeRangeTracker
parameter_list|()
block|{
return|return
name|timeRangeTracker
return|;
block|}
comment|//*** Methods for SegmentsScanner
specifier|public
name|Cell
name|last
parameter_list|()
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|last
argument_list|()
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|headSet
parameter_list|(
name|Cell
name|firstKeyOnRow
parameter_list|)
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|headSet
argument_list|(
name|firstKeyOnRow
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Cell
name|left
parameter_list|,
name|Cell
name|right
parameter_list|)
block|{
return|return
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareRows
parameter_list|(
name|Cell
name|left
parameter_list|,
name|Cell
name|right
parameter_list|)
block|{
return|return
name|getComparator
argument_list|()
operator|.
name|compareRows
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
comment|/**    * Returns a set of all cells in the segment    * @return a set of all cells in the segment    */
specifier|protected
name|CellSet
name|getCellSet
parameter_list|()
block|{
return|return
name|cellSet
return|;
block|}
comment|/**    * Returns the Cell comparator used by this segment    * @return the Cell comparator used by this segment    */
specifier|protected
name|CellComparator
name|getComparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
specifier|protected
name|long
name|internalAdd
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|boolean
name|succ
init|=
name|getCellSet
argument_list|()
operator|.
name|add
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|long
name|s
init|=
name|AbstractMemStore
operator|.
name|heapSizeChange
argument_list|(
name|cell
argument_list|,
name|succ
argument_list|)
decl_stmt|;
name|updateMetaInfo
argument_list|(
name|cell
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|protected
name|void
name|updateMetaInfo
parameter_list|(
name|Cell
name|toAdd
parameter_list|,
name|long
name|s
parameter_list|)
block|{
name|getTimeRangeTracker
argument_list|()
operator|.
name|includeTimestamp
argument_list|(
name|toAdd
argument_list|)
expr_stmt|;
name|size
operator|.
name|addAndGet
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// In no tags case this NoTagsKeyValue.getTagsLength() is a cheap call.
comment|// When we use ACL CP or Visibility CP which deals with Tags during
comment|// mutation, the TagRewriteCell.getTagsLength() is a cheaper call. We do not
comment|// parse the byte[] to identify the tags length.
if|if
condition|(
name|toAdd
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tagsPresent
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Returns a subset of the segment cell set, which starts with the given cell    * @param firstCell a cell in the segment    * @return a subset of the segment cell set, which starts with the given cell    */
specifier|protected
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|tailSet
parameter_list|(
name|Cell
name|firstCell
parameter_list|)
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|tailSet
argument_list|(
name|firstCell
argument_list|)
return|;
block|}
specifier|private
name|MemStoreLAB
name|getMemStoreLAB
parameter_list|()
block|{
return|return
name|memStoreLAB
return|;
block|}
comment|// Debug methods
comment|/**    * Dumps all cells of the segment into the given log    */
name|void
name|dump
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|getCellSet
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|res
init|=
literal|"Store segment of type "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; "
decl_stmt|;
name|res
operator|+=
literal|"isEmpty "
operator|+
operator|(
name|isEmpty
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
literal|"; "
expr_stmt|;
name|res
operator|+=
literal|"cellCount "
operator|+
name|getCellsCount
argument_list|()
operator|+
literal|"; "
expr_stmt|;
name|res
operator|+=
literal|"size "
operator|+
name|getSize
argument_list|()
operator|+
literal|"; "
expr_stmt|;
name|res
operator|+=
literal|"Min ts "
operator|+
name|getMinTimestamp
argument_list|()
operator|+
literal|"; "
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

