begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
operator|.
name|getArchivedLogPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RSRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ChainWALEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ClusterMarkingEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SystemTableWALEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|WALEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Class that handles the source of a replication stream.  * Currently does not handle more than 1 slave  * For each slave cluster it selects a random number of peers  * using a replication ratio. For example, if replication ration = 0.1  * and slave cluster has 100 region servers, 10 will be selected.  *<p>  * A stream is considered down when we cannot contact a region server on the  * peer cluster for more than 55 seconds by default.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationSource
implements|implements
name|ReplicationSourceInterface
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicationSource
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Queues of logs to process, entry in format of walGroupId->queue,
comment|// each presents a queue for one wal group
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// per group queue size, keep no more than this number of logs in each wal group
specifier|protected
name|int
name|queueSizePerGroup
decl_stmt|;
specifier|protected
name|ReplicationQueueStorage
name|queueStorage
decl_stmt|;
specifier|protected
name|ReplicationPeer
name|replicationPeer
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|ReplicationQueueInfo
name|replicationQueueInfo
decl_stmt|;
comment|// The manager of all sources to which we ping back our progress
specifier|protected
name|ReplicationSourceManager
name|manager
decl_stmt|;
comment|// Should we stop everything?
specifier|protected
name|Server
name|server
decl_stmt|;
comment|// How long should we sleep for each retry
specifier|private
name|long
name|sleepForRetries
decl_stmt|;
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
comment|// id of this cluster
specifier|private
name|UUID
name|clusterId
decl_stmt|;
comment|// total number of edits we replicated
specifier|private
name|AtomicLong
name|totalReplicatedEdits
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// The znode we currently play with
specifier|protected
name|String
name|queueId
decl_stmt|;
comment|// Maximum number of retries before taking bold actions
specifier|private
name|int
name|maxRetriesMultiplier
decl_stmt|;
comment|// Indicates if this particular source is running
specifier|private
specifier|volatile
name|boolean
name|sourceRunning
init|=
literal|false
decl_stmt|;
comment|// Metrics for this source
specifier|private
name|MetricsSource
name|metrics
decl_stmt|;
comment|// WARN threshold for the number of queued logs, defaults to 2
specifier|private
name|int
name|logQueueWarnThreshold
decl_stmt|;
comment|// ReplicationEndpoint which will handle the actual replication
specifier|private
specifier|volatile
name|ReplicationEndpoint
name|replicationEndpoint
decl_stmt|;
comment|// A filter (or a chain of filters) for the WAL entries.
specifier|protected
specifier|volatile
name|WALEntryFilter
name|walEntryFilter
decl_stmt|;
comment|// throttler
specifier|private
name|ReplicationThrottler
name|throttler
decl_stmt|;
specifier|private
name|long
name|defaultBandwidth
decl_stmt|;
specifier|private
name|long
name|currentBandwidth
decl_stmt|;
specifier|private
name|WALFileLengthProvider
name|walFileLengthProvider
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|protected
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ReplicationSourceShipper
argument_list|>
name|workerThreads
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|totalBufferUsed
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_ON_ENDPOINT_SECONDS
init|=
literal|"hbase.replication.wait.on.endpoint.seconds"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_WAIT_ON_ENDPOINT_SECONDS
init|=
literal|30
decl_stmt|;
specifier|private
name|int
name|waitOnEndpointSeconds
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Thread
name|initThread
decl_stmt|;
comment|/**    * Instantiation method used by region servers    * @param conf configuration to use    * @param fs file system to use    * @param manager replication manager to ping to    * @param server the server for this region server    * @param queueId the id of our replication queue    * @param clusterId unique UUID for the cluster    * @param metrics metrics for replication source    */
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|ReplicationSourceManager
name|manager
parameter_list|,
name|ReplicationQueueStorage
name|queueStorage
parameter_list|,
name|ReplicationPeer
name|replicationPeer
parameter_list|,
name|Server
name|server
parameter_list|,
name|String
name|queueId
parameter_list|,
name|UUID
name|clusterId
parameter_list|,
name|WALFileLengthProvider
name|walFileLengthProvider
parameter_list|,
name|MetricsSource
name|metrics
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitOnEndpointSeconds
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|WAIT_ON_ENDPOINT_SECONDS
argument_list|,
name|DEFAULT_WAIT_ON_ENDPOINT_SECONDS
argument_list|)
expr_stmt|;
name|decorateConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|sleepForRetries
operator|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"replication.source.sleepforretries"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// 1 second
name|this
operator|.
name|maxRetriesMultiplier
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.source.maxretriesmultiplier"
argument_list|,
literal|300
argument_list|)
expr_stmt|;
comment|// 5 minutes @ 1 sec per
name|this
operator|.
name|queueSizePerGroup
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueStorage
operator|=
name|queueStorage
expr_stmt|;
name|this
operator|.
name|replicationPeer
operator|=
name|replicationPeer
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|this
operator|.
name|queueId
operator|=
name|queueId
expr_stmt|;
name|this
operator|.
name|replicationQueueInfo
operator|=
operator|new
name|ReplicationQueueInfo
argument_list|(
name|queueId
argument_list|)
expr_stmt|;
name|this
operator|.
name|logQueueWarnThreshold
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.source.log.queue.warn"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|defaultBandwidth
operator|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"replication.source.per.peer.node.bandwidth"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|currentBandwidth
operator|=
name|getCurrentBandwidth
argument_list|()
expr_stmt|;
name|this
operator|.
name|throttler
operator|=
operator|new
name|ReplicationThrottler
argument_list|(
operator|(
name|double
operator|)
name|currentBandwidth
operator|/
literal|10.0
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalBufferUsed
operator|=
name|manager
operator|.
name|getTotalBufferUsed
argument_list|()
expr_stmt|;
name|this
operator|.
name|walFileLengthProvider
operator|=
name|walFileLengthProvider
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"queueId={}, ReplicationSource: {}, currentBandwidth={}"
argument_list|,
name|queueId
argument_list|,
name|replicationPeer
operator|.
name|getId
argument_list|()
argument_list|,
name|this
operator|.
name|currentBandwidth
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|decorateConf
parameter_list|()
block|{
name|String
name|replicationCodec
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|REPLICATION_CODEC_CONF_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|replicationCodec
argument_list|)
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|RPC_CODEC_CONF_KEY
argument_list|,
name|replicationCodec
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enqueueLog
parameter_list|(
name|Path
name|log
parameter_list|)
block|{
name|String
name|logPrefix
init|=
name|AbstractFSWALProvider
operator|.
name|getWALPrefixFromWALName
argument_list|(
name|log
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|queue
init|=
name|queues
operator|.
name|get
argument_list|(
name|logPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|queue
operator|=
operator|new
name|PriorityBlockingQueue
argument_list|<>
argument_list|(
name|queueSizePerGroup
argument_list|,
operator|new
name|LogsComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure that we do not use an empty queue when setting up a ReplicationSource, otherwise
comment|// the shipper may quit immediately
name|queue
operator|.
name|put
argument_list|(
name|log
argument_list|)
expr_stmt|;
name|queues
operator|.
name|put
argument_list|(
name|logPrefix
argument_list|,
name|queue
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSourceActive
argument_list|()
operator|&&
name|this
operator|.
name|walEntryFilter
operator|!=
literal|null
condition|)
block|{
comment|// new wal group observed after source startup, start a new worker thread to track it
comment|// notice: it's possible that log enqueued when this.running is set but worker thread
comment|// still not launched, so it's necessary to check workerThreads before start the worker
name|tryStartNewShipper
argument_list|(
name|logPrefix
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|queue
operator|.
name|put
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{} Added log file {} to queue of source {}."
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|logPrefix
argument_list|,
name|this
operator|.
name|replicationQueueInfo
operator|.
name|getQueueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|metrics
operator|.
name|incrSizeOfLogQueue
argument_list|()
expr_stmt|;
comment|// This will log a warning for each new log that gets created above the warn threshold
name|int
name|queueSize
init|=
name|queue
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|queueSize
operator|>
name|this
operator|.
name|logQueueWarnThreshold
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} WAL group {} queue size: {} exceeds value of "
operator|+
literal|"replication.source.log.queue.warn: {}"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|logPrefix
argument_list|,
name|queueSize
argument_list|,
name|logQueueWarnThreshold
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addHFileRefs
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|pairs
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|String
name|peerId
init|=
name|replicationPeer
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFMap
init|=
name|replicationPeer
operator|.
name|getTableCFs
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableCFMap
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableCfs
init|=
name|tableCFMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCFMap
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
operator|&&
operator|(
name|tableCfs
operator|==
literal|null
operator|||
name|tableCfs
operator|.
name|contains
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|queueStorage
operator|.
name|addHFileRefs
argument_list|(
name|peerId
argument_list|,
name|pairs
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrSizeOfHFileRefsQueue
argument_list|(
name|pairs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HFiles will not be replicated belonging to the table {} family {} to peer id {}"
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// user has explicitly not defined any table cfs for replication, means replicate all the
comment|// data
name|this
operator|.
name|queueStorage
operator|.
name|addHFileRefs
argument_list|(
name|peerId
argument_list|,
name|pairs
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrSizeOfHFileRefsQueue
argument_list|(
name|pairs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ReplicationEndpoint
name|createReplicationEndpoint
parameter_list|()
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|ClassNotFoundException
throws|,
name|IOException
block|{
name|RegionServerCoprocessorHost
name|rsServerHost
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|instanceof
name|HRegionServer
condition|)
block|{
name|rsServerHost
operator|=
operator|(
operator|(
name|HRegionServer
operator|)
name|server
operator|)
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
expr_stmt|;
block|}
name|String
name|replicationEndpointImpl
init|=
name|replicationPeer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getReplicationEndpointImpl
argument_list|()
decl_stmt|;
name|ReplicationEndpoint
name|replicationEndpoint
decl_stmt|;
if|if
condition|(
name|replicationEndpointImpl
operator|==
literal|null
condition|)
block|{
comment|// Default to HBase inter-cluster replication endpoint; skip reflection
name|replicationEndpoint
operator|=
operator|new
name|HBaseInterClusterReplicationEndpoint
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|replicationEndpoint
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|replicationEndpointImpl
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|ReplicationEndpoint
operator|.
name|class
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|rsServerHost
operator|!=
literal|null
condition|)
block|{
name|ReplicationEndpoint
name|newReplicationEndPoint
init|=
name|rsServerHost
operator|.
name|postCreateReplicationEndPoint
argument_list|(
name|replicationEndpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|newReplicationEndPoint
operator|!=
literal|null
condition|)
block|{
comment|// Override the newly created endpoint from the hook with configured end point
name|replicationEndpoint
operator|=
name|newReplicationEndPoint
expr_stmt|;
block|}
block|}
return|return
name|replicationEndpoint
return|;
block|}
specifier|private
name|void
name|initAndStartReplicationEndpoint
parameter_list|(
name|ReplicationEndpoint
name|replicationEndpoint
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|TableDescriptors
name|tableDescriptors
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|instanceof
name|HRegionServer
condition|)
block|{
name|tableDescriptors
operator|=
operator|(
operator|(
name|HRegionServer
operator|)
name|server
operator|)
operator|.
name|getTableDescriptors
argument_list|()
expr_stmt|;
block|}
name|replicationEndpoint
operator|.
name|init
argument_list|(
operator|new
name|ReplicationEndpoint
operator|.
name|Context
argument_list|(
name|server
argument_list|,
name|conf
argument_list|,
name|replicationPeer
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|replicationPeer
operator|.
name|getId
argument_list|()
argument_list|,
name|clusterId
argument_list|,
name|replicationPeer
argument_list|,
name|metrics
argument_list|,
name|tableDescriptors
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
name|replicationEndpoint
operator|.
name|start
argument_list|()
expr_stmt|;
name|replicationEndpoint
operator|.
name|awaitRunning
argument_list|(
name|waitOnEndpointSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeWALEntryFilter
parameter_list|(
name|UUID
name|peerClusterId
parameter_list|)
block|{
comment|// get the WALEntryFilter from ReplicationEndpoint and add it to default filters
name|ArrayList
argument_list|<
name|WALEntryFilter
argument_list|>
name|filters
init|=
name|Lists
operator|.
expr|<
name|WALEntryFilter
operator|>
name|newArrayList
argument_list|(
operator|new
name|SystemTableWALEntryFilter
argument_list|()
argument_list|)
decl_stmt|;
name|WALEntryFilter
name|filterFromEndpoint
init|=
name|this
operator|.
name|replicationEndpoint
operator|.
name|getWALEntryfilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterFromEndpoint
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|filterFromEndpoint
argument_list|)
expr_stmt|;
block|}
name|filters
operator|.
name|add
argument_list|(
operator|new
name|ClusterMarkingEntryFilter
argument_list|(
name|clusterId
argument_list|,
name|peerClusterId
argument_list|,
name|replicationEndpoint
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|walEntryFilter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|tryStartNewShipper
parameter_list|(
name|String
name|walGroupId
parameter_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|queue
parameter_list|)
block|{
name|ReplicationSourceShipper
name|worker
init|=
name|createNewShipper
argument_list|(
name|walGroupId
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|ReplicationSourceShipper
name|extant
init|=
name|workerThreads
operator|.
name|putIfAbsent
argument_list|(
name|walGroupId
argument_list|,
name|worker
argument_list|)
decl_stmt|;
if|if
condition|(
name|extant
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} Someone has beat us to start a worker thread for wal group {}"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|walGroupId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} Starting up worker for wal group {}"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|walGroupId
argument_list|)
expr_stmt|;
block|}
name|ReplicationSourceWALReader
name|walReader
init|=
name|createNewWALReader
argument_list|(
name|walGroupId
argument_list|,
name|queue
argument_list|,
name|worker
operator|.
name|getStartPosition
argument_list|()
argument_list|)
decl_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|walReader
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".replicationSource.wal-reader."
operator|+
name|walGroupId
operator|+
literal|","
operator|+
name|queueId
argument_list|,
name|this
operator|::
name|uncaughtException
argument_list|)
expr_stmt|;
name|worker
operator|.
name|setWALReader
argument_list|(
name|walReader
argument_list|)
expr_stmt|;
name|worker
operator|.
name|startup
argument_list|(
name|this
operator|::
name|uncaughtException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ReplicationStatus
argument_list|>
name|getWalGroupStatus
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ReplicationStatus
argument_list|>
name|sourceReplicationStatus
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|ageOfLastShippedOp
decl_stmt|,
name|replicationDelay
decl_stmt|,
name|fileSize
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ReplicationSourceShipper
argument_list|>
name|walGroupShipper
range|:
name|workerThreads
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|walGroupId
init|=
name|walGroupShipper
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ReplicationSourceShipper
name|shipper
init|=
name|walGroupShipper
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ageOfLastShippedOp
operator|=
name|metrics
operator|.
name|getAgeofLastShippedOp
argument_list|(
name|walGroupId
argument_list|)
expr_stmt|;
name|int
name|queueSize
init|=
name|queues
operator|.
name|get
argument_list|(
name|walGroupId
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|replicationDelay
operator|=
name|metrics
operator|.
name|getReplicationDelay
argument_list|()
expr_stmt|;
name|Path
name|currentPath
init|=
name|shipper
operator|.
name|getCurrentPath
argument_list|()
decl_stmt|;
name|fileSize
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|currentPath
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fileSize
operator|=
name|getFileSize
argument_list|(
name|currentPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignore the exception as the file size of HLog only affects the web ui"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentPath
operator|=
operator|new
name|Path
argument_list|(
literal|"NO_LOGS_IN_QUEUE"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} No replication ongoing, waiting for new log"
argument_list|,
name|logPeerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicationStatus
operator|.
name|ReplicationStatusBuilder
name|statusBuilder
init|=
name|ReplicationStatus
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|statusBuilder
operator|.
name|withPeerId
argument_list|(
name|this
operator|.
name|getPeerId
argument_list|()
argument_list|)
operator|.
name|withQueueSize
argument_list|(
name|queueSize
argument_list|)
operator|.
name|withWalGroup
argument_list|(
name|walGroupId
argument_list|)
operator|.
name|withCurrentPath
argument_list|(
name|currentPath
argument_list|)
operator|.
name|withCurrentPosition
argument_list|(
name|shipper
operator|.
name|getCurrentPosition
argument_list|()
argument_list|)
operator|.
name|withFileSize
argument_list|(
name|fileSize
argument_list|)
operator|.
name|withAgeOfLastShippedOp
argument_list|(
name|ageOfLastShippedOp
argument_list|)
operator|.
name|withReplicationDelay
argument_list|(
name|replicationDelay
argument_list|)
expr_stmt|;
name|sourceReplicationStatus
operator|.
name|put
argument_list|(
name|this
operator|.
name|getPeerId
argument_list|()
operator|+
literal|"=>"
operator|+
name|walGroupId
argument_list|,
name|statusBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sourceReplicationStatus
return|;
block|}
specifier|private
name|long
name|getFileSize
parameter_list|(
name|Path
name|currentPath
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|fileSize
decl_stmt|;
try|try
block|{
name|fileSize
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|currentPath
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|currentPath
operator|=
name|getArchivedLogPath
argument_list|(
name|currentPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fileSize
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|currentPath
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
return|return
name|fileSize
return|;
block|}
specifier|protected
name|ReplicationSourceShipper
name|createNewShipper
parameter_list|(
name|String
name|walGroupId
parameter_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|queue
parameter_list|)
block|{
return|return
operator|new
name|ReplicationSourceShipper
argument_list|(
name|conf
argument_list|,
name|walGroupId
argument_list|,
name|queue
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|private
name|ReplicationSourceWALReader
name|createNewWALReader
parameter_list|(
name|String
name|walGroupId
parameter_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|queue
parameter_list|,
name|long
name|startPosition
parameter_list|)
block|{
return|return
name|replicationPeer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|isSerial
argument_list|()
condition|?
operator|new
name|SerialReplicationSourceWALReader
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|queue
argument_list|,
name|startPosition
argument_list|,
name|walEntryFilter
argument_list|,
name|this
argument_list|)
else|:
operator|new
name|ReplicationSourceWALReader
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|queue
argument_list|,
name|startPosition
argument_list|,
name|walEntryFilter
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|RSRpcServices
operator|.
name|exitIfOOME
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception in {} currentPath={}"
argument_list|,
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|getCurrentPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|server
operator|.
name|abort
argument_list|(
literal|"Unexpected exception in "
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReplicationEndpoint
name|getReplicationEndpoint
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationEndpoint
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReplicationSourceManager
name|getSourceManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|manager
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tryThrottle
parameter_list|(
name|int
name|batchSize
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|checkBandwidthChangeAndResetThrottler
argument_list|()
expr_stmt|;
if|if
condition|(
name|throttler
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|long
name|sleepTicks
init|=
name|throttler
operator|.
name|getNextSleepInterval
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|sleepTicks
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{} To sleep {}ms for throttling control"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|sleepTicks
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTicks
argument_list|)
expr_stmt|;
comment|// reset throttler's cycle start tick when sleep for throttling occurs
name|throttler
operator|.
name|resetStartTick
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkBandwidthChangeAndResetThrottler
parameter_list|()
block|{
name|long
name|peerBandwidth
init|=
name|getCurrentBandwidth
argument_list|()
decl_stmt|;
if|if
condition|(
name|peerBandwidth
operator|!=
name|currentBandwidth
condition|)
block|{
name|currentBandwidth
operator|=
name|peerBandwidth
expr_stmt|;
name|throttler
operator|.
name|setBandwidth
argument_list|(
operator|(
name|double
operator|)
name|currentBandwidth
operator|/
literal|10.0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ReplicationSource : {} bandwidth throttling changed, currentBandWidth={}"
argument_list|,
name|replicationPeer
operator|.
name|getId
argument_list|()
argument_list|,
name|currentBandwidth
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|getCurrentBandwidth
parameter_list|()
block|{
name|long
name|peerBandwidth
init|=
name|replicationPeer
operator|.
name|getPeerBandwidth
argument_list|()
decl_stmt|;
comment|// user can set peer bandwidth to 0 to use default bandwidth
return|return
name|peerBandwidth
operator|!=
literal|0
condition|?
name|peerBandwidth
else|:
name|defaultBandwidth
return|;
block|}
comment|/**    * Do the sleeping logic    * @param msg Why we sleep    * @param sleepMultiplier by how many times the default sleeping time is augmented    * @return True if<code>sleepMultiplier</code> is&lt;<code>maxRetriesMultiplier</code>    */
specifier|protected
name|boolean
name|sleepForRetries
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|sleepMultiplier
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{} {}, sleeping {} times {}"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|msg
argument_list|,
name|sleepForRetries
argument_list|,
name|sleepMultiplier
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|sleepForRetries
operator|*
name|sleepMultiplier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} Interrupted while sleeping between retries"
argument_list|,
name|logPeerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
name|sleepMultiplier
operator|<
name|maxRetriesMultiplier
return|;
block|}
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|int
name|sleepMultiplier
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|this
operator|.
name|isSourceActive
argument_list|()
condition|)
block|{
name|ReplicationEndpoint
name|replicationEndpoint
decl_stmt|;
try|try
block|{
name|replicationEndpoint
operator|=
name|createReplicationEndpoint
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} error creating ReplicationEndpoint, retry"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleepForRetries
argument_list|(
literal|"Error creating ReplicationEndpoint"
argument_list|,
name|sleepMultiplier
argument_list|)
condition|)
block|{
name|sleepMultiplier
operator|++
expr_stmt|;
block|}
continue|continue;
block|}
try|try
block|{
name|initAndStartReplicationEndpoint
argument_list|(
name|replicationEndpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationEndpoint
operator|=
name|replicationEndpoint
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} Error starting ReplicationEndpoint, retry"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|replicationEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|sleepForRetries
argument_list|(
literal|"Error starting ReplicationEndpoint"
argument_list|,
name|sleepMultiplier
argument_list|)
condition|)
block|{
name|sleepMultiplier
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|isSourceActive
argument_list|()
condition|)
block|{
return|return;
block|}
name|sleepMultiplier
operator|=
literal|1
expr_stmt|;
name|UUID
name|peerClusterId
decl_stmt|;
comment|// delay this until we are in an asynchronous thread
for|for
control|(
init|;
condition|;
control|)
block|{
name|peerClusterId
operator|=
name|replicationEndpoint
operator|.
name|getPeerUUID
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSourceActive
argument_list|()
operator|&&
name|peerClusterId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} Could not connect to Peer ZK. Sleeping for {} millis"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
operator|(
name|this
operator|.
name|sleepForRetries
operator|*
name|sleepMultiplier
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sleepForRetries
argument_list|(
literal|"Cannot contact the peer's zk ensemble"
argument_list|,
name|sleepMultiplier
argument_list|)
condition|)
block|{
name|sleepMultiplier
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|isSourceActive
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// In rare case, zookeeper setting may be messed up. That leads to the incorrect
comment|// peerClusterId value, which is the same as the source clusterId
if|if
condition|(
name|clusterId
operator|.
name|equals
argument_list|(
name|peerClusterId
argument_list|)
operator|&&
operator|!
name|replicationEndpoint
operator|.
name|canReplicateToSameCluster
argument_list|()
condition|)
block|{
name|this
operator|.
name|terminate
argument_list|(
literal|"ClusterId "
operator|+
name|clusterId
operator|+
literal|" is replicating to itself: peerClusterId "
operator|+
name|peerClusterId
operator|+
literal|" which is not allowed by ReplicationEndpoint:"
operator|+
name|replicationEndpoint
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|manager
operator|.
name|removeSource
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{} Source: {}, is now replicating from cluster: {}; to peer cluster: {};"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|this
operator|.
name|replicationQueueInfo
operator|.
name|getQueueId
argument_list|()
argument_list|,
name|clusterId
argument_list|,
name|peerClusterId
argument_list|)
expr_stmt|;
name|initializeWALEntryFilter
argument_list|(
name|peerClusterId
argument_list|)
expr_stmt|;
comment|// start workers
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|queues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|walGroupId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|queue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|tryStartNewShipper
argument_list|(
name|walGroupId
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startup
parameter_list|()
block|{
comment|// mark we are running now
name|this
operator|.
name|sourceRunning
operator|=
literal|true
expr_stmt|;
name|initThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
operator|::
name|initialize
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|initThread
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".replicationSource,"
operator|+
name|this
operator|.
name|queueId
argument_list|,
name|this
operator|::
name|uncaughtException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|terminate
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|terminate
argument_list|(
name|reason
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|terminate
parameter_list|(
name|String
name|reason
parameter_list|,
name|Exception
name|cause
parameter_list|)
block|{
name|terminate
argument_list|(
name|reason
argument_list|,
name|cause
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|terminate
parameter_list|(
name|String
name|reason
parameter_list|,
name|Exception
name|cause
parameter_list|,
name|boolean
name|clearMetrics
parameter_list|)
block|{
name|terminate
argument_list|(
name|reason
argument_list|,
name|cause
argument_list|,
name|clearMetrics
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|terminate
parameter_list|(
name|String
name|reason
parameter_list|,
name|Exception
name|cause
parameter_list|,
name|boolean
name|clearMetrics
parameter_list|,
name|boolean
name|join
parameter_list|)
block|{
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} Closing source {} because: {}"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|this
operator|.
name|queueId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} Closing source {} because an error occurred: {}"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|this
operator|.
name|queueId
argument_list|,
name|reason
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|sourceRunning
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|initThread
operator|!=
literal|null
operator|&&
name|Thread
operator|.
name|currentThread
argument_list|()
operator|!=
name|initThread
condition|)
block|{
comment|// This usually won't happen but anyway, let's wait until the initialization thread exits.
comment|// And notice that we may call terminate directly from the initThread so here we need to
comment|// avoid join on ourselves.
name|initThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|Threads
operator|.
name|shutdown
argument_list|(
name|initThread
argument_list|,
name|this
operator|.
name|sleepForRetries
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|ReplicationSourceShipper
argument_list|>
name|workers
init|=
name|workerThreads
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplicationSourceShipper
name|worker
range|:
name|workers
control|)
block|{
name|worker
operator|.
name|stopWorker
argument_list|()
expr_stmt|;
if|if
condition|(
name|worker
operator|.
name|entryReader
operator|!=
literal|null
condition|)
block|{
name|worker
operator|.
name|entryReader
operator|.
name|setReaderRunning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ReplicationSourceShipper
name|worker
range|:
name|workers
control|)
block|{
if|if
condition|(
name|worker
operator|.
name|isAlive
argument_list|()
operator|||
name|worker
operator|.
name|entryReader
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Wait worker to stop
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|sleepForRetries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} Interrupted while waiting {} to stop"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|worker
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|// If worker still is alive after waiting, interrupt it
if|if
condition|(
name|worker
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|worker
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|// If entry reader is alive after waiting, interrupt it
if|if
condition|(
name|worker
operator|.
name|entryReader
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|worker
operator|.
name|entryReader
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|replicationEndpoint
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|replicationEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|join
condition|)
block|{
for|for
control|(
name|ReplicationSourceShipper
name|worker
range|:
name|workers
control|)
block|{
name|Threads
operator|.
name|shutdown
argument_list|(
name|worker
argument_list|,
name|this
operator|.
name|sleepForRetries
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} ReplicationSourceWorker {} terminated"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|worker
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|replicationEndpoint
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|replicationEndpoint
operator|.
name|awaitTerminated
argument_list|(
name|sleepForRetries
operator|*
name|maxRetriesMultiplier
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} Got exception while waiting for endpoint to shutdown "
operator|+
literal|"for replication source : {}"
argument_list|,
name|logPeerId
argument_list|()
argument_list|,
name|this
operator|.
name|queueId
argument_list|,
name|te
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|clearMetrics
condition|)
block|{
name|this
operator|.
name|metrics
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQueueId
parameter_list|()
block|{
return|return
name|this
operator|.
name|queueId
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getCurrentPath
parameter_list|()
block|{
comment|// only for testing
for|for
control|(
name|ReplicationSourceShipper
name|worker
range|:
name|workerThreads
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|worker
operator|.
name|getCurrentPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|worker
operator|.
name|getCurrentPath
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSourceActive
parameter_list|()
block|{
return|return
operator|!
name|this
operator|.
name|server
operator|.
name|isStopped
argument_list|()
operator|&&
name|this
operator|.
name|sourceRunning
return|;
block|}
specifier|public
name|UUID
name|getPeerClusterUUID
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterId
return|;
block|}
comment|/**    * Comparator used to compare logs together based on their start time    */
specifier|public
specifier|static
class|class
name|LogsComparator
implements|implements
name|Comparator
argument_list|<
name|Path
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Path
name|o1
parameter_list|,
name|Path
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|getTS
argument_list|(
name|o1
argument_list|)
argument_list|,
name|getTS
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<p>      * Split a path to get the start time      *</p>      *<p>      * For example: 10.20.20.171%3A60020.1277499063250      *</p>      * @param p path to split      * @return start time      */
specifier|private
specifier|static
name|long
name|getTS
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|AbstractFSWALProvider
operator|.
name|getWALStartTimeFromWALName
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|ReplicationQueueInfo
name|getReplicationQueueInfo
parameter_list|()
block|{
return|return
name|replicationQueueInfo
return|;
block|}
specifier|public
name|boolean
name|isWorkerRunning
parameter_list|()
block|{
for|for
control|(
name|ReplicationSourceShipper
name|worker
range|:
name|this
operator|.
name|workerThreads
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|worker
operator|.
name|isActive
argument_list|()
condition|)
block|{
return|return
name|worker
operator|.
name|isActive
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStats
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Total replicated edits: "
argument_list|)
operator|.
name|append
argument_list|(
name|totalReplicatedEdits
argument_list|)
operator|.
name|append
argument_list|(
literal|", current progress: \n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ReplicationSourceShipper
argument_list|>
name|entry
range|:
name|workerThreads
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|walGroupId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ReplicationSourceShipper
name|worker
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|position
init|=
name|worker
operator|.
name|getCurrentPosition
argument_list|()
decl_stmt|;
name|Path
name|currentPath
init|=
name|worker
operator|.
name|getCurrentPath
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"walGroup ["
argument_list|)
operator|.
name|append
argument_list|(
name|walGroupId
argument_list|)
operator|.
name|append
argument_list|(
literal|"]: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentPath
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"currently replicating from: "
argument_list|)
operator|.
name|append
argument_list|(
name|currentPath
argument_list|)
operator|.
name|append
argument_list|(
literal|" at position: "
argument_list|)
operator|.
name|append
argument_list|(
name|position
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"no replication ongoing, waiting for new log"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsSource
name|getSourceMetrics
parameter_list|()
block|{
return|return
name|this
operator|.
name|metrics
return|;
block|}
annotation|@
name|Override
comment|//offsets totalBufferUsed by deducting shipped batchSize.
specifier|public
name|void
name|postShipEdits
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|throttler
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|throttler
operator|.
name|addPushSize
argument_list|(
name|batchSize
argument_list|)
expr_stmt|;
block|}
name|totalReplicatedEdits
operator|.
name|addAndGet
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|totalBufferUsed
operator|.
name|addAndGet
argument_list|(
operator|-
name|batchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WALFileLengthProvider
name|getWALFileLengthProvider
parameter_list|()
block|{
return|return
name|walFileLengthProvider
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerWALsBelongTo
parameter_list|()
block|{
return|return
name|server
operator|.
name|getServerName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReplicationPeer
name|getPeer
parameter_list|()
block|{
return|return
name|replicationPeer
return|;
block|}
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
name|ReplicationQueueStorage
name|getQueueStorage
parameter_list|()
block|{
return|return
name|queueStorage
return|;
block|}
name|void
name|removeWorker
parameter_list|(
name|ReplicationSourceShipper
name|worker
parameter_list|)
block|{
name|workerThreads
operator|.
name|remove
argument_list|(
name|worker
operator|.
name|walGroupId
argument_list|,
name|worker
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|logPeerId
parameter_list|()
block|{
return|return
literal|"[Source for peer "
operator|+
name|this
operator|.
name|getPeer
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"]:"
return|;
block|}
block|}
end_class

end_unit

