begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RSRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ChainWALEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ClusterMarkingEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SystemTableWALEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|WALEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|ReplicationSourceWALReaderThread
operator|.
name|WALEntryBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|BulkLoadDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|StoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Class that handles the source of a replication stream.  * Currently does not handle more than 1 slave  * For each slave cluster it selects a random number of peers  * using a replication ratio. For example, if replication ration = 0.1  * and slave cluster has 100 region servers, 10 will be selected.  *<p>  * A stream is considered down when we cannot contact a region server on the  * peer cluster for more than 55 seconds by default.  *</p>  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationSource
extends|extends
name|Thread
implements|implements
name|ReplicationSourceInterface
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationSource
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Queues of logs to process, entry in format of walGroupId->queue,
comment|// each presents a queue for one wal group
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// per group queue size, keep no more than this number of logs in each wal group
specifier|private
name|int
name|queueSizePerGroup
decl_stmt|;
specifier|private
name|ReplicationQueues
name|replicationQueues
decl_stmt|;
specifier|private
name|ReplicationPeers
name|replicationPeers
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|ReplicationQueueInfo
name|replicationQueueInfo
decl_stmt|;
comment|// id of the peer cluster this source replicates to
specifier|private
name|String
name|peerId
decl_stmt|;
name|String
name|actualPeerId
decl_stmt|;
comment|// The manager of all sources to which we ping back our progress
specifier|private
name|ReplicationSourceManager
name|manager
decl_stmt|;
comment|// Should we stop everything?
specifier|private
name|Stoppable
name|stopper
decl_stmt|;
comment|// How long should we sleep for each retry
specifier|private
name|long
name|sleepForRetries
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
comment|// id of this cluster
specifier|private
name|UUID
name|clusterId
decl_stmt|;
comment|// id of the other cluster
specifier|private
name|UUID
name|peerClusterId
decl_stmt|;
comment|// total number of edits we replicated
specifier|private
name|AtomicLong
name|totalReplicatedEdits
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// total number of edits we replicated
specifier|private
name|AtomicLong
name|totalReplicatedOperations
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// The znode we currently play with
specifier|private
name|String
name|peerClusterZnode
decl_stmt|;
comment|// Maximum number of retries before taking bold actions
specifier|private
name|int
name|maxRetriesMultiplier
decl_stmt|;
comment|// Indicates if this particular source is running
specifier|private
specifier|volatile
name|boolean
name|sourceRunning
init|=
literal|false
decl_stmt|;
comment|// Metrics for this source
specifier|private
name|MetricsSource
name|metrics
decl_stmt|;
comment|//WARN threshold for the number of queued logs, defaults to 2
specifier|private
name|int
name|logQueueWarnThreshold
decl_stmt|;
comment|// ReplicationEndpoint which will handle the actual replication
specifier|private
name|ReplicationEndpoint
name|replicationEndpoint
decl_stmt|;
comment|// A filter (or a chain of filters) for the WAL entries.
specifier|private
name|WALEntryFilter
name|walEntryFilter
decl_stmt|;
comment|// throttler
specifier|private
name|ReplicationThrottler
name|throttler
decl_stmt|;
specifier|private
name|long
name|defaultBandwidth
decl_stmt|;
specifier|private
name|long
name|currentBandwidth
decl_stmt|;
specifier|private
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ReplicationSourceShipperThread
argument_list|>
name|workerThreads
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ReplicationSourceShipperThread
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|totalBufferUsed
decl_stmt|;
comment|/**    * Instantiation method used by region servers    *    * @param conf configuration to use    * @param fs file system to use    * @param manager replication manager to ping to    * @param stopper     the atomic boolean to use to stop the regionserver    * @param peerClusterZnode the name of our znode    * @param clusterId unique UUID for the cluster    * @param replicationEndpoint the replication endpoint implementation    * @param metrics metrics for replication source    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|ReplicationSourceManager
name|manager
parameter_list|,
specifier|final
name|ReplicationQueues
name|replicationQueues
parameter_list|,
specifier|final
name|ReplicationPeers
name|replicationPeers
parameter_list|,
specifier|final
name|Stoppable
name|stopper
parameter_list|,
specifier|final
name|String
name|peerClusterZnode
parameter_list|,
specifier|final
name|UUID
name|clusterId
parameter_list|,
name|ReplicationEndpoint
name|replicationEndpoint
parameter_list|,
specifier|final
name|MetricsSource
name|metrics
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|stopper
operator|=
name|stopper
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|decorateConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|sleepForRetries
operator|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"replication.source.sleepforretries"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// 1 second
name|this
operator|.
name|maxRetriesMultiplier
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.source.maxretriesmultiplier"
argument_list|,
literal|300
argument_list|)
expr_stmt|;
comment|// 5 minutes @ 1 sec per
name|this
operator|.
name|queueSizePerGroup
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationQueues
operator|=
name|replicationQueues
expr_stmt|;
name|this
operator|.
name|replicationPeers
operator|=
name|replicationPeers
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|this
operator|.
name|peerClusterZnode
operator|=
name|peerClusterZnode
expr_stmt|;
name|this
operator|.
name|replicationQueueInfo
operator|=
operator|new
name|ReplicationQueueInfo
argument_list|(
name|peerClusterZnode
argument_list|)
expr_stmt|;
comment|// ReplicationQueueInfo parses the peerId out of the znode for us
name|this
operator|.
name|peerId
operator|=
name|this
operator|.
name|replicationQueueInfo
operator|.
name|getPeerId
argument_list|()
expr_stmt|;
name|ReplicationQueueInfo
name|replicationQueueInfo
init|=
operator|new
name|ReplicationQueueInfo
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|this
operator|.
name|actualPeerId
operator|=
name|replicationQueueInfo
operator|.
name|getPeerId
argument_list|()
expr_stmt|;
name|this
operator|.
name|logQueueWarnThreshold
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.source.log.queue.warn"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationEndpoint
operator|=
name|replicationEndpoint
expr_stmt|;
name|defaultBandwidth
operator|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"replication.source.per.peer.node.bandwidth"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|currentBandwidth
operator|=
name|getCurrentBandwidth
argument_list|()
expr_stmt|;
name|this
operator|.
name|throttler
operator|=
operator|new
name|ReplicationThrottler
argument_list|(
operator|(
name|double
operator|)
name|currentBandwidth
operator|/
literal|10.0
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalBufferUsed
operator|=
name|manager
operator|.
name|getTotalBufferUsed
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peerClusterZnode="
operator|+
name|peerClusterZnode
operator|+
literal|", ReplicationSource : "
operator|+
name|peerId
operator|+
literal|", currentBandwidth="
operator|+
name|this
operator|.
name|currentBandwidth
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|decorateConf
parameter_list|()
block|{
name|String
name|replicationCodec
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|REPLICATION_CODEC_CONF_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|replicationCodec
argument_list|)
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|RPC_CODEC_CONF_KEY
argument_list|,
name|replicationCodec
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enqueueLog
parameter_list|(
name|Path
name|log
parameter_list|)
block|{
name|String
name|logPrefix
init|=
name|AbstractFSWALProvider
operator|.
name|getWALPrefixFromWALName
argument_list|(
name|log
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|queue
init|=
name|queues
operator|.
name|get
argument_list|(
name|logPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|queue
operator|=
operator|new
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
argument_list|(
name|queueSizePerGroup
argument_list|,
operator|new
name|LogsComparator
argument_list|()
argument_list|)
expr_stmt|;
name|queues
operator|.
name|put
argument_list|(
name|logPrefix
argument_list|,
name|queue
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sourceRunning
condition|)
block|{
comment|// new wal group observed after source startup, start a new worker thread to track it
comment|// notice: it's possible that log enqueued when this.running is set but worker thread
comment|// still not launched, so it's necessary to check workerThreads before start the worker
specifier|final
name|ReplicationSourceShipperThread
name|worker
init|=
operator|new
name|ReplicationSourceShipperThread
argument_list|(
name|logPrefix
argument_list|,
name|queue
argument_list|,
name|replicationQueueInfo
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|ReplicationSourceShipperThread
name|extant
init|=
name|workerThreads
operator|.
name|putIfAbsent
argument_list|(
name|logPrefix
argument_list|,
name|worker
argument_list|)
decl_stmt|;
if|if
condition|(
name|extant
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Someone has beat us to start a worker thread for wal group "
operator|+
name|logPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting up worker for wal group "
operator|+
name|logPrefix
argument_list|)
expr_stmt|;
name|worker
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|queue
operator|.
name|put
argument_list|(
name|log
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|incrSizeOfLogQueue
argument_list|()
expr_stmt|;
comment|// This will log a warning for each new log that gets created above the warn threshold
name|int
name|queueSize
init|=
name|queue
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|queueSize
operator|>
name|this
operator|.
name|logQueueWarnThreshold
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"WAL group "
operator|+
name|logPrefix
operator|+
literal|" queue size: "
operator|+
name|queueSize
operator|+
literal|" exceeds value of replication.source.log.queue.warn: "
operator|+
name|logQueueWarnThreshold
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addHFileRefs
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|pairs
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|String
name|peerId
init|=
name|peerClusterZnode
decl_stmt|;
if|if
condition|(
name|peerId
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
comment|// peerClusterZnode will be in the form peerId + "-" + rsZNode.
comment|// A peerId will not have "-" in its name, see HBASE-11394
name|peerId
operator|=
name|peerClusterZnode
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFMap
init|=
name|replicationPeers
operator|.
name|getConnectedPeer
argument_list|(
name|peerId
argument_list|)
operator|.
name|getTableCFs
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableCFMap
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableCfs
init|=
name|tableCFMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCFMap
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
operator|&&
operator|(
name|tableCfs
operator|==
literal|null
operator|||
name|tableCfs
operator|.
name|contains
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|replicationQueues
operator|.
name|addHFileRefs
argument_list|(
name|peerId
argument_list|,
name|pairs
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrSizeOfHFileRefsQueue
argument_list|(
name|pairs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HFiles will not be replicated belonging to the table "
operator|+
name|tableName
operator|+
literal|" family "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|" to peer id "
operator|+
name|peerId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// user has explicitly not defined any table cfs for replication, means replicate all the
comment|// data
name|this
operator|.
name|replicationQueues
operator|.
name|addHFileRefs
argument_list|(
name|peerId
argument_list|,
name|pairs
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrSizeOfHFileRefsQueue
argument_list|(
name|pairs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|uninitialize
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Source exiting "
operator|+
name|this
operator|.
name|peerId
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|replicationEndpoint
operator|.
name|state
argument_list|()
operator|==
name|Service
operator|.
name|State
operator|.
name|STARTING
operator|||
name|replicationEndpoint
operator|.
name|state
argument_list|()
operator|==
name|Service
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
name|replicationEndpoint
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// mark we are running now
name|this
operator|.
name|sourceRunning
operator|=
literal|true
expr_stmt|;
try|try
block|{
comment|// start the endpoint, connect to the cluster
name|Service
operator|.
name|State
name|state
init|=
name|replicationEndpoint
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|Service
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ReplicationEndpoint was not started. Exiting"
argument_list|)
expr_stmt|;
name|uninitialize
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error starting ReplicationEndpoint, exiting"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// get the WALEntryFilter from ReplicationEndpoint and add it to default filters
name|ArrayList
argument_list|<
name|WALEntryFilter
argument_list|>
name|filters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|(
name|WALEntryFilter
operator|)
operator|new
name|SystemTableWALEntryFilter
argument_list|()
argument_list|)
decl_stmt|;
name|WALEntryFilter
name|filterFromEndpoint
init|=
name|this
operator|.
name|replicationEndpoint
operator|.
name|getWALEntryfilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterFromEndpoint
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|filterFromEndpoint
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|walEntryFilter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|int
name|sleepMultiplier
init|=
literal|1
decl_stmt|;
comment|// delay this until we are in an asynchronous thread
while|while
condition|(
name|this
operator|.
name|isSourceActive
argument_list|()
operator|&&
name|this
operator|.
name|peerClusterId
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|peerClusterId
operator|=
name|replicationEndpoint
operator|.
name|getPeerUUID
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSourceActive
argument_list|()
operator|&&
name|this
operator|.
name|peerClusterId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sleepForRetries
argument_list|(
literal|"Cannot contact the peer's zk ensemble"
argument_list|,
name|sleepMultiplier
argument_list|)
condition|)
block|{
name|sleepMultiplier
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// In rare case, zookeeper setting may be messed up. That leads to the incorrect
comment|// peerClusterId value, which is the same as the source clusterId
if|if
condition|(
name|clusterId
operator|.
name|equals
argument_list|(
name|peerClusterId
argument_list|)
operator|&&
operator|!
name|replicationEndpoint
operator|.
name|canReplicateToSameCluster
argument_list|()
condition|)
block|{
name|this
operator|.
name|terminate
argument_list|(
literal|"ClusterId "
operator|+
name|clusterId
operator|+
literal|" is replicating to itself: peerClusterId "
operator|+
name|peerClusterId
operator|+
literal|" which is not allowed by ReplicationEndpoint:"
operator|+
name|replicationEndpoint
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|manager
operator|.
name|closeQueue
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Replicating "
operator|+
name|clusterId
operator|+
literal|" -> "
operator|+
name|peerClusterId
argument_list|)
expr_stmt|;
comment|// start workers
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|queues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|walGroupId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|queue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|ReplicationSourceShipperThread
name|worker
init|=
operator|new
name|ReplicationSourceShipperThread
argument_list|(
name|walGroupId
argument_list|,
name|queue
argument_list|,
name|replicationQueueInfo
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|ReplicationSourceShipperThread
name|extant
init|=
name|workerThreads
operator|.
name|putIfAbsent
argument_list|(
name|walGroupId
argument_list|,
name|worker
argument_list|)
decl_stmt|;
if|if
condition|(
name|extant
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Someone has beat us to start a worker thread for wal group "
operator|+
name|walGroupId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting up worker for wal group "
operator|+
name|walGroupId
argument_list|)
expr_stmt|;
name|worker
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Do the sleeping logic    * @param msg Why we sleep    * @param sleepMultiplier by how many times the default sleeping time is augmented    * @return True if<code>sleepMultiplier</code> is&lt;<code>maxRetriesMultiplier</code>    */
specifier|protected
name|boolean
name|sleepForRetries
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|sleepMultiplier
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|msg
operator|+
literal|", sleeping "
operator|+
name|sleepForRetries
operator|+
literal|" times "
operator|+
name|sleepMultiplier
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|sleepForRetries
operator|*
name|sleepMultiplier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping between retries"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
name|sleepMultiplier
operator|<
name|maxRetriesMultiplier
return|;
block|}
comment|/**    * check whether the peer is enabled or not    *    * @return true if the peer is enabled, otherwise false    */
specifier|protected
name|boolean
name|isPeerEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationPeers
operator|.
name|getStatusOfPeer
argument_list|(
name|this
operator|.
name|peerId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startup
parameter_list|()
block|{
name|String
name|n
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|UncaughtExceptionHandler
name|handler
init|=
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
specifier|final
name|Thread
name|t
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception in ReplicationSource"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
argument_list|,
name|n
operator|+
literal|".replicationSource,"
operator|+
name|this
operator|.
name|peerClusterZnode
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|terminate
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|terminate
argument_list|(
name|reason
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|terminate
parameter_list|(
name|String
name|reason
parameter_list|,
name|Exception
name|cause
parameter_list|)
block|{
name|terminate
argument_list|(
name|reason
argument_list|,
name|cause
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|terminate
parameter_list|(
name|String
name|reason
parameter_list|,
name|Exception
name|cause
parameter_list|,
name|boolean
name|join
parameter_list|)
block|{
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing source "
operator|+
name|this
operator|.
name|peerClusterZnode
operator|+
literal|" because: "
operator|+
name|reason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing source "
operator|+
name|this
operator|.
name|peerClusterZnode
operator|+
literal|" because an error occurred: "
operator|+
name|reason
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|sourceRunning
operator|=
literal|false
expr_stmt|;
name|Collection
argument_list|<
name|ReplicationSourceShipperThread
argument_list|>
name|workers
init|=
name|workerThreads
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplicationSourceShipperThread
name|worker
range|:
name|workers
control|)
block|{
name|worker
operator|.
name|setWorkerRunning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|worker
operator|.
name|entryReader
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|worker
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|ListenableFuture
argument_list|<
name|Service
operator|.
name|State
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|replicationEndpoint
operator|!=
literal|null
condition|)
block|{
name|future
operator|=
name|this
operator|.
name|replicationEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|join
condition|)
block|{
for|for
control|(
name|ReplicationSourceShipperThread
name|worker
range|:
name|workers
control|)
block|{
name|Threads
operator|.
name|shutdown
argument_list|(
name|worker
argument_list|,
name|this
operator|.
name|sleepForRetries
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ReplicationSourceWorker "
operator|+
name|worker
operator|.
name|getName
argument_list|()
operator|+
literal|" terminated"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|(
name|sleepForRetries
operator|*
name|maxRetriesMultiplier
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception while waiting for endpoint to shutdown for replication source :"
operator|+
name|this
operator|.
name|peerClusterZnode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPeerClusterZnode
parameter_list|()
block|{
return|return
name|this
operator|.
name|peerClusterZnode
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPeerClusterId
parameter_list|()
block|{
return|return
name|this
operator|.
name|peerId
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getCurrentPath
parameter_list|()
block|{
comment|// only for testing
for|for
control|(
name|ReplicationSourceShipperThread
name|worker
range|:
name|workerThreads
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|worker
operator|.
name|getCurrentPath
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|worker
operator|.
name|getCurrentPath
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isSourceActive
parameter_list|()
block|{
return|return
operator|!
name|this
operator|.
name|stopper
operator|.
name|isStopped
argument_list|()
operator|&&
name|this
operator|.
name|sourceRunning
return|;
block|}
comment|/**    * Comparator used to compare logs together based on their start time    */
specifier|public
specifier|static
class|class
name|LogsComparator
implements|implements
name|Comparator
argument_list|<
name|Path
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Path
name|o1
parameter_list|,
name|Path
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTS
argument_list|(
name|o1
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getTS
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Split a path to get the start time      * For example: 10.20.20.171%3A60020.1277499063250      * @param p path to split      * @return start time      */
specifier|private
specifier|static
name|long
name|getTS
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|int
name|tsIndex
init|=
name|p
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
decl_stmt|;
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|tsIndex
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStats
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Total replicated edits: "
argument_list|)
operator|.
name|append
argument_list|(
name|totalReplicatedEdits
argument_list|)
operator|.
name|append
argument_list|(
literal|", current progress: \n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ReplicationSourceShipperThread
argument_list|>
name|entry
range|:
name|workerThreads
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|walGroupId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ReplicationSourceShipperThread
name|worker
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|position
init|=
name|worker
operator|.
name|getCurrentPosition
argument_list|()
decl_stmt|;
name|Path
name|currentPath
init|=
name|worker
operator|.
name|getCurrentPath
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"walGroup ["
argument_list|)
operator|.
name|append
argument_list|(
name|walGroupId
argument_list|)
operator|.
name|append
argument_list|(
literal|"]: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentPath
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"currently replicating from: "
argument_list|)
operator|.
name|append
argument_list|(
name|currentPath
argument_list|)
operator|.
name|append
argument_list|(
literal|" at position: "
argument_list|)
operator|.
name|append
argument_list|(
name|position
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"no replication ongoing, waiting for new log"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get Replication Source Metrics    * @return sourceMetrics    */
specifier|public
name|MetricsSource
name|getSourceMetrics
parameter_list|()
block|{
return|return
name|this
operator|.
name|metrics
return|;
block|}
specifier|private
name|long
name|getCurrentBandwidth
parameter_list|()
block|{
name|ReplicationPeer
name|replicationPeer
init|=
name|this
operator|.
name|replicationPeers
operator|.
name|getConnectedPeer
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|long
name|peerBandwidth
init|=
name|replicationPeer
operator|!=
literal|null
condition|?
name|replicationPeer
operator|.
name|getPeerBandwidth
argument_list|()
else|:
literal|0
decl_stmt|;
comment|// user can set peer bandwidth to 0 to use default bandwidth
return|return
name|peerBandwidth
operator|!=
literal|0
condition|?
name|peerBandwidth
else|:
name|defaultBandwidth
return|;
block|}
comment|// This thread reads entries from a queue and ships them.
comment|// Entries are placed onto the queue by ReplicationSourceWALReaderThread
specifier|public
class|class
name|ReplicationSourceShipperThread
extends|extends
name|Thread
block|{
name|ReplicationSourceInterface
name|source
decl_stmt|;
name|String
name|walGroupId
decl_stmt|;
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|queue
decl_stmt|;
name|ReplicationQueueInfo
name|replicationQueueInfo
decl_stmt|;
comment|// Last position in the log that we sent to ZooKeeper
specifier|private
name|long
name|lastLoggedPosition
init|=
operator|-
literal|1
decl_stmt|;
comment|// Path of the current log
specifier|private
specifier|volatile
name|Path
name|currentPath
decl_stmt|;
comment|// Indicates whether this particular worker is running
specifier|private
name|boolean
name|workerRunning
init|=
literal|true
decl_stmt|;
name|ReplicationSourceWALReaderThread
name|entryReader
decl_stmt|;
comment|// Use guava cache to set ttl for each key
specifier|private
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|canSkipWaitingSet
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|public
name|ReplicationSourceShipperThread
parameter_list|(
name|String
name|walGroupId
parameter_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|queue
parameter_list|,
name|ReplicationQueueInfo
name|replicationQueueInfo
parameter_list|,
name|ReplicationSourceInterface
name|source
parameter_list|)
block|{
name|this
operator|.
name|walGroupId
operator|=
name|walGroupId
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|replicationQueueInfo
operator|=
name|replicationQueueInfo
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Loop until we close down
while|while
condition|(
name|isWorkerActive
argument_list|()
condition|)
block|{
name|int
name|sleepMultiplier
init|=
literal|1
decl_stmt|;
comment|// Sleep until replication is enabled again
if|if
condition|(
operator|!
name|isPeerEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|sleepForRetries
argument_list|(
literal|"Replication is disabled"
argument_list|,
name|sleepMultiplier
argument_list|)
condition|)
block|{
name|sleepMultiplier
operator|++
expr_stmt|;
block|}
continue|continue;
block|}
while|while
condition|(
name|entryReader
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sleepForRetries
argument_list|(
literal|"Replication WAL entry reader thread not initialized"
argument_list|,
name|sleepMultiplier
argument_list|)
condition|)
block|{
name|sleepMultiplier
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|sleepMultiplier
operator|==
name|maxRetriesMultiplier
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Replication WAL entry reader thread not initialized"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|WALEntryBatch
name|entryBatch
init|=
name|entryReader
operator|.
name|take
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|entryBatch
operator|.
name|getLastSeqIds
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|waitingUntilCanPush
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|shipEdits
argument_list|(
name|entryBatch
argument_list|)
expr_stmt|;
name|releaseBufferQuota
argument_list|(
operator|(
name|int
operator|)
name|entryBatch
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicationQueueInfo
operator|.
name|isQueueRecovered
argument_list|()
operator|&&
name|entryBatch
operator|.
name|getWalEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|entryBatch
operator|.
name|getLastSeqIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished recovering queue for group "
operator|+
name|walGroupId
operator|+
literal|" of peer "
operator|+
name|peerClusterZnode
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrCompletedRecoveryQueue
argument_list|()
expr_stmt|;
name|setWorkerRunning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Interrupted while waiting for next replication entry batch"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replicationQueueInfo
operator|.
name|isQueueRecovered
argument_list|()
condition|)
block|{
comment|// use synchronize to make sure one last thread will clean the queue
synchronized|synchronized
init|(
name|workerThreads
init|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// wait a short while for other worker thread to fully exit
name|boolean
name|allOtherTaskDone
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ReplicationSourceShipperThread
name|worker
range|:
name|workerThreads
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|worker
operator|.
name|equals
argument_list|(
name|this
argument_list|)
operator|&&
name|worker
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|allOtherTaskDone
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allOtherTaskDone
condition|)
block|{
name|manager
operator|.
name|closeRecoveredQueue
argument_list|(
name|this
operator|.
name|source
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished recovering queue "
operator|+
name|peerClusterZnode
operator|+
literal|" with the following stats: "
operator|+
name|getStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|waitingUntilCanPush
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
parameter_list|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|long
name|seq
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|deleteKey
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|seq
operator|<=
literal|0
condition|)
block|{
comment|// There is a REGION_CLOSE marker, we can not continue skipping after this entry.
name|deleteKey
operator|=
literal|true
expr_stmt|;
name|seq
operator|=
operator|-
name|seq
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|canSkipWaitingSet
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
condition|)
block|{
try|try
block|{
name|manager
operator|.
name|waitUntilCanBePushed
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|seq
argument_list|,
name|actualPeerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"waitUntilCanBePushed fail"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
literal|"waitUntilCanBePushed fail"
argument_list|)
expr_stmt|;
block|}
name|canSkipWaitingSet
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteKey
condition|)
block|{
name|canSkipWaitingSet
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|cleanUpHFileRefs
parameter_list|(
name|WALEdit
name|edit
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|peerId
init|=
name|peerClusterZnode
decl_stmt|;
if|if
condition|(
name|peerId
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
comment|// peerClusterZnode will be in the form peerId + "-" + rsZNode.
comment|// A peerId will not have "-" in its name, see HBASE-11394
name|peerId
operator|=
name|peerClusterZnode
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|edit
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|int
name|totalCells
init|=
name|cells
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalCells
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|cell
argument_list|,
name|WALEdit
operator|.
name|BULK_LOAD
argument_list|)
condition|)
block|{
name|BulkLoadDescriptor
name|bld
init|=
name|WALEdit
operator|.
name|getBulkLoadDescriptor
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|stores
init|=
name|bld
operator|.
name|getStoresList
argument_list|()
decl_stmt|;
name|int
name|totalStores
init|=
name|stores
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|totalStores
condition|;
name|j
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|storeFileList
init|=
name|stores
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getStoreFileList
argument_list|()
decl_stmt|;
name|manager
operator|.
name|cleanUpHFileRefs
argument_list|(
name|peerId
argument_list|,
name|storeFileList
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|decrSizeOfHFileRefsQueue
argument_list|(
name|storeFileList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|checkBandwidthChangeAndResetThrottler
parameter_list|()
block|{
name|long
name|peerBandwidth
init|=
name|getCurrentBandwidth
argument_list|()
decl_stmt|;
if|if
condition|(
name|peerBandwidth
operator|!=
name|currentBandwidth
condition|)
block|{
name|currentBandwidth
operator|=
name|peerBandwidth
expr_stmt|;
name|throttler
operator|.
name|setBandwidth
argument_list|(
operator|(
name|double
operator|)
name|currentBandwidth
operator|/
literal|10.0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ReplicationSource : "
operator|+
name|peerId
operator|+
literal|" bandwidth throttling changed, currentBandWidth="
operator|+
name|currentBandwidth
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Do the shipping logic      */
specifier|protected
name|void
name|shipEdits
parameter_list|(
name|WALEntryBatch
name|entryBatch
parameter_list|)
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
name|entryBatch
operator|.
name|getWalEntries
argument_list|()
decl_stmt|;
name|long
name|lastReadPosition
init|=
name|entryBatch
operator|.
name|getLastWalPosition
argument_list|()
decl_stmt|;
name|currentPath
operator|=
name|entryBatch
operator|.
name|getLastWalPath
argument_list|()
expr_stmt|;
name|int
name|sleepMultiplier
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|lastLoggedPosition
operator|!=
name|lastReadPosition
condition|)
block|{
comment|// Save positions to meta table before zk.
name|updateSerialRepPositions
argument_list|(
name|entryBatch
operator|.
name|getLastSeqIds
argument_list|()
argument_list|)
expr_stmt|;
name|updateLogPosition
argument_list|(
name|lastReadPosition
argument_list|)
expr_stmt|;
comment|// if there was nothing to ship and it's not an error
comment|// set "ageOfLastShippedOp" to<now> to indicate that we're current
name|metrics
operator|.
name|setAgeOfLastShippedOp
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
name|walGroupId
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|int
name|currentSize
init|=
operator|(
name|int
operator|)
name|entryBatch
operator|.
name|getHeapSize
argument_list|()
decl_stmt|;
while|while
condition|(
name|isWorkerActive
argument_list|()
condition|)
block|{
try|try
block|{
name|checkBandwidthChangeAndResetThrottler
argument_list|()
expr_stmt|;
if|if
condition|(
name|throttler
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|long
name|sleepTicks
init|=
name|throttler
operator|.
name|getNextSleepInterval
argument_list|(
name|currentSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|sleepTicks
operator|>
literal|0
condition|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"To sleep "
operator|+
name|sleepTicks
operator|+
literal|"ms for throttling control"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTicks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping for throttling control"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// current thread might be interrupted to terminate
comment|// directly go back to while() for confirm this
continue|continue;
block|}
comment|// reset throttler's cycle start tick when sleep for throttling occurs
name|throttler
operator|.
name|resetStartTick
argument_list|()
expr_stmt|;
block|}
block|}
comment|// create replicateContext here, so the entries can be GC'd upon return from this call
comment|// stack
name|ReplicationEndpoint
operator|.
name|ReplicateContext
name|replicateContext
init|=
operator|new
name|ReplicationEndpoint
operator|.
name|ReplicateContext
argument_list|()
decl_stmt|;
name|replicateContext
operator|.
name|setEntries
argument_list|(
name|entries
argument_list|)
operator|.
name|setSize
argument_list|(
name|currentSize
argument_list|)
expr_stmt|;
name|replicateContext
operator|.
name|setWalGroupId
argument_list|(
name|walGroupId
argument_list|)
expr_stmt|;
name|long
name|startTimeNs
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// send the edits to the endpoint. Will block until the edits are shipped and acknowledged
name|boolean
name|replicated
init|=
name|replicationEndpoint
operator|.
name|replicate
argument_list|(
name|replicateContext
argument_list|)
decl_stmt|;
name|long
name|endTimeNs
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|replicated
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|sleepMultiplier
operator|=
name|Math
operator|.
name|max
argument_list|(
name|sleepMultiplier
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|lastLoggedPosition
operator|!=
name|lastReadPosition
condition|)
block|{
comment|//Clean up hfile references
name|int
name|size
init|=
name|entries
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|cleanUpHFileRefs
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Save positions to meta table before zk.
name|updateSerialRepPositions
argument_list|(
name|entryBatch
operator|.
name|getLastSeqIds
argument_list|()
argument_list|)
expr_stmt|;
comment|//Log and clean up WAL logs
name|updateLogPosition
argument_list|(
name|lastReadPosition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|throttler
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|throttler
operator|.
name|addPushSize
argument_list|(
name|currentSize
argument_list|)
expr_stmt|;
block|}
name|totalReplicatedEdits
operator|.
name|addAndGet
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|totalReplicatedOperations
operator|.
name|addAndGet
argument_list|(
name|entryBatch
operator|.
name|getNbOperations
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIXME check relationship between wal group and overall
name|metrics
operator|.
name|shipBatch
argument_list|(
name|entryBatch
operator|.
name|getNbOperations
argument_list|()
argument_list|,
name|currentSize
argument_list|,
name|entryBatch
operator|.
name|getNbHFiles
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAgeOfLastShippedOp
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|getWriteTime
argument_list|()
argument_list|,
name|walGroupId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Replicated "
operator|+
name|totalReplicatedEdits
operator|+
literal|" entries in total, or "
operator|+
name|totalReplicatedOperations
operator|+
literal|" operations in "
operator|+
operator|(
operator|(
name|endTimeNs
operator|-
name|startTimeNs
operator|)
operator|/
literal|1000000
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|replicationEndpoint
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" threw unknown exception:"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleepForRetries
argument_list|(
literal|"ReplicationEndpoint threw exception"
argument_list|,
name|sleepMultiplier
argument_list|)
condition|)
block|{
name|sleepMultiplier
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|updateSerialRepPositions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastPositionsForSerialScope
parameter_list|)
block|{
try|try
block|{
name|MetaTableAccessor
operator|.
name|updateReplicationPositions
argument_list|(
name|manager
operator|.
name|getConnection
argument_list|()
argument_list|,
name|actualPeerId
argument_list|,
name|lastPositionsForSerialScope
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"updateReplicationPositions fail"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
literal|"updateReplicationPositions fail"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateLogPosition
parameter_list|(
name|long
name|lastReadPosition
parameter_list|)
block|{
name|manager
operator|.
name|logPositionAndCleanOldLogs
argument_list|(
name|currentPath
argument_list|,
name|peerClusterZnode
argument_list|,
name|lastReadPosition
argument_list|,
name|this
operator|.
name|replicationQueueInfo
operator|.
name|isQueueRecovered
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|lastLoggedPosition
operator|=
name|lastReadPosition
expr_stmt|;
block|}
specifier|public
name|void
name|startup
parameter_list|()
block|{
name|String
name|n
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|UncaughtExceptionHandler
name|handler
init|=
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
specifier|final
name|Thread
name|t
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|RSRpcServices
operator|.
name|exitIfOOME
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception in ReplicationSourceWorkerThread,"
operator|+
literal|" currentPath="
operator|+
name|getCurrentPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
literal|"Unexpected exception in ReplicationSourceWorkerThread"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
argument_list|,
name|n
operator|+
literal|".replicationSource."
operator|+
name|walGroupId
operator|+
literal|","
operator|+
name|peerClusterZnode
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|workerThreads
operator|.
name|put
argument_list|(
name|walGroupId
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|long
name|startPosition
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|replicationQueueInfo
operator|.
name|isQueueRecovered
argument_list|()
condition|)
block|{
name|startPosition
operator|=
name|getRecoveredQueueStartPos
argument_list|(
name|startPosition
argument_list|)
expr_stmt|;
name|int
name|numRetries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numRetries
operator|<=
name|maxRetriesMultiplier
condition|)
block|{
try|try
block|{
name|locateRecoveredPaths
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while locating recovered queue paths, attempt #"
operator|+
name|numRetries
argument_list|)
expr_stmt|;
name|numRetries
operator|++
expr_stmt|;
block|}
block|}
block|}
name|startWALReaderThread
argument_list|(
name|n
argument_list|,
name|handler
argument_list|,
name|startPosition
argument_list|)
expr_stmt|;
block|}
comment|// If this is a recovered queue, the queue is already full and the first log
comment|// normally has a position (unless the RS failed between 2 logs)
specifier|private
name|long
name|getRecoveredQueueStartPos
parameter_list|(
name|long
name|startPosition
parameter_list|)
block|{
try|try
block|{
name|startPosition
operator|=
operator|(
name|replicationQueues
operator|.
name|getLogPosition
argument_list|(
name|peerClusterZnode
argument_list|,
name|this
operator|.
name|queue
operator|.
name|peek
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Recovered queue started with log "
operator|+
name|this
operator|.
name|queue
operator|.
name|peek
argument_list|()
operator|+
literal|" at position "
operator|+
name|startPosition
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
name|terminate
argument_list|(
literal|"Couldn't get the position of this recovered queue "
operator|+
name|peerClusterZnode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|startPosition
return|;
block|}
comment|// start a background thread to read and batch entries
specifier|private
name|void
name|startWALReaderThread
parameter_list|(
name|String
name|threadName
parameter_list|,
name|Thread
operator|.
name|UncaughtExceptionHandler
name|handler
parameter_list|,
name|long
name|startPosition
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|WALEntryFilter
argument_list|>
name|filters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|walEntryFilter
argument_list|,
operator|new
name|ClusterMarkingEntryFilter
argument_list|(
name|clusterId
argument_list|,
name|peerClusterId
argument_list|,
name|replicationEndpoint
argument_list|)
argument_list|)
decl_stmt|;
name|ChainWALEntryFilter
name|readerFilter
init|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|filters
argument_list|)
decl_stmt|;
name|entryReader
operator|=
operator|new
name|ReplicationSourceWALReaderThread
argument_list|(
name|manager
argument_list|,
name|replicationQueueInfo
argument_list|,
name|queue
argument_list|,
name|startPosition
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|readerFilter
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|entryReader
argument_list|,
name|threadName
operator|+
literal|".replicationSource.replicationWALReaderThread."
operator|+
name|walGroupId
operator|+
literal|","
operator|+
name|peerClusterZnode
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|// Loops through the recovered queue and tries to find the location of each log
comment|// this is necessary because the logs may have moved before recovery was initiated
specifier|private
name|void
name|locateRecoveredPaths
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|hasPathChanged
init|=
literal|false
decl_stmt|;
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|newPaths
init|=
operator|new
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
argument_list|(
name|queueSizePerGroup
argument_list|,
operator|new
name|LogsComparator
argument_list|()
argument_list|)
decl_stmt|;
name|pathsLoop
label|:
for|for
control|(
name|Path
name|path
range|:
name|queue
control|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// still in same location, don't need to do anything
name|newPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Path changed - try to find the right path.
name|hasPathChanged
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|stopper
operator|instanceof
name|ReplicationSyncUp
operator|.
name|DummyServer
condition|)
block|{
comment|// In the case of disaster/recovery, HMaster may be shutdown/crashed before flush data
comment|// from .logs to .oldlogs. Loop into .logs folders and check whether a match exists
name|Path
name|newPath
init|=
name|getReplSyncUpPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|newPaths
operator|.
name|add
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
comment|// See if Path exists in the dead RS folder (there could be a chain of failures
comment|// to look at)
name|List
argument_list|<
name|String
argument_list|>
name|deadRegionServers
init|=
name|this
operator|.
name|replicationQueueInfo
operator|.
name|getDeadRegionServers
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NB dead servers : "
operator|+
name|deadRegionServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|walDir
init|=
name|FSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|curDeadServerName
range|:
name|deadRegionServers
control|)
block|{
specifier|final
name|Path
name|deadRsDirectory
init|=
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|curDeadServerName
argument_list|)
argument_list|)
decl_stmt|;
name|Path
index|[]
name|locs
init|=
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
name|deadRsDirectory
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|deadRsDirectory
operator|.
name|suffix
argument_list|(
name|AbstractFSWALProvider
operator|.
name|SPLITTING_EXT
argument_list|)
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Path
name|possibleLogLocation
range|:
name|locs
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Possible location "
operator|+
name|possibleLogLocation
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|manager
operator|.
name|getFs
argument_list|()
operator|.
name|exists
argument_list|(
name|possibleLogLocation
argument_list|)
condition|)
block|{
comment|// We found the right new location
name|LOG
operator|.
name|info
argument_list|(
literal|"Log "
operator|+
name|path
operator|+
literal|" still exists at "
operator|+
name|possibleLogLocation
argument_list|)
expr_stmt|;
name|newPaths
operator|.
name|add
argument_list|(
name|possibleLogLocation
argument_list|)
expr_stmt|;
continue|continue
name|pathsLoop
continue|;
block|}
block|}
block|}
comment|// didn't find a new location
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"WAL Path %s doesn't exist and couldn't find its new location"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|newPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasPathChanged
condition|)
block|{
if|if
condition|(
name|newPaths
operator|.
name|size
argument_list|()
operator|!=
name|queue
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// this shouldn't happen
name|LOG
operator|.
name|error
argument_list|(
literal|"Recovery queue size is incorrect"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Recovery queue size error"
argument_list|)
throw|;
block|}
comment|// put the correct locations in the queue
comment|// since this is a recovered queue with no new incoming logs,
comment|// there shouldn't be any concurrency issues
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|newPaths
control|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// N.B. the ReplicationSyncUp tool sets the manager.getWALDir to the root of the wal
comment|// area rather than to the wal area for a particular region server.
specifier|private
name|Path
name|getReplSyncUpPath
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|rss
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|manager
operator|.
name|getLogDir
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|rs
range|:
name|rss
control|)
block|{
name|Path
name|p
init|=
name|rs
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|log
range|:
name|logs
control|)
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|log
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Log "
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|" found at "
operator|+
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Didn't find path for: "
operator|+
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
specifier|public
name|Path
name|getCurrentPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentPath
return|;
block|}
specifier|public
name|long
name|getCurrentPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastLoggedPosition
return|;
block|}
specifier|private
name|boolean
name|isWorkerActive
parameter_list|()
block|{
return|return
operator|!
name|stopper
operator|.
name|isStopped
argument_list|()
operator|&&
name|workerRunning
operator|&&
operator|!
name|isInterrupted
argument_list|()
return|;
block|}
specifier|private
name|void
name|terminate
parameter_list|(
name|String
name|reason
parameter_list|,
name|Exception
name|cause
parameter_list|)
block|{
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing worker for wal group "
operator|+
name|this
operator|.
name|walGroupId
operator|+
literal|" because: "
operator|+
name|reason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing worker for wal group "
operator|+
name|this
operator|.
name|walGroupId
operator|+
literal|" because an error occurred: "
operator|+
name|reason
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
name|entryReader
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|Threads
operator|.
name|shutdown
argument_list|(
name|entryReader
argument_list|,
name|sleepForRetries
argument_list|)
expr_stmt|;
name|this
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|Threads
operator|.
name|shutdown
argument_list|(
name|this
argument_list|,
name|sleepForRetries
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ReplicationSourceWorker "
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" terminated"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setWorkerRunning
parameter_list|(
name|boolean
name|workerRunning
parameter_list|)
block|{
name|entryReader
operator|.
name|setReaderRunning
argument_list|(
name|workerRunning
argument_list|)
expr_stmt|;
name|this
operator|.
name|workerRunning
operator|=
name|workerRunning
expr_stmt|;
block|}
specifier|private
name|void
name|releaseBufferQuota
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|totalBufferUsed
operator|.
name|addAndGet
argument_list|(
operator|-
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

