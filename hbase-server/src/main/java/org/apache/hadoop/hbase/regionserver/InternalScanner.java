begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Internal scanners differ from client-side scanners in that they operate on  * HStoreKeys and byte[] instead of RowResults. This is because they are  * actually close to how the data is physically stored, and therefore it is more  * convenient to interact with them that way. It is also much easier to merge  * the results across SortedMaps than RowResults.  *  *<p>Additionally, we need to be able to determine if the scanner is doing  * wildcard column matches (when only a column family is specified or if a  * column regex is specified) or if multiple members of the same column family  * were specified. If so, we need to ignore the timestamp to ensure that we get  * all the family members, as they may have been last updated at different  * times.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|InternalScanner
extends|extends
name|Closeable
block|{
comment|/**    * This class encapsulates all the meaningful state information that we would like the know about    * after a call to {@link InternalScanner#next(List)}. While this is not an enum, a restriction on    * the possible states is implied through the exposed {@link #makeState(State)} method.    */
specifier|public
specifier|static
class|class
name|NextState
block|{
comment|/**      * The possible states we want to restrict ourselves to. This enum is not sufficient to      * encapsulate all of the state information since some of the fields of the state must be      * dynamic (e.g. resultSize).      */
specifier|public
enum|enum
name|State
block|{
name|MORE_VALUES
argument_list|(
literal|true
argument_list|)
block|,
name|NO_MORE_VALUES
argument_list|(
literal|false
argument_list|)
block|,
name|SIZE_LIMIT_REACHED
argument_list|(
literal|true
argument_list|)
block|,
name|BATCH_LIMIT_REACHED
argument_list|(
literal|true
argument_list|)
block|;
specifier|private
name|boolean
name|moreValues
decl_stmt|;
specifier|private
name|State
parameter_list|(
specifier|final
name|boolean
name|moreValues
parameter_list|)
block|{
name|this
operator|.
name|moreValues
operator|=
name|moreValues
expr_stmt|;
block|}
comment|/**        * @return true when the state indicates that more values may follow those that have been        *         returned        */
specifier|public
name|boolean
name|hasMoreValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|moreValues
return|;
block|}
block|}
comment|/**      * state variables      */
specifier|private
specifier|final
name|State
name|state
decl_stmt|;
specifier|private
name|long
name|resultSize
decl_stmt|;
comment|/**      * Value to use for resultSize when the size has not been calculated. Must be a negative number      * so that {@link NextState#hasResultSizeEstimate()} returns false.      */
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_RESULT_SIZE
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|NextState
parameter_list|(
name|State
name|state
parameter_list|,
name|long
name|resultSize
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|resultSize
operator|=
name|resultSize
expr_stmt|;
block|}
comment|/**      * @param state      * @return An instance of {@link NextState} where the size of the results returned from the call      *         to {@link InternalScanner#next(List)} is unknown. It it the responsibility of the      *         caller of {@link InternalScanner#next(List)} to calculate the result size if needed      */
specifier|public
specifier|static
name|NextState
name|makeState
parameter_list|(
specifier|final
name|State
name|state
parameter_list|)
block|{
return|return
name|makeState
argument_list|(
name|state
argument_list|,
name|DEFAULT_RESULT_SIZE
argument_list|)
return|;
block|}
comment|/**      * @param state      * @param resultSize      * @return An instance of {@link NextState} where the size of the values returned from the call      *         to {@link InternalScanner#next(List)} is known. The caller can avoid recalculating      *         the result size by using the cached value retrievable via {@link #getResultSize()}      */
specifier|public
specifier|static
name|NextState
name|makeState
parameter_list|(
specifier|final
name|State
name|state
parameter_list|,
name|long
name|resultSize
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|MORE_VALUES
case|:
return|return
name|createMoreValuesState
argument_list|(
name|resultSize
argument_list|)
return|;
case|case
name|NO_MORE_VALUES
case|:
return|return
name|createNoMoreValuesState
argument_list|(
name|resultSize
argument_list|)
return|;
case|case
name|BATCH_LIMIT_REACHED
case|:
return|return
name|createBatchLimitReachedState
argument_list|(
name|resultSize
argument_list|)
return|;
case|case
name|SIZE_LIMIT_REACHED
case|:
return|return
name|createSizeLimitReachedState
argument_list|(
name|resultSize
argument_list|)
return|;
default|default:
comment|// If the state is not recognized, default to no more value state
return|return
name|createNoMoreValuesState
argument_list|(
name|resultSize
argument_list|)
return|;
block|}
block|}
comment|/**      * Convenience method for creating a state that indicates that more values can be scanned      * @param resultSize estimate of the size (heap size) of the values returned from the call to      *          {@link InternalScanner#next(List)}      */
specifier|private
specifier|static
name|NextState
name|createMoreValuesState
parameter_list|(
name|long
name|resultSize
parameter_list|)
block|{
return|return
operator|new
name|NextState
argument_list|(
name|State
operator|.
name|MORE_VALUES
argument_list|,
name|resultSize
argument_list|)
return|;
block|}
comment|/**      * Convenience method for creating a state that indicates that no more values can be scanned.      * @param resultSize estimate of the size (heap size) of the values returned from the call to      *          {@link InternalScanner#next(List)}      */
specifier|private
specifier|static
name|NextState
name|createNoMoreValuesState
parameter_list|(
name|long
name|resultSize
parameter_list|)
block|{
return|return
operator|new
name|NextState
argument_list|(
name|State
operator|.
name|NO_MORE_VALUES
argument_list|,
name|resultSize
argument_list|)
return|;
block|}
comment|/**      * Convenience method for creating a state that indicates that the scan stopped because the      * batch limit was exceeded      * @param resultSize estimate of the size (heap size) of the values returned from the call to      *          {@link InternalScanner#next(List)}      */
specifier|private
specifier|static
name|NextState
name|createBatchLimitReachedState
parameter_list|(
name|long
name|resultSize
parameter_list|)
block|{
return|return
operator|new
name|NextState
argument_list|(
name|State
operator|.
name|BATCH_LIMIT_REACHED
argument_list|,
name|resultSize
argument_list|)
return|;
block|}
comment|/**      * Convenience method for creating a state that indicates that the scan stopped due to the size      * limit      * @param resultSize estimate of the size (heap size) of the values returned from the call to      *          {@link InternalScanner#next(List)}      */
specifier|private
specifier|static
name|NextState
name|createSizeLimitReachedState
parameter_list|(
name|long
name|resultSize
parameter_list|)
block|{
return|return
operator|new
name|NextState
argument_list|(
name|State
operator|.
name|SIZE_LIMIT_REACHED
argument_list|,
name|resultSize
argument_list|)
return|;
block|}
comment|/**      * @return true when the scanner has more values to be scanned following the values returned by      *         the call to {@link InternalScanner#next(List)}      */
specifier|public
name|boolean
name|hasMoreValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
comment|/**      * @return true when the scanner had to stop scanning because it reached the batch limit      */
specifier|public
name|boolean
name|batchLimitReached
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|==
name|State
operator|.
name|BATCH_LIMIT_REACHED
return|;
block|}
comment|/**      * @return true when the scanner had to stop scanning because it reached the size limit      */
specifier|public
name|boolean
name|sizeLimitReached
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|==
name|State
operator|.
name|SIZE_LIMIT_REACHED
return|;
block|}
comment|/**      * @return The size (heap size) of the values that were returned from the call to      *         {@link InternalScanner#next(List)}. This value should only be used if      *         {@link #hasResultSizeEstimate()} returns true.      */
specifier|public
name|long
name|getResultSize
parameter_list|()
block|{
return|return
name|resultSize
return|;
block|}
comment|/**      * @return true when an estimate for the size of the values returned by      *         {@link InternalScanner#next(List)} was provided. If false, it is the responsibility      *         of the caller to calculate the result size      */
specifier|public
name|boolean
name|hasResultSizeEstimate
parameter_list|()
block|{
return|return
name|resultSize
operator|>=
literal|0
return|;
block|}
comment|/**      * Helper method to centralize all checks as to whether or not the state is valid.      * @param state      * @return true when the state is valid      */
specifier|public
specifier|static
name|boolean
name|isValidState
parameter_list|(
name|NextState
name|state
parameter_list|)
block|{
return|return
name|state
operator|!=
literal|null
return|;
block|}
comment|/**      * @param state      * @return true when the state is non null and indicates that more values exist      */
specifier|public
specifier|static
name|boolean
name|hasMoreValues
parameter_list|(
name|NextState
name|state
parameter_list|)
block|{
return|return
name|state
operator|!=
literal|null
operator|&&
name|state
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
block|}
comment|/**    * Grab the next row's worth of values.    * @param results return output array    * @return state where {@link NextState#hasMoreValues()} is true if more rows exist after this    *         one, false if scanner is done    * @throws IOException e    */
name|NextState
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Grab the next row's worth of values with a limit on the number of values to return.    * @param result return output array    * @param limit limit on row count to get    * @return state where {@link NextState#hasMoreValues()} is true if more rows exist after this    *         one, false if scanner is done    * @throws IOException e    */
name|NextState
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Grab the next row's worth of values with a limit on the number of values to return as well as a    * restriction on the size of the list of values that are returned.    * @param result return output array    * @param limit limit on row count to get    * @param remainingResultSize limit on the size of the result being returned    * @return state where {@link NextState#hasMoreValues()} is true if more rows exist after this    *         one, false if scanner is done    * @throws IOException e    */
name|NextState
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|,
name|int
name|limit
parameter_list|,
name|long
name|remainingResultSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Closes the scanner and releases any resources it has allocated    * @throws IOException    */
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

