begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|AsyncCallback
operator|.
name|StringCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  * Callback handler for creating unassigned offline znodes  * used during bulk assign, async setting region to offline.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|OfflineCallback
implements|implements
name|StringCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OfflineCallback
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExistCallback
name|callBack
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
specifier|private
specifier|final
name|ServerName
name|destination
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|counter
decl_stmt|;
name|OfflineCallback
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|ServerName
name|destination
parameter_list|,
specifier|final
name|AtomicInteger
name|counter
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|offlineNodesVersions
parameter_list|)
block|{
name|this
operator|.
name|callBack
operator|=
operator|new
name|ExistCallback
argument_list|(
name|destination
argument_list|,
name|counter
argument_list|,
name|offlineNodesVersions
argument_list|)
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|zkw
operator|=
name|zkw
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|rc
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node for "
operator|+
name|path
operator|+
literal|" already exists"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
comment|// This is result code.  If non-zero, need to resubmit.
name|LOG
operator|.
name|warn
argument_list|(
literal|"rc != 0 for "
operator|+
name|path
operator|+
literal|" -- retryable connectionloss -- "
operator|+
literal|"FIX see http://wiki.apache.org/hadoop/ZooKeeper/FAQ#A2"
argument_list|)
expr_stmt|;
name|this
operator|.
name|counter
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rs="
operator|+
name|ctx
operator|+
literal|", server="
operator|+
name|destination
argument_list|)
expr_stmt|;
block|}
comment|// Async exists to set a watcher so we'll get triggered when
comment|// unassigned node changes.
name|ZooKeeper
name|zk
init|=
name|this
operator|.
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|zk
operator|.
name|exists
argument_list|(
name|path
argument_list|,
name|this
operator|.
name|zkw
argument_list|,
name|callBack
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Callback handler for the exists call that sets watcher on unassigned znodes.    * Used during bulk assign on startup.    */
specifier|static
class|class
name|ExistCallback
implements|implements
name|StatCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExistCallback
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|offlineNodesVersions
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|counter
decl_stmt|;
specifier|private
name|ServerName
name|destination
decl_stmt|;
name|ExistCallback
parameter_list|(
specifier|final
name|ServerName
name|destination
parameter_list|,
specifier|final
name|AtomicInteger
name|counter
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|offlineNodesVersions
parameter_list|)
block|{
name|this
operator|.
name|offlineNodesVersions
operator|=
name|offlineNodesVersions
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|Stat
name|stat
parameter_list|)
block|{
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
comment|// This is result code.  If non-zero, need to resubmit.
name|LOG
operator|.
name|warn
argument_list|(
literal|"rc != 0 for "
operator|+
name|path
operator|+
literal|" -- retryable connectionloss -- "
operator|+
literal|"FIX see http://wiki.apache.org/hadoop/ZooKeeper/FAQ#A2"
argument_list|)
expr_stmt|;
name|this
operator|.
name|counter
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rs="
operator|+
name|ctx
operator|+
literal|", server="
operator|+
name|destination
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|region
init|=
operator|(
operator|(
name|RegionState
operator|)
name|ctx
operator|)
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|offlineNodesVersions
operator|.
name|put
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|counter
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

