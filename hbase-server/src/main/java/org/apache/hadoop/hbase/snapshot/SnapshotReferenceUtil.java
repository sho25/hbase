begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSVisitor
import|;
end_import

begin_comment
comment|/**  * Utility methods for interacting with the snapshot referenced files.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|SnapshotReferenceUtil
block|{
specifier|public
interface|interface
name|FileVisitor
extends|extends
name|FSVisitor
operator|.
name|StoreFileVisitor
extends|,
name|FSVisitor
operator|.
name|RecoveredEditsVisitor
extends|,
name|FSVisitor
operator|.
name|LogFileVisitor
block|{   }
specifier|private
name|SnapshotReferenceUtil
parameter_list|()
block|{
comment|// private constructor for utility class
block|}
comment|/**    * Get log directory for a server in a snapshot.    *    * @param snapshotDir directory where the specific snapshot is stored    * @param serverName name of the parent regionserver for the log files    * @return path to the log home directory for the archive files.    */
specifier|public
specifier|static
name|Path
name|getLogsDir
parameter_list|(
name|Path
name|snapshotDir
parameter_list|,
name|String
name|serverName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|HLogUtil
operator|.
name|getHLogDirectoryName
argument_list|(
name|serverName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get the snapshotted recovered.edits dir for the specified region.    *    * @param snapshotDir directory where the specific snapshot is stored    * @param regionName name of the region    * @return path to the recovered.edits directory for the specified region files.    */
specifier|public
specifier|static
name|Path
name|getRecoveredEditsDir
parameter_list|(
name|Path
name|snapshotDir
parameter_list|,
name|String
name|regionName
parameter_list|)
block|{
return|return
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|regionName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get the snapshot recovered.edits file    *    * @param snapshotDir directory where the specific snapshot is stored    * @param regionName name of the region    * @param logfile name of the edit file    * @return full path of the log file for the specified region files.    */
specifier|public
specifier|static
name|Path
name|getRecoveredEdits
parameter_list|(
name|Path
name|snapshotDir
parameter_list|,
name|String
name|regionName
parameter_list|,
name|String
name|logfile
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getRecoveredEditsDir
argument_list|(
name|snapshotDir
argument_list|,
name|regionName
argument_list|)
argument_list|,
name|logfile
argument_list|)
return|;
block|}
comment|/**    * Iterate over the snapshot store files, restored.edits and logs    *    * @param fs {@link FileSystem}    * @param snapshotDir {@link Path} to the Snapshot directory    * @param visitor callback object to get the referenced files    * @throws IOException if an error occurred while scanning the directory    */
specifier|public
specifier|static
name|void
name|visitReferencedFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|,
specifier|final
name|FileVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|visitTableStoreFiles
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|visitRecoveredEdits
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|visitLogFiles
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Iterate over the snapshot store files    *    * @param fs {@link FileSystem}    * @param snapshotDir {@link Path} to the Snapshot directory    * @param visitor callback object to get the store files    * @throws IOException if an error occurred while scanning the directory    */
specifier|public
specifier|static
name|void
name|visitTableStoreFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|,
specifier|final
name|FSVisitor
operator|.
name|StoreFileVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|FSVisitor
operator|.
name|visitTableStoreFiles
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Iterate over the snapshot store files in the specified region    *    * @param fs {@link FileSystem}    * @param regionDir {@link Path} to the Snapshot region directory    * @param visitor callback object to get the store files    * @throws IOException if an error occurred while scanning the directory    */
specifier|public
specifier|static
name|void
name|visitRegionStoreFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|regionDir
parameter_list|,
specifier|final
name|FSVisitor
operator|.
name|StoreFileVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|FSVisitor
operator|.
name|visitRegionStoreFiles
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Iterate over the snapshot recovered.edits    *    * @param fs {@link FileSystem}    * @param snapshotDir {@link Path} to the Snapshot directory    * @param visitor callback object to get the recovered.edits files    * @throws IOException if an error occurred while scanning the directory    */
specifier|public
specifier|static
name|void
name|visitRecoveredEdits
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|,
specifier|final
name|FSVisitor
operator|.
name|RecoveredEditsVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|FSVisitor
operator|.
name|visitTableRecoveredEdits
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Iterate over the snapshot log files    *    * @param fs {@link FileSystem}    * @param snapshotDir {@link Path} to the Snapshot directory    * @param visitor callback object to get the log files    * @throws IOException if an error occurred while scanning the directory    */
specifier|public
specifier|static
name|void
name|visitLogFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|,
specifier|final
name|FSVisitor
operator|.
name|LogFileVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|FSVisitor
operator|.
name|visitLogFiles
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the set of region names available in the snapshot.    *    * @param fs {@link FileSystem}    * @param snapshotDir {@link Path} to the Snapshot directory    * @throws IOException if an error occurred while scanning the directory    * @return the set of the regions contained in the snapshot    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getSnapshotRegionNames
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|regionDirs
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
operator|new
name|FSUtils
operator|.
name|RegionDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionDirs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|String
argument_list|>
name|regions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|regionDir
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|/**    * Get the list of hfiles for the specified snapshot region.    * NOTE: The current implementation keeps one empty file per HFile in the region.    * The file name matches the one in the original table, and by reconstructing    * the path you can quickly jump to the referenced file.    *    * @param fs {@link FileSystem}    * @param snapshotRegionDir {@link Path} to the Snapshot region directory    * @return Map of hfiles per family, the key is the family name and values are hfile names    * @throws IOException if an error occurred while scanning the directory    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getRegionHFileReferences
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|snapshotRegionDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|familyFiles
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|visitRegionStoreFiles
argument_list|(
name|fs
argument_list|,
name|snapshotRegionDir
argument_list|,
operator|new
name|FSVisitor
operator|.
name|StoreFileVisitor
argument_list|()
block|{
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|String
name|region
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|String
name|hfile
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hfiles
init|=
name|familyFiles
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|hfiles
operator|==
literal|null
condition|)
block|{
name|hfiles
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|familyFiles
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|hfiles
argument_list|)
expr_stmt|;
block|}
name|hfiles
operator|.
name|add
argument_list|(
name|hfile
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|familyFiles
return|;
block|}
comment|/**    * Returns the store file names in the snapshot.    *    * @param fs {@link FileSystem}    * @param snapshotDir {@link Path} to the Snapshot directory    * @param visitor callback object to get the log files    * @throws IOException if an error occurred while scanning the directory    * @return the names of hfiles in the specified snaphot    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getHFileNames
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|visitTableStoreFiles
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
operator|new
name|FSVisitor
operator|.
name|StoreFileVisitor
argument_list|()
block|{
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|String
name|region
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|String
name|hfile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|hfile
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|HFileLink
operator|.
name|getReferencedHFileName
argument_list|(
name|hfile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|hfile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
comment|/**    * Returns the log file names available in the snapshot.    *    * @param fs {@link FileSystem}    * @param snapshotDir {@link Path} to the Snapshot directory    * @throws IOException if an error occurred while scanning the directory    * @return the names of hlogs in the specified snaphot    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getHLogNames
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|visitLogFiles
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
operator|new
name|FSVisitor
operator|.
name|LogFileVisitor
argument_list|()
block|{
specifier|public
name|void
name|logFile
parameter_list|(
specifier|final
name|String
name|server
parameter_list|,
specifier|final
name|String
name|logfile
parameter_list|)
throws|throws
name|IOException
block|{
name|names
operator|.
name|add
argument_list|(
name|logfile
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
block|}
end_class

end_unit

