begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * A {@link ScheduledChore} which periodically updates the {@link RegionServerSpaceQuotaManager}  * with information from the hbase:quota.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SpaceQuotaRefresherChore
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SpaceQuotaRefresherChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_PERIOD_KEY
init|=
literal|"hbase.regionserver.quotas.policy.refresher.chore.period"
decl_stmt|;
specifier|static
specifier|final
name|int
name|POLICY_REFRESHER_CHORE_PERIOD_DEFAULT
init|=
literal|1000
operator|*
literal|60
operator|*
literal|1
decl_stmt|;
comment|// 1 minute in millis
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_DELAY_KEY
init|=
literal|"hbase.regionserver.quotas.policy.refresher.chore.delay"
decl_stmt|;
specifier|static
specifier|final
name|long
name|POLICY_REFRESHER_CHORE_DELAY_DEFAULT
init|=
literal|1000L
operator|*
literal|15L
decl_stmt|;
comment|// 15 seconds in millis
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_TIMEUNIT_KEY
init|=
literal|"hbase.regionserver.quotas.policy.refresher.chore.timeunit"
decl_stmt|;
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_TIMEUNIT_DEFAULT
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|String
name|POLICY_REFRESHER_CHORE_REPORT_PERCENT_KEY
init|=
literal|"hbase.regionserver.quotas.policy.refresher.report.percent"
decl_stmt|;
specifier|static
specifier|final
name|double
name|POLICY_REFRESHER_CHORE_REPORT_PERCENT_DEFAULT
init|=
literal|0.95
decl_stmt|;
specifier|private
specifier|final
name|RegionServerSpaceQuotaManager
name|manager
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|conn
decl_stmt|;
specifier|public
name|SpaceQuotaRefresherChore
parameter_list|(
name|RegionServerSpaceQuotaManager
name|manager
parameter_list|,
name|Connection
name|conn
parameter_list|)
block|{
name|super
argument_list|(
name|SpaceQuotaRefresherChore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|manager
operator|.
name|getRegionServerServices
argument_list|()
argument_list|,
name|getPeriod
argument_list|(
name|manager
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|getInitialDelay
argument_list|(
name|manager
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|getTimeUnit
argument_list|(
name|manager
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Reading current quota snapshots from hbase:quota."
argument_list|)
expr_stmt|;
block|}
comment|// Get the snapshots that the quota manager is currently aware of
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|currentSnapshots
init|=
name|getManager
argument_list|()
operator|.
name|copyQuotaSnapshots
argument_list|()
decl_stmt|;
comment|// Read the new snapshots from the quota table
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|newSnapshots
init|=
name|fetchSnapshotsFromQuotaTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|currentSnapshots
operator|.
name|size
argument_list|()
operator|+
literal|" table quota snapshots are collected, "
operator|+
literal|"read "
operator|+
name|newSnapshots
operator|.
name|size
argument_list|()
operator|+
literal|" from the quota table."
argument_list|)
expr_stmt|;
block|}
comment|// Iterate over each new quota snapshot
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|entry
range|:
name|newSnapshots
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|TableName
name|tableName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|SpaceQuotaSnapshot
name|newSnapshot
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// May be null!
specifier|final
name|SpaceQuotaSnapshot
name|currentSnapshot
init|=
name|currentSnapshots
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|tableName
operator|+
literal|": current="
operator|+
name|currentSnapshot
operator|+
literal|", new="
operator|+
name|newSnapshot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newSnapshot
operator|.
name|equals
argument_list|(
name|currentSnapshot
argument_list|)
condition|)
block|{
comment|// We have a new snapshot. We might need to enforce it or disable the enforcement
if|if
condition|(
operator|!
name|isInViolation
argument_list|(
name|currentSnapshot
argument_list|)
operator|&&
name|newSnapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Enabling "
operator|+
name|newSnapshot
operator|+
literal|" on "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
name|getManager
argument_list|()
operator|.
name|enforceViolationPolicy
argument_list|(
name|tableName
argument_list|,
name|newSnapshot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isInViolation
argument_list|(
name|currentSnapshot
argument_list|)
operator|&&
operator|!
name|newSnapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing quota violation policy on "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
name|getManager
argument_list|()
operator|.
name|disableViolationPolicyEnforcement
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// We're intentionally ignoring anything extra with the currentSnapshots. If we were missing
comment|// information from the RegionServers to create an accurate SpaceQuotaSnapshot in the Master,
comment|// the Master will generate a new SpaceQuotaSnapshot which represents this state. This lets
comment|// us avoid having to do anything special with currentSnapshots here.
comment|// Update the snapshots in the manager
name|getManager
argument_list|()
operator|.
name|updateQuotaSnapshot
argument_list|(
name|newSnapshots
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception while refreshing enforced quota violation policies, will retry."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks if the given<code>snapshot</code> is in violation, allowing the snapshot to be null.    * If the snapshot is null, this is interpreted as no snapshot which implies not in violation.    *    * @param snapshot The snapshot to operate on.    * @return true if the snapshot is in violation, false otherwise.    */
name|boolean
name|isInViolation
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
return|;
block|}
comment|/**    * Reads all quota snapshots from the quota table.    *    * @return The current "view" of space use by each table.    */
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|fetchSnapshotsFromQuotaTable
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|quotaTable
init|=
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
name|QuotaTableUtil
operator|.
name|makeQuotaSnapshotScan
argument_list|()
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|snapshots
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
try|try
block|{
name|extractQuotaSnapshot
argument_list|(
name|result
argument_list|,
name|snapshots
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Failed to parse result for row "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|snapshots
return|;
block|}
block|}
comment|/**    * Wrapper around {@link QuotaTableUtil#extractQuotaSnapshot(Result, Map)} for testing.    */
name|void
name|extractQuotaSnapshot
parameter_list|(
name|Result
name|result
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|snapshots
parameter_list|)
block|{
name|QuotaTableUtil
operator|.
name|extractQuotaSnapshot
argument_list|(
name|result
argument_list|,
name|snapshots
argument_list|)
expr_stmt|;
block|}
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|conn
return|;
block|}
name|RegionServerSpaceQuotaManager
name|getManager
parameter_list|()
block|{
return|return
name|manager
return|;
block|}
comment|/**    * Extracts the period for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore period or the default value.    */
specifier|static
name|int
name|getPeriod
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|POLICY_REFRESHER_CHORE_PERIOD_KEY
argument_list|,
name|POLICY_REFRESHER_CHORE_PERIOD_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the initial delay for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore initial delay or the default value.    */
specifier|static
name|long
name|getInitialDelay
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|POLICY_REFRESHER_CHORE_DELAY_KEY
argument_list|,
name|POLICY_REFRESHER_CHORE_DELAY_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the time unit for the chore period and initial delay from the configuration. The    * configuration value for {@link #POLICY_REFRESHER_CHORE_TIMEUNIT_KEY} must correspond to    * a {@link TimeUnit} value.    *    * @param conf The configuration object.    * @return The configured time unit for the chore period and initial delay or the default value.    */
specifier|static
name|TimeUnit
name|getTimeUnit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|POLICY_REFRESHER_CHORE_TIMEUNIT_KEY
argument_list|,
name|POLICY_REFRESHER_CHORE_TIMEUNIT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Extracts the percent of Regions for a table to have been reported to enable quota violation    * state change.    *    * @param conf The configuration object.    * @return The percent of regions reported to use.    */
specifier|static
name|Double
name|getRegionReportPercent
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getDouble
argument_list|(
name|POLICY_REFRESHER_CHORE_REPORT_PERCENT_KEY
argument_list|,
name|POLICY_REFRESHER_CHORE_REPORT_PERCENT_DEFAULT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

