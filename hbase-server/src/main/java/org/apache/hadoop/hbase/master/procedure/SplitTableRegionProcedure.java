begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|SplitTableRegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
operator|.
name|TransitionCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The procedure to split a region in a table.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitTableRegionProcedure
extends|extends
name|AbstractStateMachineTableProcedure
argument_list|<
name|SplitTableRegionState
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SplitTableRegionProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Boolean
name|traceEnabled
decl_stmt|;
comment|/*    * Region to split    */
specifier|private
name|HRegionInfo
name|parentHRI
decl_stmt|;
specifier|private
name|HRegionInfo
name|daughter_1_HRI
decl_stmt|;
specifier|private
name|HRegionInfo
name|daughter_2_HRI
decl_stmt|;
specifier|public
name|SplitTableRegionProcedure
parameter_list|()
block|{
name|this
operator|.
name|traceEnabled
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|SplitTableRegionProcedure
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|HRegionInfo
name|regionToSplit
parameter_list|,
specifier|final
name|byte
index|[]
name|splitRow
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|checkSplitRow
argument_list|(
name|regionToSplit
argument_list|,
name|splitRow
argument_list|)
expr_stmt|;
name|this
operator|.
name|traceEnabled
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|parentHRI
operator|=
name|regionToSplit
expr_stmt|;
specifier|final
name|TableName
name|table
init|=
name|regionToSplit
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|long
name|rid
init|=
name|getDaughterRegionIdTimestamp
argument_list|(
name|regionToSplit
argument_list|)
decl_stmt|;
name|this
operator|.
name|daughter_1_HRI
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|table
argument_list|,
name|regionToSplit
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitRow
argument_list|,
literal|false
argument_list|,
name|rid
argument_list|)
expr_stmt|;
name|this
operator|.
name|daughter_2_HRI
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|table
argument_list|,
name|splitRow
argument_list|,
name|regionToSplit
operator|.
name|getEndKey
argument_list|()
argument_list|,
literal|false
argument_list|,
name|rid
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkSplitRow
parameter_list|(
specifier|final
name|HRegionInfo
name|regionToSplit
parameter_list|,
specifier|final
name|byte
index|[]
name|splitRow
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|splitRow
operator|==
literal|null
operator|||
name|splitRow
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Split row cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionToSplit
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitRow
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Split row is equal to startkey: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|splitRow
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|regionToSplit
operator|.
name|containsRow
argument_list|(
name|splitRow
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Split row is not inside region key range splitKey:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|splitRow
argument_list|)
operator|+
literal|" region: "
operator|+
name|regionToSplit
argument_list|)
throw|;
block|}
block|}
comment|/**    * Calculate daughter regionid to use.    * @param hri Parent {@link HRegionInfo}    * @return Daughter region id (timestamp) to use.    */
specifier|private
specifier|static
name|long
name|getDaughterRegionIdTimestamp
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|long
name|rid
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// Regionid is timestamp.  Can't be less than that of parent else will insert
comment|// at wrong location in hbase:meta (See HBASE-710).
if|if
condition|(
name|rid
operator|<
name|hri
operator|.
name|getRegionId
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Clock skew; parent regions id is "
operator|+
name|hri
operator|.
name|getRegionId
argument_list|()
operator|+
literal|" but current time here is "
operator|+
name|rid
argument_list|)
expr_stmt|;
name|rid
operator|=
name|hri
operator|.
name|getRegionId
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|rid
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Flow
name|executeFromState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|SplitTableRegionState
name|state
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|" execute state="
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
try|try
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SPLIT_TABLE_REGION_PREPARE
case|:
if|if
condition|(
name|prepareSplitRegion
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_PRE_OPERATION
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
assert|assert
name|isFailed
argument_list|()
operator|:
literal|"split region should have an exception here"
assert|;
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
block|}
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION
case|:
name|preSplitRegion
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_SET_SPLITTING_TABLE_STATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_SET_SPLITTING_TABLE_STATE
case|:
name|setRegionStateToSplitting
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_CLOSE_PARENT_REGION
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_CLOSE_PARENT_REGION
case|:
name|closeParentRegionForSplit
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_CREATE_DAUGHTER_REGIONS
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_CREATE_DAUGHTER_REGIONS
case|:
name|createDaughterRegions
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_PRE_OPERATION_BEFORE_PONR
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_BEFORE_PONR
case|:
name|preSplitRegionBeforePONR
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_UPDATE_META
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_UPDATE_META
case|:
comment|// This is the point of no return.  Adding subsequent edits to .META. as we
comment|// do below when we do the daughter opens adding each to .META. can fail in
comment|// various interesting ways the most interesting of which is a timeout
comment|// BUT the edits all go through (See HBASE-3872).  IF we reach the PONR
comment|// then subsequent failures need to crash out this region server; the
comment|// server shutdown processing should be able to fix-up the incomplete split.
comment|// The offlined parent will have the daughters as extra columns.  If
comment|// we leave the daughter regions in place and do not remove them when we
comment|// crash out, then they will have their references to the parent in place
comment|// still and the server shutdown fixup of .META. will point to these
comment|// regions.
comment|// We should add PONR JournalEntry before offlineParentInMeta,so even if
comment|// OfflineParentInMeta timeout,this will cause regionserver exit,and then
comment|// master ServerShutdownHandler will fix daughter& avoid data loss. (See
comment|// HBase-4562).
name|updateMetaForDaughterRegions
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_PONR
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_PONR
case|:
name|preSplitRegionAfterPONR
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS
case|:
name|openDaughterRegions
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_POST_OPERATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_POST_OPERATION
case|:
name|postSplitRegion
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error trying to split region "
operator|+
name|parentHRI
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" in the table "
operator|+
name|getTableName
argument_list|()
operator|+
literal|" (in state="
operator|+
name|state
operator|+
literal|")"
decl_stmt|;
if|if
condition|(
operator|!
name|isRollbackSupported
argument_list|(
name|state
argument_list|)
condition|)
block|{
comment|// We reach a state that cannot be rolled back. We just need to keep retry.
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setFailure
argument_list|(
literal|"master-split-region"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollbackState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|SplitTableRegionState
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|" rollback state="
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
try|try
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SPLIT_TABLE_REGION_POST_OPERATION
case|:
case|case
name|SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS
case|:
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_PONR
case|:
case|case
name|SPLIT_TABLE_REGION_UPDATE_META
case|:
comment|// PONR
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" unhandled state="
operator|+
name|state
argument_list|)
throw|;
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_BEFORE_PONR
case|:
break|break;
case|case
name|SPLIT_TABLE_REGION_CREATE_DAUGHTER_REGIONS
case|:
comment|// Doing nothing, as re-open parent region would clean up daughter region directories.
break|break;
case|case
name|SPLIT_TABLE_REGION_CLOSE_PARENT_REGION
case|:
name|openParentRegion
argument_list|(
name|env
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_SET_SPLITTING_TABLE_STATE
case|:
name|setRegionStateToRevertSplitting
argument_list|(
name|env
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION
case|:
name|postRollBackSplitRegion
argument_list|(
name|env
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_PREPARE
case|:
break|break;
comment|// nothing to do
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// This will be retried. Unless there is a bug in the code,
comment|// this should be just a "temporary error" (e.g. network down)
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed rollback attempt step "
operator|+
name|state
operator|+
literal|" for splitting the region "
operator|+
name|parentHRI
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" in table "
operator|+
name|getTableName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/*    * Check whether we are in the state that can be rollback    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isRollbackSupported
parameter_list|(
specifier|final
name|SplitTableRegionState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SPLIT_TABLE_REGION_POST_OPERATION
case|:
case|case
name|SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS
case|:
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_PONR
case|:
case|case
name|SPLIT_TABLE_REGION_UPDATE_META
case|:
comment|// It is not safe to rollback if we reach to these states.
return|return
literal|false
return|;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SplitTableRegionState
name|getState
parameter_list|(
specifier|final
name|int
name|stateId
parameter_list|)
block|{
return|return
name|SplitTableRegionState
operator|.
name|forNumber
argument_list|(
name|stateId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getStateId
parameter_list|(
specifier|final
name|SplitTableRegionState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|getNumber
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SplitTableRegionState
name|getInitialState
parameter_list|()
block|{
return|return
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_PREPARE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serializeStateData
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|stream
argument_list|)
expr_stmt|;
specifier|final
name|MasterProcedureProtos
operator|.
name|SplitTableRegionStateData
operator|.
name|Builder
name|splitTableRegionMsg
init|=
name|MasterProcedureProtos
operator|.
name|SplitTableRegionStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserInfo
argument_list|(
name|MasterProcedureUtil
operator|.
name|toProtoUserInfo
argument_list|(
name|getUser
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setParentRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|parentHRI
argument_list|)
argument_list|)
operator|.
name|addChildRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|daughter_1_HRI
argument_list|)
argument_list|)
operator|.
name|addChildRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|daughter_2_HRI
argument_list|)
argument_list|)
decl_stmt|;
name|splitTableRegionMsg
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deserializeStateData
parameter_list|(
specifier|final
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|stream
argument_list|)
expr_stmt|;
specifier|final
name|MasterProcedureProtos
operator|.
name|SplitTableRegionStateData
name|splitTableRegionsMsg
init|=
name|MasterProcedureProtos
operator|.
name|SplitTableRegionStateData
operator|.
name|parseDelimitedFrom
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|setUser
argument_list|(
name|MasterProcedureUtil
operator|.
name|toUserInfo
argument_list|(
name|splitTableRegionsMsg
operator|.
name|getUserInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parentHRI
operator|=
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|splitTableRegionsMsg
operator|.
name|getParentRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|splitTableRegionsMsg
operator|.
name|getChildRegionInfoCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|daughter_1_HRI
operator|=
name|daughter_2_HRI
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
assert|assert
operator|(
name|splitTableRegionsMsg
operator|.
name|getChildRegionInfoCount
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|daughter_1_HRI
operator|=
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|splitTableRegionsMsg
operator|.
name|getChildRegionInfoList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|daughter_2_HRI
operator|=
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|splitTableRegionsMsg
operator|.
name|getChildRegionInfoList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|toStringClassDetails
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" (table="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" parent region="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|parentHRI
argument_list|)
expr_stmt|;
if|if
condition|(
name|daughter_1_HRI
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" first daughter region="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|daughter_1_HRI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|daughter_2_HRI
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and second daughter region="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|daughter_2_HRI
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|LockState
name|acquireLock
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|.
name|waitInitialized
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|LockState
operator|.
name|LOCK_EVENT_WAIT
return|;
block|}
return|return
name|env
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|waitRegions
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|parentHRI
argument_list|)
condition|?
name|LockState
operator|.
name|LOCK_EVENT_WAIT
else|:
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseLock
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|env
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|wakeRegions
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|parentHRI
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|parentHRI
operator|.
name|getTable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableOperationType
name|getTableOperationType
parameter_list|()
block|{
return|return
name|TableOperationType
operator|.
name|SPLIT
return|;
block|}
specifier|private
name|byte
index|[]
name|getSplitRow
parameter_list|()
block|{
return|return
name|daughter_2_HRI
operator|.
name|getStartKey
argument_list|()
return|;
block|}
comment|/**    * Prepare to Split region.    * @param env MasterProcedureEnv    * @throws IOException    */
annotation|@
name|VisibleForTesting
specifier|public
name|boolean
name|prepareSplitRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check whether the region is splittable
specifier|final
name|RegionState
name|state
init|=
name|getParentRegionState
argument_list|(
name|env
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|isClosing
argument_list|()
operator|||
name|state
operator|.
name|isClosed
argument_list|()
operator|||
name|state
operator|.
name|isSplittingOrSplitOnServer
argument_list|(
name|state
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
name|setFailure
argument_list|(
literal|"master-split-region"
argument_list|,
operator|new
name|IOException
argument_list|(
literal|"Split region "
operator|+
name|parentHRI
operator|+
literal|" failed due to region is not splittable"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Action before splitting region in a table.    * @param env MasterProcedureEnv    * @param state the procedure state    * @throws IOException    * @throws InterruptedException    */
specifier|private
name|void
name|preSplitRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preSplitRegionAction
argument_list|(
name|getTableName
argument_list|()
argument_list|,
name|getSplitRow
argument_list|()
argument_list|,
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Action after rollback a split table region action.    * @param env MasterProcedureEnv    * @throws IOException    */
specifier|private
name|void
name|postRollBackSplitRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postRollBackSplitRegionAction
argument_list|(
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the parent region state to SPLITTING state    * @param env MasterProcedureEnv    * @throws IOException    */
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|setRegionStateToSplitting
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionStateTransition
operator|.
name|Builder
name|transition
init|=
name|RegionStateTransition
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|transition
operator|.
name|setTransitionCode
argument_list|(
name|TransitionCode
operator|.
name|READY_TO_SPLIT
argument_list|)
expr_stmt|;
name|transition
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|parentHRI
argument_list|)
argument_list|)
expr_stmt|;
name|transition
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|daughter_1_HRI
argument_list|)
argument_list|)
expr_stmt|;
name|transition
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|daughter_2_HRI
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|onRegionTransition
argument_list|(
name|getParentRegionState
argument_list|(
name|env
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|transition
operator|.
name|build
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to update region state to SPLITTING for "
operator|+
name|parentHRI
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Rollback the region state change    * @param env MasterProcedureEnv    * @throws IOException    */
specifier|private
name|void
name|setRegionStateToRevertSplitting
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionStateTransition
operator|.
name|Builder
name|transition
init|=
name|RegionStateTransition
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|transition
operator|.
name|setTransitionCode
argument_list|(
name|TransitionCode
operator|.
name|SPLIT_REVERTED
argument_list|)
expr_stmt|;
name|transition
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|parentHRI
argument_list|)
argument_list|)
expr_stmt|;
name|transition
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|daughter_1_HRI
argument_list|)
argument_list|)
expr_stmt|;
name|transition
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|daughter_2_HRI
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|onRegionTransition
argument_list|(
name|getParentRegionState
argument_list|(
name|env
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|transition
operator|.
name|build
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to update region state for "
operator|+
name|parentHRI
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" as part of operation for reverting split"
argument_list|)
throw|;
block|}
block|}
comment|/**    * RPC to region server that host the parent region, ask for close the parent regions    * @param env MasterProcedureEnv    * @throws IOException    */
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|closeParentRegionForSplit
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|sendRegionCloseForSplitOrMerge
argument_list|(
name|getParentRegionState
argument_list|(
name|env
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|parentHRI
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Close parent region "
operator|+
name|parentHRI
operator|+
literal|" for splitting failed."
operator|+
literal|"  Check region server log for more details"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Rollback close parent region    * @param env MasterProcedureEnv    **/
specifier|private
name|void
name|openParentRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check whether the region is closed; if so, open it in the same server
name|RegionState
name|state
init|=
name|getParentRegionState
argument_list|(
name|env
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|isClosing
argument_list|()
operator|||
name|state
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|sendRegionOpen
argument_list|(
name|getParentRegionState
argument_list|(
name|env
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|parentHRI
argument_list|,
name|ServerName
operator|.
name|EMPTY_SERVER_LIST
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create daughter regions    * @param env MasterProcedureEnv    * @throws IOException    */
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|createDaughterRegions
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MasterFileSystem
name|mfs
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|parentHRI
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|mfs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
name|HRegionFileSystem
operator|.
name|openRegionFromFileSystem
argument_list|(
name|env
operator|.
name|getMasterConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|tabledir
argument_list|,
name|parentHRI
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|regionFs
operator|.
name|createSplitsDir
argument_list|()
expr_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|expectedReferences
init|=
name|splitStoreFiles
argument_list|(
name|env
argument_list|,
name|regionFs
argument_list|)
decl_stmt|;
name|assertReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|expectedReferences
operator|.
name|getFirst
argument_list|()
argument_list|,
name|regionFs
operator|.
name|getSplitsDir
argument_list|(
name|daughter_1_HRI
argument_list|)
argument_list|)
expr_stmt|;
comment|//Move the files from the temporary .splits to the final /table/region directory
name|regionFs
operator|.
name|commitDaughterRegion
argument_list|(
name|daughter_1_HRI
argument_list|)
expr_stmt|;
name|assertReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|expectedReferences
operator|.
name|getFirst
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|daughter_1_HRI
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|expectedReferences
operator|.
name|getSecond
argument_list|()
argument_list|,
name|regionFs
operator|.
name|getSplitsDir
argument_list|(
name|daughter_2_HRI
argument_list|)
argument_list|)
expr_stmt|;
name|regionFs
operator|.
name|commitDaughterRegion
argument_list|(
name|daughter_2_HRI
argument_list|)
expr_stmt|;
name|assertReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|expectedReferences
operator|.
name|getSecond
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|daughter_2_HRI
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create Split directory    * @param env MasterProcedureEnv    * @throws IOException    */
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|splitStoreFiles
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|HRegionFileSystem
name|regionFs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MasterFileSystem
name|mfs
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
decl_stmt|;
comment|// The following code sets up a thread pool executor with as many slots as
comment|// there's files to split. It then fires up everything, waits for
comment|// completion and finally checks for any exception
comment|//
comment|// Note: splitStoreFiles creates daughter region dirs under the parent splits dir
comment|// Nothing to unroll here if failure -- re-run createSplitsDir will
comment|// clean this up.
name|int
name|nbFiles
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|family
range|:
name|regionFs
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
name|storeFiles
init|=
name|regionFs
operator|.
name|getStoreFiles
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeFiles
operator|!=
literal|null
condition|)
block|{
name|nbFiles
operator|+=
name|storeFiles
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nbFiles
operator|==
literal|0
condition|)
block|{
comment|// no file needs to be splitted.
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|// Default max #threads to use is the smaller of table's configured number of blocking store
comment|// files or the available number of logical cores.
name|int
name|defMaxThreads
init|=
name|Math
operator|.
name|min
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|HStore
operator|.
name|BLOCKING_STOREFILES_KEY
argument_list|,
name|HStore
operator|.
name|DEFAULT_BLOCKING_STOREFILE_COUNT
argument_list|)
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|)
decl_stmt|;
comment|// Max #threads is the smaller of the number of storefiles or the default max determined above.
name|int
name|maxThreads
init|=
name|Math
operator|.
name|min
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGION_SPLIT_THREADS_MAX
argument_list|,
name|defMaxThreads
argument_list|)
argument_list|,
name|nbFiles
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Preparing to split "
operator|+
name|nbFiles
operator|+
literal|" storefiles for region "
operator|+
name|parentHRI
operator|+
literal|" using "
operator|+
name|maxThreads
operator|+
literal|" threads"
argument_list|)
expr_stmt|;
name|ThreadPoolExecutor
name|threadPool
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|maxThreads
argument_list|,
name|Threads
operator|.
name|getNamedThreadFactory
argument_list|(
literal|"StoreFileSplitter-%1$d"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nbFiles
argument_list|)
decl_stmt|;
comment|// Split each store file.
specifier|final
name|HTableDescriptor
name|htd
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|family
range|:
name|regionFs
operator|.
name|getFamilies
argument_list|()
control|)
block|{
specifier|final
name|HColumnDescriptor
name|hcd
init|=
name|htd
operator|.
name|getFamily
argument_list|(
name|family
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
name|storeFiles
init|=
name|regionFs
operator|.
name|getStoreFiles
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeFiles
operator|!=
literal|null
operator|&&
name|storeFiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|,
name|hcd
argument_list|)
decl_stmt|;
for|for
control|(
name|StoreFileInfo
name|storeFileInfo
range|:
name|storeFiles
control|)
block|{
name|StoreFileSplitter
name|sfs
init|=
operator|new
name|StoreFileSplitter
argument_list|(
name|regionFs
argument_list|,
name|family
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|StoreFile
argument_list|(
name|mfs
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|storeFileInfo
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|hcd
operator|.
name|getBloomFilterType
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|threadPool
operator|.
name|submit
argument_list|(
name|sfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Shutdown the pool
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Wait for all the tasks to finish
name|long
name|fileSplitTimeout
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.master.fileSplitTimeout"
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|stillRunning
init|=
operator|!
name|threadPool
operator|.
name|awaitTermination
argument_list|(
name|fileSplitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|stillRunning
condition|)
block|{
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
comment|// wait for the thread to shutdown completely.
while|while
condition|(
operator|!
name|threadPool
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Took too long to split the"
operator|+
literal|" files and create the references, aborting split"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|daughterA
init|=
literal|0
decl_stmt|;
name|int
name|daughterB
init|=
literal|0
decl_stmt|;
comment|// Look for any exception
for|for
control|(
name|Future
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
block|{
try|try
block|{
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|p
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|daughterA
operator|+=
name|p
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|daughterB
operator|+=
name|p
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Split storefiles for region "
operator|+
name|parentHRI
operator|+
literal|" Daughter A: "
operator|+
name|daughterA
operator|+
literal|" storefiles, Daughter B: "
operator|+
name|daughterB
operator|+
literal|" storefiles."
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|daughterA
argument_list|,
name|daughterB
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertReferenceFileCount
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|int
name|expectedReferenceFileCount
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|expectedReferenceFileCount
operator|!=
literal|0
operator|&&
name|expectedReferenceFileCount
operator|!=
name|FSUtils
operator|.
name|getRegionReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failing split. Expected reference file count isn't equal."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|splitStoreFile
parameter_list|(
specifier|final
name|HRegionFileSystem
name|regionFs
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|StoreFile
name|sf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Splitting started for store file: "
operator|+
name|sf
operator|.
name|getPath
argument_list|()
operator|+
literal|" for region: "
operator|+
name|parentHRI
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|splitRow
init|=
name|getSplitRow
argument_list|()
decl_stmt|;
specifier|final
name|String
name|familyName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path_first
init|=
name|regionFs
operator|.
name|splitStoreFile
argument_list|(
name|this
operator|.
name|daughter_1_HRI
argument_list|,
name|familyName
argument_list|,
name|sf
argument_list|,
name|splitRow
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path_second
init|=
name|regionFs
operator|.
name|splitStoreFile
argument_list|(
name|this
operator|.
name|daughter_2_HRI
argument_list|,
name|familyName
argument_list|,
name|sf
argument_list|,
name|splitRow
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Splitting complete for store file: "
operator|+
name|sf
operator|.
name|getPath
argument_list|()
operator|+
literal|" for region: "
operator|+
name|parentHRI
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|path_first
argument_list|,
name|path_second
argument_list|)
return|;
block|}
comment|/**    * Utility class used to do the file splitting / reference writing    * in parallel instead of sequentially.    */
specifier|private
class|class
name|StoreFileSplitter
implements|implements
name|Callable
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|HRegionFileSystem
name|regionFs
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|family
decl_stmt|;
specifier|private
specifier|final
name|StoreFile
name|sf
decl_stmt|;
comment|/**      * Constructor that takes what it needs to split      * @param regionFs the file system      * @param family Family that contains the store file      * @param sf which file      */
specifier|public
name|StoreFileSplitter
parameter_list|(
specifier|final
name|HRegionFileSystem
name|regionFs
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|StoreFile
name|sf
parameter_list|)
block|{
name|this
operator|.
name|regionFs
operator|=
name|regionFs
expr_stmt|;
name|this
operator|.
name|sf
operator|=
name|sf
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
block|}
specifier|public
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|splitStoreFile
argument_list|(
name|regionFs
argument_list|,
name|family
argument_list|,
name|sf
argument_list|)
return|;
block|}
block|}
comment|/**    * Post split region actions before the Point-of-No-Return step    * @param env MasterProcedureEnv    **/
specifier|private
name|void
name|preSplitRegionBeforePONR
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|List
argument_list|<
name|Mutation
argument_list|>
name|metaEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cpHost
operator|.
name|preSplitBeforePONRAction
argument_list|(
name|getSplitRow
argument_list|()
argument_list|,
name|metaEntries
argument_list|,
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Coprocessor bypassing region "
operator|+
name|parentHRI
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" split."
argument_list|)
throw|;
block|}
try|try
block|{
for|for
control|(
name|Mutation
name|p
range|:
name|metaEntries
control|)
block|{
name|HRegionInfo
operator|.
name|parseRegionName
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Row key of mutation from coprocessor is not parsable as region name."
operator|+
literal|"Mutations from coprocessor should only for hbase:meta table."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Add daughter regions to META    * @param env MasterProcedureEnv    * @throws IOException    */
specifier|private
name|void
name|updateMetaForDaughterRegions
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionStateTransition
operator|.
name|Builder
name|transition
init|=
name|RegionStateTransition
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|transition
operator|.
name|setTransitionCode
argument_list|(
name|TransitionCode
operator|.
name|SPLIT_PONR
argument_list|)
expr_stmt|;
name|transition
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|parentHRI
argument_list|)
argument_list|)
expr_stmt|;
name|transition
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|daughter_1_HRI
argument_list|)
argument_list|)
expr_stmt|;
name|transition
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|daughter_2_HRI
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|onRegionTransition
argument_list|(
name|getParentRegionState
argument_list|(
name|env
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|transition
operator|.
name|build
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to update meta to add daughter regions in split region "
operator|+
name|parentHRI
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Pre split region actions after the Point-of-No-Return step    * @param env MasterProcedureEnv    **/
specifier|private
name|void
name|preSplitRegionAfterPONR
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preSplitAfterPONRAction
argument_list|(
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assign daughter regions    * @param env MasterProcedureEnv    * @throws IOException    * @throws InterruptedException    **/
specifier|private
name|void
name|openDaughterRegions
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|assignDaughterRegions
argument_list|(
name|parentHRI
argument_list|,
name|daughter_1_HRI
argument_list|,
name|daughter_2_HRI
argument_list|)
expr_stmt|;
block|}
comment|/**    * Post split region actions    * @param env MasterProcedureEnv    **/
specifier|private
name|void
name|postSplitRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postCompletedSplitRegionAction
argument_list|(
name|daughter_1_HRI
argument_list|,
name|daughter_2_HRI
argument_list|,
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get parent region state    * @param env MasterProcedureEnv    * @return parent region state    */
specifier|private
name|RegionState
name|getParentRegionState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|RegionStates
name|regionStates
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|RegionState
name|state
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|parentHRI
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Split but not in region states: "
operator|+
name|parentHRI
argument_list|)
expr_stmt|;
name|state
operator|=
name|regionStates
operator|.
name|createRegionState
argument_list|(
name|parentHRI
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
comment|/**    * The procedure could be restarted from a different machine. If the variable is null, we need to    * retrieve it.    * @return traceEnabled    */
specifier|private
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
if|if
condition|(
name|traceEnabled
operator|==
literal|null
condition|)
block|{
name|traceEnabled
operator|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
expr_stmt|;
block|}
return|return
name|traceEnabled
return|;
block|}
block|}
end_class

end_unit

