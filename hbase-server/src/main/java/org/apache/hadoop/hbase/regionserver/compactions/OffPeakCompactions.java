begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * The class used to track off-peak hours and compactions. Off-peak compaction counter  * is global for the entire server, hours can be different per instance of this class,  * based on the configuration of the corresponding store.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|OffPeakCompactions
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OffPeakCompactions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Calendar
name|calendar
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
specifier|private
name|int
name|offPeakStartHour
decl_stmt|;
specifier|private
name|int
name|offPeakEndHour
decl_stmt|;
comment|// TODO: replace with AtomicLong, see HBASE-7437.
comment|/**    * Number of off peak compactions either in the compaction queue or    * happening now. Please lock compactionCountLock before modifying.    */
specifier|private
specifier|static
name|long
name|numOutstanding
init|=
literal|0
decl_stmt|;
comment|/**    * Lock object for numOutstandingOffPeakCompactions    */
specifier|private
specifier|static
specifier|final
name|Object
name|compactionCountLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|public
name|OffPeakCompactions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|offPeakStartHour
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.offpeak.start.hour"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|offPeakEndHour
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.offpeak.end.hour"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidHour
argument_list|(
name|offPeakStartHour
argument_list|)
operator|||
operator|!
name|isValidHour
argument_list|(
name|offPeakEndHour
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|offPeakStartHour
operator|==
operator|-
literal|1
operator|&&
name|offPeakEndHour
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring invalid start/end hour for peak hour : start = "
operator|+
name|this
operator|.
name|offPeakStartHour
operator|+
literal|" end = "
operator|+
name|this
operator|.
name|offPeakEndHour
operator|+
literal|". Valid numbers are [0-23]"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|offPeakStartHour
operator|=
name|this
operator|.
name|offPeakEndHour
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|/**    * Tries making the compaction off-peak.    * @return Whether the compaction can be made off-peak.    */
specifier|public
name|boolean
name|tryStartOffPeakRequest
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOffPeakHour
argument_list|()
condition|)
return|return
literal|false
return|;
synchronized|synchronized
init|(
name|compactionCountLock
init|)
block|{
if|if
condition|(
name|numOutstanding
operator|==
literal|0
condition|)
block|{
name|numOutstanding
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * The current compaction finished, so reset the off peak compactions count    * if this was an off peak compaction.    */
specifier|public
name|void
name|endOffPeakRequest
parameter_list|()
block|{
name|long
name|newValueToLog
init|=
operator|-
literal|1
decl_stmt|;
synchronized|synchronized
init|(
name|compactionCountLock
init|)
block|{
name|newValueToLog
operator|=
operator|--
name|numOutstanding
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Compaction done, numOutstandingOffPeakCompactions is now "
operator|+
name|newValueToLog
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return whether this is off-peak hour    */
specifier|private
name|boolean
name|isOffPeakHour
parameter_list|()
block|{
name|int
name|currentHour
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
decl_stmt|;
comment|// If offpeak time checking is disabled just return false.
if|if
condition|(
name|this
operator|.
name|offPeakStartHour
operator|==
name|this
operator|.
name|offPeakEndHour
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|offPeakStartHour
operator|<
name|this
operator|.
name|offPeakEndHour
condition|)
block|{
return|return
operator|(
name|currentHour
operator|>=
name|this
operator|.
name|offPeakStartHour
operator|&&
name|currentHour
operator|<
name|this
operator|.
name|offPeakEndHour
operator|)
return|;
block|}
return|return
operator|(
name|currentHour
operator|>=
name|this
operator|.
name|offPeakStartHour
operator|||
name|currentHour
operator|<
name|this
operator|.
name|offPeakEndHour
operator|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isValidHour
parameter_list|(
name|int
name|hour
parameter_list|)
block|{
return|return
operator|(
name|hour
operator|>=
literal|0
operator|&&
name|hour
operator|<=
literal|23
operator|)
return|;
block|}
block|}
end_class

end_unit

