begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|AbstractFSWAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ConcurrentMapUtils
operator|.
name|IOExceptionSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_comment
comment|/**  * This class provides static methods to support WAL splitting related works  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|WALSplitUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WALSplitUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|EDITFILES_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-?[0-9]+"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RECOVERED_LOG_TMPFILE_SUFFIX
init|=
literal|".temp"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SEQUENCE_ID_FILE_SUFFIX
init|=
literal|".seqid"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OLD_SEQUENCE_ID_FILE_SUFFIX
init|=
literal|"_seqid"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SEQUENCE_ID_FILE_SUFFIX_LENGTH
init|=
name|SEQUENCE_ID_FILE_SUFFIX
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|private
name|WALSplitUtil
parameter_list|()
block|{   }
comment|/**    * Completes the work done by splitLogFile by archiving logs    *<p>    * It is invoked by SplitLogManager once it knows that one of the SplitLogWorkers have completed    * the splitLogFile() part. If the master crashes then this function might get called multiple    * times.    *<p>    * @param logfile    * @param conf    * @throws IOException    */
specifier|public
specifier|static
name|void
name|finishSplitLogFile
parameter_list|(
name|String
name|logfile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|walDir
init|=
name|FSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|walPath
decl_stmt|;
if|if
condition|(
name|FSUtils
operator|.
name|isStartingWithPath
argument_list|(
name|walDir
argument_list|,
name|logfile
argument_list|)
condition|)
block|{
name|walPath
operator|=
operator|new
name|Path
argument_list|(
name|logfile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|walPath
operator|=
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|logfile
argument_list|)
expr_stmt|;
block|}
name|finishSplitLogFile
argument_list|(
name|walDir
argument_list|,
name|oldLogDir
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|finishSplitLogFile
parameter_list|(
name|Path
name|walDir
parameter_list|,
name|Path
name|oldWALDir
parameter_list|,
name|Path
name|walPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|processedLogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedLogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|FileSystem
name|walFS
init|=
name|walDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|ZKSplitLog
operator|.
name|isCorrupted
argument_list|(
name|walDir
argument_list|,
name|walPath
operator|.
name|getName
argument_list|()
argument_list|,
name|walFS
argument_list|)
condition|)
block|{
name|corruptedLogs
operator|.
name|add
argument_list|(
name|walPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processedLogs
operator|.
name|add
argument_list|(
name|walPath
argument_list|)
expr_stmt|;
block|}
name|archiveWALs
argument_list|(
name|corruptedLogs
argument_list|,
name|processedLogs
argument_list|,
name|oldWALDir
argument_list|,
name|walFS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|stagingDir
init|=
name|ZKSplitLog
operator|.
name|getSplitLogDir
argument_list|(
name|walDir
argument_list|,
name|walPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|walFS
operator|.
name|delete
argument_list|(
name|stagingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Moves processed logs to a oldLogDir after successful processing Moves corrupted logs (any log    * that couldn't be successfully parsed to corruptDir (.corrupt) for later investigation    */
specifier|private
specifier|static
name|void
name|archiveWALs
parameter_list|(
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedWALs
parameter_list|,
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|processedWALs
parameter_list|,
specifier|final
name|Path
name|oldWALDir
parameter_list|,
specifier|final
name|FileSystem
name|walFS
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|corruptDir
init|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|HConstants
operator|.
name|CORRUPT_DIR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.corrupt.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.corrupt.dir is deprecated. Default to {}"
argument_list|,
name|corruptDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|walFS
operator|.
name|mkdirs
argument_list|(
name|corruptDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to mkdir {}"
argument_list|,
name|corruptDir
argument_list|)
expr_stmt|;
block|}
name|walFS
operator|.
name|mkdirs
argument_list|(
name|oldWALDir
argument_list|)
expr_stmt|;
comment|// this method can get restarted or called multiple times for archiving
comment|// the same log files.
for|for
control|(
name|Path
name|corruptedWAL
range|:
name|corruptedWALs
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|corruptDir
argument_list|,
name|corruptedWAL
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|corruptedWAL
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|walFS
operator|.
name|rename
argument_list|(
name|corruptedWAL
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to move corrupted log {} to {}"
argument_list|,
name|corruptedWAL
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Moved corrupted log {} to {}"
argument_list|,
name|corruptedWAL
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Path
name|p
range|:
name|processedWALs
control|)
block|{
name|Path
name|newPath
init|=
name|AbstractFSWAL
operator|.
name|getWALArchivePath
argument_list|(
name|oldWALDir
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|FSUtils
operator|.
name|renameAndSetModifyTime
argument_list|(
name|walFS
argument_list|,
name|p
argument_list|,
name|newPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to move {} to {}"
argument_list|,
name|p
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Archived processed log {} to {}"
argument_list|,
name|p
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Path to a file under RECOVERED_EDITS_DIR directory of the region found in<code>logEntry</code>    * named for the sequenceid in the passed<code>logEntry</code>: e.g.    * /hbase/some_table/2323432434/recovered.edits/2332. This method also ensures existence of    * RECOVERED_EDITS_DIR under the region creating it if necessary.    * @param tableName the table name    * @param encodedRegionName the encoded region name    * @param sedId the sequence id which used to generate file name    * @param fileNameBeingSplit the file being split currently. Used to generate tmp file name.    * @param tmpDirName of the directory used to sideline old recovered edits file    * @param conf configuration    * @return Path to file into which to dump split log edits.    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|VisibleForTesting
specifier|static
name|Path
name|getRegionSplitEditsPath
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|long
name|sedId
parameter_list|,
name|String
name|fileNameBeingSplit
parameter_list|,
name|String
name|tmpDirName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|walFS
init|=
name|FSUtils
operator|.
name|getWALFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getWALTableDir
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|String
name|encodedRegionNameStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|tableDir
argument_list|,
name|encodedRegionNameStr
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regionDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
operator|&&
name|walFS
operator|.
name|isFile
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|tmpDirName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|exists
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|walFS
operator|.
name|mkdirs
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|=
operator|new
name|Path
argument_list|(
name|tmp
argument_list|,
name|HConstants
operator|.
name|RECOVERED_EDITS_DIR
operator|+
literal|"_"
operator|+
name|encodedRegionNameStr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old file: {}. It could be some "
operator|+
literal|"leftover of an old installation. It should be a folder instead. "
operator|+
literal|"So moving it to {}"
argument_list|,
name|dir
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|rename
argument_list|(
name|dir
argument_list|,
name|tmp
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to sideline old file {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|walFS
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
operator|&&
operator|!
name|walFS
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"mkdir failed on {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// Append fileBeingSplit to prevent name conflict since we may have duplicate wal entries now.
comment|// Append file name ends with RECOVERED_LOG_TMPFILE_SUFFIX to ensure
comment|// region's replayRecoveredEdits will not delete it
name|String
name|fileName
init|=
name|formatRecoveredEditsFileName
argument_list|(
name|sedId
argument_list|)
decl_stmt|;
name|fileName
operator|=
name|getTmpRecoveredEditsFileName
argument_list|(
name|fileName
operator|+
literal|"-"
operator|+
name|fileNameBeingSplit
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getTmpRecoveredEditsFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|fileName
operator|+
name|RECOVERED_LOG_TMPFILE_SUFFIX
return|;
block|}
comment|/**    * Get the completed recovered edits file path, renaming it to be by last edit in the file from    * its first edit. Then we could use the name to skip recovered edits when doing    * {@link HRegion#replayRecoveredEditsIfAny}.    * @return dstPath take file's last edit log seq num as the name    */
specifier|static
name|Path
name|getCompletedRecoveredEditsFilePath
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|long
name|maximumEditWALSeqNum
parameter_list|)
block|{
name|String
name|fileName
init|=
name|formatRecoveredEditsFileName
argument_list|(
name|maximumEditWALSeqNum
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|srcPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|fileName
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|String
name|formatRecoveredEditsFileName
parameter_list|(
specifier|final
name|long
name|seqid
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|seqid
argument_list|)
return|;
block|}
comment|/**    * @param regionDir This regions directory in the filesystem.    * @return The directory that holds recovered edits files for the region<code>regionDir</code>    */
specifier|public
specifier|static
name|Path
name|getRegionDirRecoveredEditsDir
parameter_list|(
specifier|final
name|Path
name|regionDir
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|HConstants
operator|.
name|RECOVERED_EDITS_DIR
argument_list|)
return|;
block|}
comment|/**    * Check whether there is recovered.edits in the region dir    * @param conf conf    * @param regionInfo the region to check    * @return true if recovered.edits exist in the region dir    */
specifier|public
specifier|static
name|boolean
name|hasRecoveredEdits
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No recovered.edits for non default replica regions
if|if
condition|(
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Only default replica region can reach here, so we can use regioninfo
comment|// directly without converting it to default replica's regioninfo.
name|Path
name|regionWALDir
init|=
name|FSUtils
operator|.
name|getWALRegionDir
argument_list|(
name|conf
argument_list|,
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|FSUtils
operator|.
name|getRegionDirFromRootDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|regionInfo
argument_list|)
decl_stmt|;
name|Path
name|wrongRegionWALDir
init|=
name|FSUtils
operator|.
name|getWrongWALRegionDir
argument_list|(
name|conf
argument_list|,
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|walFs
init|=
name|FSUtils
operator|.
name|getWALFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|rootFs
init|=
name|FSUtils
operator|.
name|getRootDirFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|getSplitEditFilesSorted
argument_list|(
name|walFs
argument_list|,
name|regionWALDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|files
operator|=
name|getSplitEditFilesSorted
argument_list|(
name|rootFs
argument_list|,
name|regionDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|files
operator|=
name|getSplitEditFilesSorted
argument_list|(
name|walFs
argument_list|,
name|wrongRegionWALDir
argument_list|)
expr_stmt|;
return|return
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * This method will check 3 places for finding the max sequence id file. One is the expected    * place, another is the old place under the region directory, and the last one is the wrong one    * we introduced in HBASE-20734. See HBASE-22617 for more details.    *<p/>    * Notice that, you should always call this method instead of    * {@link #getMaxRegionSequenceId(FileSystem, Path)} until 4.0.0 release.    * @deprecated Only for compatibility, will be removed in 4.0.0.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|long
name|getMaxRegionSequenceId
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RegionInfo
name|region
parameter_list|,
name|IOExceptionSupplier
argument_list|<
name|FileSystem
argument_list|>
name|rootFsSupplier
parameter_list|,
name|IOExceptionSupplier
argument_list|<
name|FileSystem
argument_list|>
name|walFsSupplier
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|rootFs
init|=
name|rootFsSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|FileSystem
name|walFs
init|=
name|walFsSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|Path
name|regionWALDir
init|=
name|FSUtils
operator|.
name|getWALRegionDir
argument_list|(
name|conf
argument_list|,
name|region
operator|.
name|getTable
argument_list|()
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// This is the old place where we store max sequence id file
name|Path
name|regionDir
init|=
name|FSUtils
operator|.
name|getRegionDirFromRootDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|region
argument_list|)
decl_stmt|;
comment|// This is for HBASE-20734, where we use a wrong directory, see HBASE-22617 for more details.
name|Path
name|wrongRegionWALDir
init|=
name|FSUtils
operator|.
name|getWrongWALRegionDir
argument_list|(
name|conf
argument_list|,
name|region
operator|.
name|getTable
argument_list|()
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|maxSeqId
init|=
name|getMaxRegionSequenceId
argument_list|(
name|walFs
argument_list|,
name|regionWALDir
argument_list|)
decl_stmt|;
name|maxSeqId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSeqId
argument_list|,
name|getMaxRegionSequenceId
argument_list|(
name|rootFs
argument_list|,
name|regionDir
argument_list|)
argument_list|)
expr_stmt|;
name|maxSeqId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSeqId
argument_list|,
name|getMaxRegionSequenceId
argument_list|(
name|walFs
argument_list|,
name|wrongRegionWALDir
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|maxSeqId
return|;
block|}
comment|/**    * Returns sorted set of edit files made by splitter, excluding files with '.temp' suffix.    * @param walFS WAL FileSystem used to retrieving split edits files.    * @param regionDir WAL region dir to look for recovered edits files under.    * @return Files in passed<code>regionDir</code> as a sorted set.    * @throws IOException    */
specifier|public
specifier|static
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|getSplitEditFilesSorted
parameter_list|(
specifier|final
name|FileSystem
name|walFS
parameter_list|,
specifier|final
name|Path
name|regionDir
parameter_list|)
throws|throws
name|IOException
block|{
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|filesSorted
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|editsdir
init|=
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regionDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|exists
argument_list|(
name|editsdir
argument_list|)
condition|)
block|{
return|return
name|filesSorted
return|;
block|}
name|FileStatus
index|[]
name|files
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|walFS
argument_list|,
name|editsdir
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Return files and only files that match the editfile names pattern.
comment|// There can be other files in this directory other than edit files.
comment|// In particular, on error, we'll move aside the bad edit file giving
comment|// it a timestamp suffix. See moveAsideBadEditsFile.
name|Matcher
name|m
init|=
name|EDITFILES_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|walFS
operator|.
name|isFile
argument_list|(
name|p
argument_list|)
operator|&&
name|m
operator|.
name|matches
argument_list|()
expr_stmt|;
comment|// Skip the file whose name ends with RECOVERED_LOG_TMPFILE_SUFFIX,
comment|// because it means splitwal thread is writting this file.
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|RECOVERED_LOG_TMPFILE_SUFFIX
argument_list|)
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
comment|// Skip SeqId Files
if|if
condition|(
name|isSequenceIdFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed isFile check on {}"
argument_list|,
name|p
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|ArrayUtils
operator|.
name|isNotEmpty
argument_list|(
name|files
argument_list|)
condition|)
block|{
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|forEach
argument_list|(
name|status
lambda|->
name|filesSorted
operator|.
name|add
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|filesSorted
return|;
block|}
comment|/**    * Move aside a bad edits file.    * @param walFS WAL FileSystem used to rename bad edits file.    * @param edits Edits file to move aside.    * @return The name of the moved aside file.    * @throws IOException    */
specifier|public
specifier|static
name|Path
name|moveAsideBadEditsFile
parameter_list|(
specifier|final
name|FileSystem
name|walFS
parameter_list|,
specifier|final
name|Path
name|edits
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|moveAsideName
init|=
operator|new
name|Path
argument_list|(
name|edits
operator|.
name|getParent
argument_list|()
argument_list|,
name|edits
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|rename
argument_list|(
name|edits
argument_list|,
name|moveAsideName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rename failed from {} to {}"
argument_list|,
name|edits
argument_list|,
name|moveAsideName
argument_list|)
expr_stmt|;
block|}
return|return
name|moveAsideName
return|;
block|}
comment|/**    * Is the given file a region open sequence id file.    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|boolean
name|isSequenceIdFile
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|SEQUENCE_ID_FILE_SUFFIX
argument_list|)
operator|||
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|OLD_SEQUENCE_ID_FILE_SUFFIX
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|FileStatus
index|[]
name|getSequenceIdFiles
parameter_list|(
name|FileSystem
name|walFS
parameter_list|,
name|Path
name|regionDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Why are we using a method in here as part of our normal region open where
comment|// there is no splitting involved? Fix. St.Ack 01/20/2017.
name|Path
name|editsDir
init|=
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regionDir
argument_list|)
decl_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|files
init|=
name|walFS
operator|.
name|listStatus
argument_list|(
name|editsDir
argument_list|,
name|WALSplitUtil
operator|::
name|isSequenceIdFile
argument_list|)
decl_stmt|;
return|return
name|files
operator|!=
literal|null
condition|?
name|files
else|:
operator|new
name|FileStatus
index|[
literal|0
index|]
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|private
specifier|static
name|long
name|getMaxSequenceId
parameter_list|(
name|FileStatus
index|[]
name|files
parameter_list|)
block|{
name|long
name|maxSeqId
init|=
operator|-
literal|1L
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|String
name|fileName
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|maxSeqId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSeqId
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
operator|-
name|SEQUENCE_ID_FILE_SUFFIX_LENGTH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid SeqId File Name={}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|maxSeqId
return|;
block|}
comment|/**    * Get the max sequence id which is stored in the region directory. -1 if none.    */
specifier|public
specifier|static
name|long
name|getMaxRegionSequenceId
parameter_list|(
name|FileSystem
name|walFS
parameter_list|,
name|Path
name|regionDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getMaxSequenceId
argument_list|(
name|getSequenceIdFiles
argument_list|(
name|walFS
argument_list|,
name|regionDir
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a file with name as region's max sequence id    */
specifier|public
specifier|static
name|void
name|writeRegionSequenceIdFile
parameter_list|(
name|FileSystem
name|walFS
parameter_list|,
name|Path
name|regionDir
parameter_list|,
name|long
name|newMaxSeqId
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|files
init|=
name|getSequenceIdFiles
argument_list|(
name|walFS
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
name|long
name|maxSeqId
init|=
name|getMaxSequenceId
argument_list|(
name|files
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxSeqId
operator|>
name|newMaxSeqId
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The new max sequence id "
operator|+
name|newMaxSeqId
operator|+
literal|" is less than the old max sequence id "
operator|+
name|maxSeqId
argument_list|)
throw|;
block|}
comment|// write a new seqId file
name|Path
name|newSeqIdFile
init|=
operator|new
name|Path
argument_list|(
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regionDir
argument_list|)
argument_list|,
name|newMaxSeqId
operator|+
name|SEQUENCE_ID_FILE_SUFFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMaxSeqId
operator|!=
name|maxSeqId
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|walFS
operator|.
name|createNewFile
argument_list|(
name|newSeqIdFile
argument_list|)
operator|&&
operator|!
name|walFS
operator|.
name|exists
argument_list|(
name|newSeqIdFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create SeqId file:"
operator|+
name|newSeqIdFile
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wrote file={}, newMaxSeqId={}, maxSeqId={}"
argument_list|,
name|newSeqIdFile
argument_list|,
name|newMaxSeqId
argument_list|,
name|maxSeqId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|ignored
parameter_list|)
block|{
comment|// latest hdfs throws this exception. it's all right if newSeqIdFile already exists
block|}
block|}
comment|// remove old ones
for|for
control|(
name|FileStatus
name|status
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|newSeqIdFile
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|walFS
operator|.
name|delete
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** A struct used by getMutationsFromWALEntry */
specifier|public
specifier|static
class|class
name|MutationReplay
implements|implements
name|Comparable
argument_list|<
name|MutationReplay
argument_list|>
block|{
specifier|public
name|MutationReplay
parameter_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|long
name|nonce
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|mutation
operator|=
name|mutation
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mutation
operator|.
name|getDurability
argument_list|()
operator|!=
name|Durability
operator|.
name|SKIP_WAL
condition|)
block|{
comment|// using ASYNC_WAL for relay
name|this
operator|.
name|mutation
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nonceGroup
operator|=
name|nonceGroup
expr_stmt|;
name|this
operator|.
name|nonce
operator|=
name|nonce
expr_stmt|;
block|}
specifier|private
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
decl_stmt|;
specifier|public
specifier|final
name|Mutation
name|mutation
decl_stmt|;
specifier|public
specifier|final
name|long
name|nonceGroup
decl_stmt|;
specifier|public
specifier|final
name|long
name|nonce
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|MutationReplay
name|d
parameter_list|)
block|{
return|return
name|Row
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|mutation
argument_list|,
name|d
operator|.
name|mutation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|MutationReplay
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|MutationReplay
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutation
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
comment|/**    * This function is used to construct mutations from a WALEntry. It also reconstructs WALKey&amp;    * WALEdit from the passed in WALEntry    * @param entry    * @param cells    * @param logEntry pair of WALKey and WALEdit instance stores WALKey and WALEdit instances    *          extracted from the passed in WALEntry.    * @return list of Pair&lt;MutationType, Mutation&gt; to be replayed    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|MutationReplay
argument_list|>
name|getMutationsFromWALEntry
parameter_list|(
name|AdminProtos
operator|.
name|WALEntry
name|entry
parameter_list|,
name|CellScanner
name|cells
parameter_list|,
name|Pair
argument_list|<
name|WALKey
argument_list|,
name|WALEdit
argument_list|>
name|logEntry
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
comment|// return an empty array
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|long
name|replaySeqId
init|=
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|hasOrigSequenceNumber
argument_list|()
operator|)
condition|?
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getOrigSequenceNumber
argument_list|()
else|:
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSequenceNumber
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|entry
operator|.
name|getAssociatedCellCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MutationReplay
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Cell
name|previousCell
init|=
literal|null
decl_stmt|;
name|Mutation
name|m
init|=
literal|null
decl_stmt|;
name|WALKeyImpl
name|key
init|=
literal|null
decl_stmt|;
name|WALEdit
name|val
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|logEntry
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
operator|new
name|WALEdit
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|// Throw index out of bounds if our cell count is off
if|if
condition|(
operator|!
name|cells
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"Expected="
operator|+
name|count
operator|+
literal|", index="
operator|+
name|i
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cells
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|val
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|boolean
name|isNewRowOrType
init|=
name|previousCell
operator|==
literal|null
operator|||
name|previousCell
operator|.
name|getTypeByte
argument_list|()
operator|!=
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|||
operator|!
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|previousCell
argument_list|,
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNewRowOrType
condition|)
block|{
comment|// Create new mutation
if|if
condition|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|cell
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|Delete
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deletes don't have nonces.
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|MutationReplay
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|DELETE
argument_list|,
name|m
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
operator|new
name|Put
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Puts might come from increment or append, thus we need nonces.
name|long
name|nonceGroup
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|hasNonceGroup
argument_list|()
condition|?
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getNonceGroup
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
name|long
name|nonce
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|hasNonce
argument_list|()
condition|?
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getNonce
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|MutationReplay
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
argument_list|,
name|m
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|cell
argument_list|)
condition|)
block|{
operator|(
operator|(
name|Delete
operator|)
name|m
operator|)
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|Put
operator|)
name|m
operator|)
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|setDurability
argument_list|(
name|durability
argument_list|)
expr_stmt|;
name|previousCell
operator|=
name|cell
expr_stmt|;
block|}
comment|// reconstruct WALKey
if|if
condition|(
name|logEntry
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALKey
name|walKeyProto
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|walKeyProto
operator|.
name|getClusterIdsCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|UUID
name|uuid
range|:
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterIdsList
argument_list|()
control|)
block|{
name|clusterIds
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|uuid
operator|.
name|getMostSigBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSigBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
operator|new
name|WALKeyImpl
argument_list|(
name|walKeyProto
operator|.
name|getEncodedRegionName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|walKeyProto
operator|.
name|getTableName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|replaySeqId
argument_list|,
name|walKeyProto
operator|.
name|getWriteTime
argument_list|()
argument_list|,
name|clusterIds
argument_list|,
name|walKeyProto
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|walKeyProto
operator|.
name|getNonce
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|logEntry
operator|.
name|setFirst
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|logEntry
operator|.
name|setSecond
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|mutations
return|;
block|}
block|}
end_class

end_unit

