begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterWalManager
operator|.
name|META_FILTER
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetricsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetricsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MasterSwitchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|VersionInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationPeerConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnknownProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteBuffAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PriorityFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|QosPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|BlockingServiceAndInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServerInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|locking
operator|.
name|LockProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureUtil
operator|.
name|NonceProcedureRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ServerCrashProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|MasterProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|LockedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|AccessControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabelsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|MasterQuotaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaObserverChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RSRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RpcSchedulerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|Superusers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessChecker
operator|.
name|InputUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|PermissionStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|ShadedAccessControlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|UserPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|ClientSnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ForeignExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|GrantRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|GrantResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|HasUserPermissionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|HasUserPermissionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|RevokeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|RevokeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|RegionStoreSequenceIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameStringPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ProcedureDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AbortProcedureRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AbortProcedureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AddColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AddColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AssignRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AssignRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BalanceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BalanceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ClearDeadServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ClearDeadServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DecommissionRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DecommissionRegionServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DisableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DisableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableCatalogJanitorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableCatalogJanitorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ExecProcedureRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ExecProcedureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|FixMetaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|FixMetaResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetClusterStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetClusterStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetCompletedSnapshotsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetCompletedSnapshotsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetNamespaceDescriptorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetNamespaceDescriptorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProceduresRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProceduresResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetSchemaAlterStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetSchemaAlterStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableStateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|HbckService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsCatalogJanitorEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsCatalogJanitorEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsCleanerChoreEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsCleanerChoreEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsInMaintenanceModeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsInMaintenanceModeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsMasterRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsMasterRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsNormalizerEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsNormalizerEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsProcedureDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsProcedureDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotCleanupEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotCleanupEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSplitOrMergeEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSplitOrMergeEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListDecommissionedRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListDecommissionedRegionServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListNamespaceDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListNamespaceDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListNamespacesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListNamespacesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableDescriptorsByNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableDescriptorsByNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableNamesByNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableNamesByNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MajorCompactionTimestampForRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MajorCompactionTimestampRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MajorCompactionTimestampResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MergeTableRegionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MergeTableRegionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MoveRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MoveRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|NormalizeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|NormalizeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|OfflineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|OfflineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RecommissionRegionServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RecommissionRegionServerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RestoreSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RestoreSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunCatalogScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunCatalogScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunCleanerChoreRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunCleanerChoreResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunHbckChoreRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunHbckChoreResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SecurityCapabilitiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SecurityCapabilitiesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetCleanerChoreRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetCleanerChoreRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetNormalizerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetNormalizerRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetQuotaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetQuotaResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetSnapshotCleanupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetSnapshotCleanupResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetSplitOrMergeEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetSplitOrMergeEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetTableStateInMetaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ShutdownRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ShutdownResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SplitTableRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SplitTableRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|StopMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|StopMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchExceedThrottleQuotaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchExceedThrottleQuotaResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchRpcThrottleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchRpcThrottleResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|TruncateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|TruncateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|UnassignRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|UnassignRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetQuotaStatesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetQuotaStatesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetQuotaStatesResponse
operator|.
name|NamespaceQuotaSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetQuotaStatesResponse
operator|.
name|TableQuotaSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaRegionSizesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaRegionSizesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaRegionSizesResponse
operator|.
name|RegionSizes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|GetLastFlushedSequenceIdRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|GetLastFlushedSequenceIdResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStatusService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionSpaceUse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionSpaceUseReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionSpaceUseReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RemoteProcedureResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportProcedureDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportProcedureDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRSFatalErrorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRSFatalErrorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRegionStateTransitionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRegionStateTransitionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|AddReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|AddReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|DisableReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|DisableReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|EnableReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|EnableReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|GetReplicationPeerConfigRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|GetReplicationPeerConfigResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|ListReplicationPeersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|ListReplicationPeersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|RemoveReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|RemoveReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|ReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|TransitReplicationPeerSyncReplicationStateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|TransitReplicationPeerSyncReplicationStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|UpdateReplicationPeerConfigRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|UpdateReplicationPeerConfigResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_comment
comment|/**  * Implements the master RPC services.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|MasterRpcServices
extends|extends
name|RSRpcServices
implements|implements
name|MasterService
operator|.
name|BlockingInterface
implements|,
name|RegionServerStatusService
operator|.
name|BlockingInterface
implements|,
name|LockService
operator|.
name|BlockingInterface
implements|,
name|HbckService
operator|.
name|BlockingInterface
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MasterRpcServices
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|AUDITLOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"SecurityLogger."
operator|+
name|MasterRpcServices
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HMaster
name|master
decl_stmt|;
comment|/**    * @return Subset of configuration to pass initializing regionservers: e.g.    * the filesystem to use and root directory to use.    */
specifier|private
name|RegionServerStartupResponse
operator|.
name|Builder
name|createConfigurationSubset
parameter_list|()
block|{
name|RegionServerStartupResponse
operator|.
name|Builder
name|resp
init|=
name|addConfig
argument_list|(
name|RegionServerStartupResponse
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
decl_stmt|;
name|resp
operator|=
name|addConfig
argument_list|(
name|resp
argument_list|,
literal|"fs.defaultFS"
argument_list|)
expr_stmt|;
return|return
name|addConfig
argument_list|(
name|resp
argument_list|,
literal|"hbase.master.info.port"
argument_list|)
return|;
block|}
specifier|private
name|RegionServerStartupResponse
operator|.
name|Builder
name|addConfig
parameter_list|(
specifier|final
name|RegionServerStartupResponse
operator|.
name|Builder
name|resp
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|NameStringPair
operator|.
name|Builder
name|entry
init|=
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|key
argument_list|)
operator|.
name|setValue
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|addMapEntries
argument_list|(
name|entry
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
specifier|public
name|MasterRpcServices
parameter_list|(
name|HMaster
name|m
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|master
operator|=
name|m
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getRpcSchedulerFactoryClass
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
return|return
name|conf
operator|.
name|getClass
argument_list|(
name|MASTER_RPC_SCHEDULER_FACTORY_CLASS
argument_list|,
name|super
operator|.
name|getRpcSchedulerFactoryClass
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getRpcSchedulerFactoryClass
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|RpcServerInterface
name|createRpcServer
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RpcSchedulerFactory
name|rpcSchedulerFactory
parameter_list|,
specifier|final
name|InetSocketAddress
name|bindAddress
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|regionServer
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// RpcServer at HM by default enable ByteBufferPool iff HM having user table region in it
name|boolean
name|reservoirEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|ByteBuffAllocator
operator|.
name|ALLOCATOR_POOL_ENABLED_KEY
argument_list|,
name|LoadBalancer
operator|.
name|isMasterCanHostUserRegions
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|RpcServerFactory
operator|.
name|createRpcServer
argument_list|(
name|server
argument_list|,
name|name
argument_list|,
name|getServices
argument_list|()
argument_list|,
name|bindAddress
argument_list|,
comment|// use final bindAddress for this server.
name|conf
argument_list|,
name|rpcSchedulerFactory
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|this
argument_list|,
name|server
argument_list|)
argument_list|,
name|reservoirEnabled
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BindException
name|be
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|be
operator|.
name|getMessage
argument_list|()
operator|+
literal|". To switch ports use the '"
operator|+
name|HConstants
operator|.
name|MASTER_PORT
operator|+
literal|"' configuration property."
argument_list|,
name|be
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|be
operator|.
name|getCause
argument_list|()
else|:
name|be
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|PriorityFunction
name|createPriority
parameter_list|()
block|{
return|return
operator|new
name|MasterAnnotationReadingPriorityFunction
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Checks for the following pre-checks in order:    *<ol>    *<li>Master is initialized</li>    *<li>Rpc caller has admin permissions</li>    *</ol>    * @param requestName name of rpc request. Used in reporting failures to provide context.    * @throws ServiceException If any of the above listed pre-check fails.    */
specifier|private
name|void
name|rpcPreCheck
parameter_list|(
name|String
name|requestName
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|requirePermission
argument_list|(
name|requestName
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
enum|enum
name|BalanceSwitchMode
block|{
name|SYNC
block|,
name|ASYNC
block|}
comment|/**    * Assigns balancer switch according to BalanceSwitchMode    * @param b new balancer switch    * @param mode BalanceSwitchMode    * @return old balancer switch    */
name|boolean
name|switchBalancer
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|,
name|BalanceSwitchMode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|oldValue
init|=
name|master
operator|.
name|loadBalancerTracker
operator|.
name|isBalancerOn
argument_list|()
decl_stmt|;
name|boolean
name|newValue
init|=
name|b
decl_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preBalanceSwitch
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|mode
operator|==
name|BalanceSwitchMode
operator|.
name|SYNC
condition|)
block|{
synchronized|synchronized
init|(
name|master
operator|.
name|getLoadBalancer
argument_list|()
init|)
block|{
name|master
operator|.
name|loadBalancerTracker
operator|.
name|setBalancerOn
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|master
operator|.
name|loadBalancerTracker
operator|.
name|setBalancerOn
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" set balanceSwitch="
operator|+
name|newValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postBalanceSwitch
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|getLoadBalancer
argument_list|()
operator|.
name|updateBalancerStatus
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error flipping balance switch"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValue
return|;
block|}
name|boolean
name|synchronousBalanceSwitch
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|switchBalancer
argument_list|(
name|b
argument_list|,
name|BalanceSwitchMode
operator|.
name|SYNC
argument_list|)
return|;
block|}
comment|/**    * @return list of blocking services and their security info classes that this server supports    */
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|getServices
parameter_list|()
block|{
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|bssi
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|MasterService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|MasterService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|RegionServerStatusService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|RegionServerStatusService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|LockService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|LockService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|HbckService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|HbckService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bssi
operator|.
name|addAll
argument_list|(
name|super
operator|.
name|getServices
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bssi
return|;
block|}
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|GetLastFlushedSequenceIdResponse
name|getLastFlushedSequenceId
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetLastFlushedSequenceIdRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
name|byte
index|[]
name|encodedRegionName
init|=
name|request
operator|.
name|getRegionName
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionStoreSequenceIds
name|ids
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getLastFlushedSequenceId
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|buildGetLastFlushedSequenceIdResponse
argument_list|(
name|ids
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionServerReportResponse
name|regionServerReport
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RegionServerReportRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
name|int
name|versionNumber
init|=
literal|0
decl_stmt|;
name|String
name|version
init|=
literal|"0.0.0"
decl_stmt|;
name|VersionInfo
name|versionInfo
init|=
name|VersionInfoUtil
operator|.
name|getCurrentClientVersionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|versionInfo
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|versionInfo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|versionNumber
operator|=
name|VersionInfoUtil
operator|.
name|getVersionNumber
argument_list|(
name|versionInfo
argument_list|)
expr_stmt|;
block|}
name|ClusterStatusProtos
operator|.
name|ServerLoad
name|sl
init|=
name|request
operator|.
name|getLoad
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|request
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|ServerMetrics
name|oldLoad
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getLoad
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|ServerMetrics
name|newLoad
init|=
name|ServerMetricsBuilder
operator|.
name|toServerMetrics
argument_list|(
name|serverName
argument_list|,
name|versionNumber
argument_list|,
name|version
argument_list|,
name|sl
argument_list|)
decl_stmt|;
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|regionServerReport
argument_list|(
name|serverName
argument_list|,
name|newLoad
argument_list|)
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|reportOnlineRegions
argument_list|(
name|serverName
argument_list|,
name|newLoad
operator|.
name|getRegionMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
operator|&&
name|master
operator|.
name|metricsMaster
operator|!=
literal|null
condition|)
block|{
comment|// Up our metrics.
name|master
operator|.
name|metricsMaster
operator|.
name|incrementRequests
argument_list|(
name|sl
operator|.
name|getTotalNumberOfRequests
argument_list|()
operator|-
operator|(
name|oldLoad
operator|!=
literal|null
condition|?
name|oldLoad
operator|.
name|getRequestCount
argument_list|()
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|RegionServerReportResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionServerStartupResponse
name|regionServerStartup
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RegionServerStartupRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// Register with server manager
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
name|int
name|versionNumber
init|=
literal|0
decl_stmt|;
name|String
name|version
init|=
literal|"0.0.0"
decl_stmt|;
name|VersionInfo
name|versionInfo
init|=
name|VersionInfoUtil
operator|.
name|getCurrentClientVersionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|versionInfo
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|versionInfo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|versionNumber
operator|=
name|VersionInfoUtil
operator|.
name|getVersionNumber
argument_list|(
name|versionInfo
argument_list|)
expr_stmt|;
block|}
name|InetAddress
name|ia
init|=
name|master
operator|.
name|getRemoteInetAddress
argument_list|(
name|request
operator|.
name|getPort
argument_list|()
argument_list|,
name|request
operator|.
name|getServerStartCode
argument_list|()
argument_list|)
decl_stmt|;
comment|// if regionserver passed hostname to use,
comment|// then use it instead of doing a reverse DNS lookup
name|ServerName
name|rs
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|regionServerStartup
argument_list|(
name|request
argument_list|,
name|versionNumber
argument_list|,
name|version
argument_list|,
name|ia
argument_list|)
decl_stmt|;
comment|// Send back some config info
name|RegionServerStartupResponse
operator|.
name|Builder
name|resp
init|=
name|createConfigurationSubset
argument_list|()
decl_stmt|;
name|NameStringPair
operator|.
name|Builder
name|entry
init|=
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|HConstants
operator|.
name|KEY_FOR_HOSTNAME_SEEN_BY_MASTER
argument_list|)
operator|.
name|setValue
argument_list|(
name|rs
operator|.
name|getHostname
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|addMapEntries
argument_list|(
name|entry
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ReportRSFatalErrorResponse
name|reportRSFatalError
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ReportRSFatalErrorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|String
name|errorText
init|=
name|request
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|request
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|sn
operator|+
literal|" reported a fatal error:\n"
operator|+
name|errorText
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|master
operator|.
name|rsFatals
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|ReportRSFatalErrorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AddColumnResponse
name|addColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AddColumnRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|addColumn
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|ProtobufUtil
operator|.
name|toColumnFamilyDescriptor
argument_list|(
name|req
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|==
operator|-
literal|1
condition|)
block|{
comment|// This mean operation was not performed in server, so do not set any procId
return|return
name|AddColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|AddColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AssignRegionResponse
name|assignRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AssignRegionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
specifier|final
name|RegionSpecifierType
name|type
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"assignRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|regionName
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|RegionInfo
name|regionInfo
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
specifier|final
name|AssignRegionResponse
name|arr
init|=
name|AssignRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preAssign
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" assign "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|assign
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postAssign
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BalanceResponse
name|balance
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|BalanceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|BalanceResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBalancerRan
argument_list|(
name|master
operator|.
name|balance
argument_list|(
name|request
operator|.
name|hasForce
argument_list|()
condition|?
name|request
operator|.
name|getForce
argument_list|()
else|:
literal|false
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CreateNamespaceResponse
name|createNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CreateNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|createNamespace
argument_list|(
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|request
operator|.
name|getNamespaceDescriptor
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CreateNamespaceResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CreateTableResponse
name|createTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CreateTableRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|TableDescriptor
name|tableDescriptor
init|=
name|ProtobufUtil
operator|.
name|toTableDescriptor
argument_list|(
name|req
operator|.
name|getTableSchema
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|ProtobufUtil
operator|.
name|getSplitKeysArray
argument_list|(
name|req
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|,
name|splitKeys
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" procedure request for creating table: "
operator|+
name|req
operator|.
name|getTableSchema
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|" procId is: "
operator|+
name|procId
argument_list|)
expr_stmt|;
return|return
name|CreateTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeleteColumnResponse
name|deleteColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteColumnRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|deleteColumn
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getColumnName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|==
operator|-
literal|1
condition|)
block|{
comment|// This mean operation was not performed in server, so do not set any procId
return|return
name|DeleteColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|DeleteColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeleteNamespaceResponse
name|deleteNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|deleteNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|DeleteNamespaceResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Execute Delete Snapshot operation.    * @return DeleteSnapshotResponse (a protobuf wrapped void) if the snapshot existed and was    *    deleted properly.    * @throws ServiceException wrapping SnapshotDoesNotExistException if specified snapshot did not    *    exist.    */
annotation|@
name|Override
specifier|public
name|DeleteSnapshotResponse
name|deleteSnapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteSnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|master
operator|.
name|snapshotManager
operator|.
name|checkSnapshotSupport
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" delete "
operator|+
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|snapshotManager
operator|.
name|deleteSnapshot
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|DeleteSnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeleteTableResponse
name|deleteTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|deleteTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|DeleteTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TruncateTableResponse
name|truncateTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|TruncateTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|truncateTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getPreserveSplits
argument_list|()
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|TruncateTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DisableTableResponse
name|disableTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DisableTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|disableTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|DisableTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EnableCatalogJanitorResponse
name|enableCatalogJanitor
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|EnableCatalogJanitorRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|rpcPreCheck
argument_list|(
literal|"enableCatalogJanitor"
argument_list|)
expr_stmt|;
return|return
name|EnableCatalogJanitorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevValue
argument_list|(
name|master
operator|.
name|catalogJanitorChore
operator|.
name|setEnabled
argument_list|(
name|req
operator|.
name|getEnable
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SetCleanerChoreRunningResponse
name|setCleanerChoreRunning
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|SetCleanerChoreRunningRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|rpcPreCheck
argument_list|(
literal|"setCleanerChoreRunning"
argument_list|)
expr_stmt|;
name|boolean
name|prevValue
init|=
name|master
operator|.
name|getLogCleaner
argument_list|()
operator|.
name|getEnabled
argument_list|()
operator|&&
name|master
operator|.
name|getHFileCleaner
argument_list|()
operator|.
name|getEnabled
argument_list|()
decl_stmt|;
name|master
operator|.
name|getLogCleaner
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|req
operator|.
name|getOn
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|getHFileCleaner
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|req
operator|.
name|getOn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SetCleanerChoreRunningResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevValue
argument_list|(
name|prevValue
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EnableTableResponse
name|enableTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|EnableTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|enableTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|EnableTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MergeTableRegionsResponse
name|mergeTableRegions
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|MergeTableRegionsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
name|RegionStates
name|regionStates
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|RegionInfo
index|[]
name|regionsToMerge
init|=
operator|new
name|RegionInfo
index|[
name|request
operator|.
name|getRegionCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|getRegionCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|byte
index|[]
name|encodedNameOfRegion
init|=
name|request
operator|.
name|getRegion
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getRegion
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
operator|!=
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"MergeRegions specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
operator|+
literal|" actual: region "
operator|+
name|i
operator|+
literal|" ="
operator|+
name|request
operator|.
name|getRegion
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RegionState
name|regionState
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedNameOfRegion
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|encodedNameOfRegion
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|regionsToMerge
index|[
name|i
index|]
operator|=
name|regionState
operator|.
name|getRegion
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|mergeRegions
argument_list|(
name|regionsToMerge
argument_list|,
name|request
operator|.
name|getForcible
argument_list|()
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MergeTableRegionsResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SplitTableRegionResponse
name|splitRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|SplitTableRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|splitRegion
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|request
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|hasSplitRow
argument_list|()
condition|?
name|request
operator|.
name|getSplitRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|SplitTableRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
name|execMasterService
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|rpcPreCheck
argument_list|(
literal|"execMasterService"
argument_list|)
expr_stmt|;
try|try
block|{
name|ServerRpcController
name|execController
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|CoprocessorServiceCall
name|call
init|=
name|request
operator|.
name|getCall
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
name|call
operator|.
name|getServiceName
argument_list|()
decl_stmt|;
name|String
name|methodName
init|=
name|call
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|master
operator|.
name|coprocessorServiceHandlers
operator|.
name|containsKey
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnknownProtocolException
argument_list|(
literal|null
argument_list|,
literal|"No registered Master Coprocessor Endpoint found for "
operator|+
name|serviceName
operator|+
literal|". Has it been enabled?"
argument_list|)
throw|;
block|}
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
name|service
init|=
name|master
operator|.
name|coprocessorServiceHandlers
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|ServiceDescriptor
name|serviceDesc
init|=
name|service
operator|.
name|getDescriptorForType
argument_list|()
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
name|methodDesc
init|=
name|CoprocessorRpcUtils
operator|.
name|getMethodDescriptor
argument_list|(
name|methodName
argument_list|,
name|serviceDesc
argument_list|)
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|execRequest
init|=
name|CoprocessorRpcUtils
operator|.
name|getRequest
argument_list|(
name|service
argument_list|,
name|methodDesc
argument_list|,
name|call
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
operator|.
name|Builder
name|responseBuilder
init|=
name|service
operator|.
name|getResponsePrototype
argument_list|(
name|methodDesc
argument_list|)
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
name|service
operator|.
name|callMethod
argument_list|(
name|methodDesc
argument_list|,
name|execController
argument_list|,
name|execRequest
argument_list|,
parameter_list|(
name|message
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|responseBuilder
operator|.
name|mergeFrom
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|execResult
init|=
name|responseBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|execController
operator|.
name|getFailedOn
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|execController
operator|.
name|getFailedOn
argument_list|()
throw|;
block|}
return|return
name|CoprocessorRpcUtils
operator|.
name|getResponse
argument_list|(
name|execResult
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Triggers an asynchronous attempt to run a distributed procedure.    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|ExecProcedureResponse
name|execProcedure
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ExecProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|ProcedureDescription
name|desc
init|=
name|request
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|MasterProcedureManager
name|mpm
init|=
name|master
operator|.
name|getMasterProcedureManagerHost
argument_list|()
operator|.
name|getProcedureManager
argument_list|(
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"The procedure is not registered: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" procedure request for: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|mpm
operator|.
name|checkPermissions
argument_list|(
name|desc
argument_list|,
name|getAccessChecker
argument_list|()
argument_list|,
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|mpm
operator|.
name|execProcedure
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// send back the max amount of time the client should wait for the procedure
comment|// to complete
name|long
name|waitTime
init|=
name|SnapshotDescriptionUtils
operator|.
name|DEFAULT_MAX_WAIT_TIME
decl_stmt|;
return|return
name|ExecProcedureResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExpectedTimeout
argument_list|(
name|waitTime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Triggers a synchronous attempt to run a distributed procedure and sets    * return data in response.    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|ExecProcedureResponse
name|execProcedureWithRet
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ExecProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|rpcPreCheck
argument_list|(
literal|"execProcedureWithRet"
argument_list|)
expr_stmt|;
try|try
block|{
name|ProcedureDescription
name|desc
init|=
name|request
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|MasterProcedureManager
name|mpm
init|=
name|master
operator|.
name|getMasterProcedureManagerHost
argument_list|()
operator|.
name|getProcedureManager
argument_list|(
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"The procedure is not registered: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" procedure request for: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|mpm
operator|.
name|execProcedureWithRet
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|ExecProcedureResponse
operator|.
name|Builder
name|builder
init|=
name|ExecProcedureResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// set return data if available
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReturnData
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetClusterStatusResponse
name|getClusterStatus
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetClusterStatusRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|GetClusterStatusResponse
operator|.
name|Builder
name|response
init|=
name|GetClusterStatusResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|response
operator|.
name|setClusterStatus
argument_list|(
name|ClusterMetricsBuilder
operator|.
name|toClusterStatus
argument_list|(
name|master
operator|.
name|getClusterMetrics
argument_list|(
name|ClusterMetricsBuilder
operator|.
name|toOptions
argument_list|(
name|req
operator|.
name|getOptionsList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * List the currently available/stored snapshots. Any in-progress snapshots are ignored    */
annotation|@
name|Override
specifier|public
name|GetCompletedSnapshotsResponse
name|getCompletedSnapshots
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetCompletedSnapshotsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|GetCompletedSnapshotsResponse
operator|.
name|Builder
name|builder
init|=
name|GetCompletedSnapshotsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|master
operator|.
name|snapshotManager
operator|.
name|getCompletedSnapshots
argument_list|()
decl_stmt|;
comment|// convert to protobuf
for|for
control|(
name|SnapshotDescription
name|snapshot
range|:
name|snapshots
control|)
block|{
name|builder
operator|.
name|addSnapshots
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ListNamespacesResponse
name|listNamespaces
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ListNamespacesRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|ListNamespacesResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllNamespaceName
argument_list|(
name|master
operator|.
name|listNamespaces
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetNamespaceDescriptorResponse
name|getNamespaceDescriptor
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetNamespaceDescriptorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|GetNamespaceDescriptorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceDescriptor
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|master
operator|.
name|getNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the number of regions of the table that have been updated by the alter.    *    * @return Pair indicating the number of regions updated Pair.getFirst is the    *         regions that are yet to be updated Pair.getSecond is the total number    *         of regions of the table    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|GetSchemaAlterStatusResponse
name|getSchemaAlterStatus
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetSchemaAlterStatusRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// TODO: currently, we query using the table name on the client side. this
comment|// may overlap with other table operations or the table operation may
comment|// have completed before querying this API. We need to refactor to a
comment|// transaction system in the future to avoid these ambiguities.
name|TableName
name|tableName
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|pair
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getReopenStatus
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetSchemaAlterStatusResponse
operator|.
name|Builder
name|ret
init|=
name|GetSchemaAlterStatusResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setYetToUpdateRegions
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTotalRegions
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get list of TableDescriptors for requested tables.    * @param c Unused (set to null).    * @param req GetTableDescriptorsRequest that contains:    * - tableNames: requested tables, or if empty, all are requested    * @return GetTableDescriptorsResponse    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|GetTableDescriptorsResponse
name|getTableDescriptors
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|GetTableDescriptorsRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
specifier|final
name|String
name|regex
init|=
name|req
operator|.
name|hasRegex
argument_list|()
condition|?
name|req
operator|.
name|getRegex
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|String
name|namespace
init|=
name|req
operator|.
name|hasNamespace
argument_list|()
condition|?
name|req
operator|.
name|getNamespace
argument_list|()
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNameList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getTableNamesCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tableNameList
operator|=
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|(
name|req
operator|.
name|getTableNamesCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|TableName
name|tableNamePB
range|:
name|req
operator|.
name|getTableNamesList
argument_list|()
control|)
block|{
name|tableNameList
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|tableNamePB
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|descriptors
init|=
name|master
operator|.
name|listTableDescriptors
argument_list|(
name|namespace
argument_list|,
name|regex
argument_list|,
name|tableNameList
argument_list|,
name|req
operator|.
name|getIncludeSysTables
argument_list|()
argument_list|)
decl_stmt|;
name|GetTableDescriptorsResponse
operator|.
name|Builder
name|builder
init|=
name|GetTableDescriptorsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptors
operator|!=
literal|null
operator|&&
name|descriptors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Add the table descriptors to the response
for|for
control|(
name|TableDescriptor
name|htd
range|:
name|descriptors
control|)
block|{
name|builder
operator|.
name|addTableSchema
argument_list|(
name|ProtobufUtil
operator|.
name|toTableSchema
argument_list|(
name|htd
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get list of userspace table names    * @param controller Unused (set to null).    * @param req GetTableNamesRequest    * @return GetTableNamesResponse    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|GetTableNamesResponse
name|getTableNames
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetTableNamesRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
specifier|final
name|String
name|regex
init|=
name|req
operator|.
name|hasRegex
argument_list|()
condition|?
name|req
operator|.
name|getRegex
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|String
name|namespace
init|=
name|req
operator|.
name|hasNamespace
argument_list|()
condition|?
name|req
operator|.
name|getNamespace
argument_list|()
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
init|=
name|master
operator|.
name|listTableNames
argument_list|(
name|namespace
argument_list|,
name|regex
argument_list|,
name|req
operator|.
name|getIncludeSysTables
argument_list|()
argument_list|)
decl_stmt|;
name|GetTableNamesResponse
operator|.
name|Builder
name|builder
init|=
name|GetTableNamesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableNames
operator|!=
literal|null
operator|&&
name|tableNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Add the table names to the response
for|for
control|(
name|TableName
name|table
range|:
name|tableNames
control|)
block|{
name|builder
operator|.
name|addTableNames
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetTableStateResponse
name|getTableState
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetTableStateRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
name|TableName
name|tableName
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|TableState
name|ts
init|=
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|getTableState
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetTableStateResponse
operator|.
name|Builder
name|builder
init|=
name|GetTableStateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTableState
argument_list|(
name|ts
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|IsCatalogJanitorEnabledResponse
name|isCatalogJanitorEnabled
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|IsCatalogJanitorEnabledRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|IsCatalogJanitorEnabledResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|master
operator|.
name|isCatalogJanitorEnabled
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsCleanerChoreEnabledResponse
name|isCleanerChoreEnabled
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|IsCleanerChoreEnabledRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|IsCleanerChoreEnabledResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|master
operator|.
name|isCleanerChoreEnabled
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsMasterRunningResponse
name|isMasterRunning
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|IsMasterRunningRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
return|return
name|IsMasterRunningResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setIsMasterRunning
argument_list|(
operator|!
name|master
operator|.
name|isStopped
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks if the specified procedure is done.    * @return true if the procedure is done, false if the procedure is in the process of completing    * @throws ServiceException if invalid procedure or failed procedure with progress failure reason.    */
annotation|@
name|Override
specifier|public
name|IsProcedureDoneResponse
name|isProcedureDone
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsProcedureDoneRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|ProcedureDescription
name|desc
init|=
name|request
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|MasterProcedureManager
name|mpm
init|=
name|master
operator|.
name|getMasterProcedureManagerHost
argument_list|()
operator|.
name|getProcedureManager
argument_list|(
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"The procedure is not registered: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking to see if procedure from request:"
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
operator|+
literal|" is done"
argument_list|)
expr_stmt|;
name|IsProcedureDoneResponse
operator|.
name|Builder
name|builder
init|=
name|IsProcedureDoneResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
name|mpm
operator|.
name|isProcedureDone
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDone
argument_list|(
name|done
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks if the specified snapshot is done.    * @return true if the snapshot is in file system ready to use,    *   false if the snapshot is in the process of completing    * @throws ServiceException wrapping UnknownSnapshotException if invalid snapshot, or    *  a wrapped HBaseSnapshotException with progress failure reason.    */
annotation|@
name|Override
specifier|public
name|IsSnapshotDoneResponse
name|isSnapshotDone
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsSnapshotDoneRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking to see if snapshot from request:"
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
operator|+
literal|" is done"
argument_list|)
expr_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|IsSnapshotDoneResponse
operator|.
name|Builder
name|builder
init|=
name|IsSnapshotDoneResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
name|master
operator|.
name|snapshotManager
operator|.
name|isSnapshotDone
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDone
argument_list|(
name|done
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetProcedureResultResponse
name|getProcedureResult
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetProcedureResultRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking to see if procedure is done pid="
operator|+
name|request
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|GetProcedureResultResponse
operator|.
name|Builder
name|builder
init|=
name|GetProcedureResultResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|long
name|procId
init|=
name|request
operator|.
name|getProcId
argument_list|()
decl_stmt|;
name|ProcedureExecutor
argument_list|<
name|?
argument_list|>
name|executor
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|executor
operator|.
name|getResultOrProcedure
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSubmittedTime
argument_list|(
name|result
operator|.
name|getSubmittedTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLastUpdate
argument_list|(
name|result
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|executor
operator|.
name|isFinished
argument_list|(
name|procId
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setState
argument_list|(
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|IOException
name|exception
init|=
name|MasterProcedureUtil
operator|.
name|unwrapRemoteIOException
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setException
argument_list|(
name|ForeignExceptionUtil
operator|.
name|toProtoForeignException
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|resultData
init|=
name|result
operator|.
name|getResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultData
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|resultData
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|removeResult
argument_list|(
name|request
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setState
argument_list|(
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|setState
argument_list|(
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AbortProcedureResponse
name|abortProcedure
parameter_list|(
name|RpcController
name|rpcController
parameter_list|,
name|AbortProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|AbortProcedureResponse
operator|.
name|Builder
name|response
init|=
name|AbortProcedureResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|abortResult
init|=
name|master
operator|.
name|abortProcedure
argument_list|(
name|request
operator|.
name|getProcId
argument_list|()
argument_list|,
name|request
operator|.
name|getMayInterruptIfRunning
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setIsProcedureAborted
argument_list|(
name|abortResult
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ListNamespaceDescriptorsResponse
name|listNamespaceDescriptors
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|ListNamespaceDescriptorsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ListNamespaceDescriptorsResponse
operator|.
name|Builder
name|response
init|=
name|ListNamespaceDescriptorsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|NamespaceDescriptor
name|ns
range|:
name|master
operator|.
name|getNamespaces
argument_list|()
control|)
block|{
name|response
operator|.
name|addNamespaceDescriptor
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetProceduresResponse
name|getProcedures
parameter_list|(
name|RpcController
name|rpcController
parameter_list|,
name|GetProceduresRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
specifier|final
name|GetProceduresResponse
operator|.
name|Builder
name|response
init|=
name|GetProceduresResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|p
range|:
name|master
operator|.
name|getProcedures
argument_list|()
control|)
block|{
name|response
operator|.
name|addProcedure
argument_list|(
name|ProcedureUtil
operator|.
name|convertToProtoProcedure
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetLocksResponse
name|getLocks
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetLocksRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
specifier|final
name|GetLocksResponse
operator|.
name|Builder
name|builder
init|=
name|GetLocksResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|LockedResource
name|lockedResource
range|:
name|master
operator|.
name|getLocks
argument_list|()
control|)
block|{
name|builder
operator|.
name|addLock
argument_list|(
name|ProcedureUtil
operator|.
name|convertToProtoLockedResource
argument_list|(
name|lockedResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ListTableDescriptorsByNamespaceResponse
name|listTableDescriptorsByNamespace
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|ListTableDescriptorsByNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ListTableDescriptorsByNamespaceResponse
operator|.
name|Builder
name|b
init|=
name|ListTableDescriptorsByNamespaceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|TableDescriptor
name|htd
range|:
name|master
operator|.
name|listTableDescriptorsByNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
control|)
block|{
name|b
operator|.
name|addTableSchema
argument_list|(
name|ProtobufUtil
operator|.
name|toTableSchema
argument_list|(
name|htd
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ListTableNamesByNamespaceResponse
name|listTableNamesByNamespace
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|ListTableNamesByNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ListTableNamesByNamespaceResponse
operator|.
name|Builder
name|b
init|=
name|ListTableNamesByNamespaceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|master
operator|.
name|listTableNamesByNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
control|)
block|{
name|b
operator|.
name|addTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ModifyColumnResponse
name|modifyColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ModifyColumnRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|modifyColumn
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|ProtobufUtil
operator|.
name|toColumnFamilyDescriptor
argument_list|(
name|req
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|==
operator|-
literal|1
condition|)
block|{
comment|// This mean operation was not performed in server, so do not set any procId
return|return
name|ModifyColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ModifyColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ModifyNamespaceResponse
name|modifyNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ModifyNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|modifyNamespace
argument_list|(
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|request
operator|.
name|getNamespaceDescriptor
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ModifyNamespaceResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ModifyTableResponse
name|modifyTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ModifyTableRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|modifyTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|ProtobufUtil
operator|.
name|toTableDescriptor
argument_list|(
name|req
operator|.
name|getTableSchema
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ModifyTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MoveRegionResponse
name|moveRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MoveRegionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|encodedRegionName
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|destServerName
init|=
operator|(
name|req
operator|.
name|hasDestServerName
argument_list|()
operator|)
condition|?
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|req
operator|.
name|getDestServerName
argument_list|()
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|MoveRegionResponse
name|mrr
init|=
name|MoveRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"moveRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|master
operator|.
name|move
argument_list|(
name|encodedRegionName
argument_list|,
name|destServerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|mrr
return|;
block|}
comment|/**    * Offline specified region from master's in-memory state. It will not attempt to    * reassign the region as in unassign.    *    * This is a special method that should be used by experts or hbck.    *    */
annotation|@
name|Override
specifier|public
name|OfflineRegionResponse
name|offlineRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|OfflineRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
specifier|final
name|RegionSpecifierType
name|type
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"moveRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|regionName
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|RegionInfo
name|hri
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|hri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preRegionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" offline "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|offlineRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postRegionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|OfflineRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Execute Restore/Clone snapshot operation.    *    *<p>If the specified table exists a "Restore" is executed, replacing the table    * schema and directory data with the content of the snapshot.    * The table must be disabled, or a UnsupportedOperationException will be thrown.    *    *<p>If the table doesn't exist a "Clone" is executed, a new table is created    * using the schema at the time of the snapshot, and the content of the snapshot.    *    *<p>The restore/clone operation does not require copying HFiles. Since HFiles    * are immutable the table can point to and use the same files as the original one.    */
annotation|@
name|Override
specifier|public
name|RestoreSnapshotResponse
name|restoreSnapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RestoreSnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|restoreSnapshot
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|,
name|request
operator|.
name|getRestoreACL
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|RestoreSnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SetSnapshotCleanupResponse
name|switchSnapshotCleanup
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetSnapshotCleanupRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|enabled
init|=
name|request
operator|.
name|getEnabled
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isSynchronous
init|=
name|request
operator|.
name|hasSynchronous
argument_list|()
operator|&&
name|request
operator|.
name|getSynchronous
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|prevSnapshotCleanupRunning
init|=
name|this
operator|.
name|switchSnapshotCleanup
argument_list|(
name|enabled
argument_list|,
name|isSynchronous
argument_list|)
decl_stmt|;
return|return
name|SetSnapshotCleanupResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevSnapshotCleanup
argument_list|(
name|prevSnapshotCleanupRunning
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|IsSnapshotCleanupEnabledResponse
name|isSnapshotCleanupEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsSnapshotCleanupEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|isSnapshotCleanupEnabled
init|=
name|master
operator|.
name|snapshotCleanupTracker
operator|.
name|isSnapshotCleanupEnabled
argument_list|()
decl_stmt|;
return|return
name|IsSnapshotCleanupEnabledResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|isSnapshotCleanupEnabled
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Turn on/off snapshot auto-cleanup based on TTL    *    * @param enabledNewVal Set to<code>true</code> to enable,<code>false</code> to disable    * @param synchronous If<code>true</code>, it waits until current snapshot cleanup is completed,    *   if outstanding    * @return previous snapshot auto-cleanup mode    */
specifier|private
specifier|synchronized
name|boolean
name|switchSnapshotCleanup
parameter_list|(
specifier|final
name|boolean
name|enabledNewVal
parameter_list|,
specifier|final
name|boolean
name|synchronous
parameter_list|)
block|{
specifier|final
name|boolean
name|oldValue
init|=
name|master
operator|.
name|snapshotCleanupTracker
operator|.
name|isSnapshotCleanupEnabled
argument_list|()
decl_stmt|;
name|master
operator|.
name|switchSnapshotCleanup
argument_list|(
name|enabledNewVal
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} Successfully set snapshot cleanup to {}"
argument_list|,
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|,
name|enabledNewVal
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|RunCatalogScanResponse
name|runCatalogScan
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|RunCatalogScanRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|rpcPreCheck
argument_list|(
literal|"runCatalogScan"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|ResponseConverter
operator|.
name|buildRunCatalogScanResponse
argument_list|(
name|this
operator|.
name|master
operator|.
name|catalogJanitorChore
operator|.
name|scan
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RunCleanerChoreResponse
name|runCleanerChore
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|RunCleanerChoreRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|rpcPreCheck
argument_list|(
literal|"runCleanerChore"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|master
operator|.
name|getHFileCleaner
argument_list|()
operator|.
name|runCleaner
argument_list|()
operator|&&
name|master
operator|.
name|getLogCleaner
argument_list|()
operator|.
name|runCleaner
argument_list|()
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|buildRunCleanerChoreResponse
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SetBalancerRunningResponse
name|setBalancerRunning
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|SetBalancerRunningRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|boolean
name|prevValue
init|=
operator|(
name|req
operator|.
name|getSynchronous
argument_list|()
operator|)
condition|?
name|synchronousBalanceSwitch
argument_list|(
name|req
operator|.
name|getOn
argument_list|()
argument_list|)
else|:
name|master
operator|.
name|balanceSwitch
argument_list|(
name|req
operator|.
name|getOn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|SetBalancerRunningResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevBalanceValue
argument_list|(
name|prevValue
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ShutdownResponse
name|shutdown
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ShutdownRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" shutdown"
argument_list|)
expr_stmt|;
try|try
block|{
name|master
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception occurred in HMaster.shutdown()"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ShutdownResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Triggers an asynchronous attempt to take a snapshot.    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|SnapshotResponse
name|snapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|master
operator|.
name|snapshotManager
operator|.
name|checkSnapshotSupport
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" snapshot request for:"
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the snapshot information
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescriptionUtils
operator|.
name|validate
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|master
operator|.
name|snapshotManager
operator|.
name|takeSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
comment|// send back the max amount of time the client should wait for the snapshot to complete
name|long
name|waitTime
init|=
name|SnapshotDescriptionUtils
operator|.
name|getMaxMasterTimeout
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|snapshot
operator|.
name|getType
argument_list|()
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|DEFAULT_MAX_WAIT_TIME
argument_list|)
decl_stmt|;
return|return
name|SnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExpectedTimeout
argument_list|(
name|waitTime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|StopMasterResponse
name|stopMaster
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|StopMasterRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" stop"
argument_list|)
expr_stmt|;
try|try
block|{
name|master
operator|.
name|stopMaster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception occurred while stopping master"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|StopMasterResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsInMaintenanceModeResponse
name|isMasterInMaintenanceMode
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|IsInMaintenanceModeRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|IsInMaintenanceModeResponse
operator|.
name|Builder
name|response
init|=
name|IsInMaintenanceModeResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setInMaintenanceMode
argument_list|(
name|master
operator|.
name|isInMaintenanceMode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnassignRegionResponse
name|unassignRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|UnassignRegionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
specifier|final
name|byte
index|[]
name|regionName
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|force
init|=
name|req
operator|.
name|getForce
argument_list|()
decl_stmt|;
name|UnassignRegionResponse
name|urr
init|=
name|UnassignRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unassignRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|regionName
argument_list|)
condition|)
block|{
name|pair
operator|=
operator|new
name|Pair
argument_list|<>
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|MetaTableLocator
operator|.
name|getMetaRegionLocation
argument_list|(
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
name|RegionInfo
name|hri
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preUnassign
argument_list|(
name|hri
argument_list|,
name|force
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" unassign "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" in current location if it is online and reassign.force="
operator|+
name|force
argument_list|)
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postUnassign
argument_list|(
name|hri
argument_list|,
name|force
argument_list|)
expr_stmt|;
block|}
return|return
name|urr
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ReportRegionStateTransitionResponse
name|reportRegionStateTransition
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|ReportRegionStateTransitionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
return|return
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|reportRegionStateTransition
argument_list|(
name|req
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SetQuotaResponse
name|setQuota
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|SetQuotaRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|setQuota
argument_list|(
name|req
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MajorCompactionTimestampResponse
name|getLastMajorCompactionTimestamp
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MajorCompactionTimestampRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|MajorCompactionTimestampResponse
operator|.
name|Builder
name|response
init|=
name|MajorCompactionTimestampResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|response
operator|.
name|setCompactionTimestamp
argument_list|(
name|master
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MajorCompactionTimestampResponse
name|getLastMajorCompactionTimestampForRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MajorCompactionTimestampForRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|MajorCompactionTimestampResponse
operator|.
name|Builder
name|response
init|=
name|MajorCompactionTimestampResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|response
operator|.
name|setCompactionTimestamp
argument_list|(
name|master
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Compact a region on the master.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|CompactRegionResponse
name|compactRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CompactRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|byte
index|[]
name|regionName
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|RegionInfo
operator|.
name|getTable
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
comment|// if the region is a mob region, do the mob file compaction.
if|if
condition|(
name|MobUtils
operator|.
name|isMobRegionName
argument_list|(
name|tableName
argument_list|,
name|regionName
argument_list|)
condition|)
block|{
name|checkHFileFormatVersionForMob
argument_list|()
expr_stmt|;
return|return
name|compactMob
argument_list|(
name|request
argument_list|,
name|tableName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|compactRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * check configured hfile format version before to do compaction    * @throws IOException throw IOException    */
specifier|private
name|void
name|checkHFileFormatVersionForMob
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|HFile
operator|.
name|getFormatVersion
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|<
name|HFile
operator|.
name|MIN_FORMAT_VERSION_WITH_TAGS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A minimum HFile version of "
operator|+
name|HFile
operator|.
name|MIN_FORMAT_VERSION_WITH_TAGS
operator|+
literal|" is required for MOB compaction. Compaction will not run."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"A minimum HFile version of "
operator|+
name|HFile
operator|.
name|MIN_FORMAT_VERSION_WITH_TAGS
operator|+
literal|" is required for MOB feature. Consider setting "
operator|+
name|HFile
operator|.
name|FORMAT_VERSION_KEY
operator|+
literal|" accordingly."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|GetRegionInfoResponse
name|getRegionInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetRegionInfoRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|byte
index|[]
name|regionName
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|RegionInfo
operator|.
name|getTable
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|MobUtils
operator|.
name|isMobRegionName
argument_list|(
name|tableName
argument_list|,
name|regionName
argument_list|)
condition|)
block|{
comment|// a dummy region info contains the compaction state.
name|RegionInfo
name|mobRegionInfo
init|=
name|MobUtils
operator|.
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetRegionInfoResponse
operator|.
name|Builder
name|builder
init|=
name|GetRegionInfoResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegionInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|mobRegionInfo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCompactionState
argument_list|()
operator|&&
name|request
operator|.
name|getCompactionState
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCompactionState
argument_list|(
name|master
operator|.
name|getMobCompactionState
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getRegionInfo
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
comment|/**    * Compacts the mob files in the current table.    * @param request the request.    * @param tableName the current table name.    * @return The response of the mob file compaction.    * @throws IOException    */
specifier|private
name|CompactRegionResponse
name|compactMob
parameter_list|(
specifier|final
name|CompactRegionRequest
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" is not enabled"
argument_list|)
throw|;
block|}
name|boolean
name|allFiles
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|compactedColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ColumnFamilyDescriptor
index|[]
name|hcds
init|=
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|family
operator|=
name|request
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|hcds
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|family
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hcd
operator|.
name|isMobEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" is not a mob column family"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" is not a mob column family"
argument_list|)
throw|;
block|}
name|compactedColumns
operator|.
name|add
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|hcds
control|)
block|{
if|if
condition|(
name|hcd
operator|.
name|isMobEnabled
argument_list|()
condition|)
block|{
name|compactedColumns
operator|.
name|add
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|compactedColumns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No mob column families are assigned in the mob compaction"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"No mob column families are assigned in the mob compaction"
argument_list|)
throw|;
block|}
if|if
condition|(
name|request
operator|.
name|hasMajor
argument_list|()
operator|&&
name|request
operator|.
name|getMajor
argument_list|()
condition|)
block|{
name|allFiles
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|familyLogMsg
init|=
operator|(
name|family
operator|!=
literal|null
operator|)
condition|?
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"User-triggered mob compaction requested for table: "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" for column family: "
operator|+
name|familyLogMsg
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|requestMobCompaction
argument_list|(
name|tableName
argument_list|,
name|compactedColumns
argument_list|,
name|allFiles
argument_list|)
expr_stmt|;
return|return
name|CompactRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsBalancerEnabledResponse
name|isBalancerEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsBalancerEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|IsBalancerEnabledResponse
operator|.
name|Builder
name|response
init|=
name|IsBalancerEnabledResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEnabled
argument_list|(
name|master
operator|.
name|isBalancerOn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SetSplitOrMergeEnabledResponse
name|setSplitOrMergeEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetSplitOrMergeEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|SetSplitOrMergeEnabledResponse
operator|.
name|Builder
name|response
init|=
name|SetSplitOrMergeEnabledResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|boolean
name|newValue
init|=
name|request
operator|.
name|getEnabled
argument_list|()
decl_stmt|;
for|for
control|(
name|MasterProtos
operator|.
name|MasterSwitchType
name|masterSwitchType
range|:
name|request
operator|.
name|getSwitchTypesList
argument_list|()
control|)
block|{
name|MasterSwitchType
name|switchType
init|=
name|convert
argument_list|(
name|masterSwitchType
argument_list|)
decl_stmt|;
name|boolean
name|oldValue
init|=
name|master
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|switchType
argument_list|)
decl_stmt|;
name|response
operator|.
name|addPrevValue
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preSetSplitOrMergeEnabled
argument_list|(
name|newValue
argument_list|,
name|switchType
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|getSplitOrMergeTracker
argument_list|()
operator|.
name|setSplitOrMergeEnabled
argument_list|(
name|newValue
argument_list|,
name|switchType
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postSetSplitOrMergeEnabled
argument_list|(
name|newValue
argument_list|,
name|switchType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsSplitOrMergeEnabledResponse
name|isSplitOrMergeEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsSplitOrMergeEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|IsSplitOrMergeEnabledResponse
operator|.
name|Builder
name|response
init|=
name|IsSplitOrMergeEnabledResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEnabled
argument_list|(
name|master
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getSwitchType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NormalizeResponse
name|normalize
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|NormalizeRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|rpcPreCheck
argument_list|(
literal|"normalize"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|NormalizeResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNormalizerRan
argument_list|(
name|master
operator|.
name|normalizeRegions
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SetNormalizerRunningResponse
name|setNormalizerRunning
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetNormalizerRunningRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|rpcPreCheck
argument_list|(
literal|"setNormalizerRunning"
argument_list|)
expr_stmt|;
comment|// Sets normalizer on/off flag in ZK.
name|boolean
name|prevValue
init|=
name|master
operator|.
name|getRegionNormalizerTracker
argument_list|()
operator|.
name|isNormalizerOn
argument_list|()
decl_stmt|;
name|boolean
name|newValue
init|=
name|request
operator|.
name|getOn
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|getRegionNormalizerTracker
argument_list|()
operator|.
name|setNormalizerOn
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error flipping normalizer switch"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{} set normalizerSwitch={}"
argument_list|,
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
return|return
name|SetNormalizerRunningResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevNormalizerValue
argument_list|(
name|prevValue
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsNormalizerEnabledResponse
name|isNormalizerEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsNormalizerEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|IsNormalizerEnabledResponse
operator|.
name|Builder
name|response
init|=
name|IsNormalizerEnabledResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEnabled
argument_list|(
name|master
operator|.
name|isNormalizerOn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns the security capabilities in effect on the cluster    */
annotation|@
name|Override
specifier|public
name|SecurityCapabilitiesResponse
name|getSecurityCapabilities
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SecurityCapabilitiesRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|SecurityCapabilitiesResponse
operator|.
name|Builder
name|response
init|=
name|SecurityCapabilitiesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|SecurityCapabilitiesResponse
operator|.
name|Capability
argument_list|>
name|capabilities
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Authentication
if|if
condition|(
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|SecurityCapabilitiesResponse
operator|.
name|Capability
operator|.
name|SECURE_AUTHENTICATION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|SecurityCapabilitiesResponse
operator|.
name|Capability
operator|.
name|SIMPLE_AUTHENTICATION
argument_list|)
expr_stmt|;
block|}
comment|// A coprocessor that implements AccessControlService can provide AUTHORIZATION and
comment|// CELL_AUTHORIZATION
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
operator|&&
name|hasAccessControlServiceCoprocessor
argument_list|(
name|master
operator|.
name|cpHost
argument_list|)
condition|)
block|{
if|if
condition|(
name|AccessChecker
operator|.
name|isAuthorizationSupported
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|SecurityCapabilitiesResponse
operator|.
name|Capability
operator|.
name|AUTHORIZATION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|AccessController
operator|.
name|isCellAuthorizationSupported
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|SecurityCapabilitiesResponse
operator|.
name|Capability
operator|.
name|CELL_AUTHORIZATION
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A coprocessor that implements VisibilityLabelsService can provide CELL_VISIBILITY.
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
operator|&&
name|hasVisibilityLabelsServiceCoprocessor
argument_list|(
name|master
operator|.
name|cpHost
argument_list|)
condition|)
block|{
if|if
condition|(
name|VisibilityController
operator|.
name|isCellAuthorizationSupported
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|SecurityCapabilitiesResponse
operator|.
name|Capability
operator|.
name|CELL_VISIBILITY
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|addAllCapabilities
argument_list|(
name|capabilities
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Determines if there is a MasterCoprocessor deployed which implements    * {@link org.apache.hadoop.hbase.protobuf.generated.AccessControlProtos.AccessControlService.Interface}.    */
name|boolean
name|hasAccessControlServiceCoprocessor
parameter_list|(
name|MasterCoprocessorHost
name|cpHost
parameter_list|)
block|{
return|return
name|checkCoprocessorWithService
argument_list|(
name|cpHost
operator|.
name|findCoprocessors
argument_list|(
name|MasterCoprocessor
operator|.
name|class
argument_list|)
argument_list|,
name|AccessControlService
operator|.
name|Interface
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Determines if there is a MasterCoprocessor deployed which implements    * {@link org.apache.hadoop.hbase.protobuf.generated.VisibilityLabelsProtos.VisibilityLabelsService.Interface}.    */
name|boolean
name|hasVisibilityLabelsServiceCoprocessor
parameter_list|(
name|MasterCoprocessorHost
name|cpHost
parameter_list|)
block|{
return|return
name|checkCoprocessorWithService
argument_list|(
name|cpHost
operator|.
name|findCoprocessors
argument_list|(
name|MasterCoprocessor
operator|.
name|class
argument_list|)
argument_list|,
name|VisibilityLabelsService
operator|.
name|Interface
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Determines if there is a coprocessor implementation in the provided argument which extends    * or implements the provided {@code service}.    */
name|boolean
name|checkCoprocessorWithService
parameter_list|(
name|List
argument_list|<
name|MasterCoprocessor
argument_list|>
name|coprocessorsToCheck
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|service
parameter_list|)
block|{
if|if
condition|(
name|coprocessorsToCheck
operator|==
literal|null
operator|||
name|coprocessorsToCheck
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|MasterCoprocessor
name|cp
range|:
name|coprocessorsToCheck
control|)
block|{
if|if
condition|(
name|service
operator|.
name|isAssignableFrom
argument_list|(
name|cp
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|MasterSwitchType
name|convert
parameter_list|(
name|MasterProtos
operator|.
name|MasterSwitchType
name|switchType
parameter_list|)
block|{
switch|switch
condition|(
name|switchType
condition|)
block|{
case|case
name|SPLIT
case|:
return|return
name|MasterSwitchType
operator|.
name|SPLIT
return|;
case|case
name|MERGE
case|:
return|return
name|MasterSwitchType
operator|.
name|MERGE
return|;
default|default:
break|break;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|AddReplicationPeerResponse
name|addReplicationPeer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AddReplicationPeerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|addReplicationPeer
argument_list|(
name|request
operator|.
name|getPeerId
argument_list|()
argument_list|,
name|ReplicationPeerConfigUtil
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getPeerState
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|AddReplicationPeerResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RemoveReplicationPeerResponse
name|removeReplicationPeer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RemoveReplicationPeerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|removeReplicationPeer
argument_list|(
name|request
operator|.
name|getPeerId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|RemoveReplicationPeerResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EnableReplicationPeerResponse
name|enableReplicationPeer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|EnableReplicationPeerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|enableReplicationPeer
argument_list|(
name|request
operator|.
name|getPeerId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|EnableReplicationPeerResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DisableReplicationPeerResponse
name|disableReplicationPeer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DisableReplicationPeerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|disableReplicationPeer
argument_list|(
name|request
operator|.
name|getPeerId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|DisableReplicationPeerResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetReplicationPeerConfigResponse
name|getReplicationPeerConfig
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetReplicationPeerConfigRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|GetReplicationPeerConfigResponse
operator|.
name|Builder
name|response
init|=
name|GetReplicationPeerConfigResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|peerId
init|=
name|request
operator|.
name|getPeerId
argument_list|()
decl_stmt|;
name|ReplicationPeerConfig
name|peerConfig
init|=
name|master
operator|.
name|getReplicationPeerConfig
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|response
operator|.
name|setPeerId
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|response
operator|.
name|setPeerConfig
argument_list|(
name|ReplicationPeerConfigUtil
operator|.
name|convert
argument_list|(
name|peerConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpdateReplicationPeerConfigResponse
name|updateReplicationPeerConfig
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|UpdateReplicationPeerConfigRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|request
operator|.
name|getPeerId
argument_list|()
argument_list|,
name|ReplicationPeerConfigUtil
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|UpdateReplicationPeerConfigResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TransitReplicationPeerSyncReplicationStateResponse
name|transitReplicationPeerSyncReplicationState
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|TransitReplicationPeerSyncReplicationStateRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|request
operator|.
name|getPeerId
argument_list|()
argument_list|,
name|ReplicationPeerConfigUtil
operator|.
name|toSyncReplicationState
argument_list|(
name|request
operator|.
name|getSyncReplicationState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|TransitReplicationPeerSyncReplicationStateResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ListReplicationPeersResponse
name|listReplicationPeers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ListReplicationPeersRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ListReplicationPeersResponse
operator|.
name|Builder
name|response
init|=
name|ListReplicationPeersResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|peers
init|=
name|master
operator|.
name|listReplicationPeers
argument_list|(
name|request
operator|.
name|hasRegex
argument_list|()
condition|?
name|request
operator|.
name|getRegex
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ReplicationPeerDescription
name|peer
range|:
name|peers
control|)
block|{
name|response
operator|.
name|addPeerDesc
argument_list|(
name|ReplicationPeerConfigUtil
operator|.
name|toProtoReplicationPeerDescription
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ReplicationException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListDecommissionedRegionServersResponse
name|listDecommissionedRegionServers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ListDecommissionedRegionServersRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ListDecommissionedRegionServersResponse
operator|.
name|Builder
name|response
init|=
name|ListDecommissionedRegionServersResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preListDecommissionedRegionServers
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|master
operator|.
name|listDecommissionedRegionServers
argument_list|()
decl_stmt|;
name|response
operator|.
name|addAllServerName
argument_list|(
operator|(
name|servers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|server
lambda|->
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|server
argument_list|)
argument_list|)
operator|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postListDecommissionedRegionServers
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|io
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DecommissionRegionServersResponse
name|decommissionRegionServers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DecommissionRegionServersRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|request
operator|.
name|getServerNameList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pbServer
lambda|->
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|pbServer
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|offload
init|=
name|request
operator|.
name|getOffload
argument_list|()
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preDecommissionRegionServers
argument_list|(
name|servers
argument_list|,
name|offload
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|decommissionRegionServers
argument_list|(
name|servers
argument_list|,
name|offload
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postDecommissionRegionServers
argument_list|(
name|servers
argument_list|,
name|offload
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|io
argument_list|)
throw|;
block|}
return|return
name|DecommissionRegionServersResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecommissionRegionServerResponse
name|recommissionRegionServer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RecommissionRegionServerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|ServerName
name|server
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|request
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|encodedRegionNames
init|=
name|request
operator|.
name|getRegionList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|regionSpecifier
lambda|->
name|regionSpecifier
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preRecommissionRegionServer
argument_list|(
name|server
argument_list|,
name|encodedRegionNames
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|recommissionRegionServer
argument_list|(
name|server
argument_list|,
name|encodedRegionNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postRecommissionRegionServer
argument_list|(
name|server
argument_list|,
name|encodedRegionNames
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|io
argument_list|)
throw|;
block|}
return|return
name|RecommissionRegionServerResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|LockResponse
name|requestLock
parameter_list|(
name|RpcController
name|controller
parameter_list|,
specifier|final
name|LockRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
if|if
condition|(
name|request
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Empty description"
argument_list|)
throw|;
block|}
name|NonceProcedureRunnable
name|npr
decl_stmt|;
name|LockType
name|type
init|=
name|LockType
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getLockType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getRegionInfoCount
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|RegionInfo
index|[]
name|regionInfos
init|=
operator|new
name|RegionInfo
index|[
name|request
operator|.
name|getRegionInfoCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|getRegionInfoCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|regionInfos
index|[
name|i
index|]
operator|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|request
operator|.
name|getRegionInfo
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|npr
operator|=
operator|new
name|NonceProcedureRunnable
argument_list|(
name|master
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|setProcId
argument_list|(
name|master
operator|.
name|getLockManager
argument_list|()
operator|.
name|remoteLocks
argument_list|()
operator|.
name|requestRegionsLock
argument_list|(
name|regionInfos
argument_list|,
name|request
operator|.
name|getDescription
argument_list|()
argument_list|,
name|getNonceKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"RequestLock"
return|;
block|}
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|hasTableName
argument_list|()
condition|)
block|{
specifier|final
name|TableName
name|tableName
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|npr
operator|=
operator|new
name|NonceProcedureRunnable
argument_list|(
name|master
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|setProcId
argument_list|(
name|master
operator|.
name|getLockManager
argument_list|()
operator|.
name|remoteLocks
argument_list|()
operator|.
name|requestTableLock
argument_list|(
name|tableName
argument_list|,
name|type
argument_list|,
name|request
operator|.
name|getDescription
argument_list|()
argument_list|,
name|getNonceKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"RequestLock"
return|;
block|}
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|hasNamespace
argument_list|()
condition|)
block|{
name|npr
operator|=
operator|new
name|NonceProcedureRunnable
argument_list|(
name|master
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|setProcId
argument_list|(
name|master
operator|.
name|getLockManager
argument_list|()
operator|.
name|remoteLocks
argument_list|()
operator|.
name|requestNamespaceLock
argument_list|(
name|request
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|type
argument_list|,
name|request
operator|.
name|getDescription
argument_list|()
argument_list|,
name|getNonceKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"RequestLock"
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"one of table/namespace/region should be specified"
argument_list|)
throw|;
block|}
name|long
name|procId
init|=
name|MasterProcedureUtil
operator|.
name|submitProcedure
argument_list|(
name|npr
argument_list|)
decl_stmt|;
return|return
name|LockResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when queuing lock"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when queuing lock"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return LOCKED, if procedure is found and it has the lock; else UNLOCKED.    * @throws ServiceException if given proc id is found but it is not a LockProcedure.    */
annotation|@
name|Override
specifier|public
name|LockHeartbeatResponse
name|lockHeartbeat
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|LockHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getLockManager
argument_list|()
operator|.
name|remoteLocks
argument_list|()
operator|.
name|lockHeartbeat
argument_list|(
name|request
operator|.
name|getProcId
argument_list|()
argument_list|,
name|request
operator|.
name|getKeepAlive
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|LockHeartbeatResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTimeoutMs
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|LockProcedure
operator|.
name|REMOTE_LOCKS_TIMEOUT_MS_CONF
argument_list|,
name|LockProcedure
operator|.
name|DEFAULT_REMOTE_LOCKS_TIMEOUT_MS
argument_list|)
argument_list|)
operator|.
name|setLockStatus
argument_list|(
name|LockHeartbeatResponse
operator|.
name|LockStatus
operator|.
name|LOCKED
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|LockHeartbeatResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLockStatus
argument_list|(
name|LockHeartbeatResponse
operator|.
name|LockStatus
operator|.
name|UNLOCKED
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RegionSpaceUseReportResponse
name|reportRegionSpaceUse
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RegionSpaceUseReportRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QuotaUtil
operator|.
name|isQuotaEnabled
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|RegionSpaceUseReportResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
name|MasterQuotaManager
name|quotaManager
init|=
name|this
operator|.
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|quotaManager
operator|!=
literal|null
condition|)
block|{
specifier|final
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionSpaceUse
name|report
range|:
name|request
operator|.
name|getSpaceUseList
argument_list|()
control|)
block|{
name|quotaManager
operator|.
name|addRegionSize
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|report
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|,
name|report
operator|.
name|getRegionSize
argument_list|()
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received region space usage report but HMaster is not ready to process it, skipping"
argument_list|)
expr_stmt|;
block|}
return|return
name|RegionSpaceUseReportResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetSpaceQuotaRegionSizesResponse
name|getSpaceQuotaRegionSizes
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetSpaceQuotaRegionSizesRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|MasterQuotaManager
name|quotaManager
init|=
name|this
operator|.
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
decl_stmt|;
name|GetSpaceQuotaRegionSizesResponse
operator|.
name|Builder
name|builder
init|=
name|GetSpaceQuotaRegionSizesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|quotaManager
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|regionSizes
init|=
name|quotaManager
operator|.
name|snapshotRegionSizes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|regionSizesByTable
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Translate hregioninfo+long -> tablename+long
for|for
control|(
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|regionSizes
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|TableName
name|tableName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Long
name|prevSize
init|=
name|regionSizesByTable
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevSize
operator|==
literal|null
condition|)
block|{
name|prevSize
operator|=
literal|0L
expr_stmt|;
block|}
name|regionSizesByTable
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|prevSize
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Serialize them into the protobuf
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|tableSize
range|:
name|regionSizesByTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|addSizes
argument_list|(
name|RegionSizes
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableSize
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSize
argument_list|(
name|tableSize
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received space quota region size report but HMaster is not ready to process it, skipping"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetQuotaStatesResponse
name|getQuotaStates
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetQuotaStatesRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|QuotaObserverChore
name|quotaChore
init|=
name|this
operator|.
name|master
operator|.
name|getQuotaObserverChore
argument_list|()
decl_stmt|;
name|GetQuotaStatesResponse
operator|.
name|Builder
name|builder
init|=
name|GetQuotaStatesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|quotaChore
operator|!=
literal|null
condition|)
block|{
comment|// The "current" view of all tables with quotas
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|tableSnapshots
init|=
name|quotaChore
operator|.
name|getTableQuotaSnapshots
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|entry
range|:
name|tableSnapshots
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|addTableSnapshots
argument_list|(
name|TableQuotaSnapshot
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSnapshot
argument_list|(
name|SpaceQuotaSnapshot
operator|.
name|toProtoSnapshot
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The "current" view of all namespaces with quotas
name|Map
argument_list|<
name|String
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|nsSnapshots
init|=
name|quotaChore
operator|.
name|getNamespaceQuotaSnapshots
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|entry
range|:
name|nsSnapshots
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|addNsSnapshots
argument_list|(
name|NamespaceQuotaSnapshot
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setSnapshot
argument_list|(
name|SpaceQuotaSnapshot
operator|.
name|toProtoSnapshot
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClearDeadServersResponse
name|clearDeadServers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ClearDeadServersRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" clear dead region servers."
argument_list|)
expr_stmt|;
name|ClearDeadServersResponse
operator|.
name|Builder
name|response
init|=
name|ClearDeadServersResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preClearDeadServers
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Some dead server is still under processing, won't clear the dead server list"
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAllServerName
argument_list|(
name|request
operator|.
name|getServerNameList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|pbServer
range|:
name|request
operator|.
name|getServerNameList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|removeDeadServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|pbServer
argument_list|)
argument_list|)
condition|)
block|{
name|response
operator|.
name|addServerName
argument_list|(
name|pbServer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postClearDeadServers
argument_list|(
name|ProtobufUtil
operator|.
name|toServerNameList
argument_list|(
name|request
operator|.
name|getServerNameList
argument_list|()
argument_list|)
argument_list|,
name|ProtobufUtil
operator|.
name|toServerNameList
argument_list|(
name|response
operator|.
name|getServerNameList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|io
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReportProcedureDoneResponse
name|reportProcedureDone
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ReportProcedureDoneRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|request
operator|.
name|getResultList
argument_list|()
operator|.
name|forEach
argument_list|(
name|result
lambda|->
block|{
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|==
name|RemoteProcedureResult
operator|.
name|Status
operator|.
name|SUCCESS
condition|)
block|{
name|master
operator|.
name|remoteProcedureCompleted
argument_list|(
name|result
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|master
operator|.
name|remoteProcedureFailed
argument_list|(
name|result
operator|.
name|getProcId
argument_list|()
argument_list|,
name|RemoteProcedureException
operator|.
name|fromProto
argument_list|(
name|result
operator|.
name|getError
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|ReportProcedureDoneResponse
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileArchiveNotificationResponse
name|reportFileArchival
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|FileArchiveNotificationRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QuotaUtil
operator|.
name|isQuotaEnabled
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|FileArchiveNotificationResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|processFileArchivals
argument_list|(
name|request
argument_list|,
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|master
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|FileArchiveNotificationResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// HBCK Services
annotation|@
name|Override
specifier|public
name|RunHbckChoreResponse
name|runHbckChore
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|RunHbckChoreRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|rpcPreCheck
argument_list|(
literal|"runHbckChore"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} request HBCK chore to run"
argument_list|,
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|HbckChore
name|hbckChore
init|=
name|master
operator|.
name|getHbckChore
argument_list|()
decl_stmt|;
name|boolean
name|ran
init|=
name|hbckChore
operator|.
name|runChore
argument_list|()
decl_stmt|;
return|return
name|RunHbckChoreResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRan
argument_list|(
name|ran
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Update state of the table in meta only. This is required by hbck in some situations to cleanup    * stuck assign/ unassign regions procedures for the table.    *    * @return previous state of the table    */
annotation|@
name|Override
specifier|public
name|GetTableStateResponse
name|setTableStateInMeta
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetTableStateInMetaRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|TableName
name|tn
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|TableState
name|prevState
init|=
name|this
operator|.
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|getTableState
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|TableState
name|newState
init|=
name|TableState
operator|.
name|convert
argument_list|(
name|tn
argument_list|,
name|request
operator|.
name|getTableState
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} set table={} state from {} to {}"
argument_list|,
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|,
name|tn
argument_list|,
name|prevState
operator|.
name|getState
argument_list|()
argument_list|,
name|newState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|setTableState
argument_list|(
name|tn
argument_list|,
name|newState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|GetTableStateResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableState
argument_list|(
name|prevState
operator|.
name|convert
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get RegionInfo from Master using content of RegionSpecifier as key.    * @return RegionInfo found by decoding<code>rs</code> or null if none found    */
specifier|private
name|RegionInfo
name|getRegionInfo
parameter_list|(
name|HBaseProtos
operator|.
name|RegionSpecifier
name|rs
parameter_list|)
throws|throws
name|UnknownRegionException
block|{
name|RegionInfo
name|ri
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|rs
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|REGION_NAME
case|:
specifier|final
name|byte
index|[]
name|regionName
init|=
name|rs
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ri
operator|=
name|this
operator|.
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENCODED_REGION_NAME
case|:
name|String
name|encodedRegionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|rs
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|RegionState
name|regionState
init|=
name|this
operator|.
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
name|ri
operator|=
name|regionState
operator|==
literal|null
condition|?
name|this
operator|.
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|loadRegionFromMeta
argument_list|(
name|encodedRegionName
argument_list|)
else|:
name|regionState
operator|.
name|getRegion
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|ri
return|;
block|}
comment|/**    * A 'raw' version of assign that does bulk and skirts Master state checks (assigns can be made    * during Master startup). For use by Hbck2.    */
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|AssignsResponse
name|assigns
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|AssignsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
if|if
condition|(
name|this
operator|.
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Master's ProcedureExecutor not initialized; retry later"
argument_list|)
throw|;
block|}
name|MasterProtos
operator|.
name|AssignsResponse
operator|.
name|Builder
name|responseBuilder
init|=
name|MasterProtos
operator|.
name|AssignsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|override
init|=
name|request
operator|.
name|getOverride
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} assigns, override={}"
argument_list|,
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|,
name|override
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|RegionSpecifier
name|rs
range|:
name|request
operator|.
name|getRegionList
argument_list|()
control|)
block|{
name|RegionInfo
name|ri
init|=
name|getRegionInfo
argument_list|(
name|rs
argument_list|)
decl_stmt|;
if|if
condition|(
name|ri
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown={}"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|responseBuilder
operator|.
name|addPid
argument_list|(
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|responseBuilder
operator|.
name|addPid
argument_list|(
name|this
operator|.
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
name|this
operator|.
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|createOneAssignProcedure
argument_list|(
name|ri
argument_list|,
name|override
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * A 'raw' version of unassign that does bulk and skirts Master state checks (unassigns can be    * made during Master startup). For use by Hbck2.    */
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|UnassignsResponse
name|unassigns
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|UnassignsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
if|if
condition|(
name|this
operator|.
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Master's ProcedureExecutor not initialized; retry later"
argument_list|)
throw|;
block|}
name|MasterProtos
operator|.
name|UnassignsResponse
operator|.
name|Builder
name|responseBuilder
init|=
name|MasterProtos
operator|.
name|UnassignsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|override
init|=
name|request
operator|.
name|getOverride
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} unassigns, override={}"
argument_list|,
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|,
name|override
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|RegionSpecifier
name|rs
range|:
name|request
operator|.
name|getRegionList
argument_list|()
control|)
block|{
name|RegionInfo
name|ri
init|=
name|getRegionInfo
argument_list|(
name|rs
argument_list|)
decl_stmt|;
if|if
condition|(
name|ri
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown={}"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|responseBuilder
operator|.
name|addPid
argument_list|(
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|responseBuilder
operator|.
name|addPid
argument_list|(
name|this
operator|.
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
name|this
operator|.
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|createOneUnassignProcedure
argument_list|(
name|ri
argument_list|,
name|override
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Bypass specified procedure to completion. Procedure is marked completed but no actual work    * is done from the current state/ step onwards. Parents of the procedure are also marked for    * bypass.    *    * NOTE: this is a dangerous operation and may be used to unstuck buggy procedures. This may    * leave system in inconherent state. This may need to be followed by some cleanup steps/    * actions by operator.    *    * @return BypassProcedureToCompletionResponse indicating success or failure    */
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|BypassProcedureResponse
name|bypassProcedure
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|BypassProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} bypass procedures={}, waitTime={}, override={}, recursive={}"
argument_list|,
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|,
name|request
operator|.
name|getProcIdList
argument_list|()
argument_list|,
name|request
operator|.
name|getWaitTime
argument_list|()
argument_list|,
name|request
operator|.
name|getOverride
argument_list|()
argument_list|,
name|request
operator|.
name|getRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|ret
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|bypassProcedure
argument_list|(
name|request
operator|.
name|getProcIdList
argument_list|()
argument_list|,
name|request
operator|.
name|getWaitTime
argument_list|()
argument_list|,
name|request
operator|.
name|getOverride
argument_list|()
argument_list|,
name|request
operator|.
name|getRecursive
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MasterProtos
operator|.
name|BypassProcedureResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllBypassed
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ScheduleServerCrashProcedureResponse
name|scheduleServerCrashProcedure
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ScheduleServerCrashProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|pids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|sn
range|:
name|request
operator|.
name|getServerNameList
argument_list|()
control|)
block|{
name|ServerName
name|serverName
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} schedule ServerCrashProcedure for {}"
argument_list|,
name|this
operator|.
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldSubmitSCP
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|pids
operator|.
name|add
argument_list|(
name|this
operator|.
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|expireServer
argument_list|(
name|serverName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pids
operator|.
name|add
argument_list|(
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|MasterProtos
operator|.
name|ScheduleServerCrashProcedureResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllPid
argument_list|(
name|pids
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FixMetaResponse
name|fixMeta
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|FixMetaRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|MetaFixer
name|mf
init|=
operator|new
name|MetaFixer
argument_list|(
name|this
operator|.
name|master
argument_list|)
decl_stmt|;
name|mf
operator|.
name|fix
argument_list|()
expr_stmt|;
return|return
name|FixMetaResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SwitchRpcThrottleResponse
name|switchRpcThrottle
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SwitchRpcThrottleRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|switchRpcThrottle
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|IsRpcThrottleEnabledResponse
name|isRpcThrottleEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|IsRpcThrottleEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|isRpcThrottleEnabled
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SwitchExceedThrottleQuotaResponse
name|switchExceedThrottleQuota
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SwitchExceedThrottleQuotaRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|switchExceedThrottleQuota
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GrantResponse
name|grant
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GrantRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
operator|&&
name|hasAccessControlServiceCoprocessor
argument_list|(
name|master
operator|.
name|cpHost
argument_list|)
condition|)
block|{
specifier|final
name|UserPermission
name|perm
init|=
name|ShadedAccessControlUtil
operator|.
name|toUserPermission
argument_list|(
name|request
operator|.
name|getUserPermission
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|mergeExistingPermissions
init|=
name|request
operator|.
name|getMergeExistingPermissions
argument_list|()
decl_stmt|;
name|master
operator|.
name|cpHost
operator|.
name|preGrant
argument_list|(
name|perm
argument_list|,
name|mergeExistingPermissions
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|master
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|PermissionStorage
operator|.
name|addUserPermission
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|perm
argument_list|,
name|table
argument_list|,
name|mergeExistingPermissions
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|cpHost
operator|.
name|postGrant
argument_list|(
name|perm
argument_list|,
name|mergeExistingPermissions
argument_list|)
expr_stmt|;
name|User
name|caller
init|=
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// audit log should store permission changes in addition to auth results
name|String
name|remoteAddress
init|=
name|RpcServer
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|map
argument_list|(
name|InetAddress
operator|::
name|toString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"User {} (remote address: {}) granted permission {}"
argument_list|,
name|caller
argument_list|,
name|remoteAddress
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
return|return
name|GrantResponse
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" is not loaded"
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RevokeResponse
name|revoke
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RevokeRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
operator|&&
name|hasAccessControlServiceCoprocessor
argument_list|(
name|master
operator|.
name|cpHost
argument_list|)
condition|)
block|{
specifier|final
name|UserPermission
name|userPermission
init|=
name|ShadedAccessControlUtil
operator|.
name|toUserPermission
argument_list|(
name|request
operator|.
name|getUserPermission
argument_list|()
argument_list|)
decl_stmt|;
name|master
operator|.
name|cpHost
operator|.
name|preRevoke
argument_list|(
name|userPermission
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|master
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|PermissionStorage
operator|.
name|removeUserPermission
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|userPermission
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|cpHost
operator|.
name|postRevoke
argument_list|(
name|userPermission
argument_list|)
expr_stmt|;
name|User
name|caller
init|=
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// audit log should record all permission changes
name|String
name|remoteAddress
init|=
name|RpcServer
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|map
argument_list|(
name|InetAddress
operator|::
name|toString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"User {} (remote address: {}) revoked permission {}"
argument_list|,
name|caller
argument_list|,
name|remoteAddress
argument_list|,
name|userPermission
argument_list|)
expr_stmt|;
block|}
return|return
name|RevokeResponse
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" is not loaded"
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetUserPermissionsResponse
name|getUserPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetUserPermissionsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
operator|&&
name|hasAccessControlServiceCoprocessor
argument_list|(
name|master
operator|.
name|cpHost
argument_list|)
condition|)
block|{
specifier|final
name|String
name|userName
init|=
name|request
operator|.
name|hasUserName
argument_list|()
condition|?
name|request
operator|.
name|getUserName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|namespace
init|=
name|request
operator|.
name|hasNamespaceName
argument_list|()
condition|?
name|request
operator|.
name|getNamespaceName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
else|:
literal|null
decl_stmt|;
name|TableName
name|table
init|=
name|request
operator|.
name|hasTableName
argument_list|()
condition|?
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|request
operator|.
name|hasColumnFamily
argument_list|()
condition|?
name|request
operator|.
name|getColumnFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|byte
index|[]
name|cq
init|=
name|request
operator|.
name|hasColumnQualifier
argument_list|()
condition|?
name|request
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|Type
name|permissionType
init|=
name|request
operator|.
name|hasType
argument_list|()
condition|?
name|request
operator|.
name|getType
argument_list|()
else|:
literal|null
decl_stmt|;
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preGetUserPermissions
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|,
name|table
argument_list|,
name|cf
argument_list|,
name|cq
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|permissionType
operator|==
name|Type
operator|.
name|Table
condition|)
block|{
name|boolean
name|filter
init|=
operator|(
name|cf
operator|!=
literal|null
operator|||
name|userName
operator|!=
literal|null
operator|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|perms
operator|=
name|PermissionStorage
operator|.
name|getUserTablePermissions
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|,
name|cf
argument_list|,
name|cq
argument_list|,
name|userName
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|permissionType
operator|==
name|Type
operator|.
name|Namespace
condition|)
block|{
name|perms
operator|=
name|PermissionStorage
operator|.
name|getUserNamespacePermissions
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|namespace
argument_list|,
name|userName
argument_list|,
name|userName
operator|!=
literal|null
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|perms
operator|=
name|PermissionStorage
operator|.
name|getUserPermissions
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userName
argument_list|,
name|userName
operator|!=
literal|null
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
comment|// Skip super users when filter user is specified
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
comment|// Adding superusers explicitly to the result set as PermissionStorage do not store
comment|// them. Also using acl as table name to be inline with the results of global admin and
comment|// will help in avoiding any leakage of information about being superusers.
for|for
control|(
name|String
name|user
range|:
name|Superusers
operator|.
name|getSuperUsers
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|newBuilder
argument_list|()
operator|.
name|withActions
argument_list|(
name|Action
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postGetUserPermissions
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|,
name|table
argument_list|,
name|cf
argument_list|,
name|cq
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
name|ShadedAccessControlUtil
operator|.
name|buildGetUserPermissionsResponse
argument_list|(
name|perms
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" is not loaded"
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HasUserPermissionsResponse
name|hasUserPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|HasUserPermissionsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
operator|&&
name|hasAccessControlServiceCoprocessor
argument_list|(
name|master
operator|.
name|cpHost
argument_list|)
condition|)
block|{
name|User
name|caller
init|=
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|request
operator|.
name|hasUserName
argument_list|()
condition|?
name|request
operator|.
name|getUserName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
else|:
name|caller
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Permission
argument_list|>
name|permissions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|getPermissionCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|permissions
operator|.
name|add
argument_list|(
name|ShadedAccessControlUtil
operator|.
name|toPermission
argument_list|(
name|request
operator|.
name|getPermission
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preHasUserPermissions
argument_list|(
name|userName
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|caller
operator|.
name|getShortName
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|AccessChecker
operator|.
name|getUserGroups
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|caller
operator|=
operator|new
name|InputUser
argument_list|(
name|userName
argument_list|,
name|groups
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|groups
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Boolean
argument_list|>
name|hasUserPermissions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getAccessChecker
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
name|permission
range|:
name|permissions
control|)
block|{
name|boolean
name|hasUserPermission
init|=
name|getAccessChecker
argument_list|()
operator|.
name|hasUserPermission
argument_list|(
name|caller
argument_list|,
literal|"hasUserPermissions"
argument_list|,
name|permission
argument_list|)
decl_stmt|;
name|hasUserPermissions
operator|.
name|add
argument_list|(
name|hasUserPermission
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|permissions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|hasUserPermissions
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postHasUserPermissions
argument_list|(
name|userName
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
name|HasUserPermissionsResponse
operator|.
name|Builder
name|builder
init|=
name|HasUserPermissionsResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllHasUserPermission
argument_list|(
name|hasUserPermissions
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" is not loaded"
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|containMetaWals
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|master
operator|.
name|getWALRootDir
argument_list|()
argument_list|,
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|serverName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|splitDir
init|=
name|logDir
operator|.
name|suffix
argument_list|(
name|AbstractFSWALProvider
operator|.
name|SPLITTING_EXT
argument_list|)
decl_stmt|;
name|Path
name|checkDir
init|=
name|master
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|splitDir
argument_list|)
condition|?
name|splitDir
else|:
name|logDir
decl_stmt|;
try|try
block|{
return|return
name|master
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|checkDir
argument_list|,
name|META_FILTER
argument_list|)
operator|.
name|length
operator|>
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// If no files, then we don't contain metas; was failing schedule of
comment|// SCP because this was FNFE'ing when no server dirs ('Unknown Server').
name|LOG
operator|.
name|warn
argument_list|(
literal|"No dir for WALs for {}; continuing"
argument_list|,
name|serverName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|shouldSubmitSCP
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
comment|// check if there is already a SCP of this server running
name|List
argument_list|<
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
argument_list|>
name|procedures
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getProcedures
argument_list|()
decl_stmt|;
for|for
control|(
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procedure
range|:
name|procedures
control|)
block|{
if|if
condition|(
name|procedure
operator|instanceof
name|ServerCrashProcedure
condition|)
block|{
if|if
condition|(
name|serverName
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ServerCrashProcedure
operator|)
name|procedure
operator|)
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
operator|!
name|procedure
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"there is already a SCP of this server {} running, pid {}"
argument_list|,
name|serverName
argument_list|,
name|procedure
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

