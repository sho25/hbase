begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PleaseHoldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MasterSwitchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnknownProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PriorityFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|QosPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|BlockingServiceAndInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|MasterProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|RegionStoreSequenceIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameStringPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ProcedureDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SecurityCapabilitiesResponse
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|GetLastFlushedSequenceIdRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|GetLastFlushedSequenceIdResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStatusService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRSFatalErrorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRSFatalErrorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRegionStateTransitionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRegionStateTransitionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RSRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|ClientSnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Implements the master RPC services.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|MasterRpcServices
extends|extends
name|RSRpcServices
implements|implements
name|MasterService
operator|.
name|BlockingInterface
implements|,
name|RegionServerStatusService
operator|.
name|BlockingInterface
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MasterRpcServices
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HMaster
name|master
decl_stmt|;
comment|/**    * @return Subset of configuration to pass initializing regionservers: e.g.    * the filesystem to use and root directory to use.    */
specifier|private
name|RegionServerStartupResponse
operator|.
name|Builder
name|createConfigurationSubset
parameter_list|()
block|{
name|RegionServerStartupResponse
operator|.
name|Builder
name|resp
init|=
name|addConfig
argument_list|(
name|RegionServerStartupResponse
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
decl_stmt|;
name|resp
operator|=
name|addConfig
argument_list|(
name|resp
argument_list|,
literal|"fs.defaultFS"
argument_list|)
expr_stmt|;
return|return
name|addConfig
argument_list|(
name|resp
argument_list|,
literal|"hbase.master.info.port"
argument_list|)
return|;
block|}
specifier|private
name|RegionServerStartupResponse
operator|.
name|Builder
name|addConfig
parameter_list|(
specifier|final
name|RegionServerStartupResponse
operator|.
name|Builder
name|resp
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|NameStringPair
operator|.
name|Builder
name|entry
init|=
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|key
argument_list|)
operator|.
name|setValue
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|addMapEntries
argument_list|(
name|entry
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
specifier|public
name|MasterRpcServices
parameter_list|(
name|HMaster
name|m
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|master
operator|=
name|m
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|PriorityFunction
name|createPriority
parameter_list|()
block|{
return|return
operator|new
name|MasterAnnotationReadingPriorityFunction
argument_list|(
name|this
argument_list|)
return|;
block|}
enum|enum
name|BalanceSwitchMode
block|{
name|SYNC
block|,
name|ASYNC
block|}
comment|/**    * Assigns balancer switch according to BalanceSwitchMode    * @param b new balancer switch    * @param mode BalanceSwitchMode    * @return old balancer switch    */
name|boolean
name|switchBalancer
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|,
name|BalanceSwitchMode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|oldValue
init|=
name|master
operator|.
name|loadBalancerTracker
operator|.
name|isBalancerOn
argument_list|()
decl_stmt|;
name|boolean
name|newValue
init|=
name|b
decl_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|newValue
operator|=
name|master
operator|.
name|cpHost
operator|.
name|preBalanceSwitch
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|mode
operator|==
name|BalanceSwitchMode
operator|.
name|SYNC
condition|)
block|{
synchronized|synchronized
init|(
name|master
operator|.
name|getLoadBalancer
argument_list|()
init|)
block|{
name|master
operator|.
name|loadBalancerTracker
operator|.
name|setBalancerOn
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|master
operator|.
name|loadBalancerTracker
operator|.
name|setBalancerOn
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" set balanceSwitch="
operator|+
name|newValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postBalanceSwitch
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error flipping balance switch"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValue
return|;
block|}
name|boolean
name|synchronousBalanceSwitch
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|switchBalancer
argument_list|(
name|b
argument_list|,
name|BalanceSwitchMode
operator|.
name|SYNC
argument_list|)
return|;
block|}
comment|/**    * Sets normalizer on/off flag in ZK.    */
specifier|public
name|boolean
name|normalizerSwitch
parameter_list|(
name|boolean
name|on
parameter_list|)
block|{
name|boolean
name|oldValue
init|=
name|master
operator|.
name|getRegionNormalizerTracker
argument_list|()
operator|.
name|isNormalizerOn
argument_list|()
decl_stmt|;
name|boolean
name|newValue
init|=
name|on
decl_stmt|;
try|try
block|{
try|try
block|{
name|master
operator|.
name|getRegionNormalizerTracker
argument_list|()
operator|.
name|setNormalizerOn
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" set normalizerSwitch="
operator|+
name|newValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error flipping normalizer switch"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValue
return|;
block|}
comment|/**    * @return list of blocking services and their security info classes that this server supports    */
specifier|protected
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|getServices
parameter_list|()
block|{
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|bssi
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|MasterService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|MasterService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|RegionServerStatusService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|RegionServerStatusService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bssi
operator|.
name|addAll
argument_list|(
name|super
operator|.
name|getServices
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bssi
return|;
block|}
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|GetLastFlushedSequenceIdResponse
name|getLastFlushedSequenceId
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetLastFlushedSequenceIdRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
name|byte
index|[]
name|encodedRegionName
init|=
name|request
operator|.
name|getRegionName
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionStoreSequenceIds
name|ids
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getLastFlushedSequenceId
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|buildGetLastFlushedSequenceIdResponse
argument_list|(
name|ids
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionServerReportResponse
name|regionServerReport
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RegionServerReportRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
name|ClusterStatusProtos
operator|.
name|ServerLoad
name|sl
init|=
name|request
operator|.
name|getLoad
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|request
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|ServerLoad
name|oldLoad
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getLoad
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|regionServerReport
argument_list|(
name|serverName
argument_list|,
operator|new
name|ServerLoad
argument_list|(
name|sl
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
operator|&&
name|master
operator|.
name|metricsMaster
operator|!=
literal|null
condition|)
block|{
comment|// Up our metrics.
name|master
operator|.
name|metricsMaster
operator|.
name|incrementRequests
argument_list|(
name|sl
operator|.
name|getTotalNumberOfRequests
argument_list|()
operator|-
operator|(
name|oldLoad
operator|!=
literal|null
condition|?
name|oldLoad
operator|.
name|getTotalNumberOfRequests
argument_list|()
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|RegionServerReportResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionServerStartupResponse
name|regionServerStartup
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RegionServerStartupRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// Register with server manager
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
name|InetAddress
name|ia
init|=
name|master
operator|.
name|getRemoteInetAddress
argument_list|(
name|request
operator|.
name|getPort
argument_list|()
argument_list|,
name|request
operator|.
name|getServerStartCode
argument_list|()
argument_list|)
decl_stmt|;
comment|// if regionserver passed hostname to use,
comment|// then use it instead of doing a reverse DNS lookup
name|ServerName
name|rs
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|regionServerStartup
argument_list|(
name|request
argument_list|,
name|ia
argument_list|)
decl_stmt|;
comment|// Send back some config info
name|RegionServerStartupResponse
operator|.
name|Builder
name|resp
init|=
name|createConfigurationSubset
argument_list|()
decl_stmt|;
name|NameStringPair
operator|.
name|Builder
name|entry
init|=
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|HConstants
operator|.
name|KEY_FOR_HOSTNAME_SEEN_BY_MASTER
argument_list|)
operator|.
name|setValue
argument_list|(
name|rs
operator|.
name|getHostname
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|addMapEntries
argument_list|(
name|entry
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ReportRSFatalErrorResponse
name|reportRSFatalError
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ReportRSFatalErrorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|String
name|errorText
init|=
name|request
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|request
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Region server "
operator|+
name|sn
operator|+
literal|" reported a fatal error:\n"
operator|+
name|errorText
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|master
operator|.
name|rsFatals
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|ReportRSFatalErrorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AddColumnResponse
name|addColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AddColumnRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|addColumn
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|ProtobufUtil
operator|.
name|convertToHColumnDesc
argument_list|(
name|req
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|==
operator|-
literal|1
condition|)
block|{
comment|// This mean operation was not performed in server, so do not set any procId
return|return
name|AddColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|AddColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AssignRegionResponse
name|assignRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AssignRegionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
specifier|final
name|byte
index|[]
name|regionName
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
name|AssignRegionResponse
name|arr
init|=
name|AssignRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"assignRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|RegionStates
name|regionStates
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|regionStates
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|master
operator|.
name|cpHost
operator|.
name|preAssign
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
return|return
name|arr
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" assign "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|assign
argument_list|(
name|regionInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postAssign
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BalanceResponse
name|balance
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|BalanceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|BalanceResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBalancerRan
argument_list|(
name|master
operator|.
name|balance
argument_list|(
name|request
operator|.
name|hasForce
argument_list|()
condition|?
name|request
operator|.
name|getForce
argument_list|()
else|:
literal|false
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CreateNamespaceResponse
name|createNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CreateNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|createNamespace
argument_list|(
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|request
operator|.
name|getNamespaceDescriptor
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CreateNamespaceResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CreateTableResponse
name|createTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CreateTableRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|HTableDescriptor
name|hTableDescriptor
init|=
name|ProtobufUtil
operator|.
name|convertToHTableDesc
argument_list|(
name|req
operator|.
name|getTableSchema
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|ProtobufUtil
operator|.
name|getSplitKeysArray
argument_list|(
name|req
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|createTable
argument_list|(
name|hTableDescriptor
argument_list|,
name|splitKeys
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CreateTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeleteColumnResponse
name|deleteColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteColumnRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|deleteColumn
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getColumnName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|==
operator|-
literal|1
condition|)
block|{
comment|// This mean operation was not performed in server, so do not set any procId
return|return
name|DeleteColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|DeleteColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeleteNamespaceResponse
name|deleteNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|deleteNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|DeleteNamespaceResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Execute Delete Snapshot operation.    * @return DeleteSnapshotResponse (a protobuf wrapped void) if the snapshot existed and was    *    deleted properly.    * @throws ServiceException wrapping SnapshotDoesNotExistException if specified snapshot did not    *    exist.    */
annotation|@
name|Override
specifier|public
name|DeleteSnapshotResponse
name|deleteSnapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteSnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|master
operator|.
name|snapshotManager
operator|.
name|checkSnapshotSupport
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" delete "
operator|+
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|snapshotManager
operator|.
name|deleteSnapshot
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|DeleteSnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeleteTableResponse
name|deleteTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|deleteTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|DeleteTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TruncateTableResponse
name|truncateTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|TruncateTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|truncateTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getPreserveSplits
argument_list|()
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|TruncateTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DisableTableResponse
name|disableTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DisableTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|disableTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|DisableTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DispatchMergingRegionsResponse
name|dispatchMergingRegions
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|DispatchMergingRegionsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|encodedNameOfRegionA
init|=
name|request
operator|.
name|getRegionA
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|encodedNameOfRegionB
init|=
name|request
operator|.
name|getRegionB
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getRegionA
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
operator|||
name|request
operator|.
name|getRegionB
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"mergeRegions specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
operator|+
literal|" actual: region_a="
operator|+
name|request
operator|.
name|getRegionA
argument_list|()
operator|.
name|getType
argument_list|()
operator|+
literal|", region_b="
operator|+
name|request
operator|.
name|getRegionB
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RegionStates
name|regionStates
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|RegionState
name|regionStateA
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedNameOfRegionA
argument_list|)
argument_list|)
decl_stmt|;
name|RegionState
name|regionStateB
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedNameOfRegionB
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionStateA
operator|==
literal|null
operator|||
name|regionStateB
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionStateA
operator|==
literal|null
condition|?
name|encodedNameOfRegionA
else|:
name|encodedNameOfRegionB
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|HRegionInfo
name|regionInfoA
init|=
name|regionStateA
operator|.
name|getRegion
argument_list|()
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionInfoB
init|=
name|regionStateB
operator|.
name|getRegion
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|dispatchMergingRegions
argument_list|(
name|regionInfoA
argument_list|,
name|regionInfoB
argument_list|,
name|request
operator|.
name|getForcible
argument_list|()
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|DispatchMergingRegionsResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EnableCatalogJanitorResponse
name|enableCatalogJanitor
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|EnableCatalogJanitorRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|EnableCatalogJanitorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevValue
argument_list|(
name|master
operator|.
name|catalogJanitorChore
operator|.
name|setEnabled
argument_list|(
name|req
operator|.
name|getEnable
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EnableTableResponse
name|enableTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|EnableTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|enableTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|EnableTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
name|execMasterService
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|ServerRpcController
name|execController
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|CoprocessorServiceCall
name|call
init|=
name|request
operator|.
name|getCall
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
name|call
operator|.
name|getServiceName
argument_list|()
decl_stmt|;
name|String
name|methodName
init|=
name|call
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|master
operator|.
name|coprocessorServiceHandlers
operator|.
name|containsKey
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnknownProtocolException
argument_list|(
literal|null
argument_list|,
literal|"No registered master coprocessor service found for name "
operator|+
name|serviceName
argument_list|)
throw|;
block|}
name|Service
name|service
init|=
name|master
operator|.
name|coprocessorServiceHandlers
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|Descriptors
operator|.
name|ServiceDescriptor
name|serviceDesc
init|=
name|service
operator|.
name|getDescriptorForType
argument_list|()
decl_stmt|;
name|Descriptors
operator|.
name|MethodDescriptor
name|methodDesc
init|=
name|serviceDesc
operator|.
name|findMethodByName
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodDesc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownProtocolException
argument_list|(
name|service
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"Unknown method "
operator|+
name|methodName
operator|+
literal|" called on master service "
operator|+
name|serviceName
argument_list|)
throw|;
block|}
comment|//invoke the method
name|Message
operator|.
name|Builder
name|builderForType
init|=
name|service
operator|.
name|getRequestPrototype
argument_list|(
name|methodDesc
argument_list|)
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builderForType
argument_list|,
name|call
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|execRequest
init|=
name|builderForType
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Message
operator|.
name|Builder
name|responseBuilder
init|=
name|service
operator|.
name|getResponsePrototype
argument_list|(
name|methodDesc
argument_list|)
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
name|service
operator|.
name|callMethod
argument_list|(
name|methodDesc
argument_list|,
name|execController
argument_list|,
name|execRequest
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|Message
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|responseBuilder
operator|.
name|mergeFrom
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Message
name|execResult
init|=
name|responseBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|execController
operator|.
name|getFailedOn
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|execController
operator|.
name|getFailedOn
argument_list|()
throw|;
block|}
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|builder
operator|.
name|getValueBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|execResult
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|execResult
operator|.
name|toByteString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Triggers an asynchronous attempt to run a distributed procedure.    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|ExecProcedureResponse
name|execProcedure
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ExecProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|ProcedureDescription
name|desc
init|=
name|request
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|MasterProcedureManager
name|mpm
init|=
name|master
operator|.
name|getMasterProcedureManagerHost
argument_list|()
operator|.
name|getProcedureManager
argument_list|(
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"The procedure is not registered: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" procedure request for: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|mpm
operator|.
name|execProcedure
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// send back the max amount of time the client should wait for the procedure
comment|// to complete
name|long
name|waitTime
init|=
name|SnapshotDescriptionUtils
operator|.
name|DEFAULT_MAX_WAIT_TIME
decl_stmt|;
return|return
name|ExecProcedureResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExpectedTimeout
argument_list|(
name|waitTime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Triggers a synchronous attempt to run a distributed procedure and sets    * return data in response.    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|ExecProcedureResponse
name|execProcedureWithRet
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ExecProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|ProcedureDescription
name|desc
init|=
name|request
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|MasterProcedureManager
name|mpm
init|=
name|master
operator|.
name|getMasterProcedureManagerHost
argument_list|()
operator|.
name|getProcedureManager
argument_list|(
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"The procedure is not registered: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" procedure request for: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|mpm
operator|.
name|execProcedureWithRet
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|ExecProcedureResponse
operator|.
name|Builder
name|builder
init|=
name|ExecProcedureResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// set return data if available
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReturnData
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetClusterStatusResponse
name|getClusterStatus
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetClusterStatusRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|GetClusterStatusResponse
operator|.
name|Builder
name|response
init|=
name|GetClusterStatusResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|response
operator|.
name|setClusterStatus
argument_list|(
name|ProtobufUtil
operator|.
name|convert
argument_list|(
name|master
operator|.
name|getClusterStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * List the currently available/stored snapshots. Any in-progress snapshots are ignored    */
annotation|@
name|Override
specifier|public
name|GetCompletedSnapshotsResponse
name|getCompletedSnapshots
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetCompletedSnapshotsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|GetCompletedSnapshotsResponse
operator|.
name|Builder
name|builder
init|=
name|GetCompletedSnapshotsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|master
operator|.
name|snapshotManager
operator|.
name|getCompletedSnapshots
argument_list|()
decl_stmt|;
comment|// convert to protobuf
for|for
control|(
name|SnapshotDescription
name|snapshot
range|:
name|snapshots
control|)
block|{
name|builder
operator|.
name|addSnapshots
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetNamespaceDescriptorResponse
name|getNamespaceDescriptor
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetNamespaceDescriptorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|GetNamespaceDescriptorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceDescriptor
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|master
operator|.
name|getNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the number of regions of the table that have been updated by the alter.    *    * @return Pair indicating the number of regions updated Pair.getFirst is the    *         regions that are yet to be updated Pair.getSecond is the total number    *         of regions of the table    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|GetSchemaAlterStatusResponse
name|getSchemaAlterStatus
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetSchemaAlterStatusRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// TODO: currently, we query using the table name on the client side. this
comment|// may overlap with other table operations or the table operation may
comment|// have completed before querying this API. We need to refactor to a
comment|// transaction system in the future to avoid these ambiguities.
name|TableName
name|tableName
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|pair
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getReopenStatus
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetSchemaAlterStatusResponse
operator|.
name|Builder
name|ret
init|=
name|GetSchemaAlterStatusResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setYetToUpdateRegions
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTotalRegions
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get list of TableDescriptors for requested tables.    * @param c Unused (set to null).    * @param req GetTableDescriptorsRequest that contains:    * - tableNames: requested tables, or if empty, all are requested    * @return GetTableDescriptorsResponse    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|GetTableDescriptorsResponse
name|getTableDescriptors
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|GetTableDescriptorsRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
specifier|final
name|String
name|regex
init|=
name|req
operator|.
name|hasRegex
argument_list|()
condition|?
name|req
operator|.
name|getRegex
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|String
name|namespace
init|=
name|req
operator|.
name|hasNamespace
argument_list|()
condition|?
name|req
operator|.
name|getNamespace
argument_list|()
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNameList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getTableNamesCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tableNameList
operator|=
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|(
name|req
operator|.
name|getTableNamesCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|TableName
name|tableNamePB
range|:
name|req
operator|.
name|getTableNamesList
argument_list|()
control|)
block|{
name|tableNameList
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|tableNamePB
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
init|=
name|master
operator|.
name|listTableDescriptors
argument_list|(
name|namespace
argument_list|,
name|regex
argument_list|,
name|tableNameList
argument_list|,
name|req
operator|.
name|getIncludeSysTables
argument_list|()
argument_list|)
decl_stmt|;
name|GetTableDescriptorsResponse
operator|.
name|Builder
name|builder
init|=
name|GetTableDescriptorsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptors
operator|!=
literal|null
operator|&&
name|descriptors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Add the table descriptors to the response
for|for
control|(
name|HTableDescriptor
name|htd
range|:
name|descriptors
control|)
block|{
name|builder
operator|.
name|addTableSchema
argument_list|(
name|ProtobufUtil
operator|.
name|convertToTableSchema
argument_list|(
name|htd
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get list of userspace table names    * @param controller Unused (set to null).    * @param req GetTableNamesRequest    * @return GetTableNamesResponse    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|GetTableNamesResponse
name|getTableNames
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetTableNamesRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
specifier|final
name|String
name|regex
init|=
name|req
operator|.
name|hasRegex
argument_list|()
condition|?
name|req
operator|.
name|getRegex
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|String
name|namespace
init|=
name|req
operator|.
name|hasNamespace
argument_list|()
condition|?
name|req
operator|.
name|getNamespace
argument_list|()
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
init|=
name|master
operator|.
name|listTableNames
argument_list|(
name|namespace
argument_list|,
name|regex
argument_list|,
name|req
operator|.
name|getIncludeSysTables
argument_list|()
argument_list|)
decl_stmt|;
name|GetTableNamesResponse
operator|.
name|Builder
name|builder
init|=
name|GetTableNamesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableNames
operator|!=
literal|null
operator|&&
name|tableNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Add the table names to the response
for|for
control|(
name|TableName
name|table
range|:
name|tableNames
control|)
block|{
name|builder
operator|.
name|addTableNames
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|GetTableStateResponse
name|getTableState
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|GetTableStateRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
name|TableName
name|tableName
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|TableState
operator|.
name|State
name|state
init|=
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|getTableState
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|MasterProtos
operator|.
name|GetTableStateResponse
operator|.
name|Builder
name|builder
init|=
name|MasterProtos
operator|.
name|GetTableStateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTableState
argument_list|(
operator|new
name|TableState
argument_list|(
name|tableName
argument_list|,
name|state
argument_list|)
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|IsCatalogJanitorEnabledResponse
name|isCatalogJanitorEnabled
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|IsCatalogJanitorEnabledRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|IsCatalogJanitorEnabledResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|master
operator|.
name|isCatalogJanitorEnabled
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsMasterRunningResponse
name|isMasterRunning
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|IsMasterRunningRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
return|return
name|IsMasterRunningResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setIsMasterRunning
argument_list|(
operator|!
name|master
operator|.
name|isStopped
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks if the specified procedure is done.    * @return true if the procedure is done, false if the procedure is in the process of completing    * @throws ServiceException if invalid procedure or failed procedure with progress failure reason.    */
annotation|@
name|Override
specifier|public
name|IsProcedureDoneResponse
name|isProcedureDone
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsProcedureDoneRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|ProcedureDescription
name|desc
init|=
name|request
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|MasterProcedureManager
name|mpm
init|=
name|master
operator|.
name|getMasterProcedureManagerHost
argument_list|()
operator|.
name|getProcedureManager
argument_list|(
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"The procedure is not registered: "
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking to see if procedure from request:"
operator|+
name|desc
operator|.
name|getSignature
argument_list|()
operator|+
literal|" is done"
argument_list|)
expr_stmt|;
name|IsProcedureDoneResponse
operator|.
name|Builder
name|builder
init|=
name|IsProcedureDoneResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
name|mpm
operator|.
name|isProcedureDone
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDone
argument_list|(
name|done
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks if the specified snapshot is done.    * @return true if the snapshot is in file system ready to use,    *   false if the snapshot is in the process of completing    * @throws ServiceException wrapping UnknownSnapshotException if invalid snapshot, or    *  a wrapped HBaseSnapshotException with progress failure reason.    */
annotation|@
name|Override
specifier|public
name|IsSnapshotDoneResponse
name|isSnapshotDone
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsSnapshotDoneRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking to see if snapshot from request:"
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
operator|+
literal|" is done"
argument_list|)
expr_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|IsSnapshotDoneResponse
operator|.
name|Builder
name|builder
init|=
name|IsSnapshotDoneResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
name|master
operator|.
name|snapshotManager
operator|.
name|isSnapshotDone
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDone
argument_list|(
name|done
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetProcedureResultResponse
name|getProcedureResult
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetProcedureResultRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking to see if procedure is done procId="
operator|+
name|request
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|GetProcedureResultResponse
operator|.
name|Builder
name|builder
init|=
name|GetProcedureResultResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|ProcedureInfo
argument_list|,
name|Procedure
argument_list|>
name|v
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getResultOrProcedure
argument_list|(
name|request
operator|.
name|getProcId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ProcedureInfo
name|result
init|=
name|v
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStartTime
argument_list|(
name|result
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLastUpdate
argument_list|(
name|result
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setException
argument_list|(
name|result
operator|.
name|getForeignExceptionMessage
argument_list|()
operator|.
name|getForeignExchangeMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|hasResultData
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|result
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|removeResult
argument_list|(
name|request
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Procedure
name|proc
init|=
name|v
operator|.
name|getSecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|setState
argument_list|(
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setState
argument_list|(
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStartTime
argument_list|(
name|proc
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLastUpdate
argument_list|(
name|proc
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AbortProcedureResponse
name|abortProcedure
parameter_list|(
name|RpcController
name|rpcController
parameter_list|,
name|AbortProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|AbortProcedureResponse
operator|.
name|Builder
name|response
init|=
name|AbortProcedureResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|abortResult
init|=
name|master
operator|.
name|abortProcedure
argument_list|(
name|request
operator|.
name|getProcId
argument_list|()
argument_list|,
name|request
operator|.
name|getMayInterruptIfRunning
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setIsProcedureAborted
argument_list|(
name|abortResult
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ListNamespaceDescriptorsResponse
name|listNamespaceDescriptors
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|ListNamespaceDescriptorsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ListNamespaceDescriptorsResponse
operator|.
name|Builder
name|response
init|=
name|ListNamespaceDescriptorsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|NamespaceDescriptor
name|ns
range|:
name|master
operator|.
name|getNamespaces
argument_list|()
control|)
block|{
name|response
operator|.
name|addNamespaceDescriptor
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ListProceduresResponse
name|listProcedures
parameter_list|(
name|RpcController
name|rpcController
parameter_list|,
name|ListProceduresRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ListProceduresResponse
operator|.
name|Builder
name|response
init|=
name|ListProceduresResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcedureInfo
name|p
range|:
name|master
operator|.
name|listProcedures
argument_list|()
control|)
block|{
name|response
operator|.
name|addProcedure
argument_list|(
name|ProcedureUtil
operator|.
name|convertToProcedureProto
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ListTableDescriptorsByNamespaceResponse
name|listTableDescriptorsByNamespace
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|ListTableDescriptorsByNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ListTableDescriptorsByNamespaceResponse
operator|.
name|Builder
name|b
init|=
name|ListTableDescriptorsByNamespaceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|htd
range|:
name|master
operator|.
name|listTableDescriptorsByNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
control|)
block|{
name|b
operator|.
name|addTableSchema
argument_list|(
name|ProtobufUtil
operator|.
name|convertToTableSchema
argument_list|(
name|htd
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ListTableNamesByNamespaceResponse
name|listTableNamesByNamespace
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|ListTableNamesByNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ListTableNamesByNamespaceResponse
operator|.
name|Builder
name|b
init|=
name|ListTableNamesByNamespaceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|master
operator|.
name|listTableNamesByNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
control|)
block|{
name|b
operator|.
name|addTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ModifyColumnResponse
name|modifyColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ModifyColumnRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|modifyColumn
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|ProtobufUtil
operator|.
name|convertToHColumnDesc
argument_list|(
name|req
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|==
operator|-
literal|1
condition|)
block|{
comment|// This mean operation was not performed in server, so do not set any procId
return|return
name|ModifyColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ModifyColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ModifyNamespaceResponse
name|modifyNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ModifyNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|modifyNamespace
argument_list|(
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|request
operator|.
name|getNamespaceDescriptor
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ModifyNamespaceResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ModifyTableResponse
name|modifyTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ModifyTableRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|modifyTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|ProtobufUtil
operator|.
name|convertToHTableDesc
argument_list|(
name|req
operator|.
name|getTableSchema
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|req
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ModifyTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MoveRegionResponse
name|moveRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MoveRegionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|encodedRegionName
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|destServerName
init|=
operator|(
name|req
operator|.
name|hasDestServerName
argument_list|()
operator|)
condition|?
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|req
operator|.
name|getDestServerName
argument_list|()
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|MoveRegionResponse
name|mrr
init|=
name|MoveRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"moveRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|master
operator|.
name|move
argument_list|(
name|encodedRegionName
argument_list|,
name|destServerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|mrr
return|;
block|}
comment|/**    * Offline specified region from master's in-memory state. It will not attempt to    * reassign the region as in unassign.    *    * This is a special method that should be used by experts or hbck.    *    */
annotation|@
name|Override
specifier|public
name|OfflineRegionResponse
name|offlineRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|OfflineRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|regionName
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"moveRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
name|HRegionInfo
name|hri
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|preRegionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" offline "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|regionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postRegionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|OfflineRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Execute Restore/Clone snapshot operation.    *    *<p>If the specified table exists a "Restore" is executed, replacing the table    * schema and directory data with the content of the snapshot.    * The table must be disabled, or a UnsupportedOperationException will be thrown.    *    *<p>If the table doesn't exist a "Clone" is executed, a new table is created    * using the schema at the time of the snapshot, and the content of the snapshot.    *    *<p>The restore/clone operation does not require copying HFiles. Since HFiles    * are immutable the table can point to and use the same files as the original one.    */
annotation|@
name|Override
specifier|public
name|RestoreSnapshotResponse
name|restoreSnapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RestoreSnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|master
operator|.
name|snapshotManager
operator|.
name|checkSnapshotSupport
argument_list|()
expr_stmt|;
comment|// Ensure namespace exists. Will throw exception if non-known NS.
name|TableName
name|dstTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|master
operator|.
name|getClusterSchema
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|dstTable
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
expr_stmt|;
name|SnapshotDescription
name|reqSnapshot
init|=
name|request
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|long
name|procId
init|=
name|master
operator|.
name|snapshotManager
operator|.
name|restoreOrCloneSnapshot
argument_list|(
name|reqSnapshot
argument_list|,
name|request
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|request
operator|.
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|RestoreSnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RunCatalogScanResponse
name|runCatalogScan
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|RunCatalogScanRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|ResponseConverter
operator|.
name|buildRunCatalogScanResponse
argument_list|(
name|master
operator|.
name|catalogJanitorChore
operator|.
name|scan
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SetBalancerRunningResponse
name|setBalancerRunning
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|SetBalancerRunningRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|boolean
name|prevValue
init|=
operator|(
name|req
operator|.
name|getSynchronous
argument_list|()
operator|)
condition|?
name|synchronousBalanceSwitch
argument_list|(
name|req
operator|.
name|getOn
argument_list|()
argument_list|)
else|:
name|master
operator|.
name|balanceSwitch
argument_list|(
name|req
operator|.
name|getOn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|SetBalancerRunningResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevBalanceValue
argument_list|(
name|prevValue
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ShutdownResponse
name|shutdown
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ShutdownRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" shutdown"
argument_list|)
expr_stmt|;
name|master
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
name|ShutdownResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Triggers an asynchronous attempt to take a snapshot.    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|SnapshotResponse
name|snapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|master
operator|.
name|snapshotManager
operator|.
name|checkSnapshotSupport
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" snapshot request for:"
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the snapshot information
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescriptionUtils
operator|.
name|validate
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|master
operator|.
name|snapshotManager
operator|.
name|takeSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
comment|// send back the max amount of time the client should wait for the snapshot to complete
name|long
name|waitTime
init|=
name|SnapshotDescriptionUtils
operator|.
name|getMaxMasterTimeout
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|snapshot
operator|.
name|getType
argument_list|()
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|DEFAULT_MAX_WAIT_TIME
argument_list|)
decl_stmt|;
return|return
name|SnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExpectedTimeout
argument_list|(
name|waitTime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|StopMasterResponse
name|stopMaster
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|StopMasterRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" stop"
argument_list|)
expr_stmt|;
name|master
operator|.
name|stopMaster
argument_list|()
expr_stmt|;
return|return
name|StopMasterResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnassignRegionResponse
name|unassignRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|UnassignRegionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
specifier|final
name|byte
index|[]
name|regionName
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|force
init|=
name|req
operator|.
name|getForce
argument_list|()
decl_stmt|;
name|UnassignRegionResponse
name|urr
init|=
name|UnassignRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unassignRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|regionName
argument_list|)
condition|)
block|{
name|pair
operator|=
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|master
operator|.
name|getMetaTableLocator
argument_list|()
operator|.
name|getMetaRegionLocation
argument_list|(
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
name|HRegionInfo
name|hri
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|master
operator|.
name|cpHost
operator|.
name|preUnassign
argument_list|(
name|hri
argument_list|,
name|force
argument_list|)
condition|)
block|{
return|return
name|urr
return|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" unassign "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" in current location if it is online and reassign.force="
operator|+
name|force
argument_list|)
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postUnassign
argument_list|(
name|hri
argument_list|,
name|force
argument_list|)
expr_stmt|;
block|}
return|return
name|urr
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ReportRegionStateTransitionResponse
name|reportRegionStateTransition
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|ReportRegionStateTransitionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkServiceStarted
argument_list|()
expr_stmt|;
name|RegionStateTransition
name|rt
init|=
name|req
operator|.
name|getTransition
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|rt
operator|.
name|getRegionInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
operator|&&
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|isFailoverCleanupDone
argument_list|()
condition|)
block|{
comment|// Meta region is assigned before master finishes the
comment|// failover cleanup. So no need this check for it
throw|throw
operator|new
name|PleaseHoldException
argument_list|(
literal|"Master is rebuilding user regions"
argument_list|)
throw|;
block|}
name|ServerName
name|sn
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|req
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|error
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|onRegionTransition
argument_list|(
name|sn
argument_list|,
name|rt
argument_list|)
decl_stmt|;
name|ReportRegionStateTransitionResponse
operator|.
name|Builder
name|rrtr
init|=
name|ReportRegionStateTransitionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|rrtr
operator|.
name|setErrorMessage
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
return|return
name|rrtr
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SetQuotaResponse
name|setQuota
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|SetQuotaRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|setQuota
argument_list|(
name|req
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MajorCompactionTimestampResponse
name|getLastMajorCompactionTimestamp
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MajorCompactionTimestampRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|MajorCompactionTimestampResponse
operator|.
name|Builder
name|response
init|=
name|MajorCompactionTimestampResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|response
operator|.
name|setCompactionTimestamp
argument_list|(
name|master
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MajorCompactionTimestampResponse
name|getLastMajorCompactionTimestampForRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MajorCompactionTimestampForRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|MajorCompactionTimestampResponse
operator|.
name|Builder
name|response
init|=
name|MajorCompactionTimestampResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|response
operator|.
name|setCompactionTimestamp
argument_list|(
name|master
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Compact a region on the master.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|CompactRegionResponse
name|compactRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CompactRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|byte
index|[]
name|regionName
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|HRegionInfo
operator|.
name|getTable
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
comment|// if the region is a mob region, do the mob file compaction.
if|if
condition|(
name|MobUtils
operator|.
name|isMobRegionName
argument_list|(
name|tableName
argument_list|,
name|regionName
argument_list|)
condition|)
block|{
return|return
name|compactMob
argument_list|(
name|request
argument_list|,
name|tableName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|compactRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|GetRegionInfoResponse
name|getRegionInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetRegionInfoRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|byte
index|[]
name|regionName
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|HRegionInfo
operator|.
name|getTable
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|MobUtils
operator|.
name|isMobRegionName
argument_list|(
name|tableName
argument_list|,
name|regionName
argument_list|)
condition|)
block|{
comment|// a dummy region info contains the compaction state.
name|HRegionInfo
name|mobRegionInfo
init|=
name|MobUtils
operator|.
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetRegionInfoResponse
operator|.
name|Builder
name|builder
init|=
name|GetRegionInfoResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|mobRegionInfo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCompactionState
argument_list|()
operator|&&
name|request
operator|.
name|getCompactionState
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCompactionState
argument_list|(
name|master
operator|.
name|getMobCompactionState
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getRegionInfo
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
comment|/**    * Compacts the mob files in the current table.    * @param request the request.    * @param tableName the current table name.    * @return The response of the mob file compaction.    * @throws IOException    */
specifier|private
name|CompactRegionResponse
name|compactMob
parameter_list|(
specifier|final
name|CompactRegionRequest
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" is not enabled"
argument_list|)
throw|;
block|}
name|boolean
name|allFiles
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|HColumnDescriptor
argument_list|>
name|compactedColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|HColumnDescriptor
index|[]
name|hcds
init|=
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|family
operator|=
name|request
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|hcds
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|family
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hcd
operator|.
name|isMobEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" is not a mob column family"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" is not a mob column family"
argument_list|)
throw|;
block|}
name|compactedColumns
operator|.
name|add
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|hcds
control|)
block|{
if|if
condition|(
name|hcd
operator|.
name|isMobEnabled
argument_list|()
condition|)
block|{
name|compactedColumns
operator|.
name|add
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|compactedColumns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No mob column families are assigned in the mob compaction"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"No mob column families are assigned in the mob compaction"
argument_list|)
throw|;
block|}
if|if
condition|(
name|request
operator|.
name|hasMajor
argument_list|()
operator|&&
name|request
operator|.
name|getMajor
argument_list|()
condition|)
block|{
name|allFiles
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|familyLogMsg
init|=
operator|(
name|family
operator|!=
literal|null
operator|)
condition|?
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"User-triggered mob compaction requested for table: "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" for column family: "
operator|+
name|familyLogMsg
argument_list|)
expr_stmt|;
block|}
name|master
operator|.
name|requestMobCompaction
argument_list|(
name|tableName
argument_list|,
name|compactedColumns
argument_list|,
name|allFiles
argument_list|)
expr_stmt|;
return|return
name|CompactRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsBalancerEnabledResponse
name|isBalancerEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsBalancerEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|IsBalancerEnabledResponse
operator|.
name|Builder
name|response
init|=
name|IsBalancerEnabledResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEnabled
argument_list|(
name|master
operator|.
name|isBalancerOn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SetSplitOrMergeEnabledResponse
name|setSplitOrMergeEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetSplitOrMergeEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|SetSplitOrMergeEnabledResponse
operator|.
name|Builder
name|response
init|=
name|SetSplitOrMergeEnabledResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|boolean
name|newValue
init|=
name|request
operator|.
name|getEnabled
argument_list|()
decl_stmt|;
name|boolean
name|skipLock
init|=
name|request
operator|.
name|getSkipLock
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|master
operator|.
name|getSplitOrMergeTracker
argument_list|()
operator|.
name|lock
argument_list|(
name|skipLock
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"can't set splitOrMerge switch due to lock"
argument_list|)
throw|;
block|}
for|for
control|(
name|MasterProtos
operator|.
name|MasterSwitchType
name|masterSwitchType
range|:
name|request
operator|.
name|getSwitchTypesList
argument_list|()
control|)
block|{
name|MasterSwitchType
name|switchType
init|=
name|convert
argument_list|(
name|masterSwitchType
argument_list|)
decl_stmt|;
name|boolean
name|oldValue
init|=
name|master
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|switchType
argument_list|)
decl_stmt|;
name|response
operator|.
name|addPrevValue
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|bypass
operator|=
name|master
operator|.
name|cpHost
operator|.
name|preSetSplitOrMergeEnabled
argument_list|(
name|newValue
argument_list|,
name|switchType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bypass
condition|)
block|{
name|master
operator|.
name|getSplitOrMergeTracker
argument_list|()
operator|.
name|setSplitOrMergeEnabled
argument_list|(
name|newValue
argument_list|,
name|switchType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|cpHost
operator|.
name|postSetSplitOrMergeEnabled
argument_list|(
name|newValue
argument_list|,
name|switchType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsSplitOrMergeEnabledResponse
name|isSplitOrMergeEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsSplitOrMergeEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|IsSplitOrMergeEnabledResponse
operator|.
name|Builder
name|response
init|=
name|IsSplitOrMergeEnabledResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEnabled
argument_list|(
name|master
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getSwitchType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReleaseSplitOrMergeLockAndRollbackResponse
name|releaseSplitOrMergeLockAndRollback
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ReleaseSplitOrMergeLockAndRollbackRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|getSplitOrMergeTracker
argument_list|()
operator|.
name|releaseLockAndRollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ReleaseSplitOrMergeLockAndRollbackResponse
operator|.
name|Builder
name|builder
init|=
name|ReleaseSplitOrMergeLockAndRollbackResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NormalizeResponse
name|normalize
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|NormalizeRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|NormalizeResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNormalizerRan
argument_list|(
name|master
operator|.
name|normalizeRegions
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SetNormalizerRunningResponse
name|setNormalizerRunning
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetNormalizerRunningRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|boolean
name|prevValue
init|=
name|normalizerSwitch
argument_list|(
name|request
operator|.
name|getOn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|SetNormalizerRunningResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevNormalizerValue
argument_list|(
name|prevValue
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|IsNormalizerEnabledResponse
name|isNormalizerEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsNormalizerEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|IsNormalizerEnabledResponse
operator|.
name|Builder
name|response
init|=
name|IsNormalizerEnabledResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEnabled
argument_list|(
name|master
operator|.
name|isNormalizerOn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns the security capabilities in effect on the cluster    */
annotation|@
name|Override
specifier|public
name|SecurityCapabilitiesResponse
name|getSecurityCapabilities
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SecurityCapabilitiesRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|SecurityCapabilitiesResponse
operator|.
name|Builder
name|response
init|=
name|SecurityCapabilitiesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|master
operator|.
name|checkInitialized
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Capability
argument_list|>
name|capabilities
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Authentication
if|if
condition|(
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|Capability
operator|.
name|SECURE_AUTHENTICATION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|Capability
operator|.
name|SIMPLE_AUTHENTICATION
argument_list|)
expr_stmt|;
block|}
comment|// The AccessController can provide AUTHORIZATION and CELL_AUTHORIZATION
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
operator|&&
name|master
operator|.
name|cpHost
operator|.
name|findCoprocessor
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|AccessController
operator|.
name|isAuthorizationSupported
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|Capability
operator|.
name|AUTHORIZATION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|AccessController
operator|.
name|isCellAuthorizationSupported
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|Capability
operator|.
name|CELL_AUTHORIZATION
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The VisibilityController can provide CELL_VISIBILITY
if|if
condition|(
name|master
operator|.
name|cpHost
operator|!=
literal|null
operator|&&
name|master
operator|.
name|cpHost
operator|.
name|findCoprocessor
argument_list|(
name|VisibilityController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|VisibilityController
operator|.
name|isCellAuthorizationSupported
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|Capability
operator|.
name|CELL_VISIBILITY
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|addAllCapabilities
argument_list|(
name|capabilities
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|MasterSwitchType
name|convert
parameter_list|(
name|MasterProtos
operator|.
name|MasterSwitchType
name|switchType
parameter_list|)
block|{
switch|switch
condition|(
name|switchType
condition|)
block|{
case|case
name|SPLIT
case|:
return|return
name|MasterSwitchType
operator|.
name|SPLIT
return|;
case|case
name|MERGE
case|:
return|return
name|MasterSwitchType
operator|.
name|MERGE
return|;
default|default:
break|break;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

