begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ExtendedCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnexpectedStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * An abstract class, which implements the behaviour shared by all concrete memstore instances.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|AbstractMemStore
implements|implements
name|MemStore
block|{
specifier|private
specifier|static
specifier|final
name|long
name|NO_SNAPSHOT_ID
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|CellComparator
name|comparator
decl_stmt|;
comment|// active segment absorbs write operations
specifier|protected
specifier|volatile
name|MutableSegment
name|active
decl_stmt|;
comment|// Snapshot of memstore.  Made for flusher.
specifier|protected
specifier|volatile
name|ImmutableSegment
name|snapshot
decl_stmt|;
specifier|protected
specifier|volatile
name|long
name|snapshotId
decl_stmt|;
comment|// Used to track when to flush
specifier|private
specifier|volatile
name|long
name|timeOfOldestEdit
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|long
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|OBJECT
operator|+
operator|(
literal|4
operator|*
name|ClassSize
operator|.
name|REFERENCE
operator|)
operator|+
operator|(
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_LONG
operator|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|long
name|DEEP_OVERHEAD
init|=
name|FIXED_OVERHEAD
decl_stmt|;
specifier|protected
name|AbstractMemStore
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|CellComparator
name|c
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|c
expr_stmt|;
name|resetActive
argument_list|()
expr_stmt|;
name|this
operator|.
name|snapshot
operator|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
operator|.
name|createImmutableSegment
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotId
operator|=
name|NO_SNAPSHOT_ID
expr_stmt|;
block|}
specifier|protected
name|void
name|resetActive
parameter_list|()
block|{
comment|// Reset heap to not include any keys
name|this
operator|.
name|active
operator|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
operator|.
name|createMutableSegment
argument_list|(
name|conf
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeOfOldestEdit
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
comment|/**    * Updates the wal with the lowest sequence id (oldest entry) that is still in memory    * @param onlyIfMoreRecent a flag that marks whether to update the sequence id no matter what or    *                      only if it is greater than the previous sequence id    */
specifier|public
specifier|abstract
name|void
name|updateLowestUnflushedSequenceIdInWAL
parameter_list|(
name|boolean
name|onlyIfMoreRecent
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Iterable
argument_list|<
name|Cell
argument_list|>
name|cells
parameter_list|,
name|MemstoreSize
name|memstoreSize
parameter_list|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|add
argument_list|(
name|cell
argument_list|,
name|memstoreSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|MemstoreSize
name|memstoreSize
parameter_list|)
block|{
name|Cell
name|toAdd
init|=
name|maybeCloneWithAllocator
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|boolean
name|mslabUsed
init|=
operator|(
name|toAdd
operator|!=
name|cell
operator|)
decl_stmt|;
comment|// This cell data is backed by the same byte[] where we read request in RPC(See HBASE-15180). By
comment|// default MSLAB is ON and we might have copied cell to MSLAB area. If not we must do below deep
comment|// copy. Or else we will keep referring to the bigger chunk of memory and prevent it from
comment|// getting GCed.
comment|// Copy to MSLAB would not have happened if
comment|// 1. MSLAB is turned OFF. See "hbase.hregion.memstore.mslab.enabled"
comment|// 2. When the size of the cell is bigger than the max size supported by MSLAB. See
comment|// "hbase.hregion.memstore.mslab.max.allocation". This defaults to 256 KB
comment|// 3. When cells are from Append/Increment operation.
if|if
condition|(
operator|!
name|mslabUsed
condition|)
block|{
name|toAdd
operator|=
name|deepCopyIfNeeded
argument_list|(
name|toAdd
argument_list|)
expr_stmt|;
block|}
name|internalAdd
argument_list|(
name|toAdd
argument_list|,
name|mslabUsed
argument_list|,
name|memstoreSize
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Cell
name|deepCopyIfNeeded
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ExtendedCell
condition|)
block|{
return|return
operator|(
operator|(
name|ExtendedCell
operator|)
name|cell
operator|)
operator|.
name|deepClone
argument_list|()
return|;
block|}
return|return
name|cell
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|upsert
parameter_list|(
name|Iterable
argument_list|<
name|Cell
argument_list|>
name|cells
parameter_list|,
name|long
name|readpoint
parameter_list|,
name|MemstoreSize
name|memstoreSize
parameter_list|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|upsert
argument_list|(
name|cell
argument_list|,
name|readpoint
argument_list|,
name|memstoreSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return Oldest timestamp of all the Cells in the MemStore    */
annotation|@
name|Override
specifier|public
name|long
name|timeOfOldestEdit
parameter_list|()
block|{
return|return
name|timeOfOldestEdit
return|;
block|}
comment|/**    * The passed snapshot was successfully persisted; it can be let go.    * @param id Id of the snapshot to clean out.    * @see MemStore#snapshot()    */
annotation|@
name|Override
specifier|public
name|void
name|clearSnapshot
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|UnexpectedStateException
block|{
if|if
condition|(
name|this
operator|.
name|snapshotId
operator|==
operator|-
literal|1
condition|)
return|return;
comment|// already cleared
if|if
condition|(
name|this
operator|.
name|snapshotId
operator|!=
name|id
condition|)
block|{
throw|throw
operator|new
name|UnexpectedStateException
argument_list|(
literal|"Current snapshot id is "
operator|+
name|this
operator|.
name|snapshotId
operator|+
literal|",passed "
operator|+
name|id
argument_list|)
throw|;
block|}
comment|// OK. Passed in snapshot is same as current snapshot. If not-empty,
comment|// create a new snapshot and let the old one go.
name|Segment
name|oldSnapshot
init|=
name|this
operator|.
name|snapshot
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|snapshot
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
operator|.
name|createImmutableSegment
argument_list|(
name|this
operator|.
name|comparator
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|snapshotId
operator|=
name|NO_SNAPSHOT_ID
expr_stmt|;
name|oldSnapshot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MemstoreSize
name|getSnapshotSize
parameter_list|()
block|{
return|return
operator|new
name|MemstoreSize
argument_list|(
name|this
operator|.
name|snapshot
operator|.
name|keySize
argument_list|()
argument_list|,
name|this
operator|.
name|snapshot
operator|.
name|heapOverhead
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|getSegments
argument_list|()
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"Segment ("
operator|+
name|i
operator|+
literal|") "
operator|+
name|segment
operator|.
name|toString
argument_list|()
operator|+
literal|"; "
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|protected
name|void
name|dump
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|active
operator|.
name|dump
argument_list|(
name|log
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|dump
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
comment|/*    * Inserts the specified Cell into MemStore and deletes any existing    * versions of the same row/family/qualifier as the specified Cell.    *<p>    * First, the specified Cell is inserted into the Memstore.    *<p>    * If there are any existing Cell in this MemStore with the same row,    * family, and qualifier, they are removed.    *<p>    * Callers must hold the read lock.    *    * @param cell the cell to be updated    * @param readpoint readpoint below which we can safely remove duplicate KVs    * @param memstoreSize    */
specifier|private
name|void
name|upsert
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|long
name|readpoint
parameter_list|,
name|MemstoreSize
name|memstoreSize
parameter_list|)
block|{
comment|// Add the Cell to the MemStore
comment|// Use the internalAdd method here since we (a) already have a lock
comment|// and (b) cannot safely use the MSLAB here without potentially
comment|// hitting OOME - see TestMemStore.testUpsertMSLAB for a
comment|// test that triggers the pathological case if we don't avoid MSLAB
comment|// here.
comment|// This cell data is backed by the same byte[] where we read request in RPC(See HBASE-15180). We
comment|// must do below deep copy. Or else we will keep referring to the bigger chunk of memory and
comment|// prevent it from getting GCed.
name|cell
operator|=
name|deepCopyIfNeeded
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|this
operator|.
name|active
operator|.
name|upsert
argument_list|(
name|cell
argument_list|,
name|readpoint
argument_list|,
name|memstoreSize
argument_list|)
expr_stmt|;
name|setOldestEditTimeToNow
argument_list|()
expr_stmt|;
name|checkActiveSize
argument_list|()
expr_stmt|;
block|}
comment|/*    * @param a    * @param b    * @return Return lowest of a or b or null if both a and b are null    */
specifier|protected
name|Cell
name|getLowest
parameter_list|(
specifier|final
name|Cell
name|a
parameter_list|,
specifier|final
name|Cell
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
name|a
return|;
block|}
return|return
name|comparator
operator|.
name|compareRows
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<=
literal|0
condition|?
name|a
else|:
name|b
return|;
block|}
comment|/*    * @param key Find row that follows this one.  If null, return first.    * @param set Set to look in for a row beyond<code>row</code>.    * @return Next row or null if none found.  If one found, will be a new    * KeyValue -- can be destroyed by subsequent calls to this method.    */
annotation|@
name|VisibleForTesting
specifier|protected
name|Cell
name|getNextRow
parameter_list|(
specifier|final
name|Cell
name|key
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|Cell
argument_list|>
name|set
parameter_list|)
block|{
name|Cell
name|result
init|=
literal|null
decl_stmt|;
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|tail
init|=
name|key
operator|==
literal|null
condition|?
name|set
else|:
name|set
operator|.
name|tailSet
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Iterate until we fall into the next row; i.e. move off current row
for|for
control|(
name|Cell
name|cell
range|:
name|tail
control|)
block|{
if|if
condition|(
name|comparator
operator|.
name|compareRows
argument_list|(
name|cell
argument_list|,
name|key
argument_list|)
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
comment|// Note: Not suppressing deletes or expired cells.  Needs to be handled
comment|// by higher up functions.
name|result
operator|=
name|cell
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param cell Find the row that comes after this one.  If null, we return the    *             first.    * @return Next row or null if none found.    */
annotation|@
name|VisibleForTesting
name|Cell
name|getNextRow
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
name|Cell
name|lowest
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
init|=
name|getSegments
argument_list|()
decl_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|segments
control|)
block|{
if|if
condition|(
name|lowest
operator|==
literal|null
condition|)
block|{
comment|//TODO: we may want to move the getNextRow ability to the segment
name|lowest
operator|=
name|getNextRow
argument_list|(
name|cell
argument_list|,
name|segment
operator|.
name|getCellSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lowest
operator|=
name|getLowest
argument_list|(
name|lowest
argument_list|,
name|getNextRow
argument_list|(
name|cell
argument_list|,
name|segment
operator|.
name|getCellSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lowest
return|;
block|}
specifier|private
name|Cell
name|maybeCloneWithAllocator
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|active
operator|.
name|maybeCloneWithAllocator
argument_list|(
name|cell
argument_list|)
return|;
block|}
comment|/*    * Internal version of add() that doesn't clone Cells with the    * allocator, and doesn't take the lock.    *    * Callers should ensure they already have the read lock taken    * @param toAdd the cell to add    * @param mslabUsed whether using MSLAB    * @param memstoreSize    */
specifier|private
name|void
name|internalAdd
parameter_list|(
specifier|final
name|Cell
name|toAdd
parameter_list|,
specifier|final
name|boolean
name|mslabUsed
parameter_list|,
name|MemstoreSize
name|memstoreSize
parameter_list|)
block|{
name|active
operator|.
name|add
argument_list|(
name|toAdd
argument_list|,
name|mslabUsed
argument_list|,
name|memstoreSize
argument_list|)
expr_stmt|;
name|setOldestEditTimeToNow
argument_list|()
expr_stmt|;
name|checkActiveSize
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setOldestEditTimeToNow
parameter_list|()
block|{
if|if
condition|(
name|timeOfOldestEdit
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|timeOfOldestEdit
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return The total size of cells in this memstore. We will not consider cells in the snapshot    */
specifier|protected
specifier|abstract
name|long
name|keySize
parameter_list|()
function_decl|;
comment|/**    * @return The total heap overhead of cells in this memstore. We will not consider cells in the    *         snapshot    */
specifier|protected
specifier|abstract
name|long
name|heapOverhead
parameter_list|()
function_decl|;
specifier|protected
name|CellComparator
name|getComparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
annotation|@
name|VisibleForTesting
name|MutableSegment
name|getActive
parameter_list|()
block|{
return|return
name|active
return|;
block|}
annotation|@
name|VisibleForTesting
name|ImmutableSegment
name|getSnapshot
parameter_list|()
block|{
return|return
name|snapshot
return|;
block|}
comment|/**    * Check whether anything need to be done based on the current active set size    */
specifier|protected
specifier|abstract
name|void
name|checkActiveSize
parameter_list|()
function_decl|;
comment|/**    * @return an ordered list of segments from most recent to oldest in memstore    */
specifier|protected
specifier|abstract
name|List
argument_list|<
name|Segment
argument_list|>
name|getSegments
parameter_list|()
function_decl|;
block|}
end_class

end_unit

