begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|EncodingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|HFileBlockDecodingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|HFileBlockDefaultDecodingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|HFileBlockDefaultEncodingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|HFileBlockEncodingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|NoneEncoder
import|;
end_import

begin_comment
comment|/**  * Does not perform any kind of encoding/decoding.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NoOpDataBlockEncoder
implements|implements
name|HFileDataBlockEncoder
block|{
specifier|public
specifier|static
specifier|final
name|NoOpDataBlockEncoder
name|INSTANCE
init|=
operator|new
name|NoOpDataBlockEncoder
argument_list|()
decl_stmt|;
specifier|private
specifier|static
class|class
name|NoneEncodingState
extends|extends
name|EncodingState
block|{
name|NoneEncoder
name|encoder
init|=
literal|null
decl_stmt|;
block|}
comment|/** Cannot be instantiated. Use {@link #INSTANCE} instead. */
specifier|private
name|NoOpDataBlockEncoder
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|int
name|encode
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|HFileBlockEncodingContext
name|encodingCtx
parameter_list|,
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|NoneEncodingState
name|state
init|=
operator|(
name|NoneEncodingState
operator|)
name|encodingCtx
operator|.
name|getEncodingState
argument_list|()
decl_stmt|;
name|NoneEncoder
name|encoder
init|=
name|state
operator|.
name|encoder
decl_stmt|;
return|return
name|encoder
operator|.
name|write
argument_list|(
name|cell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useEncodedScanner
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|saveMetadata
parameter_list|(
name|HFile
operator|.
name|Writer
name|writer
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|DataBlockEncoding
name|getDataBlockEncoding
parameter_list|()
block|{
return|return
name|DataBlockEncoding
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataBlockEncoding
name|getEffectiveEncodingInCache
parameter_list|(
name|boolean
name|isCompaction
parameter_list|)
block|{
return|return
name|DataBlockEncoding
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HFileBlockEncodingContext
name|newDataBlockEncodingContext
parameter_list|(
name|byte
index|[]
name|dummyHeader
parameter_list|,
name|HFileContext
name|meta
parameter_list|)
block|{
return|return
operator|new
name|HFileBlockDefaultEncodingContext
argument_list|(
literal|null
argument_list|,
name|dummyHeader
argument_list|,
name|meta
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HFileBlockDecodingContext
name|newDataBlockDecodingContext
parameter_list|(
name|HFileContext
name|meta
parameter_list|)
block|{
return|return
operator|new
name|HFileBlockDefaultDecodingContext
argument_list|(
name|meta
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startBlockEncoding
parameter_list|(
name|HFileBlockEncodingContext
name|blkEncodingCtx
parameter_list|,
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blkEncodingCtx
operator|.
name|getClass
argument_list|()
operator|!=
name|HFileBlockDefaultEncodingContext
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" only accepts "
operator|+
name|HFileBlockDefaultEncodingContext
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" as the "
operator|+
literal|"encoding context."
argument_list|)
throw|;
block|}
name|HFileBlockDefaultEncodingContext
name|encodingCtx
init|=
operator|(
name|HFileBlockDefaultEncodingContext
operator|)
name|blkEncodingCtx
decl_stmt|;
name|encodingCtx
operator|.
name|prepareEncoding
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|NoneEncoder
name|encoder
init|=
operator|new
name|NoneEncoder
argument_list|(
name|out
argument_list|,
name|encodingCtx
argument_list|)
decl_stmt|;
name|NoneEncodingState
name|state
init|=
operator|new
name|NoneEncodingState
argument_list|()
decl_stmt|;
name|state
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
name|blkEncodingCtx
operator|.
name|setEncodingState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endBlockEncoding
parameter_list|(
name|HFileBlockEncodingContext
name|encodingCtx
parameter_list|,
name|DataOutputStream
name|out
parameter_list|,
name|byte
index|[]
name|uncompressedBytesWithHeader
parameter_list|,
name|BlockType
name|blockType
parameter_list|)
throws|throws
name|IOException
block|{
name|encodingCtx
operator|.
name|postEncoding
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

