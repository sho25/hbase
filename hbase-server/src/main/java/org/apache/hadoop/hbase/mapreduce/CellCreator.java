begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Facade to create Cells for HFileOutputFormat. The created Cells are of<code>Put</code> type.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|CellCreator
block|{
specifier|public
specifier|static
specifier|final
name|String
name|VISIBILITY_EXP_RESOLVER_CLASS
init|=
literal|"hbase.mapreduce.visibility.expression.resolver.class"
decl_stmt|;
specifier|private
name|VisibilityExpressionResolver
name|visExpResolver
decl_stmt|;
specifier|public
name|CellCreator
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|VisibilityExpressionResolver
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|VISIBILITY_EXP_RESOLVER_CLASS
argument_list|,
name|DefaultVisibilityExpressionResolver
operator|.
name|class
argument_list|,
name|VisibilityExpressionResolver
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|visExpResolver
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|visExpResolver
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param row row key    * @param roffset row offset    * @param rlength row length    * @param family family name    * @param foffset family offset    * @param flength family length    * @param qualifier column qualifier    * @param qoffset qualifier offset    * @param qlength qualifier length    * @param timestamp version timestamp    * @param value column value    * @param voffset value offset    * @param vlength value length    * @return created Cell    * @throws IOException    */
specifier|public
name|Cell
name|create
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|int
name|roffset
parameter_list|,
name|int
name|rlength
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|foffset
parameter_list|,
name|int
name|flength
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|int
name|qoffset
parameter_list|,
name|int
name|qlength
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|voffset
parameter_list|,
name|int
name|vlength
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|row
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|,
name|family
argument_list|,
name|foffset
argument_list|,
name|flength
argument_list|,
name|qualifier
argument_list|,
name|qoffset
argument_list|,
name|qlength
argument_list|,
name|timestamp
argument_list|,
name|value
argument_list|,
name|voffset
argument_list|,
name|vlength
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param row row key    * @param roffset row offset    * @param rlength row length    * @param family family name    * @param foffset family offset    * @param flength family length    * @param qualifier column qualifier    * @param qoffset qualifier offset    * @param qlength qualifier length    * @param timestamp version timestamp    * @param value column value    * @param voffset value offset    * @param vlength value length    * @param visExpression visibility expression to be associated with cell    * @return created Cell    * @throws IOException    */
specifier|public
name|Cell
name|create
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|int
name|roffset
parameter_list|,
name|int
name|rlength
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|foffset
parameter_list|,
name|int
name|flength
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|int
name|qoffset
parameter_list|,
name|int
name|qlength
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|voffset
parameter_list|,
name|int
name|vlength
parameter_list|,
name|String
name|visExpression
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|visTags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|visExpression
operator|!=
literal|null
condition|)
block|{
name|visTags
operator|=
name|this
operator|.
name|visExpResolver
operator|.
name|createVisibilityExpTags
argument_list|(
name|visExpression
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|,
name|family
argument_list|,
name|foffset
argument_list|,
name|flength
argument_list|,
name|qualifier
argument_list|,
name|qoffset
argument_list|,
name|qlength
argument_list|,
name|timestamp
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|,
name|voffset
argument_list|,
name|vlength
argument_list|,
name|visTags
argument_list|)
return|;
block|}
block|}
end_class

end_unit

