begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompoundConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DefaultStoreEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|ExploringCompactionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|FIFOCompactionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_comment
comment|/**  * Only used for master to sanity check {@link org.apache.hadoop.hbase.client.TableDescriptor}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|TableDescriptorChecker
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TableDescriptorChecker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_SANITY_CHECKS
init|=
literal|"hbase.table.sanity.checks"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_TABLE_SANITY_CHECKS
init|=
literal|true
decl_stmt|;
comment|//should we check the compression codec type at master side, default true, HBASE-6370
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_CHECK_COMPRESSION
init|=
literal|"hbase.master.check.compression"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_MASTER_CHECK_COMPRESSION
init|=
literal|true
decl_stmt|;
comment|//should we check encryption settings at master side, default true
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_CHECK_ENCRYPTION
init|=
literal|"hbase.master.check.encryption"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_MASTER_CHECK_ENCRYPTION
init|=
literal|true
decl_stmt|;
specifier|private
name|TableDescriptorChecker
parameter_list|()
block|{   }
comment|/**    * Checks whether the table conforms to some sane limits, and configured    * values (compression, etc) work. Throws an exception if something is wrong.    */
specifier|public
specifier|static
name|void
name|sanityCheck
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TableDescriptor
name|td
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Setting this to true logs the warning instead of throwing exception
name|boolean
name|logWarn
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|TABLE_SANITY_CHECKS
argument_list|,
name|DEFAULT_TABLE_SANITY_CHECKS
argument_list|)
condition|)
block|{
name|logWarn
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|tableVal
init|=
name|td
operator|.
name|getValue
argument_list|(
name|TABLE_SANITY_CHECKS
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableVal
operator|!=
literal|null
operator|&&
operator|!
name|Boolean
operator|.
name|valueOf
argument_list|(
name|tableVal
argument_list|)
condition|)
block|{
name|logWarn
operator|=
literal|true
expr_stmt|;
block|}
comment|// check max file size
name|long
name|maxFileSizeLowerLimit
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
comment|// 2M is the default lower limit
name|long
name|maxFileSize
init|=
name|td
operator|.
name|getMaxFileSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxFileSize
operator|<
literal|0
condition|)
block|{
name|maxFileSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MAX_FILESIZE
argument_list|,
name|maxFileSizeLowerLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxFileSize
operator|<
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hregion.max.filesize.limit"
argument_list|,
name|maxFileSizeLowerLimit
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"MAX_FILESIZE for table descriptor or "
operator|+
literal|"\"hbase.hregion.max.filesize\" ("
operator|+
name|maxFileSize
operator|+
literal|") is too small, which might cause over splitting into unmanageable "
operator|+
literal|"number of regions."
decl_stmt|;
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check flush size
name|long
name|flushSizeLowerLimit
init|=
literal|1024
operator|*
literal|1024L
decl_stmt|;
comment|// 1M is the default lower limit
name|long
name|flushSize
init|=
name|td
operator|.
name|getMemStoreFlushSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|flushSize
operator|<
literal|0
condition|)
block|{
name|flushSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
name|flushSizeLowerLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flushSize
operator|<
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hregion.memstore.flush.size.limit"
argument_list|,
name|flushSizeLowerLimit
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"MEMSTORE_FLUSHSIZE for table descriptor or "
operator|+
literal|"\"hbase.hregion.memstore.flush.size\" ("
operator|+
name|flushSize
operator|+
literal|") is too small, which might cause"
operator|+
literal|" very frequent flushing."
decl_stmt|;
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check that coprocessors and other specified plugin classes can be loaded
try|try
block|{
name|checkClassLoading
argument_list|(
name|conf
argument_list|,
name|td
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MASTER_CHECK_COMPRESSION
argument_list|,
name|DEFAULT_MASTER_CHECK_COMPRESSION
argument_list|)
condition|)
block|{
comment|// check compression can be loaded
try|try
block|{
name|checkCompression
argument_list|(
name|td
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MASTER_CHECK_ENCRYPTION
argument_list|,
name|DEFAULT_MASTER_CHECK_ENCRYPTION
argument_list|)
condition|)
block|{
comment|// check encryption can be loaded
try|try
block|{
name|checkEncryption
argument_list|(
name|conf
argument_list|,
name|td
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify compaction policy
try|try
block|{
name|checkCompactionPolicy
argument_list|(
name|conf
argument_list|,
name|td
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warnOrThrowExceptionForFailure
argument_list|(
literal|false
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// check that we have at least 1 CF
if|if
condition|(
name|td
operator|.
name|getColumnFamilyCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Table should have at least one column family."
decl_stmt|;
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check that we have minimum 1 region replicas
name|int
name|regionReplicas
init|=
name|td
operator|.
name|getRegionReplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionReplicas
operator|<
literal|1
condition|)
block|{
name|String
name|message
init|=
literal|"Table region replication should be at least one."
decl_stmt|;
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|td
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
if|if
condition|(
name|hcd
operator|.
name|getTimeToLive
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"TTL for column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" must be positive."
decl_stmt|;
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check blockSize
if|if
condition|(
name|hcd
operator|.
name|getBlocksize
argument_list|()
operator|<
literal|1024
operator|||
name|hcd
operator|.
name|getBlocksize
argument_list|()
operator|>
literal|16
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|String
name|message
init|=
literal|"Block size for column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"  must be between 1K and 16MB."
decl_stmt|;
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check versions
if|if
condition|(
name|hcd
operator|.
name|getMinVersions
argument_list|()
operator|<
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Min versions for column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"  must be positive."
decl_stmt|;
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// max versions already being checked
comment|// HBASE-13776 Setting illegal versions for ColumnFamilyDescriptor
comment|//  does not throw IllegalArgumentException
comment|// check minVersions<= maxVerions
if|if
condition|(
name|hcd
operator|.
name|getMinVersions
argument_list|()
operator|>
name|hcd
operator|.
name|getMaxVersions
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Min versions for column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" must be less than the Max versions."
decl_stmt|;
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check replication scope
name|checkReplicationScope
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// check bloom filter type
name|checkBloomFilterType
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// check data replication factor, it can be 0(default value) when user has not explicitly
comment|// set the value, in this case we use default replication factor set in the file system.
if|if
condition|(
name|hcd
operator|.
name|getDFSReplication
argument_list|()
operator|<
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"HFile Replication for column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"  must be greater than zero."
decl_stmt|;
name|warnOrThrowExceptionForFailure
argument_list|(
name|logWarn
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|checkReplicationScope
parameter_list|(
specifier|final
name|ColumnFamilyDescriptor
name|cfd
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check replication scope
name|WALProtos
operator|.
name|ScopeType
name|scop
init|=
name|WALProtos
operator|.
name|ScopeType
operator|.
name|valueOf
argument_list|(
name|cfd
operator|.
name|getScope
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scop
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Replication scope for column family "
operator|+
name|cfd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" is "
operator|+
name|cfd
operator|.
name|getScope
argument_list|()
operator|+
literal|" which is invalid."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkCompactionPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableDescriptor
name|td
parameter_list|)
throws|throws
name|IOException
block|{
comment|// FIFO compaction has some requirements
comment|// Actually FCP ignores periodic major compactions
name|String
name|className
init|=
name|td
operator|.
name|getValue
argument_list|(
name|DefaultStoreEngine
operator|.
name|DEFAULT_COMPACTION_POLICY_CLASS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
name|className
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DefaultStoreEngine
operator|.
name|DEFAULT_COMPACTION_POLICY_CLASS_KEY
argument_list|,
name|ExploringCompactionPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|blockingFileCount
init|=
name|HStore
operator|.
name|DEFAULT_BLOCKING_STOREFILE_COUNT
decl_stmt|;
name|String
name|sv
init|=
name|td
operator|.
name|getValue
argument_list|(
name|HStore
operator|.
name|BLOCKING_STOREFILES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|sv
operator|!=
literal|null
condition|)
block|{
name|blockingFileCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|blockingFileCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HStore
operator|.
name|BLOCKING_STOREFILES_KEY
argument_list|,
name|blockingFileCount
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|td
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|String
name|compactionPolicy
init|=
name|hcd
operator|.
name|getConfigurationValue
argument_list|(
name|DefaultStoreEngine
operator|.
name|DEFAULT_COMPACTION_POLICY_CLASS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactionPolicy
operator|==
literal|null
condition|)
block|{
name|compactionPolicy
operator|=
name|className
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|compactionPolicy
operator|.
name|equals
argument_list|(
name|FIFOCompactionPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// FIFOCompaction
name|String
name|message
init|=
literal|null
decl_stmt|;
comment|// 1. Check TTL
if|if
condition|(
name|hcd
operator|.
name|getTimeToLive
argument_list|()
operator|==
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_TTL
condition|)
block|{
name|message
operator|=
literal|"Default TTL is not supported for FIFO compaction"
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// 2. Check min versions
if|if
condition|(
name|hcd
operator|.
name|getMinVersions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|message
operator|=
literal|"MIN_VERSION> 0 is not supported for FIFO compaction"
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// 3. blocking file count
name|sv
operator|=
name|hcd
operator|.
name|getConfigurationValue
argument_list|(
name|HStore
operator|.
name|BLOCKING_STOREFILES_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|sv
operator|!=
literal|null
condition|)
block|{
name|blockingFileCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockingFileCount
operator|<
literal|1000
condition|)
block|{
name|message
operator|=
literal|"Blocking file count '"
operator|+
name|HStore
operator|.
name|BLOCKING_STOREFILES_KEY
operator|+
literal|"' "
operator|+
name|blockingFileCount
operator|+
literal|" is below recommended minimum of 1000 for column family "
operator|+
name|hcd
operator|.
name|getNameAsString
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|checkBloomFilterType
parameter_list|(
name|ColumnFamilyDescriptor
name|cfd
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|CompoundConfiguration
argument_list|()
operator|.
name|addStringMap
argument_list|(
name|cfd
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|BloomFilterUtil
operator|.
name|getBloomFilterParam
argument_list|(
name|cfd
operator|.
name|getBloomFilterType
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Failed to get bloom filter param"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkCompression
parameter_list|(
specifier|final
name|TableDescriptor
name|td
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|ColumnFamilyDescriptor
name|cfd
range|:
name|td
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|CompressionTest
operator|.
name|testCompression
argument_list|(
name|cfd
operator|.
name|getCompressionType
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionTest
operator|.
name|testCompression
argument_list|(
name|cfd
operator|.
name|getCompactionCompressionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkEncryption
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TableDescriptor
name|td
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|ColumnFamilyDescriptor
name|cfd
range|:
name|td
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|EncryptionTest
operator|.
name|testEncryption
argument_list|(
name|conf
argument_list|,
name|cfd
operator|.
name|getEncryptionType
argument_list|()
argument_list|,
name|cfd
operator|.
name|getEncryptionKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkClassLoading
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TableDescriptor
name|td
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionSplitPolicy
operator|.
name|getSplitPolicyClass
argument_list|(
name|td
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|RegionCoprocessorHost
operator|.
name|testTableCoprocessorAttrs
argument_list|(
name|conf
argument_list|,
name|td
argument_list|)
expr_stmt|;
block|}
comment|// HBASE-13350 - Helper method to log warning on sanity check failures if checks disabled.
specifier|private
specifier|static
name|void
name|warnOrThrowExceptionForFailure
parameter_list|(
name|boolean
name|logWarn
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|cause
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|logWarn
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|message
operator|+
literal|" Set "
operator|+
name|TABLE_SANITY_CHECKS
operator|+
literal|" to false at conf or table descriptor if you want to bypass sanity checks"
argument_list|,
name|cause
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

