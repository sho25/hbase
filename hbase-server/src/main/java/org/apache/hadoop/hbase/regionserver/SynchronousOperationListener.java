begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * An OperationListener supporting getting result directly. Temporarily used when AsyncRegion is  * not fully non-blocking. When call getResult of this class, the operation must have been done.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SynchronousOperationListener
parameter_list|<
name|T
parameter_list|>
implements|implements
name|OperationListener
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|T
name|result
decl_stmt|;
specifier|private
name|boolean
name|done
decl_stmt|;
specifier|private
name|Throwable
name|error
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|completed
parameter_list|(
name|T
name|result
parameter_list|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
comment|/**    * We call this method after calling operation of AsyncRegion synchronously in the same thread.    * So no need to lock and success/fail must has been called.    */
specifier|public
name|T
name|getResult
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|done
assert|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
comment|// We also need throw unchecked throwable
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|error
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Wrap to IOE if it is not IOE or unchecked
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

