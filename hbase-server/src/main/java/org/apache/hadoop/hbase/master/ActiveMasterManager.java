begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZNodeClearer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MasterAddressTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_comment
comment|/**  * Handles everything on master-side related to master election.  *  *<p>Listens and responds to ZooKeeper notifications on the master znode,  * both<code>nodeCreated</code> and<code>nodeDeleted</code>.  *  *<p>Contains blocking methods which will hold up backup masters, waiting  * for the active master to fail.  *  *<p>This class is instantiated in the HMaster constructor and the method  * #blockUntilBecomingActiveMaster() is called to wait until becoming  * the active master of the cluster.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ActiveMasterManager
extends|extends
name|ZKListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveMasterManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|clusterHasActiveMaster
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|clusterShutDown
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// This server's information.
specifier|private
specifier|final
name|ServerName
name|sn
decl_stmt|;
specifier|private
name|int
name|infoPort
decl_stmt|;
specifier|private
specifier|final
name|Server
name|master
decl_stmt|;
comment|// Active master's server name. Invalidated anytime active master changes (based on ZK
comment|// notifications) and lazily fetched on-demand.
comment|// ServerName is immutable, so we don't need heavy synchronization around it.
specifier|private
specifier|volatile
name|ServerName
name|activeMasterServerName
decl_stmt|;
comment|/**    * @param watcher ZK watcher    * @param sn ServerName    * @param master In an instance of a Master.    */
name|ActiveMasterManager
parameter_list|(
name|ZKWatcher
name|watcher
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|Server
name|master
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|sn
operator|=
name|sn
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
block|}
comment|// will be set after jetty server is started
specifier|public
name|void
name|setInfoPort
parameter_list|(
name|int
name|infoPort
parameter_list|)
block|{
name|this
operator|.
name|infoPort
operator|=
name|infoPort
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|handle
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeDeleted
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// We need to keep track of the cluster's shutdown status while
comment|// we wait on the current master. We consider that, if the cluster
comment|// was already in a "shutdown" state when we started, that this master
comment|// is part of a new cluster that was started shortly after the old cluster
comment|// shut down, so that state is now irrelevant. This means that the shutdown
comment|// state must be set while we wait on the active master in order
comment|// to shutdown this master. See HBASE-8519.
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|clusterStateZNode
argument_list|)
operator|&&
operator|!
name|master
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|clusterShutDown
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|handle
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|void
name|handle
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|masterAddressZNode
argument_list|)
operator|&&
operator|!
name|master
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|handleMasterNodeChange
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Fetches the active master's ServerName from zookeeper.    */
specifier|private
name|void
name|fetchAndSetActiveMasterServerName
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to fetch active master sn from zk"
argument_list|)
expr_stmt|;
try|try
block|{
name|activeMasterServerName
operator|=
name|MasterAddressTracker
operator|.
name|getMasterAddress
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|KeeperException
name|e
parameter_list|)
block|{
comment|// Log and ignore for now and re-fetch later if needed.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error fetching active master information"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Optional
argument_list|<
name|ServerName
argument_list|>
name|getActiveMasterServerName
parameter_list|()
block|{
if|if
condition|(
operator|!
name|clusterHasActiveMaster
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
if|if
condition|(
name|activeMasterServerName
operator|==
literal|null
condition|)
block|{
name|fetchAndSetActiveMasterServerName
argument_list|()
expr_stmt|;
block|}
comment|// It could still be null, but return whatever we have.
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|activeMasterServerName
argument_list|)
return|;
block|}
comment|/**    * Handle a change in the master node.  Doesn't matter whether this was called    * from a nodeCreated or nodeDeleted event because there are no guarantees    * that the current state of the master node matches the event at the time of    * our next ZK request.    *    *<p>Uses the watchAndCheckExists method which watches the master address node    * regardless of whether it exists or not.  If it does exist (there is an    * active master), it returns true.  Otherwise it returns false.    *    *<p>A watcher is set which guarantees that this method will get called again if    * there is another change in the master node.    */
specifier|private
name|void
name|handleMasterNodeChange
parameter_list|()
block|{
comment|// Watch the node and check if it exists.
try|try
block|{
synchronized|synchronized
init|(
name|clusterHasActiveMaster
init|)
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|watchAndCheckExists
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|masterAddressZNode
argument_list|)
condition|)
block|{
comment|// A master node exists, there is an active master
name|LOG
operator|.
name|trace
argument_list|(
literal|"A master is now available"
argument_list|)
expr_stmt|;
name|clusterHasActiveMaster
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Node is no longer there, cluster does not have an active master
name|LOG
operator|.
name|debug
argument_list|(
literal|"No master available. Notifying waiting threads"
argument_list|)
expr_stmt|;
name|clusterHasActiveMaster
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Notify any thread waiting to become the active master
name|clusterHasActiveMaster
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// Reset the active master sn. Will be re-fetched later if needed.
comment|// We don't want to make a synchronous RPC under a monitor.
name|activeMasterServerName
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|master
operator|.
name|abort
argument_list|(
literal|"Received an unexpected KeeperException, aborting"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Block until becoming the active master.    *    * Method blocks until there is not another active master and our attempt    * to become the new active master is successful.    *    * This also makes sure that we are watching the master znode so will be    * notified if another master dies.    * @param checkInterval the interval to check if the master is stopped    * @param startupStatus the monitor status to track the progress    * @return True if no issue becoming active master else false if another    *   master was running or if some other problem (zookeeper, stop flag has been    *   set on this Master)    */
name|boolean
name|blockUntilBecomingActiveMaster
parameter_list|(
name|int
name|checkInterval
parameter_list|,
name|MonitoredTask
name|startupStatus
parameter_list|)
block|{
name|String
name|backupZNode
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|backupMasterAddressesZNode
argument_list|,
name|this
operator|.
name|sn
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|master
operator|.
name|isAborted
argument_list|()
operator|||
name|master
operator|.
name|isStopped
argument_list|()
operator|)
condition|)
block|{
name|startupStatus
operator|.
name|setStatus
argument_list|(
literal|"Trying to register in ZK as active master"
argument_list|)
expr_stmt|;
comment|// Try to become the active master, watch if there is another master.
comment|// Write out our ServerName as versioned bytes.
try|try
block|{
if|if
condition|(
name|MasterAddressTracker
operator|.
name|setMasterAddress
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|this
operator|.
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|masterAddressZNode
argument_list|,
name|this
operator|.
name|sn
argument_list|,
name|infoPort
argument_list|)
condition|)
block|{
comment|// If we were a backup master before, delete our ZNode from the backup
comment|// master directory since we are the active now)
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|backupZNode
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting ZNode for "
operator|+
name|backupZNode
operator|+
literal|" from backup master directory"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNodeFailSilent
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|backupZNode
argument_list|)
expr_stmt|;
block|}
comment|// Save the znode in a file, this will allow to check if we crash in the launch scripts
name|ZNodeClearer
operator|.
name|writeMyEphemeralNodeOnDisk
argument_list|(
name|this
operator|.
name|sn
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// We are the master, return
name|startupStatus
operator|.
name|setStatus
argument_list|(
literal|"Successfully registered as active master."
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterHasActiveMaster
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|activeMasterServerName
operator|=
name|sn
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered as active master="
operator|+
name|this
operator|.
name|sn
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Invalidate the active master name so that subsequent requests do not get any stale
comment|// master information. Will be re-fetched if needed.
name|activeMasterServerName
operator|=
literal|null
expr_stmt|;
comment|// There is another active master running elsewhere or this is a restart
comment|// and the master ephemeral node has not expired yet.
name|this
operator|.
name|clusterHasActiveMaster
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|msg
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getDataAndWatch
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|this
operator|.
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|masterAddressZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
operator|(
literal|"A master was detected, but went down before its address "
operator|+
literal|"could be read.  Attempting to become the next active master"
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ServerName
name|currentMaster
decl_stmt|;
try|try
block|{
name|currentMaster
operator|=
name|ProtobufUtil
operator|.
name|parseServerNameFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Hopefully next time around we won't fail the parse.  Dangerous.
continue|continue;
block|}
if|if
condition|(
name|ServerName
operator|.
name|isSameAddress
argument_list|(
name|currentMaster
argument_list|,
name|this
operator|.
name|sn
argument_list|)
condition|)
block|{
name|msg
operator|=
operator|(
literal|"Current master has this master's address, "
operator|+
name|currentMaster
operator|+
literal|"; master was restarted? Deleting node."
operator|)
expr_stmt|;
comment|// Hurry along the expiration of the znode.
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|this
operator|.
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|masterAddressZNode
argument_list|)
expr_stmt|;
comment|// We may have failed to delete the znode at the previous step, but
comment|//  we delete the file anyway: a second attempt to delete the znode is likely to fail
comment|//  again.
name|ZNodeClearer
operator|.
name|deleteMyEphemeralNodeOnDisk
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
literal|"Another master is the active master, "
operator|+
name|currentMaster
operator|+
literal|"; waiting to become the next active master"
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|startupStatus
operator|.
name|setStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|master
operator|.
name|abort
argument_list|(
literal|"Received an unexpected KeeperException, aborting"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|clusterHasActiveMaster
init|)
block|{
while|while
condition|(
name|clusterHasActiveMaster
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|master
operator|.
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|clusterHasActiveMaster
operator|.
name|wait
argument_list|(
name|checkInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// We expect to be interrupted when a master dies,
comment|//  will fall out if so
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted waiting for master to die"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clusterShutDown
operator|.
name|get
argument_list|()
condition|)
block|{
name|this
operator|.
name|master
operator|.
name|stop
argument_list|(
literal|"Cluster went down before this master became active"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @return True if cluster has an active master.    */
name|boolean
name|hasActiveMaster
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|masterAddressZNode
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received an unexpected KeeperException when checking "
operator|+
literal|"isActiveMaster : "
operator|+
name|ke
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|clusterHasActiveMaster
init|)
block|{
comment|// Master is already stopped, wake up the manager
comment|// thread so that it can shutdown soon.
name|clusterHasActiveMaster
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// If our address is in ZK, delete it on our way out
name|ServerName
name|activeMaster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|activeMaster
operator|=
name|MasterAddressTracker
operator|.
name|getMasterAddress
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed get of master address: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|activeMaster
operator|!=
literal|null
operator|&&
name|activeMaster
operator|.
name|equals
argument_list|(
name|this
operator|.
name|sn
argument_list|)
condition|)
block|{
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|masterAddressZNode
argument_list|)
expr_stmt|;
comment|// We may have failed to delete the znode at the previous step, but
comment|//  we delete the file anyway: a second attempt to delete the znode is likely to fail again.
name|ZNodeClearer
operator|.
name|deleteMyEphemeralNodeOnDisk
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|.
name|watcher
operator|.
name|prefix
argument_list|(
literal|"Failed delete of our master address node; "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

