begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Span
import|;
end_import

begin_comment
comment|/**  * A 'truck' to carry a payload across the ring buffer from Handler to WAL. Has EITHER a  * {@link FSWALEntry} for making an append OR it has a {@link SyncFuture} to represent a 'sync'  * invocation. Truck instances are reused by the disruptor when it gets around to it so their  * payload references must be discarded on consumption to release them to GC.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|final
class|class
name|RingBufferTruck
block|{
specifier|public
enum|enum
name|Type
block|{
name|APPEND
block|,
name|SYNC
block|,
name|EMPTY
block|}
specifier|private
name|Type
name|type
init|=
name|Type
operator|.
name|EMPTY
decl_stmt|;
comment|/**    * Either this syncFuture is set or entry is set, but not both.    */
specifier|private
name|SyncFuture
name|sync
decl_stmt|;
specifier|private
name|FSWALEntry
name|entry
decl_stmt|;
comment|/**    * Load the truck with a {@link FSWALEntry} and associated {@link Span}.    */
name|void
name|load
parameter_list|(
name|FSWALEntry
name|entry
parameter_list|,
name|Span
name|span
parameter_list|)
block|{
name|entry
operator|.
name|attachSpan
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|APPEND
expr_stmt|;
block|}
comment|/**    * Load the truck with a {@link SyncFuture}.    */
name|void
name|load
parameter_list|(
specifier|final
name|SyncFuture
name|syncFuture
parameter_list|)
block|{
name|this
operator|.
name|sync
operator|=
name|syncFuture
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|SYNC
expr_stmt|;
block|}
comment|/**    * @return the type of this truck's payload.    */
name|Type
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**    * Unload the truck of its {@link FSWALEntry} payload. The internal reference is released.    */
name|FSWALEntry
name|unloadAppend
parameter_list|()
block|{
name|FSWALEntry
name|entry
init|=
name|this
operator|.
name|entry
decl_stmt|;
name|this
operator|.
name|entry
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|EMPTY
expr_stmt|;
return|return
name|entry
return|;
block|}
comment|/**    * Unload the truck of its {@link SyncFuture} payload. The internal reference is released.    */
name|SyncFuture
name|unloadSync
parameter_list|()
block|{
name|SyncFuture
name|sync
init|=
name|this
operator|.
name|sync
decl_stmt|;
name|this
operator|.
name|sync
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|EMPTY
expr_stmt|;
return|return
name|sync
return|;
block|}
block|}
end_class

end_unit

