begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_comment
comment|/**  * This can be used when a Cell has to change with addition/removal of one or more tags. This is an  * efficient way to do so in which only the tags bytes part need to recreated and copied. All other  * parts, refer to the original Cell.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TagRewriteCell
implements|implements
name|Cell
implements|,
name|SettableSequenceId
implements|,
name|SettableTimestamp
implements|,
name|HeapSize
block|{
specifier|private
name|Cell
name|cell
decl_stmt|;
specifier|private
name|byte
index|[]
name|tags
decl_stmt|;
comment|/**    * @param cell The original Cell which it rewrites    * @param tags the tags bytes. The array suppose to contain the tags bytes alone.    */
specifier|public
name|TagRewriteCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
assert|assert
name|cell
operator|instanceof
name|SettableSequenceId
assert|;
assert|assert
name|cell
operator|instanceof
name|SettableTimestamp
assert|;
name|this
operator|.
name|cell
operator|=
name|cell
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|tags
expr_stmt|;
comment|// tag offset will be treated as 0 and length this.tags.length
if|if
condition|(
name|this
operator|.
name|cell
operator|instanceof
name|TagRewriteCell
condition|)
block|{
comment|// Cleaning the ref so that the byte[] can be GCed
operator|(
operator|(
name|TagRewriteCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|tags
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getRowArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getRowOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getRowLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getFamilyArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getFamilyOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getFamilyLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getQualifierArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getQualifierOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getQualifierLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|long
name|getMvccVersion
parameter_list|()
block|{
return|return
name|getSequenceId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getSequenceId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getValueArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getValueOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getValueLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|tags
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|tags
operator|.
name|length
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|byte
index|[]
name|getValue
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|byte
index|[]
name|getFamily
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getFamily
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|byte
index|[]
name|getQualifier
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getQualifier
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getRow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
name|long
name|sum
init|=
name|CellUtil
operator|.
name|estimatedHeapSizeOf
argument_list|(
name|cell
argument_list|)
operator|-
name|cell
operator|.
name|getTagsLength
argument_list|()
decl_stmt|;
name|sum
operator|+=
name|ClassSize
operator|.
name|OBJECT
expr_stmt|;
comment|// this object itself
name|sum
operator|+=
operator|(
literal|2
operator|*
name|ClassSize
operator|.
name|REFERENCE
operator|)
expr_stmt|;
comment|// pointers to cell and tags array
if|if
condition|(
name|this
operator|.
name|tags
operator|!=
literal|null
condition|)
block|{
name|sum
operator|+=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|ARRAY
argument_list|)
expr_stmt|;
comment|// "tags"
name|sum
operator|+=
name|this
operator|.
name|tags
operator|.
name|length
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The incoming cell is supposed to be SettableTimestamp type.
name|CellUtil
operator|.
name|setTimestamp
argument_list|(
name|cell
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|byte
index|[]
name|ts
parameter_list|,
name|int
name|tsOffset
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The incoming cell is supposed to be SettableTimestamp type.
name|CellUtil
operator|.
name|setTimestamp
argument_list|(
name|cell
argument_list|,
name|ts
argument_list|,
name|tsOffset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSequenceId
parameter_list|(
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The incoming cell is supposed to be SettableSequenceId type.
name|CellUtil
operator|.
name|setSequenceId
argument_list|(
name|cell
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

