begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheableDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
operator|.
name|MemoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferArray
import|;
end_import

begin_comment
comment|/**  * IO engine that stores data in memory using an array of ByteBuffers  * {@link ByteBufferArray}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ByteBufferIOEngine
implements|implements
name|IOEngine
block|{
specifier|private
name|ByteBufferArray
name|bufferArray
decl_stmt|;
specifier|private
specifier|final
name|long
name|capacity
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|direct
decl_stmt|;
comment|/**    * Construct the ByteBufferIOEngine with the given capacity    * @param capacity    * @param direct true if allocate direct buffer    * @throws IOException    */
specifier|public
name|ByteBufferIOEngine
parameter_list|(
name|long
name|capacity
parameter_list|,
name|boolean
name|direct
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|direct
operator|=
name|direct
expr_stmt|;
name|bufferArray
operator|=
operator|new
name|ByteBufferArray
argument_list|(
name|capacity
argument_list|,
name|direct
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ioengine="
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|", capacity="
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%,d"
argument_list|,
name|this
operator|.
name|capacity
argument_list|)
operator|+
literal|", direct="
operator|+
name|this
operator|.
name|direct
return|;
block|}
comment|/**    * Memory IO engine is always unable to support persistent storage for the    * cache    * @return false    */
annotation|@
name|Override
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cacheable
name|read
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|deserializer
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuff
name|dstBuffer
init|=
name|bufferArray
operator|.
name|asSubByteBuff
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
comment|// Here the buffer that is created directly refers to the buffer in the actual buckets.
comment|// When any cell is referring to the blocks created out of these buckets then it means that
comment|// those cells are referring to a shared memory area which if evicted by the BucketCache would
comment|// lead to corruption of results. Hence we set the type of the buffer as SHARED_MEMORY
comment|// so that the readers using this block are aware of this fact and do the necessary action
comment|// to prevent eviction till the results are either consumed or copied
return|return
name|deserializer
operator|.
name|deserialize
argument_list|(
name|dstBuffer
argument_list|,
literal|true
argument_list|,
name|MemoryType
operator|.
name|SHARED
argument_list|)
return|;
block|}
comment|/**    * Transfers data from the given byte buffer to the buffer array    * @param srcBuffer the given byte buffer from which bytes are to be read    * @param offset The offset in the ByteBufferArray of the first byte to be    *          written    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ByteBuffer
name|srcBuffer
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|srcBuffer
operator|.
name|hasArray
argument_list|()
assert|;
name|bufferArray
operator|.
name|putMultiple
argument_list|(
name|offset
argument_list|,
name|srcBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|srcBuffer
operator|.
name|array
argument_list|()
argument_list|,
name|srcBuffer
operator|.
name|arrayOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ByteBuff
name|srcBuffer
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
comment|// When caching block into BucketCache there will be single buffer backing for this HFileBlock.
comment|// This will work for now. But from the DFS itself if we get DBB then this may not hold true.
assert|assert
name|srcBuffer
operator|.
name|hasArray
argument_list|()
assert|;
name|bufferArray
operator|.
name|putMultiple
argument_list|(
name|offset
argument_list|,
name|srcBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|srcBuffer
operator|.
name|array
argument_list|()
argument_list|,
name|srcBuffer
operator|.
name|arrayOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * No operation for the sync in the memory IO engine    */
annotation|@
name|Override
specifier|public
name|void
name|sync
parameter_list|()
block|{
comment|// Nothing to do.
block|}
comment|/**    * No operation for the shutdown in the memory IO engine    */
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// Nothing to do.
block|}
block|}
end_class

end_unit

