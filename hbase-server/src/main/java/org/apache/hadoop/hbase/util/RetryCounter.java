begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RetryCounter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RetryCounter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxRetries
decl_stmt|;
specifier|private
name|int
name|retriesRemaining
decl_stmt|;
specifier|private
specifier|final
name|int
name|retryIntervalMillis
decl_stmt|;
specifier|private
specifier|final
name|TimeUnit
name|timeUnit
decl_stmt|;
specifier|public
name|RetryCounter
parameter_list|(
name|int
name|maxRetries
parameter_list|,
name|int
name|retryIntervalMillis
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
operator|.
name|maxRetries
operator|=
name|maxRetries
expr_stmt|;
name|this
operator|.
name|retriesRemaining
operator|=
name|maxRetries
expr_stmt|;
name|this
operator|.
name|retryIntervalMillis
operator|=
name|retryIntervalMillis
expr_stmt|;
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxRetries
parameter_list|()
block|{
return|return
name|maxRetries
return|;
block|}
comment|/**    * Sleep for a exponentially back off time    * @throws InterruptedException    */
specifier|public
name|void
name|sleepUntilNextRetry
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|attempts
init|=
name|getAttemptTimes
argument_list|()
decl_stmt|;
name|long
name|sleepTime
init|=
call|(
name|long
call|)
argument_list|(
name|retryIntervalMillis
operator|*
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|attempts
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping "
operator|+
name|sleepTime
operator|+
literal|"ms before retry #"
operator|+
name|attempts
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|timeUnit
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|shouldRetry
parameter_list|()
block|{
return|return
name|retriesRemaining
operator|>
literal|0
return|;
block|}
specifier|public
name|void
name|useRetry
parameter_list|()
block|{
name|retriesRemaining
operator|--
expr_stmt|;
block|}
specifier|public
name|int
name|getAttemptTimes
parameter_list|()
block|{
return|return
name|maxRetries
operator|-
name|retriesRemaining
operator|+
literal|1
return|;
block|}
block|}
end_class

end_unit

