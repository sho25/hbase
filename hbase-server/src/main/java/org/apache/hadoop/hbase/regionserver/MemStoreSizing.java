begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Accounting of current heap and data sizes.  * Allows read/write on data/heap size as opposed to {@Link MemStoreSize} which is read-only.  * For internal use.  * @see MemStoreSize  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MemStoreSizing
extends|extends
name|MemStoreSize
block|{
specifier|public
specifier|static
specifier|final
name|MemStoreSizing
name|DUD
init|=
operator|new
name|MemStoreSizing
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|incMemStoreSize
parameter_list|(
name|MemStoreSize
name|delta
parameter_list|)
block|{
name|incMemStoreSize
argument_list|(
name|delta
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|delta
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incMemStoreSize
parameter_list|(
name|long
name|dataSizeDelta
parameter_list|,
name|long
name|heapSizeDelta
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"I'm a dud, you can't use me!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decMemStoreSize
parameter_list|(
name|MemStoreSize
name|delta
parameter_list|)
block|{
name|decMemStoreSize
argument_list|(
name|delta
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|delta
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decMemStoreSize
parameter_list|(
name|long
name|dataSizeDelta
parameter_list|,
name|long
name|heapSizeDelta
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"I'm a dud, you can't use me!"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
specifier|public
name|MemStoreSizing
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MemStoreSizing
parameter_list|(
name|long
name|dataSize
parameter_list|,
name|long
name|heapSize
parameter_list|)
block|{
name|super
argument_list|(
name|dataSize
argument_list|,
name|heapSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incMemStoreSize
parameter_list|(
name|long
name|dataSizeDelta
parameter_list|,
name|long
name|heapSizeDelta
parameter_list|)
block|{
name|this
operator|.
name|dataSize
operator|+=
name|dataSizeDelta
expr_stmt|;
name|this
operator|.
name|heapSize
operator|+=
name|heapSizeDelta
expr_stmt|;
block|}
specifier|public
name|void
name|incMemStoreSize
parameter_list|(
name|MemStoreSize
name|delta
parameter_list|)
block|{
name|incMemStoreSize
argument_list|(
name|delta
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|delta
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|decMemStoreSize
parameter_list|(
name|long
name|dataSizeDelta
parameter_list|,
name|long
name|heapSizeDelta
parameter_list|)
block|{
name|this
operator|.
name|dataSize
operator|-=
name|dataSizeDelta
expr_stmt|;
name|this
operator|.
name|heapSize
operator|-=
name|heapSizeDelta
expr_stmt|;
block|}
specifier|public
name|void
name|decMemStoreSize
parameter_list|(
name|MemStoreSize
name|delta
parameter_list|)
block|{
name|decMemStoreSize
argument_list|(
name|delta
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|delta
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|empty
parameter_list|()
block|{
name|this
operator|.
name|dataSize
operator|=
literal|0L
expr_stmt|;
name|this
operator|.
name|heapSize
operator|=
literal|0L
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|MemStoreSizing
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MemStoreSizing
name|other
init|=
operator|(
name|MemStoreSizing
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|dataSize
operator|==
name|other
operator|.
name|dataSize
operator|&&
name|this
operator|.
name|heapSize
operator|==
name|other
operator|.
name|heapSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|long
name|h
init|=
literal|13
operator|*
name|this
operator|.
name|dataSize
decl_stmt|;
name|h
operator|=
name|h
operator|+
literal|14
operator|*
name|this
operator|.
name|heapSize
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|h
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"dataSize="
operator|+
name|this
operator|.
name|dataSize
operator|+
literal|" , heapSize="
operator|+
name|this
operator|.
name|heapSize
return|;
block|}
block|}
end_class

end_unit

