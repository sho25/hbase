begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Accounting of current heap and data sizes.  * Tracks 3 sizes:  *<ol>  *<li></li>data size: the aggregated size of all key-value not including meta data such as  * index, time range etc.  *</li>  *<li>heap size: the aggregated size of all data that is allocated on-heap including all  * key-values that reside on-heap and the metadata that resides on-heap  *</li>  *<li></li>off-heap size: the aggregated size of all data that is allocated off-heap including all  * key-values that reside off-heap and the metadata that resides off-heap  *</li>  *</ol>  *  * 3 examples to illustrate their usage:  *<p>  * Consider a store with 100MB of key-values allocated on-heap and 20MB of metadata allocated  * on-heap. The counters are<100MB, 120MB, 0>, respectively.  *</p>  *<p>Consider a store with 100MB of key-values allocated off-heap and 20MB of metadata  * allocated on-heap (e.g, CAM index). The counters are<100MB, 20MB, 100MB>, respectively.  *</p>  *<p>  * Consider a store with 100MB of key-values from which 95MB are allocated off-heap and 5MB  * are allocated on-heap (e.g., due to upserts) and 20MB of metadata from which 15MB allocated  * off-heap (e.g, CCM index) and 5MB allocated on-heap (e.g, CSLM index in active).  * The counters are<100MB, 10MB, 110MB>, respectively.  *</p>  *  * Like {@link TimeRangeTracker}, it has thread-safe and non-thread-safe implementations.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|MemStoreSizing
block|{
specifier|static
specifier|final
name|MemStoreSizing
name|DUD
init|=
operator|new
name|MemStoreSizing
argument_list|()
block|{
specifier|private
specifier|final
name|MemStoreSize
name|mss
init|=
operator|new
name|MemStoreSize
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|MemStoreSize
name|getMemStoreSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|mss
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDataSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|mss
operator|.
name|getDataSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getHeapSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|mss
operator|.
name|getHeapSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getOffHeapSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|mss
operator|.
name|getOffHeapSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|incMemStoreSize
parameter_list|(
name|long
name|dataSizeDelta
parameter_list|,
name|long
name|heapSizeDelta
parameter_list|,
name|long
name|offHeapSizeDelta
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"I'm a DUD, you can't use me!"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
comment|/**    * @return The new dataSize ONLY as a convenience    */
name|long
name|incMemStoreSize
parameter_list|(
name|long
name|dataSizeDelta
parameter_list|,
name|long
name|heapSizeDelta
parameter_list|,
name|long
name|offHeapSizeDelta
parameter_list|)
function_decl|;
specifier|default
name|long
name|incMemStoreSize
parameter_list|(
name|MemStoreSize
name|delta
parameter_list|)
block|{
return|return
name|incMemStoreSize
argument_list|(
name|delta
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|delta
operator|.
name|getHeapSize
argument_list|()
argument_list|,
name|delta
operator|.
name|getOffHeapSize
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return The new dataSize ONLY as a convenience    */
specifier|default
name|long
name|decMemStoreSize
parameter_list|(
name|long
name|dataSizeDelta
parameter_list|,
name|long
name|heapSizeDelta
parameter_list|,
name|long
name|offHeapSizeDelta
parameter_list|)
block|{
return|return
name|incMemStoreSize
argument_list|(
operator|-
name|dataSizeDelta
argument_list|,
operator|-
name|heapSizeDelta
argument_list|,
operator|-
name|offHeapSizeDelta
argument_list|)
return|;
block|}
specifier|default
name|long
name|decMemStoreSize
parameter_list|(
name|MemStoreSize
name|delta
parameter_list|)
block|{
return|return
name|incMemStoreSize
argument_list|(
operator|-
name|delta
operator|.
name|getDataSize
argument_list|()
argument_list|,
operator|-
name|delta
operator|.
name|getHeapSize
argument_list|()
argument_list|,
operator|-
name|delta
operator|.
name|getOffHeapSize
argument_list|()
argument_list|)
return|;
block|}
name|long
name|getDataSize
parameter_list|()
function_decl|;
name|long
name|getHeapSize
parameter_list|()
function_decl|;
name|long
name|getOffHeapSize
parameter_list|()
function_decl|;
comment|/**    * @return Use this datastructure to return all three settings, {@link #getDataSize()},    * {@link #getHeapSize()}, and {@link #getOffHeapSize()}, in the one go.    */
name|MemStoreSize
name|getMemStoreSize
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

