begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|GarbageCollectorMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|JvmPauseMonitorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Class which sets up a simple thread which runs in a loop sleeping  * for a short interval of time. If the sleep takes significantly longer  * than its target time, it implies that the JVM or host machine has  * paused processing, which may cause other problems. If such a pause is  * detected, the thread logs a message.  * The original JvmPauseMonitor is:  * ${hadoop-common-project}/hadoop-common/src/main/java/org/apache/hadoop/util/  * JvmPauseMonitor.java  * r1503806 | cmccabe | 2013-07-17 01:48:24 +0800 (Wed, 17 Jul 2013) | 1 line  * HADOOP-9618.  thread which detects GC pauses(Todd Lipcon)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|JvmPauseMonitor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JvmPauseMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** The target sleep time */
specifier|private
specifier|static
specifier|final
name|long
name|SLEEP_INTERVAL_MS
init|=
literal|500
decl_stmt|;
comment|/** log WARN if we detect a pause longer than this threshold */
specifier|private
specifier|final
name|long
name|warnThresholdMs
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WARN_THRESHOLD_KEY
init|=
literal|"jvm.pause.warn-threshold.ms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|WARN_THRESHOLD_DEFAULT
init|=
literal|10000
decl_stmt|;
comment|/** log INFO if we detect a pause longer than this threshold */
specifier|private
specifier|final
name|long
name|infoThresholdMs
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INFO_THRESHOLD_KEY
init|=
literal|"jvm.pause.info-threshold.ms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|INFO_THRESHOLD_DEFAULT
init|=
literal|1000
decl_stmt|;
specifier|private
name|Thread
name|monitorThread
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|shouldRun
init|=
literal|true
decl_stmt|;
specifier|private
name|JvmPauseMonitorSource
name|metricsSource
decl_stmt|;
specifier|public
name|JvmPauseMonitor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JvmPauseMonitor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|JvmPauseMonitorSource
name|metricsSource
parameter_list|)
block|{
name|this
operator|.
name|warnThresholdMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|WARN_THRESHOLD_KEY
argument_list|,
name|WARN_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoThresholdMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|INFO_THRESHOLD_KEY
argument_list|,
name|INFO_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|metricsSource
operator|=
name|metricsSource
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|monitorThread
operator|==
literal|null
argument_list|,
literal|"Already started"
argument_list|)
expr_stmt|;
name|monitorThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Monitor
argument_list|()
argument_list|,
literal|"JvmPauseMonitor"
argument_list|)
expr_stmt|;
name|monitorThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monitorThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
name|monitorThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|monitorThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|formatMessage
parameter_list|(
name|long
name|extraSleepTime
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|gcDiffs
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"Detected pause in JVM or host machine (eg GC): "
operator|+
literal|"pause of approximately "
operator|+
name|extraSleepTime
operator|+
literal|"ms\n"
decl_stmt|;
if|if
condition|(
name|gcDiffs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|+=
literal|"No GCs detected"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|gcDiffs
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|GcTimes
argument_list|>
name|getGcTimes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|GcTimes
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|GarbageCollectorMXBean
argument_list|>
name|gcBeans
init|=
name|ManagementFactory
operator|.
name|getGarbageCollectorMXBeans
argument_list|()
decl_stmt|;
for|for
control|(
name|GarbageCollectorMXBean
name|gcBean
range|:
name|gcBeans
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|gcBean
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|GcTimes
argument_list|(
name|gcBean
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
specifier|static
class|class
name|GcTimes
block|{
specifier|private
name|GcTimes
parameter_list|(
name|GarbageCollectorMXBean
name|gcBean
parameter_list|)
block|{
name|gcCount
operator|=
name|gcBean
operator|.
name|getCollectionCount
argument_list|()
expr_stmt|;
name|gcTimeMillis
operator|=
name|gcBean
operator|.
name|getCollectionTime
argument_list|()
expr_stmt|;
block|}
specifier|private
name|GcTimes
parameter_list|(
name|long
name|count
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|gcCount
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|gcTimeMillis
operator|=
name|time
expr_stmt|;
block|}
specifier|private
name|GcTimes
name|subtract
parameter_list|(
name|GcTimes
name|other
parameter_list|)
block|{
return|return
operator|new
name|GcTimes
argument_list|(
name|this
operator|.
name|gcCount
operator|-
name|other
operator|.
name|gcCount
argument_list|,
name|this
operator|.
name|gcTimeMillis
operator|-
name|other
operator|.
name|gcTimeMillis
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"count="
operator|+
name|gcCount
operator|+
literal|" time="
operator|+
name|gcTimeMillis
operator|+
literal|"ms"
return|;
block|}
specifier|private
name|long
name|gcCount
decl_stmt|;
specifier|private
name|long
name|gcTimeMillis
decl_stmt|;
block|}
specifier|private
class|class
name|Monitor
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createUnstarted
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GcTimes
argument_list|>
name|gcTimesBeforeSleep
init|=
name|getGcTimes
argument_list|()
decl_stmt|;
while|while
condition|(
name|shouldRun
condition|)
block|{
name|sw
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
return|return;
block|}
name|long
name|extraSleepTime
init|=
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|-
name|SLEEP_INTERVAL_MS
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GcTimes
argument_list|>
name|gcTimesAfterSleep
init|=
name|getGcTimes
argument_list|()
decl_stmt|;
if|if
condition|(
name|extraSleepTime
operator|>
name|infoThresholdMs
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|gcBeanNames
init|=
name|Sets
operator|.
name|intersection
argument_list|(
name|gcTimesAfterSleep
operator|.
name|keySet
argument_list|()
argument_list|,
name|gcTimesBeforeSleep
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|gcDiffs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|gcBeanNames
control|)
block|{
name|GcTimes
name|diff
init|=
name|gcTimesAfterSleep
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|subtract
argument_list|(
name|gcTimesBeforeSleep
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|gcCount
operator|!=
literal|0
condition|)
block|{
name|gcDiffs
operator|.
name|add
argument_list|(
literal|"GC pool '"
operator|+
name|name
operator|+
literal|"' had collection(s): "
operator|+
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|updateMetrics
argument_list|(
name|extraSleepTime
argument_list|,
operator|!
name|gcDiffs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraSleepTime
operator|>
name|warnThresholdMs
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|formatMessage
argument_list|(
name|extraSleepTime
argument_list|,
name|gcDiffs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|formatMessage
argument_list|(
name|extraSleepTime
argument_list|,
name|gcDiffs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|gcTimesBeforeSleep
operator|=
name|gcTimesAfterSleep
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|updateMetrics
parameter_list|(
name|long
name|sleepTime
parameter_list|,
name|boolean
name|gcDetected
parameter_list|)
block|{
if|if
condition|(
name|metricsSource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sleepTime
operator|>
name|warnThresholdMs
condition|)
block|{
name|metricsSource
operator|.
name|incWarnThresholdExceeded
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metricsSource
operator|.
name|incInfoThresholdExceeded
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gcDetected
condition|)
block|{
name|metricsSource
operator|.
name|updatePauseTimeWithGc
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metricsSource
operator|.
name|updatePauseTimeWithoutGc
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|JvmPauseMonitorSource
name|getMetricsSource
parameter_list|()
block|{
return|return
name|metricsSource
return|;
block|}
specifier|public
name|void
name|setMetricsSource
parameter_list|(
name|JvmPauseMonitorSource
name|metricsSource
parameter_list|)
block|{
name|this
operator|.
name|metricsSource
operator|=
name|metricsSource
expr_stmt|;
block|}
comment|/**    * Simple 'main' to facilitate manual testing of the pause monitor.    *     * This main function just leaks memory into a list. Running this class    * with a 1GB heap will very quickly go into "GC hell" and result in    * log messages about the GC pauses.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|JvmPauseMonitor
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

