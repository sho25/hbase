begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|TableProcedureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|FailedRemoteDispatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureYieldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
operator|.
name|RemoteProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|RegionRemoteProcedureBaseStateData
import|;
end_import

begin_comment
comment|/**  * The base class for the remote procedures used to open/close a region.  *<p/>  * Notice that here we do not care about the result of the remote call, if the remote call is  * finished, either succeeded or not, we will always finish the procedure. The parent procedure  * should take care of the result and try to reschedule if the result is not good.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|RegionRemoteProcedureBase
extends|extends
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
implements|implements
name|TableProcedureInterface
implements|,
name|RemoteProcedure
argument_list|<
name|MasterProcedureEnv
argument_list|,
name|ServerName
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionRemoteProcedureBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|RegionInfo
name|region
decl_stmt|;
specifier|private
name|ServerName
name|targetServer
decl_stmt|;
specifier|private
name|boolean
name|dispatched
decl_stmt|;
specifier|protected
name|RegionRemoteProcedureBase
parameter_list|()
block|{   }
specifier|protected
name|RegionRemoteProcedureBase
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|ServerName
name|targetServer
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|targetServer
operator|=
name|targetServer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteOperationCompleted
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
comment|// should not be called since we use reportRegionStateTransition to report the result
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteOperationFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RemoteProcedureException
name|error
parameter_list|)
block|{
comment|// should not be called since we use reportRegionStateTransition to report the result
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|RegionStateNode
name|getRegionNode
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|region
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteCallFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerName
name|remote
parameter_list|,
name|IOException
name|exception
parameter_list|)
block|{
name|RegionStateNode
name|regionNode
init|=
name|getRegionNode
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|regionNode
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|event
init|=
name|regionNode
operator|.
name|getProcedureEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|isReady
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The procedure event of procedure {} for region {} to server {} is not suspended, "
operator|+
literal|"usually this should not happen, but anyway let's skip the following wake up code, "
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|targetServer
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"The remote operation {} for region {} to server {} failed"
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|targetServer
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|event
operator|.
name|wake
argument_list|(
name|env
operator|.
name|getProcedureScheduler
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|regionNode
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|region
operator|.
name|getTable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|waitInitialized
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// First we need meta to be loaded, and second, if meta is not online then we will likely to
comment|// fail when updating meta so we wait until it is assigned.
name|AssignmentManager
name|am
init|=
name|env
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
return|return
name|am
operator|.
name|waitMetaLoaded
argument_list|(
name|this
argument_list|)
operator|||
name|am
operator|.
name|waitMetaAssigned
argument_list|(
name|this
argument_list|,
name|region
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Check whether we still need to make the call to RS.    *<p/>    * This could happen when master restarts. Since we do not know whether a request has already been    * sent to the region server after we add a remote operation to the dispatcher, so the safe way is    * to not persist the dispatched field and try to add the remote operation again. But it is    * possible that we do have already sent the request to region server and it has also sent back    * the response, so here we need to check the region state, if it is not in the expecting state,    * we should give up, otherwise we may hang for ever, as the region server will just ignore    * redundant calls.    */
specifier|protected
specifier|abstract
name|boolean
name|shouldDispatch
parameter_list|(
name|RegionStateNode
name|regionNode
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
index|[]
name|execute
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|dispatched
condition|)
block|{
comment|// we are done, the parent procedure will check whether we are succeeded.
return|return
literal|null
return|;
block|}
name|RegionStateNode
name|regionNode
init|=
name|getRegionNode
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|regionNode
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|shouldDispatch
argument_list|(
name|regionNode
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// The code which wakes us up also needs to lock the RSN so here we do not need to synchronize
comment|// on the event.
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|event
init|=
name|regionNode
operator|.
name|getProcedureEvent
argument_list|()
decl_stmt|;
try|try
block|{
name|env
operator|.
name|getRemoteDispatcher
argument_list|()
operator|.
name|addOperationToNode
argument_list|(
name|targetServer
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedRemoteDispatchException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not add remote operation {} for region {} to server {}, this usually "
operator|+
literal|"because the server is alread dead, give up and mark the procedure as complete, "
operator|+
literal|"the parent procedure will take care of this."
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|targetServer
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|dispatched
operator|=
literal|true
expr_stmt|;
name|event
operator|.
name|suspend
argument_list|()
expr_stmt|;
name|event
operator|.
name|suspendIfNotReady
argument_list|(
name|this
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureSuspendedException
argument_list|()
throw|;
block|}
finally|finally
block|{
name|regionNode
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|RegionRemoteProcedureBaseStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRegion
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|region
argument_list|)
argument_list|)
operator|.
name|setTargetServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|targetServer
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionRemoteProcedureBaseStateData
name|data
init|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|RegionRemoteProcedureBaseStateData
operator|.
name|class
argument_list|)
decl_stmt|;
name|region
operator|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|data
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
name|targetServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
operator|.
name|getTargetServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

