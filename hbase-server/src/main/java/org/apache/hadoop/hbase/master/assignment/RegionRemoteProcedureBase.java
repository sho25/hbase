begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnexpectedStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|TableProcedureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|FailedRemoteDispatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureYieldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
operator|.
name|RemoteProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RetryCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|RegionRemoteProcedureBaseState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|RegionRemoteProcedureBaseStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
operator|.
name|TransitionCode
import|;
end_import

begin_comment
comment|/**  * The base class for the remote procedures used to open/close a region.  *<p/>  * Notice that here we do not care about the result of the remote call, if the remote call is  * finished, either succeeded or not, we will always finish the procedure. The parent procedure  * should take care of the result and try to reschedule if the result is not good.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|RegionRemoteProcedureBase
extends|extends
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
implements|implements
name|TableProcedureInterface
implements|,
name|RemoteProcedure
argument_list|<
name|MasterProcedureEnv
argument_list|,
name|ServerName
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionRemoteProcedureBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|RegionInfo
name|region
decl_stmt|;
specifier|protected
name|ServerName
name|targetServer
decl_stmt|;
specifier|private
name|RegionRemoteProcedureBaseState
name|state
init|=
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_DISPATCH
decl_stmt|;
specifier|private
name|TransitionCode
name|transitionCode
decl_stmt|;
specifier|private
name|long
name|seqId
decl_stmt|;
specifier|private
name|RetryCounter
name|retryCounter
decl_stmt|;
specifier|protected
name|RegionRemoteProcedureBase
parameter_list|()
block|{   }
specifier|protected
name|RegionRemoteProcedureBase
parameter_list|(
name|TransitRegionStateProcedure
name|parent
parameter_list|,
name|RegionInfo
name|region
parameter_list|,
name|ServerName
name|targetServer
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|targetServer
operator|=
name|targetServer
expr_stmt|;
name|parent
operator|.
name|attachRemoteProc
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RemoteProcedureDispatcher
operator|.
name|RemoteOperation
argument_list|>
name|remoteCallBuild
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerName
name|remote
parameter_list|)
block|{
comment|// REPORT_SUCCEED means that this remote open/close request already executed in RegionServer.
comment|// So return empty operation and RSProcedureDispatcher no need to send it again.
if|if
condition|(
name|state
operator|==
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_REPORT_SUCCEED
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|newRemoteOperation
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|RemoteProcedureDispatcher
operator|.
name|RemoteOperation
name|newRemoteOperation
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|remoteOperationCompleted
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
comment|// should not be called since we use reportRegionStateTransition to report the result
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteOperationFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RemoteProcedureException
name|error
parameter_list|)
block|{
comment|// should not be called since we use reportRegionStateTransition to report the result
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|RegionStateNode
name|getRegionNode
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|region
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteCallFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerName
name|remote
parameter_list|,
name|IOException
name|exception
parameter_list|)
block|{
name|RegionStateNode
name|regionNode
init|=
name|getRegionNode
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|regionNode
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|isServerOnline
argument_list|(
name|remote
argument_list|)
condition|)
block|{
comment|// the SCP will interrupt us, give up
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} for region {}, targetServer {} is dead, SCP will interrupt us, give up"
argument_list|,
name|this
argument_list|,
name|regionNode
argument_list|,
name|remote
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|state
operator|!=
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_DISPATCH
condition|)
block|{
comment|// not sure how can this happen but anyway let's add a check here to avoid waking the wrong
comment|// procedure...
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} for region {}, targetServer={} has already been woken up, ignore"
argument_list|,
name|this
argument_list|,
name|regionNode
argument_list|,
name|remote
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"The remote operation {} for region {} to server {} failed"
argument_list|,
name|this
argument_list|,
name|regionNode
argument_list|,
name|remote
argument_list|,
name|exception
argument_list|)
expr_stmt|;
comment|// It is OK to not persist the state here, as we do not need to change the region state if the
comment|// remote call is failed. If the master crashed before we actually execute the procedure and
comment|// persist the new state, it is fine to retry on the same target server again.
name|state
operator|=
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_DISPATCH_FAIL
expr_stmt|;
name|regionNode
operator|.
name|getProcedureEvent
argument_list|()
operator|.
name|wake
argument_list|(
name|env
operator|.
name|getProcedureScheduler
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|regionNode
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|region
operator|.
name|getTable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|waitInitialized
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// First we need meta to be loaded, and second, if meta is not online then we will likely to
comment|// fail when updating meta so we wait until it is assigned.
name|AssignmentManager
name|am
init|=
name|env
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
return|return
name|am
operator|.
name|waitMetaLoaded
argument_list|(
name|this
argument_list|)
operator|||
name|am
operator|.
name|waitMetaAssigned
argument_list|(
name|this
argument_list|,
name|region
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|// do some checks to see if the report is valid
specifier|protected
specifier|abstract
name|void
name|checkTransition
parameter_list|(
name|RegionStateNode
name|regionNode
parameter_list|,
name|TransitionCode
name|transitionCode
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|UnexpectedStateException
function_decl|;
comment|// change the in memory state of the regionNode, but do not update meta.
specifier|protected
specifier|abstract
name|void
name|updateTransitionWithoutPersistingToMeta
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|,
name|TransitionCode
name|transitionCode
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|// A bit strange but the procedure store will throw RuntimeException if we can not persist the
comment|// state, so upper layer should take care of this...
specifier|private
name|void
name|persistAndWake
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getStore
argument_list|()
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|regionNode
operator|.
name|getProcedureEvent
argument_list|()
operator|.
name|wake
argument_list|(
name|env
operator|.
name|getProcedureScheduler
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// should be called with RegionStateNode locked, to avoid race with the execute method below
name|void
name|reportTransition
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|TransitionCode
name|transitionCode
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|!=
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_DISPATCH
condition|)
block|{
comment|// should be a retry
return|return;
block|}
if|if
condition|(
operator|!
name|targetServer
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnexpectedStateException
argument_list|(
literal|"Received report from "
operator|+
name|serverName
operator|+
literal|", expected "
operator|+
name|targetServer
operator|+
literal|", "
operator|+
name|regionNode
operator|+
literal|", proc="
operator|+
name|this
argument_list|)
throw|;
block|}
name|checkTransition
argument_list|(
name|regionNode
argument_list|,
name|transitionCode
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
comment|// this state means we have received the report from RS, does not mean the result is fine, as we
comment|// may received a FAILED_OPEN.
name|this
operator|.
name|state
operator|=
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_REPORT_SUCCEED
expr_stmt|;
name|this
operator|.
name|transitionCode
operator|=
name|transitionCode
expr_stmt|;
name|this
operator|.
name|seqId
operator|=
name|seqId
expr_stmt|;
comment|// Persist the transition code and openSeqNum(if provided).
comment|// We should not update the hbase:meta directly as this may cause races when master restarts,
comment|// as the old active master may incorrectly report back to RS and cause the new master to hang
comment|// on a OpenRegionProcedure forever. See HBASE-22060 and HBASE-22074 for more details.
name|boolean
name|succ
init|=
literal|false
decl_stmt|;
try|try
block|{
name|persistAndWake
argument_list|(
name|env
argument_list|,
name|regionNode
argument_list|)
expr_stmt|;
name|succ
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|succ
condition|)
block|{
name|this
operator|.
name|state
operator|=
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_DISPATCH
expr_stmt|;
name|this
operator|.
name|transitionCode
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|seqId
operator|=
name|HConstants
operator|.
name|NO_SEQNUM
expr_stmt|;
block|}
block|}
try|try
block|{
name|updateTransitionWithoutPersistingToMeta
argument_list|(
name|env
argument_list|,
name|regionNode
argument_list|,
name|transitionCode
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not happen"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|void
name|serverCrashed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_SERVER_CRASH
condition|)
block|{
comment|// should be a retry
return|return;
block|}
name|RegionRemoteProcedureBaseState
name|oldState
init|=
name|state
decl_stmt|;
comment|// it is possible that the state is in REGION_REMOTE_PROCEDURE_SERVER_CRASH, think of this
comment|// sequence
comment|// 1. region is open on the target server and the above reportTransition call is succeeded
comment|// 2. before we are woken up and update the meta, the target server crashes, and then we arrive
comment|// here
name|this
operator|.
name|state
operator|=
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_SERVER_CRASH
expr_stmt|;
name|boolean
name|succ
init|=
literal|false
decl_stmt|;
try|try
block|{
name|persistAndWake
argument_list|(
name|env
argument_list|,
name|regionNode
argument_list|)
expr_stmt|;
name|succ
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|succ
condition|)
block|{
name|this
operator|.
name|state
operator|=
name|oldState
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|restoreSucceedState
parameter_list|(
name|AssignmentManager
name|am
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|stateLoaded
parameter_list|(
name|AssignmentManager
name|am
parameter_list|,
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|RegionRemoteProcedureBaseState
operator|.
name|REGION_REMOTE_PROCEDURE_REPORT_SUCCEED
condition|)
block|{
try|try
block|{
name|restoreSucceedState
argument_list|(
name|am
argument_list|,
name|regionNode
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should not happen as we are just restoring the state
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|TransitRegionStateProcedure
name|getParent
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
operator|(
name|TransitRegionStateProcedure
operator|)
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getProcedure
argument_list|(
name|getParentProcId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|unattach
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|getParent
argument_list|(
name|env
argument_list|)
operator|.
name|unattachRemoteProc
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
index|[]
name|execute
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
name|RegionStateNode
name|regionNode
init|=
name|getRegionNode
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|regionNode
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|REGION_REMOTE_PROCEDURE_DISPATCH
case|:
block|{
comment|// The code which wakes us up also needs to lock the RSN so here we do not need to
comment|// synchronize
comment|// on the event.
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|event
init|=
name|regionNode
operator|.
name|getProcedureEvent
argument_list|()
decl_stmt|;
try|try
block|{
name|env
operator|.
name|getRemoteDispatcher
argument_list|()
operator|.
name|addOperationToNode
argument_list|(
name|targetServer
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedRemoteDispatchException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not add remote operation {} for region {} to server {}, this usually "
operator|+
literal|"because the server is alread dead, give up and mark the procedure as complete, "
operator|+
literal|"the parent procedure will take care of this."
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|targetServer
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|unattach
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|event
operator|.
name|suspend
argument_list|()
expr_stmt|;
name|event
operator|.
name|suspendIfNotReady
argument_list|(
name|this
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureSuspendedException
argument_list|()
throw|;
block|}
case|case
name|REGION_REMOTE_PROCEDURE_REPORT_SUCCEED
case|:
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|persistToMeta
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
name|unattach
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
case|case
name|REGION_REMOTE_PROCEDURE_DISPATCH_FAIL
case|:
comment|// the remote call is failed so we do not need to change the region state, just return.
name|unattach
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
case|case
name|REGION_REMOTE_PROCEDURE_SERVER_CRASH
case|:
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|regionClosedAbnormally
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
name|unattach
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown state: "
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|retryCounter
operator|==
literal|null
condition|)
block|{
name|retryCounter
operator|=
name|ProcedureUtil
operator|.
name|createRetryCounter
argument_list|(
name|env
operator|.
name|getMasterConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|backoff
init|=
name|retryCounter
operator|.
name|getBackoffTimeAndIncrementAttempts
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed updating meta, suspend {}secs {}; {};"
argument_list|,
name|backoff
operator|/
literal|1000
argument_list|,
name|this
argument_list|,
name|regionNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setTimeout
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|backoff
argument_list|)
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|ProcedureProtos
operator|.
name|ProcedureState
operator|.
name|WAITING_TIMEOUT
argument_list|)
expr_stmt|;
name|skipPersistence
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ProcedureSuspendedException
argument_list|()
throw|;
block|}
finally|finally
block|{
name|regionNode
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|storeInDispatchedQueue
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionRemoteProcedureBaseStateData
operator|.
name|Builder
name|builder
init|=
name|RegionRemoteProcedureBaseStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRegion
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|region
argument_list|)
argument_list|)
operator|.
name|setTargetServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|targetServer
argument_list|)
argument_list|)
operator|.
name|setState
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|transitionCode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setTransitionCode
argument_list|(
name|transitionCode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSeqId
argument_list|(
name|seqId
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|serialize
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionRemoteProcedureBaseStateData
name|data
init|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|RegionRemoteProcedureBaseStateData
operator|.
name|class
argument_list|)
decl_stmt|;
name|region
operator|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|data
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
name|targetServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
operator|.
name|getTargetServer
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
name|data
operator|.
name|getState
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|hasTransitionCode
argument_list|()
condition|)
block|{
name|transitionCode
operator|=
name|data
operator|.
name|getTransitionCode
argument_list|()
expr_stmt|;
name|seqId
operator|=
name|data
operator|.
name|getSeqId
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterReplay
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|getParent
argument_list|(
name|env
argument_list|)
operator|.
name|attachRemoteProc
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

