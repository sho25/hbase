begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|compaction
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|MajorCompactionRequest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MajorCompactionRequest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|RegionInfo
name|region
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|stores
decl_stmt|;
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
annotation|@
name|VisibleForTesting
name|MajorCompactionRequest
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|RegionInfo
name|region
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|stores
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|stores
operator|=
name|stores
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|static
name|Optional
argument_list|<
name|MajorCompactionRequest
argument_list|>
name|newRequest
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|RegionInfo
name|info
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|stores
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|MajorCompactionRequest
name|request
init|=
operator|new
name|MajorCompactionRequest
argument_list|(
name|configuration
argument_list|,
name|info
argument_list|,
name|stores
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
return|return
name|request
operator|.
name|createRequest
argument_list|(
name|configuration
argument_list|,
name|stores
argument_list|)
return|;
block|}
name|RegionInfo
name|getRegion
parameter_list|()
block|{
return|return
name|region
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|getStores
parameter_list|()
block|{
return|return
name|stores
return|;
block|}
name|void
name|setStores
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|stores
parameter_list|)
block|{
name|this
operator|.
name|stores
operator|=
name|stores
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|Optional
argument_list|<
name|MajorCompactionRequest
argument_list|>
name|createRequest
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|stores
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|familiesToCompact
init|=
name|getStoresRequiringCompaction
argument_list|(
name|stores
argument_list|)
decl_stmt|;
name|MajorCompactionRequest
name|request
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|familiesToCompact
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|=
operator|new
name|MajorCompactionRequest
argument_list|(
name|configuration
argument_list|,
name|region
argument_list|,
name|familiesToCompact
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|request
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|getStoresRequiringCompaction
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|requestedStores
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|getConnection
argument_list|(
name|configuration
argument_list|)
init|)
block|{
name|HRegionFileSystem
name|fileSystem
init|=
name|getFileSystem
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|familiesToCompact
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|family
range|:
name|requestedStores
control|)
block|{
comment|// do we have any store files?
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
name|storeFiles
init|=
name|fileSystem
operator|.
name|getStoreFiles
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeFiles
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Excluding store: "
operator|+
name|family
operator|+
literal|" for compaction for region:  "
operator|+
name|fileSystem
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
literal|" has no store files"
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// check for reference files
if|if
condition|(
name|fileSystem
operator|.
name|hasReferences
argument_list|(
name|family
argument_list|)
operator|&&
name|familyHasReferenceFile
argument_list|(
name|fileSystem
argument_list|,
name|family
argument_list|)
condition|)
block|{
name|familiesToCompact
operator|.
name|add
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Including store: "
operator|+
name|family
operator|+
literal|" with: "
operator|+
name|storeFiles
operator|.
name|size
argument_list|()
operator|+
literal|" files for compaction for region: "
operator|+
name|fileSystem
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// check store file timestamps
name|boolean
name|includeStore
init|=
literal|false
decl_stmt|;
for|for
control|(
name|StoreFileInfo
name|storeFile
range|:
name|storeFiles
control|)
block|{
if|if
condition|(
name|storeFile
operator|.
name|getModificationTime
argument_list|()
operator|<
name|timestamp
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Including store: "
operator|+
name|family
operator|+
literal|" with: "
operator|+
name|storeFiles
operator|.
name|size
argument_list|()
operator|+
literal|" files for compaction for region: "
operator|+
name|fileSystem
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|familiesToCompact
operator|.
name|add
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|includeStore
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|includeStore
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Excluding store: "
operator|+
name|family
operator|+
literal|" for compaction for region:  "
operator|+
name|fileSystem
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
literal|" already compacted"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|familiesToCompact
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|Connection
name|getConnection
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|familyHasReferenceFile
parameter_list|(
name|HRegionFileSystem
name|fileSystem
parameter_list|,
name|String
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|referenceFiles
init|=
name|getReferenceFilePaths
argument_list|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|fileSystem
operator|.
name|getStoreDir
argument_list|(
name|family
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|referenceFile
range|:
name|referenceFiles
control|)
block|{
name|FileStatus
name|status
init|=
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileLinkStatus
argument_list|(
name|referenceFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getModificationTime
argument_list|()
operator|<
name|timestamp
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Including store: "
operator|+
name|family
operator|+
literal|" for compaction for region:  "
operator|+
name|fileSystem
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" (reference store files)"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|VisibleForTesting
name|List
argument_list|<
name|Path
argument_list|>
name|getReferenceFilePaths
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|Path
name|familyDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FSUtils
operator|.
name|getReferenceFilePaths
argument_list|(
name|fileSystem
argument_list|,
name|familyDir
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|HRegionFileSystem
name|getFileSystem
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|Admin
name|admin
init|=
name|connection
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
return|return
name|HRegionFileSystem
operator|.
name|openRegionFromFileSystem
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getCurrentFileSystem
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|region
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"region: "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" store(s): "
operator|+
name|stores
return|;
block|}
block|}
end_class

end_unit

