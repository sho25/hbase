begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|BlockingServiceAndInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|ServiceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RpcServerFactory
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RpcServerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_RPC_SERVER_IMPL_CONF_KEY
init|=
literal|"hbase.rpc.server.impl"
decl_stmt|;
comment|/**    * Private Constructor    */
specifier|private
name|RpcServerFactory
parameter_list|()
block|{   }
specifier|public
specifier|static
name|RpcServer
name|createRpcServer
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|services
parameter_list|,
specifier|final
name|InetSocketAddress
name|bindAddress
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RpcScheduler
name|scheduler
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|rpcServerClass
init|=
name|conf
operator|.
name|get
argument_list|(
name|CUSTOM_RPC_SERVER_IMPL_CONF_KEY
argument_list|,
name|SimpleRpcServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|servicesList
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockingServiceAndInterface
name|s
range|:
name|services
control|)
block|{
name|ServiceDescriptor
name|sd
init|=
name|s
operator|.
name|getBlockingService
argument_list|()
operator|.
name|getDescriptorForType
argument_list|()
decl_stmt|;
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
continue|continue;
comment|// Can be null for certain tests like TestTokenAuthentication
if|if
condition|(
name|servicesList
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|servicesList
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|servicesList
operator|.
name|append
argument_list|(
name|sd
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating "
operator|+
name|rpcServerClass
operator|+
literal|" hosting "
operator|+
name|servicesList
argument_list|)
expr_stmt|;
return|return
name|ReflectionUtils
operator|.
name|instantiateWithCustomCtor
argument_list|(
name|rpcServerClass
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Server
operator|.
name|class
block|,
name|String
operator|.
name|class
block|,
name|List
operator|.
name|class
block|,
name|InetSocketAddress
operator|.
name|class
block|,
name|Configuration
operator|.
name|class
block|,
name|RpcScheduler
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|server
block|,
name|name
block|,
name|services
block|,
name|bindAddress
block|,
name|conf
block|,
name|scheduler
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

