begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|master
operator|.
name|LogRollMasterProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|BaseCoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|ProcedureMember
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|ProcedureMemberRpcs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|RegionServerProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|Subprocedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|SubprocedureFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_comment
comment|/**  * This manager class handles the work dealing with backup for a {@link HRegionServer}.  *<p>  * This provides the mechanism necessary to kick off a backup specific {@link Subprocedure} that is  * responsible by this region server. If any failures occur with the subprocedure, the manager's  * procedure member notifies the procedure coordinator to abort all others.  *<p>  * On startup, requires {@link #start()} to be called.  *<p>  * On shutdown, requires org.apache.hadoop.hbase.procedure.ProcedureMember.close() to be  * called  */
end_comment

begin_class
specifier|public
class|class
name|LogRollRegionServerProcedureManager
extends|extends
name|RegionServerProcedureManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LogRollRegionServerProcedureManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Conf key for number of request threads to start backup on regionservers */
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_REQUEST_THREADS_KEY
init|=
literal|"hbase.backup.region.pool.threads"
decl_stmt|;
comment|/** # of threads for backup work on the rs. */
specifier|public
specifier|static
specifier|final
name|int
name|BACKUP_REQUEST_THREADS_DEFAULT
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_TIMEOUT_MILLIS_KEY
init|=
literal|"hbase.backup.timeout"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|BACKUP_TIMEOUT_MILLIS_DEFAULT
init|=
literal|60000
decl_stmt|;
comment|/** Conf key for millis between checks to see if backup work completed or if there are errors */
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_REQUEST_WAKE_MILLIS_KEY
init|=
literal|"hbase.backup.region.wakefrequency"
decl_stmt|;
comment|/** Default amount of time to check for errors while regions finish backup work */
specifier|private
specifier|static
specifier|final
name|long
name|BACKUP_REQUEST_WAKE_MILLIS_DEFAULT
init|=
literal|500
decl_stmt|;
specifier|private
name|RegionServerServices
name|rss
decl_stmt|;
specifier|private
name|ProcedureMemberRpcs
name|memberRpcs
decl_stmt|;
specifier|private
name|ProcedureMember
name|member
decl_stmt|;
comment|/**    * Create a default backup procedure manager    */
specifier|public
name|LogRollRegionServerProcedureManager
parameter_list|()
block|{   }
comment|/**    * Start accepting backup procedure requests.    */
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|this
operator|.
name|memberRpcs
operator|.
name|start
argument_list|(
name|rss
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started region server backup manager."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close<tt>this</tt> and all running backup procedure tasks    * @param force forcefully stop all running tasks    * @throws IOException exception    */
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|mode
init|=
name|force
condition|?
literal|"abruptly"
else|:
literal|"gracefully"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping RegionServerBackupManager "
operator|+
name|mode
operator|+
literal|"."
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|member
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|memberRpcs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * If in a running state, creates the specified subprocedure for handling a backup procedure.    * @return Subprocedure to submit to the ProcedureMemeber.    */
specifier|public
name|Subprocedure
name|buildSubprocedure
parameter_list|()
block|{
comment|// don't run a backup if the parent is stop(ping)
if|if
condition|(
name|rss
operator|.
name|isStopping
argument_list|()
operator|||
name|rss
operator|.
name|isStopped
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't start backup procedure on RS: "
operator|+
name|rss
operator|.
name|getServerName
argument_list|()
operator|+
literal|", because stopping/stopped!"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to run a roll log procedure for backup."
argument_list|)
expr_stmt|;
name|ForeignExceptionDispatcher
name|errorDispatcher
init|=
operator|new
name|ForeignExceptionDispatcher
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|rss
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|long
name|timeoutMillis
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|BACKUP_TIMEOUT_MILLIS_KEY
argument_list|,
name|BACKUP_TIMEOUT_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|wakeMillis
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|BACKUP_REQUEST_WAKE_MILLIS_KEY
argument_list|,
name|BACKUP_REQUEST_WAKE_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
name|LogRollBackupSubprocedurePool
name|taskManager
init|=
operator|new
name|LogRollBackupSubprocedurePool
argument_list|(
name|rss
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|LogRollBackupSubprocedure
argument_list|(
name|rss
argument_list|,
name|member
argument_list|,
name|errorDispatcher
argument_list|,
name|wakeMillis
argument_list|,
name|timeoutMillis
argument_list|,
name|taskManager
argument_list|)
return|;
block|}
comment|/**    * Build the actual backup procedure runner that will do all the 'hard' work    */
specifier|public
class|class
name|BackupSubprocedureBuilder
implements|implements
name|SubprocedureFactory
block|{
annotation|@
name|Override
specifier|public
name|Subprocedure
name|buildSubprocedure
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|LogRollRegionServerProcedureManager
operator|.
name|this
operator|.
name|buildSubprocedure
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|RegionServerServices
name|rss
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|rss
operator|=
name|rss
expr_stmt|;
name|BaseCoordinatedStateManager
name|coordManager
init|=
operator|(
name|BaseCoordinatedStateManager
operator|)
name|CoordinatedStateManagerFactory
operator|.
name|getCoordinatedStateManager
argument_list|(
name|rss
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|coordManager
operator|.
name|initialize
argument_list|(
name|rss
argument_list|)
expr_stmt|;
name|this
operator|.
name|memberRpcs
operator|=
name|coordManager
operator|.
name|getProcedureMemberRpcs
argument_list|(
name|LogRollMasterProcedureManager
operator|.
name|ROLLLOG_PROCEDURE_SIGNATURE
argument_list|)
expr_stmt|;
comment|// read in the backup handler configuration properties
name|Configuration
name|conf
init|=
name|rss
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|long
name|keepAlive
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|BACKUP_TIMEOUT_MILLIS_KEY
argument_list|,
name|BACKUP_TIMEOUT_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|opThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|BACKUP_REQUEST_THREADS_KEY
argument_list|,
name|BACKUP_REQUEST_THREADS_DEFAULT
argument_list|)
decl_stmt|;
comment|// create the actual cohort member
name|ThreadPoolExecutor
name|pool
init|=
name|ProcedureMember
operator|.
name|defaultPool
argument_list|(
name|rss
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|opThreads
argument_list|,
name|keepAlive
argument_list|)
decl_stmt|;
name|this
operator|.
name|member
operator|=
operator|new
name|ProcedureMember
argument_list|(
name|memberRpcs
argument_list|,
name|pool
argument_list|,
operator|new
name|BackupSubprocedureBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProcedureSignature
parameter_list|()
block|{
return|return
literal|"backup-proc"
return|;
block|}
block|}
end_class

end_unit

