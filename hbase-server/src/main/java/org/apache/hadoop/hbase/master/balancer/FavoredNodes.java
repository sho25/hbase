begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2012 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|internal
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * This class contains the mapping information between each region and  * its favored region server list. Used by {@link FavoredNodeLoadBalancer} set  * of classes and from unit tests (hence the class is public)  *  * All the access to this class is thread-safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FavoredNodes
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FavoredNodes
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** the map between each region and its favored region server list */
specifier|private
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|favoredNodesMap
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Position
block|{
name|PRIMARY
block|,
name|SECONDARY
block|,
name|TERTIARY
block|;   }
empty_stmt|;
specifier|public
name|FavoredNodes
parameter_list|()
block|{
name|favoredNodesMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add an assignment to the plan    * @param region    * @param servers    */
specifier|public
specifier|synchronized
name|void
name|updateFavoredNodesMap
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
if|if
condition|(
name|region
operator|==
literal|null
operator|||
name|servers
operator|==
literal|null
operator|||
name|servers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|this
operator|.
name|favoredNodesMap
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param region    * @return the list of favored region server for this region based on the plan    */
specifier|public
specifier|synchronized
name|List
argument_list|<
name|ServerName
argument_list|>
name|getFavoredNodes
parameter_list|(
name|HRegionInfo
name|region
parameter_list|)
block|{
return|return
name|favoredNodesMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
return|;
block|}
block|}
end_class

end_unit

