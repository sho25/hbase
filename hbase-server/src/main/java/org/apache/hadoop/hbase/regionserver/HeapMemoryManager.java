begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|ResizableBlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|HeapMemorySizeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Manages tuning of Heap memory using<code>HeapMemoryTuner</code>.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HeapMemoryManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HeapMemoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CONVERT_TO_PERCENTAGE
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CLUSTER_MINIMUM_MEMORY_THRESHOLD
init|=
call|(
name|int
call|)
argument_list|(
name|CONVERT_TO_PERCENTAGE
operator|*
name|HConstants
operator|.
name|HBASE_CLUSTER_MINIMUM_MEMORY_THRESHOLD
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_CACHE_SIZE_MAX_RANGE_KEY
init|=
literal|"hfile.block.cache.size.max.range"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_CACHE_SIZE_MIN_RANGE_KEY
init|=
literal|"hfile.block.cache.size.min.range"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MEMSTORE_SIZE_MAX_RANGE_KEY
init|=
literal|"hbase.regionserver.global.memstore.size.max.range"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MEMSTORE_SIZE_MIN_RANGE_KEY
init|=
literal|"hbase.regionserver.global.memstore.size.min.range"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_RS_HEAP_MEMORY_TUNER_PERIOD
init|=
literal|"hbase.regionserver.heapmemory.tuner.period"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HBASE_RS_HEAP_MEMORY_TUNER_DEFAULT_PERIOD
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_RS_HEAP_MEMORY_TUNER_CLASS
init|=
literal|"hbase.regionserver.heapmemory.tuner.class"
decl_stmt|;
specifier|private
name|float
name|globalMemStorePercent
decl_stmt|;
specifier|private
name|float
name|globalMemStorePercentMinRange
decl_stmt|;
specifier|private
name|float
name|globalMemStorePercentMaxRange
decl_stmt|;
specifier|private
name|float
name|blockCachePercent
decl_stmt|;
specifier|private
name|float
name|blockCachePercentMinRange
decl_stmt|;
specifier|private
name|float
name|blockCachePercentMaxRange
decl_stmt|;
specifier|private
name|float
name|l2BlockCachePercent
decl_stmt|;
specifier|private
name|float
name|heapOccupancyPercent
decl_stmt|;
specifier|private
specifier|final
name|ResizableBlockCache
name|blockCache
decl_stmt|;
specifier|private
specifier|final
name|FlushRequester
name|memStoreFlusher
decl_stmt|;
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
specifier|private
specifier|final
name|RegionServerAccounting
name|regionServerAccounting
decl_stmt|;
specifier|private
name|HeapMemoryTunerChore
name|heapMemTunerChore
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|tunerOn
decl_stmt|;
specifier|private
specifier|final
name|int
name|defaultChorePeriod
decl_stmt|;
specifier|private
specifier|final
name|float
name|heapOccupancyLowWatermark
decl_stmt|;
specifier|private
name|long
name|maxHeapSize
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
decl_stmt|;
specifier|private
name|MetricsHeapMemoryManager
name|metricsHeapMemoryManager
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HeapMemoryTuneObserver
argument_list|>
name|tuneObservers
init|=
operator|new
name|ArrayList
argument_list|<
name|HeapMemoryTuneObserver
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|HeapMemoryManager
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FlushRequester
name|memStoreFlusher
parameter_list|,
name|Server
name|server
parameter_list|,
name|RegionServerAccounting
name|regionServerAccounting
parameter_list|)
block|{
name|ResizableBlockCache
name|l1Cache
init|=
name|CacheConfig
operator|.
name|getL1
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|l1Cache
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|HeapMemoryManager
argument_list|(
name|l1Cache
argument_list|,
name|memStoreFlusher
argument_list|,
name|server
argument_list|,
name|regionServerAccounting
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|VisibleForTesting
name|HeapMemoryManager
parameter_list|(
name|ResizableBlockCache
name|blockCache
parameter_list|,
name|FlushRequester
name|memStoreFlusher
parameter_list|,
name|Server
name|server
parameter_list|,
name|RegionServerAccounting
name|regionServerAccounting
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|server
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|blockCache
operator|=
name|blockCache
expr_stmt|;
name|this
operator|.
name|memStoreFlusher
operator|=
name|memStoreFlusher
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|regionServerAccounting
operator|=
name|regionServerAccounting
expr_stmt|;
name|this
operator|.
name|tunerOn
operator|=
name|doInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultChorePeriod
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HBASE_RS_HEAP_MEMORY_TUNER_PERIOD
argument_list|,
name|HBASE_RS_HEAP_MEMORY_TUNER_DEFAULT_PERIOD
argument_list|)
expr_stmt|;
name|this
operator|.
name|heapOccupancyLowWatermark
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|HConstants
operator|.
name|HEAP_OCCUPANCY_LOW_WATERMARK_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HEAP_OCCUPANCY_LOW_WATERMARK
argument_list|)
expr_stmt|;
name|metricsHeapMemoryManager
operator|=
operator|new
name|MetricsHeapMemoryManager
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|doInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|tuningEnabled
init|=
literal|true
decl_stmt|;
name|globalMemStorePercent
operator|=
name|HeapMemorySizeUtil
operator|.
name|getGlobalMemStorePercent
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|blockCachePercent
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|HeapMemorySizeUtil
operator|.
name|checkForClusterFreeMemoryLimit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Initialize max and min range for memstore heap space
name|globalMemStorePercentMinRange
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MEMSTORE_SIZE_MIN_RANGE_KEY
argument_list|,
name|globalMemStorePercent
argument_list|)
expr_stmt|;
name|globalMemStorePercentMaxRange
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MEMSTORE_SIZE_MAX_RANGE_KEY
argument_list|,
name|globalMemStorePercent
argument_list|)
expr_stmt|;
if|if
condition|(
name|globalMemStorePercent
operator|<
name|globalMemStorePercentMinRange
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting "
operator|+
name|MEMSTORE_SIZE_MIN_RANGE_KEY
operator|+
literal|" to "
operator|+
name|globalMemStorePercent
operator|+
literal|", same value as "
operator|+
name|HeapMemorySizeUtil
operator|.
name|MEMSTORE_SIZE_KEY
operator|+
literal|" because supplied value greater than initial memstore size value."
argument_list|)
expr_stmt|;
name|globalMemStorePercentMinRange
operator|=
name|globalMemStorePercent
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|MEMSTORE_SIZE_MIN_RANGE_KEY
argument_list|,
name|globalMemStorePercentMinRange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalMemStorePercent
operator|>
name|globalMemStorePercentMaxRange
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting "
operator|+
name|MEMSTORE_SIZE_MAX_RANGE_KEY
operator|+
literal|" to "
operator|+
name|globalMemStorePercent
operator|+
literal|", same value as "
operator|+
name|HeapMemorySizeUtil
operator|.
name|MEMSTORE_SIZE_KEY
operator|+
literal|" because supplied value less than initial memstore size value."
argument_list|)
expr_stmt|;
name|globalMemStorePercentMaxRange
operator|=
name|globalMemStorePercent
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|MEMSTORE_SIZE_MAX_RANGE_KEY
argument_list|,
name|globalMemStorePercentMaxRange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalMemStorePercent
operator|==
name|globalMemStorePercentMinRange
operator|&&
name|globalMemStorePercent
operator|==
name|globalMemStorePercentMaxRange
condition|)
block|{
name|tuningEnabled
operator|=
literal|false
expr_stmt|;
block|}
comment|// Initialize max and min range for block cache
name|blockCachePercentMinRange
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|BLOCK_CACHE_SIZE_MIN_RANGE_KEY
argument_list|,
name|blockCachePercent
argument_list|)
expr_stmt|;
name|blockCachePercentMaxRange
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|BLOCK_CACHE_SIZE_MAX_RANGE_KEY
argument_list|,
name|blockCachePercent
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockCachePercent
operator|<
name|blockCachePercentMinRange
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting "
operator|+
name|BLOCK_CACHE_SIZE_MIN_RANGE_KEY
operator|+
literal|" to "
operator|+
name|blockCachePercent
operator|+
literal|", same value as "
operator|+
name|HFILE_BLOCK_CACHE_SIZE_KEY
operator|+
literal|" because supplied value greater than initial block cache size."
argument_list|)
expr_stmt|;
name|blockCachePercentMinRange
operator|=
name|blockCachePercent
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BLOCK_CACHE_SIZE_MIN_RANGE_KEY
argument_list|,
name|blockCachePercentMinRange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockCachePercent
operator|>
name|blockCachePercentMaxRange
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting "
operator|+
name|BLOCK_CACHE_SIZE_MAX_RANGE_KEY
operator|+
literal|" to "
operator|+
name|blockCachePercent
operator|+
literal|", same value as "
operator|+
name|HFILE_BLOCK_CACHE_SIZE_KEY
operator|+
literal|" because supplied value less than initial block cache size."
argument_list|)
expr_stmt|;
name|blockCachePercentMaxRange
operator|=
name|blockCachePercent
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BLOCK_CACHE_SIZE_MAX_RANGE_KEY
argument_list|,
name|blockCachePercentMaxRange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tuningEnabled
operator|&&
name|blockCachePercent
operator|==
name|blockCachePercentMinRange
operator|&&
name|blockCachePercent
operator|==
name|blockCachePercentMaxRange
condition|)
block|{
name|tuningEnabled
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|gml
init|=
call|(
name|int
call|)
argument_list|(
name|globalMemStorePercentMaxRange
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
decl_stmt|;
name|this
operator|.
name|l2BlockCachePercent
operator|=
name|HeapMemorySizeUtil
operator|.
name|getL2BlockCacheHeapPercent
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|bcul
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|blockCachePercentMinRange
operator|+
name|l2BlockCachePercent
operator|)
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|CONVERT_TO_PERCENTAGE
operator|-
operator|(
name|gml
operator|+
name|bcul
operator|)
operator|<
name|CLUSTER_MINIMUM_MEMORY_THRESHOLD
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Current heap configuration for MemStore and BlockCache exceeds "
operator|+
literal|"the threshold required for successful cluster operation. "
operator|+
literal|"The combined value cannot exceed 0.8. Please check the settings for "
operator|+
name|MEMSTORE_SIZE_MAX_RANGE_KEY
operator|+
literal|" and "
operator|+
name|BLOCK_CACHE_SIZE_MIN_RANGE_KEY
operator|+
literal|" in your configuration. "
operator|+
name|MEMSTORE_SIZE_MAX_RANGE_KEY
operator|+
literal|" is "
operator|+
name|globalMemStorePercentMaxRange
operator|+
literal|" and "
operator|+
name|BLOCK_CACHE_SIZE_MIN_RANGE_KEY
operator|+
literal|" is "
operator|+
name|blockCachePercentMinRange
argument_list|)
throw|;
block|}
name|gml
operator|=
call|(
name|int
call|)
argument_list|(
name|globalMemStorePercentMinRange
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
expr_stmt|;
name|bcul
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|blockCachePercentMaxRange
operator|+
name|l2BlockCachePercent
operator|)
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONVERT_TO_PERCENTAGE
operator|-
operator|(
name|gml
operator|+
name|bcul
operator|)
operator|<
name|CLUSTER_MINIMUM_MEMORY_THRESHOLD
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Current heap configuration for MemStore and BlockCache exceeds "
operator|+
literal|"the threshold required for successful cluster operation. "
operator|+
literal|"The combined value cannot exceed 0.8. Please check the settings for "
operator|+
name|MEMSTORE_SIZE_MIN_RANGE_KEY
operator|+
literal|" and "
operator|+
name|BLOCK_CACHE_SIZE_MAX_RANGE_KEY
operator|+
literal|" in your configuration. "
operator|+
name|MEMSTORE_SIZE_MIN_RANGE_KEY
operator|+
literal|" is "
operator|+
name|globalMemStorePercentMinRange
operator|+
literal|" and "
operator|+
name|BLOCK_CACHE_SIZE_MAX_RANGE_KEY
operator|+
literal|" is "
operator|+
name|blockCachePercentMaxRange
argument_list|)
throw|;
block|}
return|return
name|tuningEnabled
return|;
block|}
specifier|public
name|void
name|start
parameter_list|(
name|ChoreService
name|service
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting HeapMemoryTuner chore."
argument_list|)
expr_stmt|;
name|this
operator|.
name|heapMemTunerChore
operator|=
operator|new
name|HeapMemoryTunerChore
argument_list|()
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|heapMemTunerChore
argument_list|)
expr_stmt|;
if|if
condition|(
name|tunerOn
condition|)
block|{
comment|// Register HeapMemoryTuner as a memstore flush listener
name|memStoreFlusher
operator|.
name|registerFlushRequestListener
argument_list|(
name|heapMemTunerChore
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
comment|// The thread is Daemon. Just interrupting the ongoing process.
name|LOG
operator|.
name|info
argument_list|(
literal|"Stoping HeapMemoryTuner chore."
argument_list|)
expr_stmt|;
name|this
operator|.
name|heapMemTunerChore
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerTuneObserver
parameter_list|(
name|HeapMemoryTuneObserver
name|observer
parameter_list|)
block|{
name|this
operator|.
name|tuneObservers
operator|.
name|add
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
comment|// Used by the test cases.
name|boolean
name|isTunerOn
parameter_list|()
block|{
return|return
name|this
operator|.
name|tunerOn
return|;
block|}
comment|/**    * @return heap occupancy percentage, 0&lt;= n&lt;= 1    */
specifier|public
name|float
name|getHeapOccupancyPercent
parameter_list|()
block|{
return|return
name|this
operator|.
name|heapOccupancyPercent
return|;
block|}
specifier|private
class|class
name|HeapMemoryTunerChore
extends|extends
name|ScheduledChore
implements|implements
name|FlushRequestListener
block|{
specifier|private
name|HeapMemoryTuner
name|heapMemTuner
decl_stmt|;
specifier|private
name|AtomicLong
name|blockedFlushCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|unblockedFlushCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|long
name|evictCount
init|=
literal|0L
decl_stmt|;
specifier|private
name|long
name|cacheMissCount
init|=
literal|0L
decl_stmt|;
specifier|private
name|TunerContext
name|tunerContext
init|=
operator|new
name|TunerContext
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|alarming
init|=
literal|false
decl_stmt|;
specifier|public
name|HeapMemoryTunerChore
parameter_list|()
block|{
name|super
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
operator|+
literal|"-HeapMemoryTunerChore"
argument_list|,
name|server
argument_list|,
name|defaultChorePeriod
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|HeapMemoryTuner
argument_list|>
name|tunerKlass
init|=
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getClass
argument_list|(
name|HBASE_RS_HEAP_MEMORY_TUNER_CLASS
argument_list|,
name|DefaultHeapMemoryTuner
operator|.
name|class
argument_list|,
name|HeapMemoryTuner
operator|.
name|class
argument_list|)
decl_stmt|;
name|heapMemTuner
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|tunerKlass
argument_list|,
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
comment|// Sample heap occupancy
name|MemoryUsage
name|memUsage
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
decl_stmt|;
name|heapOccupancyPercent
operator|=
operator|(
name|float
operator|)
name|memUsage
operator|.
name|getUsed
argument_list|()
operator|/
operator|(
name|float
operator|)
name|memUsage
operator|.
name|getCommitted
argument_list|()
expr_stmt|;
comment|// If we are above the heap occupancy alarm low watermark, switch to short
comment|// sleeps for close monitoring. Stop autotuning, we are in a danger zone.
if|if
condition|(
name|heapOccupancyPercent
operator|>=
name|heapOccupancyLowWatermark
condition|)
block|{
if|if
condition|(
operator|!
name|alarming
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"heapOccupancyPercent "
operator|+
name|heapOccupancyPercent
operator|+
literal|" is above heap occupancy alarm watermark ("
operator|+
name|heapOccupancyLowWatermark
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|alarming
operator|=
literal|true
expr_stmt|;
block|}
name|metricsHeapMemoryManager
operator|.
name|increaseAboveHeapOccupancyLowWatermarkCounter
argument_list|()
expr_stmt|;
name|triggerNow
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Need to sleep ourselves since we've told the chore's sleeper
comment|// to skip the next sleep cycle.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Interrupted, propagate
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|alarming
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"heapOccupancyPercent "
operator|+
name|heapOccupancyPercent
operator|+
literal|" is now below the heap occupancy alarm watermark ("
operator|+
name|heapOccupancyLowWatermark
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|alarming
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// Autotune if tuning is enabled and allowed
if|if
condition|(
name|tunerOn
operator|&&
operator|!
name|alarming
condition|)
block|{
name|tune
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|tune
parameter_list|()
block|{
comment|// TODO check if we can increase the memory boundaries
comment|// while remaining in the limits
name|long
name|curEvictCount
decl_stmt|;
name|long
name|curCacheMisCount
decl_stmt|;
name|long
name|blockedFlushCnt
decl_stmt|;
name|long
name|unblockedFlushCnt
decl_stmt|;
name|curEvictCount
operator|=
name|blockCache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
expr_stmt|;
name|tunerContext
operator|.
name|setEvictCount
argument_list|(
name|curEvictCount
operator|-
name|evictCount
argument_list|)
expr_stmt|;
name|evictCount
operator|=
name|curEvictCount
expr_stmt|;
name|curCacheMisCount
operator|=
name|blockCache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCachingCount
argument_list|()
expr_stmt|;
name|tunerContext
operator|.
name|setCacheMissCount
argument_list|(
name|curCacheMisCount
operator|-
name|cacheMissCount
argument_list|)
expr_stmt|;
name|cacheMissCount
operator|=
name|curCacheMisCount
expr_stmt|;
name|blockedFlushCnt
operator|=
name|blockedFlushCount
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tunerContext
operator|.
name|setBlockedFlushCount
argument_list|(
name|blockedFlushCnt
argument_list|)
expr_stmt|;
name|metricsHeapMemoryManager
operator|.
name|updateBlockedFlushCount
argument_list|(
name|blockedFlushCnt
argument_list|)
expr_stmt|;
name|unblockedFlushCnt
operator|=
name|unblockedFlushCount
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tunerContext
operator|.
name|setUnblockedFlushCount
argument_list|(
name|unblockedFlushCnt
argument_list|)
expr_stmt|;
name|metricsHeapMemoryManager
operator|.
name|updateUnblockedFlushCount
argument_list|(
name|unblockedFlushCnt
argument_list|)
expr_stmt|;
name|tunerContext
operator|.
name|setCurBlockCacheUsed
argument_list|(
operator|(
name|float
operator|)
name|blockCache
operator|.
name|getCurrentSize
argument_list|()
operator|/
name|maxHeapSize
argument_list|)
expr_stmt|;
name|metricsHeapMemoryManager
operator|.
name|setCurBlockCacheSizeGauge
argument_list|(
name|blockCache
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
name|tunerContext
operator|.
name|setCurMemStoreUsed
argument_list|(
operator|(
name|float
operator|)
name|regionServerAccounting
operator|.
name|getGlobalMemstoreSize
argument_list|()
operator|/
name|maxHeapSize
argument_list|)
expr_stmt|;
name|metricsHeapMemoryManager
operator|.
name|setCurMemStoreSizeGauge
argument_list|(
name|regionServerAccounting
operator|.
name|getGlobalMemstoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|tunerContext
operator|.
name|setCurBlockCacheSize
argument_list|(
name|blockCachePercent
argument_list|)
expr_stmt|;
name|tunerContext
operator|.
name|setCurMemStoreSize
argument_list|(
name|globalMemStorePercent
argument_list|)
expr_stmt|;
name|TunerResult
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|this
operator|.
name|heapMemTuner
operator|.
name|tune
argument_list|(
name|tunerContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception thrown from the HeapMemoryTuner implementation"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|needsTuning
argument_list|()
condition|)
block|{
name|float
name|memstoreSize
init|=
name|result
operator|.
name|getMemstoreSize
argument_list|()
decl_stmt|;
name|float
name|blockCacheSize
init|=
name|result
operator|.
name|getBlockCacheSize
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"From HeapMemoryTuner new memstoreSize: "
operator|+
name|memstoreSize
operator|+
literal|". new blockCacheSize: "
operator|+
name|blockCacheSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|memstoreSize
operator|<
name|globalMemStorePercentMinRange
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New memstoreSize from HeapMemoryTuner "
operator|+
name|memstoreSize
operator|+
literal|" is below min level "
operator|+
name|globalMemStorePercentMinRange
operator|+
literal|". Resetting memstoreSize to min size"
argument_list|)
expr_stmt|;
name|memstoreSize
operator|=
name|globalMemStorePercentMinRange
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|memstoreSize
operator|>
name|globalMemStorePercentMaxRange
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New memstoreSize from HeapMemoryTuner "
operator|+
name|memstoreSize
operator|+
literal|" is above max level "
operator|+
name|globalMemStorePercentMaxRange
operator|+
literal|". Resetting memstoreSize to max size"
argument_list|)
expr_stmt|;
name|memstoreSize
operator|=
name|globalMemStorePercentMaxRange
expr_stmt|;
block|}
if|if
condition|(
name|blockCacheSize
operator|<
name|blockCachePercentMinRange
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New blockCacheSize from HeapMemoryTuner "
operator|+
name|blockCacheSize
operator|+
literal|" is below min level "
operator|+
name|blockCachePercentMinRange
operator|+
literal|". Resetting blockCacheSize to min size"
argument_list|)
expr_stmt|;
name|blockCacheSize
operator|=
name|blockCachePercentMinRange
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blockCacheSize
operator|>
name|blockCachePercentMaxRange
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New blockCacheSize from HeapMemoryTuner "
operator|+
name|blockCacheSize
operator|+
literal|" is above max level "
operator|+
name|blockCachePercentMaxRange
operator|+
literal|". Resetting blockCacheSize to min size"
argument_list|)
expr_stmt|;
name|blockCacheSize
operator|=
name|blockCachePercentMaxRange
expr_stmt|;
block|}
name|int
name|gml
init|=
call|(
name|int
call|)
argument_list|(
name|memstoreSize
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
decl_stmt|;
name|int
name|bcul
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|blockCacheSize
operator|+
name|l2BlockCachePercent
operator|)
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|CONVERT_TO_PERCENTAGE
operator|-
operator|(
name|gml
operator|+
name|bcul
operator|)
operator|<
name|CLUSTER_MINIMUM_MEMORY_THRESHOLD
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Current heap configuration from HeapMemoryTuner exceeds "
operator|+
literal|"the threshold required for successful cluster operation. "
operator|+
literal|"The combined value cannot exceed 0.8. "
operator|+
name|HeapMemorySizeUtil
operator|.
name|MEMSTORE_SIZE_KEY
operator|+
literal|" is "
operator|+
name|memstoreSize
operator|+
literal|" and "
operator|+
name|HFILE_BLOCK_CACHE_SIZE_KEY
operator|+
literal|" is "
operator|+
name|blockCacheSize
argument_list|)
expr_stmt|;
comment|// TODO can adjust the value so as not exceed 80%. Is that correct? may be.
block|}
else|else
block|{
name|int
name|memStoreDeltaSize
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|memstoreSize
operator|-
name|globalMemStorePercent
operator|)
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
decl_stmt|;
name|int
name|blockCacheDeltaSize
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|blockCacheSize
operator|-
name|blockCachePercent
operator|)
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
decl_stmt|;
name|metricsHeapMemoryManager
operator|.
name|updateMemStoreDeltaSizeHistogram
argument_list|(
name|memStoreDeltaSize
argument_list|)
expr_stmt|;
name|metricsHeapMemoryManager
operator|.
name|updateBlockCacheDeltaSizeHistogram
argument_list|(
name|blockCacheDeltaSize
argument_list|)
expr_stmt|;
name|long
name|newBlockCacheSize
init|=
call|(
name|long
call|)
argument_list|(
name|maxHeapSize
operator|*
name|blockCacheSize
argument_list|)
decl_stmt|;
name|long
name|newMemstoreSize
init|=
call|(
name|long
call|)
argument_list|(
name|maxHeapSize
operator|*
name|memstoreSize
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting block cache heap size to "
operator|+
name|newBlockCacheSize
operator|+
literal|" and memstore heap size to "
operator|+
name|newMemstoreSize
argument_list|)
expr_stmt|;
name|blockCachePercent
operator|=
name|blockCacheSize
expr_stmt|;
name|blockCache
operator|.
name|setMaxSize
argument_list|(
name|newBlockCacheSize
argument_list|)
expr_stmt|;
name|globalMemStorePercent
operator|=
name|memstoreSize
expr_stmt|;
name|memStoreFlusher
operator|.
name|setGlobalMemstoreLimit
argument_list|(
name|newMemstoreSize
argument_list|)
expr_stmt|;
for|for
control|(
name|HeapMemoryTuneObserver
name|observer
range|:
name|tuneObservers
control|)
block|{
name|observer
operator|.
name|onHeapMemoryTune
argument_list|(
name|newMemstoreSize
argument_list|,
name|newBlockCacheSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|metricsHeapMemoryManager
operator|.
name|increaseTunerDoNothingCounter
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No changes made by HeapMemoryTuner."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushRequested
parameter_list|(
name|FlushType
name|type
parameter_list|,
name|Region
name|region
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ABOVE_HIGHER_MARK
case|:
name|blockedFlushCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
name|ABOVE_LOWER_MARK
case|:
name|unblockedFlushCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// In case of normal flush don't do any action.
break|break;
block|}
block|}
block|}
comment|/**    * POJO to pass all the relevant information required to do the heap memory tuning. It holds the    * flush counts and block cache evictions happened within the interval. Also holds the current    * heap percentage allocated for memstore and block cache.    */
specifier|public
specifier|static
specifier|final
class|class
name|TunerContext
block|{
specifier|private
name|long
name|blockedFlushCount
decl_stmt|;
specifier|private
name|long
name|unblockedFlushCount
decl_stmt|;
specifier|private
name|long
name|evictCount
decl_stmt|;
specifier|private
name|long
name|cacheMissCount
decl_stmt|;
specifier|private
name|float
name|curBlockCacheUsed
decl_stmt|;
specifier|private
name|float
name|curMemStoreUsed
decl_stmt|;
specifier|private
name|float
name|curMemStoreSize
decl_stmt|;
specifier|private
name|float
name|curBlockCacheSize
decl_stmt|;
specifier|public
name|long
name|getBlockedFlushCount
parameter_list|()
block|{
return|return
name|blockedFlushCount
return|;
block|}
specifier|public
name|void
name|setBlockedFlushCount
parameter_list|(
name|long
name|blockedFlushCount
parameter_list|)
block|{
name|this
operator|.
name|blockedFlushCount
operator|=
name|blockedFlushCount
expr_stmt|;
block|}
specifier|public
name|long
name|getUnblockedFlushCount
parameter_list|()
block|{
return|return
name|unblockedFlushCount
return|;
block|}
specifier|public
name|void
name|setUnblockedFlushCount
parameter_list|(
name|long
name|unblockedFlushCount
parameter_list|)
block|{
name|this
operator|.
name|unblockedFlushCount
operator|=
name|unblockedFlushCount
expr_stmt|;
block|}
specifier|public
name|long
name|getEvictCount
parameter_list|()
block|{
return|return
name|evictCount
return|;
block|}
specifier|public
name|void
name|setEvictCount
parameter_list|(
name|long
name|evictCount
parameter_list|)
block|{
name|this
operator|.
name|evictCount
operator|=
name|evictCount
expr_stmt|;
block|}
specifier|public
name|float
name|getCurMemStoreSize
parameter_list|()
block|{
return|return
name|curMemStoreSize
return|;
block|}
specifier|public
name|void
name|setCurMemStoreSize
parameter_list|(
name|float
name|curMemStoreSize
parameter_list|)
block|{
name|this
operator|.
name|curMemStoreSize
operator|=
name|curMemStoreSize
expr_stmt|;
block|}
specifier|public
name|float
name|getCurBlockCacheSize
parameter_list|()
block|{
return|return
name|curBlockCacheSize
return|;
block|}
specifier|public
name|void
name|setCurBlockCacheSize
parameter_list|(
name|float
name|curBlockCacheSize
parameter_list|)
block|{
name|this
operator|.
name|curBlockCacheSize
operator|=
name|curBlockCacheSize
expr_stmt|;
block|}
specifier|public
name|long
name|getCacheMissCount
parameter_list|()
block|{
return|return
name|cacheMissCount
return|;
block|}
specifier|public
name|void
name|setCacheMissCount
parameter_list|(
name|long
name|cacheMissCount
parameter_list|)
block|{
name|this
operator|.
name|cacheMissCount
operator|=
name|cacheMissCount
expr_stmt|;
block|}
specifier|public
name|float
name|getCurBlockCacheUsed
parameter_list|()
block|{
return|return
name|curBlockCacheUsed
return|;
block|}
specifier|public
name|void
name|setCurBlockCacheUsed
parameter_list|(
name|float
name|curBlockCacheUsed
parameter_list|)
block|{
name|this
operator|.
name|curBlockCacheUsed
operator|=
name|curBlockCacheUsed
expr_stmt|;
block|}
specifier|public
name|float
name|getCurMemStoreUsed
parameter_list|()
block|{
return|return
name|curMemStoreUsed
return|;
block|}
specifier|public
name|void
name|setCurMemStoreUsed
parameter_list|(
name|float
name|d
parameter_list|)
block|{
name|this
operator|.
name|curMemStoreUsed
operator|=
name|d
expr_stmt|;
block|}
block|}
comment|/**    * POJO which holds the result of memory tuning done by HeapMemoryTuner implementation.    * It includes the new heap percentage for memstore and block cache.    */
specifier|public
specifier|static
specifier|final
class|class
name|TunerResult
block|{
specifier|private
name|float
name|memstoreSize
decl_stmt|;
specifier|private
name|float
name|blockCacheSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|needsTuning
decl_stmt|;
specifier|public
name|TunerResult
parameter_list|(
name|boolean
name|needsTuning
parameter_list|)
block|{
name|this
operator|.
name|needsTuning
operator|=
name|needsTuning
expr_stmt|;
block|}
specifier|public
name|float
name|getMemstoreSize
parameter_list|()
block|{
return|return
name|memstoreSize
return|;
block|}
specifier|public
name|void
name|setMemstoreSize
parameter_list|(
name|float
name|memstoreSize
parameter_list|)
block|{
name|this
operator|.
name|memstoreSize
operator|=
name|memstoreSize
expr_stmt|;
block|}
specifier|public
name|float
name|getBlockCacheSize
parameter_list|()
block|{
return|return
name|blockCacheSize
return|;
block|}
specifier|public
name|void
name|setBlockCacheSize
parameter_list|(
name|float
name|blockCacheSize
parameter_list|)
block|{
name|this
operator|.
name|blockCacheSize
operator|=
name|blockCacheSize
expr_stmt|;
block|}
specifier|public
name|boolean
name|needsTuning
parameter_list|()
block|{
return|return
name|needsTuning
return|;
block|}
block|}
comment|/**    * Every class that wants to observe heap memory tune actions must implement this interface.    */
specifier|public
specifier|static
interface|interface
name|HeapMemoryTuneObserver
block|{
comment|/**      * This method would be called by HeapMemoryManger when a heap memory tune action took place.      * @param newMemstoreSize The newly calculated global memstore size      * @param newBlockCacheSize The newly calculated global blockcache size      */
name|void
name|onHeapMemoryTune
parameter_list|(
name|long
name|newMemstoreSize
parameter_list|,
name|long
name|newBlockCacheSize
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

