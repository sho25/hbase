begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * The factory for creating {@link AsyncClusterConnection}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|ClusterConnectionFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_SERVER_CLUSTER_CONNECTION_IMPL
init|=
literal|"hbase.server.cluster.connection.impl"
decl_stmt|;
specifier|private
name|ClusterConnectionFactory
parameter_list|()
block|{   }
comment|/**    * Create a new {@link AsyncClusterConnection} instance.    *<p/>    * Unlike what we have done in {@link ConnectionFactory}, here we just return an    * {@link AsyncClusterConnection} instead of a {@link java.util.concurrent.CompletableFuture},    * which means this method could block on fetching the cluster id. This is just used to simplify    * the implementation, as when starting new region servers, we do not need to be event-driven. Can    * change later if we want a {@link java.util.concurrent.CompletableFuture} here.    */
specifier|public
specifier|static
name|AsyncClusterConnection
name|createAsyncClusterConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|SocketAddress
name|localAddress
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|ConnectionRegistry
name|registry
init|=
name|ConnectionRegistryFactory
operator|.
name|getRegistry
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|clusterId
init|=
name|FutureUtils
operator|.
name|get
argument_list|(
name|registry
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|AsyncClusterConnection
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|HBASE_SERVER_CLUSTER_CONNECTION_IMPL
argument_list|,
name|AsyncClusterConnectionImpl
operator|.
name|class
argument_list|,
name|AsyncClusterConnection
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|user
operator|.
name|runAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|?
extends|extends
name|AsyncClusterConnection
argument_list|>
call|)
argument_list|()
operator|->
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|,
name|registry
argument_list|,
name|clusterId
argument_list|,
name|localAddress
argument_list|,
name|user
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

