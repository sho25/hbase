begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * The MobCell will maintain a {@link Cell} and a {@link StoreFileScanner} inside. Now, the mob cell  * is backend by NIO ByteBuffers which are allocated from ByteBuffAllocator, so we cannot just read  * the cell and close the MOB file scanner because the MOB file scanner closing will deallocate the  * NIO ByteBuffers, which resulting memory leak.  *<p>  * Actually, the right solution is:<br>  * 1. Read the normal cell;<br>  * 2. Parse the value of normal cell and get MOB fileName,offset,length;<br>  * 3. Open scanner to read the mob value;<br>  * 4. Construct the response cell whose key is from the normal cell and value is from the mob cell.  *<br>  * 5. Ship the response cell to HBase client.<br>  * 6. Release both normal cell's block and mob cell's block.<br>  *<p>  * For mob cell, the block releasing just means closing the the mob scanner, so here we need to keep  * the {@link StoreFileScanner} inside and close only when we're ensure that the MobCell has been  * shipped to RPC client.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MobCell
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Cell
name|cell
decl_stmt|;
specifier|private
specifier|final
name|StoreFileScanner
name|sfScanner
decl_stmt|;
specifier|public
name|MobCell
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|this
operator|.
name|cell
operator|=
name|cell
expr_stmt|;
name|this
operator|.
name|sfScanner
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|MobCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|StoreFileScanner
name|sfScanner
parameter_list|)
block|{
name|this
operator|.
name|cell
operator|=
name|cell
expr_stmt|;
name|this
operator|.
name|sfScanner
operator|=
name|sfScanner
expr_stmt|;
block|}
specifier|public
name|Cell
name|getCell
parameter_list|()
block|{
return|return
name|cell
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|sfScanner
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|sfScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

