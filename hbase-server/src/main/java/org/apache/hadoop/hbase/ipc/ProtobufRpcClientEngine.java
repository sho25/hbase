begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IpcProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RpcRequestBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
specifier|public
class|class
name|ProtobufRpcClientEngine
implements|implements
name|RpcClientEngine
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hbase.ipc.ProtobufRpcClientEngine"
argument_list|)
decl_stmt|;
specifier|protected
name|HBaseClient
name|client
decl_stmt|;
specifier|public
name|ProtobufRpcClientEngine
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
operator|new
name|HBaseClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|IpcProtocol
parameter_list|>
name|T
name|getProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Invoker
name|invoker
init|=
operator|new
name|Invoker
argument_list|(
name|protocol
argument_list|,
name|addr
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
argument_list|,
name|rpcTimeout
argument_list|,
name|client
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|protocol
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|protocol
block|}
argument_list|,
name|invoker
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|Invoker
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
name|returnTypes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|IpcProtocol
argument_list|>
name|protocol
decl_stmt|;
specifier|private
name|InetSocketAddress
name|address
decl_stmt|;
specifier|private
name|User
name|ticket
decl_stmt|;
specifier|private
name|HBaseClient
name|client
decl_stmt|;
specifier|final
specifier|private
name|int
name|rpcTimeout
decl_stmt|;
specifier|public
name|Invoker
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|IpcProtocol
argument_list|>
name|protocol
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|User
name|ticket
parameter_list|,
name|int
name|rpcTimeout
parameter_list|,
name|HBaseClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|addr
expr_stmt|;
name|this
operator|.
name|ticket
operator|=
name|ticket
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|rpcTimeout
expr_stmt|;
block|}
specifier|private
name|RpcRequestBody
name|constructRpcRequest
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
throws|throws
name|ServiceException
block|{
name|RpcRequestBody
name|rpcRequest
decl_stmt|;
name|RpcRequestBody
operator|.
name|Builder
name|builder
init|=
name|RpcRequestBody
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setMethodName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|param
decl_stmt|;
name|int
name|length
init|=
name|params
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|2
condition|)
block|{
comment|// RpcController + Message in the method args
comment|// (generated code from RPC bits in .proto files have RpcController)
name|param
operator|=
operator|(
name|Message
operator|)
name|params
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|==
literal|1
condition|)
block|{
comment|// Message
name|param
operator|=
operator|(
name|Message
operator|)
name|params
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Too many parameters for request. Method: ["
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
operator|+
literal|", Expected: 2, Actual: "
operator|+
name|params
operator|.
name|length
argument_list|)
throw|;
block|}
name|builder
operator|.
name|setRequestClassName
argument_list|(
name|param
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRequest
argument_list|(
name|param
operator|.
name|toByteString
argument_list|()
argument_list|)
expr_stmt|;
name|rpcRequest
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|rpcRequest
return|;
block|}
comment|/**      * This is the client side invoker of RPC method. It only throws      * ServiceException, since the invocation proxy expects only      * ServiceException to be thrown by the method in case protobuf service.      *      * ServiceException has the following causes:      *<ol>      *<li>Exceptions encountered on the client side in this method are      * set as cause in ServiceException as is.</li>      *<li>Exceptions from the server are wrapped in RemoteException and are      * set as cause in ServiceException</li>      *</ol>      *      * Note that the client calling protobuf RPC methods, must handle      * ServiceException by getting the cause from the ServiceException. If the      * cause is RemoteException, then unwrap it to get the exception thrown by      * the server.      */
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|ServiceException
block|{
name|long
name|startTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|RpcRequestBody
name|rpcRequest
init|=
name|constructRpcRequest
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Message
name|val
init|=
literal|null
decl_stmt|;
try|try
block|{
name|val
operator|=
name|client
operator|.
name|call
argument_list|(
name|rpcRequest
argument_list|,
name|address
argument_list|,
name|protocol
argument_list|,
name|ticket
argument_list|,
name|rpcTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|long
name|callTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Call: "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|callTime
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|Throwable
name|cause
init|=
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|Message
name|getReturnProtoType
parameter_list|(
name|Method
name|method
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|returnTypes
operator|.
name|containsKey
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|returnTypes
operator|.
name|get
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|Method
name|newInstMethod
init|=
name|returnType
operator|.
name|getMethod
argument_list|(
literal|"getDefaultInstance"
argument_list|)
decl_stmt|;
name|newInstMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Message
name|protoType
init|=
operator|(
name|Message
operator|)
name|newInstMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|returnTypes
operator|.
name|put
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|protoType
argument_list|)
expr_stmt|;
return|return
name|protoType
return|;
block|}
block|}
block|}
end_class

end_unit

