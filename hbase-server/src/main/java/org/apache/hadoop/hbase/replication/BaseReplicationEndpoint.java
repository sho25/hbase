begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractService
import|;
end_import

begin_comment
comment|/**  * A Base implementation for {@link ReplicationEndpoint}s. For internal use. Uses our internal  * Guava.  */
end_comment

begin_comment
comment|// This class has been made InterfaceAudience.Private in 2.0.0. It used to be
end_comment

begin_comment
comment|// LimitedPrivate. See HBASE-15982.
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|BaseReplicationEndpoint
extends|extends
name|AbstractService
implements|implements
name|ReplicationEndpoint
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseReplicationEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_WALENTRYFILTER_CONFIG_KEY
init|=
literal|"hbase.replication.source.custom.walentryfilters"
decl_stmt|;
specifier|protected
name|Context
name|ctx
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ctx
operator|=
name|context
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ctx
operator|!=
literal|null
condition|)
block|{
name|ReplicationPeer
name|peer
init|=
name|this
operator|.
name|ctx
operator|.
name|getReplicationPeer
argument_list|()
decl_stmt|;
if|if
condition|(
name|peer
operator|!=
literal|null
condition|)
block|{
name|peer
operator|.
name|trackPeerConfigChanges
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not tracking replication peer config changes for Peer Id "
operator|+
name|this
operator|.
name|ctx
operator|.
name|getPeerId
argument_list|()
operator|+
literal|" because there's no such peer"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
comment|/**    * No-op implementation for subclasses to override if they wish to execute logic if their config changes    */
specifier|public
name|void
name|peerConfigUpdated
parameter_list|(
name|ReplicationPeerConfig
name|rpc
parameter_list|)
block|{    }
comment|/** Returns a default set of filters */
annotation|@
name|Override
specifier|public
name|WALEntryFilter
name|getWALEntryfilter
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|WALEntryFilter
argument_list|>
name|filters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|WALEntryFilter
name|scopeFilter
init|=
name|getScopeWALEntryFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|scopeFilter
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|scopeFilter
argument_list|)
expr_stmt|;
block|}
name|WALEntryFilter
name|tableCfFilter
init|=
name|getNamespaceTableCfWALEntryFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableCfFilter
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|tableCfFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|getPeerConfig
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|filterNameCSV
init|=
name|ctx
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|REPLICATION_WALENTRYFILTER_CONFIG_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterNameCSV
operator|!=
literal|null
operator|&&
operator|!
name|filterNameCSV
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|filterNames
init|=
name|filterNameCSV
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|filterName
range|:
name|filterNames
control|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|filterName
argument_list|)
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|(
name|WALEntryFilter
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create WALEntryFilter "
operator|+
name|filterName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|filters
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ChainWALEntryFilter
argument_list|(
name|filters
argument_list|)
return|;
block|}
comment|/** Returns a WALEntryFilter for checking the scope. Subclasses can    * return null if they don't want this filter */
specifier|protected
name|WALEntryFilter
name|getScopeWALEntryFilter
parameter_list|()
block|{
return|return
operator|new
name|ScopeWALEntryFilter
argument_list|()
return|;
block|}
comment|/** Returns a WALEntryFilter for checking replication per table and CF. Subclasses can    * return null if they don't want this filter */
specifier|protected
name|WALEntryFilter
name|getNamespaceTableCfWALEntryFilter
parameter_list|()
block|{
return|return
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|ctx
operator|.
name|getReplicationPeer
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReplicateToSameCluster
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStarting
parameter_list|()
block|{
return|return
name|state
argument_list|()
operator|==
name|State
operator|.
name|STARTING
return|;
block|}
block|}
end_class

end_unit

