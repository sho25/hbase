begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractService
import|;
end_import

begin_comment
comment|/**  * A Base implementation for {@link ReplicationEndpoint}s. Users should consider extending this  * class rather than implementing {@link ReplicationEndpoint} directly for better backwards  * compatibility.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|REPLICATION
argument_list|)
specifier|public
specifier|abstract
class|class
name|BaseReplicationEndpoint
extends|extends
name|AbstractService
implements|implements
name|ReplicationEndpoint
block|{
specifier|protected
name|Context
name|ctx
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ctx
operator|=
name|context
expr_stmt|;
block|}
comment|/** Returns a default set of filters */
annotation|@
name|Override
specifier|public
name|WALEntryFilter
name|getWALEntryfilter
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|WALEntryFilter
argument_list|>
name|filters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|WALEntryFilter
name|scopeFilter
init|=
name|getScopeWALEntryFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|scopeFilter
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|scopeFilter
argument_list|)
expr_stmt|;
block|}
name|WALEntryFilter
name|tableCfFilter
init|=
name|getTableCfWALEntryFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableCfFilter
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|tableCfFilter
argument_list|)
expr_stmt|;
block|}
return|return
name|filters
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ChainWALEntryFilter
argument_list|(
name|filters
argument_list|)
return|;
block|}
comment|/** Returns a WALEntryFilter for checking the scope. Subclasses can    * return null if they don't want this filter */
specifier|protected
name|WALEntryFilter
name|getScopeWALEntryFilter
parameter_list|()
block|{
return|return
operator|new
name|ScopeWALEntryFilter
argument_list|()
return|;
block|}
comment|/** Returns a WALEntryFilter for checking replication per table and CF. Subclasses can    * return null if they don't want this filter */
specifier|protected
name|WALEntryFilter
name|getTableCfWALEntryFilter
parameter_list|()
block|{
return|return
operator|new
name|TableCfWALEntryFilter
argument_list|(
name|ctx
operator|.
name|getReplicationPeer
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReplicateToSameCluster
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

