begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serializer
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|ResultSerialization
extends|extends
name|Configured
implements|implements
name|Serialization
argument_list|<
name|Result
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResultSerialization
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The following configuration property indicates import file format version.
specifier|public
specifier|static
specifier|final
name|String
name|IMPORT_FORMAT_VER
init|=
literal|"hbase.import.version"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Result
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Deserializer
argument_list|<
name|Result
argument_list|>
name|getDeserializer
parameter_list|(
name|Class
argument_list|<
name|Result
argument_list|>
name|c
parameter_list|)
block|{
comment|// check input format version
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|String
name|inputVersion
init|=
name|conf
operator|.
name|get
argument_list|(
name|IMPORT_FORMAT_VER
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputVersion
operator|!=
literal|null
operator|&&
name|inputVersion
operator|.
name|equals
argument_list|(
literal|"0.94"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Load exported file using deserializer for HBase 0.94 format"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Result94Deserializer
argument_list|()
return|;
block|}
block|}
return|return
operator|new
name|ResultDeserializer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Serializer
argument_list|<
name|Result
argument_list|>
name|getSerializer
parameter_list|(
name|Class
argument_list|<
name|Result
argument_list|>
name|c
parameter_list|)
block|{
return|return
operator|new
name|ResultSerializer
argument_list|()
return|;
block|}
comment|/**    * The following deserializer class is used to load exported file of 0.94    */
specifier|private
specifier|static
class|class
name|Result94Deserializer
implements|implements
name|Deserializer
argument_list|<
name|Result
argument_list|>
block|{
specifier|private
name|DataInputStream
name|in
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|deserialize
parameter_list|(
name|Result
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|totalBuffer
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalBuffer
operator|==
literal|0
condition|)
block|{
return|return
name|Result
operator|.
name|EMPTY_RESULT
return|;
block|}
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalBuffer
index|]
decl_stmt|;
name|readChunked
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|totalBuffer
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|totalBuffer
condition|)
block|{
name|int
name|keyLength
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|keyLength
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|keyLength
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|in
operator|instanceof
name|DataInputStream
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wrong input stream instance passed in"
argument_list|)
throw|;
block|}
name|this
operator|.
name|in
operator|=
operator|(
name|DataInputStream
operator|)
name|in
expr_stmt|;
block|}
specifier|private
name|void
name|readChunked
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|,
name|byte
index|[]
name|dest
parameter_list|,
name|int
name|ofs
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxRead
init|=
literal|8192
decl_stmt|;
for|for
control|(
init|;
name|ofs
operator|<
name|len
condition|;
name|ofs
operator|+=
name|maxRead
control|)
name|in
operator|.
name|readFully
argument_list|(
name|dest
argument_list|,
name|ofs
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|len
operator|-
name|ofs
argument_list|,
name|maxRead
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ResultDeserializer
implements|implements
name|Deserializer
argument_list|<
name|Result
argument_list|>
block|{
specifier|private
name|InputStream
name|in
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|deserialize
parameter_list|(
name|Result
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Result
name|proto
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|proto
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ResultSerializer
implements|implements
name|Serializer
argument_list|<
name|Result
argument_list|>
block|{
specifier|private
name|OutputStream
name|out
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|result
argument_list|)
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

