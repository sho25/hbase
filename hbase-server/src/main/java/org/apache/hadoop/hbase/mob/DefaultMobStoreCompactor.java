begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
operator|.
name|COMPACT_DROP_DELETES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
operator|.
name|COMPACT_RETAIN_DELETES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|CellSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HMobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|KeyValueScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ShipperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|DefaultCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputControlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Compact passed set of files in the mob-enabled column family.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DefaultMobStoreCompactor
extends|extends
name|DefaultCompactor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultMobStoreCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|mobSizeThreshold
decl_stmt|;
specifier|protected
name|HMobStore
name|mobStore
decl_stmt|;
specifier|protected
name|boolean
name|ioOptimizedMode
init|=
literal|false
decl_stmt|;
comment|/*    * MOB file reference set thread local variable. It contains set of a MOB file names, which newly    * compacted store file has references to. This variable is populated during compaction and the    * content of it is written into meta section of a newly created store file at the final step of    * compaction process.    */
specifier|static
name|ThreadLocal
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|mobRefSet
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/*    * Is it user or system-originated request.    */
specifier|static
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
name|userRequest
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|initialValue
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
decl_stmt|;
comment|/*    * Disable IO mode. IO mode can be forcefully disabled if compactor finds    * old MOB file (pre-distributed compaction). This means that migration has not    * been completed yet. During data migration (upgrade) process only general compaction    * is allowed.    *    */
specifier|static
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
name|disableIO
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|initialValue
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
decl_stmt|;
comment|/*    * Map : MOB file name - file length Can be expensive for large amount of MOB files.    */
specifier|static
name|ThreadLocal
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|mobLengthMap
init|=
operator|new
name|ThreadLocal
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|InternalScannerFactory
name|scannerFactory
init|=
operator|new
name|InternalScannerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScanType
name|getScanType
parameter_list|(
name|CompactionRequestImpl
name|request
parameter_list|)
block|{
return|return
name|request
operator|.
name|isAllFiles
argument_list|()
condition|?
name|COMPACT_DROP_DELETES
else|:
name|COMPACT_RETAIN_DELETES
return|;
block|}
annotation|@
name|Override
specifier|public
name|InternalScanner
name|createScanner
parameter_list|(
name|ScanInfo
name|scanInfo
parameter_list|,
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|FileDetails
name|fd
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StoreScanner
argument_list|(
name|store
argument_list|,
name|scanInfo
argument_list|,
name|scanners
argument_list|,
name|scanType
argument_list|,
name|smallestReadPoint
argument_list|,
name|fd
operator|.
name|earliestPutTs
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|CellSinkFactory
argument_list|<
name|StoreFileWriter
argument_list|>
name|writerFactory
init|=
operator|new
name|CellSinkFactory
argument_list|<
name|StoreFileWriter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StoreFileWriter
name|createWriter
parameter_list|(
name|InternalScanner
name|scanner
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|Compactor
operator|.
name|FileDetails
name|fd
parameter_list|,
name|boolean
name|shouldDropBehind
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make this writer with tags always because of possible new cells with tags.
return|return
name|store
operator|.
name|createWriterInTmp
argument_list|(
name|fd
operator|.
name|maxKeyCount
argument_list|,
name|compactionCompression
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|shouldDropBehind
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|DefaultMobStoreCompactor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
comment|// The mob cells reside in the mob-enabled column family which is held by HMobStore.
comment|// During the compaction, the compactor reads the cells from the mob files and
comment|// probably creates new mob files. All of these operations are included in HMobStore,
comment|// so we need to cast the Store to HMobStore.
if|if
condition|(
operator|!
operator|(
name|store
operator|instanceof
name|HMobStore
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The store "
operator|+
name|store
operator|+
literal|" is not a HMobStore"
argument_list|)
throw|;
block|}
name|this
operator|.
name|mobStore
operator|=
operator|(
name|HMobStore
operator|)
name|store
expr_stmt|;
name|this
operator|.
name|mobSizeThreshold
operator|=
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
operator|.
name|getMobThreshold
argument_list|()
expr_stmt|;
name|this
operator|.
name|ioOptimizedMode
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_TYPE_KEY
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_COMPACTION_TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|MobConstants
operator|.
name|OPTIMIZED_MOB_COMPACTION_TYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|compact
parameter_list|(
name|CompactionRequestImpl
name|request
parameter_list|,
name|ThroughputController
name|throughputController
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tableName
init|=
name|store
operator|.
name|getTableName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|regionName
init|=
name|store
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
name|String
name|familyName
init|=
name|store
operator|.
name|getColumnFamilyName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MOB compaction: major={} isAll={} priority={} throughput controller={}"
operator|+
literal|" table={} cf={} region={}"
argument_list|,
name|request
operator|.
name|isMajor
argument_list|()
argument_list|,
name|request
operator|.
name|isAllFiles
argument_list|()
argument_list|,
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|throughputController
argument_list|,
name|tableName
argument_list|,
name|familyName
argument_list|,
name|regionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getPriority
argument_list|()
operator|==
name|HStore
operator|.
name|PRIORITY_USER
condition|)
block|{
name|userRequest
operator|.
name|set
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userRequest
operator|.
name|set
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"MOB compaction table={} cf={} region={} files: {}"
argument_list|,
name|tableName
argument_list|,
name|familyName
argument_list|,
name|regionName
argument_list|,
name|request
operator|.
name|getFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if I/O optimized MOB compaction
if|if
condition|(
name|ioOptimizedMode
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|isMajor
argument_list|()
operator|&&
name|request
operator|.
name|getPriority
argument_list|()
operator|==
name|HStore
operator|.
name|PRIORITY_USER
condition|)
block|{
name|Path
name|mobDir
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|store
operator|.
name|getTableName
argument_list|()
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|mobFiles
init|=
name|MobUtils
operator|.
name|getReferencedMobFiles
argument_list|(
name|request
operator|.
name|getFiles
argument_list|()
argument_list|,
name|mobDir
argument_list|)
decl_stmt|;
comment|//reset disableIO
name|disableIO
operator|.
name|set
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|mobFiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|calculateMobLengthMap
argument_list|(
name|mobFiles
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Table={} cf={} region={}. I/O optimized MOB compaction. "
operator|+
literal|"Total referenced MOB files: {}"
argument_list|,
name|tableName
argument_list|,
name|familyName
argument_list|,
name|regionName
argument_list|,
name|mobFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|compact
argument_list|(
name|request
argument_list|,
name|scannerFactory
argument_list|,
name|writerFactory
argument_list|,
name|throughputController
argument_list|,
name|user
argument_list|)
return|;
block|}
specifier|private
name|void
name|calculateMobLengthMap
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|mobFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|store
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
name|mobLengthMap
operator|.
name|get
argument_list|()
decl_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|mobFiles
control|)
block|{
if|if
condition|(
name|MobFileName
operator|.
name|isOldMobFileName
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|disableIO
operator|.
name|set
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|FileStatus
name|st
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|st
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Referenced MOB file={} size={}"
argument_list|,
name|p
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Performs compaction on a column family with the mob flag enabled. This works only when MOB    * compaction is explicitly requested (by User), or by Master There are two modes of a MOB    * compaction:<br>    *<p>    *<ul>    *<li>1. Full mode - when all MOB data for a region is compacted into a single MOB file.    *<li>2. I/O optimized mode - for use cases with no or infrequent updates/deletes of a<br>    * MOB data. The main idea behind i/o optimized compaction is to limit maximum size of a MOB file    * produced during compaction and to limit I/O write/read amplification.    *</ul>    * The basic algorithm of compaction is the following:<br>    * 1. If the Put cell has a mob reference tag, the cell's value is the path of the mob file.    *<ol>    *<li>If the value size of a cell is larger than the threshold, this cell is regarded as a mob,    * directly copy the (with mob tag) cell into the new store file.</li>    *<li>Otherwise, retrieve the mob cell from the mob file, and writes a copy of the cell into the    * new store file.</li>    *</ol>    * 2. If the Put cell doesn't have a reference tag.    *<ol>    *<li>If the value size of a cell is larger than the threshold, this cell is regarded as a mob,    * write this cell to a mob file, and write the path of this mob file to the store file.</li>    *<li>Otherwise, directly write this cell into the store file.</li>    *</ol>    * @param fd File details    * @param scanner Where to read from.    * @param writer Where to write to.    * @param smallestReadPoint Smallest read point.    * @param cleanSeqId When true, remove seqId(used to be mvcc) value which is<= smallestReadPoint    * @param throughputController The compaction throughput controller.    * @param major Is a major compaction.    * @param numofFilesToCompact the number of files to compact    * @return Whether compaction ended; false if it was interrupted for any reason.    */
annotation|@
name|Override
specifier|protected
name|boolean
name|performCompaction
parameter_list|(
name|FileDetails
name|fd
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|,
name|CellSink
name|writer
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|boolean
name|cleanSeqId
parameter_list|,
name|ThroughputController
name|throughputController
parameter_list|,
name|boolean
name|major
parameter_list|,
name|int
name|numofFilesToCompact
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bytesWrittenProgressForCloseCheck
init|=
literal|0
decl_stmt|;
name|long
name|bytesWrittenProgressForLog
init|=
literal|0
decl_stmt|;
name|long
name|bytesWrittenProgressForShippedCall
init|=
literal|0
decl_stmt|;
comment|// Clear old mob references
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|isUserRequest
init|=
name|userRequest
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|compactMOBs
init|=
name|major
operator|&&
name|isUserRequest
decl_stmt|;
name|boolean
name|discardMobMiss
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MobConstants
operator|.
name|MOB_UNSAFE_DISCARD_MISS_KEY
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_DISCARD_MISS
argument_list|)
decl_stmt|;
if|if
condition|(
name|discardMobMiss
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{}=true. This is unsafe setting recommended only when first upgrading to a version"
operator|+
literal|" with the distributed mob compaction feature on a cluster that has experienced MOB data "
operator|+
literal|"corruption."
argument_list|,
name|MobConstants
operator|.
name|MOB_UNSAFE_DISCARD_MISS_KEY
argument_list|)
expr_stmt|;
block|}
name|long
name|maxMobFileSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_MAX_FILE_SIZE_KEY
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_COMPACTION_MAX_FILE_SIZE
argument_list|)
decl_stmt|;
name|boolean
name|ioOptimizedMode
init|=
name|this
operator|.
name|ioOptimizedMode
operator|&&
operator|!
name|disableIO
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compact MOB={} optimized configured={} optimized enabled={} maximum MOB file size={}"
operator|+
literal|" major={} store={}"
argument_list|,
name|compactMOBs
argument_list|,
name|this
operator|.
name|ioOptimizedMode
argument_list|,
name|ioOptimizedMode
argument_list|,
name|maxMobFileSize
argument_list|,
name|major
argument_list|,
name|getStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// Since scanner.next() can return 'false' but still be delivering data,
comment|// we have to use a do/while loop.
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Limit to "hbase.hstore.compaction.kv.max" (default 10) to avoid OOME
name|int
name|closeCheckSizeLimit
init|=
name|HStore
operator|.
name|getCloseCheckInterval
argument_list|()
decl_stmt|;
name|long
name|lastMillis
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|lastMillis
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
name|String
name|compactionName
init|=
name|ThroughputControlUtil
operator|.
name|getNameForThrottling
argument_list|(
name|store
argument_list|,
literal|"compaction"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
literal|0
decl_stmt|;
name|boolean
name|hasMore
decl_stmt|;
name|byte
index|[]
name|fileName
init|=
literal|null
decl_stmt|;
name|StoreFileWriter
name|mobFileWriter
init|=
literal|null
decl_stmt|;
comment|/*      * mobCells are used only to decide if we need to commit or abort current MOB output file.      */
name|long
name|mobCells
init|=
literal|0
decl_stmt|;
name|long
name|cellsCountCompactedToMob
init|=
literal|0
decl_stmt|,
name|cellsCountCompactedFromMob
init|=
literal|0
decl_stmt|;
name|long
name|cellsSizeCompactedToMob
init|=
literal|0
decl_stmt|,
name|cellsSizeCompactedFromMob
init|=
literal|0
decl_stmt|;
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
name|ScannerContext
name|scannerContext
init|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBatchLimit
argument_list|(
name|compactionKVMax
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|throughputController
operator|.
name|start
argument_list|(
name|compactionName
argument_list|)
expr_stmt|;
name|KeyValueScanner
name|kvs
init|=
operator|(
name|scanner
operator|instanceof
name|KeyValueScanner
operator|)
condition|?
operator|(
name|KeyValueScanner
operator|)
name|scanner
else|:
literal|null
decl_stmt|;
name|long
name|shippedCallSizeLimit
init|=
operator|(
name|long
operator|)
name|numofFilesToCompact
operator|*
name|this
operator|.
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
operator|.
name|getBlocksize
argument_list|()
decl_stmt|;
name|Cell
name|mobCell
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mobFileWriter
operator|=
name|newMobWriter
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
do|do
block|{
name|hasMore
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
name|now
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|cells
control|)
block|{
if|if
condition|(
name|compactMOBs
condition|)
block|{
if|if
condition|(
name|MobUtils
operator|.
name|isMobReferenceCell
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|String
name|fName
init|=
name|MobUtils
operator|.
name|getMobFileName
argument_list|(
name|c
argument_list|)
decl_stmt|;
comment|// Added to support migration
try|try
block|{
name|mobCell
operator|=
name|mobStore
operator|.
name|resolve
argument_list|(
name|c
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|getCell
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
if|if
condition|(
name|discardMobMiss
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Missing MOB cell: file={} not found cell={}"
argument_list|,
name|fName
argument_list|,
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
throw|throw
name|fnfe
throw|;
block|}
block|}
if|if
condition|(
name|discardMobMiss
operator|&&
name|mobCell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Missing MOB cell value: file={} mob cell={} cell={}"
argument_list|,
name|fName
argument_list|,
name|mobCell
argument_list|,
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|mobCell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Found 0 length MOB cell in a file=%s mob cell=%s "
operator|+
literal|" cell=%s"
argument_list|,
name|fName
argument_list|,
name|mobCell
argument_list|,
name|c
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
if|if
condition|(
name|mobCell
operator|.
name|getValueLength
argument_list|()
operator|>
name|mobSizeThreshold
condition|)
block|{
comment|// put the mob data back to the MOB store file
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|mobCell
argument_list|,
name|c
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ioOptimizedMode
condition|)
block|{
name|mobFileWriter
operator|.
name|append
argument_list|(
name|mobCell
argument_list|)
expr_stmt|;
name|mobCells
operator|++
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|mobCell
argument_list|,
name|fileName
argument_list|,
name|this
operator|.
name|mobStore
operator|.
name|getRefCellTags
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// I/O optimized mode
comment|// Check if MOB cell origin file size is
comment|// greater than threshold
name|Long
name|size
init|=
name|mobLengthMap
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|fName
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|null
condition|)
block|{
comment|// FATAL error (we should never get here though), abort compaction
comment|// This error means that meta section of store file does not contain
comment|// MOB file, which has references in at least one cell from this store file
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Found an unexpected MOB file during compaction %s, aborting compaction %s"
argument_list|,
name|fName
argument_list|,
name|getStoreInfo
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// Can not be null
if|if
condition|(
name|size
operator|<
name|maxMobFileSize
condition|)
block|{
comment|// If MOB cell origin file is below threshold
comment|// it is get compacted
name|mobFileWriter
operator|.
name|append
argument_list|(
name|mobCell
argument_list|)
expr_stmt|;
comment|// Update number of mobCells in a current mob writer
name|mobCells
operator|++
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|mobCell
argument_list|,
name|fileName
argument_list|,
name|this
operator|.
name|mobStore
operator|.
name|getRefCellTags
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update total size of the output (we do not take into account
comment|// file compression yet)
name|long
name|len
init|=
name|mobFileWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|maxMobFileSize
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing output MOB File, length={} file={}, store={}"
argument_list|,
name|len
argument_list|,
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|getStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
name|commitOrAbortMobWriter
argument_list|(
name|mobFileWriter
argument_list|,
name|fd
operator|.
name|maxSeqId
argument_list|,
name|mobCells
argument_list|,
name|major
argument_list|)
expr_stmt|;
name|mobFileWriter
operator|=
name|newMobWriter
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mobCells
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We leave large MOB file as is (is not compacted),
comment|// then we update set of MOB file references
comment|// and append mob cell directly to the store's writer
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|fName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|mobCell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// If MOB value is less than threshold, append it directly to a store file
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|mobCell
argument_list|,
name|c
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|mobCell
argument_list|)
expr_stmt|;
name|cellsCountCompactedFromMob
operator|++
expr_stmt|;
name|cellsSizeCompactedFromMob
operator|+=
name|mobCell
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Not a MOB reference cell
name|int
name|size
init|=
name|c
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|mobSizeThreshold
condition|)
block|{
comment|// This MOB cell comes from a regular store file
comment|// therefore we store it into original mob output
name|mobFileWriter
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|c
argument_list|,
name|fileName
argument_list|,
name|this
operator|.
name|mobStore
operator|.
name|getRefCellTags
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mobCells
operator|++
expr_stmt|;
name|cellsCountCompactedToMob
operator|++
expr_stmt|;
name|cellsSizeCompactedToMob
operator|+=
name|c
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|ioOptimizedMode
condition|)
block|{
comment|// Update total size of the output (we do not take into account
comment|// file compression yet)
name|long
name|len
init|=
name|mobFileWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|maxMobFileSize
condition|)
block|{
name|commitOrAbortMobWriter
argument_list|(
name|mobFileWriter
argument_list|,
name|fd
operator|.
name|maxSeqId
argument_list|,
name|mobCells
argument_list|,
name|major
argument_list|)
expr_stmt|;
name|mobFileWriter
operator|=
name|newMobWriter
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mobCells
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Not a MOB cell, write it directly to a store file
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getTypeByte
argument_list|()
operator|!=
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
condition|)
block|{
comment|// Not a major compaction or major with MOB disabled
comment|// If the kv type is not put, directly write the cell
comment|// to the store file.
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MobUtils
operator|.
name|isMobReferenceCell
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// Not a major MOB compaction, Put MOB reference
if|if
condition|(
name|MobUtils
operator|.
name|hasValidMobRefCellValue
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// We do not check mobSizeThreshold during normal compaction,
comment|// leaving it to a MOB compaction run
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Add MOB reference to a MOB reference set
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|MobUtils
operator|.
name|getMobFileName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Corrupted MOB reference: %s"
argument_list|,
name|c
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getValueLength
argument_list|()
operator|<=
name|mobSizeThreshold
condition|)
block|{
comment|// If the value size of a cell is not larger than the threshold, directly write it to
comment|// the store file.
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value size of a cell is larger than the threshold, it's regarded as a mob,
comment|// write this cell to a mob file, and write the path to the store file.
name|mobCells
operator|++
expr_stmt|;
comment|// append the original keyValue in the mob file.
name|mobFileWriter
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Cell
name|reference
init|=
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|c
argument_list|,
name|fileName
argument_list|,
name|this
operator|.
name|mobStore
operator|.
name|getRefCellTags
argument_list|()
argument_list|)
decl_stmt|;
comment|// write the cell whose value is the path of a mob file to the store file.
name|writer
operator|.
name|append
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|cellsCountCompactedToMob
operator|++
expr_stmt|;
name|cellsSizeCompactedToMob
operator|+=
name|c
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|ioOptimizedMode
condition|)
block|{
name|long
name|len
init|=
name|mobFileWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|maxMobFileSize
condition|)
block|{
name|commitOrAbortMobWriter
argument_list|(
name|mobFileWriter
argument_list|,
name|fd
operator|.
name|maxSeqId
argument_list|,
name|mobCells
argument_list|,
name|major
argument_list|)
expr_stmt|;
name|mobFileWriter
operator|=
name|newMobWriter
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mobCells
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|int
name|len
init|=
name|c
operator|.
name|getSerializedSize
argument_list|()
decl_stmt|;
operator|++
name|progress
operator|.
name|currentCompactedKVs
expr_stmt|;
name|progress
operator|.
name|totalCompactedSize
operator|+=
name|len
expr_stmt|;
name|bytesWrittenProgressForShippedCall
operator|+=
name|len
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|bytesWrittenProgressForLog
operator|+=
name|len
expr_stmt|;
block|}
name|throughputController
operator|.
name|control
argument_list|(
name|compactionName
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// check periodically to see if a system stop is requested
if|if
condition|(
name|closeCheckSizeLimit
operator|>
literal|0
condition|)
block|{
name|bytesWrittenProgressForCloseCheck
operator|+=
name|len
expr_stmt|;
if|if
condition|(
name|bytesWrittenProgressForCloseCheck
operator|>
name|closeCheckSizeLimit
condition|)
block|{
name|bytesWrittenProgressForCloseCheck
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|store
operator|.
name|areWritesEnabled
argument_list|()
condition|)
block|{
name|progress
operator|.
name|cancel
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|kvs
operator|!=
literal|null
operator|&&
name|bytesWrittenProgressForShippedCall
operator|>
name|shippedCallSizeLimit
condition|)
block|{
operator|(
operator|(
name|ShipperListener
operator|)
name|writer
operator|)
operator|.
name|beforeShipped
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|shipped
argument_list|()
expr_stmt|;
name|bytesWrittenProgressForShippedCall
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// Log the progress of long running compactions every minute if
comment|// logging at DEBUG level
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|now
operator|-
name|lastMillis
operator|)
operator|>=
name|COMPACTION_PROGRESS_LOG_INTERVAL
condition|)
block|{
name|String
name|rate
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%.2f"
argument_list|,
operator|(
name|bytesWrittenProgressForLog
operator|/
literal|1024.0
operator|)
operator|/
operator|(
operator|(
name|now
operator|-
name|lastMillis
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compaction progress: {} {}, rate={} KB/sec, throughputController is {}"
argument_list|,
name|compactionName
argument_list|,
name|progress
argument_list|,
name|rate
argument_list|,
name|throughputController
argument_list|)
expr_stmt|;
name|lastMillis
operator|=
name|now
expr_stmt|;
name|bytesWrittenProgressForLog
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
name|finished
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|progress
operator|.
name|cancel
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted while control throughput of compacting "
operator|+
name|compactionName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Mob compaction failed for region: "
operator|+
name|store
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// Clone last cell in the final because writer will append last cell when committing. If
comment|// don't clone here and once the scanner get closed, then the memory of last cell will be
comment|// released. (HBASE-22582)
operator|(
operator|(
name|ShipperListener
operator|)
name|writer
operator|)
operator|.
name|beforeShipped
argument_list|()
expr_stmt|;
name|throughputController
operator|.
name|finish
argument_list|(
name|compactionName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finished
operator|&&
name|mobFileWriter
operator|!=
literal|null
condition|)
block|{
comment|// Remove all MOB references because compaction failed
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Abort writer
name|LOG
operator|.
name|debug
argument_list|(
literal|"Aborting writer for {} because of a compaction failure, Store {}"
argument_list|,
name|mobFileWriter
operator|.
name|getPath
argument_list|()
argument_list|,
name|getStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
name|abortWriter
argument_list|(
name|mobFileWriter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Commit last MOB writer
name|commitOrAbortMobWriter
argument_list|(
name|mobFileWriter
argument_list|,
name|fd
operator|.
name|maxSeqId
argument_list|,
name|mobCells
argument_list|,
name|major
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateCellsCountCompactedFromMob
argument_list|(
name|cellsCountCompactedFromMob
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateCellsCountCompactedToMob
argument_list|(
name|cellsCountCompactedToMob
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateCellsSizeCompactedFromMob
argument_list|(
name|cellsSizeCompactedFromMob
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateCellsSizeCompactedToMob
argument_list|(
name|cellsSizeCompactedToMob
argument_list|)
expr_stmt|;
name|progress
operator|.
name|complete
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|getStoreInfo
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[table=%s family=%s region=%s]"
argument_list|,
name|store
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|,
name|store
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|clearThreadLocals
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|mobRefSet
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
name|mobLengthMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|StoreFileWriter
name|newMobWriter
parameter_list|(
name|FileDetails
name|fd
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|StoreFileWriter
name|mobFileWriter
init|=
name|mobStore
operator|.
name|createWriterInTmp
argument_list|(
operator|new
name|Date
argument_list|(
name|fd
operator|.
name|latestPutTs
argument_list|)
argument_list|,
name|fd
operator|.
name|maxKeyCount
argument_list|,
name|compactionCompression
argument_list|,
name|store
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"New MOB writer created={} store={}"
argument_list|,
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|getStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add reference we get for compact MOB
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mobFileWriter
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Bailing out
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to create mob writer, store=%s"
argument_list|,
name|getStoreInfo
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|commitOrAbortMobWriter
parameter_list|(
name|StoreFileWriter
name|mobFileWriter
parameter_list|,
name|long
name|maxSeqId
parameter_list|,
name|long
name|mobCells
parameter_list|,
name|boolean
name|major
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Commit or abort major mob writer
comment|// If IOException happens during below operation, some
comment|// MOB files can be committed partially, but corresponding
comment|// store file won't be committed, therefore these MOB files
comment|// become orphans and will be deleted during next MOB cleaning chore cycle
if|if
condition|(
name|mobFileWriter
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commit or abort size={} mobCells={} major={} file={}, store={}"
argument_list|,
name|mobFileWriter
operator|.
name|getPos
argument_list|()
argument_list|,
name|mobCells
argument_list|,
name|major
argument_list|,
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|getStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|store
operator|.
name|getTableName
argument_list|()
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mobCells
operator|>
literal|0
condition|)
block|{
comment|// If the mob file is not empty, commit it.
name|mobFileWriter
operator|.
name|appendMetadata
argument_list|(
name|maxSeqId
argument_list|,
name|major
argument_list|,
name|mobCells
argument_list|)
expr_stmt|;
name|mobFileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|mobStore
operator|.
name|commitFile
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the mob file is empty, delete it instead of committing.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Aborting writer for {} because there are no MOB cells, store={}"
argument_list|,
name|mobFileWriter
operator|.
name|getPath
argument_list|()
argument_list|,
name|getStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove MOB file from reference set
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|remove
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|abortWriter
argument_list|(
name|mobFileWriter
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Mob file writer is null, skipping commit/abort, store="
argument_list|,
name|getStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|commitWriter
parameter_list|(
name|StoreFileWriter
name|writer
parameter_list|,
name|FileDetails
name|fd
parameter_list|,
name|CompactionRequestImpl
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|newFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|writer
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|appendMetadata
argument_list|(
name|fd
operator|.
name|maxSeqId
argument_list|,
name|request
operator|.
name|isAllFiles
argument_list|()
argument_list|,
name|request
operator|.
name|getFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Append MOB references
name|Set
argument_list|<
name|String
argument_list|>
name|refSet
init|=
name|mobRefSet
operator|.
name|get
argument_list|()
decl_stmt|;
name|writer
operator|.
name|appendMobMetadata
argument_list|(
name|refSet
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|clearThreadLocals
argument_list|()
expr_stmt|;
return|return
name|newFiles
return|;
block|}
block|}
end_class

end_unit

