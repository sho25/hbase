begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IpcProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * An RPC implementation. This class provides the client side.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HBaseClientRPC
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.ipc.HBaseClientRPC"
argument_list|)
decl_stmt|;
comment|// thread-specific RPC timeout, which may override that of RpcEngine
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|rpcTimeout
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Integer
name|initialValue
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
return|;
block|}
block|}
decl_stmt|;
comment|/**    * @param protocol      protocol interface    * @param addr          address of remote service    * @param conf          configuration    * @param maxAttempts   max attempts    * @param rpcTimeout    timeout for each RPC    * @param timeout       timeout in milliseconds    * @return proxy    * @throws java.io.IOException e    */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|IpcProtocol
parameter_list|>
name|T
name|waitForProxy
parameter_list|(
name|RpcClientEngine
name|engine
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|maxAttempts
parameter_list|,
name|int
name|rpcTimeout
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
comment|// HBase does limited number of reconnects which is different from hadoop.
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|IOException
name|ioe
decl_stmt|;
name|int
name|reconnectAttempts
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|engine
operator|.
name|getProxy
argument_list|(
name|protocol
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|,
name|rpcTimeout
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|te
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Problem connecting to server: "
operator|+
name|addr
argument_list|)
expr_stmt|;
name|ioe
operator|=
name|te
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
comment|// We only handle the ConnectException.
name|ConnectException
name|ce
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ioex
operator|instanceof
name|ConnectException
condition|)
block|{
name|ce
operator|=
operator|(
name|ConnectException
operator|)
name|ioex
expr_stmt|;
name|ioe
operator|=
name|ce
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ioex
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|ioex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ConnectException
condition|)
block|{
name|ce
operator|=
operator|(
name|ConnectException
operator|)
name|ioex
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|ioe
operator|=
name|ce
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ioex
operator|.
name|getMessage
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"connection refused"
argument_list|)
condition|)
block|{
name|ce
operator|=
operator|new
name|ConnectException
argument_list|(
name|ioex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ioe
operator|=
name|ce
expr_stmt|;
block|}
else|else
block|{
comment|// This is the exception we can't handle.
name|ioe
operator|=
name|ioex
expr_stmt|;
block|}
if|if
condition|(
name|ce
operator|!=
literal|null
condition|)
block|{
name|handleConnectionException
argument_list|(
operator|++
name|reconnectAttempts
argument_list|,
name|maxAttempts
argument_list|,
name|protocol
argument_list|,
name|addr
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if timed out
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timeout
operator|>=
name|startTime
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
comment|// wait for retry
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// IGNORE
block|}
block|}
block|}
comment|/**    * @param retries    current retried times.    * @param maxAttmpts max attempts    * @param protocol   protocol interface    * @param addr       address of remote service    * @param ce         ConnectException    * @throws org.apache.hadoop.hbase.client.RetriesExhaustedException    *    */
specifier|private
specifier|static
name|void
name|handleConnectionException
parameter_list|(
name|int
name|retries
parameter_list|,
name|int
name|maxAttmpts
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|ConnectException
name|ce
parameter_list|)
throws|throws
name|RetriesExhaustedException
block|{
if|if
condition|(
name|maxAttmpts
operator|>=
literal|0
operator|&&
name|retries
operator|>=
name|maxAttmpts
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Server at "
operator|+
name|addr
operator|+
literal|" could not be reached after "
operator|+
name|maxAttmpts
operator|+
literal|" tries, giving up."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RetriesExhaustedException
argument_list|(
literal|"Failed setting up proxy "
operator|+
name|protocol
operator|+
literal|" to "
operator|+
name|addr
operator|.
name|toString
argument_list|()
operator|+
literal|" after attempts="
operator|+
name|maxAttmpts
argument_list|,
name|ce
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setRpcTimeout
parameter_list|(
name|int
name|t
parameter_list|)
block|{
name|rpcTimeout
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|getRpcTimeout
parameter_list|()
block|{
return|return
name|rpcTimeout
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|resetRpcTimeout
parameter_list|()
block|{
name|rpcTimeout
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

