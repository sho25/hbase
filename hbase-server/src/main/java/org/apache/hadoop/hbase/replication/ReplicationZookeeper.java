begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|ConnectionLossException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|SessionExpiredException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * This class serves as a helper for all things related to zookeeper in  * replication.  *<p/>  * The layout looks something like this under zookeeper.znode.parent for the  * master cluster:  *<p/>  *  *<pre>  * replication/  *  state      {contains true or false}  *  clusterId  {contains a byte}  *  peers/  *    1/   {contains a full cluster address}  *      peer-state  {contains ENABLED or DISABLED}  *    2/  *    ...  *  rs/ {lists all RS that replicate}  *    startcode1/ {lists all peer clusters}  *      1/ {lists hlogs to process}  *        10.10.1.76%3A53488.123456789 {contains nothing or a position}  *        10.10.1.76%3A53488.123456790  *        ...  *      2/  *      ...  *    startcode2/  *    ...  *</pre>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationZookeeper
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationZookeeper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Name of znode we use to lock when failover
specifier|private
specifier|final
specifier|static
name|String
name|RS_LOCK_ZNODE
init|=
literal|"lock"
decl_stmt|;
comment|// Our handle on zookeeper
specifier|private
specifier|final
name|ZooKeeperWatcher
name|zookeeper
decl_stmt|;
comment|// Map of peer clusters keyed by their id
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ReplicationPeer
argument_list|>
name|peerClusters
decl_stmt|;
comment|// Path to the root replication znode
specifier|private
name|String
name|replicationZNode
decl_stmt|;
comment|// Path to the peer clusters znode
specifier|private
name|String
name|peersZNode
decl_stmt|;
comment|// Path to the znode that contains all RS that replicates
specifier|private
name|String
name|rsZNode
decl_stmt|;
comment|// Path to this region server's name under rsZNode
specifier|private
name|String
name|rsServerNameZnode
decl_stmt|;
comment|// Name node if the replicationState znode
specifier|private
name|String
name|replicationStateNodeName
decl_stmt|;
comment|// Name of zk node which stores peer state. The peer-state znode is under a
comment|// peers' id node; e.g. /hbase/replication/peers/PEER_ID/peer-state
specifier|private
name|String
name|peerStateNodeName
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// The key to our own cluster
specifier|private
name|String
name|ourClusterKey
decl_stmt|;
comment|// Abortable
specifier|private
name|Abortable
name|abortable
decl_stmt|;
specifier|private
specifier|final
name|ReplicationStateInterface
name|replicationState
decl_stmt|;
comment|/**    * ZNode content if enabled state.    */
comment|// Public so it can be seen by test code.
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|ENABLED_ZNODE_BYTES
init|=
name|toByteArray
argument_list|(
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
decl_stmt|;
comment|/**    * ZNode content if disabled state.    */
specifier|static
specifier|final
name|byte
index|[]
name|DISABLED_ZNODE_BYTES
init|=
name|toByteArray
argument_list|(
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
decl_stmt|;
comment|/**    * Constructor used by clients of replication (like master and HBase clients)    * @param conf  conf to use    * @param zk    zk connection to use    * @throws IOException    */
specifier|public
name|ReplicationZookeeper
parameter_list|(
specifier|final
name|Abortable
name|abortable
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ZooKeeperWatcher
name|zk
parameter_list|)
throws|throws
name|KeeperException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|=
name|zk
expr_stmt|;
name|setZNodes
argument_list|(
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationState
operator|=
operator|new
name|ReplicationStateImpl
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|getRepStateNode
argument_list|()
argument_list|,
name|abortable
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor used by region servers, connects to the peer cluster right away.    *    * @param server    * @param replicating    atomic boolean to start/stop replication    * @throws IOException    * @throws KeeperException     */
specifier|public
name|ReplicationZookeeper
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|AtomicBoolean
name|replicating
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|this
operator|.
name|abortable
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|=
name|server
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|server
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|setZNodes
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationState
operator|=
operator|new
name|ReplicationStateImpl
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|getRepStateNode
argument_list|()
argument_list|,
name|server
argument_list|,
name|replicating
argument_list|)
expr_stmt|;
name|this
operator|.
name|peerClusters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ReplicationPeer
argument_list|>
argument_list|()
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|replicationZNode
argument_list|,
name|this
operator|.
name|replicationStateNodeName
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rsServerNameZnode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|rsZNode
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|rsServerNameZnode
argument_list|)
expr_stmt|;
name|connectExistingPeers
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setZNodes
parameter_list|(
name|Abortable
name|abortable
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|replicationZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication"
argument_list|,
literal|"replication"
argument_list|)
decl_stmt|;
name|String
name|peersZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.peers"
argument_list|,
literal|"peers"
argument_list|)
decl_stmt|;
name|this
operator|.
name|peerStateNodeName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.peers.state"
argument_list|,
literal|"peer-state"
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationStateNodeName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.state"
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
name|String
name|rsZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.rs"
argument_list|,
literal|"rs"
argument_list|)
decl_stmt|;
name|this
operator|.
name|ourClusterKey
operator|=
name|ZKUtil
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationZNode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|zookeeper
operator|.
name|baseZNode
argument_list|,
name|replicationZNodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|peersZNode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|peersZNodeName
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|rsZNode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|rsZNodeName
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|rsZNode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|connectExistingPeers
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|znodes
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|znodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|z
range|:
name|znodes
control|)
block|{
name|connectToPeer
argument_list|(
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * List this cluster's peers' IDs    * @return list of all peers' identifiers    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPeersIdsAndWatch
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ids
operator|=
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Cannot get the list of peers "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
comment|/**    * Map of this cluster's peers for display.    * @return A map of peer ids to peer cluster keys    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|listPeers
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|peers
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ids
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|clusterKey
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clusterKey
operator|=
name|parsePeerFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|de
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse of clusterid="
operator|+
name|id
operator|+
literal|" znode content, continuing."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|peers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|clusterKey
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Cannot get the list of peers "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|peers
return|;
block|}
comment|/**    * Returns all region servers from given peer    *    * @param peerClusterId (byte) the cluster to interrogate    * @return addresses of all region servers    */
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getSlavesAddresses
parameter_list|(
name|String
name|peerClusterId
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|peerClusters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|ReplicationPeer
name|peer
init|=
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|peerClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|addresses
decl_stmt|;
try|try
block|{
name|addresses
operator|=
name|fetchSlavesAddresses
argument_list|(
name|peer
operator|.
name|getZkw
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|reconnectPeer
argument_list|(
name|ke
argument_list|,
name|peer
argument_list|)
expr_stmt|;
name|addresses
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|peer
operator|.
name|setRegionServers
argument_list|(
name|addresses
argument_list|)
expr_stmt|;
return|return
name|peer
operator|.
name|getRegionServers
argument_list|()
return|;
block|}
comment|/**    * Get the list of all the region servers from the specified peer    * @param zkw zk connection to use    * @return list of region server addresses or an empty list if the slave    * is unavailable    */
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|fetchSlavesAddresses
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|listChildrenAndGetAsServerNames
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|rsZNode
argument_list|)
return|;
block|}
comment|/**    * Lists the children of the specified znode, retrieving the data of each    * child as a server address.    *    * Used to list the currently online regionservers and their addresses.    *    * Sets no watches at all, this method is best effort.    *    * Returns an empty list if the node has no children.  Returns null if the    * parent node itself does not exist.    *    * @param zkw zookeeper reference    * @param znode node to get children of as addresses    * @return list of data of children of specified znode, empty if no children,    *         null if parent does not exist    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|List
argument_list|<
name|ServerName
argument_list|>
name|listChildrenAndGetAsServerNames
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|addresses
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|addresses
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addresses
return|;
block|}
comment|/**    * This method connects this cluster to another one and registers it    * in this region server's replication znode    * @param peerId id of the peer cluster    * @throws KeeperException     */
specifier|public
name|boolean
name|connectToPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
if|if
condition|(
name|peerClusters
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|peerClusters
operator|.
name|containsKey
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReplicationPeer
name|peer
init|=
name|getPeer
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|peerClusters
operator|.
name|put
argument_list|(
name|peerId
argument_list|,
name|peer
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|rsServerNameZnode
argument_list|,
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new peer cluster "
operator|+
name|peer
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Helper method to connect to a peer    * @param peerId peer's identifier    * @return object representing the peer    * @throws IOException    * @throws KeeperException    */
specifier|public
name|ReplicationPeer
name|getPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|znode
argument_list|)
decl_stmt|;
name|String
name|otherClusterKey
init|=
literal|""
decl_stmt|;
try|try
block|{
name|otherClusterKey
operator|=
name|parsePeerFrom
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse of cluster key from peerId="
operator|+
name|peerId
operator|+
literal|", specifically the content from the following znode: "
operator|+
name|znode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|ourClusterKey
operator|.
name|equals
argument_list|(
name|otherClusterKey
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not connecting to "
operator|+
name|peerId
operator|+
literal|" because it's us"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Construct the connection to the new peer
name|Configuration
name|otherConf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|applyClusterKeyToConf
argument_list|(
name|otherConf
argument_list|,
name|otherClusterKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get peer because:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ReplicationPeer
name|peer
init|=
operator|new
name|ReplicationPeer
argument_list|(
name|otherConf
argument_list|,
name|peerId
argument_list|,
name|otherClusterKey
argument_list|)
decl_stmt|;
name|peer
operator|.
name|startStateTracker
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|getPeerStateNode
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|peer
return|;
block|}
comment|/**    * Remove the peer from zookeeper. which will trigger the watchers on every    * region server and close their sources    * @param id    * @throws IllegalArgumentException Thrown when the peer doesn't exist    */
specifier|public
name|void
name|removePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot remove inexisting peer"
argument_list|)
throw|;
block|}
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to remove a peer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add a new peer to this cluster    * @param id peer's identifier    * @param clusterKey ZK ensemble's addresses, client port and root znode    * @throws IllegalArgumentException Thrown when the peer doesn't exist    * @throws IllegalStateException Thrown when a peer already exists, since    *         multi-slave isn't supported yet.    */
specifier|public
name|void
name|addPeer
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|clusterKey
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add existing peer"
argument_list|)
throw|;
block|}
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|id
argument_list|)
argument_list|,
name|toByteArray
argument_list|(
name|clusterKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// There is a race b/w PeerWatcher and ReplicationZookeeper#add method to create the
comment|// peer-state znode. This happens while adding a peer.
comment|// The peer state data is set as "ENABLED" by default.
name|ZKUtil
operator|.
name|createNodeIfNotExistsAndWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|getPeerStateNode
argument_list|(
name|id
argument_list|)
argument_list|,
name|ENABLED_ZNODE_BYTES
argument_list|)
expr_stmt|;
comment|// A peer is enabled by default
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to add peer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param clusterKey    * @return Serialized protobuf of<code>clusterKey</code> with pb magic prefix    *         prepended suitable for use as content of a this.peersZNode; i.e.    *         the content of PEER_ID znode under /hbase/replication/peers/PEER_ID    */
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
specifier|final
name|String
name|clusterKey
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterkey
argument_list|(
name|clusterKey
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param state    * @return Serialized protobuf of<code>state</code> with pb magic prefix    *         prepended suitable for use as content of either the cluster state    *         znode -- whether or not we should be replicating kept in    *         /hbase/replication/state -- or as content of a peer-state znode    *         under a peer cluster id as in    *         /hbase/replication/peers/PEER_ID/peer-state.    */
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
specifier|final
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
name|state
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|state
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param position    * @return Serialized protobuf of<code>position</code> with pb magic prefix    *         prepended suitable for use as content of an hlog position in a    *         replication queue.    */
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
specifier|final
name|long
name|position
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationHLogPosition
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPosition
argument_list|(
name|position
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param lockOwner    * @return Serialized protobuf of<code>lockOwner</code> with pb magic prefix    *         prepended suitable for use as content of an replication lock during    *         region server fail over.    */
specifier|static
name|byte
index|[]
name|lockToByteArray
parameter_list|(
specifier|final
name|String
name|lockOwner
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationLock
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLockOwner
argument_list|(
name|lockOwner
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param bytes Content of a peer znode.    * @return ClusterKey parsed from the passed bytes.    * @throws DeserializationException    */
specifier|static
name|String
name|parsePeerFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
name|peer
decl_stmt|;
try|try
block|{
name|peer
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|peer
operator|.
name|getClusterkey
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
block|}
comment|/**    * @param bytes Content of a state znode.    * @return State parsed from the passed bytes.    * @throws DeserializationException    */
specifier|static
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
name|parseStateFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationState
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|state
operator|.
name|getState
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param bytes - Content of a HLog position znode.    * @return long - The current HLog position.    * @throws DeserializationException    */
specifier|static
name|long
name|parseHLogPositionFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationHLogPosition
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationHLogPosition
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationHLogPosition
name|position
decl_stmt|;
try|try
block|{
name|position
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|position
operator|.
name|getPosition
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|Bytes
operator|.
name|toLong
argument_list|(
name|bytes
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/**    * @param bytes - Content of a lock znode.    * @return String - The owner of the lock.    * @throws DeserializationException    */
specifier|static
name|String
name|parseLockOwnerFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationLock
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationLock
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationLock
name|lock
decl_stmt|;
try|try
block|{
name|lock
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|lock
operator|.
name|getLockOwner
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
block|}
specifier|private
name|boolean
name|peerExists
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|id
argument_list|)
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**    * Enable replication to the peer    *    * @param id peer's identifier    * @throws IllegalArgumentException    *           Thrown when the peer doesn't exist    */
specifier|public
name|void
name|enablePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|changePeerState
argument_list|(
name|id
argument_list|,
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" is enabled"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Disable replication to the peer    *    * @param id peer's identifier    * @throws IllegalArgumentException    *           Thrown when the peer doesn't exist    */
specifier|public
name|void
name|disablePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|changePeerState
argument_list|(
name|id
argument_list|,
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" is disabled"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|changePeerState
parameter_list|(
name|String
name|id
parameter_list|,
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" is not registered"
argument_list|)
throw|;
block|}
name|String
name|peerStateZNode
init|=
name|getPeerStateNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stateBytes
init|=
operator|(
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
operator|)
condition|?
name|ENABLED_ZNODE_BYTES
else|:
name|DISABLED_ZNODE_BYTES
decl_stmt|;
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|,
name|stateBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|,
name|stateBytes
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"state of the peer "
operator|+
name|id
operator|+
literal|" changed to "
operator|+
name|state
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to change state of the peer "
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check whether the peer is enabled or not. This method checks the atomic    * boolean of ReplicationPeer locally.    *    * @param id peer identifier    * @return true if the peer is enabled, otherwise false    * @throws IllegalArgumentException    *           Thrown when the peer doesn't exist    */
specifier|public
name|boolean
name|getPeerEnabled
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|peerClusters
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" is not registered"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getPeerEnabled
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|String
name|getPeerStateNode
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|id
argument_list|,
name|this
operator|.
name|peerStateNodeName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getRepStateNode
parameter_list|()
block|{
return|return
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|replicationZNode
argument_list|,
name|this
operator|.
name|replicationStateNodeName
argument_list|)
return|;
block|}
comment|/**    * Get the replication status of this cluster. If the state znode doesn't exist it will also    * create it and set it true.    * @return returns true when it's enabled, else false    * @throws KeeperException    */
specifier|public
name|boolean
name|getReplication
parameter_list|()
throws|throws
name|KeeperException
block|{
return|return
name|this
operator|.
name|replicationState
operator|.
name|getState
argument_list|()
return|;
block|}
comment|/**    * Set the new replication state for this cluster    * @param newState    * @throws KeeperException    */
specifier|public
name|void
name|setReplication
parameter_list|(
name|boolean
name|newState
parameter_list|)
throws|throws
name|KeeperException
block|{
name|this
operator|.
name|replicationState
operator|.
name|setState
argument_list|(
name|newState
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a new log to the list of hlogs in zookeeper    * @param filename name of the hlog's znode    * @param peerId name of the cluster's znode    */
specifier|public
name|void
name|addLogToList
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|rsServerNameZnode
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
name|znode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|znode
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a log from the list of hlogs in zookeeper    * @param filename name of the hlog's znode    * @param clusterId name of the cluster's znode    */
specifier|public
name|void
name|removeLogFromList
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|clusterId
parameter_list|)
block|{
try|try
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|rsServerNameZnode
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|znode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|znode
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Failed remove from list"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the current position of the specified cluster in the current hlog    * @param filename filename name of the hlog's znode    * @param clusterId clusterId name of the cluster's znode    * @param position the position in the file    * @throws IOException    */
specifier|public
name|void
name|writeReplicationStatus
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|long
name|position
parameter_list|)
block|{
try|try
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|rsServerNameZnode
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|znode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|znode
argument_list|,
name|filename
argument_list|)
expr_stmt|;
comment|// Why serialize String of Long and note Long as bytes?
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|znode
argument_list|,
name|toByteArray
argument_list|(
name|position
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Writing replication status"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a list of all the other region servers in this cluster    * and set a watch    * @return a list of server nanes    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRegisteredRegionServers
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|zookeeper
operator|.
name|rsZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Get list of registered region servers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the list of the replicators that have queues, they can be alive, dead    * or simply from a previous run    * @return a list of server names    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getListOfReplicators
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|rsZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Get list of replicators"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the list of peer clusters for the specified server names    * @param rs server names of the rs    * @return a list of peer cluster    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getListPeersForRS
parameter_list|(
name|String
name|rs
parameter_list|)
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|rsZNode
argument_list|,
name|rs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Get list of peers for rs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the list of hlogs for the specified region server and peer cluster    * @param rs server names of the rs    * @param id peer cluster    * @return a list of hlogs    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getListHLogsForPeerForRS
parameter_list|(
name|String
name|rs
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|rsZNode
argument_list|,
name|rs
argument_list|)
decl_stmt|;
name|znode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|znode
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Get list of hlogs for peer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Try to set a lock in another server's znode.    * @param znode the server names of the other server    * @return true if the lock was acquired, false in every other cases    */
specifier|public
name|boolean
name|lockOtherRS
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
try|try
block|{
name|String
name|parent
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|rsZNode
argument_list|,
name|znode
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|equals
argument_list|(
name|rsServerNameZnode
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Won't lock because this is us, we're dead!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|p
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|parent
argument_list|,
name|RS_LOCK_ZNODE
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|p
argument_list|,
name|lockToByteArray
argument_list|(
name|rsServerNameZnode
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// This exception will pop up if the znode under which we're trying to
comment|// create the lock is already deleted by another region server, meaning
comment|// that the transfer already occurred.
comment|// NoNode => transfer is done and znodes are already deleted
comment|// NodeExists => lock znode already created by another RS
if|if
condition|(
name|e
operator|instanceof
name|KeeperException
operator|.
name|NoNodeException
operator|||
name|e
operator|instanceof
name|KeeperException
operator|.
name|NodeExistsException
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Won't transfer the queue,"
operator|+
literal|" another RS took care of it because of: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed lock other rs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * This methods copies all the hlogs queues from another region server    * and returns them all sorted per peer cluster (appended with the dead    * server's znode)    * @param znode server names to copy    * @return all hlogs for all peers of that cluster, null if an error occurred    */
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|copyQueuesFromRS
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
comment|// TODO this method isn't atomic enough, we could start copying and then
comment|// TODO fail for some reason and we would end up with znodes we don't want.
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|queues
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|nodePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|rsZNode
argument_list|,
name|znode
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|clusters
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|nodePath
argument_list|)
decl_stmt|;
comment|// We have a lock znode in there, it will count as one.
if|if
condition|(
name|clusters
operator|==
literal|null
operator|||
name|clusters
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
name|queues
return|;
block|}
comment|// The lock isn't a peer cluster, remove it
name|clusters
operator|.
name|remove
argument_list|(
name|RS_LOCK_ZNODE
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|cluster
range|:
name|clusters
control|)
block|{
comment|// We add the name of the recovered RS to the new znode, we can even
comment|// do that for queues that were recovered 10 times giving a znode like
comment|// number-startcode-number-otherstartcode-number-anotherstartcode-etc
name|String
name|newCluster
init|=
name|cluster
operator|+
literal|"-"
operator|+
name|znode
decl_stmt|;
name|String
name|newClusterZnode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|rsServerNameZnode
argument_list|,
name|newCluster
argument_list|)
decl_stmt|;
name|String
name|clusterPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|nodePath
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hlogs
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|clusterPath
argument_list|)
decl_stmt|;
comment|// That region server didn't have anything to replicate for this cluster
if|if
condition|(
name|hlogs
operator|==
literal|null
operator|||
name|hlogs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|ZKUtil
operator|.
name|createNodeIfNotExistsAndWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|newClusterZnode
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|logQueue
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|put
argument_list|(
name|newCluster
argument_list|,
name|logQueue
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|hlog
range|:
name|hlogs
control|)
block|{
name|String
name|z
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|clusterPath
argument_list|,
name|hlog
argument_list|)
decl_stmt|;
name|byte
index|[]
name|positionBytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|long
name|position
init|=
literal|0
decl_stmt|;
try|try
block|{
name|position
operator|=
name|parseHLogPositionFrom
argument_list|(
name|positionBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse of hlog position from the following znode: "
operator|+
name|z
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating "
operator|+
name|hlog
operator|+
literal|" with data "
operator|+
name|position
argument_list|)
expr_stmt|;
name|String
name|child
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|newClusterZnode
argument_list|,
name|hlog
argument_list|)
decl_stmt|;
comment|// Position doesn't actually change, we are just deserializing it for
comment|// logging, so just use the already serialized version
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|child
argument_list|,
name|positionBytes
argument_list|)
expr_stmt|;
name|logQueue
operator|.
name|add
argument_list|(
name|hlog
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Copy queues from rs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|queues
return|;
block|}
comment|/**    * Delete a complete queue of hlogs    * @param peerZnode znode of the peer cluster queue of hlogs to delete    */
specifier|public
name|void
name|deleteSource
parameter_list|(
name|String
name|peerZnode
parameter_list|,
name|boolean
name|closeConnection
parameter_list|)
block|{
try|try
block|{
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|rsServerNameZnode
argument_list|,
name|peerZnode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeConnection
condition|)
block|{
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|peerZnode
argument_list|)
operator|.
name|getZkw
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|peerClusters
operator|.
name|remove
argument_list|(
name|peerZnode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Failed delete of "
operator|+
name|peerZnode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Recursive deletion of all znodes in specified rs' znode    * @param znode    */
specifier|public
name|void
name|deleteRsQueues
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
name|String
name|fullpath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|rsZNode
argument_list|,
name|znode
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|clusters
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|fullpath
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|cluster
range|:
name|clusters
control|)
block|{
comment|// We'll delete it later
if|if
condition|(
name|cluster
operator|.
name|equals
argument_list|(
name|RS_LOCK_ZNODE
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|fullClusterPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|fullpath
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|fullClusterPath
argument_list|)
expr_stmt|;
block|}
comment|// Finish cleaning up
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|fullpath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|KeeperException
operator|.
name|NoNodeException
operator|||
name|e
operator|instanceof
name|KeeperException
operator|.
name|NotEmptyException
condition|)
block|{
comment|// Testing a special case where another region server was able to
comment|// create a lock just after we deleted it, but then was also able to
comment|// delete the RS znode before us or its lock znode is still there.
if|if
condition|(
name|e
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|fullpath
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Failed delete of "
operator|+
name|znode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete this cluster's queues    */
specifier|public
name|void
name|deleteOwnRSZNode
parameter_list|()
block|{
try|try
block|{
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|rsServerNameZnode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// if the znode is already expired, don't bother going further
if|if
condition|(
name|e
operator|instanceof
name|KeeperException
operator|.
name|SessionExpiredException
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Failed delete of "
operator|+
name|this
operator|.
name|rsServerNameZnode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the position of the specified hlog in the specified peer znode    * @param peerId znode of the peer cluster    * @param hlog name of the hlog    * @return the position in that hlog    * @throws KeeperException     */
specifier|public
name|long
name|getHLogRepPosition
parameter_list|(
name|String
name|peerId
parameter_list|,
name|String
name|hlog
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|clusterZnode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|rsServerNameZnode
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|clusterZnode
argument_list|,
name|hlog
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|znode
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|parseHLogPositionFrom
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|de
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse of HLogPosition for peerId="
operator|+
name|peerId
operator|+
literal|" and hlog="
operator|+
name|hlog
operator|+
literal|"znode content, continuing."
argument_list|)
expr_stmt|;
block|}
comment|// if we can not parse the position, start at the beginning of the hlog file
comment|// again
return|return
literal|0
return|;
block|}
comment|/**    * Returns the UUID of the provided peer id. Should a connection loss or session    * expiration happen, the ZK handler will be reopened once and if it still doesn't    * work then it will bail and return null.    * @param peerId the peer's ID that will be converted into a UUID    * @return a UUID or null if there's a ZK connection issue    */
specifier|public
name|UUID
name|getPeerUUID
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|ReplicationPeer
name|peer
init|=
name|getPeerClusters
argument_list|()
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|UUID
name|peerUUID
init|=
literal|null
decl_stmt|;
try|try
block|{
name|peerUUID
operator|=
name|getUUIDForCluster
argument_list|(
name|peer
operator|.
name|getZkw
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|reconnectPeer
argument_list|(
name|ke
argument_list|,
name|peer
argument_list|)
expr_stmt|;
block|}
return|return
name|peerUUID
return|;
block|}
comment|/**    * Get the UUID for the provided ZK watcher. Doesn't handle any ZK exceptions    * @param zkw watcher connected to an ensemble    * @return the UUID read from zookeeper    * @throws KeeperException    */
specifier|public
name|UUID
name|getUUIDForCluster
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|UUID
operator|.
name|fromString
argument_list|(
name|ZKClusterId
operator|.
name|readClusterIdZNode
argument_list|(
name|zkw
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|reconnectPeer
parameter_list|(
name|KeeperException
name|ke
parameter_list|,
name|ReplicationPeer
name|peer
parameter_list|)
block|{
if|if
condition|(
name|ke
operator|instanceof
name|ConnectionLossException
operator|||
name|ke
operator|instanceof
name|SessionExpiredException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lost the ZooKeeper connection for peer "
operator|+
name|peer
operator|.
name|getClusterKey
argument_list|()
argument_list|,
name|ke
argument_list|)
expr_stmt|;
try|try
block|{
name|peer
operator|.
name|reloadZkWatcher
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Creation of ZookeeperWatcher failed for peer "
operator|+
name|peer
operator|.
name|getClusterKey
argument_list|()
argument_list|,
name|io
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|registerRegionServerListener
parameter_list|(
name|ZooKeeperListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|zookeeper
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a map of all peer clusters    * @return map of peer cluster keyed by id    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ReplicationPeer
argument_list|>
name|getPeerClusters
parameter_list|()
block|{
return|return
name|this
operator|.
name|peerClusters
return|;
block|}
comment|/**    * Extracts the znode name of a peer cluster from a ZK path    * @param fullPath Path to extract the id from    * @return the id or an empty string if path is invalid    */
specifier|public
specifier|static
name|String
name|getZNodeName
parameter_list|(
name|String
name|fullPath
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|fullPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|parts
operator|.
name|length
operator|>
literal|0
condition|?
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
else|:
literal|""
return|;
block|}
comment|/**    * Get this cluster's zk connection    * @return zk connection    */
specifier|public
name|ZooKeeperWatcher
name|getZookeeperWatcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|zookeeper
return|;
block|}
comment|/**    * Get the full path to the peers' znode    * @return path to peers in zk    */
specifier|public
name|String
name|getPeersZNode
parameter_list|()
block|{
return|return
name|peersZNode
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|replicationState
operator|!=
literal|null
condition|)
name|replicationState
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Utility method to ensure an ENABLED znode is in place; if not present, we    * create it.    * @param zookeeper    * @param path Path to znode to check    * @return True if we created the znode.    * @throws NodeExistsException    * @throws KeeperException    */
specifier|static
name|boolean
name|ensurePeerEnabled
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zookeeper
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|NodeExistsException
throws|,
name|KeeperException
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zookeeper
argument_list|,
name|path
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// There is a race b/w PeerWatcher and ReplicationZookeeper#add method to create the
comment|// peer-state znode. This happens while adding a peer.
comment|// The peer state data is set as "ENABLED" by default.
name|ZKUtil
operator|.
name|createNodeIfNotExistsAndWatch
argument_list|(
name|zookeeper
argument_list|,
name|path
argument_list|,
name|ENABLED_ZNODE_BYTES
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @param bytes    * @return True if the passed in<code>bytes</code> are those of a pb    *         serialized ENABLED state.    * @throws DeserializationException    */
specifier|static
name|boolean
name|isStateEnabled
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
name|state
init|=
name|parseStateFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
return|return
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
operator|==
name|state
return|;
block|}
block|}
end_class

end_unit

