begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitUtil
operator|.
name|getCompletedRecoveredEditsFilePath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitUtil
operator|.
name|getRegionSplitEditsPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|MapUtils
import|;
end_import

begin_comment
comment|/**  * Class that manages the output streams from the log splitting process.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|LogRecoveredEditsOutputSink
extends|extends
name|OutputSink
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogRecoveredEditsOutputSink
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|WALSplitter
name|walSplitter
decl_stmt|;
specifier|private
name|FileSystem
name|walFS
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|LogRecoveredEditsOutputSink
parameter_list|(
name|WALSplitter
name|walSplitter
parameter_list|,
name|WALSplitter
operator|.
name|PipelineController
name|controller
parameter_list|,
name|EntryBuffers
name|entryBuffers
parameter_list|,
name|int
name|numWriters
parameter_list|)
block|{
comment|// More threads could potentially write faster at the expense
comment|// of causing more disk seeks as the logs are split.
comment|// 3. After a certain setting (probably around 3) the
comment|// process will be bound on the reader in the current
comment|// implementation anyway.
name|super
argument_list|(
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|numWriters
argument_list|)
expr_stmt|;
name|this
operator|.
name|walSplitter
operator|=
name|walSplitter
expr_stmt|;
name|this
operator|.
name|walFS
operator|=
name|walSplitter
operator|.
name|walFS
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|walSplitter
operator|.
name|conf
expr_stmt|;
block|}
comment|/**    * @return null if failed to report progress    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|finishWritingAndClose
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|isSuccessful
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|isSuccessful
operator|=
name|finishWriting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|result
operator|=
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
name|closeLogWriters
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|thrown
argument_list|)
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isSuccessful
condition|)
block|{
name|splits
operator|=
name|result
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
comment|// delete the one with fewer wal entries
specifier|private
name|void
name|deleteOneWithFewerEntries
parameter_list|(
name|WALSplitter
operator|.
name|WriterAndPath
name|wap
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|dstMinLogSeqNum
init|=
operator|-
literal|1L
decl_stmt|;
try|try
init|(
name|WAL
operator|.
name|Reader
name|reader
init|=
name|walSplitter
operator|.
name|getWalFactory
argument_list|()
operator|.
name|createReader
argument_list|(
name|walSplitter
operator|.
name|walFS
argument_list|,
name|dst
argument_list|)
init|)
block|{
name|WAL
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|dstMinLogSeqNum
operator|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got EOF when reading first WAL entry from {}, an empty or broken WAL file?"
argument_list|,
name|dst
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wap
operator|.
name|minLogSeqNum
operator|<
name|dstMinLogSeqNum
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old edits file. It could be the result of a previous failed"
operator|+
literal|" split attempt or we have duplicated wal entries. Deleting "
operator|+
name|dst
operator|+
literal|", length="
operator|+
name|walFS
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|delete
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting of old {}"
argument_list|,
name|dst
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed deleting of old "
operator|+
name|dst
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old edits file and we have less entries. Deleting "
operator|+
name|wap
operator|.
name|path
operator|+
literal|", length="
operator|+
name|walFS
operator|.
name|getFileStatus
argument_list|(
name|wap
operator|.
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walFS
operator|.
name|delete
argument_list|(
name|wap
operator|.
name|path
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting of {}"
argument_list|,
name|wap
operator|.
name|path
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed deleting of "
operator|+
name|wap
operator|.
name|path
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Close all of the output streams.    * @return the list of paths written.    */
name|List
argument_list|<
name|Path
argument_list|>
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|closeAndCleanCompleted
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|closeThreadPool
init|=
name|Threads
operator|.
name|getBoundedCachedThreadPool
argument_list|(
name|numThreads
argument_list|,
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"split-log-closeStream-"
operator|+
name|count
operator|++
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|closeThreadPool
argument_list|)
decl_stmt|;
name|boolean
name|progress_failed
decl_stmt|;
try|try
block|{
name|progress_failed
operator|=
name|executeCloseTask
argument_list|(
name|completionService
argument_list|,
name|thrown
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeThreadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|thrown
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
name|writersClosed
operator|=
literal|true
expr_stmt|;
name|closeAndCleanCompleted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|progress_failed
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|paths
return|;
block|}
comment|/**    * @param completionService threadPool to execute the closing tasks    * @param thrown store the exceptions    * @param paths arrayList to store the paths written    * @return if close tasks executed successful    */
name|boolean
name|executeCloseTask
parameter_list|(
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|completionService
parameter_list|,
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|WALSplitter
operator|.
name|SinkWriter
argument_list|>
name|writersEntry
range|:
name|writers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Submitting close of "
operator|+
operator|(
operator|(
name|WALSplitter
operator|.
name|WriterAndPath
operator|)
name|writersEntry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|WALSplitter
operator|.
name|WriterAndPath
name|wap
init|=
operator|(
name|WALSplitter
operator|.
name|WriterAndPath
operator|)
name|writersEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Path
name|dst
init|=
name|closeWriter
argument_list|(
name|writersEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|wap
argument_list|,
name|thrown
argument_list|)
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|dst
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|boolean
name|progress_failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|this
operator|.
name|writers
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|progress_failed
operator|&&
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|progress_failed
return|;
block|}
name|Path
name|closeWriter
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|WALSplitter
operator|.
name|WriterAndPath
name|wap
parameter_list|,
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Closing {}"
argument_list|,
name|wap
operator|.
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|wap
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not close log at {}"
argument_list|,
name|wap
operator|.
name|path
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed wap "
operator|+
name|wap
operator|.
name|path
operator|+
literal|" (wrote "
operator|+
name|wap
operator|.
name|editsWritten
operator|+
literal|" edits, skipped "
operator|+
name|wap
operator|.
name|editsSkipped
operator|+
literal|" edits in "
operator|+
operator|(
name|wap
operator|.
name|nanosSpent
operator|/
literal|1000
operator|/
literal|1000
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wap
operator|.
name|editsWritten
operator|==
literal|0
condition|)
block|{
comment|// just remove the empty recovered.edits file
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|wap
operator|.
name|path
argument_list|)
operator|&&
operator|!
name|walFS
operator|.
name|delete
argument_list|(
name|wap
operator|.
name|path
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting empty {}"
argument_list|,
name|wap
operator|.
name|path
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed deleting empty  "
operator|+
name|wap
operator|.
name|path
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
name|Path
name|dst
init|=
name|getCompletedRecoveredEditsFilePath
argument_list|(
name|wap
operator|.
name|path
argument_list|,
name|regionMaximumEditLogSeqNum
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|dst
operator|.
name|equals
argument_list|(
name|wap
operator|.
name|path
argument_list|)
operator|&&
name|walFS
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
name|deleteOneWithFewerEntries
argument_list|(
name|wap
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|// Skip the unit tests which create a splitter that reads and
comment|// writes the data without touching disk.
comment|// TestHLogSplit#testThreading is an example.
if|if
condition|(
name|walFS
operator|.
name|exists
argument_list|(
name|wap
operator|.
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|walFS
operator|.
name|rename
argument_list|(
name|wap
operator|.
name|path
argument_list|,
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed renaming "
operator|+
name|wap
operator|.
name|path
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Rename {} to {}"
argument_list|,
name|wap
operator|.
name|path
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not rename {} to {}"
argument_list|,
name|wap
operator|.
name|path
argument_list|,
name|dst
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|dst
return|;
block|}
specifier|private
name|List
argument_list|<
name|IOException
argument_list|>
name|closeLogWriters
parameter_list|(
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writersClosed
condition|)
block|{
return|return
name|thrown
return|;
block|}
if|if
condition|(
name|thrown
operator|==
literal|null
condition|)
block|{
name|thrown
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|WriterThread
name|writerThread
range|:
name|writerThreads
control|)
block|{
while|while
condition|(
name|writerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|writerThread
operator|.
name|setShouldStop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|writerThread
operator|.
name|join
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|WALSplitter
operator|.
name|WriterAndPath
name|wap
init|=
literal|null
decl_stmt|;
for|for
control|(
name|WALSplitter
operator|.
name|SinkWriter
name|tmpWAP
range|:
name|writers
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|wap
operator|=
operator|(
name|WALSplitter
operator|.
name|WriterAndPath
operator|)
name|tmpWAP
expr_stmt|;
name|wap
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't close log at {}"
argument_list|,
name|wap
operator|.
name|path
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed log "
operator|+
name|wap
operator|.
name|path
operator|+
literal|" (wrote "
operator|+
name|wap
operator|.
name|editsWritten
operator|+
literal|" edits in "
operator|+
operator|(
name|wap
operator|.
name|nanosSpent
operator|/
literal|1000
operator|/
literal|1000
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
block|}
name|writersClosed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|thrown
return|;
block|}
comment|/**    * Get a writer and path for a log starting at the given entry. This function is threadsafe so    * long as multiple threads are always acting on different regions.    * @return null if this region shouldn't output any logs    */
name|WALSplitter
operator|.
name|WriterAndPath
name|getWriterAndPath
parameter_list|(
name|WAL
operator|.
name|Entry
name|entry
parameter_list|,
name|boolean
name|reusable
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|String
name|regionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|WALSplitter
operator|.
name|WriterAndPath
name|ret
init|=
operator|(
name|WALSplitter
operator|.
name|WriterAndPath
operator|)
name|writers
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
comment|// If we already decided that this region doesn't get any output
comment|// we don't need to check again.
if|if
condition|(
name|blacklistedRegions
operator|.
name|contains
argument_list|(
name|region
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ret
operator|=
name|createWAP
argument_list|(
name|region
argument_list|,
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|blacklistedRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|reusable
condition|)
block|{
name|writers
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * @return a path with a write for that path. caller should close.    */
name|WALSplitter
operator|.
name|WriterAndPath
name|createWAP
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|WAL
operator|.
name|Entry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tmpDirName
init|=
name|walSplitter
operator|.
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|TEMPORARY_FS_DIRECTORY_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_TEMPORARY_HDFS_DIRECTORY
argument_list|)
decl_stmt|;
name|Path
name|regionedits
init|=
name|getRegionSplitEditsPath
argument_list|(
name|entry
argument_list|,
name|walSplitter
operator|.
name|getFileBeingSplit
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tmpDirName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionedits
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FileSystem
name|walFs
init|=
name|FSUtils
operator|.
name|getWALFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|walFs
operator|.
name|exists
argument_list|(
name|regionedits
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found old edits file. It could be the "
operator|+
literal|"result of a previous failed split attempt. Deleting "
operator|+
name|regionedits
operator|+
literal|", length="
operator|+
name|walFs
operator|.
name|getFileStatus
argument_list|(
name|regionedits
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walFs
operator|.
name|delete
argument_list|(
name|regionedits
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed delete of old {}"
argument_list|,
name|regionedits
argument_list|)
expr_stmt|;
block|}
block|}
name|WALProvider
operator|.
name|Writer
name|w
init|=
name|walSplitter
operator|.
name|createWriter
argument_list|(
name|regionedits
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating writer path={}"
argument_list|,
name|regionedits
argument_list|)
expr_stmt|;
return|return
operator|new
name|WALSplitter
operator|.
name|WriterAndPath
argument_list|(
name|regionedits
argument_list|,
name|w
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
argument_list|)
return|;
block|}
name|void
name|filterCellByStore
parameter_list|(
name|WAL
operator|.
name|Entry
name|logEntry
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|maxSeqIdInStores
init|=
name|walSplitter
operator|.
name|getRegionMaxSeqIdInStores
argument_list|()
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|MapUtils
operator|.
name|isEmpty
argument_list|(
name|maxSeqIdInStores
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Create the array list for the cells that aren't filtered.
comment|// We make the assumption that most cells will be kept.
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|keptCells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|logEntry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|logEntry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
name|WALEdit
operator|.
name|isMetaEditFamily
argument_list|(
name|cell
argument_list|)
condition|)
block|{
name|keptCells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|family
init|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|Long
name|maxSeqId
init|=
name|maxSeqIdInStores
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Do not skip cell even if maxSeqId is null. Maybe we are in a rolling upgrade,
comment|// or the master was crashed before and we can not get the information.
if|if
condition|(
name|maxSeqId
operator|==
literal|null
operator|||
name|maxSeqId
operator|.
name|longValue
argument_list|()
operator|<
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
condition|)
block|{
name|keptCells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Anything in the keptCells array list is still live.
comment|// So rather than removing the cells from the array list
comment|// which would be an O(n^2) operation, we just replace the list
name|logEntry
operator|.
name|getEdit
argument_list|()
operator|.
name|setCells
argument_list|(
name|keptCells
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|WALSplitter
operator|.
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|appendBuffer
argument_list|(
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|WALSplitter
operator|.
name|WriterAndPath
name|appendBuffer
parameter_list|(
name|WALSplitter
operator|.
name|RegionEntryBuffer
name|buffer
parameter_list|,
name|boolean
name|reusable
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|WAL
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|buffer
operator|.
name|entryBuffer
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"got an empty buffer, skipping"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|WALSplitter
operator|.
name|WriterAndPath
name|wap
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WAL
operator|.
name|Entry
name|logEntry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|wap
operator|==
literal|null
condition|)
block|{
name|wap
operator|=
name|getWriterAndPath
argument_list|(
name|logEntry
argument_list|,
name|reusable
argument_list|)
expr_stmt|;
if|if
condition|(
name|wap
operator|==
literal|null
condition|)
block|{
comment|// This log spews the full edit. Can be massive in the log. Enable only debugging
comment|// WAL lost edit issues.
name|LOG
operator|.
name|trace
argument_list|(
literal|"getWriterAndPath decided we don't need to write edits for {}"
argument_list|,
name|logEntry
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|filterCellByStore
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|logEntry
operator|.
name|getEdit
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wap
operator|.
name|writer
operator|.
name|append
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateRegionMaximumEditLogSeqNum
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|wap
operator|.
name|incrementSkippedEdits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Pass along summary statistics
name|wap
operator|.
name|incrementEdits
argument_list|(
name|editsCount
argument_list|)
expr_stmt|;
name|wap
operator|.
name|incrementNanoTime
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|e
operator|instanceof
name|RemoteException
condition|?
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
else|:
name|e
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Got while writing log entry to log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|wap
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|keepRegionEvent
parameter_list|(
name|WAL
operator|.
name|Entry
name|entry
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|WALEdit
operator|.
name|isCompactionMarker
argument_list|(
name|cell
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @return a map from encoded region ID to the number of edits written out for that region.    */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|ret
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|WALSplitter
operator|.
name|SinkWriter
argument_list|>
name|entry
range|:
name|writers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|editsWritten
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfRecoveredRegions
parameter_list|()
block|{
return|return
name|writers
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

