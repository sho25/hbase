begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABELS_TABLE_FAMILY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABEL_QUALIFIER
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|ImportTsv
operator|.
name|TsvParser
operator|.
name|BadTsvLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|ExpressionExpander
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|ExpressionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|InvalidLabelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|ExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|LeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|NonLeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * An utility class that helps the mapper and reducers used with visibility to  * scan the visibility_labels and helps in parsing and expanding the visibility  * tags  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|LabelExpander
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|ExpressionParser
name|parser
init|=
operator|new
name|ExpressionParser
argument_list|()
decl_stmt|;
specifier|private
name|ExpressionExpander
name|expander
init|=
operator|new
name|ExpressionExpander
argument_list|()
decl_stmt|;
specifier|public
name|LabelExpander
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labels
decl_stmt|;
comment|// TODO : The code repeats from that in Visibility Controller.. Refactoring
comment|// may be needed
specifier|private
name|List
argument_list|<
name|Tag
argument_list|>
name|createVisibilityTags
parameter_list|(
name|String
name|visibilityLabelsExp
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
throws|,
name|InvalidLabelException
block|{
name|ExpressionNode
name|node
init|=
literal|null
decl_stmt|;
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|visibilityLabelsExp
argument_list|)
expr_stmt|;
name|node
operator|=
name|expander
operator|.
name|expand
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|labelOrdinals
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// We will be adding this tag before the visibility tags and the presence of
comment|// this
comment|// tag indicates we are supporting deletes with cell visibility
name|tags
operator|.
name|add
argument_list|(
name|VisibilityUtils
operator|.
name|SORTED_ORDINAL_SERIALIZATION_FORMAT_TAG
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
name|getLabelOrdinals
argument_list|(
name|node
argument_list|,
name|labelOrdinals
argument_list|)
expr_stmt|;
name|writeLabelOrdinalsToStream
argument_list|(
name|labelOrdinals
argument_list|,
name|dos
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
operator|new
name|Tag
argument_list|(
name|TagType
operator|.
name|VISIBILITY_TAG_TYPE
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|NonLeafExpressionNode
name|nlNode
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|nlNode
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
for|for
control|(
name|ExpressionNode
name|child
range|:
name|nlNode
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|getLabelOrdinals
argument_list|(
name|child
argument_list|,
name|labelOrdinals
argument_list|)
expr_stmt|;
name|writeLabelOrdinalsToStream
argument_list|(
name|labelOrdinals
argument_list|,
name|dos
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
operator|new
name|Tag
argument_list|(
name|TagType
operator|.
name|VISIBILITY_TAG_TYPE
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|reset
argument_list|()
expr_stmt|;
name|labelOrdinals
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|getLabelOrdinals
argument_list|(
name|nlNode
argument_list|,
name|labelOrdinals
argument_list|)
expr_stmt|;
name|writeLabelOrdinalsToStream
argument_list|(
name|labelOrdinals
argument_list|,
name|dos
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
operator|new
name|Tag
argument_list|(
name|TagType
operator|.
name|VISIBILITY_TAG_TYPE
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tags
return|;
block|}
specifier|private
name|void
name|writeLabelOrdinalsToStream
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|labelOrdinals
parameter_list|,
name|DataOutputStream
name|dos
parameter_list|)
throws|throws
name|IOException
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|labelOrdinals
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|labelOrdinal
range|:
name|labelOrdinals
control|)
block|{
name|StreamUtils
operator|.
name|writeRawVInt32
argument_list|(
name|dos
argument_list|,
name|labelOrdinal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getLabelOrdinals
parameter_list|(
name|ExpressionNode
name|node
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|labelOrdinals
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidLabelException
block|{
if|if
condition|(
name|node
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
name|String
name|identifier
init|=
literal|null
decl_stmt|;
name|int
name|labelOrdinal
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|LeafExpressionNode
condition|)
block|{
name|identifier
operator|=
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|node
operator|)
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
name|labelOrdinal
operator|=
name|this
operator|.
name|labels
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This is a NOT node.
name|LeafExpressionNode
name|lNode
init|=
call|(
name|LeafExpressionNode
call|)
argument_list|(
operator|(
name|NonLeafExpressionNode
operator|)
name|node
argument_list|)
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|identifier
operator|=
name|lNode
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
name|labelOrdinal
operator|=
name|this
operator|.
name|labels
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|labelOrdinal
operator|=
operator|-
literal|1
operator|*
name|labelOrdinal
expr_stmt|;
comment|// Store NOT node as -ve ordinal.
block|}
if|if
condition|(
name|labelOrdinal
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidLabelException
argument_list|(
literal|"Invalid visibility label "
operator|+
name|identifier
argument_list|)
throw|;
block|}
name|labelOrdinals
operator|.
name|add
argument_list|(
name|labelOrdinal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ExpressionNode
argument_list|>
name|childExps
init|=
operator|(
operator|(
name|NonLeafExpressionNode
operator|)
name|node
operator|)
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
for|for
control|(
name|ExpressionNode
name|child
range|:
name|childExps
control|)
block|{
name|getLabelOrdinals
argument_list|(
name|child
argument_list|,
name|labelOrdinals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createLabels
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This scan should be done by user with global_admin previliges.. Ensure
comment|// that it works
name|HTable
name|visibilityLabelsTable
init|=
literal|null
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|labels
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|visibilityLabelsTable
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|LABELS_TABLE_NAME
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setAuthorizations
argument_list|(
operator|new
name|Authorizations
argument_list|(
name|VisibilityUtils
operator|.
name|SYSTEM_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|LABEL_QUALIFIER
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|visibilityLabelsTable
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Result
name|next
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|byte
index|[]
name|row
init|=
name|next
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|next
operator|.
name|getValue
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|LABEL_QUALIFIER
argument_list|)
decl_stmt|;
name|labels
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|visibilityLabelsTable
operator|!=
literal|null
condition|)
block|{
name|visibilityLabelsTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Creates a kv from the cell visibility expr specified in the ImportTSV and uses it as the    * visibility tag in the kv    * @param rowKeyOffset    * @param rowKeyLength    * @param family    * @param familyOffset    * @param familyLength    * @param qualifier    * @param qualifierOffset    * @param qualifierLength    * @param ts    * @param put    * @param lineBytes    * @param columnOffset    * @param columnLength    * @param cellVisibilityExpr    * @return KeyValue from the cell visibility expr    * @throws IOException    * @throws BadTsvLineException    * @throws ParseException     */
specifier|public
name|KeyValue
name|createKVFromCellVisibilityExpr
parameter_list|(
name|int
name|rowKeyOffset
parameter_list|,
name|int
name|rowKeyLength
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|familyOffset
parameter_list|,
name|int
name|familyLength
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|int
name|qualifierOffset
parameter_list|,
name|int
name|qualifierLength
parameter_list|,
name|long
name|ts
parameter_list|,
name|Type
name|put
parameter_list|,
name|byte
index|[]
name|lineBytes
parameter_list|,
name|int
name|columnOffset
parameter_list|,
name|int
name|columnLength
parameter_list|,
name|String
name|cellVisibilityExpr
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadTsvLineException
block|{
if|if
condition|(
name|this
operator|.
name|labels
operator|==
literal|null
operator|&&
name|cellVisibilityExpr
operator|!=
literal|null
condition|)
block|{
name|createLabels
argument_list|()
expr_stmt|;
block|}
name|KeyValue
name|kv
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cellVisibilityExpr
operator|!=
literal|null
condition|)
block|{
comment|// Apply the expansion and parsing here
try|try
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|visibilityTags
init|=
name|createVisibilityTags
argument_list|(
name|cellVisibilityExpr
argument_list|)
decl_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|lineBytes
argument_list|,
name|rowKeyOffset
argument_list|,
name|rowKeyLength
argument_list|,
name|family
argument_list|,
name|familyOffset
argument_list|,
name|familyLength
argument_list|,
name|qualifier
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|lineBytes
argument_list|,
name|columnOffset
argument_list|,
name|columnLength
argument_list|,
name|visibilityTags
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadTsvLineException
argument_list|(
literal|"Parse Exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|lineBytes
argument_list|,
name|rowKeyOffset
argument_list|,
name|rowKeyLength
argument_list|,
name|family
argument_list|,
name|familyOffset
argument_list|,
name|familyLength
argument_list|,
name|qualifier
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|lineBytes
argument_list|,
name|columnOffset
argument_list|,
name|columnLength
argument_list|)
expr_stmt|;
block|}
return|return
name|kv
return|;
block|}
block|}
end_class

end_unit

