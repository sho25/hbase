begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_comment
comment|/**  * Helper class for all utilities related to archival/retrieval of HFiles  */
end_comment

begin_class
specifier|public
class|class
name|HFileArchiveUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_HFILE_ARCHIVE_DIRECTORY
init|=
literal|".archive"
decl_stmt|;
specifier|private
name|HFileArchiveUtil
parameter_list|()
block|{
comment|// non-external instantiation - util class
block|}
comment|/**    * Get the directory to archive a store directory    * @param conf {@link Configuration} to read for the archive directory name    * @param tableName table name under which the store currently lives    * @param regionName region encoded name under which the store currently lives    * @param family name of the family in the store    * @return {@link Path} to the directory to archive the given store or    *<tt>null</tt> if it should not be archived    */
specifier|public
specifier|static
name|Path
name|getStoreArchivePath
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|String
name|regionName
parameter_list|,
specifier|final
name|String
name|familyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableArchiveDir
init|=
name|getTableArchivePath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|HStore
operator|.
name|getStoreHomedir
argument_list|(
name|tableArchiveDir
argument_list|,
name|regionName
argument_list|,
name|familyName
argument_list|)
return|;
block|}
comment|/**    * Get the directory to archive a store directory    * @param conf {@link Configuration} to read for the archive directory name    * @param region parent region information under which the store currently    *          lives    * @param family name of the family in the store    * @return {@link Path} to the directory to archive the given store or    *<tt>null</tt> if it should not be archived    */
specifier|public
specifier|static
name|Path
name|getStoreArchivePath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HRegion
name|region
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
block|{
return|return
name|getStoreArchivePath
argument_list|(
name|conf
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region
operator|.
name|getTableDir
argument_list|()
argument_list|,
name|family
argument_list|)
return|;
block|}
comment|/**    * Get the directory to archive a store directory    * @param conf {@link Configuration} to read for the archive directory name. Can be null.    * @param region parent region information under which the store currently lives    * @param tabledir directory for the table under which the store currently lives    * @param family name of the family in the store    * @return {@link Path} to the directory to archive the given store or<tt>null</tt> if it should    *         not be archived    */
specifier|public
specifier|static
name|Path
name|getStoreArchivePath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|Path
name|tabledir
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
block|{
name|Path
name|tableArchiveDir
init|=
name|getTableArchivePath
argument_list|(
name|conf
argument_list|,
name|tabledir
argument_list|)
decl_stmt|;
return|return
name|HStore
operator|.
name|getStoreHomedir
argument_list|(
name|tableArchiveDir
argument_list|,
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
name|family
argument_list|)
return|;
block|}
comment|/**    * Get the archive directory for a given region under the specified table    * @param conf {@link Configuration} to read the archive directory from. Can be null    * @param tabledir the original table directory. Cannot be null.    * @param regiondir the path to the region directory. Cannot be null.    * @return {@link Path} to the directory to archive the given region, or<tt>null</tt> if it    *         should not be archived    */
specifier|public
specifier|static
name|Path
name|getRegionArchiveDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|tabledir
parameter_list|,
name|Path
name|regiondir
parameter_list|)
block|{
comment|// get the archive directory for a table
name|Path
name|archiveDir
init|=
name|getTableArchivePath
argument_list|(
name|conf
argument_list|,
name|tabledir
argument_list|)
decl_stmt|;
comment|// then add on the region path under the archive
name|String
name|encodedRegionName
init|=
name|regiondir
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|archiveDir
argument_list|,
name|encodedRegionName
argument_list|)
return|;
block|}
comment|/**    * Get the path to the table archive directory based on the configured archive directory.    *<p>    * Assumed that the table should already be archived.    * @param conf {@link Configuration} to read the archive directory property. Can be null    * @param tabledir directory of the table to be archived. Cannot be null.    * @return {@link Path} to the archive directory for the table    */
specifier|public
specifier|static
name|Path
name|getTableArchivePath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|tabledir
parameter_list|)
block|{
name|String
name|archiveName
init|=
name|getConfiguredArchiveDirName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|root
init|=
name|tabledir
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// now build the archive directory path
comment|// first the top-level archive directory
comment|// generally "/hbase/.archive/[table]
return|return
name|archiveName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|tabledir
argument_list|)
else|:
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|archiveName
argument_list|)
argument_list|,
name|tabledir
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the path to the table archive directory based on the configured archive directory.    *<p>    * Assumed that the table should already be archived.    * @param conf {@link Configuration} to read the archive directory property. Can be null    * @param tableName Name of the table to be archived. Cannot be null.    * @return {@link Path} to the archive directory for the table    */
specifier|public
specifier|static
name|Path
name|getTableArchivePath
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|getArchivePath
argument_list|(
name|conf
argument_list|)
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Get the archive directory as per the configuration    * @param conf {@link Configuration} to read the archive directory from (can be null, in which    *          case you get the default value). Can be null.    * @return the configured archived directory or the default specified by    *         {@value HFileArchiveUtil#DEFAULT_HFILE_ARCHIVE_DIRECTORY}    */
specifier|public
specifier|static
name|String
name|getConfiguredArchiveDirName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|==
literal|null
condition|?
name|HFileArchiveUtil
operator|.
name|DEFAULT_HFILE_ARCHIVE_DIRECTORY
else|:
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|,
name|HFileArchiveUtil
operator|.
name|DEFAULT_HFILE_ARCHIVE_DIRECTORY
argument_list|)
return|;
block|}
comment|/**    * Get the full path to the archive directory on the configured {@link FileSystem}    * @param conf to look for archive directory name and root directory. Cannot be null. Notes for    *          testing: requires a FileSystem root directory to be specified.    * @return the full {@link Path} to the archive directory, as defined by the configuration    * @throws IOException if an unexpected error occurs    */
specifier|public
specifier|static
name|Path
name|getArchivePath
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getConfiguredArchiveDirName
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

