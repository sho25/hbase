begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * RegionStates contains a set of Maps that describes the in-memory state of the AM, with  * the regions available in the system, the region in transition, the offline regions and  * the servers holding regions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionStates
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionStates
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// This comparator sorts the RegionStates by time stamp then Region name.
comment|// Comparing by timestamp alone can lead us to discard different RegionStates that happen
comment|// to share a timestamp.
specifier|private
specifier|static
class|class
name|RegionStateStampComparator
implements|implements
name|Comparator
argument_list|<
name|RegionState
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|RegionState
name|l
parameter_list|,
specifier|final
name|RegionState
name|r
parameter_list|)
block|{
name|int
name|stampCmp
init|=
name|Long
operator|.
name|compare
argument_list|(
name|l
operator|.
name|getStamp
argument_list|()
argument_list|,
name|r
operator|.
name|getStamp
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|stampCmp
operator|!=
literal|0
condition|?
name|stampCmp
else|:
name|RegionInfo
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|l
operator|.
name|getRegion
argument_list|()
argument_list|,
name|r
operator|.
name|getRegion
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|final
specifier|static
name|RegionStateStampComparator
name|REGION_STATE_STAMP_COMPARATOR
init|=
operator|new
name|RegionStateStampComparator
argument_list|()
decl_stmt|;
comment|// TODO: Replace the ConcurrentSkipListMaps
comment|/**    * RegionName -- i.e. RegionInfo.getRegionName() -- as bytes to {@link RegionStateNode}    */
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionStateNode
argument_list|>
name|regionsMap
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionStateNode
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|RegionInfo
argument_list|,
name|RegionStateNode
argument_list|>
name|regionInTransition
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|RegionInfo
argument_list|,
name|RegionStateNode
argument_list|>
argument_list|(
name|RegionInfo
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
comment|/**    * Regions marked as offline on a read of hbase:meta. Unused or at least, once    * offlined, regions have no means of coming on line again. TODO.    */
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|RegionInfo
argument_list|,
name|RegionStateNode
argument_list|>
name|regionOffline
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|RegionInfo
argument_list|,
name|RegionStateNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionFailedOpen
argument_list|>
name|regionFailedOpen
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionFailedOpen
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerStateNode
argument_list|>
name|serverMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerStateNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RegionStates
parameter_list|()
block|{ }
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|regionsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|regionInTransition
operator|.
name|clear
argument_list|()
expr_stmt|;
name|regionOffline
operator|.
name|clear
argument_list|()
expr_stmt|;
name|serverMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|boolean
name|isRegionInRegionStates
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
block|{
return|return
operator|(
name|regionsMap
operator|.
name|containsKey
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|||
name|regionInTransition
operator|.
name|containsKey
argument_list|(
name|hri
argument_list|)
operator|||
name|regionOffline
operator|.
name|containsKey
argument_list|(
name|hri
argument_list|)
operator|)
return|;
block|}
comment|// ==========================================================================
comment|//  RegionStateNode helpers
comment|// ==========================================================================
annotation|@
name|VisibleForTesting
name|RegionStateNode
name|createRegionStateNode
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|RegionStateNode
name|newNode
init|=
operator|new
name|RegionStateNode
argument_list|(
name|regionInfo
argument_list|,
name|regionInTransition
argument_list|)
decl_stmt|;
name|RegionStateNode
name|oldNode
init|=
name|regionsMap
operator|.
name|putIfAbsent
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|newNode
argument_list|)
decl_stmt|;
return|return
name|oldNode
operator|!=
literal|null
condition|?
name|oldNode
else|:
name|newNode
return|;
block|}
specifier|public
name|RegionStateNode
name|getOrCreateRegionStateNode
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|RegionStateNode
name|node
init|=
name|getRegionStateNodeFromName
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|node
operator|!=
literal|null
condition|?
name|node
else|:
name|createRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
return|;
block|}
name|RegionStateNode
name|getRegionStateNodeFromName
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|regionsMap
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
return|;
block|}
specifier|public
name|RegionStateNode
name|getRegionStateNode
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|getRegionStateNodeFromName
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|deleteRegion
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|regionsMap
operator|.
name|remove
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// See HBASE-20860
comment|// After master restarts, merged regions' RIT state may not be cleaned,
comment|// making sure they are cleaned here
if|if
condition|(
name|regionInTransition
operator|.
name|containsKey
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
name|regionInTransition
operator|.
name|remove
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
comment|// Remove from the offline regions map too if there.
if|if
condition|(
name|this
operator|.
name|regionOffline
operator|.
name|containsKey
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing from regionOffline Map: "
operator|+
name|regionInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionOffline
operator|.
name|remove
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteRegions
parameter_list|(
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
parameter_list|)
block|{
name|regionInfos
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|deleteRegion
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|RegionStateNode
argument_list|>
name|getTableRegionStateNodes
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|RegionStateNode
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionStateNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|tailMap
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
break|break;
name|regions
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|getTableRegionStates
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|tailMap
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
break|break;
name|regions
operator|.
name|add
argument_list|(
name|node
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
name|getTableRegionsInfo
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|tailMap
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
break|break;
name|regions
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|/** @return A view of region state nodes for all the regions. */
specifier|public
name|Collection
argument_list|<
name|RegionStateNode
argument_list|>
name|getRegionStateNodes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|regionsMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/** @return A snapshot of region state nodes for all the regions. */
specifier|public
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|getRegionStates
parameter_list|()
block|{
specifier|final
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|regionsMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|node
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|// ==========================================================================
comment|//  RegionState helpers
comment|// ==========================================================================
specifier|public
name|RegionState
name|getRegionState
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|RegionStateNode
name|regionStateNode
init|=
name|getRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
return|return
name|regionStateNode
operator|==
literal|null
condition|?
literal|null
else|:
name|regionStateNode
operator|.
name|toRegionState
argument_list|()
return|;
block|}
specifier|public
name|RegionState
name|getRegionState
parameter_list|(
specifier|final
name|String
name|encodedRegionName
parameter_list|)
block|{
comment|// TODO: Need a map<encodedName, ...> but it is just dispatch merge...
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|encodedRegionName
argument_list|)
condition|)
block|{
return|return
name|node
operator|.
name|toRegionState
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// ============================================================================================
comment|//  TODO: helpers
comment|// ============================================================================================
specifier|public
name|boolean
name|hasTableRegionStates
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
comment|// TODO
return|return
operator|!
name|getTableRegionStates
argument_list|(
name|tableName
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * @return Return online regions of table; does not include OFFLINE or SPLITTING regions.    */
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsOfTable
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
return|return
name|getRegionsOfTable
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|HRegionLocation
name|createRegionForReopen
parameter_list|(
name|RegionStateNode
name|node
parameter_list|)
block|{
name|node
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|include
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
condition|)
block|{
return|return
operator|new
name|HRegionLocation
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|node
operator|.
name|getRegionLocation
argument_list|()
argument_list|,
name|node
operator|.
name|getOpenSeqNum
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|OPENING
argument_list|)
condition|)
block|{
return|return
operator|new
name|HRegionLocation
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|node
operator|.
name|getRegionLocation
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|node
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the regions to be reopened when modifying a table.    *<p/>    * Notice that the {@code openSeqNum} in the returned HRegionLocation is also used to indicate the    * state of this region, positive means the region is in {@link State#OPEN}, -1 means    * {@link State#OPENING}. And for regions in other states we do not need reopen them.    */
specifier|public
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|getRegionsOfTableForReopen
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|getTableRegionStateNodes
argument_list|(
name|tableName
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|createRegionForReopen
argument_list|)
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|!=
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Check whether the region has been reopened. The meaning of the {@link HRegionLocation} is the    * same with {@link #getRegionsOfTableForReopen(TableName)}.    *<p/>    * For a region which is in {@link State#OPEN} before, if the region state is changed or the open    * seq num is changed, we can confirm that it has been reopened.    *<p/>    * For a region which is in {@link State#OPENING} before, usually it will be in {@link State#OPEN}    * now and we will schedule a MRP to reopen it. But there are several exceptions:    *<ul>    *<li>The region is in state other than {@link State#OPEN} or {@link State#OPENING}.</li>    *<li>The location of the region has been changed</li>    *</ul>    * Of course the region could still be in {@link State#OPENING} state and still on the same    * server, then here we will still return a {@link HRegionLocation} for it, just like    * {@link #getRegionsOfTableForReopen(TableName)}.    * @param oldLoc the previous state/location of this region    * @return null if the region has been reopened, otherwise a new {@link HRegionLocation} which    *         means we still need to reopen the region.    * @see #getRegionsOfTableForReopen(TableName)    */
specifier|public
name|HRegionLocation
name|checkReopened
parameter_list|(
name|HRegionLocation
name|oldLoc
parameter_list|)
block|{
name|RegionStateNode
name|node
init|=
name|getRegionStateNode
argument_list|(
name|oldLoc
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
comment|// HBASE-20921
comment|// if the oldLoc's state node does not exist, that means the region is
comment|// merged or split, no need to check it
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|node
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|oldLoc
operator|.
name|getSeqNum
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// in OPEN state before
if|if
condition|(
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getOpenSeqNum
argument_list|()
operator|>
name|oldLoc
operator|.
name|getSeqNum
argument_list|()
condition|)
block|{
comment|// normal case, the region has been reopened
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// the open seq num does not change, need to reopen again
return|return
operator|new
name|HRegionLocation
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|node
operator|.
name|getRegionLocation
argument_list|()
argument_list|,
name|node
operator|.
name|getOpenSeqNum
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// the state has been changed so we can make sure that the region has been reopened(not
comment|// finished maybe, but not a problem).
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// in OPENING state before
if|if
condition|(
operator|!
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|OPEN
argument_list|,
name|State
operator|.
name|OPENING
argument_list|)
condition|)
block|{
comment|// not in OPEN or OPENING state, then we can make sure that the region has been
comment|// reopened(not finished maybe, but not a problem)
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|oldLoc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
comment|// the region has been moved, so we can make sure that the region has been reopened.
return|return
literal|null
return|;
block|}
comment|// normal case, we are still in OPENING state, or the reopen has been opened and the state
comment|// is changed to OPEN.
name|long
name|openSeqNum
init|=
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
condition|?
name|node
operator|.
name|getOpenSeqNum
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
return|return
operator|new
name|HRegionLocation
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|node
operator|.
name|getRegionLocation
argument_list|()
argument_list|,
name|openSeqNum
argument_list|)
return|;
block|}
block|}
block|}
finally|finally
block|{
name|node
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return Return online regions of table; does not include OFFLINE or SPLITTING regions.    */
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsOfTable
parameter_list|(
name|TableName
name|table
parameter_list|,
name|boolean
name|offline
parameter_list|)
block|{
return|return
name|getRegionsOfTable
argument_list|(
name|table
argument_list|,
name|state
lambda|->
name|include
argument_list|(
name|state
argument_list|,
name|offline
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return Return the regions of the table; does not include OFFLINE unless you set    *<code>offline</code> to true. Does not include regions that are in the    *         {@link State#SPLIT} state.    */
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsOfTable
parameter_list|(
name|TableName
name|table
parameter_list|,
name|Predicate
argument_list|<
name|RegionStateNode
argument_list|>
name|filter
parameter_list|)
block|{
return|return
name|getTableRegionStateNodes
argument_list|(
name|table
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|n
lambda|->
name|n
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Utility. Whether to include region in list of regions. Default is to    * weed out split and offline regions.    * @return True if we should include the<code>node</code> (do not include    * if split or offline unless<code>offline</code> is set to true.    */
name|boolean
name|include
parameter_list|(
specifier|final
name|RegionStateNode
name|node
parameter_list|,
specifier|final
name|boolean
name|offline
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"WORKING ON "
operator|+
name|node
operator|+
literal|" "
operator|+
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|SPLIT
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|OFFLINE
argument_list|)
operator|&&
operator|!
name|offline
condition|)
return|return
literal|false
return|;
specifier|final
name|RegionInfo
name|hri
init|=
name|node
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
return|return
operator|(
operator|!
name|hri
operator|.
name|isOffline
argument_list|()
operator|&&
operator|!
name|hri
operator|.
name|isSplit
argument_list|()
operator|)
operator|||
operator|(
operator|(
name|hri
operator|.
name|isOffline
argument_list|()
operator|||
name|hri
operator|.
name|isSplit
argument_list|()
operator|)
operator|&&
name|offline
operator|)
return|;
block|}
comment|// ============================================================================================
comment|// Split helpers
comment|// These methods will only be called in ServerCrashProcedure, and at the end of SCP we will remove
comment|// the ServerStateNode by calling removeServer.
comment|// ============================================================================================
specifier|private
name|void
name|setServerState
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|ServerState
name|state
parameter_list|)
block|{
name|ServerStateNode
name|serverNode
init|=
name|getOrCreateServer
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|serverNode
init|)
block|{
name|serverNode
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Call this when we start meta log splitting a crashed Server.    * @see #metaLogSplit(ServerName)    */
specifier|public
name|void
name|metaLogSplitting
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|setServerState
argument_list|(
name|serverName
argument_list|,
name|ServerState
operator|.
name|SPLITTING_META
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called after we've split the meta logs on a crashed Server.    * @see #metaLogSplitting(ServerName)    */
specifier|public
name|void
name|metaLogSplit
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|setServerState
argument_list|(
name|serverName
argument_list|,
name|ServerState
operator|.
name|SPLITTING_META_DONE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Call this when we start log splitting for a crashed Server.    * @see #logSplit(ServerName)    */
specifier|public
name|void
name|logSplitting
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|setServerState
argument_list|(
name|serverName
argument_list|,
name|ServerState
operator|.
name|SPLITTING
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called after we've split all logs on a crashed Server.    * @see #logSplitting(ServerName)    */
specifier|public
name|void
name|logSplit
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|setServerState
argument_list|(
name|serverName
argument_list|,
name|ServerState
operator|.
name|OFFLINE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateRegionState
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|RegionStateNode
name|regionNode
init|=
name|getOrCreateRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|regionNode
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|regionNode
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|regionNode
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ============================================================================================
comment|//  TODO:
comment|// ============================================================================================
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getAssignedRegions
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|isInTransition
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|isRegionInState
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|State
modifier|...
name|state
parameter_list|)
block|{
name|RegionStateNode
name|regionNode
init|=
name|getRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionNode
operator|!=
literal|null
condition|)
block|{
name|regionNode
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|regionNode
operator|.
name|isInState
argument_list|(
name|state
argument_list|)
return|;
block|}
finally|finally
block|{
name|regionNode
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isRegionOnline
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|isRegionInState
argument_list|(
name|regionInfo
argument_list|,
name|State
operator|.
name|OPEN
argument_list|)
return|;
block|}
comment|/**    * @return True if region is offline (In OFFLINE or CLOSED state).    */
specifier|public
name|boolean
name|isRegionOffline
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|isRegionInState
argument_list|(
name|regionInfo
argument_list|,
name|State
operator|.
name|OFFLINE
argument_list|,
name|State
operator|.
name|CLOSED
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getSnapShotOfAssignment
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|regions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RegionInfo
name|hri
range|:
name|regions
control|)
block|{
specifier|final
name|RegionStateNode
name|node
init|=
name|getRegionStateNode
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|createSnapshot
argument_list|(
name|node
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|createSnapshot
argument_list|(
name|node
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|createSnapshot
parameter_list|(
name|RegionStateNode
name|node
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
specifier|final
name|ServerName
name|serverName
init|=
name|node
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|serverRegions
init|=
name|result
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverRegions
operator|==
literal|null
condition|)
block|{
name|serverRegions
operator|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|serverRegions
argument_list|)
expr_stmt|;
block|}
name|serverRegions
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getRegionAssignments
parameter_list|()
block|{
specifier|final
name|HashMap
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|assignments
init|=
operator|new
name|HashMap
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|node
operator|.
name|getRegionLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
specifier|public
name|Map
argument_list|<
name|RegionState
operator|.
name|State
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getRegionByStateOfTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
specifier|final
name|State
index|[]
name|states
init|=
name|State
operator|.
name|values
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RegionState
operator|.
name|State
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|tableRegions
init|=
operator|new
name|HashMap
argument_list|<
name|State
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|(
name|states
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|states
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tableRegions
operator|.
name|put
argument_list|(
name|states
index|[
name|i
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|tableRegions
operator|.
name|get
argument_list|(
name|node
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableRegions
return|;
block|}
specifier|public
name|ServerName
name|getRegionServerOfRegion
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|RegionStateNode
name|regionNode
init|=
name|getRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionNode
operator|!=
literal|null
condition|)
block|{
name|regionNode
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ServerName
name|server
init|=
name|regionNode
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
return|return
name|server
operator|!=
literal|null
condition|?
name|server
else|:
name|regionNode
operator|.
name|getLastHost
argument_list|()
return|;
block|}
finally|finally
block|{
name|regionNode
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * This is an EXPENSIVE clone.  Cloning though is the safest thing to do.    * Can't let out original since it can change and at least the load balancer    * wants to iterate this exported list.  We need to synchronize on regions    * since all access to this.servers is under a lock on this.regions.    *    * @param isByTable If<code>true</code>, return the assignments by table. If<code>false</code>,    *                  return the assignments which aggregate the server-load to the cluster level.    * @return A clone of current assignments.    */
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|getAssignmentsForBalancer
parameter_list|(
name|boolean
name|isByTable
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isByTable
condition|)
block|{
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|tableResult
init|=
name|result
operator|.
name|computeIfAbsent
argument_list|(
name|node
operator|.
name|getTable
argument_list|()
argument_list|,
name|t
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|serverName
init|=
name|node
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping, no server for "
operator|+
name|node
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|serverResult
init|=
name|tableResult
operator|.
name|computeIfAbsent
argument_list|(
name|serverName
argument_list|,
name|s
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|serverResult
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add online servers with no assignment for the table.
for|for
control|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|table
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ServerName
name|serverName
range|:
name|serverMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|table
operator|.
name|putIfAbsent
argument_list|(
name|serverName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|ensemble
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|serverMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerStateNode
name|serverNode
range|:
name|serverMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ensemble
operator|.
name|put
argument_list|(
name|serverNode
operator|.
name|getServerName
argument_list|()
argument_list|,
name|serverNode
operator|.
name|getRegionInfoList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Use a fake table name to represent the whole cluster's assignments
name|result
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|ENSEMBLE_TABLE_NAME
argument_list|,
name|ensemble
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// ==========================================================================
comment|//  Region in transition helpers
comment|// ==========================================================================
specifier|public
name|boolean
name|hasRegionsInTransition
parameter_list|()
block|{
return|return
operator|!
name|regionInTransition
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isRegionInTransition
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
specifier|final
name|RegionStateNode
name|node
init|=
name|regionInTransition
operator|.
name|get
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
return|return
name|node
operator|!=
literal|null
condition|?
name|node
operator|.
name|isInTransition
argument_list|()
else|:
literal|false
return|;
block|}
specifier|public
name|RegionState
name|getRegionTransitionState
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
block|{
name|RegionStateNode
name|node
init|=
name|regionInTransition
operator|.
name|get
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|node
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|node
operator|.
name|isInTransition
argument_list|()
condition|?
name|node
operator|.
name|toRegionState
argument_list|()
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|node
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|RegionStateNode
argument_list|>
name|getRegionsInTransition
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|RegionStateNode
argument_list|>
argument_list|(
name|regionInTransition
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the number of regions in transition.    */
specifier|public
name|int
name|getRegionsInTransitionCount
parameter_list|()
block|{
return|return
name|regionInTransition
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|RegionState
argument_list|>
name|getRegionsStateInTransition
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|RegionState
argument_list|>
name|rit
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
argument_list|(
name|regionInTransition
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionInTransition
operator|.
name|values
argument_list|()
control|)
block|{
name|rit
operator|.
name|add
argument_list|(
name|node
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rit
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|RegionState
argument_list|>
name|getRegionsInTransitionOrderedByTimestamp
parameter_list|()
block|{
specifier|final
name|SortedSet
argument_list|<
name|RegionState
argument_list|>
name|rit
init|=
operator|new
name|TreeSet
argument_list|<
name|RegionState
argument_list|>
argument_list|(
name|REGION_STATE_STAMP_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionInTransition
operator|.
name|values
argument_list|()
control|)
block|{
name|rit
operator|.
name|add
argument_list|(
name|node
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rit
return|;
block|}
comment|// ==========================================================================
comment|//  Region offline helpers
comment|// ==========================================================================
comment|// TODO: Populated when we read meta but regions never make it out of here.
specifier|public
name|void
name|addToOfflineRegions
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added to offline, CURRENTLY NEVER CLEARED!!! "
operator|+
name|regionNode
argument_list|)
expr_stmt|;
name|regionOffline
operator|.
name|put
argument_list|(
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|regionNode
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Unused.
specifier|public
name|void
name|removeFromOfflineRegions
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|regionOffline
operator|.
name|remove
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
comment|// ==========================================================================
comment|//  Region FAIL_OPEN helpers
comment|// ==========================================================================
specifier|public
specifier|static
specifier|final
class|class
name|RegionFailedOpen
block|{
specifier|private
specifier|final
name|RegionStateNode
name|regionNode
decl_stmt|;
specifier|private
specifier|volatile
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
specifier|private
name|AtomicInteger
name|retries
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|public
name|RegionFailedOpen
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|this
operator|.
name|regionNode
operator|=
name|regionNode
expr_stmt|;
block|}
specifier|public
name|RegionStateNode
name|getRegionStateNode
parameter_list|()
block|{
return|return
name|regionNode
return|;
block|}
specifier|public
name|RegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
return|;
block|}
specifier|public
name|int
name|incrementAndGetRetries
parameter_list|()
block|{
return|return
name|this
operator|.
name|retries
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
specifier|public
name|int
name|getRetries
parameter_list|()
block|{
return|return
name|retries
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setException
parameter_list|(
specifier|final
name|Exception
name|exception
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
block|}
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|this
operator|.
name|exception
return|;
block|}
block|}
specifier|public
name|RegionFailedOpen
name|addToFailedOpen
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|key
init|=
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|RegionFailedOpen
name|node
init|=
name|regionFailedOpen
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|RegionFailedOpen
name|newNode
init|=
operator|new
name|RegionFailedOpen
argument_list|(
name|regionNode
argument_list|)
decl_stmt|;
name|RegionFailedOpen
name|oldNode
init|=
name|regionFailedOpen
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|newNode
argument_list|)
decl_stmt|;
name|node
operator|=
name|oldNode
operator|!=
literal|null
condition|?
name|oldNode
else|:
name|newNode
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|RegionFailedOpen
name|getFailedOpen
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|regionFailedOpen
operator|.
name|get
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeFromFailedOpen
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|regionFailedOpen
operator|.
name|remove
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RegionState
argument_list|>
name|getRegionFailedOpen
parameter_list|()
block|{
if|if
condition|(
name|regionFailedOpen
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
argument_list|(
name|regionFailedOpen
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionFailedOpen
name|r
range|:
name|regionFailedOpen
operator|.
name|values
argument_list|()
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|r
operator|.
name|getRegionStateNode
argument_list|()
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|// ==========================================================================
comment|//  Servers
comment|// ==========================================================================
comment|/**    * Be judicious calling this method. Do it on server register ONLY otherwise    * you could mess up online server accounting. TOOD: Review usage and convert    * to {@link #getServerNode(ServerName)} where we can.    */
specifier|public
name|ServerStateNode
name|getOrCreateServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|ServerStateNode
name|node
init|=
name|serverMap
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|ServerStateNode
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|ServerStateNode
name|oldNode
init|=
name|serverMap
operator|.
name|putIfAbsent
argument_list|(
name|serverName
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|node
operator|=
name|oldNode
operator|!=
literal|null
condition|?
name|oldNode
else|:
name|node
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|void
name|removeServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|serverMap
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|ServerStateNode
name|getServerNode
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|serverMap
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
return|;
block|}
specifier|public
name|double
name|getAverageLoad
parameter_list|()
block|{
name|int
name|numServers
init|=
literal|0
decl_stmt|;
name|int
name|totalLoad
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ServerStateNode
name|node
range|:
name|serverMap
operator|.
name|values
argument_list|()
control|)
block|{
name|totalLoad
operator|+=
name|node
operator|.
name|getRegionCount
argument_list|()
expr_stmt|;
name|numServers
operator|++
expr_stmt|;
block|}
return|return
name|numServers
operator|==
literal|0
condition|?
literal|0.0
else|:
operator|(
name|double
operator|)
name|totalLoad
operator|/
operator|(
name|double
operator|)
name|numServers
return|;
block|}
specifier|public
name|ServerStateNode
name|addRegionToServer
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|ServerStateNode
name|serverNode
init|=
name|getOrCreateServer
argument_list|(
name|regionNode
operator|.
name|getRegionLocation
argument_list|()
argument_list|)
decl_stmt|;
name|serverNode
operator|.
name|addRegion
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
return|return
name|serverNode
return|;
block|}
specifier|public
name|ServerStateNode
name|removeRegionFromServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|ServerStateNode
name|serverNode
init|=
name|getOrCreateServer
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|serverNode
operator|.
name|removeRegion
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
return|return
name|serverNode
return|;
block|}
comment|// ==========================================================================
comment|//  ToString helpers
comment|// ==========================================================================
specifier|public
specifier|static
name|String
name|regionNamesToString
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|regions
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

