begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnexpectedStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * RegionStates contains a set of Maps that describes the in-memory state of the AM, with  * the regions available in the system, the region in transition, the offline regions and  * the servers holding regions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionStates
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionStates
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|State
index|[]
name|STATES_EXPECTED_ON_OPEN
init|=
operator|new
name|State
index|[]
block|{
name|State
operator|.
name|OFFLINE
block|,
name|State
operator|.
name|CLOSED
block|,
comment|// disable/offline
name|State
operator|.
name|SPLITTING
block|,
name|State
operator|.
name|SPLIT
block|,
comment|// ServerCrashProcedure
name|State
operator|.
name|OPENING
block|,
name|State
operator|.
name|FAILED_OPEN
block|,
comment|// already in-progress (retrying)
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|State
index|[]
name|STATES_EXPECTED_ON_CLOSE
init|=
operator|new
name|State
index|[]
block|{
name|State
operator|.
name|SPLITTING
block|,
name|State
operator|.
name|SPLIT
block|,
name|State
operator|.
name|MERGING
block|,
comment|// ServerCrashProcedure
name|State
operator|.
name|OPEN
block|,
comment|// enabled/open
name|State
operator|.
name|CLOSING
comment|// already in-progress (retrying)
block|}
decl_stmt|;
specifier|private
specifier|static
class|class
name|AssignmentProcedureEvent
extends|extends
name|ProcedureEvent
argument_list|<
name|RegionInfo
argument_list|>
block|{
specifier|public
name|AssignmentProcedureEvent
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|super
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ServerReportEvent
extends|extends
name|ProcedureEvent
argument_list|<
name|ServerName
argument_list|>
block|{
specifier|public
name|ServerReportEvent
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|super
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Current Region State.    * In-memory only. Not persisted.    */
comment|// Mutable/Immutable? Changes have to be synchronized or not?
comment|// Data members are volatile which seems to say multi-threaded access is fine.
comment|// In the below we do check and set but the check state could change before
comment|// we do the set because no synchronization....which seems dodgy. Clear up
comment|// understanding here... how many threads accessing? Do locks make it so one
comment|// thread at a time working on a single Region's RegionStateNode? Lets presume
comment|// so for now. Odd is that elsewhere in this RegionStates, we synchronize on
comment|// the RegionStateNode instance. TODO.
specifier|public
specifier|static
class|class
name|RegionStateNode
implements|implements
name|Comparable
argument_list|<
name|RegionStateNode
argument_list|>
block|{
specifier|private
specifier|final
name|RegionInfo
name|regionInfo
decl_stmt|;
specifier|private
specifier|final
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|event
decl_stmt|;
specifier|private
specifier|volatile
name|RegionTransitionProcedure
name|procedure
init|=
literal|null
decl_stmt|;
specifier|private
specifier|volatile
name|ServerName
name|regionLocation
init|=
literal|null
decl_stmt|;
specifier|private
specifier|volatile
name|ServerName
name|lastHost
init|=
literal|null
decl_stmt|;
comment|/**      * A Region-in-Transition (RIT) moves through states.      * See {@link State} for complete list. A Region that      * is opened moves from OFFLINE => OPENING => OPENED.      */
specifier|private
specifier|volatile
name|State
name|state
init|=
name|State
operator|.
name|OFFLINE
decl_stmt|;
comment|/**      * Updated whenever a call to {@link #setRegionLocation(ServerName)}      * or {@link #setState(State, State...)}.      */
specifier|private
specifier|volatile
name|long
name|lastUpdate
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|openSeqNum
init|=
name|HConstants
operator|.
name|NO_SEQNUM
decl_stmt|;
specifier|public
name|RegionStateNode
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|event
operator|=
operator|new
name|AssignmentProcedureEvent
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param update new region state this node should be assigned.      * @param expected current state should be in this given list of expected states      * @return true, if current state is in expected list; otherwise false.      */
specifier|public
name|boolean
name|setState
parameter_list|(
specifier|final
name|State
name|update
parameter_list|,
specifier|final
name|State
modifier|...
name|expected
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isInState
argument_list|(
name|expected
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|state
operator|=
name|update
expr_stmt|;
name|this
operator|.
name|lastUpdate
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Put region into OFFLINE mode (set state and clear location).      * @return Last recorded server deploy      */
specifier|public
name|ServerName
name|offline
parameter_list|()
block|{
name|setState
argument_list|(
name|State
operator|.
name|OFFLINE
argument_list|)
expr_stmt|;
return|return
name|setRegionLocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Set new {@link State} but only if currently in<code>expected</code> State      * (if not, throw {@link UnexpectedStateException}.      */
specifier|public
name|void
name|transitionState
parameter_list|(
specifier|final
name|State
name|update
parameter_list|,
specifier|final
name|State
modifier|...
name|expected
parameter_list|)
throws|throws
name|UnexpectedStateException
block|{
if|if
condition|(
operator|!
name|setState
argument_list|(
name|update
argument_list|,
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnexpectedStateException
argument_list|(
literal|"Expected "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|" so could move to "
operator|+
name|update
operator|+
literal|" but current state="
operator|+
name|getState
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isInState
parameter_list|(
specifier|final
name|State
modifier|...
name|expected
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|!=
literal|null
operator|&&
name|expected
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|boolean
name|expectedState
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|expectedState
operator||=
operator|(
name|getState
argument_list|()
operator|==
name|expected
index|[
name|i
index|]
operator|)
expr_stmt|;
block|}
return|return
name|expectedState
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isStuck
parameter_list|()
block|{
return|return
name|isInState
argument_list|(
name|State
operator|.
name|FAILED_OPEN
argument_list|)
operator|&&
name|getProcedure
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isInTransition
parameter_list|()
block|{
return|return
name|getProcedure
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|long
name|getLastUpdate
parameter_list|()
block|{
return|return
name|procedure
operator|!=
literal|null
condition|?
name|procedure
operator|.
name|getLastUpdate
argument_list|()
else|:
name|lastUpdate
return|;
block|}
specifier|public
name|void
name|setLastHost
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|lastHost
operator|=
name|serverName
expr_stmt|;
block|}
specifier|public
name|void
name|setOpenSeqNum
parameter_list|(
specifier|final
name|long
name|seqId
parameter_list|)
block|{
name|this
operator|.
name|openSeqNum
operator|=
name|seqId
expr_stmt|;
block|}
specifier|public
name|ServerName
name|setRegionLocation
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|ServerName
name|lastRegionLocation
init|=
name|this
operator|.
name|regionLocation
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|serverName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Tracking when we are set to null "
operator|+
name|this
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"TRACE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|regionLocation
operator|=
name|serverName
expr_stmt|;
name|this
operator|.
name|lastUpdate
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
return|return
name|lastRegionLocation
return|;
block|}
specifier|public
name|boolean
name|setProcedure
parameter_list|(
specifier|final
name|RegionTransitionProcedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|procedure
operator|!=
literal|null
operator|&&
name|this
operator|.
name|procedure
operator|!=
name|proc
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|procedure
operator|=
name|proc
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|unsetProcedure
parameter_list|(
specifier|final
name|RegionTransitionProcedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|procedure
operator|!=
literal|null
operator|&&
name|this
operator|.
name|procedure
operator|!=
name|proc
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|procedure
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|RegionTransitionProcedure
name|getProcedure
parameter_list|()
block|{
return|return
name|procedure
return|;
block|}
specifier|public
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|getProcedureEvent
parameter_list|()
block|{
return|return
name|event
return|;
block|}
specifier|public
name|RegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionInfo
return|;
block|}
specifier|public
name|TableName
name|getTable
parameter_list|()
block|{
return|return
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isSystemTable
parameter_list|()
block|{
return|return
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
return|;
block|}
specifier|public
name|ServerName
name|getLastHost
parameter_list|()
block|{
return|return
name|lastHost
return|;
block|}
specifier|public
name|ServerName
name|getRegionLocation
parameter_list|()
block|{
return|return
name|regionLocation
return|;
block|}
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|long
name|getOpenSeqNum
parameter_list|()
block|{
return|return
name|openSeqNum
return|;
block|}
specifier|public
name|int
name|getFormatVersion
parameter_list|()
block|{
comment|// we don't have any format for now
comment|// it should probably be in regionInfo.getFormatVersion()
return|return
literal|0
return|;
block|}
specifier|public
name|RegionState
name|toRegionState
parameter_list|()
block|{
return|return
operator|new
name|RegionState
argument_list|(
name|getRegionInfo
argument_list|()
argument_list|,
name|getState
argument_list|()
argument_list|,
name|getLastUpdate
argument_list|()
argument_list|,
name|getRegionLocation
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|RegionStateNode
name|other
parameter_list|)
block|{
comment|// NOTE: RegionInfo sort by table first, so we are relying on that.
comment|// we have a TestRegionState#testOrderedByTable() that check for that.
return|return
name|RegionInfo
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|getRegionInfo
argument_list|()
argument_list|,
name|other
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getRegionInfo
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|RegionStateNode
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|compareTo
argument_list|(
operator|(
name|RegionStateNode
operator|)
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toDescriptiveString
argument_list|()
return|;
block|}
specifier|public
name|String
name|toShortString
parameter_list|()
block|{
comment|// rit= is the current Region-In-Transition State -- see State enum.
return|return
name|String
operator|.
name|format
argument_list|(
literal|"rit=%s, location=%s"
argument_list|,
name|getState
argument_list|()
argument_list|,
name|getRegionLocation
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toDescriptiveString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s, table=%s, region=%s"
argument_list|,
name|toShortString
argument_list|()
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// This comparator sorts the RegionStates by time stamp then Region name.
comment|// Comparing by timestamp alone can lead us to discard different RegionStates that happen
comment|// to share a timestamp.
specifier|private
specifier|static
class|class
name|RegionStateStampComparator
implements|implements
name|Comparator
argument_list|<
name|RegionState
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|RegionState
name|l
parameter_list|,
specifier|final
name|RegionState
name|r
parameter_list|)
block|{
name|int
name|stampCmp
init|=
name|Long
operator|.
name|compare
argument_list|(
name|l
operator|.
name|getStamp
argument_list|()
argument_list|,
name|r
operator|.
name|getStamp
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|stampCmp
operator|!=
literal|0
condition|?
name|stampCmp
else|:
name|RegionInfo
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|l
operator|.
name|getRegion
argument_list|()
argument_list|,
name|r
operator|.
name|getRegion
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
enum|enum
name|ServerState
block|{
name|ONLINE
block|,
name|SPLITTING
block|,
name|OFFLINE
block|}
specifier|public
specifier|static
class|class
name|ServerStateNode
implements|implements
name|Comparable
argument_list|<
name|ServerStateNode
argument_list|>
block|{
specifier|private
specifier|final
name|ServerReportEvent
name|reportEvent
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|RegionStateNode
argument_list|>
name|regions
decl_stmt|;
specifier|private
specifier|final
name|ServerName
name|serverName
decl_stmt|;
specifier|private
specifier|volatile
name|ServerState
name|state
init|=
name|ServerState
operator|.
name|ONLINE
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|versionNumber
init|=
literal|0
decl_stmt|;
specifier|public
name|ServerStateNode
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
name|this
operator|.
name|regions
operator|=
name|ConcurrentHashMap
operator|.
name|newKeySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|reportEvent
operator|=
operator|new
name|ServerReportEvent
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|serverName
return|;
block|}
specifier|public
name|ServerState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|int
name|getVersionNumber
parameter_list|()
block|{
return|return
name|versionNumber
return|;
block|}
specifier|public
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|getReportEvent
parameter_list|()
block|{
return|return
name|reportEvent
return|;
block|}
specifier|public
name|boolean
name|isInState
parameter_list|(
specifier|final
name|ServerState
modifier|...
name|expected
parameter_list|)
block|{
name|boolean
name|expectedState
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|expectedState
operator||=
operator|(
name|state
operator|==
name|expected
index|[
name|i
index|]
operator|)
expr_stmt|;
block|}
block|}
return|return
name|expectedState
return|;
block|}
specifier|public
name|void
name|setState
parameter_list|(
specifier|final
name|ServerState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
specifier|public
name|void
name|setVersionNumber
parameter_list|(
specifier|final
name|int
name|versionNumber
parameter_list|)
block|{
name|this
operator|.
name|versionNumber
operator|=
name|versionNumber
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|RegionStateNode
argument_list|>
name|getRegions
parameter_list|()
block|{
return|return
name|regions
return|;
block|}
specifier|public
name|int
name|getRegionCount
parameter_list|()
block|{
return|return
name|regions
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionInfoList
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
name|hris
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|region
range|:
name|regions
control|)
block|{
name|hris
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|hris
return|;
block|}
specifier|public
name|void
name|addRegion
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|this
operator|.
name|regions
operator|.
name|add
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeRegion
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|this
operator|.
name|regions
operator|.
name|remove
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|ServerStateNode
name|other
parameter_list|)
block|{
return|return
name|getServerName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getServerName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ServerStateNode
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|compareTo
argument_list|(
operator|(
name|ServerStateNode
operator|)
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"ServerStateNode(%s)"
argument_list|,
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|final
specifier|static
name|RegionStateStampComparator
name|REGION_STATE_STAMP_COMPARATOR
init|=
operator|new
name|RegionStateStampComparator
argument_list|()
decl_stmt|;
comment|// TODO: Replace the ConcurrentSkipListMaps
comment|/**    * RegionName -- i.e. RegionInfo.getRegionName() -- as bytes to {@link RegionStateNode}    */
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionStateNode
argument_list|>
name|regionsMap
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionStateNode
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|RegionInfo
argument_list|,
name|RegionStateNode
argument_list|>
name|regionInTransition
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|RegionInfo
argument_list|,
name|RegionStateNode
argument_list|>
argument_list|(
name|RegionInfo
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
comment|/**    * Regions marked as offline on a read of hbase:meta. Unused or at least, once    * offlined, regions have no means of coming on line again. TODO.    */
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|RegionInfo
argument_list|,
name|RegionStateNode
argument_list|>
name|regionOffline
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|RegionInfo
argument_list|,
name|RegionStateNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionFailedOpen
argument_list|>
name|regionFailedOpen
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionFailedOpen
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerStateNode
argument_list|>
name|serverMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerStateNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RegionStates
parameter_list|()
block|{ }
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|regionsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|regionInTransition
operator|.
name|clear
argument_list|()
expr_stmt|;
name|regionOffline
operator|.
name|clear
argument_list|()
expr_stmt|;
name|serverMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|boolean
name|isRegionInRegionStates
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
block|{
return|return
operator|(
name|regionsMap
operator|.
name|containsKey
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|||
name|regionInTransition
operator|.
name|containsKey
argument_list|(
name|hri
argument_list|)
operator|||
name|regionOffline
operator|.
name|containsKey
argument_list|(
name|hri
argument_list|)
operator|)
return|;
block|}
comment|// ==========================================================================
comment|//  RegionStateNode helpers
comment|// ==========================================================================
specifier|protected
name|RegionStateNode
name|createRegionStateNode
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|RegionStateNode
name|newNode
init|=
operator|new
name|RegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|RegionStateNode
name|oldNode
init|=
name|regionsMap
operator|.
name|putIfAbsent
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|newNode
argument_list|)
decl_stmt|;
return|return
name|oldNode
operator|!=
literal|null
condition|?
name|oldNode
else|:
name|newNode
return|;
block|}
specifier|protected
name|RegionStateNode
name|getOrCreateRegionStateNode
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|RegionStateNode
name|node
init|=
name|regionsMap
operator|.
name|get
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|node
operator|!=
literal|null
condition|?
name|node
else|:
name|createRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
return|;
block|}
name|RegionStateNode
name|getRegionStateNodeFromName
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|regionsMap
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
return|;
block|}
specifier|protected
name|RegionStateNode
name|getRegionStateNode
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|getRegionStateNodeFromName
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|deleteRegion
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|regionsMap
operator|.
name|remove
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove from the offline regions map too if there.
if|if
condition|(
name|this
operator|.
name|regionOffline
operator|.
name|containsKey
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing from regionOffline Map: "
operator|+
name|regionInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionOffline
operator|.
name|remove
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|ArrayList
argument_list|<
name|RegionStateNode
argument_list|>
name|getTableRegionStateNodes
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|RegionStateNode
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionStateNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|tailMap
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
break|break;
name|regions
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|getTableRegionStates
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|tailMap
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
break|break;
name|regions
operator|.
name|add
argument_list|(
name|node
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
name|getTableRegionsInfo
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|tailMap
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
break|break;
name|regions
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
name|Collection
argument_list|<
name|RegionStateNode
argument_list|>
name|getRegionStateNodes
parameter_list|()
block|{
return|return
name|regionsMap
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|getRegionStates
parameter_list|()
block|{
specifier|final
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
argument_list|(
name|regionsMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|node
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|// ==========================================================================
comment|//  RegionState helpers
comment|// ==========================================================================
specifier|public
name|RegionState
name|getRegionState
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|RegionStateNode
name|regionStateNode
init|=
name|getRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
return|return
name|regionStateNode
operator|==
literal|null
condition|?
literal|null
else|:
name|regionStateNode
operator|.
name|toRegionState
argument_list|()
return|;
block|}
specifier|public
name|RegionState
name|getRegionState
parameter_list|(
specifier|final
name|String
name|encodedRegionName
parameter_list|)
block|{
comment|// TODO: Need a map<encodedName, ...> but it is just dispatch merge...
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|encodedRegionName
argument_list|)
condition|)
block|{
return|return
name|node
operator|.
name|toRegionState
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// ============================================================================================
comment|//  TODO: helpers
comment|// ============================================================================================
specifier|public
name|boolean
name|hasTableRegionStates
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
comment|// TODO
return|return
operator|!
name|getTableRegionStates
argument_list|(
name|tableName
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * @return Return online regions of table; does not include OFFLINE or SPLITTING regions.    */
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsOfTable
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
return|return
name|getRegionsOfTable
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * @return Return the regions of the table; does not include OFFLINE unless you set    *<code>offline</code> to true. Does not include regions that are in the    * {@link State#SPLIT} state.    */
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsOfTable
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|boolean
name|offline
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|RegionStateNode
argument_list|>
name|nodes
init|=
name|getTableRegionStateNodes
argument_list|(
name|table
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
name|hris
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|include
argument_list|(
name|node
argument_list|,
name|offline
argument_list|)
condition|)
name|hris
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|hris
return|;
block|}
comment|/**    * Utility. Whether to include region in list of regions. Default is to    * weed out split and offline regions.    * @return True if we should include the<code>node</code> (do not include    * if split or offline unless<code>offline</code> is set to true.    */
name|boolean
name|include
parameter_list|(
specifier|final
name|RegionStateNode
name|node
parameter_list|,
specifier|final
name|boolean
name|offline
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"WORKING ON "
operator|+
name|node
operator|+
literal|" "
operator|+
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|SPLIT
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|OFFLINE
argument_list|)
operator|&&
operator|!
name|offline
condition|)
return|return
literal|false
return|;
specifier|final
name|RegionInfo
name|hri
init|=
name|node
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
return|return
operator|(
operator|!
name|hri
operator|.
name|isOffline
argument_list|()
operator|&&
operator|!
name|hri
operator|.
name|isSplit
argument_list|()
operator|)
operator|||
operator|(
operator|(
name|hri
operator|.
name|isOffline
argument_list|()
operator|||
name|hri
operator|.
name|isSplit
argument_list|()
operator|)
operator|&&
name|offline
operator|)
return|;
block|}
comment|/**    * Returns the set of regions hosted by the specified server    * @param serverName the server we are interested in    * @return set of RegionInfo hosted by the specified server    */
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getServerRegionInfoSet
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
specifier|final
name|ServerStateNode
name|serverInfo
init|=
name|getServerNode
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverInfo
operator|==
literal|null
condition|)
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
synchronized|synchronized
init|(
name|serverInfo
init|)
block|{
return|return
name|serverInfo
operator|.
name|getRegionInfoList
argument_list|()
return|;
block|}
block|}
comment|// ============================================================================================
comment|//  TODO: split helpers
comment|// ============================================================================================
specifier|public
name|void
name|logSplit
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
specifier|final
name|ServerStateNode
name|serverNode
init|=
name|getOrCreateServer
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|serverNode
init|)
block|{
name|serverNode
operator|.
name|setState
argument_list|(
name|ServerState
operator|.
name|SPLITTING
argument_list|)
expr_stmt|;
comment|/* THIS HAS TO BE WRONG. THIS IS SPLITTING OF REGION, NOT SPLITTING WALs.       for (RegionStateNode regionNode: serverNode.getRegions()) {         synchronized (regionNode) {           // TODO: Abort procedure if present           regionNode.setState(State.SPLITTING);         }       }*/
block|}
block|}
specifier|public
name|void
name|logSplit
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
specifier|final
name|RegionStateNode
name|regionNode
init|=
name|getRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|regionNode
init|)
block|{
name|regionNode
operator|.
name|setState
argument_list|(
name|State
operator|.
name|SPLIT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|updateRegionState
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|State
name|state
parameter_list|)
block|{
specifier|final
name|RegionStateNode
name|regionNode
init|=
name|getOrCreateRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|regionNode
init|)
block|{
name|regionNode
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ============================================================================================
comment|//  TODO:
comment|// ============================================================================================
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getAssignedRegions
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|isInTransition
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|isRegionInState
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|State
modifier|...
name|state
parameter_list|)
block|{
specifier|final
name|RegionStateNode
name|region
init|=
name|getRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|region
init|)
block|{
return|return
name|region
operator|.
name|isInState
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isRegionOnline
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|isRegionInState
argument_list|(
name|regionInfo
argument_list|,
name|State
operator|.
name|OPEN
argument_list|)
return|;
block|}
comment|/**    * @return True if region is offline (In OFFLINE or CLOSED state).    */
specifier|public
name|boolean
name|isRegionOffline
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|isRegionInState
argument_list|(
name|regionInfo
argument_list|,
name|State
operator|.
name|OFFLINE
argument_list|,
name|State
operator|.
name|CLOSED
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getSnapShotOfAssignment
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|hri
range|:
name|regions
control|)
block|{
specifier|final
name|RegionStateNode
name|node
init|=
name|getRegionStateNode
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
continue|continue;
comment|// TODO: State.OPEN
specifier|final
name|ServerName
name|serverName
init|=
name|node
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
continue|continue;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|serverRegions
init|=
name|result
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverRegions
operator|==
literal|null
condition|)
block|{
name|serverRegions
operator|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|serverRegions
argument_list|)
expr_stmt|;
block|}
name|serverRegions
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getRegionAssignments
parameter_list|()
block|{
specifier|final
name|HashMap
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|assignments
init|=
operator|new
name|HashMap
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|node
operator|.
name|getRegionLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
specifier|public
name|Map
argument_list|<
name|RegionState
operator|.
name|State
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getRegionByStateOfTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
specifier|final
name|State
index|[]
name|states
init|=
name|State
operator|.
name|values
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RegionState
operator|.
name|State
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|tableRegions
init|=
operator|new
name|HashMap
argument_list|<
name|State
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|(
name|states
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|states
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tableRegions
operator|.
name|put
argument_list|(
name|states
index|[
name|i
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|tableRegions
operator|.
name|get
argument_list|(
name|node
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableRegions
return|;
block|}
specifier|public
name|ServerName
name|getRegionServerOfRegion
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
specifier|final
name|RegionStateNode
name|region
init|=
name|getRegionStateNode
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|region
init|)
block|{
name|ServerName
name|server
init|=
name|region
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
return|return
name|server
operator|!=
literal|null
condition|?
name|server
else|:
name|region
operator|.
name|getLastHost
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * This is an EXPENSIVE clone.  Cloning though is the safest thing to do.    * Can't let out original since it can change and at least the load balancer    * wants to iterate this exported list.  We need to synchronize on regions    * since all access to this.servers is under a lock on this.regions.    * @param forceByCluster a flag to force to aggregate the server-load to the cluster level    * @return A clone of current assignments by table.    */
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|getAssignmentsByTable
parameter_list|(
specifier|final
name|boolean
name|forceByCluster
parameter_list|)
block|{
if|if
condition|(
operator|!
name|forceByCluster
condition|)
return|return
name|getAssignmentsByTable
argument_list|()
return|;
specifier|final
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|ensemble
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|(
name|serverMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerStateNode
name|serverNode
range|:
name|serverMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ensemble
operator|.
name|put
argument_list|(
name|serverNode
operator|.
name|getServerName
argument_list|()
argument_list|,
name|serverNode
operator|.
name|getRegionInfoList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: can we use Collections.singletonMap(HConstants.ENSEMBLE_TABLE_NAME, ensemble)?
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|ENSEMBLE_TABLE_NAME
argument_list|,
name|ensemble
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|getAssignmentsByTable
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|tableResult
init|=
name|result
operator|.
name|get
argument_list|(
name|node
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableResult
operator|==
literal|null
condition|)
block|{
name|tableResult
operator|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|node
operator|.
name|getTable
argument_list|()
argument_list|,
name|tableResult
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ServerName
name|serverName
init|=
name|node
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping, no server for "
operator|+
name|node
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|serverResult
init|=
name|tableResult
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverResult
operator|==
literal|null
condition|)
block|{
name|serverResult
operator|=
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|tableResult
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|serverResult
argument_list|)
expr_stmt|;
block|}
name|serverResult
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add online servers with no assignment for the table.
for|for
control|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|table
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ServerName
name|svr
range|:
name|serverMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|table
operator|.
name|containsKey
argument_list|(
name|svr
argument_list|)
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|svr
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|RegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|// ==========================================================================
comment|//  Region in transition helpers
comment|// ==========================================================================
specifier|protected
name|boolean
name|addRegionInTransition
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|,
specifier|final
name|RegionTransitionProcedure
name|procedure
parameter_list|)
block|{
if|if
condition|(
name|procedure
operator|!=
literal|null
operator|&&
operator|!
name|regionNode
operator|.
name|setProcedure
argument_list|(
name|procedure
argument_list|)
condition|)
return|return
literal|false
return|;
name|regionInTransition
operator|.
name|put
argument_list|(
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|regionNode
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|removeRegionInTransition
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|,
specifier|final
name|RegionTransitionProcedure
name|procedure
parameter_list|)
block|{
name|regionInTransition
operator|.
name|remove
argument_list|(
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|regionNode
operator|.
name|unsetProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasRegionsInTransition
parameter_list|()
block|{
return|return
operator|!
name|regionInTransition
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isRegionInTransition
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
specifier|final
name|RegionStateNode
name|node
init|=
name|regionInTransition
operator|.
name|get
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
return|return
name|node
operator|!=
literal|null
condition|?
name|node
operator|.
name|isInTransition
argument_list|()
else|:
literal|false
return|;
block|}
comment|/**    * @return If a procedure-in-transition for<code>hri</code>, return it else null.    */
specifier|public
name|RegionTransitionProcedure
name|getRegionTransitionProcedure
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
block|{
name|RegionStateNode
name|node
init|=
name|regionInTransition
operator|.
name|get
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|node
operator|.
name|getProcedure
argument_list|()
return|;
block|}
specifier|public
name|RegionState
name|getRegionTransitionState
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
block|{
name|RegionStateNode
name|node
init|=
name|regionInTransition
operator|.
name|get
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
return|return
literal|null
return|;
synchronized|synchronized
init|(
name|node
init|)
block|{
return|return
name|node
operator|.
name|isInTransition
argument_list|()
condition|?
name|node
operator|.
name|toRegionState
argument_list|()
else|:
literal|null
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|RegionStateNode
argument_list|>
name|getRegionsInTransition
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|RegionStateNode
argument_list|>
argument_list|(
name|regionInTransition
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the number of regions in transition.    */
specifier|public
name|int
name|getRegionsInTransitionCount
parameter_list|()
block|{
return|return
name|regionInTransition
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|RegionState
argument_list|>
name|getRegionsStateInTransition
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|RegionState
argument_list|>
name|rit
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
argument_list|(
name|regionInTransition
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionInTransition
operator|.
name|values
argument_list|()
control|)
block|{
name|rit
operator|.
name|add
argument_list|(
name|node
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rit
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|RegionState
argument_list|>
name|getRegionsInTransitionOrderedByTimestamp
parameter_list|()
block|{
specifier|final
name|SortedSet
argument_list|<
name|RegionState
argument_list|>
name|rit
init|=
operator|new
name|TreeSet
argument_list|<
name|RegionState
argument_list|>
argument_list|(
name|REGION_STATE_STAMP_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|node
range|:
name|regionInTransition
operator|.
name|values
argument_list|()
control|)
block|{
name|rit
operator|.
name|add
argument_list|(
name|node
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rit
return|;
block|}
comment|// ==========================================================================
comment|//  Region offline helpers
comment|// ==========================================================================
comment|// TODO: Populated when we read meta but regions never make it out of here.
specifier|public
name|void
name|addToOfflineRegions
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added to offline, CURRENTLY NEVER CLEARED!!! "
operator|+
name|regionNode
argument_list|)
expr_stmt|;
name|regionOffline
operator|.
name|put
argument_list|(
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|regionNode
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Unused.
specifier|public
name|void
name|removeFromOfflineRegions
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|regionOffline
operator|.
name|remove
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
comment|// ==========================================================================
comment|//  Region FAIL_OPEN helpers
comment|// ==========================================================================
specifier|public
specifier|static
specifier|final
class|class
name|RegionFailedOpen
block|{
specifier|private
specifier|final
name|RegionStateNode
name|regionNode
decl_stmt|;
specifier|private
specifier|volatile
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|retries
init|=
literal|0
decl_stmt|;
specifier|public
name|RegionFailedOpen
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|this
operator|.
name|regionNode
operator|=
name|regionNode
expr_stmt|;
block|}
specifier|public
name|RegionStateNode
name|getRegionStateNode
parameter_list|()
block|{
return|return
name|regionNode
return|;
block|}
specifier|public
name|RegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
return|;
block|}
specifier|public
name|int
name|incrementAndGetRetries
parameter_list|()
block|{
return|return
operator|++
name|this
operator|.
name|retries
return|;
block|}
specifier|public
name|int
name|getRetries
parameter_list|()
block|{
return|return
name|retries
return|;
block|}
specifier|public
name|void
name|setException
parameter_list|(
specifier|final
name|Exception
name|exception
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
block|}
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|this
operator|.
name|exception
return|;
block|}
block|}
specifier|public
name|RegionFailedOpen
name|addToFailedOpen
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|key
init|=
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|RegionFailedOpen
name|node
init|=
name|regionFailedOpen
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|RegionFailedOpen
name|newNode
init|=
operator|new
name|RegionFailedOpen
argument_list|(
name|regionNode
argument_list|)
decl_stmt|;
name|RegionFailedOpen
name|oldNode
init|=
name|regionFailedOpen
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|newNode
argument_list|)
decl_stmt|;
name|node
operator|=
name|oldNode
operator|!=
literal|null
condition|?
name|oldNode
else|:
name|newNode
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|RegionFailedOpen
name|getFailedOpen
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|regionFailedOpen
operator|.
name|get
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeFromFailedOpen
parameter_list|(
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|regionFailedOpen
operator|.
name|remove
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RegionState
argument_list|>
name|getRegionFailedOpen
parameter_list|()
block|{
if|if
condition|(
name|regionFailedOpen
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionState
argument_list|>
argument_list|(
name|regionFailedOpen
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionFailedOpen
name|r
range|:
name|regionFailedOpen
operator|.
name|values
argument_list|()
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|r
operator|.
name|getRegionStateNode
argument_list|()
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|// ==========================================================================
comment|//  Servers
comment|// ==========================================================================
specifier|public
name|ServerStateNode
name|getOrCreateServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|ServerStateNode
name|node
init|=
name|serverMap
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|ServerStateNode
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|ServerStateNode
name|oldNode
init|=
name|serverMap
operator|.
name|putIfAbsent
argument_list|(
name|serverName
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|node
operator|=
name|oldNode
operator|!=
literal|null
condition|?
name|oldNode
else|:
name|node
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|void
name|removeServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|serverMap
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ServerStateNode
name|getServerNode
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|serverMap
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
return|;
block|}
specifier|public
name|double
name|getAverageLoad
parameter_list|()
block|{
name|int
name|numServers
init|=
literal|0
decl_stmt|;
name|int
name|totalLoad
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ServerStateNode
name|node
range|:
name|serverMap
operator|.
name|values
argument_list|()
control|)
block|{
name|totalLoad
operator|+=
name|node
operator|.
name|getRegionCount
argument_list|()
expr_stmt|;
name|numServers
operator|++
expr_stmt|;
block|}
return|return
name|numServers
operator|==
literal|0
condition|?
literal|0.0
else|:
operator|(
name|double
operator|)
name|totalLoad
operator|/
operator|(
name|double
operator|)
name|numServers
return|;
block|}
specifier|public
name|ServerStateNode
name|addRegionToServer
parameter_list|(
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|ServerStateNode
name|serverNode
init|=
name|getOrCreateServer
argument_list|(
name|regionNode
operator|.
name|getRegionLocation
argument_list|()
argument_list|)
decl_stmt|;
name|serverNode
operator|.
name|addRegion
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
return|return
name|serverNode
return|;
block|}
specifier|public
name|ServerStateNode
name|removeRegionFromServer
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|RegionStateNode
name|regionNode
parameter_list|)
block|{
name|ServerStateNode
name|serverNode
init|=
name|getOrCreateServer
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|serverNode
operator|.
name|removeRegion
argument_list|(
name|regionNode
argument_list|)
expr_stmt|;
return|return
name|serverNode
return|;
block|}
comment|// ==========================================================================
comment|//  ToString helpers
comment|// ==========================================================================
specifier|public
specifier|static
name|String
name|regionNamesToString
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|regions
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

