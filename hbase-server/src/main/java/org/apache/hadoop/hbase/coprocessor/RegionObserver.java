begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|NonNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|FSDataInputStreamWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|FlushLifeCycleTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MiniBatchOperationInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|OperationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionLifeCycleTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
operator|.
name|DeleteTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Coprocessors implement this interface to observe and mediate client actions on the region.  *<p>  * Since most implementations will be interested in only a subset of hooks, this class uses  * 'default' functions to avoid having to add unnecessary overrides. When the functions are  * non-empty, it's simply to satisfy the compiler by returning value of expected (non-void) type. It  * is done in a way that these default definitions act as no-op. So our suggestion to implementation  * would be to not call these 'default' methods from overrides.  *<p>  *<h3>Exception Handling</h3><br>  * For all functions, exception handling is done as follows:  *<ul>  *<li>Exceptions of type {@link IOException} are reported back to client.</li>  *<li>For any other kind of exception:  *<ul>  *<li>If the configuration {@link CoprocessorHost#ABORT_ON_ERROR_KEY} is set to true, then the  * server aborts.</li>  *<li>Otherwise, coprocessor is removed from the server and  * {@link org.apache.hadoop.hbase.DoNotRetryIOException} is returned to the client.</li>  *</ul>  *</li>  *</ul>  *<p>  *<h3>For Split Related Hooks</h3><br>  * In hbase2/AMv2, master runs splits, so the split related hooks are moved to  * {@link MasterObserver}.  *<p>  *<h3>Increment Column Value</h3><br>  * We do not call this hook anymore.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
comment|// TODO as method signatures need to break, update to
comment|// ObserverContext<? extends RegionCoprocessorEnvironment>
comment|// so we can use additional environment state that isn't exposed to coprocessors.
specifier|public
interface|interface
name|RegionObserver
block|{
comment|/** Mutation type for postMutationBeforeWAL hook */
enum|enum
name|MutationType
block|{
name|APPEND
block|,
name|INCREMENT
block|}
comment|/**    * Called before the region is reported as open to the master.    * @param c the environment provided by the region server    */
specifier|default
name|void
name|preOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the region is reported as open to the master.    * @param c the environment provided by the region server    */
specifier|default
name|void
name|postOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
block|{}
comment|/**    * Called before the memstore is flushed to disk.    * @param c the environment provided by the region server    * @param tracker tracker used to track the life cycle of a flush    */
specifier|default
name|void
name|preFlush
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|FlushLifeCycleTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before we open store scanner for flush. You can use the {@code options} to change max    * versions and TTL for the scanner being opened.    * @param c the environment provided by the region server    * @param store the store where flush is being requested    * @param options used to change max versions and TTL for the scanner being opened    */
specifier|default
name|void
name|preFlushScannerOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|ScanOptions
name|options
parameter_list|,
name|FlushLifeCycleTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a Store's memstore is flushed to disk.    * @param c the environment provided by the region server    * @param store the store where flush is being requested    * @param scanner the scanner over existing data used in the memstore    * @param tracker tracker used to track the life cycle of a flush    * @return the scanner to use during flush. Should not be {@code null} unless the implementation    *         is writing new store files on its own.    */
specifier|default
name|InternalScanner
name|preFlush
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|,
name|FlushLifeCycleTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scanner
return|;
block|}
comment|/**    * Called after the memstore is flushed to disk.    * @param c the environment provided by the region server    * @param tracker tracker used to track the life cycle of a flush    * @throws IOException if an error occurred on the coprocessor    */
specifier|default
name|void
name|postFlush
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|FlushLifeCycleTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a Store's memstore is flushed to disk.    * @param c the environment provided by the region server    * @param store the store being flushed    * @param resultFile the new store file written out during compaction    * @param tracker tracker used to track the life cycle of a flush    */
specifier|default
name|void
name|postFlush
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|StoreFile
name|resultFile
parameter_list|,
name|FlushLifeCycleTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before in memory compaction started.    * @param c the environment provided by the region server    * @param store the store where in memory compaction is being requested    */
specifier|default
name|void
name|preMemStoreCompaction
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before we open store scanner for in memory compaction. You can use the {@code options}    * to change max versions and TTL for the scanner being opened. Notice that this method will only    * be called when you use {@code eager} mode. For {@code basic} mode we will not drop any cells    * thus we do not open a store scanner.    * @param c the environment provided by the region server    * @param store the store where in memory compaction is being requested    * @param options used to change max versions and TTL for the scanner being opened    */
specifier|default
name|void
name|preMemStoreCompactionCompactScannerOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|ScanOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before we do in memory compaction. Notice that this method will only be called when you    * use {@code eager} mode. For {@code basic} mode we will not drop any cells thus there is no    * {@link InternalScanner}.    * @param c the environment provided by the region server    * @param store the store where in memory compaction is being executed    * @param scanner the scanner over existing data used in the memstore segments being compact    * @return the scanner to use during in memory compaction. Must be non-null.    */
annotation|@
name|NonNull
specifier|default
name|InternalScanner
name|preMemStoreCompactionCompact
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scanner
return|;
block|}
comment|/**    * Called after the in memory compaction is finished.    * @param c the environment provided by the region server    * @param store the store where in memory compaction is being executed    */
specifier|default
name|void
name|postMemStoreCompaction
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to selecting the {@link StoreFile StoreFiles} to compact from the list of    * available candidates. To alter the files used for compaction, you may mutate the passed in list    * of candidates. If you remove all the candidates then the compaction will be canceled.    *<p>Supports Coprocessor 'bypass' -- 'bypass' is how this method indicates that it changed    * the passed in<code>candidates</code>.    * @param c the environment provided by the region server    * @param store the store where compaction is being requested    * @param candidates the store files currently available for compaction    * @param tracker tracker used to track the life cycle of a compaction    */
specifier|default
name|void
name|preCompactSelection
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|StoreFile
argument_list|>
name|candidates
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the {@link StoreFile}s to compact have been selected from the available    * candidates.    * @param c the environment provided by the region server    * @param store the store being compacted    * @param selected the store files selected to compact    * @param tracker tracker used to track the life cycle of a compaction    * @param request the requested compaction    */
specifier|default
name|void
name|postCompactSelection
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|StoreFile
argument_list|>
name|selected
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
block|{}
comment|/**    * Called before we open store scanner for compaction. You can use the {@code options} to change max    * versions and TTL for the scanner being opened.    * @param c the environment provided by the region server    * @param store the store being compacted    * @param scanType type of Scan    * @param options used to change max versions and TTL for the scanner being opened    * @param tracker tracker used to track the life cycle of a compaction    * @param request the requested compaction    */
specifier|default
name|void
name|preCompactScannerOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|ScanOptions
name|options
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to writing the {@link StoreFile}s selected for compaction into a new    * {@code StoreFile}.    *<p>    * To override or modify the compaction process, implementing classes can wrap the provided    * {@link InternalScanner} with a custom implementation that is returned from this method. The    * custom scanner can then inspect {@link org.apache.hadoop.hbase.Cell}s from the wrapped scanner,    * applying its own policy to what gets written.    * @param c the environment provided by the region server    * @param store the store being compacted    * @param scanner the scanner over existing data used in the store file rewriting    * @param scanType type of Scan    * @param tracker tracker used to track the life cycle of a compaction    * @param request the requested compaction    * @return the scanner to use during compaction. Should not be {@code null} unless the    *         implementation is writing new store files on its own.    */
specifier|default
name|InternalScanner
name|preCompact
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scanner
return|;
block|}
comment|/**    * Called after compaction has completed and the new store file has been moved in to place.    * @param c the environment provided by the region server    * @param store the store being compacted    * @param resultFile the new store file written out during compaction    * @param tracker used to track the life cycle of a compaction    * @param request the requested compaction    */
specifier|default
name|void
name|postCompact
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|StoreFile
name|resultFile
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the region is reported as closed to the master.    * @param c the environment provided by the region server    * @param abortRequested true if the region server is aborting    */
specifier|default
name|void
name|preClose
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|boolean
name|abortRequested
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the region is reported as closed to the master.    * @param c the environment provided by the region server    * @param abortRequested true if the region server is aborting    */
specifier|default
name|void
name|postClose
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|boolean
name|abortRequested
parameter_list|)
block|{}
comment|/**    * Called before the client performs a Get    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    * @param c the environment provided by the region server    * @param get the Get request    * @param result The result to return to the client if default processing    * is bypassed. Can be modified. Will not be used if default processing    * is not bypassed.    */
specifier|default
name|void
name|preGetOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Get
name|get
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the client performs a Get    *<p>    * Note: Do not retain references to any Cells in 'result' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param get the Get request    * @param result the result to return to the client, modify as necessary    */
specifier|default
name|void
name|postGetOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Get
name|get
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the client tests for existence using a Get.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    * @param c the environment provided by the region server    * @param get the Get request    * @param exists the result returned by the region server    * @return the value to return to the client if bypassing default processing    */
specifier|default
name|boolean
name|preExists
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Get
name|get
parameter_list|,
name|boolean
name|exists
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|exists
return|;
block|}
comment|/**    * Called after the client tests for existence using a Get.    * @param c the environment provided by the region server    * @param get the Get request    * @param exists the result returned by the region server    * @return the result to return to the client    */
specifier|default
name|boolean
name|postExists
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Get
name|get
parameter_list|,
name|boolean
name|exists
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|exists
return|;
block|}
comment|/**    * Called before the client stores a value.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'put' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param put The Put object    * @param edit The WALEdit object that will be written to the wal    * @param durability Persistence guarantee for this Put    */
specifier|default
name|void
name|prePut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Put
name|put
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the client stores a value.    *<p>    * Note: Do not retain references to any Cells in 'put' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param put The Put object    * @param edit The WALEdit object for the wal    * @param durability Persistence guarantee for this Put    */
specifier|default
name|void
name|postPut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Put
name|put
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the client deletes a value.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'delete' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param delete The Delete object    * @param edit The WALEdit object for the wal    * @param durability Persistence guarantee for this Delete    */
specifier|default
name|void
name|preDelete
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Delete
name|delete
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the server updates the timestamp for version delete with latest timestamp.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    * @param c the environment provided by the region server    * @param mutation - the parent mutation associated with this delete cell    * @param cell - The deleteColumn with latest version cell    * @param byteNow - timestamp bytes    * @param get - the get formed using the current cell's row. Note that the get does not specify    *          the family and qualifier    * @deprecated Since hbase-2.0.0. No replacement. To be removed in hbase-3.0.0 and replaced    * with something that doesn't expose IntefaceAudience.Private classes.    */
annotation|@
name|Deprecated
specifier|default
name|void
name|prePrepareTimeStampForDeleteVersion
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|byteNow
parameter_list|,
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the client deletes a value.    *<p>    * Note: Do not retain references to any Cells in 'delete' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param delete The Delete object    * @param edit The WALEdit object for the wal    * @param durability Persistence guarantee for this Delete    */
specifier|default
name|void
name|postDelete
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Delete
name|delete
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * This will be called for every batch mutation operation happening at the server. This will be    * called after acquiring the locks on the mutating rows and after applying the proper timestamp    * for each Mutation at the server. The batch may contain Put/Delete. By setting OperationStatus    * of Mutations ({@link MiniBatchOperationInProgress#setOperationStatus(int, OperationStatus)}),    * {@link RegionObserver} can make Region to skip these Mutations.    *<p>    * Note: Do not retain references to any Cells in Mutations beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param miniBatchOp batch of Mutations getting applied to region.    */
specifier|default
name|void
name|preBatchMutate
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * This will be called after applying a batch of Mutations on a region. The Mutations are added to    * memstore and WAL. The difference of this one with    * {@link #postPut(ObserverContext, Put, WALEdit, Durability) }    * and {@link #postDelete(ObserverContext, Delete, WALEdit, Durability) } is    * this hook will be executed before the mvcc transaction completion.    *<p>    * Note: Do not retain references to any Cells in Mutations beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param miniBatchOp batch of Mutations applied to region. Coprocessors are discouraged from    *                    manipulating its state.    */
comment|// Coprocessors can do a form of bypass by changing state in miniBatchOp.
specifier|default
name|void
name|postBatchMutate
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * This will be called for region operations where read lock is acquired in    * {@link Region#startRegionOperation()}.    * @param ctx    * @param operation The operation is about to be taken on the region    */
specifier|default
name|void
name|postStartRegionOperation
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Operation
name|operation
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after releasing read lock in {@link Region#closeRegionOperation()}.    * @param ctx    * @param operation    */
specifier|default
name|void
name|postCloseRegionOperation
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Operation
name|operation
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the completion of batch put/delete and will be called even if the batch operation    * fails.    *<p>    * Note: Do not retain references to any Cells in Mutations beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param ctx    * @param miniBatchOp    * @param success true if batch operation is successful otherwise false.    */
specifier|default
name|void
name|postBatchMutateIndispensably
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before checkAndPut.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'put' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param put data to put if check succeeds    * @param result    * @return the return value to return to client if bypassing default    * processing    */
specifier|default
name|boolean
name|preCheckAndPut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|op
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Put
name|put
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|result
return|;
block|}
comment|/**    * Called before checkAndPut but after acquiring rowlock.    *<p>    *<b>Note:</b> Caution to be taken for not doing any long time operation in this hook.    * Row will be locked for longer time. Trying to acquire lock on another row, within this,    * can lead to potential deadlock.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'put' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param put data to put if check succeeds    * @param result    * @return the return value to return to client if bypassing default    * processing    */
specifier|default
name|boolean
name|preCheckAndPutAfterRowLock
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|op
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Put
name|put
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|result
return|;
block|}
comment|/**    * Called after checkAndPut    *<p>    * Note: Do not retain references to any Cells in 'put' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param put data to put if check succeeds    * @param result from the checkAndPut    * @return the possibly transformed return value to return to client    */
specifier|default
name|boolean
name|postCheckAndPut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|op
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Put
name|put
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|result
return|;
block|}
comment|/**    * Called before checkAndDelete.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'delete' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param delete delete to commit if check succeeds    * @param result    * @return the value to return to client if bypassing default processing    */
specifier|default
name|boolean
name|preCheckAndDelete
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|op
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Delete
name|delete
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|result
return|;
block|}
comment|/**    * Called before checkAndDelete but after acquiring rowock.    *<p>    *<b>Note:</b> Caution to be taken for not doing any long time operation in this hook.    * Row will be locked for longer time. Trying to acquire lock on another row, within this,    * can lead to potential deadlock.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'delete' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param delete delete to commit if check succeeds    * @param result    * @return the value to return to client if bypassing default processing    */
specifier|default
name|boolean
name|preCheckAndDeleteAfterRowLock
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|op
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Delete
name|delete
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|result
return|;
block|}
comment|/**    * Called after checkAndDelete    *<p>    * Note: Do not retain references to any Cells in 'delete' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param op the comparison operation    * @param comparator the comparator    * @param delete delete to commit if check succeeds    * @param result from the CheckAndDelete    * @return the possibly transformed returned value to return to client    */
specifier|default
name|boolean
name|postCheckAndDelete
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|op
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Delete
name|delete
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|result
return|;
block|}
comment|/**    * Called before Append.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'append' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param append Append object    * @return result to return to the client if bypassing default processing    */
specifier|default
name|Result
name|preAppend
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Called before Append but after acquiring rowlock.    *<p>    *<b>Note:</b> Caution to be taken for not doing any long time operation in this hook.    * Row will be locked for longer time. Trying to acquire lock on another row, within this,    * can lead to potential deadlock.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'append' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param append Append object    * @return result to return to the client if bypassing default processing    */
specifier|default
name|Result
name|preAppendAfterRowLock
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Called after Append    *<p>    * Note: Do not retain references to any Cells in 'append' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param append Append object    * @param result the result returned by increment    * @return the result to return to the client    */
specifier|default
name|Result
name|postAppend
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Append
name|append
parameter_list|,
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|result
return|;
block|}
comment|/**    * Called before Increment.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'increment' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param increment increment object    * @return result to return to the client if bypassing default processing    */
specifier|default
name|Result
name|preIncrement
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Called before Increment but after acquiring rowlock.    *<p>    *<b>Note:</b> Caution to be taken for not doing any long time operation in this hook.    * Row will be locked for longer time. Trying to acquire lock on another row, within this,    * can lead to potential deadlock.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells in 'increment' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    *    * @param c    *          the environment provided by the region server    * @param increment    *          increment object    * @return result to return to the client if bypassing default processing    *           if an error occurred on the coprocessor    */
specifier|default
name|Result
name|preIncrementAfterRowLock
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Called after increment    *<p>    * Note: Do not retain references to any Cells in 'increment' beyond the life of this invocation.    * If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param increment increment object    * @param result the result returned by increment    * @return the result to return to the client    */
specifier|default
name|Result
name|postIncrement
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Increment
name|increment
parameter_list|,
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|result
return|;
block|}
comment|/**    * Called before the client opens a new scanner.    *<p>    * Note: Do not retain references to any Cells returned by scanner, beyond the life of this    * invocation. If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param scan the Scan specification    */
specifier|default
name|void
name|preScannerOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{   }
comment|/**    * Called after the client opens a new scanner.    *<p>    * Note: Do not retain references to any Cells returned by scanner, beyond the life of this    * invocation. If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param scan the Scan specification    * @param s if not null, the base scanner    * @return the scanner instance to use    */
specifier|default
name|RegionScanner
name|postScannerOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|s
return|;
block|}
comment|/**    * Called before the client asks for the next row on a scanner.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    *<p>    * Note: Do not retain references to any Cells returned by scanner, beyond the life of this    * invocation. If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param s the scanner    * @param result The result to return to the client if default processing    * is bypassed. Can be modified. Will not be returned if default processing    * is not bypassed.    * @param limit the maximum number of results to return    * @param hasNext the 'has more' indication    * @return 'has more' indication that should be sent to client    */
specifier|default
name|boolean
name|preScannerNext
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|InternalScanner
name|s
parameter_list|,
name|List
argument_list|<
name|Result
argument_list|>
name|result
parameter_list|,
name|int
name|limit
parameter_list|,
name|boolean
name|hasNext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hasNext
return|;
block|}
comment|/**    * Called after the client asks for the next row on a scanner.    *<p>    * Note: Do not retain references to any Cells returned by scanner, beyond the life of this    * invocation. If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param s the scanner    * @param result the result to return to the client, can be modified    * @param limit the maximum number of results to return    * @param hasNext the 'has more' indication    * @return 'has more' indication that should be sent to client    */
specifier|default
name|boolean
name|postScannerNext
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|InternalScanner
name|s
parameter_list|,
name|List
argument_list|<
name|Result
argument_list|>
name|result
parameter_list|,
name|int
name|limit
parameter_list|,
name|boolean
name|hasNext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hasNext
return|;
block|}
comment|/**    * This will be called by the scan flow when the current scanned row is being filtered out by the    * filter. The filter may be filtering out the row via any of the below scenarios    *<ol>    *<li>    *<code>boolean filterRowKey(byte [] buffer, int offset, int length)</code> returning true</li>    *<li>    *<code>boolean filterRow()</code> returning true</li>    *<li>    *<code>default void filterRow(List&lt;KeyValue&gt; kvs)</code> removing all the kvs from    * the passed List</li>    *</ol>    *<p>    * Note: Do not retain references to any Cells returned by scanner, beyond the life of this    * invocation. If need a Cell reference for later use, copy the cell and use that.    * @param c the environment provided by the region server    * @param s the scanner    * @param curRowCell The cell in the current row which got filtered out    * @param hasMore the 'has more' indication    * @return whether more rows are available for the scanner or not    */
specifier|default
name|boolean
name|postScannerFilterRow
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|InternalScanner
name|s
parameter_list|,
name|Cell
name|curRowCell
parameter_list|,
name|boolean
name|hasMore
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hasMore
return|;
block|}
comment|/**    * Called before the client closes a scanner.    *<p>    * Call CoprocessorEnvironment#bypass to skip default actions    * @param c the environment provided by the region server    * @param s the scanner    */
specifier|default
name|void
name|preScannerClose
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the client closes a scanner.    * @param ctx the environment provided by the region server    * @param s the scanner    */
specifier|default
name|void
name|postScannerClose
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a store opens a new scanner.    *<p>    * This hook is called when a "user" scanner is opened. Use {@code preFlushScannerOpen} and    * {@code preCompactScannerOpen} to inject flush/compaction.    *<p>    * Notice that, this method is used to change the inherent max versions and TTL for a Store. For    * example, you can change the max versions option for a {@link Scan} object to 10 in    * {@code preScannerOpen}, but if the max versions config on the Store is 1, then you still can    * only read 1 version. You need also to inject here to change the max versions to 10 if you want    * to get more versions.    * @param ctx the environment provided by the region server    * @param store the store which we want to get scanner from    * @param options used to change max versions and TTL for the scanner being opened    * @see #preFlushScannerOpen(ObserverContext, Store, ScanOptions, FlushLifeCycleTracker)    * @see #preCompactScannerOpen(ObserverContext, Store, ScanType, ScanOptions,    *      CompactionLifeCycleTracker, CompactionRequest)    */
specifier|default
name|void
name|preStoreScannerOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Store
name|store
parameter_list|,
name|ScanOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before replaying WALs for this region.    * Calling {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} has no    * effect in this hook.    * @param ctx the environment provided by the region server    * @param info the RegionInfo for this region    * @param edits the file of recovered edits    */
comment|// todo: what about these?
specifier|default
name|void
name|preReplayWALs
parameter_list|(
name|ObserverContext
argument_list|<
name|?
extends|extends
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|RegionInfo
name|info
parameter_list|,
name|Path
name|edits
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after replaying WALs for this region.    * @param ctx the environment provided by the region server    * @param info the RegionInfo for this region    * @param edits the file of recovered edits    */
specifier|default
name|void
name|postReplayWALs
parameter_list|(
name|ObserverContext
argument_list|<
name|?
extends|extends
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|RegionInfo
name|info
parameter_list|,
name|Path
name|edits
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a {@link WALEdit}    * replayed for this region.    * Do not amend the WALKey. It is InterfaceAudience.Private. Changing the WALKey will cause    * damage.    * @param ctx the environment provided by the region server    * @deprecated Since hbase-2.0.0. No replacement. To be removed in hbase-3.0.0 and replaced    * with something that doesn't expose IntefaceAudience.Private classes.    */
annotation|@
name|Deprecated
specifier|default
name|void
name|preWALRestore
parameter_list|(
name|ObserverContext
argument_list|<
name|?
extends|extends
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|RegionInfo
name|info
parameter_list|,
name|WALKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a {@link WALEdit}    * replayed for this region.    * Do not amend the WALKey. It is InterfaceAudience.Private. Changing the WALKey will cause    * damage.    * @param ctx the environment provided by the region server    * @deprecated Since hbase-2.0.0. No replacement. To be removed in hbase-3.0.0 and replaced    * with something that doesn't expose IntefaceAudience.Private classes.    */
annotation|@
name|Deprecated
specifier|default
name|void
name|postWALRestore
parameter_list|(
name|ObserverContext
argument_list|<
name|?
extends|extends
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|RegionInfo
name|info
parameter_list|,
name|WALKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before bulkLoadHFile. Users can create a StoreFile instance to    * access the contents of a HFile.    *    * @param ctx the environment provided by the region server    * @param familyPaths pairs of { CF, HFile path } submitted for bulk load. Adding    * or removing from this list will add or remove HFiles to be bulk loaded.    */
specifier|default
name|void
name|preBulkLoadHFile
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before moving bulk loaded hfile to region directory.    *    * @param ctx the environment provided by the region server    * @param family column family    * @param pairs List of pairs of { HFile location in staging dir, HFile path in region dir }    * Each pair are for the same hfile.    */
specifier|default
name|void
name|preCommitStoreFile
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|pairs
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after moving bulk loaded hfile to region directory.    *    * @param ctx the environment provided by the region server    * @param family column family    * @param srcPath Path to file before the move    * @param dstPath Path to file after the move    */
specifier|default
name|void
name|postCommitStoreFile
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after bulkLoadHFile.    *    * @param ctx the environment provided by the region server    * @param stagingFamilyPaths pairs of { CF, HFile path } submitted for bulk load    * @param finalPaths Map of CF to List of file paths for the loaded files    * @param hasLoaded whether the bulkLoad was successful    * @return the new value of hasLoaded    */
specifier|default
name|boolean
name|postBulkLoadHFile
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|stagingFamilyPaths
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|finalPaths
parameter_list|,
name|boolean
name|hasLoaded
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hasLoaded
return|;
block|}
comment|/**    * Called before creation of Reader for a store file.    * Calling {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} has no    * effect in this hook.    *    * @param ctx the environment provided by the region server    * @param fs fileystem to read from    * @param p path to the file    * @param in {@link FSDataInputStreamWrapper}    * @param size Full size of the file    * @param cacheConf    * @param r original reference file. This will be not null only when reading a split file.    * @param reader the base reader, if not {@code null}, from previous RegionObserver in the chain    * @return a Reader instance to use instead of the base reader if overriding    * default behavior, null otherwise    * @deprecated For Phoenix only, StoreFileReader is not a stable interface.    */
annotation|@
name|Deprecated
comment|// Passing InterfaceAudience.Private args FSDataInputStreamWrapper, CacheConfig and Reference.
comment|// This is fine as the hook is deprecated any way.
specifier|default
name|StoreFileReader
name|preStoreFileReaderOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|FSDataInputStreamWrapper
name|in
parameter_list|,
name|long
name|size
parameter_list|,
name|CacheConfig
name|cacheConf
parameter_list|,
name|Reference
name|r
parameter_list|,
name|StoreFileReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
return|;
block|}
comment|/**    * Called after the creation of Reader for a store file.    *    * @param ctx the environment provided by the region server    * @param fs fileystem to read from    * @param p path to the file    * @param in {@link FSDataInputStreamWrapper}    * @param size Full size of the file    * @param cacheConf    * @param r original reference file. This will be not null only when reading a split file.    * @param reader the base reader instance    * @return The reader to use    * @deprecated For Phoenix only, StoreFileReader is not a stable interface.    */
annotation|@
name|Deprecated
comment|// Passing InterfaceAudience.Private args FSDataInputStreamWrapper, CacheConfig and Reference.
comment|// This is fine as the hook is deprecated any way.
specifier|default
name|StoreFileReader
name|postStoreFileReaderOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|FSDataInputStreamWrapper
name|in
parameter_list|,
name|long
name|size
parameter_list|,
name|CacheConfig
name|cacheConf
parameter_list|,
name|Reference
name|r
parameter_list|,
name|StoreFileReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
return|;
block|}
comment|/**    * Called after a new cell has been created during an increment operation, but before    * it is committed to the WAL or memstore.    * Calling {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} has no    * effect in this hook.    * @param ctx the environment provided by the region server    * @param opType the operation type    * @param mutation the current mutation    * @param oldCell old cell containing previous value    * @param newCell the new cell containing the computed value    * @return the new cell, possibly changed    */
specifier|default
name|Cell
name|postMutationBeforeWAL
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|MutationType
name|opType
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|Cell
name|oldCell
parameter_list|,
name|Cell
name|newCell
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newCell
return|;
block|}
comment|/**    * Called after the ScanQueryMatcher creates ScanDeleteTracker. Implementing    * this hook would help in creating customised DeleteTracker and returning    * the newly created DeleteTracker    *<p>    * Warn: This is used by internal coprocessors. Should not be implemented by user coprocessors    * @param ctx the environment provided by the region server    * @param delTracker the deleteTracker that is created by the QueryMatcher    * @return the Delete Tracker    * @deprecated Since 2.0 with out any replacement and will be removed in 3.0    */
annotation|@
name|Deprecated
specifier|default
name|DeleteTracker
name|postInstantiateDeleteTracker
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|DeleteTracker
name|delTracker
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delTracker
return|;
block|}
block|}
end_interface

end_unit

