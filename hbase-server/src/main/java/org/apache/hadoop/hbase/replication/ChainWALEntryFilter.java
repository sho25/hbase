begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * A {@link WALEntryFilter} which contains multiple filters and applies them  * in chain order  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|REPLICATION
argument_list|)
specifier|public
class|class
name|ChainWALEntryFilter
implements|implements
name|WALEntryFilter
block|{
specifier|private
specifier|final
name|WALEntryFilter
index|[]
name|filters
decl_stmt|;
specifier|public
name|ChainWALEntryFilter
parameter_list|(
name|WALEntryFilter
modifier|...
name|filters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|filters
expr_stmt|;
block|}
specifier|public
name|ChainWALEntryFilter
parameter_list|(
name|List
argument_list|<
name|WALEntryFilter
argument_list|>
name|filters
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|WALEntryFilter
argument_list|>
name|rawFilters
init|=
operator|new
name|ArrayList
argument_list|<
name|WALEntryFilter
argument_list|>
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// flatten the chains
for|for
control|(
name|WALEntryFilter
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|filter
operator|instanceof
name|ChainWALEntryFilter
condition|)
block|{
for|for
control|(
name|WALEntryFilter
name|f
range|:
operator|(
operator|(
name|ChainWALEntryFilter
operator|)
name|filter
operator|)
operator|.
name|filters
control|)
block|{
name|rawFilters
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rawFilters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|filters
operator|=
name|rawFilters
operator|.
name|toArray
argument_list|(
operator|new
name|WALEntryFilter
index|[
name|rawFilters
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
for|for
control|(
name|WALEntryFilter
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|entry
operator|=
name|filter
operator|.
name|filter
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

