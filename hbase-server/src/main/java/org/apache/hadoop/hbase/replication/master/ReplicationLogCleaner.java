begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LogCleanerDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationZookeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implementation of a log cleaner that checks if a log is still scheduled for  * replication before deleting it when its TTL is over.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationLogCleaner
implements|implements
name|LogCleanerDelegate
implements|,
name|Abortable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationLogCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|ReplicationZookeeper
name|zkHelper
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|hlogs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|aborted
decl_stmt|;
comment|/**    * Instantiates the cleaner, does nothing more.    */
specifier|public
name|ReplicationLogCleaner
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|boolean
name|isLogDeletable
parameter_list|(
name|Path
name|filePath
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|zkHelper
operator|.
name|getReplication
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|abort
argument_list|(
literal|"Cannot get the state of replication"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// all members of this class are null if replication is disabled, and we
comment|// return true since false would render the LogsCleaner useless
if|if
condition|(
name|this
operator|.
name|conf
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|log
init|=
name|filePath
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// If we saw the hlog previously, let's consider it's still used
comment|// At some point in the future we will refresh the list and it will be gone
if|if
condition|(
name|this
operator|.
name|hlogs
operator|.
name|contains
argument_list|(
name|log
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Let's see it's still there
comment|// This solution makes every miss very expensive to process since we
comment|// almost completely refresh the cache each time
return|return
operator|!
name|refreshHLogsAndSearch
argument_list|(
name|log
argument_list|)
return|;
block|}
comment|/**    * Search through all the hlogs we have in ZK to refresh the cache    * If a log is specified and found, then we early out and return true    * @param searchedLog log we are searching for, pass null to cache everything    *                    that's in zookeeper.    * @return false until a specified log is found.    */
specifier|private
name|boolean
name|refreshHLogsAndSearch
parameter_list|(
name|String
name|searchedLog
parameter_list|)
block|{
name|this
operator|.
name|hlogs
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|lookForLog
init|=
name|searchedLog
operator|!=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rss
init|=
name|zkHelper
operator|.
name|getListOfReplicators
argument_list|()
decl_stmt|;
if|if
condition|(
name|rss
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Didn't find any region server that replicates, deleting: "
operator|+
name|searchedLog
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|rs
range|:
name|rss
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|listOfPeers
init|=
name|zkHelper
operator|.
name|getListPeersForRS
argument_list|(
name|rs
argument_list|)
decl_stmt|;
comment|// if rs just died, this will be null
if|if
condition|(
name|listOfPeers
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|String
name|id
range|:
name|listOfPeers
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|peersHlogs
init|=
name|zkHelper
operator|.
name|getListHLogsForPeerForRS
argument_list|(
name|rs
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|peersHlogs
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|hlogs
operator|.
name|addAll
argument_list|(
name|peersHlogs
argument_list|)
expr_stmt|;
block|}
comment|// early exit if we found the log
if|if
condition|(
name|lookForLog
operator|&&
name|this
operator|.
name|hlogs
operator|.
name|contains
argument_list|(
name|searchedLog
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found log in ZK, keeping: "
operator|+
name|searchedLog
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Didn't find this log in ZK, deleting: "
operator|+
name|searchedLog
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// If replication is disabled, keep all members null
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_ENABLE_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Make my own Configuration.  Then I'll have my own connection to zk that
comment|// I can close myself when comes time.
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|"replicationLogCleaner"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|zkHelper
operator|=
operator|new
name|ReplicationZookeeper
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|zkw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while configuring "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while configuring "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|refreshHLogsAndSearch
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
return|return;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|zkHelper
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|this
operator|.
name|zkHelper
operator|.
name|getZookeeperWatcher
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkHelper
operator|.
name|getZookeeperWatcher
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Not sure why we're deleting a connection that we never acquired or used
name|HConnectionManager
operator|.
name|deleteConnection
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Aborting ReplicationLogCleaner because "
operator|+
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|aborted
operator|=
literal|true
expr_stmt|;
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|aborted
return|;
block|}
block|}
end_class

end_unit

