begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|BaseLogCleanerDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueuesClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Implementation of a log cleaner that checks if a log is still scheduled for  * replication before deleting it when its TTL is over.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|ReplicationLogCleaner
extends|extends
name|BaseLogCleanerDelegate
implements|implements
name|Abortable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationLogCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
specifier|private
name|ReplicationQueuesClient
name|replicationQueues
decl_stmt|;
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|aborted
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|getDeletableFiles
parameter_list|(
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
block|{
comment|// all members of this class are null if replication is disabled,
comment|// so we cannot filter the files
if|if
condition|(
name|this
operator|.
name|getConf
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|files
return|;
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|wals
decl_stmt|;
try|try
block|{
comment|// The concurrently created new WALs may not be included in the return list,
comment|// but they won't be deleted because they're not in the checking set.
name|wals
operator|=
name|loadWALsFromQueues
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to read zookeeper, skipping checking deletable files"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Iterables
operator|.
name|filter
argument_list|(
name|files
argument_list|,
operator|new
name|Predicate
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|FileStatus
name|file
parameter_list|)
block|{
name|String
name|wal
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|logInReplicationQueue
init|=
name|wals
operator|.
name|contains
argument_list|(
name|wal
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|logInReplicationQueue
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found log in ZK, keeping: "
operator|+
name|wal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Didn't find this log in ZK, deleting: "
operator|+
name|wal
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|!
name|logInReplicationQueue
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Load all wals in all replication queues from ZK. This method guarantees to return a    * snapshot which contains all WALs in the zookeeper at the start of this call even there    * is concurrent queue failover. However, some newly created WALs during the call may    * not be included.    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|loadWALsFromQueues
parameter_list|()
throws|throws
name|KeeperException
block|{
name|int
name|v0
init|=
name|replicationQueues
operator|.
name|getQueuesZNodeCversion
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|retry
init|=
literal|0
init|;
condition|;
name|retry
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rss
init|=
name|replicationQueues
operator|.
name|getListOfReplicators
argument_list|()
decl_stmt|;
if|if
condition|(
name|rss
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Didn't find any region server that replicates, won't prevent any deletions."
argument_list|)
expr_stmt|;
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|wals
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rs
range|:
name|rss
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|listOfPeers
init|=
name|replicationQueues
operator|.
name|getAllQueues
argument_list|(
name|rs
argument_list|)
decl_stmt|;
comment|// if rs just died, this will be null
if|if
condition|(
name|listOfPeers
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|String
name|id
range|:
name|listOfPeers
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|peersWals
init|=
name|replicationQueues
operator|.
name|getLogsInQueue
argument_list|(
name|rs
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|peersWals
operator|!=
literal|null
condition|)
block|{
name|wals
operator|.
name|addAll
argument_list|(
name|peersWals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|v1
init|=
name|replicationQueues
operator|.
name|getQueuesZNodeCversion
argument_list|()
decl_stmt|;
if|if
condition|(
name|v0
operator|==
name|v1
condition|)
block|{
return|return
name|wals
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Replication queue node cversion changed from %d to %d, retry = %d"
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|retry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
comment|// If replication is disabled, keep all members null
if|if
condition|(
operator|!
name|config
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_ENABLE_KEY
argument_list|,
name|HConstants
operator|.
name|REPLICATION_ENABLE_DEFAULT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not configured - allowing all wals to be deleted"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Make my own Configuration.  Then I'll have my own connection to zk that
comment|// I can close myself when comes time.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|zkw
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"replicationLogCleaner"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationQueues
operator|=
name|ReplicationFactory
operator|.
name|getReplicationQueuesClient
argument_list|(
name|zkw
argument_list|,
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationQueues
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while configuring "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while configuring "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
return|return;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|zkw
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|this
operator|.
name|zkw
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Aborting ReplicationLogCleaner because "
operator|+
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|aborted
operator|=
literal|true
expr_stmt|;
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|aborted
return|;
block|}
block|}
end_class

end_unit

