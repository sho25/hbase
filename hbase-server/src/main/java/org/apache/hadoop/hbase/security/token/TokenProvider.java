begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseEndpointCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_comment
comment|/**  * Provides a service for obtaining authentication tokens via the  * {@link AuthenticationProtocol} coprocessor protocol.  */
end_comment

begin_class
specifier|public
class|class
name|TokenProvider
extends|extends
name|BaseEndpointCoprocessor
implements|implements
name|AuthenticationProtocol
block|{
specifier|public
specifier|static
specifier|final
name|long
name|VERSION
init|=
literal|0L
decl_stmt|;
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AuthenticationTokenSecretManager
name|secretManager
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
block|{
name|super
operator|.
name|start
argument_list|(
name|env
argument_list|)
expr_stmt|;
comment|// if running at region
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
name|RegionCoprocessorEnvironment
name|regionEnv
init|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
decl_stmt|;
name|RpcServer
name|server
init|=
name|regionEnv
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|SecretManager
argument_list|<
name|?
argument_list|>
name|mgr
init|=
operator|(
operator|(
name|HBaseServer
operator|)
name|server
operator|)
operator|.
name|getSecretManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgr
operator|instanceof
name|AuthenticationTokenSecretManager
condition|)
block|{
name|secretManager
operator|=
operator|(
name|AuthenticationTokenSecretManager
operator|)
name|mgr
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|getAuthenticationToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|secretManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No secret manager configured for token authentication"
argument_list|)
throw|;
block|}
name|User
name|currentUser
init|=
name|RequestContext
operator|.
name|getRequestUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentUser
operator|!=
literal|null
condition|)
block|{
name|ugi
operator|=
name|currentUser
operator|.
name|getUGI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentUser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"No authenticated user for request!"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
operator|!=
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Token generation denied for user="
operator|+
name|currentUser
operator|.
name|getName
argument_list|()
operator|+
literal|", authMethod="
operator|+
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Token generation only allowed for Kerberos authenticated clients"
argument_list|)
throw|;
block|}
return|return
name|secretManager
operator|.
name|generateToken
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|whoami
parameter_list|()
block|{
return|return
name|RequestContext
operator|.
name|getRequestUserName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|AuthenticationProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
return|return
name|TokenProvider
operator|.
name|VERSION
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown protocol requested: "
operator|+
name|protocol
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

