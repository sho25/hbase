begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilitySingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Class used to push numbers about the WAL into the metrics subsystem.  This will take a  * single function call and turn it into multiple manipulations of the hadoop metrics system.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsWAL
extends|extends
name|WALActionsListener
operator|.
name|Base
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetricsWAL
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MetricsWALSource
name|source
decl_stmt|;
specifier|public
name|MetricsWAL
parameter_list|()
block|{
name|this
argument_list|(
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsWALSource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|MetricsWAL
parameter_list|(
name|MetricsWALSource
name|s
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postSync
parameter_list|(
specifier|final
name|long
name|timeInNanos
parameter_list|,
specifier|final
name|int
name|handlerSyncs
parameter_list|)
block|{
name|source
operator|.
name|incrementSyncTime
argument_list|(
name|timeInNanos
operator|/
literal|1000000L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postAppend
parameter_list|(
specifier|final
name|long
name|size
parameter_list|,
specifier|final
name|long
name|time
parameter_list|)
block|{
name|source
operator|.
name|incrementAppendCount
argument_list|()
expr_stmt|;
name|source
operator|.
name|incrementAppendTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|source
operator|.
name|incrementAppendSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|source
operator|.
name|incrementWrittenBytes
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|>
literal|1000
condition|)
block|{
name|source
operator|.
name|incrementSlowAppendCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s took %d ms appending an edit to wal; len~=%s"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|time
argument_list|,
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|logRollRequested
parameter_list|(
name|boolean
name|underReplicated
parameter_list|)
block|{
name|source
operator|.
name|incrementLogRollRequested
argument_list|()
expr_stmt|;
if|if
condition|(
name|underReplicated
condition|)
block|{
name|source
operator|.
name|incrementLowReplicationLogRoll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

