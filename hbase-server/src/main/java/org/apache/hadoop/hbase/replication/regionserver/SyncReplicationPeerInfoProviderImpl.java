begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SyncReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|SyncReplicationPeerInfoProviderImpl
implements|implements
name|SyncReplicationPeerInfoProvider
block|{
specifier|private
specifier|final
name|ReplicationPeers
name|replicationPeers
decl_stmt|;
specifier|private
specifier|final
name|SyncReplicationPeerMappingManager
name|mapping
decl_stmt|;
name|SyncReplicationPeerInfoProviderImpl
parameter_list|(
name|ReplicationPeers
name|replicationPeers
parameter_list|,
name|SyncReplicationPeerMappingManager
name|mapping
parameter_list|)
block|{
name|this
operator|.
name|replicationPeers
operator|=
name|replicationPeers
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getPeerIdAndRemoteWALDir
parameter_list|(
name|RegionInfo
name|info
parameter_list|)
block|{
name|String
name|peerId
init|=
name|mapping
operator|.
name|getPeerId
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|peerId
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|ReplicationPeer
name|peer
init|=
name|replicationPeers
operator|.
name|getPeer
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
if|if
condition|(
name|peer
operator|.
name|getSyncReplicationState
argument_list|()
operator|==
name|SyncReplicationState
operator|.
name|ACTIVE
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|peerId
argument_list|,
name|peer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getRemoteWALDir
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInState
parameter_list|(
name|RegionInfo
name|info
parameter_list|,
name|SyncReplicationState
name|state
parameter_list|)
block|{
name|String
name|peerId
init|=
name|mapping
operator|.
name|getPeerId
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|peerId
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReplicationPeer
name|peer
init|=
name|replicationPeers
operator|.
name|getPeer
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|peer
operator|.
name|getSyncReplicationState
argument_list|()
operator|==
name|state
return|;
block|}
block|}
end_class

end_unit

