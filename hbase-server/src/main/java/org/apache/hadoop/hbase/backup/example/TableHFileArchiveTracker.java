begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Track HFile archiving state changes in ZooKeeper. Keeps track of the tables whose HFiles should  * be kept in the archive.  *<p>  * {@link TableHFileArchiveTracker#start()} needs to be called to start monitoring for tables to  * archive.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TableHFileArchiveTracker
extends|extends
name|ZooKeeperListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableHFileArchiveTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HFILE_ARCHIVE_ZNODE_PARENT
init|=
literal|"hfilearchive"
decl_stmt|;
specifier|private
name|HFileArchiveTableMonitor
name|monitor
decl_stmt|;
specifier|private
name|String
name|archiveHFileZNode
decl_stmt|;
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|private
name|TableHFileArchiveTracker
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|HFileArchiveTableMonitor
name|monitor
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|monitor
operator|=
name|monitor
expr_stmt|;
name|this
operator|.
name|archiveHFileZNode
operator|=
name|ZKTableArchiveClient
operator|.
name|getArchiveZNode
argument_list|(
name|watcher
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|watcher
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start monitoring for archive updates    * @throws KeeperException on failure to find/create nodes    */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|KeeperException
block|{
comment|// if archiving is enabled, then read in the list of tables to archive
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting hfile archive tracker..."
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkEnabledAndUpdate
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished starting hfile archive tracker!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// if it is the archive path
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|archiveHFileZNode
argument_list|)
condition|)
return|return;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Archive node: "
operator|+
name|path
operator|+
literal|" created"
argument_list|)
expr_stmt|;
comment|// since we are already enabled, just update a single table
name|String
name|table
init|=
name|path
operator|.
name|substring
argument_list|(
name|archiveHFileZNode
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// the top level node has come up, so read in all the tables
if|if
condition|(
name|table
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|checkEnabledAndUpdate
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// find the table that needs to be archived
try|try
block|{
name|addAndReWatchTable
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't read zookeeper data for table for path:"
operator|+
name|path
operator|+
literal|", not preserving a table."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeChildrenChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|archiveHFileZNode
argument_list|)
condition|)
return|return;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Archive node: "
operator|+
name|path
operator|+
literal|" children changed."
argument_list|)
expr_stmt|;
comment|// a table was added to the archive
try|try
block|{
name|updateWatchedTables
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to update tables to archive"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add this table to the tracker and then read a watch on that node.    *<p>    * Handles situtation where table is deleted in the time between the update and resetting the    * watch by deleting the table via {@link #safeStopTrackingTable(String)}    * @param tableZnode full zookeeper path to the table to be added    * @throws KeeperException if an unexpected zk exception occurs    */
specifier|private
name|void
name|addAndReWatchTable
parameter_list|(
name|String
name|tableZnode
parameter_list|)
throws|throws
name|KeeperException
block|{
name|getMonitor
argument_list|()
operator|.
name|addTable
argument_list|(
name|ZKUtil
operator|.
name|getNodeName
argument_list|(
name|tableZnode
argument_list|)
argument_list|)
expr_stmt|;
comment|// re-add a watch to the table created
comment|// and check to make sure it wasn't deleted
if|if
condition|(
operator|!
name|ZKUtil
operator|.
name|watchAndCheckExists
argument_list|(
name|watcher
argument_list|,
name|tableZnode
argument_list|)
condition|)
block|{
name|safeStopTrackingTable
argument_list|(
name|tableZnode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stop tracking a table. Ensures that the table doesn't exist, but if it does, it attempts to add    * the table back via {@link #addAndReWatchTable(String)} - its a 'safe' removal.    * @param tableZnode full zookeeper path to the table to be added    * @throws KeeperException if an unexpected zk exception occurs    */
specifier|private
name|void
name|safeStopTrackingTable
parameter_list|(
name|String
name|tableZnode
parameter_list|)
throws|throws
name|KeeperException
block|{
name|getMonitor
argument_list|()
operator|.
name|removeTable
argument_list|(
name|ZKUtil
operator|.
name|getNodeName
argument_list|(
name|tableZnode
argument_list|)
argument_list|)
expr_stmt|;
comment|// if the table exists, then add and rewatch it
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|watcher
argument_list|,
name|tableZnode
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|addAndReWatchTable
argument_list|(
name|tableZnode
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeDeleted
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|archiveHFileZNode
argument_list|)
condition|)
return|return;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Archive node: "
operator|+
name|path
operator|+
literal|" deleted"
argument_list|)
expr_stmt|;
name|String
name|table
init|=
name|path
operator|.
name|substring
argument_list|(
name|archiveHFileZNode
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// if we stop archiving all tables
if|if
condition|(
name|table
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// make sure we have the tracker before deleting the archive
comment|// but if we don't, we don't care about delete
name|clearTables
argument_list|()
expr_stmt|;
comment|// watches are one-time events, so we need to renew our subscription to
comment|// the archive node and might as well check to make sure archiving
comment|// didn't come back on at the same time
name|checkEnabledAndUpdate
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// just stop archiving one table
comment|// note that we don't attempt to add another watch for that table into zk.
comment|// We have no assurances that the table will be archived again (or even
comment|// exists for that matter), so its better not to add unnecessary load to
comment|// zk for watches. If the table is created again, then we will get the
comment|// notification in childrenChanaged.
name|getMonitor
argument_list|()
operator|.
name|removeTable
argument_list|(
name|ZKUtil
operator|.
name|getNodeName
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the watch on the top-level archive znode, and then updates the montior with the current    * tables that should be archived (and ensures that those nodes are watched as well).    */
specifier|private
name|void
name|checkEnabledAndUpdate
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|watchAndCheckExists
argument_list|(
name|watcher
argument_list|,
name|archiveHFileZNode
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|archiveHFileZNode
operator|+
literal|" znode does exist, checking for tables to archive"
argument_list|)
expr_stmt|;
comment|// update the tables we should backup, to get the most recent state.
comment|// This is safer than also watching for children and then hoping we get
comment|// all the updates as it makes sure we get and watch all the children
name|updateWatchedTables
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Archiving not currently enabled, waiting"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to watch for archiving znode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read the list of children under the archive znode as table names and then sets those tables to    * the list of tables that we should archive    * @throws KeeperException if there is an unexpected zk exception    */
specifier|private
name|void
name|updateWatchedTables
parameter_list|()
throws|throws
name|KeeperException
block|{
comment|// get the children and watch for new children
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating watches on tables to archive."
argument_list|)
expr_stmt|;
comment|// get the children and add watches for each of the children
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|watcher
argument_list|,
name|archiveHFileZNode
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting archive for tables:"
operator|+
name|tables
argument_list|)
expr_stmt|;
comment|// if archiving is still enabled
if|if
condition|(
name|tables
operator|!=
literal|null
operator|&&
name|tables
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getMonitor
argument_list|()
operator|.
name|setArchiveTables
argument_list|(
name|tables
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No tables to archive."
argument_list|)
expr_stmt|;
comment|// only if we currently have a tracker, then clear the archive
name|clearTables
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Remove the currently archived tables.    *<p>    * Does some intelligent checking to make sure we don't prematurely create an archive tracker.    */
specifier|private
name|void
name|clearTables
parameter_list|()
block|{
name|getMonitor
argument_list|()
operator|.
name|clearArchive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Determine if the given table should or should not allow its hfiles to be deleted    * @param tableName name of the table to check    * @return<tt>true</tt> if its store files should be retained,<tt>false</tt> otherwise    */
specifier|public
name|boolean
name|keepHFiles
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
name|getMonitor
argument_list|()
operator|.
name|shouldArchiveTable
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/**    * @return the tracker for which tables should be archived.    */
specifier|public
specifier|final
name|HFileArchiveTableMonitor
name|getMonitor
parameter_list|()
block|{
return|return
name|this
operator|.
name|monitor
return|;
block|}
comment|/**    * Create an archive tracker for the passed in server    * @param conf to read for zookeeper connection information    * @return ZooKeeper tracker to monitor for this server if this server should archive hfiles for a    *         given table    * @throws IOException If a unexpected exception occurs    * @throws ZooKeeperConnectionException if we can't reach zookeeper    */
specifier|public
specifier|static
name|TableHFileArchiveTracker
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"hfileArchiveCleaner"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|create
argument_list|(
name|zkw
argument_list|,
operator|new
name|HFileArchiveTableMonitor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create an archive tracker with the special passed in table monitor. Should only be used in    * special cases (eg. testing)    * @param zkw Watcher for the ZooKeeper cluster that we should track    * @param monitor Monitor for which tables need hfile archiving    * @return ZooKeeper tracker to monitor for this server if this server should archive hfiles for a    *         given table    */
specifier|private
specifier|static
name|TableHFileArchiveTracker
name|create
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|HFileArchiveTableMonitor
name|monitor
parameter_list|)
block|{
return|return
operator|new
name|TableHFileArchiveTracker
argument_list|(
name|zkw
argument_list|,
name|monitor
argument_list|)
return|;
block|}
specifier|public
name|ZooKeeperWatcher
name|getZooKeeperWatcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|watcher
return|;
block|}
comment|/**    * Stop this tracker and the passed zookeeper    */
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
return|return;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|watcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

