begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for command lines that start up various HBase daemons.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|ServerCommandLine
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServerCommandLine
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_SKIP_WORDS
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"passwd"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"credential"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Implementing subclasses should return a usage string to print out.    */
specifier|protected
specifier|abstract
name|String
name|getUsage
parameter_list|()
function_decl|;
comment|/**    * Print usage information for this command line.    *    * @param message if not null, print this message before the usage info.    */
specifier|protected
name|void
name|usage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Log information about the currently running JVM.    */
specifier|public
specifier|static
name|void
name|logJVMInfo
parameter_list|()
block|{
comment|// Print out vm stats before starting up.
name|RuntimeMXBean
name|runtime
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|runtime
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"vmName="
operator|+
name|runtime
operator|.
name|getVmName
argument_list|()
operator|+
literal|", vmVendor="
operator|+
name|runtime
operator|.
name|getVmVendor
argument_list|()
operator|+
literal|", vmVersion="
operator|+
name|runtime
operator|.
name|getVmVersion
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"vmInputArguments="
operator|+
name|runtime
operator|.
name|getInputArguments
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Print into log some of the important hbase attributes.    */
specifier|private
specifier|static
name|void
name|logHBaseConfigs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|keys
init|=
operator|new
name|String
index|[]
block|{
comment|// Expand this list as you see fit.
literal|"hbase.tmp.dir"
block|,
name|HConstants
operator|.
name|HBASE_DIR
block|,
name|HConstants
operator|.
name|CLUSTER_DISTRIBUTED
block|,
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
block|,      }
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|key
operator|+
literal|": "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Logs information about the currently running JVM process including    * the environment variables. Logging of env vars can be disabled by    * setting {@code "hbase.envvars.logging.disabled"} to {@code "true"}.    *<p>If enabled, you can also exclude environment variables containing    * certain substrings by setting {@code "hbase.envvars.logging.skipwords"}    * to comma separated list of such substrings.    */
specifier|public
specifier|static
name|void
name|logProcessInfo
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|logHBaseConfigs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// log environment variables unless asked not to
if|if
condition|(
name|conf
operator|==
literal|null
operator|||
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.envvars.logging.disabled"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|skipWords
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|DEFAULT_SKIP_WORDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|confSkipWords
init|=
name|conf
operator|.
name|getStrings
argument_list|(
literal|"hbase.envvars.logging.skipwords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|confSkipWords
operator|!=
literal|null
condition|)
block|{
name|skipWords
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|confSkipWords
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|nextEnv
label|:
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
comment|// exclude variables which may contain skip words
for|for
control|(
name|String
name|skipWord
range|:
name|skipWords
control|)
block|{
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
name|skipWord
argument_list|)
operator|||
name|value
operator|.
name|contains
argument_list|(
name|skipWord
argument_list|)
condition|)
continue|continue
name|nextEnv
continue|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"env:"
operator|+
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
comment|// and JVM info
name|logJVMInfo
argument_list|()
expr_stmt|;
block|}
comment|/**    * Parse and run the given command line. This may exit the JVM if    * a nonzero exit code is returned from<code>run()</code>.    */
specifier|public
name|void
name|doMain
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
try|try
block|{
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|this
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to run"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

