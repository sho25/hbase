begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|asyncfs
package|;
end_package

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleState
operator|.
name|READER_IDLE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBufOutputStream
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|CompositeByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelDuplexHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOutboundHandlerAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPromise
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|LengthFieldBasedFrameDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|MessageToByteEncoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|protobuf
operator|.
name|ProtobufDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|protobuf
operator|.
name|ProtobufVarint32FrameDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateEvent
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmChoiceCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslClient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|InvalidEncryptionKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|TrustedChannelResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|DataTransferEncryptorMessageProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|DataTransferEncryptorMessageProto
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|DataTransferEncryptorMessageProto
operator|.
name|DataTransferEncryptorStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslPropertiesResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|QualityOfProtection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_comment
comment|/**  * Helper class for adding sasl support for {@link FanOutOneBlockAsyncDFSOutput}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|FanOutOneBlockAsyncDFSOutputSaslHelper
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FanOutOneBlockAsyncDFSOutputSaslHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FanOutOneBlockAsyncDFSOutputSaslHelper
parameter_list|()
block|{   }
specifier|private
specifier|static
specifier|final
name|String
name|SERVER_NAME
init|=
literal|"0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROTOCOL
init|=
literal|"hdfs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MECHANISM
init|=
literal|"DIGEST-MD5"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SASL_TRANSFER_MAGIC_NUMBER
init|=
literal|0xDEADBEEF
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME_DELIMITER
init|=
literal|" "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY
init|=
literal|"dfs.encrypt.data.transfer.cipher.suites"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AES_CTR_NOPADDING
init|=
literal|"AES/CTR/NoPadding"
decl_stmt|;
specifier|private
interface|interface
name|SaslAdaptor
block|{
name|SaslPropertiesResolver
name|getSaslPropsResolver
parameter_list|(
name|DFSClient
name|client
parameter_list|)
function_decl|;
name|TrustedChannelResolver
name|getTrustedChannelResolver
parameter_list|(
name|DFSClient
name|client
parameter_list|)
function_decl|;
name|AtomicBoolean
name|getFallbackToSimpleAuth
parameter_list|(
name|DFSClient
name|client
parameter_list|)
function_decl|;
name|DataEncryptionKey
name|createDataEncryptionKey
parameter_list|(
name|DFSClient
name|client
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|SaslAdaptor
name|SASL_ADAPTOR
decl_stmt|;
specifier|private
interface|interface
name|CipherHelper
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|getCipherOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|addCipherOptions
parameter_list|(
name|DataTransferEncryptorMessageProto
operator|.
name|Builder
name|builder
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|cipherOptions
parameter_list|)
function_decl|;
name|Object
name|getCipherOption
parameter_list|(
name|DataTransferEncryptorMessageProto
name|proto
parameter_list|,
name|boolean
name|isNegotiatedQopPrivacy
parameter_list|,
name|SaslClient
name|saslClient
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|Object
name|getCipherSuite
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
function_decl|;
name|byte
index|[]
name|getInKey
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
function_decl|;
name|byte
index|[]
name|getInIv
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
function_decl|;
name|byte
index|[]
name|getOutKey
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
function_decl|;
name|byte
index|[]
name|getOutIv
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|CipherHelper
name|CIPHER_HELPER
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|CryptoCodec
block|{
specifier|private
specifier|static
specifier|final
name|Method
name|CREATE_CODEC
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Method
name|CREATE_ENCRYPTOR
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Method
name|CREATE_DECRYPTOR
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Method
name|INIT_ENCRYPTOR
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Method
name|INIT_DECRYPTOR
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Method
name|ENCRYPT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Method
name|DECRYPT
decl_stmt|;
static|static
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cryptoCodecClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cryptoCodecClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.crypto.CryptoCodec"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No CryptoCodec class found, should be hadoop 2.5-"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cryptoCodecClass
operator|!=
literal|null
condition|)
block|{
name|Method
name|getInstanceMethod
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|cryptoCodecClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getInstance"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|getInstanceMethod
operator|=
name|method
expr_stmt|;
break|break;
block|}
block|}
name|CREATE_CODEC
operator|=
name|getInstanceMethod
expr_stmt|;
try|try
block|{
name|CREATE_ENCRYPTOR
operator|=
name|cryptoCodecClass
operator|.
name|getMethod
argument_list|(
literal|"createEncryptor"
argument_list|)
expr_stmt|;
name|CREATE_DECRYPTOR
operator|=
name|cryptoCodecClass
operator|.
name|getMethod
argument_list|(
literal|"createDecryptor"
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|encryptorClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.crypto.Encryptor"
argument_list|)
decl_stmt|;
name|INIT_ENCRYPTOR
operator|=
name|encryptorClass
operator|.
name|getMethod
argument_list|(
literal|"init"
argument_list|)
expr_stmt|;
name|ENCRYPT
operator|=
name|encryptorClass
operator|.
name|getMethod
argument_list|(
literal|"encrypt"
argument_list|,
name|ByteBuffer
operator|.
name|class
argument_list|,
name|ByteBuffer
operator|.
name|class
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|decryptorClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.crypto.Decryptor"
argument_list|)
decl_stmt|;
name|INIT_DECRYPTOR
operator|=
name|decryptorClass
operator|.
name|getMethod
argument_list|(
literal|"init"
argument_list|)
expr_stmt|;
name|DECRYPT
operator|=
name|decryptorClass
operator|.
name|getMethod
argument_list|(
literal|"decrypt"
argument_list|,
name|ByteBuffer
operator|.
name|class
argument_list|,
name|ByteBuffer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not initialize CryptoCodec, should be hadoop 2.5-"
argument_list|)
expr_stmt|;
name|CREATE_CODEC
operator|=
literal|null
expr_stmt|;
name|CREATE_ENCRYPTOR
operator|=
literal|null
expr_stmt|;
name|CREATE_DECRYPTOR
operator|=
literal|null
expr_stmt|;
name|INIT_ENCRYPTOR
operator|=
literal|null
expr_stmt|;
name|INIT_DECRYPTOR
operator|=
literal|null
expr_stmt|;
name|ENCRYPT
operator|=
literal|null
expr_stmt|;
name|DECRYPT
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|Object
name|encryptor
decl_stmt|;
specifier|private
specifier|final
name|Object
name|decryptor
decl_stmt|;
specifier|public
name|CryptoCodec
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Object
name|cipherOption
parameter_list|)
block|{
name|Object
name|codec
decl_stmt|;
try|try
block|{
name|codec
operator|=
name|CREATE_CODEC
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
name|CIPHER_HELPER
operator|.
name|getCipherSuite
argument_list|(
name|cipherOption
argument_list|)
argument_list|)
expr_stmt|;
name|encryptor
operator|=
name|CREATE_ENCRYPTOR
operator|.
name|invoke
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|byte
index|[]
name|encKey
init|=
name|CIPHER_HELPER
operator|.
name|getInKey
argument_list|(
name|cipherOption
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encIv
init|=
name|CIPHER_HELPER
operator|.
name|getInIv
argument_list|(
name|cipherOption
argument_list|)
decl_stmt|;
name|INIT_ENCRYPTOR
operator|.
name|invoke
argument_list|(
name|encryptor
argument_list|,
name|encKey
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|encIv
argument_list|,
name|encIv
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|decryptor
operator|=
name|CREATE_DECRYPTOR
operator|.
name|invoke
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decKey
init|=
name|CIPHER_HELPER
operator|.
name|getOutKey
argument_list|(
name|cipherOption
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decIv
init|=
name|CIPHER_HELPER
operator|.
name|getOutIv
argument_list|(
name|cipherOption
argument_list|)
decl_stmt|;
name|INIT_DECRYPTOR
operator|.
name|invoke
argument_list|(
name|decryptor
argument_list|,
name|decKey
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|decIv
argument_list|,
name|decIv
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|encrypt
parameter_list|(
name|ByteBuffer
name|inBuffer
parameter_list|,
name|ByteBuffer
name|outBuffer
parameter_list|)
block|{
try|try
block|{
name|ENCRYPT
operator|.
name|invoke
argument_list|(
name|encryptor
argument_list|,
name|inBuffer
argument_list|,
name|outBuffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|decrypt
parameter_list|(
name|ByteBuffer
name|inBuffer
parameter_list|,
name|ByteBuffer
name|outBuffer
parameter_list|)
block|{
try|try
block|{
name|DECRYPT
operator|.
name|invoke
argument_list|(
name|decryptor
argument_list|,
name|inBuffer
argument_list|,
name|outBuffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|SaslAdaptor
name|createSaslAdaptor27
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|saslDataTransferClientClass
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|NoSuchMethodException
block|{
specifier|final
name|Field
name|saslPropsResolverField
init|=
name|saslDataTransferClientClass
operator|.
name|getDeclaredField
argument_list|(
literal|"saslPropsResolver"
argument_list|)
decl_stmt|;
name|saslPropsResolverField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|trustedChannelResolverField
init|=
name|saslDataTransferClientClass
operator|.
name|getDeclaredField
argument_list|(
literal|"trustedChannelResolver"
argument_list|)
decl_stmt|;
name|trustedChannelResolverField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|fallbackToSimpleAuthField
init|=
name|saslDataTransferClientClass
operator|.
name|getDeclaredField
argument_list|(
literal|"fallbackToSimpleAuth"
argument_list|)
decl_stmt|;
name|fallbackToSimpleAuthField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Method
name|getSaslDataTransferClientMethod
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getSaslDataTransferClient"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|newDataEncryptionKeyMethod
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"newDataEncryptionKey"
argument_list|)
decl_stmt|;
return|return
operator|new
name|SaslAdaptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TrustedChannelResolver
name|getTrustedChannelResolver
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|TrustedChannelResolver
operator|)
name|trustedChannelResolverField
operator|.
name|get
argument_list|(
name|getSaslDataTransferClientMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SaslPropertiesResolver
name|getSaslPropsResolver
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|SaslPropertiesResolver
operator|)
name|saslPropsResolverField
operator|.
name|get
argument_list|(
name|getSaslDataTransferClientMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AtomicBoolean
name|getFallbackToSimpleAuth
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|AtomicBoolean
operator|)
name|fallbackToSimpleAuthField
operator|.
name|get
argument_list|(
name|getSaslDataTransferClientMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataEncryptionKey
name|createDataEncryptionKey
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|DataEncryptionKey
operator|)
name|newDataEncryptionKeyMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|SaslAdaptor
name|createSaslAdaptor25
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Field
name|trustedChannelResolverField
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"trustedChannelResolver"
argument_list|)
decl_stmt|;
name|trustedChannelResolverField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Method
name|getDataEncryptionKeyMethod
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getDataEncryptionKey"
argument_list|)
decl_stmt|;
return|return
operator|new
name|SaslAdaptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TrustedChannelResolver
name|getTrustedChannelResolver
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|TrustedChannelResolver
operator|)
name|trustedChannelResolverField
operator|.
name|get
argument_list|(
name|client
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SaslPropertiesResolver
name|getSaslPropsResolver
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicBoolean
name|getFallbackToSimpleAuth
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataEncryptionKey
name|createDataEncryptionKey
parameter_list|(
name|DFSClient
name|client
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|DataEncryptionKey
operator|)
name|getDataEncryptionKeyMethod
operator|.
name|invoke
argument_list|(
name|client
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
decl||
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|SaslAdaptor
name|createSaslAdaptor
parameter_list|()
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|saslDataTransferClientClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|saslDataTransferClientClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hdfs.protocol.datatransfer.sasl.SaslDataTransferClient"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No SaslDataTransferClient class found, should be hadoop 2.5-"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|saslDataTransferClientClass
operator|!=
literal|null
condition|?
name|createSaslAdaptor27
argument_list|(
name|saslDataTransferClientClass
argument_list|)
else|:
name|createSaslAdaptor25
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
decl||
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|CipherHelper
name|createCipherHelper25
parameter_list|()
block|{
return|return
operator|new
name|CipherHelper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getOutKey
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getOutIv
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getInKey
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getInIv
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCipherSuite
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getCipherOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCipherOption
parameter_list|(
name|DataTransferEncryptorMessageProto
name|proto
parameter_list|,
name|boolean
name|isNegotiatedQopPrivacy
parameter_list|,
name|SaslClient
name|saslClient
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addCipherOptions
parameter_list|(
name|Builder
name|builder
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|cipherOptions
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|CipherHelper
name|createCipherHelper27
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cipherOptionClass
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|NoSuchMethodException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|cipherSuiteClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.crypto.CipherSuite"
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Enum
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Enum
argument_list|<
name|?
argument_list|>
name|aesCipherSuite
init|=
name|Enum
operator|.
name|valueOf
argument_list|(
name|cipherSuiteClass
argument_list|,
literal|"AES_CTR_NOPADDING"
argument_list|)
decl_stmt|;
specifier|final
name|Constructor
argument_list|<
name|?
argument_list|>
name|cipherOptionConstructor
init|=
name|cipherOptionClass
operator|.
name|getConstructor
argument_list|(
name|cipherSuiteClass
argument_list|)
decl_stmt|;
specifier|final
name|Constructor
argument_list|<
name|?
argument_list|>
name|cipherOptionWithKeyAndIvConstructor
init|=
name|cipherOptionClass
operator|.
name|getConstructor
argument_list|(
name|cipherSuiteClass
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getCipherSuiteMethod
init|=
name|cipherOptionClass
operator|.
name|getMethod
argument_list|(
literal|"getCipherSuite"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getInKeyMethod
init|=
name|cipherOptionClass
operator|.
name|getMethod
argument_list|(
literal|"getInKey"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getInIvMethod
init|=
name|cipherOptionClass
operator|.
name|getMethod
argument_list|(
literal|"getInIv"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getOutKeyMethod
init|=
name|cipherOptionClass
operator|.
name|getMethod
argument_list|(
literal|"getOutKey"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getOutIvMethod
init|=
name|cipherOptionClass
operator|.
name|getMethod
argument_list|(
literal|"getOutIv"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|convertCipherOptionsMethod
init|=
name|PBHelper
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"convertCipherOptions"
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|convertCipherOptionProtosMethod
init|=
name|PBHelper
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"convertCipherOptionProtos"
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|addAllCipherOptionMethod
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|Builder
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"addAllCipherOption"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getCipherOptionListMethod
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getCipherOptionList"
argument_list|)
decl_stmt|;
return|return
operator|new
name|CipherHelper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getOutKey
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|getOutKeyMethod
operator|.
name|invoke
argument_list|(
name|cipherOption
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getOutIv
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|getOutIvMethod
operator|.
name|invoke
argument_list|(
name|cipherOption
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getInKey
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|getInKeyMethod
operator|.
name|invoke
argument_list|(
name|cipherOption
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getInIv
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|getInIvMethod
operator|.
name|invoke
argument_list|(
name|cipherOption
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCipherSuite
parameter_list|(
name|Object
name|cipherOption
parameter_list|)
block|{
try|try
block|{
return|return
name|getCipherSuiteMethod
operator|.
name|invoke
argument_list|(
name|cipherOption
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getCipherOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Negotiate cipher suites if configured. Currently, the only supported
comment|// cipher suite is AES/CTR/NoPadding, but the protocol allows multiple
comment|// values for future expansion.
name|String
name|cipherSuites
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|cipherSuites
operator|==
literal|null
operator|||
name|cipherSuites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|cipherSuites
operator|.
name|equals
argument_list|(
name|AES_CTR_NOPADDING
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid cipher suite, %s=%s"
argument_list|,
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY
argument_list|,
name|cipherSuites
argument_list|)
argument_list|)
throw|;
block|}
name|Object
name|option
decl_stmt|;
try|try
block|{
name|option
operator|=
name|cipherOptionConstructor
operator|.
name|newInstance
argument_list|(
name|aesCipherSuite
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|cipherOptions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cipherOptions
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
return|return
name|cipherOptions
return|;
block|}
specifier|private
name|Object
name|unwrap
parameter_list|(
name|Object
name|option
parameter_list|,
name|SaslClient
name|saslClient
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|inKey
init|=
name|getInKey
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|inKey
operator|!=
literal|null
condition|)
block|{
name|inKey
operator|=
name|saslClient
operator|.
name|unwrap
argument_list|(
name|inKey
argument_list|,
literal|0
argument_list|,
name|inKey
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|outKey
init|=
name|getOutKey
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|outKey
operator|!=
literal|null
condition|)
block|{
name|outKey
operator|=
name|saslClient
operator|.
name|unwrap
argument_list|(
name|outKey
argument_list|,
literal|0
argument_list|,
name|outKey
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|cipherOptionWithKeyAndIvConstructor
operator|.
name|newInstance
argument_list|(
name|getCipherSuite
argument_list|(
name|option
argument_list|)
argument_list|,
name|inKey
argument_list|,
name|getInIv
argument_list|(
name|option
argument_list|)
argument_list|,
name|outKey
argument_list|,
name|getOutIv
argument_list|(
name|option
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|getCipherOption
parameter_list|(
name|DataTransferEncryptorMessageProto
name|proto
parameter_list|,
name|boolean
name|isNegotiatedQopPrivacy
parameter_list|,
name|SaslClient
name|saslClient
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|cipherOptions
decl_stmt|;
try|try
block|{
name|cipherOptions
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|convertCipherOptionProtosMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|getCipherOptionListMethod
operator|.
name|invoke
argument_list|(
name|proto
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|cipherOptions
operator|==
literal|null
operator|||
name|cipherOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|cipherOption
init|=
name|cipherOptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|isNegotiatedQopPrivacy
condition|?
name|unwrap
argument_list|(
name|cipherOption
argument_list|,
name|saslClient
argument_list|)
else|:
name|cipherOption
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addCipherOptions
parameter_list|(
name|Builder
name|builder
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|cipherOptions
parameter_list|)
block|{
try|try
block|{
name|addAllCipherOptionMethod
operator|.
name|invoke
argument_list|(
name|builder
argument_list|,
name|convertCipherOptionsMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|cipherOptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|CipherHelper
name|createCipherHelper
parameter_list|()
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cipherOptionClass
decl_stmt|;
try|try
block|{
name|cipherOptionClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.crypto.CipherOption"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No CipherOption class found, should be hadoop 2.5-"
argument_list|)
expr_stmt|;
return|return
name|createCipherHelper25
argument_list|()
return|;
block|}
try|try
block|{
return|return
name|createCipherHelper27
argument_list|(
name|cipherOptionClass
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
static|static
block|{
name|SASL_ADAPTOR
operator|=
name|createSaslAdaptor
argument_list|()
expr_stmt|;
name|CIPHER_HELPER
operator|=
name|createCipherHelper
argument_list|()
expr_stmt|;
block|}
comment|/**    * Sets user name and password when asked by the client-side SASL object.    */
specifier|private
specifier|static
specifier|final
class|class
name|SaslClientCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
specifier|final
name|char
index|[]
name|password
decl_stmt|;
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
comment|/**      * Creates a new SaslClientCallbackHandler.      * @param userName SASL user name      * @Param password SASL password      */
specifier|public
name|SaslClientCallbackHandler
parameter_list|(
name|String
name|userName
parameter_list|,
name|char
index|[]
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
name|NameCallback
name|nc
init|=
literal|null
decl_stmt|;
name|PasswordCallback
name|pc
init|=
literal|null
decl_stmt|;
name|RealmCallback
name|rc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RealmChoiceCallback
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|nc
operator|=
operator|(
name|NameCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|pc
operator|=
operator|(
name|PasswordCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|RealmCallback
condition|)
block|{
name|rc
operator|=
operator|(
name|RealmCallback
operator|)
name|callback
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL client callback"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|nc
operator|!=
literal|null
condition|)
block|{
name|nc
operator|.
name|setName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setText
argument_list|(
name|rc
operator|.
name|getDefaultText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SaslNegotiateHandler
extends|extends
name|ChannelDuplexHandler
block|{
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
decl_stmt|;
specifier|private
specifier|final
name|SaslClient
name|saslClient
decl_stmt|;
specifier|private
specifier|final
name|int
name|timeoutMs
decl_stmt|;
specifier|private
specifier|final
name|Promise
argument_list|<
name|Void
argument_list|>
name|promise
decl_stmt|;
specifier|private
name|int
name|step
init|=
literal|0
decl_stmt|;
specifier|public
name|SaslNegotiateHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|username
parameter_list|,
name|char
index|[]
name|password
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|,
name|int
name|timeoutMs
parameter_list|,
name|Promise
argument_list|<
name|Void
argument_list|>
name|promise
parameter_list|)
throws|throws
name|SaslException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|saslProps
operator|=
name|saslProps
expr_stmt|;
name|this
operator|.
name|saslClient
operator|=
name|Sasl
operator|.
name|createSaslClient
argument_list|(
operator|new
name|String
index|[]
block|{
name|MECHANISM
block|}
argument_list|,
name|username
argument_list|,
name|PROTOCOL
argument_list|,
name|SERVER_NAME
argument_list|,
name|saslProps
argument_list|,
operator|new
name|SaslClientCallbackHandler
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeoutMs
operator|=
name|timeoutMs
expr_stmt|;
name|this
operator|.
name|promise
operator|=
name|promise
expr_stmt|;
block|}
specifier|private
name|void
name|sendSaslMessage
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|)
throws|throws
name|IOException
block|{
name|sendSaslMessage
argument_list|(
name|ctx
argument_list|,
name|payload
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sendSaslMessage
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|DataTransferEncryptorMessageProto
operator|.
name|Builder
name|builder
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStatus
argument_list|(
name|DataTransferEncryptorStatus
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPayload
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|CIPHER_HELPER
operator|.
name|addCipherOptions
argument_list|(
name|builder
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
name|DataTransferEncryptorMessageProto
name|proto
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|proto
operator|.
name|getSerializedSize
argument_list|()
decl_stmt|;
name|size
operator|+=
name|CodedOutputStream
operator|.
name|computeRawVarint32Size
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|ByteBuf
name|buf
init|=
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|buffer
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|proto
operator|.
name|writeDelimitedTo
argument_list|(
operator|new
name|ByteBufOutputStream
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handlerAdded
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|ctx
operator|.
name|write
argument_list|(
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|buffer
argument_list|(
literal|4
argument_list|)
operator|.
name|writeInt
argument_list|(
name|SASL_TRANSFER_MAGIC_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|sendSaslMessage
argument_list|(
name|ctx
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|flush
argument_list|()
expr_stmt|;
name|step
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|saslClient
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|check
parameter_list|(
name|DataTransferEncryptorMessageProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR_UNKNOWN_KEY
condition|)
block|{
throw|throw
operator|new
name|InvalidEncryptionKeyException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getNegotiatedQop
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|saslClient
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isNegotiatedQopPrivacy
parameter_list|()
block|{
name|String
name|qop
init|=
name|getNegotiatedQop
argument_list|()
decl_stmt|;
return|return
name|qop
operator|!=
literal|null
operator|&&
literal|"auth-conf"
operator|.
name|equalsIgnoreCase
argument_list|(
name|qop
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|requestedQopContainsPrivacy
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|requestedQop
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|saslProps
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|requestedQop
operator|.
name|contains
argument_list|(
literal|"auth-conf"
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkSaslComplete
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|saslClient
operator|.
name|isComplete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to complete SASL handshake"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|requestedQop
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|saslProps
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|negotiatedQop
init|=
name|getNegotiatedQop
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying QOP, requested QOP = "
operator|+
name|requestedQop
operator|+
literal|", negotiated QOP = "
operator|+
name|negotiatedQop
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|requestedQop
operator|.
name|contains
argument_list|(
name|negotiatedQop
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SASL handshake completed, but "
operator|+
literal|"channel does not have acceptable quality of protection, "
operator|+
literal|"requested = %s, negotiated = %s"
argument_list|,
name|requestedQop
argument_list|,
name|negotiatedQop
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|useWrap
parameter_list|()
block|{
name|String
name|qop
init|=
operator|(
name|String
operator|)
name|saslClient
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
decl_stmt|;
return|return
name|qop
operator|!=
literal|null
operator|&&
operator|!
literal|"auth"
operator|.
name|equalsIgnoreCase
argument_list|(
name|qop
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelRead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|msg
operator|instanceof
name|DataTransferEncryptorMessageProto
condition|)
block|{
name|DataTransferEncryptorMessageProto
name|proto
init|=
operator|(
name|DataTransferEncryptorMessageProto
operator|)
name|msg
decl_stmt|;
name|check
argument_list|(
name|proto
argument_list|)
expr_stmt|;
name|byte
index|[]
name|challenge
init|=
name|proto
operator|.
name|getPayload
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|response
init|=
name|saslClient
operator|.
name|evaluateChallenge
argument_list|(
name|challenge
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|step
condition|)
block|{
case|case
literal|1
case|:
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|cipherOptions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requestedQopContainsPrivacy
argument_list|()
condition|)
block|{
name|cipherOptions
operator|=
name|CIPHER_HELPER
operator|.
name|getCipherOptions
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|sendSaslMessage
argument_list|(
name|ctx
argument_list|,
name|response
argument_list|,
name|cipherOptions
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|flush
argument_list|()
expr_stmt|;
name|step
operator|++
expr_stmt|;
break|break;
block|}
case|case
literal|2
case|:
block|{
assert|assert
name|response
operator|==
literal|null
assert|;
name|checkSaslComplete
argument_list|()
expr_stmt|;
name|Object
name|cipherOption
init|=
name|CIPHER_HELPER
operator|.
name|getCipherOption
argument_list|(
name|proto
argument_list|,
name|isNegotiatedQopPrivacy
argument_list|()
argument_list|,
name|saslClient
argument_list|)
decl_stmt|;
name|ChannelPipeline
name|p
init|=
name|ctx
operator|.
name|pipeline
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|first
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cipherOption
operator|!=
literal|null
condition|)
block|{
name|CryptoCodec
name|codec
init|=
operator|new
name|CryptoCodec
argument_list|(
name|conf
argument_list|,
name|cipherOption
argument_list|)
decl_stmt|;
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|EncryptHandler
argument_list|(
name|codec
argument_list|)
argument_list|,
operator|new
name|DecryptHandler
argument_list|(
name|codec
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|useWrap
argument_list|()
condition|)
block|{
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|SaslWrapHandler
argument_list|(
name|saslClient
argument_list|)
argument_list|,
operator|new
name|LengthFieldBasedFrameDecoder
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
operator|new
name|SaslUnwrapHandler
argument_list|(
name|saslClient
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|promise
operator|.
name|trySuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized negotiation step: "
operator|+
name|step
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ctx
operator|.
name|fireChannelRead
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
name|promise
operator|.
name|tryFailure
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|userEventTriggered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|evt
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|evt
operator|instanceof
name|IdleStateEvent
operator|&&
operator|(
operator|(
name|IdleStateEvent
operator|)
name|evt
operator|)
operator|.
name|state
argument_list|()
operator|==
name|READER_IDLE
condition|)
block|{
name|promise
operator|.
name|tryFailure
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Timeout("
operator|+
name|timeoutMs
operator|+
literal|"ms) waiting for response"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|userEventTriggered
argument_list|(
name|ctx
argument_list|,
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SaslUnwrapHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|ByteBuf
argument_list|>
block|{
specifier|private
specifier|final
name|SaslClient
name|saslClient
decl_stmt|;
specifier|public
name|SaslUnwrapHandler
parameter_list|(
name|SaslClient
name|saslClient
parameter_list|)
block|{
name|this
operator|.
name|saslClient
operator|=
name|saslClient
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|saslClient
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|msg
operator|.
name|skipBytes
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|msg
operator|.
name|readableBytes
argument_list|()
index|]
decl_stmt|;
name|msg
operator|.
name|readBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|fireChannelRead
argument_list|(
name|Unpooled
operator|.
name|wrappedBuffer
argument_list|(
name|saslClient
operator|.
name|unwrap
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SaslWrapHandler
extends|extends
name|ChannelOutboundHandlerAdapter
block|{
specifier|private
specifier|final
name|SaslClient
name|saslClient
decl_stmt|;
specifier|private
name|CompositeByteBuf
name|cBuf
decl_stmt|;
specifier|public
name|SaslWrapHandler
parameter_list|(
name|SaslClient
name|saslClient
parameter_list|)
block|{
name|this
operator|.
name|saslClient
operator|=
name|saslClient
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handlerAdded
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|cBuf
operator|=
operator|new
name|CompositeByteBuf
argument_list|(
name|ctx
operator|.
name|alloc
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|,
name|ChannelPromise
name|promise
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|msg
operator|instanceof
name|ByteBuf
condition|)
block|{
name|ByteBuf
name|buf
init|=
operator|(
name|ByteBuf
operator|)
name|msg
decl_stmt|;
name|cBuf
operator|.
name|addComponent
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|cBuf
operator|.
name|writerIndex
argument_list|(
name|cBuf
operator|.
name|writerIndex
argument_list|()
operator|+
name|buf
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|cBuf
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|cBuf
operator|.
name|readableBytes
argument_list|()
index|]
decl_stmt|;
name|cBuf
operator|.
name|readBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|cBuf
operator|.
name|discardReadComponents
argument_list|()
expr_stmt|;
name|byte
index|[]
name|wrapped
init|=
name|saslClient
operator|.
name|wrap
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
name|ByteBuf
name|buf
init|=
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|ioBuffer
argument_list|(
literal|4
operator|+
name|wrapped
operator|.
name|length
argument_list|)
decl_stmt|;
name|buf
operator|.
name|writeInt
argument_list|(
name|wrapped
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ChannelPromise
name|promise
parameter_list|)
throws|throws
name|Exception
block|{
name|cBuf
operator|.
name|release
argument_list|()
expr_stmt|;
name|cBuf
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|DecryptHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|ByteBuf
argument_list|>
block|{
specifier|private
specifier|final
name|CryptoCodec
name|codec
decl_stmt|;
specifier|public
name|DecryptHandler
parameter_list|(
name|CryptoCodec
name|codec
parameter_list|)
block|{
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteBuf
name|inBuf
decl_stmt|;
name|boolean
name|release
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|nioBufferCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|inBuf
operator|=
name|msg
expr_stmt|;
block|}
else|else
block|{
name|inBuf
operator|=
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|directBuffer
argument_list|(
name|msg
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|readBytes
argument_list|(
name|inBuf
argument_list|)
expr_stmt|;
name|release
operator|=
literal|true
expr_stmt|;
block|}
name|ByteBuffer
name|inBuffer
init|=
name|inBuf
operator|.
name|nioBuffer
argument_list|()
decl_stmt|;
name|ByteBuf
name|outBuf
init|=
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|directBuffer
argument_list|(
name|inBuf
operator|.
name|readableBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|outBuffer
init|=
name|outBuf
operator|.
name|nioBuffer
argument_list|()
decl_stmt|;
name|codec
operator|.
name|decrypt
argument_list|(
name|inBuffer
argument_list|,
name|outBuffer
argument_list|)
expr_stmt|;
name|outBuf
operator|.
name|writerIndex
argument_list|(
name|inBuf
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|release
condition|)
block|{
name|inBuf
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|ctx
operator|.
name|fireChannelRead
argument_list|(
name|outBuf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|EncryptHandler
extends|extends
name|MessageToByteEncoder
argument_list|<
name|ByteBuf
argument_list|>
block|{
specifier|private
specifier|final
name|CryptoCodec
name|codec
decl_stmt|;
specifier|public
name|EncryptHandler
parameter_list|(
name|CryptoCodec
name|codec
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ByteBuf
name|allocateBuffer
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|msg
parameter_list|,
name|boolean
name|preferDirect
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|preferDirect
condition|)
block|{
return|return
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|directBuffer
argument_list|(
name|msg
operator|.
name|readableBytes
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|buffer
argument_list|(
name|msg
operator|.
name|readableBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|encode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|msg
parameter_list|,
name|ByteBuf
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteBuf
name|inBuf
decl_stmt|;
name|boolean
name|release
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|nioBufferCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|inBuf
operator|=
name|msg
expr_stmt|;
block|}
else|else
block|{
name|inBuf
operator|=
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|directBuffer
argument_list|(
name|msg
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|readBytes
argument_list|(
name|inBuf
argument_list|)
expr_stmt|;
name|release
operator|=
literal|true
expr_stmt|;
block|}
name|ByteBuffer
name|inBuffer
init|=
name|inBuf
operator|.
name|nioBuffer
argument_list|()
decl_stmt|;
name|ByteBuffer
name|outBuffer
init|=
name|out
operator|.
name|nioBuffer
argument_list|()
decl_stmt|;
name|codec
operator|.
name|encrypt
argument_list|(
name|inBuffer
argument_list|,
name|outBuffer
argument_list|)
expr_stmt|;
name|out
operator|.
name|writerIndex
argument_list|(
name|inBuf
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|release
condition|)
block|{
name|inBuf
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getUserNameFromEncryptionKey
parameter_list|(
name|DataEncryptionKey
name|encryptionKey
parameter_list|)
block|{
return|return
name|encryptionKey
operator|.
name|keyId
operator|+
name|NAME_DELIMITER
operator|+
name|encryptionKey
operator|.
name|blockPoolId
operator|+
name|NAME_DELIMITER
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|encryptionKey
operator|.
name|nonce
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|char
index|[]
name|encryptionKeyToPassword
parameter_list|(
name|byte
index|[]
name|encryptionKey
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|encryptionKey
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|toCharArray
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|buildUsername
parameter_list|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|blockToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|char
index|[]
name|buildClientPassword
parameter_list|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|blockToken
operator|.
name|getPassword
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|toCharArray
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createSaslPropertiesForEncryption
parameter_list|(
name|String
name|encryptionAlgorithm
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
name|QualityOfProtection
operator|.
name|PRIVACY
operator|.
name|getSaslQop
argument_list|()
argument_list|)
expr_stmt|;
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|SERVER_AUTH
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|saslProps
operator|.
name|put
argument_list|(
literal|"com.sun.security.sasl.digest.cipher"
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|saslProps
return|;
block|}
specifier|private
specifier|static
name|void
name|doSaslNegotiation
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|timeoutMs
parameter_list|,
name|String
name|username
parameter_list|,
name|char
index|[]
name|password
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|,
name|Promise
argument_list|<
name|Void
argument_list|>
name|saslPromise
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|IdleStateHandler
argument_list|(
name|timeoutMs
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
operator|new
name|ProtobufVarint32FrameDecoder
argument_list|()
argument_list|,
operator|new
name|ProtobufDecoder
argument_list|(
name|DataTransferEncryptorMessageProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SaslNegotiateHandler
argument_list|(
name|conf
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|saslProps
argument_list|,
name|timeoutMs
argument_list|,
name|saslPromise
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaslException
name|e
parameter_list|)
block|{
name|saslPromise
operator|.
name|tryFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|trySaslNegotiate
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|DatanodeInfo
name|dnInfo
parameter_list|,
name|int
name|timeoutMs
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|Promise
argument_list|<
name|Void
argument_list|>
name|saslPromise
parameter_list|)
block|{
name|SaslPropertiesResolver
name|saslPropsResolver
init|=
name|SASL_ADAPTOR
operator|.
name|getSaslPropsResolver
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|TrustedChannelResolver
name|trustedChannelResolver
init|=
name|SASL_ADAPTOR
operator|.
name|getTrustedChannelResolver
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|fallbackToSimpleAuth
init|=
name|SASL_ADAPTOR
operator|.
name|getFallbackToSimpleAuth
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|InetAddress
name|addr
init|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|channel
operator|.
name|remoteAddress
argument_list|()
operator|)
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|trustedChannelResolver
operator|.
name|isTrusted
argument_list|()
operator|||
name|trustedChannelResolver
operator|.
name|isTrusted
argument_list|(
name|addr
argument_list|)
condition|)
block|{
name|saslPromise
operator|.
name|trySuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|DataEncryptionKey
name|encryptionKey
decl_stmt|;
try|try
block|{
name|encryptionKey
operator|=
name|SASL_ADAPTOR
operator|.
name|createDataEncryptionKey
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|saslPromise
operator|.
name|tryFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|encryptionKey
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client doing encrypted handshake for addr = "
operator|+
name|addr
operator|+
literal|", datanodeId = "
operator|+
name|dnInfo
argument_list|)
expr_stmt|;
block|}
name|doSaslNegotiation
argument_list|(
name|conf
argument_list|,
name|channel
argument_list|,
name|timeoutMs
argument_list|,
name|getUserNameFromEncryptionKey
argument_list|(
name|encryptionKey
argument_list|)
argument_list|,
name|encryptionKeyToPassword
argument_list|(
name|encryptionKey
operator|.
name|encryptionKey
argument_list|)
argument_list|,
name|createSaslPropertiesForEncryption
argument_list|(
name|encryptionKey
operator|.
name|encryptionAlgorithm
argument_list|)
argument_list|,
name|saslPromise
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client skipping handshake in unsecured configuration for addr = "
operator|+
name|addr
operator|+
literal|", datanodeId = "
operator|+
name|dnInfo
argument_list|)
expr_stmt|;
block|}
name|saslPromise
operator|.
name|trySuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dnInfo
operator|.
name|getXferPort
argument_list|()
operator|<
literal|1024
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client skipping handshake in secured configuration with "
operator|+
literal|"privileged port for addr = "
operator|+
name|addr
operator|+
literal|", datanodeId = "
operator|+
name|dnInfo
argument_list|)
expr_stmt|;
block|}
name|saslPromise
operator|.
name|trySuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fallbackToSimpleAuth
operator|!=
literal|null
operator|&&
name|fallbackToSimpleAuth
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client skipping handshake in secured configuration with "
operator|+
literal|"unsecured cluster for addr = "
operator|+
name|addr
operator|+
literal|", datanodeId = "
operator|+
name|dnInfo
argument_list|)
expr_stmt|;
block|}
name|saslPromise
operator|.
name|trySuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|saslPropsResolver
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client doing general handshake for addr = "
operator|+
name|addr
operator|+
literal|", datanodeId = "
operator|+
name|dnInfo
argument_list|)
expr_stmt|;
block|}
name|doSaslNegotiation
argument_list|(
name|conf
argument_list|,
name|channel
argument_list|,
name|timeoutMs
argument_list|,
name|buildUsername
argument_list|(
name|accessToken
argument_list|)
argument_list|,
name|buildClientPassword
argument_list|(
name|accessToken
argument_list|)
argument_list|,
name|saslPropsResolver
operator|.
name|getClientProperties
argument_list|(
name|addr
argument_list|)
argument_list|,
name|saslPromise
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It's a secured cluster using non-privileged ports, but no SASL. The only way this can
comment|// happen is if the DataNode has ignore.secure.ports.for.testing configured, so this is a rare
comment|// edge case.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client skipping handshake in secured configuration with no SASL "
operator|+
literal|"protection configured for addr = "
operator|+
name|addr
operator|+
literal|", datanodeId = "
operator|+
name|dnInfo
argument_list|)
expr_stmt|;
block|}
name|saslPromise
operator|.
name|trySuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

