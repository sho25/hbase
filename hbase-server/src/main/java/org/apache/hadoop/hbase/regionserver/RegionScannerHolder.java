begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Leases
operator|.
name|LeaseStillHeldException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Holder class which holds the RegionScanner, nextCallSeq, ScanPrefetcher  * and information needed for prefetcher/fetcher.  *  * Originally, this is an inner class of HRegionServer. We moved it out  * since HRegionServer is getting bigger and bigger.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionScannerHolder
block|{
specifier|public
specifier|final
specifier|static
name|String
name|MAX_PREFETCHED_RESULT_SIZE_KEY
init|=
literal|"hbase.hregionserver.prefetcher.resultsize.max"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MAX_PREFETCHED_RESULT_SIZE_DEFAULT
init|=
literal|256
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionScannerHolder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|String
name|PREFETCHER_THREAD_PREFIX
init|=
literal|"scan-prefetch-"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|AtomicLong
name|globalPrefetchedResultSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|ThreadPoolExecutor
name|scanPrefetchThreadPool
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RegionScannerHolder
argument_list|>
name|scanners
decl_stmt|;
specifier|private
name|long
name|maxScannerResultSize
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|Leases
name|leases
decl_stmt|;
specifier|private
name|boolean
name|prefetching
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|maxGlobalPrefetchedResultSize
decl_stmt|;
specifier|private
specifier|volatile
name|Future
argument_list|<
name|ScanResult
argument_list|>
name|prefetchScanFuture
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|prefetchedResultSize
decl_stmt|;
specifier|private
name|ScanPrefetcher
name|prefetcher
decl_stmt|;
specifier|private
name|HRegion
name|region
decl_stmt|;
specifier|private
name|int
name|rows
decl_stmt|;
name|RegionScanner
name|scanner
decl_stmt|;
name|long
name|nextCallSeq
init|=
literal|0L
decl_stmt|;
name|String
name|scannerName
decl_stmt|;
comment|/**    * Get the total size of all prefetched results not retrieved yet.    */
specifier|public
specifier|static
name|long
name|getPrefetchedResultSize
parameter_list|()
block|{
return|return
name|globalPrefetchedResultSize
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Construct a RegionScanner holder for a specific region server.    *    * @param rs the region server the specific region is on    * @param s the scanner to be held    * @param r the region the scanner is for    */
name|RegionScannerHolder
parameter_list|(
name|HRegionServer
name|rs
parameter_list|,
name|RegionScanner
name|s
parameter_list|,
name|HRegion
name|r
parameter_list|)
block|{
name|scanPrefetchThreadPool
operator|=
name|rs
operator|.
name|scanPrefetchThreadPool
expr_stmt|;
name|maxScannerResultSize
operator|=
name|rs
operator|.
name|maxScannerResultSize
expr_stmt|;
name|prefetcher
operator|=
operator|new
name|ScanPrefetcher
argument_list|()
expr_stmt|;
name|scanners
operator|=
name|rs
operator|.
name|scanners
expr_stmt|;
name|leases
operator|=
name|rs
operator|.
name|leases
expr_stmt|;
name|conf
operator|=
name|rs
operator|.
name|conf
expr_stmt|;
name|scanner
operator|=
name|s
expr_stmt|;
name|region
operator|=
name|r
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPrefetchSubmitted
parameter_list|()
block|{
return|return
name|prefetchScanFuture
operator|!=
literal|null
return|;
block|}
specifier|public
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|region
operator|.
name|getRegionInfo
argument_list|()
return|;
block|}
comment|/**    * Find the current prefetched result size    */
specifier|public
name|long
name|currentPrefetchedResultSize
parameter_list|()
block|{
return|return
name|prefetchedResultSize
return|;
block|}
comment|/**    * Wait till current prefetching task complete,    * return true if any data retrieved, false otherwise.    * Used for unit testing only.    */
specifier|public
name|boolean
name|waitForPrefetchingDone
parameter_list|()
block|{
if|if
condition|(
name|prefetchScanFuture
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ScanResult
name|scanResult
init|=
name|prefetchScanFuture
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|scanResult
operator|!=
literal|null
operator|&&
name|scanResult
operator|.
name|results
operator|!=
literal|null
operator|&&
operator|!
name|scanResult
operator|.
name|results
operator|.
name|isEmpty
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got exception in getting scan result"
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Stop any prefetching task and close the scanner.    * @throws IOException    */
specifier|public
name|void
name|closeScanner
parameter_list|()
throws|throws
name|IOException
block|{
comment|// stop prefetcher if needed.
if|if
condition|(
name|prefetchScanFuture
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|prefetcher
init|)
block|{
name|prefetcher
operator|.
name|scannerClosing
operator|=
literal|true
expr_stmt|;
name|prefetchScanFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|prefetchScanFuture
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|prefetchedResultSize
operator|>
literal|0
condition|)
block|{
name|globalPrefetchedResultSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|prefetchedResultSize
argument_list|)
expr_stmt|;
name|prefetchedResultSize
operator|=
literal|0L
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the prefetched scan result, if any. Otherwise,    * do a scan synchronously and return the result, which    * may take some time. Region scan coprocessor, if specified,    * is invoked properly, which may override the scan result.    *    * @param rows the number of rows to scan, which is preferred    * not to change among scanner.next() calls.    *    * @return scan result, which has the data retrieved from    * the scanner, or some IOException if the scan failed.    * @throws IOException if failed to retrieve from the scanner.    */
specifier|public
name|ScanResult
name|getScanResult
parameter_list|(
specifier|final
name|int
name|rows
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|rows
operator|>
literal|0
argument_list|,
literal|"Number of rows requested must be positive"
argument_list|)
expr_stmt|;
name|ScanResult
name|scanResult
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
if|if
condition|(
name|prefetchScanFuture
operator|==
literal|null
condition|)
block|{
comment|// Need to scan inline if not prefetched
name|scanResult
operator|=
name|prefetcher
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// if we have a prefetched result, then use it
try|try
block|{
name|scanResult
operator|=
name|prefetchScanFuture
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|scanResult
operator|.
name|moreResults
condition|)
block|{
name|int
name|prefetchedRows
init|=
name|scanResult
operator|.
name|results
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefetchedRows
operator|!=
literal|0
operator|&&
name|this
operator|.
name|rows
operator|>
name|prefetchedRows
condition|)
block|{
comment|// Try to scan more since we haven't prefetched enough
name|this
operator|.
name|rows
operator|-=
name|prefetchedRows
expr_stmt|;
name|ScanResult
name|tmp
init|=
name|prefetcher
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|isException
condition|)
block|{
return|return
name|tmp
return|;
comment|// Keep the prefetched results for later
block|}
if|if
condition|(
name|tmp
operator|.
name|results
operator|!=
literal|null
operator|&&
operator|!
name|tmp
operator|.
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Merge new results to the old result list
name|scanResult
operator|.
name|results
operator|.
name|addAll
argument_list|(
name|tmp
operator|.
name|results
argument_list|)
expr_stmt|;
block|}
comment|// Reset rows for next prefetching
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
block|}
block|}
name|prefetchScanFuture
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|prefetchedResultSize
operator|>
literal|0
condition|)
block|{
name|globalPrefetchedResultSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|prefetchedResultSize
argument_list|)
expr_stmt|;
name|prefetchedResultSize
operator|=
literal|0L
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to run prefetching task"
argument_list|,
name|ee
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|(
literal|"scan was interrupted"
argument_list|)
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
block|}
if|if
condition|(
name|prefetching
operator|&&
name|scanResult
operator|.
name|moreResults
operator|&&
operator|!
name|scanResult
operator|.
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|totalPrefetchedResultSize
init|=
name|globalPrefetchedResultSize
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalPrefetchedResultSize
operator|<
name|maxGlobalPrefetchedResultSize
condition|)
block|{
comment|// Schedule a background prefetch for the next result
comment|// if prefetch is enabled on scans and there are more results
name|prefetchScanFuture
operator|=
name|scanPrefetchThreadPool
operator|.
name|submit
argument_list|(
name|prefetcher
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"One prefetching is skipped for scanner "
operator|+
name|scannerName
operator|+
literal|" since total prefetched result size "
operator|+
name|totalPrefetchedResultSize
operator|+
literal|" is more than the maximum configured "
operator|+
name|maxGlobalPrefetchedResultSize
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scanResult
return|;
block|}
comment|/**    * Set the rows to prefetch, and start the prefetching task.    */
specifier|public
name|void
name|enablePrefetching
parameter_list|(
name|int
name|caching
parameter_list|)
block|{
if|if
condition|(
name|caching
operator|>
literal|0
condition|)
block|{
name|rows
operator|=
name|caching
expr_stmt|;
block|}
else|else
block|{
name|rows
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_CACHING
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SCANNER_CACHING
argument_list|)
expr_stmt|;
block|}
name|maxGlobalPrefetchedResultSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MAX_PREFETCHED_RESULT_SIZE_KEY
argument_list|,
name|MAX_PREFETCHED_RESULT_SIZE_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|globalPrefetchedResultSize
operator|.
name|get
argument_list|()
operator|<
name|maxGlobalPrefetchedResultSize
condition|)
block|{
name|prefetchScanFuture
operator|=
name|scanPrefetchThreadPool
operator|.
name|submit
argument_list|(
name|prefetcher
argument_list|)
expr_stmt|;
block|}
name|prefetching
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * This Callable abstracts calling a pre-fetch next. This is called on a    * threadpool. It makes a pre-fetch next call with the same parameters as    * the incoming next call. Note that the number of rows to return (nbRows)    * and/or the memory size for the result is the same as the previous call if    * pre-fetching is enabled. If these parameters change dynamically,    * they will take effect in the subsequent iteration.    */
class|class
name|ScanPrefetcher
implements|implements
name|Callable
argument_list|<
name|ScanResult
argument_list|>
block|{
name|boolean
name|scannerClosing
init|=
literal|false
decl_stmt|;
specifier|public
name|ScanResult
name|call
parameter_list|()
block|{
name|ScanResult
name|scanResult
init|=
literal|null
decl_stmt|;
name|Leases
operator|.
name|Lease
name|lease
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Remove lease while its being processed in server; protects against case
comment|// where processing of request takes> lease expiration time.
name|lease
operator|=
name|leases
operator|.
name|removeLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Result
argument_list|>
argument_list|(
name|rows
argument_list|)
decl_stmt|;
name|long
name|currentScanResultSize
init|=
literal|0
decl_stmt|;
name|boolean
name|moreResults
init|=
literal|true
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|long
name|maxResultSize
init|=
name|scanner
operator|.
name|getMaxResultSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxResultSize
operator|<=
literal|0
condition|)
block|{
name|maxResultSize
operator|=
name|maxScannerResultSize
expr_stmt|;
block|}
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|prefetchingThread
init|=
name|threadName
operator|.
name|startsWith
argument_list|(
name|PREFETCHER_THREAD_PREFIX
argument_list|)
decl_stmt|;
comment|// Call coprocessor. Get region info from scanner.
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|bypass
init|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|rows
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|prefetchingThread
operator|||
name|maxResultSize
operator|<
name|Long
operator|.
name|MAX_VALUE
operator|)
condition|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|r
operator|.
name|raw
argument_list|()
control|)
block|{
name|currentScanResultSize
operator|+=
name|kv
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bypass
operator|!=
literal|null
operator|&&
name|bypass
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|MultiVersionConsistencyControl
operator|.
name|setThreadReadPoint
argument_list|(
name|scanner
operator|.
name|getMvccReadPoint
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|startRegionOperation
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|scanner
init|)
block|{
for|for
control|(
init|;
name|i
operator|<
name|rows
operator|&&
name|currentScanResultSize
operator|<
name|maxResultSize
condition|;
name|i
operator|++
control|)
block|{
comment|// Collect values to be returned here
name|boolean
name|moreRows
init|=
name|scanner
operator|.
name|nextRaw
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|prefetchingThread
operator|||
name|maxResultSize
operator|<
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|values
control|)
block|{
name|currentScanResultSize
operator|+=
name|kv
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
block|}
name|results
operator|.
name|add
argument_list|(
operator|new
name|Result
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|moreRows
condition|)
block|{
break|break;
block|}
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|region
operator|.
name|readRequestsCount
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|region
operator|.
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
comment|// coprocessor postNext hook
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|rows
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If the scanner's filter - if any - is done with the scan
comment|// and wants to tell the client to stop the scan. This is done by passing
comment|// a null result, and setting moreResults to false.
if|if
condition|(
name|scanner
operator|.
name|isFilterDone
argument_list|()
operator|&&
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|moreResults
operator|=
literal|false
expr_stmt|;
name|results
operator|=
literal|null
expr_stmt|;
block|}
name|scanResult
operator|=
operator|new
name|ScanResult
argument_list|(
name|moreResults
argument_list|,
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefetchingThread
operator|&&
name|currentScanResultSize
operator|>
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|prefetcher
init|)
block|{
if|if
condition|(
operator|!
name|scannerClosing
condition|)
block|{
name|globalPrefetchedResultSize
operator|.
name|addAndGet
argument_list|(
name|currentScanResultSize
argument_list|)
expr_stmt|;
name|prefetchedResultSize
operator|=
name|currentScanResultSize
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// we should queue the exception as the result so that we can return
comment|// this when the result is asked for
name|scanResult
operator|=
operator|new
name|ScanResult
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// We're done. On way out re-add the above removed lease.
comment|// Adding resets expiration time on lease.
if|if
condition|(
name|scanners
operator|.
name|containsKey
argument_list|(
name|scannerName
argument_list|)
condition|)
block|{
if|if
condition|(
name|lease
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|leases
operator|.
name|addLease
argument_list|(
name|lease
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseStillHeldException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"THIS SHOULD NOT HAPPEN"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|scanResult
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**  * This class abstracts the results of a single scanner's result. It tracks  * the list of Result objects if the pre-fetch next was successful, and  * tracks the exception if the next failed.  */
end_comment

begin_class
class|class
name|ScanResult
block|{
specifier|final
name|boolean
name|isException
decl_stmt|;
name|IOException
name|ioException
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
name|boolean
name|moreResults
init|=
literal|false
decl_stmt|;
specifier|public
name|ScanResult
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
name|this
operator|.
name|ioException
operator|=
name|ioException
expr_stmt|;
name|isException
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|ScanResult
parameter_list|(
name|boolean
name|moreResults
parameter_list|,
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|)
block|{
name|this
operator|.
name|moreResults
operator|=
name|moreResults
expr_stmt|;
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
name|isException
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

