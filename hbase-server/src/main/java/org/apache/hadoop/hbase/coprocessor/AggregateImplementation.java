begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AggregateProtos
operator|.
name|AggregateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AggregateProtos
operator|.
name|AggregateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AggregateProtos
operator|.
name|AggregateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  * A concrete AggregateProtocol implementation. Its system level coprocessor  * that computes the aggregate function at a region level.  * {@link ColumnInterpreter} is used to interpret column value. This class is  * parameterized with the following (these are the types with which the {@link ColumnInterpreter}  * is parameterized, and for more description on these, refer to {@link ColumnInterpreter}):  * @param<T> Cell value data type  * @param<S> Promoted data type  * @param<P> PB message that is used to transport initializer specific bytes  * @param<Q> PB message that is used to transport Cell (<T>) instance  * @param<R> PB message that is used to transport Promoted (<S>) instance  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AggregateImplementation
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|R
extends|extends
name|Message
parameter_list|>
extends|extends
name|AggregateService
implements|implements
name|CoprocessorService
implements|,
name|Coprocessor
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AggregateImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RegionCoprocessorEnvironment
name|env
decl_stmt|;
comment|/**    * Gives the maximum for a given combination of column qualifier and column    * family, in the given row range as defined in the Scan object. In its    * current implementation, it takes one column family and one column qualifier    * (if provided). In case of null column qualifier, maximum value for the    * entire column family will be returned.    */
annotation|@
name|Override
specifier|public
name|void
name|getMax
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AggregateRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AggregateResponse
argument_list|>
name|done
parameter_list|)
block|{
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|AggregateResponse
name|response
init|=
literal|null
decl_stmt|;
name|T
name|max
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|R
argument_list|>
name|ci
init|=
name|constructColumnInterpreterFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|T
name|temp
decl_stmt|;
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
argument_list|)
decl_stmt|;
name|scanner
operator|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|colFamily
init|=
name|scan
operator|.
name|getFamilies
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|colFamily
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
operator|!
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qualifiers
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
block|}
comment|// qualifier can be null.
name|boolean
name|hasMoreRows
init|=
literal|false
decl_stmt|;
do|do
block|{
name|hasMoreRows
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|temp
operator|=
name|ci
operator|.
name|getValue
argument_list|(
name|colFamily
argument_list|,
name|qualifier
argument_list|,
name|kv
argument_list|)
expr_stmt|;
name|max
operator|=
operator|(
name|max
operator|==
literal|null
operator|||
operator|(
name|temp
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|compare
argument_list|(
name|temp
argument_list|,
name|max
argument_list|)
operator|>
literal|0
operator|)
operator|)
condition|?
name|temp
else|:
name|max
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMoreRows
condition|)
do|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
name|AggregateResponse
operator|.
name|Builder
name|builder
init|=
name|AggregateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addFirstPart
argument_list|(
name|ci
operator|.
name|getProtoForCellType
argument_list|(
name|max
argument_list|)
operator|.
name|toByteString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Maximum from this region is "
operator|+
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|": "
operator|+
name|max
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gives the minimum for a given combination of column qualifier and column    * family, in the given row range as defined in the Scan object. In its    * current implementation, it takes one column family and one column qualifier    * (if provided). In case of null column qualifier, minimum value for the    * entire column family will be returned.    */
annotation|@
name|Override
specifier|public
name|void
name|getMin
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AggregateRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AggregateResponse
argument_list|>
name|done
parameter_list|)
block|{
name|AggregateResponse
name|response
init|=
literal|null
decl_stmt|;
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|T
name|min
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|R
argument_list|>
name|ci
init|=
name|constructColumnInterpreterFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|T
name|temp
decl_stmt|;
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
argument_list|)
decl_stmt|;
name|scanner
operator|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|colFamily
init|=
name|scan
operator|.
name|getFamilies
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|colFamily
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
operator|!
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qualifiers
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
block|}
name|boolean
name|hasMoreRows
init|=
literal|false
decl_stmt|;
do|do
block|{
name|hasMoreRows
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|temp
operator|=
name|ci
operator|.
name|getValue
argument_list|(
name|colFamily
argument_list|,
name|qualifier
argument_list|,
name|kv
argument_list|)
expr_stmt|;
name|min
operator|=
operator|(
name|min
operator|==
literal|null
operator|||
operator|(
name|temp
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|compare
argument_list|(
name|temp
argument_list|,
name|min
argument_list|)
operator|<
literal|0
operator|)
operator|)
condition|?
name|temp
else|:
name|min
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMoreRows
condition|)
do|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|response
operator|=
name|AggregateResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|addFirstPart
argument_list|(
name|ci
operator|.
name|getProtoForCellType
argument_list|(
name|min
argument_list|)
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Minimum from this region is "
operator|+
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|": "
operator|+
name|min
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gives the sum for a given combination of column qualifier and column    * family, in the given row range as defined in the Scan object. In its    * current implementation, it takes one column family and one column qualifier    * (if provided). In case of null column qualifier, sum for the entire column    * family will be returned.    */
annotation|@
name|Override
specifier|public
name|void
name|getSum
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AggregateRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AggregateResponse
argument_list|>
name|done
parameter_list|)
block|{
name|AggregateResponse
name|response
init|=
literal|null
decl_stmt|;
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|long
name|sum
init|=
literal|0l
decl_stmt|;
try|try
block|{
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|R
argument_list|>
name|ci
init|=
name|constructColumnInterpreterFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|S
name|sumVal
init|=
literal|null
decl_stmt|;
name|T
name|temp
decl_stmt|;
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
argument_list|)
decl_stmt|;
name|scanner
operator|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|byte
index|[]
name|colFamily
init|=
name|scan
operator|.
name|getFamilies
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|colFamily
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
operator|!
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qualifiers
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasMoreRows
init|=
literal|false
decl_stmt|;
do|do
block|{
name|hasMoreRows
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|temp
operator|=
name|ci
operator|.
name|getValue
argument_list|(
name|colFamily
argument_list|,
name|qualifier
argument_list|,
name|kv
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
name|sumVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumVal
argument_list|,
name|ci
operator|.
name|castToReturnType
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMoreRows
condition|)
do|;
if|if
condition|(
name|sumVal
operator|!=
literal|null
condition|)
block|{
name|response
operator|=
name|AggregateResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|addFirstPart
argument_list|(
name|ci
operator|.
name|getProtoForPromotedType
argument_list|(
name|sumVal
argument_list|)
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Sum from this region is "
operator|+
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|": "
operator|+
name|sum
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gives the row count for the given column family and column qualifier, in    * the given row range as defined in the Scan object.    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|getRowNum
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AggregateRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AggregateResponse
argument_list|>
name|done
parameter_list|)
block|{
name|AggregateResponse
name|response
init|=
literal|null
decl_stmt|;
name|long
name|counter
init|=
literal|0l
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|colFamilies
init|=
name|scan
operator|.
name|getFamilies
argument_list|()
decl_stmt|;
name|byte
index|[]
name|colFamily
init|=
name|colFamilies
operator|!=
literal|null
condition|?
name|colFamilies
index|[
literal|0
index|]
else|:
literal|null
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|colFamilies
operator|!=
literal|null
condition|?
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|colFamily
argument_list|)
else|:
literal|null
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
operator|!
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qualifiers
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getFilter
argument_list|()
operator|==
literal|null
operator|&&
name|qualifier
operator|==
literal|null
condition|)
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|boolean
name|hasMoreRows
init|=
literal|false
decl_stmt|;
do|do
block|{
name|hasMoreRows
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMoreRows
condition|)
do|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|putLong
argument_list|(
name|counter
argument_list|)
decl_stmt|;
name|bb
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|response
operator|=
name|AggregateResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|addFirstPart
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bb
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Row counter from this region is "
operator|+
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|": "
operator|+
name|counter
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gives a Pair with first object as Sum and second object as row count,    * computed for a given combination of column qualifier and column family in    * the given row range as defined in the Scan object. In its current    * implementation, it takes one column family and one column qualifier (if    * provided). In case of null column qualifier, an aggregate sum over all the    * entire column family will be returned.    *<p>    * The average is computed in    * AggregationClient#avg(byte[], ColumnInterpreter, Scan) by    * processing results from all regions, so its "ok" to pass sum and a Long    * type.    */
annotation|@
name|Override
specifier|public
name|void
name|getAvg
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AggregateRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AggregateResponse
argument_list|>
name|done
parameter_list|)
block|{
name|AggregateResponse
name|response
init|=
literal|null
decl_stmt|;
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|R
argument_list|>
name|ci
init|=
name|constructColumnInterpreterFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|S
name|sumVal
init|=
literal|null
decl_stmt|;
name|Long
name|rowCountVal
init|=
literal|0l
decl_stmt|;
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
argument_list|)
decl_stmt|;
name|scanner
operator|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|byte
index|[]
name|colFamily
init|=
name|scan
operator|.
name|getFamilies
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|colFamily
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
operator|!
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qualifiers
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasMoreRows
init|=
literal|false
decl_stmt|;
do|do
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasMoreRows
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|sumVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumVal
argument_list|,
name|ci
operator|.
name|castToReturnType
argument_list|(
name|ci
operator|.
name|getValue
argument_list|(
name|colFamily
argument_list|,
name|qualifier
argument_list|,
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rowCountVal
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|hasMoreRows
condition|)
do|;
if|if
condition|(
name|sumVal
operator|!=
literal|null
condition|)
block|{
name|ByteString
name|first
init|=
name|ci
operator|.
name|getProtoForPromotedType
argument_list|(
name|sumVal
argument_list|)
operator|.
name|toByteString
argument_list|()
decl_stmt|;
name|AggregateResponse
operator|.
name|Builder
name|pair
init|=
name|AggregateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|pair
operator|.
name|addFirstPart
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|putLong
argument_list|(
name|rowCountVal
argument_list|)
decl_stmt|;
name|bb
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|pair
operator|.
name|setSecondPart
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bb
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|pair
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
block|}
block|}
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gives a Pair with first object a List containing Sum and sum of squares,    * and the second object as row count. It is computed for a given combination of    * column qualifier and column family in the given row range as defined in the    * Scan object. In its current implementation, it takes one column family and    * one column qualifier (if provided). The idea is get the value of variance first:    * the average of the squares less the square of the average a standard    * deviation is square root of variance.    */
annotation|@
name|Override
specifier|public
name|void
name|getStd
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AggregateRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AggregateResponse
argument_list|>
name|done
parameter_list|)
block|{
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|AggregateResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|R
argument_list|>
name|ci
init|=
name|constructColumnInterpreterFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|S
name|sumVal
init|=
literal|null
decl_stmt|,
name|sumSqVal
init|=
literal|null
decl_stmt|,
name|tempVal
init|=
literal|null
decl_stmt|;
name|long
name|rowCountVal
init|=
literal|0l
decl_stmt|;
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
argument_list|)
decl_stmt|;
name|scanner
operator|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|byte
index|[]
name|colFamily
init|=
name|scan
operator|.
name|getFamilies
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|colFamily
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
operator|!
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qualifiers
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasMoreRows
init|=
literal|false
decl_stmt|;
do|do
block|{
name|tempVal
operator|=
literal|null
expr_stmt|;
name|hasMoreRows
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|tempVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|tempVal
argument_list|,
name|ci
operator|.
name|castToReturnType
argument_list|(
name|ci
operator|.
name|getValue
argument_list|(
name|colFamily
argument_list|,
name|qualifier
argument_list|,
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sumVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumVal
argument_list|,
name|tempVal
argument_list|)
expr_stmt|;
name|sumSqVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumSqVal
argument_list|,
name|ci
operator|.
name|multiply
argument_list|(
name|tempVal
argument_list|,
name|tempVal
argument_list|)
argument_list|)
expr_stmt|;
name|rowCountVal
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|hasMoreRows
condition|)
do|;
if|if
condition|(
name|sumVal
operator|!=
literal|null
condition|)
block|{
name|ByteString
name|first_sumVal
init|=
name|ci
operator|.
name|getProtoForPromotedType
argument_list|(
name|sumVal
argument_list|)
operator|.
name|toByteString
argument_list|()
decl_stmt|;
name|ByteString
name|first_sumSqVal
init|=
name|ci
operator|.
name|getProtoForPromotedType
argument_list|(
name|sumSqVal
argument_list|)
operator|.
name|toByteString
argument_list|()
decl_stmt|;
name|AggregateResponse
operator|.
name|Builder
name|pair
init|=
name|AggregateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|pair
operator|.
name|addFirstPart
argument_list|(
name|first_sumVal
argument_list|)
expr_stmt|;
name|pair
operator|.
name|addFirstPart
argument_list|(
name|first_sumSqVal
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|putLong
argument_list|(
name|rowCountVal
argument_list|)
decl_stmt|;
name|bb
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|pair
operator|.
name|setSecondPart
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bb
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|pair
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
block|}
block|}
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gives a List containing sum of values and sum of weights.    * It is computed for the combination of column    * family and column qualifier(s) in the given row range as defined in the    * Scan object. In its current implementation, it takes one column family and    * two column qualifiers. The first qualifier is for values column and     * the second qualifier (optional) is for weight column.    */
annotation|@
name|Override
specifier|public
name|void
name|getMedian
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AggregateRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AggregateResponse
argument_list|>
name|done
parameter_list|)
block|{
name|AggregateResponse
name|response
init|=
literal|null
decl_stmt|;
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|R
argument_list|>
name|ci
init|=
name|constructColumnInterpreterFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|S
name|sumVal
init|=
literal|null
decl_stmt|,
name|sumWeights
init|=
literal|null
decl_stmt|,
name|tempVal
init|=
literal|null
decl_stmt|,
name|tempWeight
init|=
literal|null
decl_stmt|;
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
argument_list|)
decl_stmt|;
name|scanner
operator|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|byte
index|[]
name|colFamily
init|=
name|scan
operator|.
name|getFamilies
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|colFamily
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valQualifier
init|=
literal|null
decl_stmt|,
name|weightQualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
operator|!
name|qualifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|valQualifier
operator|=
name|qualifiers
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
comment|// if weighted median is requested, get qualifier for the weight column
name|weightQualifier
operator|=
name|qualifiers
operator|.
name|pollLast
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasMoreRows
init|=
literal|false
decl_stmt|;
do|do
block|{
name|tempVal
operator|=
literal|null
expr_stmt|;
name|tempWeight
operator|=
literal|null
expr_stmt|;
name|hasMoreRows
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|tempVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|tempVal
argument_list|,
name|ci
operator|.
name|castToReturnType
argument_list|(
name|ci
operator|.
name|getValue
argument_list|(
name|colFamily
argument_list|,
name|valQualifier
argument_list|,
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|weightQualifier
operator|!=
literal|null
condition|)
block|{
name|tempWeight
operator|=
name|ci
operator|.
name|add
argument_list|(
name|tempWeight
argument_list|,
name|ci
operator|.
name|castToReturnType
argument_list|(
name|ci
operator|.
name|getValue
argument_list|(
name|colFamily
argument_list|,
name|weightQualifier
argument_list|,
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sumVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumVal
argument_list|,
name|tempVal
argument_list|)
expr_stmt|;
name|sumWeights
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumWeights
argument_list|,
name|tempWeight
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|hasMoreRows
condition|)
do|;
name|ByteString
name|first_sumVal
init|=
name|ci
operator|.
name|getProtoForPromotedType
argument_list|(
name|sumVal
argument_list|)
operator|.
name|toByteString
argument_list|()
decl_stmt|;
name|S
name|s
init|=
name|sumWeights
operator|==
literal|null
condition|?
name|ci
operator|.
name|castToReturnType
argument_list|(
name|ci
operator|.
name|getMinValue
argument_list|()
argument_list|)
else|:
name|sumWeights
decl_stmt|;
name|ByteString
name|first_sumWeights
init|=
name|ci
operator|.
name|getProtoForPromotedType
argument_list|(
name|s
argument_list|)
operator|.
name|toByteString
argument_list|()
decl_stmt|;
name|AggregateResponse
operator|.
name|Builder
name|pair
init|=
name|AggregateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|pair
operator|.
name|addFirstPart
argument_list|(
name|first_sumVal
argument_list|)
expr_stmt|;
name|pair
operator|.
name|addFirstPart
argument_list|(
name|first_sumWeights
argument_list|)
expr_stmt|;
name|response
operator|=
name|pair
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
block|}
block|}
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|R
argument_list|>
name|constructColumnInterpreterFromRequest
parameter_list|(
name|AggregateRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|request
operator|.
name|getInterpreterClassName
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
try|try
block|{
name|cls
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|R
argument_list|>
name|ci
init|=
operator|(
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|R
argument_list|>
operator|)
name|cls
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasInterpreterSpecificBytes
argument_list|()
condition|)
block|{
name|ByteString
name|b
init|=
name|request
operator|.
name|getInterpreterSpecificBytes
argument_list|()
decl_stmt|;
name|P
name|initMsg
init|=
name|ProtobufUtil
operator|.
name|getParsedGenericInstance
argument_list|(
name|ci
operator|.
name|getClass
argument_list|()
argument_list|,
literal|2
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|ci
operator|.
name|initialize
argument_list|(
name|initMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|ci
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**    * Stores a reference to the coprocessor environment provided by the    * {@link org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost} from the region where this    * coprocessor is loaded.  Since this is a coprocessor endpoint, it always expects to be loaded    * on a table region, so always expects this to be an instance of    * {@link RegionCoprocessorEnvironment}.    * @param env the environment provided by the coprocessor host    * @throws IOException if the provided environment is not an instance of    * {@code RegionCoprocessorEnvironment}    */
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
name|this
operator|.
name|env
operator|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
literal|"Must be loaded on a table region!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// nothing to do
block|}
block|}
end_class

end_unit

