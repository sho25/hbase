begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ErrorHandlingProtos
operator|.
name|ForeignExceptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ErrorHandlingProtos
operator|.
name|GenericExceptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ErrorHandlingProtos
operator|.
name|StackTraceElementMessage
import|;
end_import

begin_comment
comment|/**  * A ForeignException is an exception from another thread or process.  *<p>  * ForeignExceptions are sent to 'remote' peers to signal an abort in the face of failures.  * When serialized for transmission we encode using Protobufs to ensure version compatibility.  *<p>  * Foreign exceptions contain a Throwable as its cause.  This can be a "regular" exception  * generated locally or a ProxyThrowable that is a representation of the original exception  * created on original 'remote' source.  These ProxyThrowables have their their stacks traces and  * messages overridden to reflect the original 'remote' exception.  The only way these  * ProxyThrowables are generated are by this class's {@link #deserialize(byte[])} method.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
class|class
name|ForeignException
extends|extends
name|IOException
block|{
comment|/**    * Name of the throwable's source such as a host or thread name.  Must be non-null.    */
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
comment|/**    * Create a new ForeignException that can be serialized.  It is assumed that this came form a    * local source.    * @param source    * @param cause    */
specifier|public
name|ForeignException
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
assert|assert
name|source
operator|!=
literal|null
assert|;
assert|assert
name|cause
operator|!=
literal|null
assert|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
comment|/**    * Create a new ForeignException that can be serialized.  It is assumed that this is locally    * generated.    * @param source    * @param msg    */
specifier|public
name|ForeignException
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
comment|/**    * The cause of a ForeignException can be an exception that was generated on a local in process    * thread, or a thread from a 'remote' separate process.    *    * If the cause is a ProxyThrowable, we know it came from deserialization which usually means    * it came from not only another thread, but also from a remote thread.    *    * @return true if went through deserialization, false if locally generated    */
specifier|public
name|boolean
name|isRemote
parameter_list|()
block|{
return|return
name|getCause
argument_list|()
operator|instanceof
name|ProxyThrowable
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|className
init|=
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|className
operator|+
literal|" via "
operator|+
name|getSource
argument_list|()
operator|+
literal|":"
operator|+
name|getLocalizedMessage
argument_list|()
return|;
block|}
comment|/**    * Convert a stack trace to list of {@link StackTraceElement}.    * @param trace the stack trace to convert to protobuf message    * @return<tt>null</tt> if the passed stack is<tt>null</tt>.    */
specifier|private
specifier|static
name|List
argument_list|<
name|StackTraceElementMessage
argument_list|>
name|toStackTraceElementMessages
parameter_list|(
name|StackTraceElement
index|[]
name|trace
parameter_list|)
block|{
comment|// if there is no stack trace, ignore it and just return the message
if|if
condition|(
name|trace
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// build the stack trace for the message
name|List
argument_list|<
name|StackTraceElementMessage
argument_list|>
name|pbTrace
init|=
operator|new
name|ArrayList
argument_list|<
name|StackTraceElementMessage
argument_list|>
argument_list|(
name|trace
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|elem
range|:
name|trace
control|)
block|{
name|StackTraceElementMessage
operator|.
name|Builder
name|stackBuilder
init|=
name|StackTraceElementMessage
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|stackBuilder
operator|.
name|setDeclaringClass
argument_list|(
name|elem
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|stackBuilder
operator|.
name|setFileName
argument_list|(
name|elem
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|stackBuilder
operator|.
name|setLineNumber
argument_list|(
name|elem
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|stackBuilder
operator|.
name|setMethodName
argument_list|(
name|elem
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|pbTrace
operator|.
name|add
argument_list|(
name|stackBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pbTrace
return|;
block|}
comment|/**    * This is a Proxy Throwable that contains the information of the original remote exception    */
specifier|private
specifier|static
class|class
name|ProxyThrowable
extends|extends
name|Throwable
block|{
name|ProxyThrowable
parameter_list|(
name|String
name|msg
parameter_list|,
name|StackTraceElement
index|[]
name|trace
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|setStackTrace
argument_list|(
name|trace
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Converts a ForeignException to an array of bytes.    * @param source the name of the external exception source    * @param t the "local" external exception (local)    * @return protobuf serialized version of ForeignException    */
specifier|public
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|GenericExceptionMessage
operator|.
name|Builder
name|gemBuilder
init|=
name|GenericExceptionMessage
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|gemBuilder
operator|.
name|setClassName
argument_list|(
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|gemBuilder
operator|.
name|setMessage
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set the stack trace, if there is one
name|List
argument_list|<
name|StackTraceElementMessage
argument_list|>
name|stack
init|=
name|ForeignException
operator|.
name|toStackTraceElementMessages
argument_list|(
name|t
operator|.
name|getStackTrace
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|!=
literal|null
condition|)
block|{
name|gemBuilder
operator|.
name|addAllTrace
argument_list|(
name|stack
argument_list|)
expr_stmt|;
block|}
name|GenericExceptionMessage
name|payload
init|=
name|gemBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ForeignExceptionMessage
operator|.
name|Builder
name|exception
init|=
name|ForeignExceptionMessage
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|exception
operator|.
name|setGenericException
argument_list|(
name|payload
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|ForeignExceptionMessage
name|eem
init|=
name|exception
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|eem
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Takes a series of bytes and tries to generate an ForeignException instance for it.    * @param bytes    * @return the ForeignExcpetion instance    * @throws InvalidProtocolBufferException if there was deserialization problem this is thrown.    * @throws org.apache.hadoop.hbase.shaded.com.google.protobuf.InvalidProtocolBufferException     */
specifier|public
specifier|static
name|ForeignException
name|deserialize
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// figure out the data we need to pass
name|ForeignExceptionMessage
name|eem
init|=
name|ForeignExceptionMessage
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|GenericExceptionMessage
name|gem
init|=
name|eem
operator|.
name|getGenericException
argument_list|()
decl_stmt|;
name|StackTraceElement
index|[]
name|trace
init|=
name|ForeignException
operator|.
name|toStackTrace
argument_list|(
name|gem
operator|.
name|getTraceList
argument_list|()
argument_list|)
decl_stmt|;
name|ProxyThrowable
name|dfe
init|=
operator|new
name|ProxyThrowable
argument_list|(
name|gem
operator|.
name|getMessage
argument_list|()
argument_list|,
name|trace
argument_list|)
decl_stmt|;
name|ForeignException
name|e
init|=
operator|new
name|ForeignException
argument_list|(
name|eem
operator|.
name|getSource
argument_list|()
argument_list|,
name|dfe
argument_list|)
decl_stmt|;
return|return
name|e
return|;
block|}
comment|/**    * Unwind a serialized array of {@link StackTraceElementMessage}s to a    * {@link StackTraceElement}s.    * @param traceList list that was serialized    * @return the deserialized list or<tt>null</tt> if it couldn't be unwound (e.g. wasn't set on    *         the sender).    */
specifier|private
specifier|static
name|StackTraceElement
index|[]
name|toStackTrace
parameter_list|(
name|List
argument_list|<
name|StackTraceElementMessage
argument_list|>
name|traceList
parameter_list|)
block|{
if|if
condition|(
name|traceList
operator|==
literal|null
operator|||
name|traceList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|StackTraceElement
index|[
literal|0
index|]
return|;
comment|// empty array
block|}
name|StackTraceElement
index|[]
name|trace
init|=
operator|new
name|StackTraceElement
index|[
name|traceList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|traceList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StackTraceElementMessage
name|elem
init|=
name|traceList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|trace
index|[
name|i
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
name|elem
operator|.
name|getDeclaringClass
argument_list|()
argument_list|,
name|elem
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|elem
operator|.
name|getFileName
argument_list|()
argument_list|,
name|elem
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|trace
return|;
block|}
block|}
end_class

end_unit

