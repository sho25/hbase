begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * The zookeeper used for MOB.  * This zookeeper is used to synchronize the HBase major compaction and sweep tool.  * The structure of the nodes for mob in zookeeper.  * |--baseNode  *     |--MOB  *         |--tableName:columnFamilyName-lock // locks for the mob column family  *         |--tableName:columnFamilyName-sweeper // when a sweep tool runs, such a node is added  *         |--tableName:columnFamilyName-majorCompaction  *              |--UUID //when a major compaction occurs, such a node is added.  * In order to synchronize the operations between the sweep tool and HBase major compaction, these  * actions need to acquire the tableName:columnFamilyName-lock before the sweep tool and major  * compaction run.  * In sweep tool.  * 1. If it acquires the lock successfully. It check whether the sweeper node exists, if exist the  * current running is aborted. If not it it checks whether there're major compaction nodes, if yes  * the current running is aborted, if not it adds a sweep node to the zookeeper.  * 2. If it could not obtain the lock, the current running is aborted.  * In the HBase compaction.  * 1. If it's a minor compaction, continue the compaction.  * 2. If it's a major compaction, it acquires a lock in zookeeper.  *    A. If it obtains the lock, it checks whether there's sweep node, if yes it converts itself  *    to a minor one and continue, if no it adds a major compaction node to the zookeeper.  *    B. If it could not obtain the lock, it converts itself to a minor one and continue the  *    compaction.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MobZookeeper
block|{
comment|// TODO Will remove this class before the mob is merged back to master.
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MobZookeeper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
specifier|private
name|String
name|mobZnode
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCK_EPHEMERAL
init|=
literal|"-lock"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SWEEPER_EPHEMERAL
init|=
literal|"-sweeper"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MAJOR_COMPACTION_EPHEMERAL
init|=
literal|"-majorCompaction"
decl_stmt|;
specifier|private
name|MobZookeeper
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|identifier
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|this
operator|.
name|zkw
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
name|identifier
argument_list|,
operator|new
name|DummyMobAbortable
argument_list|()
argument_list|)
expr_stmt|;
name|mobZnode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|baseZNode
argument_list|,
literal|"MOB"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|mobZnode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|mobZnode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates an new instance of MobZookeeper.    * @param conf The current configuration.    * @param identifier string that is passed to RecoverableZookeeper to be used as    * identifier for this instance.    * @return A new instance of MobZookeeper.    * @throws IOException    * @throws KeeperException    */
specifier|public
specifier|static
name|MobZookeeper
name|newInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|identifier
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
return|return
operator|new
name|MobZookeeper
argument_list|(
name|conf
argument_list|,
name|identifier
argument_list|)
return|;
block|}
comment|/**    * Acquire a lock on the current column family.    * All the threads try to access the column family acquire a lock which is actually create an    * ephemeral node in the zookeeper.    * @param tableName The current table name.    * @param familyName The current column family name.    * @return True if the lock is obtained successfully. Otherwise false is returned.    */
specifier|public
name|boolean
name|lockColumnFamily
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
name|String
name|znodeName
init|=
name|MobUtils
operator|.
name|getColumnFamilyZNodeName
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|boolean
name|locked
init|=
literal|false
decl_stmt|;
try|try
block|{
name|locked
operator|=
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|zkw
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mobZnode
argument_list|,
name|znodeName
operator|+
name|LOCK_EPHEMERAL
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|locked
condition|?
literal|"Locked the column family "
operator|+
name|znodeName
else|:
literal|"Can not lock the column family "
operator|+
name|znodeName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to lock the column family "
operator|+
name|znodeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|locked
return|;
block|}
comment|/**    * Release the lock on the current column family.    * @param tableName The current table name.    * @param familyName The current column family name.    */
specifier|public
name|void
name|unlockColumnFamily
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
name|String
name|znodeName
init|=
name|MobUtils
operator|.
name|getColumnFamilyZNodeName
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unlocking the column family "
operator|+
name|znodeName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zkw
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mobZnode
argument_list|,
name|znodeName
operator|+
name|LOCK_EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fail to unlock the column family "
operator|+
name|znodeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds a node to zookeeper which indicates that a sweep tool is running.    * @param tableName The current table name.    * @param familyName The current columnFamilyName name.    * @param data the data of the ephemeral node.    * @return True if the node is created successfully. Otherwise false is returned.    */
specifier|public
name|boolean
name|addSweeperZNode
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|boolean
name|add
init|=
literal|false
decl_stmt|;
name|String
name|znodeName
init|=
name|MobUtils
operator|.
name|getColumnFamilyZNodeName
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
try|try
block|{
name|add
operator|=
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|zkw
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mobZnode
argument_list|,
name|znodeName
operator|+
name|SWEEPER_EPHEMERAL
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|add
condition|?
literal|"Added a znode for sweeper "
operator|+
name|znodeName
else|:
literal|"Cannot add a znode for sweeper "
operator|+
name|znodeName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to add a znode for sweeper "
operator|+
name|znodeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|add
return|;
block|}
comment|/**    * Gets the path of the sweeper znode in zookeeper.    * @param tableName The current table name.    * @param familyName The current columnFamilyName name.    * @return The path of the sweeper znode in zookeper.    */
specifier|public
name|String
name|getSweeperZNodePath
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
name|String
name|znodeName
init|=
name|MobUtils
operator|.
name|getColumnFamilyZNodeName
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
return|return
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mobZnode
argument_list|,
name|znodeName
operator|+
name|SWEEPER_EPHEMERAL
argument_list|)
return|;
block|}
comment|/**    * Deletes the node from zookeeper which indicates that a sweep tool is finished.    * @param tableName The current table name.    * @param familyName The current column family name.    */
specifier|public
name|void
name|deleteSweeperZNode
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
name|String
name|znodeName
init|=
name|MobUtils
operator|.
name|getColumnFamilyZNodeName
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zkw
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mobZnode
argument_list|,
name|znodeName
operator|+
name|SWEEPER_EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to delete a znode for sweeper "
operator|+
name|znodeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks whether the znode exists in the Zookeeper.    * If the node exists, it means a sweep tool is running.    * Otherwise, the sweep tool is not.    * @param tableName The current table name.    * @param familyName The current column family name.    * @return True if this node doesn't exist. Otherwise false is returned.    * @throws KeeperException    */
specifier|public
name|boolean
name|isSweeperZNodeExist
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|znodeName
init|=
name|MobUtils
operator|.
name|getColumnFamilyZNodeName
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
return|return
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mobZnode
argument_list|,
name|znodeName
operator|+
name|SWEEPER_EPHEMERAL
argument_list|)
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**    * Checks whether there're major compactions nodes in the zookeeper.    * If there're such nodes, it means there're major compactions in progress now.    * Otherwise there're not.    * @param tableName The current table name.    * @param familyName The current column family name.    * @return True if there're major compactions in progress. Otherwise false is returned.    * @throws KeeperException    */
specifier|public
name|boolean
name|hasMajorCompactionChildren
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|znodeName
init|=
name|MobUtils
operator|.
name|getColumnFamilyZNodeName
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|String
name|mcPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mobZnode
argument_list|,
name|znodeName
operator|+
name|MAJOR_COMPACTION_EPHEMERAL
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|mcPath
argument_list|)
decl_stmt|;
return|return
name|children
operator|!=
literal|null
operator|&&
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Creates a node of a major compaction to the Zookeeper.    * Before a HBase major compaction, such a node is created to the Zookeeper. It tells others that    * there're major compaction in progress, the sweep tool could not be run at this time.    * @param tableName The current table name.    * @param familyName The current column family name.    * @param compactionName The current compaction name.    * @return True if the node is created successfully. Otherwise false is returned.    * @throws KeeperException    */
specifier|public
name|boolean
name|addMajorCompactionZNode
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|,
name|String
name|compactionName
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|znodeName
init|=
name|MobUtils
operator|.
name|getColumnFamilyZNodeName
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|String
name|mcPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mobZnode
argument_list|,
name|znodeName
operator|+
name|MAJOR_COMPACTION_EPHEMERAL
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createNodeIfNotExistsAndWatch
argument_list|(
name|zkw
argument_list|,
name|mcPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|eachMcPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mcPath
argument_list|,
name|compactionName
argument_list|)
decl_stmt|;
return|return
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|zkw
argument_list|,
name|eachMcPath
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Deletes a major compaction node from the Zookeeper.    * @param tableName The current table name.    * @param familyName The current column family name.    * @param compactionName The current compaction name.    * @throws KeeperException    */
specifier|public
name|void
name|deleteMajorCompactionZNode
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|,
name|String
name|compactionName
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|znodeName
init|=
name|MobUtils
operator|.
name|getColumnFamilyZNodeName
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|String
name|mcPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mobZnode
argument_list|,
name|znodeName
operator|+
name|MAJOR_COMPACTION_EPHEMERAL
argument_list|)
decl_stmt|;
name|String
name|eachMcPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|mcPath
argument_list|,
name|compactionName
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zkw
argument_list|,
name|eachMcPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Closes the MobZookeeper.    */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * An dummy abortable. It's used for the MobZookeeper.    */
specifier|public
specifier|static
class|class
name|DummyMobAbortable
implements|implements
name|Abortable
block|{
specifier|private
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|abort
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|abort
return|;
block|}
block|}
block|}
end_class

end_unit

