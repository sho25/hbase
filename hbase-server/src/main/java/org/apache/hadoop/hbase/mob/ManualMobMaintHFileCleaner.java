begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|BaseHFileCleanerDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@link BaseHFileCleanerDelegate} that prevents cleaning HFiles from a mob region  *  * keeps a map of table name strings to mob region name strings over the life of  * a JVM instance. if there's churn of unique table names we'll eat memory until  * Master restart.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|ManualMobMaintHFileCleaner
extends|extends
name|BaseHFileCleanerDelegate
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ManualMobMaintHFileCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// We need to avoid making HRegionInfo objects for every table we check.
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|MOB_REGIONS
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isFileDeletable
parameter_list|(
name|FileStatus
name|fStat
parameter_list|)
block|{
try|try
block|{
comment|// if its a directory, then it can be deleted
if|if
condition|(
name|fStat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Path
name|file
init|=
name|fStat
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// we need the table and region to determine if this is from a mob region
comment|// we don't need to worry about hfilelink back references, because the hfilelink cleaner will
comment|// retain them.
name|Path
name|family
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|region
init|=
name|family
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|table
init|=
name|region
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|FSUtils
operator|.
name|getTableName
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|String
name|mobRegion
init|=
name|MOB_REGIONS
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mobRegion
operator|==
literal|null
condition|)
block|{
name|String
name|tmp
init|=
name|MobUtils
operator|.
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"couldn't determine mob region for table {} keeping files just in case."
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|mobRegion
operator|=
name|MOB_REGIONS
operator|.
name|putIfAbsent
argument_list|(
name|tableName
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
comment|// a return of null means that tmp is now in the map for future lookups.
if|if
condition|(
name|mobRegion
operator|==
literal|null
condition|)
block|{
name|mobRegion
operator|=
name|tmp
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Had to calculate name of mob region for table {} and it is {}"
argument_list|,
name|tableName
argument_list|,
name|mobRegion
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ret
init|=
operator|!
name|mobRegion
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
operator|!
name|ret
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Keeping file '{}' because it is from mob dir"
argument_list|,
name|fStat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to determine mob status of '{}', keeping it just in case."
argument_list|,
name|fStat
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

