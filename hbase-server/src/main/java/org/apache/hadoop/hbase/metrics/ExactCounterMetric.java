begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|ExactCounterMetric
extends|extends
name|MetricsBase
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_TOP_N
init|=
literal|5
decl_stmt|;
comment|// only publish stats on the topN items (default to DEFAULT_TOP_N)
specifier|private
specifier|final
name|int
name|topN
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counts
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
comment|// all access to the 'counts' map should use this lock.
comment|// take a write lock iff you want to guarantee exclusive access
comment|// (the map stripes locks internally, so it's already thread safe -
comment|// this lock is just so you can take a consistent snapshot of data)
specifier|private
specifier|final
name|ReadWriteLock
name|lock
decl_stmt|;
comment|/**      * Constructor to create a new counter metric      * @param nam         the name to publish this metric under      * @param registry    where the metrics object will be registered      * @param description metrics description      * @param topN        how many 'keys' to publish metrics on      */
specifier|public
name|ExactCounterMetric
parameter_list|(
specifier|final
name|String
name|nam
parameter_list|,
specifier|final
name|MetricsRegistry
name|registry
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
name|int
name|topN
parameter_list|)
block|{
name|super
argument_list|(
name|nam
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|lock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|topN
operator|=
name|topN
expr_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|registry
operator|.
name|add
argument_list|(
name|nam
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Constructor creates a new ExactCounterMetric    * @param nam       the name of the metrics to be used to publish the metric    * @param registry  where the metrics object will be registered    */
specifier|public
name|ExactCounterMetric
parameter_list|(
specifier|final
name|String
name|nam
parameter_list|,
name|MetricsRegistry
name|registry
parameter_list|)
block|{
name|this
argument_list|(
name|nam
argument_list|,
name|registry
argument_list|,
name|NO_DESCRIPTION
argument_list|,
name|DEFAULT_TOP_N
argument_list|)
expr_stmt|;
block|}
comment|/**    * Relies on an external lock on {@link #lock} for thread safety.    */
specifier|private
name|Counter
name|getOrCreateCounter
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|Counter
name|cnt
init|=
name|counts
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|null
condition|)
block|{
name|cnt
operator|=
operator|new
name|Counter
argument_list|()
expr_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
return|return
name|cnt
return|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getOrCreateCounter
argument_list|(
name|type
argument_list|)
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|(
name|String
name|type
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getOrCreateCounter
argument_list|(
name|type
argument_list|)
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getTop
parameter_list|(
name|int
name|n
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|countsSnapshot
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|this
operator|.
name|counts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// no updates are allowed while I'm holding this lock, so move fast
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|this
operator|.
name|counts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|countsSnapshot
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|countsSnapshot
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|a
parameter_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|b
parameter_list|)
block|{
return|return
name|b
operator|.
name|getSecond
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getSecond
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|countsSnapshot
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|countsSnapshot
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|pushMetric
parameter_list|(
name|MetricsRecord
name|mr
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|topKeys
init|=
name|getTop
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|keyCount
range|:
name|topKeys
control|)
block|{
name|counter
operator|++
expr_stmt|;
comment|// only push stats on the topN keys
if|if
condition|(
name|counter
operator|<=
name|this
operator|.
name|topN
condition|)
block|{
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|keyCount
operator|.
name|getFirst
argument_list|()
argument_list|,
name|keyCount
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
name|keyCount
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_map_size"
argument_list|,
name|this
operator|.
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_total_count"
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

