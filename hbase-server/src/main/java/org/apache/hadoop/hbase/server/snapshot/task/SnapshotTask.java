begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|task
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionCheckable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|error
operator|.
name|SnapshotExceptionSnare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|HBaseSnapshotException
import|;
end_import

begin_comment
comment|/**  * General snapshot operation taken on a regionserver  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SnapshotTask
implements|implements
name|ExceptionCheckable
argument_list|<
name|HBaseSnapshotException
argument_list|>
implements|,
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SnapshotTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SnapshotExceptionSnare
name|errorMonitor
decl_stmt|;
specifier|private
specifier|final
name|String
name|desc
decl_stmt|;
specifier|protected
specifier|final
name|SnapshotDescription
name|snapshot
decl_stmt|;
comment|/**    * @param snapshot Description of the snapshot we are going to operate on    * @param monitor listener interested in failures to the snapshot caused by this operation    * @param description description of the task being run, for logging    */
specifier|public
name|SnapshotTask
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|,
name|SnapshotExceptionSnare
name|monitor
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|errorMonitor
operator|=
name|monitor
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|description
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|snapshotFailure
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|errorMonitor
operator|.
name|snapshotFailure
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|snapshot
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failOnError
parameter_list|()
throws|throws
name|HBaseSnapshotException
block|{
name|this
operator|.
name|errorMonitor
operator|.
name|failOnError
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkForError
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorMonitor
operator|.
name|checkForError
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running: "
operator|+
name|desc
argument_list|)
expr_stmt|;
name|this
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|snapshotFailure
argument_list|(
literal|"Failed to run "
operator|+
name|this
operator|.
name|desc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run the task for the snapshot.    * @throws Exception if the task fails. Will be propagated to any other tasks watching the same    *           {@link SnapshotErrorListener}.    */
specifier|protected
specifier|abstract
name|void
name|process
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

