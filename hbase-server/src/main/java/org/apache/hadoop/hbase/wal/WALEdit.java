begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|CompactionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|FlushDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|RegionEventDescriptor
import|;
end_import

begin_comment
comment|/**  * WALEdit: Used in HBase's transaction log (WAL) to represent  * the collection of edits (KeyValue objects) corresponding to a  * single transaction.  *  * All the edits for a given transaction are written out as a single record, in PB format followed  * by Cells written via the WALCellEncoder.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
name|HBaseInterfaceAudience
operator|.
name|REPLICATION
block|,
name|HBaseInterfaceAudience
operator|.
name|COPROC
block|}
argument_list|)
specifier|public
class|class
name|WALEdit
implements|implements
name|HeapSize
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WALEdit
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: Get rid of this; see HBASE-8457
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|METAFAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"METAFAMILY"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|METAROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"METAROW"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|COMPACTION
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"HBASE::COMPACTION"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FLUSH
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"HBASE::FLUSH"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|REGION_EVENT
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"HBASE::REGION_EVENT"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|BULK_LOAD
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"HBASE::BULK_LOAD"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isReplay
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
literal|null
decl_stmt|;
specifier|public
name|WALEdit
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WALEdit
parameter_list|(
name|boolean
name|isReplay
parameter_list|)
block|{
name|this
argument_list|(
literal|1
argument_list|,
name|isReplay
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WALEdit
parameter_list|(
name|int
name|cellCount
parameter_list|)
block|{
name|this
argument_list|(
name|cellCount
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WALEdit
parameter_list|(
name|int
name|cellCount
parameter_list|,
name|boolean
name|isReplay
parameter_list|)
block|{
name|this
operator|.
name|isReplay
operator|=
name|isReplay
expr_stmt|;
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cellCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param f    * @return True is<code>f</code> is {@link #METAFAMILY}    */
specifier|public
specifier|static
name|boolean
name|isMetaEditFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|f
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|METAFAMILY
argument_list|,
name|f
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isMetaEditFamily
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|cell
argument_list|,
name|METAFAMILY
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isMetaEdit
parameter_list|()
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
operator|!
name|isMetaEditFamily
argument_list|(
name|cell
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @return True when current WALEdit is created by log replay. Replication skips WALEdits from    *         replay.    */
specifier|public
name|boolean
name|isReplay
parameter_list|()
block|{
return|return
name|this
operator|.
name|isReplay
return|;
block|}
specifier|public
name|WALEdit
name|add
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|this
operator|.
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|cells
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|cells
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|getCells
parameter_list|()
block|{
return|return
name|cells
return|;
block|}
comment|/**    * This is not thread safe.    * This will change the WALEdit and shouldn't be used unless you are sure that nothing    * else depends on the contents being immutable.    *    * @param cells the list of cells that this WALEdit now contains.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|void
name|setCells
parameter_list|(
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
parameter_list|)
block|{
name|this
operator|.
name|cells
operator|=
name|cells
expr_stmt|;
block|}
comment|/**    * Reads WALEdit from cells.    * @param cellDecoder Cell decoder.    * @param expectedCount Expected cell count.    * @return Number of KVs read.    */
specifier|public
name|int
name|readFromCells
parameter_list|(
name|Codec
operator|.
name|Decoder
name|cellDecoder
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|IOException
block|{
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cells
operator|.
name|ensureCapacity
argument_list|(
name|expectedCount
argument_list|)
expr_stmt|;
while|while
condition|(
name|cells
operator|.
name|size
argument_list|()
operator|<
name|expectedCount
operator|&&
name|cellDecoder
operator|.
name|advance
argument_list|()
condition|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|cellDecoder
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cells
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
name|long
name|ret
init|=
name|ClassSize
operator|.
name|ARRAYLIST
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|ret
operator|+=
name|PrivateCellUtil
operator|.
name|estimatedHeapSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|long
name|estimatedSerializedSizeOf
parameter_list|()
block|{
name|long
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|ret
operator|+=
name|PrivateCellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[#edits: "
operator|+
name|cells
operator|.
name|size
argument_list|()
operator|+
literal|" =<"
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|">]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|WALEdit
name|createFlushWALEdit
parameter_list|(
name|RegionInfo
name|hri
parameter_list|,
name|FlushDescriptor
name|f
parameter_list|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|getRowForRegion
argument_list|(
name|hri
argument_list|)
argument_list|,
name|METAFAMILY
argument_list|,
name|FLUSH
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
name|f
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|WALEdit
argument_list|()
operator|.
name|add
argument_list|(
name|kv
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FlushDescriptor
name|getFlushDescriptor
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|cell
argument_list|,
name|METAFAMILY
argument_list|,
name|FLUSH
argument_list|)
condition|)
block|{
return|return
name|FlushDescriptor
operator|.
name|parseFrom
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|WALEdit
name|createRegionEventWALEdit
parameter_list|(
name|RegionInfo
name|hri
parameter_list|,
name|RegionEventDescriptor
name|regionEventDesc
parameter_list|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|getRowForRegion
argument_list|(
name|hri
argument_list|)
argument_list|,
name|METAFAMILY
argument_list|,
name|REGION_EVENT
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
name|regionEventDesc
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|WALEdit
argument_list|()
operator|.
name|add
argument_list|(
name|kv
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RegionEventDescriptor
name|getRegionEventDescriptor
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|cell
argument_list|,
name|METAFAMILY
argument_list|,
name|REGION_EVENT
argument_list|)
condition|)
block|{
return|return
name|RegionEventDescriptor
operator|.
name|parseFrom
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Create a compaction WALEdit    * @param c    * @return A WALEdit that has<code>c</code> serialized as its value    */
specifier|public
specifier|static
name|WALEdit
name|createCompaction
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|,
specifier|final
name|CompactionDescriptor
name|c
parameter_list|)
block|{
name|byte
index|[]
name|pbbytes
init|=
name|c
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|getRowForRegion
argument_list|(
name|hri
argument_list|)
argument_list|,
name|METAFAMILY
argument_list|,
name|COMPACTION
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
name|pbbytes
argument_list|)
decl_stmt|;
return|return
operator|new
name|WALEdit
argument_list|()
operator|.
name|add
argument_list|(
name|kv
argument_list|)
return|;
comment|//replication scope null so that this won't be replicated
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getRowForRegion
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
block|{
name|byte
index|[]
name|startKey
init|=
name|hri
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|startKey
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// empty row key is not allowed in mutations because it is both the start key and the end key
comment|// we return the smallest byte[] that is bigger (in lex comparison) than byte[0].
return|return
operator|new
name|byte
index|[]
block|{
literal|0
block|}
return|;
block|}
return|return
name|startKey
return|;
block|}
comment|/**    * Deserialized and returns a CompactionDescriptor is the KeyValue contains one.    * @param kv the key value    * @return deserialized CompactionDescriptor or null.    */
specifier|public
specifier|static
name|CompactionDescriptor
name|getCompaction
parameter_list|(
name|Cell
name|kv
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCompactionMarker
argument_list|(
name|kv
argument_list|)
condition|)
block|{
return|return
name|CompactionDescriptor
operator|.
name|parseFrom
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns true if the given cell is a serialized {@link CompactionDescriptor}    *    * @see #getCompaction(Cell)    */
specifier|public
specifier|static
name|boolean
name|isCompactionMarker
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|cell
argument_list|,
name|METAFAMILY
argument_list|,
name|COMPACTION
argument_list|)
return|;
block|}
comment|/**    * Create a bulk loader WALEdit    *    * @param hri                The RegionInfo for the region in which we are bulk loading    * @param bulkLoadDescriptor The descriptor for the Bulk Loader    * @return The WALEdit for the BulkLoad    */
specifier|public
specifier|static
name|WALEdit
name|createBulkLoadEvent
parameter_list|(
name|RegionInfo
name|hri
parameter_list|,
name|WALProtos
operator|.
name|BulkLoadDescriptor
name|bulkLoadDescriptor
parameter_list|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|getRowForRegion
argument_list|(
name|hri
argument_list|)
argument_list|,
name|METAFAMILY
argument_list|,
name|BULK_LOAD
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
name|bulkLoadDescriptor
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|WALEdit
argument_list|()
operator|.
name|add
argument_list|(
name|kv
argument_list|)
return|;
block|}
comment|/**    * Deserialized and returns a BulkLoadDescriptor from the passed in Cell    * @param cell the key value    * @return deserialized BulkLoadDescriptor or null.    */
specifier|public
specifier|static
name|WALProtos
operator|.
name|BulkLoadDescriptor
name|getBulkLoadDescriptor
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|cell
argument_list|,
name|METAFAMILY
argument_list|,
name|BULK_LOAD
argument_list|)
condition|)
block|{
return|return
name|WALProtos
operator|.
name|BulkLoadDescriptor
operator|.
name|parseFrom
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

