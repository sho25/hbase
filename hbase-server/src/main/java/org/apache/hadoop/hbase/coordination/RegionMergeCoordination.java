begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable  * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License  * for the specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionMergeTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_comment
comment|/**  * Coordination operations for region merge transaction. The operation should be coordinated at the  * following stages:<br>  * 1. startRegionMergeTransaction - all preparation/initialization for merge region transaction<br>  * 2. waitForRegionMergeTransaction - wait until coordination complete all works related   * to merge<br>  * 3. confirmRegionMergeTransaction - confirm that the merge could be completed and none of merging  * regions moved somehow<br>  * 4. completeRegionMergeTransaction - all steps that are required to complete the transaction.  * Called after PONR (point of no return)<br>  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|RegionMergeCoordination
block|{
name|RegionMergeDetails
name|getDefaultDetails
parameter_list|()
function_decl|;
comment|/**    * Dummy interface for region merge transaction details.    */
specifier|public
specifier|static
interface|interface
name|RegionMergeDetails
block|{   }
comment|/**    * Start the region merge transaction    * @param region region to be created as offline    * @param serverName server event originates from    * @throws IOException    */
name|void
name|startRegionMergeTransaction
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get everything ready for region merge    * @throws IOException    */
name|void
name|waitForRegionMergeTransaction
parameter_list|(
name|RegionServerServices
name|services
parameter_list|,
name|HRegionInfo
name|mergedRegionInfo
parameter_list|,
name|HRegion
name|region_a
parameter_list|,
name|HRegion
name|region_b
parameter_list|,
name|RegionMergeDetails
name|details
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Confirm that the region merge can be performed    * @param merged region    * @param a merging region A    * @param b merging region B    * @param serverName server event originates from    * @param rmd region merge details    * @throws IOException If thrown, transaction failed.    */
name|void
name|confirmRegionMergeTransaction
parameter_list|(
name|HRegionInfo
name|merged
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|RegionMergeDetails
name|rmd
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @param merged region    * @param a merging region A    * @param b merging region B    * @param serverName server event originates from    * @param rmd region merge details    * @throws IOException    */
name|void
name|processRegionMergeRequest
parameter_list|(
name|HRegionInfo
name|merged
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|RegionMergeDetails
name|rmd
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Finish off merge transaction    * @param services Used to online/offline regions.    * @param merged region    * @param region_a merging region A    * @param region_b merging region B    * @param rmd region merge details    * @param mergedRegion    * @throws IOException If thrown, transaction failed. Call    *           {@link RegionMergeTransaction#rollback(Server, RegionServerServices)}    */
name|void
name|completeRegionMergeTransaction
parameter_list|(
name|RegionServerServices
name|services
parameter_list|,
name|HRegionInfo
name|merged
parameter_list|,
name|HRegion
name|region_a
parameter_list|,
name|HRegion
name|region_b
parameter_list|,
name|RegionMergeDetails
name|rmd
parameter_list|,
name|HRegion
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This method is used during rollback    * @param merged region to be rolled back    */
name|void
name|clean
parameter_list|(
name|HRegionInfo
name|merged
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

