begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSizeCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A base for {@link TableInputFormat}s. Receives a {@link Connection}, a {@link TableName},  * an {@link Scan} instance that defines the input columns etc. Subclasses may use  * other TableRecordReader implementations.  *<p>  * An example of a subclass:  *<pre>  *   class ExampleTIF extends TableInputFormatBase implements JobConfigurable {  *  *     private JobConf job;  *  *     public void configure(JobConf job) {  *       this.job = job;  *       Text[] inputColumns = new byte [][] { Bytes.toBytes("cf1:columnA"),  *         Bytes.toBytes("cf2") };  *       // mandatory  *       setInputColumns(inputColumns);  *       RowFilterInterface exampleFilter = new RegExpRowFilter("keyPrefix.*");  *       // optional  *       setRowFilter(exampleFilter);  *     }  *       *     protected void initialize() {  *       Connection connection =  *          ConnectionFactory.createConnection(HBaseConfiguration.create(job));  *       TableName tableName = TableName.valueOf("exampleTable");  *       // mandatory  *       initializeTable(connection, tableName);  *    }  *  *     public void validateInput(JobConf job) throws IOException {  *     }  *  }  *</pre>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
specifier|abstract
class|class
name|TableInputFormatBase
extends|extends
name|InputFormat
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
block|{
comment|/** Specify if we enable auto-balance for input in M/R jobs.*/
specifier|public
specifier|static
specifier|final
name|String
name|MAPREDUCE_INPUT_AUTOBALANCE
init|=
literal|"hbase.mapreduce.input.autobalance"
decl_stmt|;
comment|/** Specify if ratio for data skew in M/R jobs, it goes well with the enabling hbase.mapreduce    * .input.autobalance property.*/
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_AUTOBALANCE_MAXSKEWRATIO
init|=
literal|"hbase.mapreduce.input.autobalance"
operator|+
literal|".maxskewratio"
decl_stmt|;
comment|/** Specify if the row key in table is text (ASCII between 32~126),    * default is true. False means the table is using binary row key*/
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_ROW_TEXTKEY
init|=
literal|"hbase.table.row.textkey"
decl_stmt|;
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableInputFormatBase
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Holds the details for the internal scanner.    *    * @see Scan */
specifier|private
name|Scan
name|scan
init|=
literal|null
decl_stmt|;
comment|/** The {@link Admin}. */
specifier|private
name|Admin
name|admin
decl_stmt|;
comment|/** The {@link Table} to scan. */
specifier|private
name|Table
name|table
decl_stmt|;
comment|/** The {@link RegionLocator} of the table. */
specifier|private
name|RegionLocator
name|regionLocator
decl_stmt|;
comment|/** The reader scanning the table, can be a custom one. */
specifier|private
name|TableRecordReader
name|tableRecordReader
init|=
literal|null
decl_stmt|;
comment|/** The underlying {@link Connection} of the table. */
specifier|private
name|Connection
name|connection
decl_stmt|;
comment|/** The reverse DNS lookup cache mapping: IPAddress => HostName */
specifier|private
name|HashMap
argument_list|<
name|InetAddress
argument_list|,
name|String
argument_list|>
name|reverseDNSCacheMap
init|=
operator|new
name|HashMap
argument_list|<
name|InetAddress
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Builds a {@link TableRecordReader}. If no {@link TableRecordReader} was provided, uses    * the default.    *    * @param split  The split to work with.    * @param context  The current context.    * @return The newly created record reader.    * @throws IOException When creating the reader fails.    * @see org.apache.hadoop.mapreduce.InputFormat#createRecordReader(    *   org.apache.hadoop.mapreduce.InputSplit,    *   org.apache.hadoop.mapreduce.TaskAttemptContext)    */
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getTable
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// initialize() must not have been implemented in the subclass.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create a record reader because of a"
operator|+
literal|" previous error. Please look at the previous logs lines from"
operator|+
literal|" the task's full log for more details."
argument_list|)
throw|;
block|}
name|TableSplit
name|tSplit
init|=
operator|(
name|TableSplit
operator|)
name|split
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Input split length: "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|tSplit
operator|.
name|getLength
argument_list|()
argument_list|)
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
specifier|final
name|TableRecordReader
name|trr
init|=
name|this
operator|.
name|tableRecordReader
operator|!=
literal|null
condition|?
name|this
operator|.
name|tableRecordReader
else|:
operator|new
name|TableRecordReader
argument_list|()
decl_stmt|;
name|Scan
name|sc
init|=
operator|new
name|Scan
argument_list|(
name|this
operator|.
name|scan
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setStartRow
argument_list|(
name|tSplit
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setStopRow
argument_list|(
name|tSplit
operator|.
name|getEndRow
argument_list|()
argument_list|)
expr_stmt|;
name|trr
operator|.
name|setScan
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|trr
operator|.
name|setTable
argument_list|(
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|trr
operator|.
name|close
argument_list|()
expr_stmt|;
name|closeTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableBytesWritable
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|trr
operator|.
name|getCurrentKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|trr
operator|.
name|getCurrentValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|trr
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|inputsplit
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|trr
operator|.
name|initialize
argument_list|(
name|inputsplit
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|trr
operator|.
name|nextKeyValue
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|getStartEndKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getRegionLocator
argument_list|()
operator|.
name|getStartEndKeys
argument_list|()
return|;
block|}
comment|/**    * Calculates the splits that will serve as input for the map tasks. The    * number of splits matches the number of regions in a table.    *    * @param context  The current job context.    * @return The list of input splits.    * @throws IOException When creating the list of splits fails.    * @see org.apache.hadoop.mapreduce.InputFormat#getSplits(    *   org.apache.hadoop.mapreduce.JobContext)    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|closeOnFinish
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|initialize
argument_list|()
expr_stmt|;
name|closeOnFinish
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|getTable
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// initialize() wasn't implemented, so the table is null.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No table was provided."
argument_list|)
throw|;
block|}
try|try
block|{
name|RegionSizeCalculator
name|sizeCalculator
init|=
operator|new
name|RegionSizeCalculator
argument_list|(
name|getRegionLocator
argument_list|()
argument_list|,
name|getAdmin
argument_list|()
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|keys
init|=
name|getStartEndKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|keys
operator|==
literal|null
operator|||
name|keys
operator|.
name|getFirst
argument_list|()
operator|==
literal|null
operator|||
name|keys
operator|.
name|getFirst
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|HRegionLocation
name|regLoc
init|=
name|getRegionLocator
argument_list|()
operator|.
name|getRegionLocation
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|regLoc
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expecting at least one region."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|regionSize
init|=
name|sizeCalculator
operator|.
name|getRegionSize
argument_list|(
name|regLoc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|TableSplit
name|split
init|=
operator|new
name|TableSplit
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|regLoc
operator|.
name|getHostnamePort
argument_list|()
operator|.
name|split
argument_list|(
name|Addressing
operator|.
name|HOSTNAME_PORT_SEPARATOR
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|regionSize
argument_list|)
decl_stmt|;
name|splits
operator|.
name|add
argument_list|(
name|split
argument_list|)
expr_stmt|;
return|return
name|splits
return|;
block|}
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|(
name|keys
operator|.
name|getFirst
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|getFirst
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|includeRegionInSplit
argument_list|(
name|keys
operator|.
name|getFirst
argument_list|()
index|[
name|i
index|]
argument_list|,
name|keys
operator|.
name|getSecond
argument_list|()
index|[
name|i
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|HRegionLocation
name|location
init|=
name|getRegionLocator
argument_list|()
operator|.
name|getRegionLocation
argument_list|(
name|keys
operator|.
name|getFirst
argument_list|()
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// The below InetSocketAddress creation does a name resolution.
name|InetSocketAddress
name|isa
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|location
operator|.
name|getHostname
argument_list|()
argument_list|,
name|location
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isa
operator|.
name|isUnresolved
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed resolve "
operator|+
name|isa
argument_list|)
expr_stmt|;
block|}
name|InetAddress
name|regionAddress
init|=
name|isa
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|String
name|regionLocation
decl_stmt|;
try|try
block|{
name|regionLocation
operator|=
name|reverseDNS
argument_list|(
name|regionAddress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot resolve the host name for "
operator|+
name|regionAddress
operator|+
literal|" because of "
operator|+
name|e
argument_list|)
expr_stmt|;
name|regionLocation
operator|=
name|location
operator|.
name|getHostname
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|startRow
init|=
name|scan
operator|.
name|getStartRow
argument_list|()
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
comment|// determine if the given start an stop key fall into the region
if|if
condition|(
operator|(
name|startRow
operator|.
name|length
operator|==
literal|0
operator|||
name|keys
operator|.
name|getSecond
argument_list|()
index|[
name|i
index|]
operator|.
name|length
operator|==
literal|0
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startRow
argument_list|,
name|keys
operator|.
name|getSecond
argument_list|()
index|[
name|i
index|]
argument_list|)
operator|<
literal|0
operator|)
operator|&&
operator|(
name|stopRow
operator|.
name|length
operator|==
literal|0
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|stopRow
argument_list|,
name|keys
operator|.
name|getFirst
argument_list|()
index|[
name|i
index|]
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|byte
index|[]
name|splitStart
init|=
name|startRow
operator|.
name|length
operator|==
literal|0
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|keys
operator|.
name|getFirst
argument_list|()
index|[
name|i
index|]
argument_list|,
name|startRow
argument_list|)
operator|>=
literal|0
condition|?
name|keys
operator|.
name|getFirst
argument_list|()
index|[
name|i
index|]
else|:
name|startRow
decl_stmt|;
name|byte
index|[]
name|splitStop
init|=
operator|(
name|stopRow
operator|.
name|length
operator|==
literal|0
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|keys
operator|.
name|getSecond
argument_list|()
index|[
name|i
index|]
argument_list|,
name|stopRow
argument_list|)
operator|<=
literal|0
operator|)
operator|&&
name|keys
operator|.
name|getSecond
argument_list|()
index|[
name|i
index|]
operator|.
name|length
operator|>
literal|0
condition|?
name|keys
operator|.
name|getSecond
argument_list|()
index|[
name|i
index|]
else|:
name|stopRow
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|long
name|regionSize
init|=
name|sizeCalculator
operator|.
name|getRegionSize
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|TableSplit
name|split
init|=
operator|new
name|TableSplit
argument_list|(
name|tableName
argument_list|,
name|splitStart
argument_list|,
name|splitStop
argument_list|,
name|regionLocation
argument_list|,
name|regionSize
argument_list|)
decl_stmt|;
name|splits
operator|.
name|add
argument_list|(
name|split
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getSplits: split -> "
operator|+
name|i
operator|+
literal|" -> "
operator|+
name|split
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//The default value of "hbase.mapreduce.input.autobalance" is false, which means not enabled.
name|boolean
name|enableAutoBalance
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|MAPREDUCE_INPUT_AUTOBALANCE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|enableAutoBalance
condition|)
block|{
name|long
name|totalRegionSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TableSplit
name|ts
init|=
operator|(
name|TableSplit
operator|)
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|totalRegionSize
operator|+=
name|ts
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|long
name|averageRegionSize
init|=
name|totalRegionSize
operator|/
name|splits
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// the averageRegionSize must be positive.
if|if
condition|(
name|averageRegionSize
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The averageRegionSize is not positive: "
operator|+
name|averageRegionSize
operator|+
literal|", "
operator|+
literal|"set it to 1."
argument_list|)
expr_stmt|;
name|averageRegionSize
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|calculateRebalancedSplits
argument_list|(
name|splits
argument_list|,
name|context
argument_list|,
name|averageRegionSize
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|splits
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|closeOnFinish
condition|)
block|{
name|closeTable
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|reverseDNS
parameter_list|(
name|InetAddress
name|ipAddress
parameter_list|)
throws|throws
name|NamingException
throws|,
name|UnknownHostException
block|{
name|String
name|hostName
init|=
name|this
operator|.
name|reverseDNSCacheMap
operator|.
name|get
argument_list|(
name|ipAddress
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostName
operator|==
literal|null
condition|)
block|{
name|String
name|ipAddressString
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ipAddressString
operator|=
name|DNS
operator|.
name|reverseDns
argument_list|(
name|ipAddress
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// We can use InetAddress in case the jndi failed to pull up the reverse DNS entry from the
comment|// name service. Also, in case of ipv6, we need to use the InetAddress since resolving
comment|// reverse DNS using jndi doesn't work well with ipv6 addresses.
name|ipAddressString
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ipAddress
operator|.
name|getHostAddress
argument_list|()
argument_list|)
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ipAddressString
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownHostException
argument_list|(
literal|"No host found for "
operator|+
name|ipAddress
argument_list|)
throw|;
name|hostName
operator|=
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|ipAddressString
argument_list|)
expr_stmt|;
name|this
operator|.
name|reverseDNSCacheMap
operator|.
name|put
argument_list|(
name|ipAddress
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
block|}
return|return
name|hostName
return|;
block|}
comment|/**    * Calculates the number of MapReduce input splits for the map tasks. The number of    * MapReduce input splits depends on the average region size and the "data skew ratio" user set in    * configuration.    *    * @param list  The list of input splits before balance.    * @param context  The current job context.    * @param average  The average size of all regions .    * @return The list of input splits.    * @throws IOException When creating the list of splits fails.    * @see org.apache.hadoop.mapreduce.InputFormat#getSplits(    *   org.apache.hadoop.mapreduce.JobContext)    */
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|calculateRebalancedSplits
parameter_list|(
name|List
argument_list|<
name|InputSplit
argument_list|>
name|list
parameter_list|,
name|JobContext
name|context
parameter_list|,
name|long
name|average
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InputSplit
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|//The default data skew ratio is 3
name|long
name|dataSkewRatio
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|INPUT_AUTOBALANCE_MAXSKEWRATIO
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|//It determines which mode to use: text key mode or binary key mode. The default is text mode.
name|boolean
name|isTextKey
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|TABLE_ROW_TEXTKEY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|dataSkewThreshold
init|=
name|dataSkewRatio
operator|*
name|average
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
name|TableSplit
name|ts
init|=
operator|(
name|TableSplit
operator|)
name|list
operator|.
name|get
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|ts
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|String
name|regionLocation
init|=
name|ts
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
name|long
name|regionSize
init|=
name|ts
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionSize
operator|>=
name|dataSkewThreshold
condition|)
block|{
comment|// if the current region size is large than the data skew threshold,
comment|// split the region into two MapReduce input splits.
name|byte
index|[]
name|splitKey
init|=
name|getSplitKey
argument_list|(
name|ts
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|ts
operator|.
name|getEndRow
argument_list|()
argument_list|,
name|isTextKey
argument_list|)
decl_stmt|;
comment|//Set the size of child TableSplit as 1/2 of the region size. The exact size of the
comment|// MapReduce input splits is not far off.
name|TableSplit
name|t1
init|=
operator|new
name|TableSplit
argument_list|(
name|tableName
argument_list|,
name|ts
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|splitKey
argument_list|,
name|regionLocation
argument_list|,
name|regionSize
operator|/
literal|2
argument_list|)
decl_stmt|;
name|TableSplit
name|t2
init|=
operator|new
name|TableSplit
argument_list|(
name|tableName
argument_list|,
name|splitKey
argument_list|,
name|ts
operator|.
name|getEndRow
argument_list|()
argument_list|,
name|regionLocation
argument_list|,
name|regionSize
operator|-
name|regionSize
operator|/
literal|2
argument_list|)
decl_stmt|;
name|resultList
operator|.
name|add
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|resultList
operator|.
name|add
argument_list|(
name|t2
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|regionSize
operator|>=
name|average
condition|)
block|{
comment|// if the region size between average size and data skew threshold size,
comment|// make this region as one MapReduce input split.
name|resultList
operator|.
name|add
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// if the total size of several small continuous regions less than the average region size,
comment|// combine them into one MapReduce input split.
name|long
name|totalSize
init|=
name|regionSize
decl_stmt|;
name|byte
index|[]
name|splitStartKey
init|=
name|ts
operator|.
name|getStartRow
argument_list|()
decl_stmt|;
name|byte
index|[]
name|splitEndKey
init|=
name|ts
operator|.
name|getEndRow
argument_list|()
decl_stmt|;
name|count
operator|++
expr_stmt|;
for|for
control|(
init|;
name|count
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
name|TableSplit
name|nextRegion
init|=
operator|(
name|TableSplit
operator|)
name|list
operator|.
name|get
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|long
name|nextRegionSize
init|=
name|nextRegion
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalSize
operator|+
name|nextRegionSize
operator|<=
name|dataSkewThreshold
condition|)
block|{
name|totalSize
operator|=
name|totalSize
operator|+
name|nextRegionSize
expr_stmt|;
name|splitEndKey
operator|=
name|nextRegion
operator|.
name|getEndRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|TableSplit
name|t
init|=
operator|new
name|TableSplit
argument_list|(
name|tableName
argument_list|,
name|splitStartKey
argument_list|,
name|splitEndKey
argument_list|,
name|regionLocation
argument_list|,
name|totalSize
argument_list|)
decl_stmt|;
name|resultList
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resultList
return|;
block|}
comment|/**    * select a split point in the region. The selection of the split point is based on an uniform    * distribution assumption for the keys in a region.    * Here are some examples:    * startKey: aaabcdefg  endKey: aaafff    split point: aaad    * startKey: 111000  endKey: 1125790    split point: 111b    * startKey: 1110  endKey: 1120    split point: 111_    * startKey: binary key { 13, -19, 126, 127 }, endKey: binary key { 13, -19, 127, 0 },    * split point: binary key { 13, -19, 127, -64 }    * Set this function as "public static", make it easier for test.    *    * @param start Start key of the region    * @param end End key of the region    * @param isText It determines to use text key mode or binary key mode    * @return The split point in the region.    */
specifier|public
specifier|static
name|byte
index|[]
name|getSplitKey
parameter_list|(
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|end
parameter_list|,
name|boolean
name|isText
parameter_list|)
block|{
name|byte
name|upperLimitByte
decl_stmt|;
name|byte
name|lowerLimitByte
decl_stmt|;
comment|//Use text mode or binary mode.
if|if
condition|(
name|isText
condition|)
block|{
comment|//The range of text char set in ASCII is [32,126], the lower limit is space and the upper
comment|// limit is '~'.
name|upperLimitByte
operator|=
literal|'~'
expr_stmt|;
name|lowerLimitByte
operator|=
literal|' '
expr_stmt|;
block|}
else|else
block|{
name|upperLimitByte
operator|=
name|Byte
operator|.
name|MAX_VALUE
expr_stmt|;
name|lowerLimitByte
operator|=
name|Byte
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
comment|// For special case
comment|// Example 1 : startkey=null, endkey="hhhqqqwww", splitKey="h"
comment|// Example 2 (text key mode): startKey="ffffaaa", endKey=null, splitkey="f~~~~~~"
if|if
condition|(
name|start
operator|.
name|length
operator|==
literal|0
operator|&&
name|end
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
operator|(
name|lowerLimitByte
operator|+
name|upperLimitByte
operator|)
operator|/
literal|2
argument_list|)
block|}
return|;
block|}
if|if
condition|(
name|start
operator|.
name|length
operator|==
literal|0
operator|&&
name|end
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
name|end
index|[
literal|0
index|]
block|}
return|;
block|}
if|if
condition|(
name|start
operator|.
name|length
operator|!=
literal|0
operator|&&
name|end
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|start
operator|.
name|length
index|]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|start
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|1
init|;
name|k
operator|<
name|start
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|result
index|[
name|k
index|]
operator|=
name|upperLimitByte
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// A list to store bytes in split key
name|List
name|resultBytesList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|int
name|maxLength
init|=
name|start
operator|.
name|length
operator|>
name|end
operator|.
name|length
condition|?
name|start
operator|.
name|length
else|:
name|end
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
comment|//calculate the midpoint byte between the first difference
comment|//for example: "11ae" and "11chw", the midpoint is "11b"
comment|//another example: "11ae" and "11bhw", the first different byte is 'a' and 'b',
comment|// there is no midpoint between 'a' and 'b', so we need to check the next byte.
if|if
condition|(
name|start
index|[
name|i
index|]
operator|==
name|end
index|[
name|i
index|]
condition|)
block|{
name|resultBytesList
operator|.
name|add
argument_list|(
name|start
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|//For special case like: startKey="aaa", endKey="aaaz", splitKey="aaaM"
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|start
operator|.
name|length
condition|)
block|{
name|resultBytesList
operator|.
name|add
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|lowerLimitByte
operator|+
name|end
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
comment|//if the two bytes differ by 1, like ['a','b'], We need to check the next byte to find
comment|// the midpoint.
if|if
condition|(
operator|(
name|int
operator|)
name|end
index|[
name|i
index|]
operator|-
operator|(
name|int
operator|)
name|start
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
comment|//get next byte after the first difference
name|byte
name|startNextByte
init|=
operator|(
name|i
operator|+
literal|1
operator|<
name|start
operator|.
name|length
operator|)
condition|?
name|start
index|[
name|i
operator|+
literal|1
index|]
else|:
name|lowerLimitByte
decl_stmt|;
name|byte
name|endNextByte
init|=
operator|(
name|i
operator|+
literal|1
operator|<
name|end
operator|.
name|length
operator|)
condition|?
name|end
index|[
name|i
operator|+
literal|1
index|]
else|:
name|lowerLimitByte
decl_stmt|;
name|int
name|byteRange
init|=
operator|(
name|upperLimitByte
operator|-
name|startNextByte
operator|)
operator|+
operator|(
name|endNextByte
operator|-
name|lowerLimitByte
operator|)
operator|+
literal|1
decl_stmt|;
name|int
name|halfRange
init|=
name|byteRange
operator|/
literal|2
decl_stmt|;
if|if
condition|(
operator|(
name|int
operator|)
name|startNextByte
operator|+
name|halfRange
operator|>
operator|(
name|int
operator|)
name|upperLimitByte
condition|)
block|{
name|resultBytesList
operator|.
name|add
argument_list|(
name|end
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|resultBytesList
operator|.
name|add
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|startNextByte
operator|+
name|halfRange
operator|-
name|upperLimitByte
operator|+
name|lowerLimitByte
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultBytesList
operator|.
name|add
argument_list|(
name|start
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|resultBytesList
operator|.
name|add
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|startNextByte
operator|+
name|halfRange
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//calculate the midpoint key by the fist different byte (normal case),
comment|// like "11ae" and "11chw", the midpoint is "11b"
name|resultBytesList
operator|.
name|add
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|start
index|[
name|i
index|]
operator|+
name|end
index|[
name|i
index|]
operator|)
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
comment|//transform the List of bytes to byte[]
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
name|resultBytesList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|resultBytesList
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|result
index|[
name|k
index|]
operator|=
operator|(
name|byte
operator|)
name|resultBytesList
operator|.
name|get
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    *    *    * Test if the given region is to be included in the InputSplit while splitting    * the regions of a table.    *<p>    * This optimization is effective when there is a specific reasoning to exclude an entire region from the M-R job,    * (and hence, not contributing to the InputSplit), given the start and end keys of the same.<br>    * Useful when we need to remember the last-processed top record and revisit the [last, current) interval for M-R processing,    * continuously. In addition to reducing InputSplits, reduces the load on the region server as well, due to the ordering of the keys.    *<br>    *<br>    * Note: It is possible that<code>endKey.length() == 0</code> , for the last (recent) region.    *<br>    * Override this method, if you want to bulk exclude regions altogether from M-R. By default, no region is excluded( i.e. all regions are included).    *    *    * @param startKey Start key of the region    * @param endKey End key of the region    * @return true, if this region needs to be included as part of the input (default).    *    */
specifier|protected
name|boolean
name|includeRegionInSplit
parameter_list|(
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|endKey
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Allows subclasses to get the {@link HTable}.    *    * @deprecated    */
annotation|@
name|Deprecated
specifier|protected
name|HTable
name|getHTable
parameter_list|()
block|{
return|return
operator|(
name|HTable
operator|)
name|this
operator|.
name|getTable
argument_list|()
return|;
block|}
comment|/**    * Allows subclasses to get the {@link RegionLocator}.    */
specifier|protected
name|RegionLocator
name|getRegionLocator
parameter_list|()
block|{
if|if
condition|(
name|regionLocator
operator|==
literal|null
condition|)
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
return|return
name|regionLocator
return|;
block|}
comment|/**    * Allows subclasses to get the {@link Table}.    */
specifier|protected
name|Table
name|getTable
parameter_list|()
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
comment|/**    * Allows subclasses to get the {@link Admin}.    */
specifier|protected
name|Admin
name|getAdmin
parameter_list|()
block|{
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
return|return
name|admin
return|;
block|}
comment|/**    * Allows subclasses to set the {@link HTable}.    *    * @param table  The table to get the data from.    * @throws IOException     * @deprecated Use {@link #initializeTable(Connection, TableName)} instead.    */
annotation|@
name|Deprecated
specifier|protected
name|void
name|setHTable
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|regionLocator
operator|=
name|table
operator|.
name|getRegionLocator
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|table
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|this
operator|.
name|admin
operator|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
comment|/**    * Allows subclasses to initialize the table information.    *    * @param connection  The {@link Connection} to the HBase cluster.    * @param tableName  The {@link TableName} of the table to process.     * @throws IOException     */
specifier|protected
name|void
name|initializeTable
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionLocator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
comment|/**    * Gets the scan defining the actual details like columns etc.    *    * @return The internal scan instance.    */
specifier|public
name|Scan
name|getScan
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|scan
operator|==
literal|null
condition|)
name|this
operator|.
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
return|return
name|scan
return|;
block|}
comment|/**    * Sets the scan defining the actual details like columns etc.    *    * @param scan  The scan to set.    */
specifier|public
name|void
name|setScan
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
block|}
comment|/**    * Allows subclasses to set the {@link TableRecordReader}.    *    * @param tableRecordReader A different {@link TableRecordReader}    *   implementation.    */
specifier|protected
name|void
name|setTableRecordReader
parameter_list|(
name|TableRecordReader
name|tableRecordReader
parameter_list|)
block|{
name|this
operator|.
name|tableRecordReader
operator|=
name|tableRecordReader
expr_stmt|;
block|}
comment|/**    * This method will be called when any of the following are referenced, but not yet initialized:    * admin, regionLocator, table. Subclasses will have the opportunity to call    * {@link #initializeTable(Connection, TableName)}    */
specifier|protected
name|void
name|initialize
parameter_list|()
block|{       }
comment|/**    * Close the Table and related objects that were initialized via    * {@link #initializeTable(Connection, TableName)}.    *    * @throws IOException    */
specifier|protected
name|void
name|closeTable
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|(
name|admin
argument_list|,
name|table
argument_list|,
name|regionLocator
argument_list|,
name|connection
argument_list|)
expr_stmt|;
name|admin
operator|=
literal|null
expr_stmt|;
name|table
operator|=
literal|null
expr_stmt|;
name|regionLocator
operator|=
literal|null
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|close
parameter_list|(
name|Closeable
modifier|...
name|closables
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Closeable
name|c
range|:
name|closables
control|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

