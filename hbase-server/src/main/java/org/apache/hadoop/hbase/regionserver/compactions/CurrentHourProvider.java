begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CurrentHourProvider
block|{
specifier|private
name|CurrentHourProvider
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Tick
block|{
specifier|final
name|int
name|currentHour
decl_stmt|;
specifier|final
name|long
name|expirationTimeInMillis
decl_stmt|;
name|Tick
parameter_list|(
name|int
name|currentHour
parameter_list|,
name|long
name|expirationTimeInMillis
parameter_list|)
block|{
name|this
operator|.
name|currentHour
operator|=
name|currentHour
expr_stmt|;
name|this
operator|.
name|expirationTimeInMillis
operator|=
name|expirationTimeInMillis
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Tick
name|nextTick
parameter_list|()
block|{
name|Calendar
name|calendar
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|int
name|currentHour
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
decl_stmt|;
name|moveToNextHour
argument_list|(
name|calendar
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tick
argument_list|(
name|currentHour
argument_list|,
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|moveToNextHour
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
name|calendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|volatile
name|Tick
name|tick
init|=
name|nextTick
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|int
name|getCurrentHour
parameter_list|()
block|{
name|Tick
name|tick
init|=
name|CurrentHourProvider
operator|.
name|tick
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|tick
operator|.
name|expirationTimeInMillis
condition|)
block|{
return|return
name|tick
operator|.
name|currentHour
return|;
block|}
name|CurrentHourProvider
operator|.
name|tick
operator|=
name|tick
operator|=
name|nextTick
argument_list|()
expr_stmt|;
return|return
name|tick
operator|.
name|currentHour
return|;
block|}
block|}
end_class

end_unit

