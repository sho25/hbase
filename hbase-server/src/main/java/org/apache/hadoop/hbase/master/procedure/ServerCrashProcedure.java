begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterWalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureYieldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|StateMachineProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|ServerCrashState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Handle crashed server. This is a port to ProcedureV2 of what used to be euphemistically called  * ServerShutdownHandler.  *  *<p>The procedure flow varies dependent on whether meta is assigned, if we are  * doing distributed log replay versus distributed log splitting, and if we are to split logs at  * all.  *  *<p>This procedure asks that all crashed servers get processed equally; we yield after the  * completion of each successful flow step. We do this so that we do not 'deadlock' waiting on  * a region assignment so we can replay edits which could happen if a region moved there are edits  * on two servers for replay.  *  *<p>TODO: ASSIGN and WAIT_ON_ASSIGN (at least) are not idempotent. Revisit when assign is pv2.  * TODO: We do not have special handling for system tables.  */
end_comment

begin_class
specifier|public
class|class
name|ServerCrashProcedure
extends|extends
name|StateMachineProcedure
argument_list|<
name|MasterProcedureEnv
argument_list|,
name|ServerCrashState
argument_list|>
implements|implements
name|ServerProcedureInterface
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ServerCrashProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Configuration key to set how long to wait in ms doing a quick check on meta state.    */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_SHORT_WAIT_ON_META
init|=
literal|"hbase.master.servercrash.short.wait.on.meta.ms"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHORT_WAIT_ON_META
init|=
literal|1000
decl_stmt|;
comment|/**    * Configuration key to set how many retries to cycle before we give up on meta.    * Each attempt will wait at least {@link #KEY_SHORT_WAIT_ON_META} milliseconds.    */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_RETRIES_ON_META
init|=
literal|"hbase.master.servercrash.meta.retries"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RETRIES_ON_META
init|=
literal|10
decl_stmt|;
comment|/**    * Configuration key to set how long to wait in ms on regions in transition.    */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_WAIT_ON_RIT
init|=
literal|"hbase.master.servercrash.wait.on.rit.ms"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_WAIT_ON_RIT
init|=
literal|30000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|META_REGION_SET
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|META_REGION_SET
operator|.
name|add
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
block|}
comment|/**    * Name of the crashed server to process.    */
specifier|private
name|ServerName
name|serverName
decl_stmt|;
comment|/**    * Whether DeadServer knows that we are processing it.    */
specifier|private
name|boolean
name|notifiedDeadServer
init|=
literal|false
decl_stmt|;
comment|/**    * Regions that were on the crashed server.    */
specifier|private
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsOnCrashedServer
decl_stmt|;
comment|/**    * Regions assigned. Usually some subset of {@link #regionsOnCrashedServer}.    */
specifier|private
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsAssigned
decl_stmt|;
specifier|private
name|boolean
name|distributedLogReplay
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|carryingMeta
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|shouldSplitWal
decl_stmt|;
comment|/**    * Cycles on same state. Good for figuring if we are stuck.    */
specifier|private
name|int
name|cycles
init|=
literal|0
decl_stmt|;
comment|/**    * Ordinal of the previous state. So we can tell if we are progressing or not. TODO: if useful,    * move this back up into StateMachineProcedure    */
specifier|private
name|int
name|previousState
decl_stmt|;
comment|/**    * Call this constructor queuing up a Procedure.    * @param serverName Name of the crashed server.    * @param shouldSplitWal True if we should split WALs as part of crashed server processing.    * @param carryingMeta True if carrying hbase:meta table region.    */
specifier|public
name|ServerCrashProcedure
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|boolean
name|shouldSplitWal
parameter_list|,
specifier|final
name|boolean
name|carryingMeta
parameter_list|)
block|{
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
name|this
operator|.
name|shouldSplitWal
operator|=
name|shouldSplitWal
expr_stmt|;
name|this
operator|.
name|carryingMeta
operator|=
name|carryingMeta
expr_stmt|;
name|this
operator|.
name|setOwner
argument_list|(
name|env
operator|.
name|getRequestUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Used when deserializing from a procedure store; we'll construct one of these then call    * {@link #deserializeStateData(InputStream)}. Do not use directly.    */
specifier|public
name|ServerCrashProcedure
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|throwProcedureYieldException
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|ProcedureYieldException
block|{
name|String
name|logMsg
init|=
name|msg
operator|+
literal|"; cycle="
operator|+
name|this
operator|.
name|cycles
operator|+
literal|", running for "
operator|+
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
comment|// The procedure executor logs ProcedureYieldException at trace level. For now, log these
comment|// yields for server crash processing at DEBUG. Revisit when stable.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
name|logMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureYieldException
argument_list|(
name|logMsg
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|Flow
name|executeFromState
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerCrashState
name|state
parameter_list|)
throws|throws
name|ProcedureYieldException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
comment|// Keep running count of cycles
if|if
condition|(
name|state
operator|.
name|ordinal
argument_list|()
operator|!=
name|this
operator|.
name|previousState
condition|)
block|{
name|this
operator|.
name|previousState
operator|=
name|state
operator|.
name|ordinal
argument_list|()
expr_stmt|;
name|this
operator|.
name|cycles
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|cycles
operator|++
expr_stmt|;
block|}
name|MasterServices
name|services
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
decl_stmt|;
comment|// Is master fully online? If not, yield. No processing of servers unless master is up
if|if
condition|(
operator|!
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|isFailoverCleanupDone
argument_list|()
condition|)
block|{
name|throwProcedureYieldException
argument_list|(
literal|"Waiting on master failover to complete"
argument_list|)
expr_stmt|;
block|}
comment|// HBASE-14802
comment|// If we have not yet notified that we are processing a dead server, we should do now.
if|if
condition|(
operator|!
name|notifiedDeadServer
condition|)
block|{
name|services
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|notifyServer
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|notifiedDeadServer
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SERVER_CRASH_START
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Start processing crashed "
operator|+
name|this
operator|.
name|serverName
argument_list|)
expr_stmt|;
name|start
argument_list|(
name|env
argument_list|)
expr_stmt|;
comment|// If carrying meta, process it first. Else, get list of regions on crashed server.
if|if
condition|(
name|this
operator|.
name|carryingMeta
condition|)
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_PROCESS_META
argument_list|)
expr_stmt|;
else|else
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_GET_REGIONS
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERVER_CRASH_GET_REGIONS
case|:
comment|// If hbase:meta is not assigned, yield.
if|if
condition|(
operator|!
name|isMetaAssignedQuickTest
argument_list|(
name|env
argument_list|)
condition|)
block|{
comment|// isMetaAssignedQuickTest does not really wait. Let's delay a little before
comment|// another round of execution.
name|long
name|wait
init|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|KEY_SHORT_WAIT_ON_META
argument_list|,
name|DEFAULT_SHORT_WAIT_ON_META
argument_list|)
decl_stmt|;
name|wait
operator|=
name|wait
operator|/
literal|10
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|wait
argument_list|)
expr_stmt|;
name|throwProcedureYieldException
argument_list|(
literal|"Waiting on hbase:meta assignment"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|regionsOnCrashedServer
operator|=
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getServerRegions
argument_list|(
name|this
operator|.
name|serverName
argument_list|)
expr_stmt|;
comment|// Where to go next? Depends on whether we should split logs at all or if we should do
comment|// distributed log splitting (DLS) vs distributed log replay (DLR).
if|if
condition|(
operator|!
name|this
operator|.
name|shouldSplitWal
condition|)
block|{
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_ASSIGN
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|distributedLogReplay
condition|)
block|{
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_PREPARE_LOG_REPLAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_SPLIT_LOGS
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SERVER_CRASH_PROCESS_META
case|:
comment|// If we fail processing hbase:meta, yield.
if|if
condition|(
operator|!
name|processMeta
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|throwProcedureYieldException
argument_list|(
literal|"Waiting on regions-in-transition to clear"
argument_list|)
expr_stmt|;
block|}
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_GET_REGIONS
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERVER_CRASH_PREPARE_LOG_REPLAY
case|:
name|prepareLogReplay
argument_list|(
name|env
argument_list|,
name|this
operator|.
name|regionsOnCrashedServer
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_ASSIGN
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERVER_CRASH_SPLIT_LOGS
case|:
name|splitLogs
argument_list|(
name|env
argument_list|)
expr_stmt|;
comment|// If DLR, go to FINISH. Otherwise, if DLS, go to SERVER_CRASH_CALC_REGIONS_TO_ASSIGN
if|if
condition|(
name|this
operator|.
name|distributedLogReplay
condition|)
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_FINISH
argument_list|)
expr_stmt|;
else|else
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_ASSIGN
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERVER_CRASH_ASSIGN
case|:
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssign
init|=
name|calcRegionsToAssign
argument_list|(
name|env
argument_list|)
decl_stmt|;
comment|// Assign may not be idempotent. SSH used to requeue the SSH if we got an IOE assigning
comment|// which is what we are mimicing here but it looks prone to double assignment if assign
comment|// fails midway. TODO: Test.
comment|// If no regions to assign, skip assign and skip to the finish.
name|boolean
name|regions
init|=
name|regionsToAssign
operator|!=
literal|null
operator|&&
operator|!
name|regionsToAssign
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|regions
condition|)
block|{
name|this
operator|.
name|regionsAssigned
operator|=
name|regionsToAssign
expr_stmt|;
if|if
condition|(
operator|!
name|assign
argument_list|(
name|env
argument_list|,
name|regionsToAssign
argument_list|)
condition|)
block|{
name|throwProcedureYieldException
argument_list|(
literal|"Failed assign; will retry"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|shouldSplitWal
operator|&&
name|distributedLogReplay
condition|)
block|{
comment|// Take this route even if there are apparently no regions assigned. This may be our
comment|// second time through here; i.e. we assigned and crashed just about here. On second
comment|// time through, there will be no regions because we assigned them in the previous step.
comment|// Even though no regions, we need to go through here to clean up the DLR zk markers.
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_WAIT_ON_ASSIGN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_FINISH
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SERVER_CRASH_WAIT_ON_ASSIGN
case|:
comment|// TODO: The list of regionsAssigned may be more than we actually assigned. See down in
comment|// AM #1629 around 'if (regionStates.wasRegionOnDeadServer(encodedName)) {' where where we
comment|// will skip assigning a region because it is/was on a dead server. Should never happen!
comment|// It was on this server. Worst comes to worst, we'll still wait here till other server is
comment|// processed.
comment|// If the wait on assign failed, yield -- if we have regions to assign.
if|if
condition|(
name|this
operator|.
name|regionsAssigned
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|regionsAssigned
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|waitOnAssign
argument_list|(
name|env
argument_list|,
name|this
operator|.
name|regionsAssigned
argument_list|)
condition|)
block|{
name|throwProcedureYieldException
argument_list|(
literal|"Waiting on region assign"
argument_list|)
expr_stmt|;
block|}
block|}
name|setNextState
argument_list|(
name|ServerCrashState
operator|.
name|SERVER_CRASH_SPLIT_LOGS
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERVER_CRASH_FINISH
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished processing of crashed "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|services
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|finish
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed serverName="
operator|+
name|this
operator|.
name|serverName
operator|+
literal|", state="
operator|+
name|state
operator|+
literal|"; retry"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO: Make executor allow IEs coming up out of execute.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted serverName="
operator|+
name|this
operator|.
name|serverName
operator|+
literal|", state="
operator|+
name|state
operator|+
literal|"; retry"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
block|}
comment|/**    * Start processing of crashed server. In here we'll just set configs. and return.    * @param env    * @throws IOException    */
specifier|private
name|void
name|start
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterWalManager
name|mwm
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterWalManager
argument_list|()
decl_stmt|;
comment|// Set recovery mode late. This is what the old ServerShutdownHandler used do.
name|mwm
operator|.
name|setLogRecoveryMode
argument_list|()
expr_stmt|;
name|this
operator|.
name|distributedLogReplay
operator|=
name|mwm
operator|.
name|getLogRecoveryMode
argument_list|()
operator|==
name|RecoveryMode
operator|.
name|LOG_REPLAY
expr_stmt|;
block|}
comment|/**    * @param env    * @return False if we fail to assign and split logs on meta ('process').    * @throws IOException    * @throws InterruptedException    */
specifier|private
name|boolean
name|processMeta
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing hbase:meta that was on "
operator|+
name|this
operator|.
name|serverName
argument_list|)
expr_stmt|;
name|MasterWalManager
name|mwm
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterWalManager
argument_list|()
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|HRegionInfo
name|metaHRI
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|shouldSplitWal
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|distributedLogReplay
condition|)
block|{
name|prepareLogReplay
argument_list|(
name|env
argument_list|,
name|META_REGION_SET
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: Matteo. We BLOCK here but most important thing to be doing at this moment.
name|mwm
operator|.
name|splitMetaLog
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|logSplit
argument_list|(
name|metaHRI
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Assign meta if still carrying it. Check again: region may be assigned because of RIT timeout
name|boolean
name|processed
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|am
operator|.
name|isCarryingMeta
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
comment|// TODO: May block here if hard time figuring state of meta.
name|am
operator|.
name|regionOffline
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
name|verifyAndAssignMetaWithRetries
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|shouldSplitWal
operator|&&
name|distributedLogReplay
condition|)
block|{
name|int
name|timeout
init|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|KEY_WAIT_ON_RIT
argument_list|,
name|DEFAULT_WAIT_ON_RIT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|waitOnRegionToClearRegionsInTransition
argument_list|(
name|am
argument_list|,
name|metaHRI
argument_list|,
name|timeout
argument_list|)
condition|)
block|{
name|processed
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: Matteo. We BLOCK here but most important thing to be doing at this moment.
name|mwm
operator|.
name|splitMetaLog
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|processed
return|;
block|}
comment|/**    * @return True if region cleared RIT, else false if we timed out waiting.    * @throws InterruptedIOException    */
specifier|private
name|boolean
name|waitOnRegionToClearRegionsInTransition
parameter_list|(
name|AssignmentManager
name|am
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|int
name|timeout
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|am
operator|.
name|waitOnRegionToClearRegionsInTransition
argument_list|(
name|hri
argument_list|,
name|timeout
argument_list|)
condition|)
block|{
comment|// Wait here is to avoid log replay hits current dead server and incur a RPC timeout
comment|// when replay happens before region assignment completes.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Region "
operator|+
name|hri
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" didn't complete assignment in time"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Caught "
operator|+
name|ie
operator|+
literal|" during waitOnRegionToClearRegionsInTransition for "
operator|+
name|hri
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|prepareLogReplay
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Mark "
operator|+
name|size
argument_list|(
name|this
operator|.
name|regionsOnCrashedServer
argument_list|)
operator|+
literal|" regions-in-recovery from "
operator|+
name|this
operator|.
name|serverName
argument_list|)
expr_stmt|;
block|}
name|MasterWalManager
name|mwm
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterWalManager
argument_list|()
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|mwm
operator|.
name|prepareLogReplay
argument_list|(
name|this
operator|.
name|serverName
argument_list|,
name|regions
argument_list|)
expr_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|logSplit
argument_list|(
name|this
operator|.
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|splitLogs
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Splitting logs from "
operator|+
name|serverName
operator|+
literal|"; region count="
operator|+
name|size
argument_list|(
name|this
operator|.
name|regionsOnCrashedServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MasterWalManager
name|mwm
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterWalManager
argument_list|()
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
comment|// TODO: For Matteo. Below BLOCKs!!!! Redo so can relinquish executor while it is running.
name|mwm
operator|.
name|splitLog
argument_list|(
name|this
operator|.
name|serverName
argument_list|)
expr_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|logSplit
argument_list|(
name|this
operator|.
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|static
name|int
name|size
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
parameter_list|)
block|{
return|return
name|hris
operator|==
literal|null
condition|?
literal|0
else|:
name|hris
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Figure out what we need to assign. Should be idempotent.    * @param env    * @return List of calculated regions to assign; may be empty or null.    * @throws IOException    */
specifier|private
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|calcRegionsToAssign
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|AssignmentManager
name|am
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssignAggregator
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|replicaCount
init|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|META_REPLICAS_NUM
argument_list|,
name|HConstants
operator|.
name|DEFAULT_META_REPLICA_NUM
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|replicaCount
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|metaHri
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|am
operator|.
name|isCarryingMetaReplica
argument_list|(
name|this
operator|.
name|serverName
argument_list|,
name|metaHri
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reassigning meta replica"
operator|+
name|metaHri
operator|+
literal|" that was on "
operator|+
name|this
operator|.
name|serverName
argument_list|)
expr_stmt|;
block|}
name|regionsToAssignAggregator
operator|.
name|add
argument_list|(
name|metaHri
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Clean out anything in regions in transition.
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsInTransition
init|=
name|am
operator|.
name|cleanOutCrashedServerReferences
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reassigning "
operator|+
name|size
argument_list|(
name|this
operator|.
name|regionsOnCrashedServer
argument_list|)
operator|+
literal|" region(s) that "
operator|+
operator|(
name|serverName
operator|==
literal|null
condition|?
literal|"null"
else|:
name|serverName
operator|)
operator|+
literal|" was carrying (and "
operator|+
name|regionsInTransition
operator|.
name|size
argument_list|()
operator|+
literal|" regions(s) that were opening on this server)"
argument_list|)
expr_stmt|;
block|}
name|regionsToAssignAggregator
operator|.
name|addAll
argument_list|(
name|regionsInTransition
argument_list|)
expr_stmt|;
comment|// Iterate regions that were on this server and figure which of these we need to reassign
if|if
condition|(
name|this
operator|.
name|regionsOnCrashedServer
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|regionsOnCrashedServer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|this
operator|.
name|regionsOnCrashedServer
control|)
block|{
if|if
condition|(
name|regionsInTransition
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
condition|)
continue|continue;
name|String
name|encodedName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|am
operator|.
name|acquireRegionLock
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
try|try
block|{
name|RegionState
name|rit
init|=
name|regionStates
operator|.
name|getRegionTransitionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|processDeadRegion
argument_list|(
name|hri
argument_list|,
name|am
argument_list|)
condition|)
block|{
name|ServerName
name|addressFromAM
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressFromAM
operator|!=
literal|null
operator|&&
operator|!
name|addressFromAM
operator|.
name|equals
argument_list|(
name|this
operator|.
name|serverName
argument_list|)
condition|)
block|{
comment|// If this region is in transition on the dead server, it must be
comment|// opening or pending_open, which should have been covered by
comment|// AM#cleanOutCrashedServerReferences
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip assigning "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because opened on "
operator|+
name|addressFromAM
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|rit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rit
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|rit
operator|.
name|isOnServer
argument_list|(
name|this
operator|.
name|serverName
argument_list|)
condition|)
block|{
comment|// Skip regions that are in transition on other server
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip assigning region in transition on other server"
operator|+
name|rit
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Reassigning region "
operator|+
name|rit
operator|+
literal|" and clearing zknode if exists"
argument_list|)
expr_stmt|;
name|regionStates
operator|.
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OFFLINE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|regionStates
operator|.
name|isRegionInState
argument_list|(
name|hri
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|SPLITTING_NEW
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|MERGING_NEW
argument_list|)
condition|)
block|{
name|regionStates
operator|.
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OFFLINE
argument_list|)
expr_stmt|;
block|}
name|regionsToAssignAggregator
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
comment|// TODO: The below else if is different in branch-1 from master branch.
block|}
elseif|else
if|if
condition|(
name|rit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|rit
operator|.
name|isClosing
argument_list|()
operator|||
name|rit
operator|.
name|isFailedClose
argument_list|()
operator|||
name|rit
operator|.
name|isOffline
argument_list|()
operator|)
operator|&&
name|am
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLING
argument_list|)
operator|||
name|am
operator|.
name|getReplicasToClose
argument_list|()
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
condition|)
block|{
comment|// If the table was partially disabled and the RS went down, we should clear the
comment|// RIT and remove the node for the region.
comment|// The rit that we use may be stale in case the table was in DISABLING state
comment|// but though we did assign we will not be clearing the znode in CLOSING state.
comment|// Doing this will have no harm. See HBASE-5927
name|regionStates
operator|.
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OFFLINE
argument_list|)
expr_stmt|;
name|am
operator|.
name|offlineDisabledRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"THIS SHOULD NOT HAPPEN: unexpected region in transition "
operator|+
name|rit
operator|+
literal|" not to be assigned by SSH of server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|regionsToAssignAggregator
return|;
block|}
specifier|private
name|boolean
name|assign
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|AssignmentManager
name|am
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
try|try
block|{
name|am
operator|.
name|assign
argument_list|(
name|hris
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught "
operator|+
name|ie
operator|+
literal|" during round-robin assignment"
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught "
operator|+
name|ioe
operator|+
literal|" during region assignment, will retry"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|waitOnAssign
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|int
name|timeout
init|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|KEY_WAIT_ON_RIT
argument_list|,
name|DEFAULT_WAIT_ON_RIT
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|hris
control|)
block|{
comment|// TODO: Blocks here.
if|if
condition|(
operator|!
name|waitOnRegionToClearRegionsInTransition
argument_list|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
argument_list|,
name|hri
argument_list|,
name|timeout
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollbackState
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerCrashState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Can't rollback.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|ServerCrashState
name|getState
parameter_list|(
name|int
name|stateId
parameter_list|)
block|{
return|return
name|ServerCrashState
operator|.
name|valueOf
argument_list|(
name|stateId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getStateId
parameter_list|(
name|ServerCrashState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|getNumber
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ServerCrashState
name|getInitialState
parameter_list|()
block|{
return|return
name|ServerCrashState
operator|.
name|SERVER_CRASH_START
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
comment|// TODO
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LockState
name|acquireLock
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
comment|// TODO: Put this BACK AFTER AMv2 goes in!!!!
comment|// if (env.waitFailoverCleanup(this)) return LockState.LOCK_EVENT_WAIT;
if|if
condition|(
name|env
operator|.
name|waitServerCrashProcessingEnabled
argument_list|(
name|this
argument_list|)
condition|)
return|return
name|LockState
operator|.
name|LOCK_EVENT_WAIT
return|;
if|if
condition|(
name|env
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|waitServerExclusiveLock
argument_list|(
name|this
argument_list|,
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|LockState
operator|.
name|LOCK_EVENT_WAIT
return|;
block|}
return|return
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseLock
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|env
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|wakeServerExclusiveLock
argument_list|(
name|this
argument_list|,
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toStringClassDetails
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" serverName="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|serverName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", shouldSplitWal="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shouldSplitWal
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", carryingMeta="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|carryingMeta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serializeStateData
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|MasterProcedureProtos
operator|.
name|ServerCrashStateData
operator|.
name|Builder
name|state
init|=
name|MasterProcedureProtos
operator|.
name|ServerCrashStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setServerName
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|this
operator|.
name|serverName
argument_list|)
argument_list|)
operator|.
name|setDistributedLogReplay
argument_list|(
name|this
operator|.
name|distributedLogReplay
argument_list|)
operator|.
name|setCarryingMeta
argument_list|(
name|this
operator|.
name|carryingMeta
argument_list|)
operator|.
name|setShouldSplitWal
argument_list|(
name|this
operator|.
name|shouldSplitWal
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|regionsOnCrashedServer
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|regionsOnCrashedServer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|this
operator|.
name|regionsOnCrashedServer
control|)
block|{
name|state
operator|.
name|addRegionsOnCrashedServer
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|regionsAssigned
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|regionsAssigned
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|this
operator|.
name|regionsAssigned
control|)
block|{
name|state
operator|.
name|addRegionsAssigned
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|state
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deserializeStateData
parameter_list|(
specifier|final
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|MasterProcedureProtos
operator|.
name|ServerCrashStateData
name|state
init|=
name|MasterProcedureProtos
operator|.
name|ServerCrashStateData
operator|.
name|parseDelimitedFrom
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|this
operator|.
name|serverName
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|state
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|distributedLogReplay
operator|=
name|state
operator|.
name|hasDistributedLogReplay
argument_list|()
condition|?
name|state
operator|.
name|getDistributedLogReplay
argument_list|()
else|:
literal|false
expr_stmt|;
name|this
operator|.
name|carryingMeta
operator|=
name|state
operator|.
name|hasCarryingMeta
argument_list|()
condition|?
name|state
operator|.
name|getCarryingMeta
argument_list|()
else|:
literal|false
expr_stmt|;
comment|// shouldSplitWAL has a default over in pb so this invocation will always work.
name|this
operator|.
name|shouldSplitWal
operator|=
name|state
operator|.
name|getShouldSplitWal
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|state
operator|.
name|getRegionsOnCrashedServerCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|regionsOnCrashedServer
operator|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|ri
range|:
name|state
operator|.
name|getRegionsOnCrashedServerList
argument_list|()
control|)
block|{
name|this
operator|.
name|regionsOnCrashedServer
operator|.
name|add
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|ri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|=
name|state
operator|.
name|getRegionsAssignedCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|regionsAssigned
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|ri
range|:
name|state
operator|.
name|getRegionsOnCrashedServerList
argument_list|()
control|)
block|{
name|this
operator|.
name|regionsAssigned
operator|.
name|add
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|ri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Process a dead region from a dead RS. Checks if the region is disabled or    * disabling or if the region has a partially completed split.    * @param hri    * @param assignmentManager    * @return Returns true if specified region should be assigned, false if not.    * @throws IOException    */
specifier|private
specifier|static
name|boolean
name|processDeadRegion
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|,
name|AssignmentManager
name|assignmentManager
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|tablePresent
init|=
name|assignmentManager
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTablePresent
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tablePresent
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The table "
operator|+
name|hri
operator|.
name|getTable
argument_list|()
operator|+
literal|" was deleted.  Hence not proceeding."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// If table is not disabled but the region is offlined,
name|boolean
name|disabled
init|=
name|assignmentManager
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|disabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The table "
operator|+
name|hri
operator|.
name|getTable
argument_list|()
operator|+
literal|" was disabled.  Hence not proceeding."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|hri
operator|.
name|isOffline
argument_list|()
operator|&&
name|hri
operator|.
name|isSplit
argument_list|()
condition|)
block|{
comment|// HBASE-7721: Split parent and daughters are inserted into hbase:meta as an atomic operation.
comment|// If the meta scanner saw the parent split, then it should see the daughters as assigned
comment|// to the dead server. We don't have to do anything.
return|return
literal|false
return|;
block|}
name|boolean
name|disabling
init|=
name|assignmentManager
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLING
argument_list|)
decl_stmt|;
if|if
condition|(
name|disabling
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The table "
operator|+
name|hri
operator|.
name|getTable
argument_list|()
operator|+
literal|" is disabled.  Hence not assigning region"
operator|+
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * If hbase:meta is not assigned already, assign.    * @throws IOException    */
specifier|private
name|void
name|verifyAndAssignMetaWithRetries
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterServices
name|services
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
decl_stmt|;
name|int
name|iTimes
init|=
name|services
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|KEY_RETRIES_ON_META
argument_list|,
name|DEFAULT_RETRIES_ON_META
argument_list|)
decl_stmt|;
comment|// Just reuse same time as we have for short wait on meta. Adding another config is overkill.
name|long
name|waitTime
init|=
name|services
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|KEY_SHORT_WAIT_ON_META
argument_list|,
name|DEFAULT_SHORT_WAIT_ON_META
argument_list|)
decl_stmt|;
name|int
name|iFlag
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|verifyAndAssignMeta
argument_list|(
name|env
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|services
operator|.
name|abort
argument_list|(
literal|"In server shutdown processing, assigning meta"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Aborting"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|iFlag
operator|>=
name|iTimes
condition|)
block|{
name|services
operator|.
name|abort
argument_list|(
literal|"verifyAndAssignMeta failed after"
operator|+
name|iTimes
operator|+
literal|" retries, aborting"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Aborting"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted when is the thread sleep"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e1
argument_list|)
throw|;
block|}
name|iFlag
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/**    * If hbase:meta is not assigned already, assign.    * @throws InterruptedException    * @throws IOException    * @throws KeeperException    */
specifier|private
name|void
name|verifyAndAssignMeta
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|KeeperException
block|{
name|MasterServices
name|services
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isMetaAssignedQuickTest
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|assignMeta
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|serverName
operator|.
name|equals
argument_list|(
name|services
operator|.
name|getMetaTableLocator
argument_list|()
operator|.
name|getMetaRegionLocation
argument_list|(
name|services
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"hbase:meta is onlined on the dead server "
operator|+
name|this
operator|.
name|serverName
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip assigning hbase:meta because it is online at "
operator|+
name|services
operator|.
name|getMetaTableLocator
argument_list|()
operator|.
name|getMetaRegionLocation
argument_list|(
name|services
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A quick test that hbase:meta is assigned; blocks for short time only.    * @return True if hbase:meta location is available and verified as good.    * @throws InterruptedException    * @throws IOException    */
specifier|private
name|boolean
name|isMetaAssignedQuickTest
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|ZooKeeperWatcher
name|zkw
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|MetaTableLocator
name|mtl
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMetaTableLocator
argument_list|()
decl_stmt|;
name|boolean
name|metaAssigned
init|=
literal|false
decl_stmt|;
comment|// Is hbase:meta location available yet?
if|if
condition|(
name|mtl
operator|.
name|isLocationAvailable
argument_list|(
name|zkw
argument_list|)
condition|)
block|{
name|ClusterConnection
name|connection
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getClusterConnection
argument_list|()
decl_stmt|;
comment|// Is hbase:meta location good yet?
name|long
name|timeout
init|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|KEY_SHORT_WAIT_ON_META
argument_list|,
name|DEFAULT_SHORT_WAIT_ON_META
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtl
operator|.
name|verifyMetaRegionLocation
argument_list|(
name|connection
argument_list|,
name|zkw
argument_list|,
name|timeout
argument_list|)
condition|)
block|{
name|metaAssigned
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|metaAssigned
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverName
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMetaTableRegion
parameter_list|()
block|{
return|return
name|this
operator|.
name|carryingMeta
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerOperationType
name|getServerOperationType
parameter_list|()
block|{
return|return
name|ServerOperationType
operator|.
name|CRASH_HANDLER
return|;
block|}
comment|/**    * For this procedure, yield at end of each successful flow step so that all crashed servers    * can make progress rather than do the default which has each procedure running to completion    * before we move to the next. For crashed servers, especially if running with distributed log    * replay, we will want all servers to come along; we do not want the scenario where a server is    * stuck waiting for regions to online so it can replay edits.    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isYieldBeforeExecuteFromState
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerCrashState
name|state
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldWaitClientAck
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
comment|// The operation is triggered internally on the server
comment|// the client does not know about this procedure.
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

