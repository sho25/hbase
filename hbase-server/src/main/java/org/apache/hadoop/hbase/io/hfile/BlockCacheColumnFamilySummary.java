begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * BlockCacheColumnFamilySummary represents a summary of the blockCache usage   * at Table/ColumnFamily granularity.  *<br><br>  * As ColumnFamilies are owned by Tables, a summary by ColumnFamily implies that  * the owning Table is included in the summarization.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BlockCacheColumnFamilySummary
implements|implements
name|Writable
implements|,
name|Comparable
argument_list|<
name|BlockCacheColumnFamilySummary
argument_list|>
block|{
specifier|private
name|String
name|table
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|columnFamily
init|=
literal|""
decl_stmt|;
specifier|private
name|int
name|blocks
decl_stmt|;
specifier|private
name|long
name|heapSize
decl_stmt|;
comment|/**    * Default constructor for Writable    */
specifier|public
name|BlockCacheColumnFamilySummary
parameter_list|()
block|{        }
comment|/**    *     * @param table table    * @param columnFamily columnFamily    */
specifier|public
name|BlockCacheColumnFamilySummary
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|columnFamily
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|columnFamily
operator|=
name|columnFamily
expr_stmt|;
block|}
comment|/**    *     * @return table    */
specifier|public
name|String
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
comment|/**    *     * @param table (table that owns the cached block)    */
specifier|public
name|void
name|setTable
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
comment|/**    *     * @return columnFamily    */
specifier|public
name|String
name|getColumnFamily
parameter_list|()
block|{
return|return
name|columnFamily
return|;
block|}
comment|/**    *     * @param columnFamily (columnFamily that owns the cached block)    */
specifier|public
name|void
name|setColumnFamily
parameter_list|(
name|String
name|columnFamily
parameter_list|)
block|{
name|this
operator|.
name|columnFamily
operator|=
name|columnFamily
expr_stmt|;
block|}
comment|/**    *     * @return blocks in the cache    */
specifier|public
name|int
name|getBlocks
parameter_list|()
block|{
return|return
name|blocks
return|;
block|}
comment|/**    *     * @param blocks in the cache    */
specifier|public
name|void
name|setBlocks
parameter_list|(
name|int
name|blocks
parameter_list|)
block|{
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
block|}
comment|/**    *     * @return heapSize in the cache    */
specifier|public
name|long
name|getHeapSize
parameter_list|()
block|{
return|return
name|heapSize
return|;
block|}
comment|/**    * Increments the number of blocks in the cache for this entry    */
specifier|public
name|void
name|incrementBlocks
parameter_list|()
block|{
name|this
operator|.
name|blocks
operator|++
expr_stmt|;
block|}
comment|/**    *     * @param heapSize to increment    */
specifier|public
name|void
name|incrementHeapSize
parameter_list|(
name|long
name|heapSize
parameter_list|)
block|{
name|this
operator|.
name|heapSize
operator|=
name|this
operator|.
name|heapSize
operator|+
name|heapSize
expr_stmt|;
block|}
comment|/**    *     * @param heapSize (total heapSize for the table/CF)    */
specifier|public
name|void
name|setHeapSize
parameter_list|(
name|long
name|heapSize
parameter_list|)
block|{
name|this
operator|.
name|heapSize
operator|=
name|heapSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|table
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|columnFamily
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|blocks
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|heapSize
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|columnFamily
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|heapSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|columnFamily
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|columnFamily
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|table
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|table
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|BlockCacheColumnFamilySummary
name|other
init|=
operator|(
name|BlockCacheColumnFamilySummary
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|columnFamily
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|columnFamily
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnFamily
operator|.
name|equals
argument_list|(
name|other
operator|.
name|columnFamily
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|table
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|table
operator|.
name|equals
argument_list|(
name|other
operator|.
name|table
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BlockCacheSummaryEntry [table="
operator|+
name|table
operator|+
literal|", columnFamily="
operator|+
name|columnFamily
operator|+
literal|", blocks="
operator|+
name|blocks
operator|+
literal|", heapSize="
operator|+
name|heapSize
operator|+
literal|"]"
return|;
block|}
comment|/**    * Construct a BlockCacheSummaryEntry from a full StoreFile Path    *<br><br>    * The path is expected to be in the format of...    *<pre>    * hdfs://localhost:51169/user/userid/-ROOT-/70236052/info/3944417774205889744    *</pre>    * ... where:<br>    *  '-ROOT-' = Table<br>    * '70236052' = Region<br>    * 'info' = ColumnFamily<br>    * '3944417774205889744' = StoreFile    *     * @param path (full StoreFile Path)    * @return BlockCacheSummaryEntry    */
specifier|public
specifier|static
name|BlockCacheColumnFamilySummary
name|createFromStoreFilePath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// The full path will look something like this...
comment|// hdfs://localhost:51169/user/doug.meil/-ROOT-/70236052/info/3944417774205889744
comment|//                                        tbl    region   cf   sf
name|String
name|sp
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|s
index|[]
init|=
name|sp
operator|.
name|split
argument_list|(
literal|"\\/"
argument_list|)
decl_stmt|;
name|BlockCacheColumnFamilySummary
name|bcse
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
operator|>=
literal|4
condition|)
block|{
comment|// why 4?   StoreFile, CF, Region, Table
name|String
name|table
init|=
name|s
index|[
name|s
operator|.
name|length
operator|-
literal|4
index|]
decl_stmt|;
comment|// 4th from the end
name|String
name|cf
init|=
name|s
index|[
name|s
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
comment|// 2nd from the end
name|bcse
operator|=
operator|new
name|BlockCacheColumnFamilySummary
argument_list|(
name|table
argument_list|,
name|cf
argument_list|)
expr_stmt|;
block|}
return|return
name|bcse
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|BlockCacheColumnFamilySummary
name|o
parameter_list|)
block|{
name|int
name|i
init|=
name|table
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
return|return
name|columnFamily
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getColumnFamily
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new BlockCacheSummaryEntry    *     * @param e BlockCacheSummaryEntry    * @return new BlockCacheSummaryEntry    */
specifier|public
specifier|static
name|BlockCacheColumnFamilySummary
name|create
parameter_list|(
name|BlockCacheColumnFamilySummary
name|e
parameter_list|)
block|{
name|BlockCacheColumnFamilySummary
name|e2
init|=
operator|new
name|BlockCacheColumnFamilySummary
argument_list|()
decl_stmt|;
name|e2
operator|.
name|setTable
argument_list|(
name|e
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|e2
operator|.
name|setColumnFamily
argument_list|(
name|e
operator|.
name|getColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|e2
return|;
block|}
block|}
end_class

end_unit

