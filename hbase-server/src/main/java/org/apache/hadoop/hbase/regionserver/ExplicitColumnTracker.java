begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanQueryMatcher
operator|.
name|MatchCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * This class is used for the tracking and enforcement of columns and numbers  * of versions during the course of a Get or Scan operation, when explicit  * column qualifiers have been asked for in the query.  *  * With a little magic (see {@link ScanQueryMatcher}), we can use this matcher  * for both scans and gets.  The main difference is 'next' and 'done' collapse  * for the scan case (since we see all columns in order), and we only reset  * between rows.  *  *<p>  * This class is utilized by {@link ScanQueryMatcher} mainly through two methods:  *<ul><li>{@link #checkColumn} is called when a Put satisfies all other  * conditions of the query.  *<ul><li>{@link #getNextRowOrNextColumn} is called whenever ScanQueryMatcher  * believes that the current column should be skipped (by timestamp, filter etc.)  *<p>  * These two methods returns a   * {@link org.apache.hadoop.hbase.regionserver.ScanQueryMatcher.MatchCode}  * to define what action should be taken.  *<p>  * This class is NOT thread-safe as queries are never multi-threaded  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ExplicitColumnTracker
implements|implements
name|ColumnTracker
block|{
specifier|private
specifier|final
name|int
name|maxVersions
decl_stmt|;
specifier|private
specifier|final
name|int
name|minVersions
decl_stmt|;
comment|/**   * Contains the list of columns that the ExplicitColumnTracker is tracking.   * Each ColumnCount instance also tracks how many versions of the requested   * column have been returned.   */
specifier|private
specifier|final
name|ColumnCount
index|[]
name|columns
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
name|ColumnCount
name|column
decl_stmt|;
comment|/** Keeps track of the latest timestamp included for current column.    * Used to eliminate duplicates. */
specifier|private
name|long
name|latestTSOfCurrentColumn
decl_stmt|;
specifier|private
name|long
name|oldestStamp
decl_stmt|;
comment|/**    * Default constructor.    * @param columns columns specified user in query    * @param minVersions minimum number of versions to keep    * @param maxVersions maximum versions to return per column    * @param oldestUnexpiredTS the oldest timestamp we are interested in,    *  based on TTL     */
specifier|public
name|ExplicitColumnTracker
parameter_list|(
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|int
name|minVersions
parameter_list|,
name|int
name|maxVersions
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|)
block|{
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
name|this
operator|.
name|minVersions
operator|=
name|minVersions
expr_stmt|;
name|this
operator|.
name|oldestStamp
operator|=
name|oldestUnexpiredTS
expr_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ColumnCount
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|columns
control|)
block|{
name|this
operator|.
name|columns
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|ColumnCount
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Done when there are no more columns to match against.    */
specifier|public
name|boolean
name|done
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
operator|>=
name|columns
operator|.
name|length
return|;
block|}
specifier|public
name|ColumnCount
name|getColumnHint
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|ScanQueryMatcher
operator|.
name|MatchCode
name|checkColumn
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
name|type
parameter_list|)
block|{
comment|// delete markers should never be passed to an
comment|// *Explicit*ColumnTracker
assert|assert
operator|!
name|KeyValue
operator|.
name|isDelete
argument_list|(
name|type
argument_list|)
assert|;
do|do
block|{
comment|// No more columns left, we are done with this query
if|if
condition|(
name|done
argument_list|()
condition|)
block|{
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_ROW
return|;
comment|// done_row
block|}
comment|// No more columns to match against, done with storefile
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_ROW
return|;
comment|// done_row
block|}
comment|// Compare specific column to current column
name|int
name|ret
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|column
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|column
operator|.
name|getOffset
argument_list|()
argument_list|,
name|column
operator|.
name|getLength
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
comment|// Column Matches. Return include code. The caller would call checkVersions
comment|// to limit the number of versions.
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
name|resetTS
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|>
literal|0
condition|)
block|{
comment|// The current KV is smaller than the column the ExplicitColumnTracker
comment|// is interested in, so seek to that column of interest.
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_COL
return|;
block|}
comment|// The current KV is bigger than the column the ExplicitColumnTracker
comment|// is interested in. That means there is no more data for the column
comment|// of interest. Advance the ExplicitColumnTracker state to next
comment|// column of interest, and check again.
if|if
condition|(
name|ret
operator|<=
operator|-
literal|1
condition|)
block|{
operator|++
name|this
operator|.
name|index
expr_stmt|;
if|if
condition|(
name|done
argument_list|()
condition|)
block|{
comment|// No more to match, do not include, done with this row.
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_ROW
return|;
comment|// done_row
block|}
comment|// This is the recursive case.
name|this
operator|.
name|column
operator|=
name|this
operator|.
name|columns
index|[
name|this
operator|.
name|index
index|]
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
annotation|@
name|Override
specifier|public
name|ScanQueryMatcher
operator|.
name|MatchCode
name|checkVersions
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|byte
name|type
parameter_list|,
name|boolean
name|ignoreCount
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|KeyValue
operator|.
name|isDelete
argument_list|(
name|type
argument_list|)
assert|;
if|if
condition|(
name|ignoreCount
condition|)
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
return|;
comment|// Check if it is a duplicate timestamp
if|if
condition|(
name|sameAsPreviousTS
argument_list|(
name|timestamp
argument_list|)
condition|)
block|{
comment|// If duplicate, skip this Key
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SKIP
return|;
block|}
name|int
name|count
init|=
name|this
operator|.
name|column
operator|.
name|increment
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>=
name|maxVersions
operator|||
operator|(
name|count
operator|>=
name|minVersions
operator|&&
name|isExpired
argument_list|(
name|timestamp
argument_list|)
operator|)
condition|)
block|{
comment|// Done with versions for this column
operator|++
name|this
operator|.
name|index
expr_stmt|;
name|resetTS
argument_list|()
expr_stmt|;
if|if
condition|(
name|done
argument_list|()
condition|)
block|{
comment|// We have served all the requested columns.
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
return|;
block|}
comment|// We are done with current column; advance to next column
comment|// of interest.
name|this
operator|.
name|column
operator|=
name|this
operator|.
name|columns
index|[
name|this
operator|.
name|index
index|]
expr_stmt|;
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_COL
return|;
block|}
name|setTS
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// Called between every row.
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|index
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|this
operator|.
name|columns
index|[
name|this
operator|.
name|index
index|]
expr_stmt|;
for|for
control|(
name|ColumnCount
name|col
range|:
name|this
operator|.
name|columns
control|)
block|{
name|col
operator|.
name|setCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|resetTS
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|resetTS
parameter_list|()
block|{
name|latestTSOfCurrentColumn
operator|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
expr_stmt|;
block|}
specifier|private
name|void
name|setTS
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|latestTSOfCurrentColumn
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|private
name|boolean
name|sameAsPreviousTS
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
return|return
name|timestamp
operator|==
name|latestTSOfCurrentColumn
return|;
block|}
specifier|private
name|boolean
name|isExpired
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
return|return
name|timestamp
operator|<
name|oldestStamp
return|;
block|}
comment|/**    * This method is used to inform the column tracker that we are done with    * this column. We may get this information from external filters or    * timestamp range and we then need to indicate this information to    * tracker. It is required only in case of ExplicitColumnTracker.    * @param bytes    * @param offset    * @param length    */
specifier|public
name|void
name|doneWithColumn
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
while|while
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|int
name|compare
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|column
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|column
operator|.
name|getOffset
argument_list|()
argument_list|,
name|column
operator|.
name|getLength
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|resetTS
argument_list|()
expr_stmt|;
if|if
condition|(
name|compare
operator|<=
literal|0
condition|)
block|{
operator|++
name|this
operator|.
name|index
expr_stmt|;
if|if
condition|(
name|done
argument_list|()
condition|)
block|{
comment|// Will not hit any more columns in this storefile
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|column
operator|=
name|this
operator|.
name|columns
index|[
name|this
operator|.
name|index
index|]
expr_stmt|;
block|}
if|if
condition|(
name|compare
operator|<=
operator|-
literal|1
condition|)
continue|continue;
block|}
return|return;
block|}
block|}
specifier|public
name|MatchCode
name|getNextRowOrNextColumn
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|qualLength
parameter_list|)
block|{
name|doneWithColumn
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|qualLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|getColumnHint
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|MatchCode
operator|.
name|SEEK_NEXT_ROW
return|;
block|}
else|else
block|{
return|return
name|MatchCode
operator|.
name|SEEK_NEXT_COL
return|;
block|}
block|}
specifier|public
name|boolean
name|isDone
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
return|return
name|minVersions
operator|<=
literal|0
operator|&&
name|isExpired
argument_list|(
name|timestamp
argument_list|)
return|;
block|}
block|}
end_class

end_unit

