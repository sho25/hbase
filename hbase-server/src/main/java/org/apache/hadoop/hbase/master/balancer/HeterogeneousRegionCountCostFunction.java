begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is an optional Cost function designed to allow region count skew across RegionServers. A  * rule file is loaded from the local FS or HDFS before balancing. It contains lines of rules. A  * rule is composed of a regexp for hostname, and a limit. For example, we could have:  *<p>  * * rs[0-9] 200 * rs1[0-9] 50  *</p>  * RegionServers with hostname matching the first rules will have a limit of 200, and the others 50.  * If there's no match, a default is set. The costFunction is trying to fill all RegionServers  * linearly, meaning that if the global usage is at 50%, then all RegionServers should hold half of  * their capacity in terms of regions. In order to use this CostFunction, you need to set the  * following options:  *<ul>  *<li>hbase.master.balancer.stochastic.additionalCostFunctions</li>  *<li>hbase.master.balancer.stochastic.heterogeneousRegionCountRulesFile</li>  *<li>hbase.master.balancer.stochastic.heterogeneousRegionCountDefault</li>  *</ul>  * The rule file can be located on local FS or HDFS, depending on the prefix (file//: or hdfs://).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HeterogeneousRegionCountCostFunction
extends|extends
name|StochasticLoadBalancer
operator|.
name|CostFunction
block|{
comment|/**    * configuration used for the path where the rule file is stored.    */
specifier|static
specifier|final
name|String
name|HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE
init|=
literal|"hbase.master.balancer.heterogeneousRegionCountRulesFile"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HeterogeneousRegionCountCostFunction
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Default rule to apply when the rule file is not found. Default to 200.    */
specifier|private
specifier|static
specifier|final
name|String
name|HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_DEFAULT
init|=
literal|"hbase.master.balancer.heterogeneousRegionCountDefault"
decl_stmt|;
comment|/**    * Cost for the function. Default to 500, can be changed.    */
specifier|private
specifier|static
specifier|final
name|String
name|REGION_COUNT_SKEW_COST_KEY
init|=
literal|"hbase.master.balancer.stochastic.heterogeneousRegionCountCost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_REGION_COUNT_SKEW_COST
init|=
literal|500
decl_stmt|;
specifier|private
specifier|final
name|String
name|rulesPath
decl_stmt|;
comment|/**    * Contains the rules, key is the regexp for ServerName, value is the limit    */
specifier|private
specifier|final
name|Map
argument_list|<
name|Pattern
argument_list|,
name|Integer
argument_list|>
name|limitPerRule
decl_stmt|;
comment|/**    * This is a cache, used to not go through all the limitPerRule map when searching for limit    */
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
name|limitPerRS
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|int
name|defaultNumberOfRegions
decl_stmt|;
comment|/**    * Total capacity of regions for the cluster, based on the online RS and their associated rules    */
specifier|private
name|int
name|totalCapacity
init|=
literal|0
decl_stmt|;
name|double
name|overallUsage
decl_stmt|;
name|HeterogeneousRegionCountCostFunction
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|limitPerRS
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|limitPerRule
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|setMultiplier
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|REGION_COUNT_SKEW_COST_KEY
argument_list|,
name|DEFAULT_REGION_COUNT_SKEW_COST
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rulesPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultNumberOfRegions
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_DEFAULT
argument_list|,
literal|200
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|defaultNumberOfRegions
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"invalid configuration '"
operator|+
name|HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_DEFAULT
operator|+
literal|"'. Setting default to 200"
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultNumberOfRegions
operator|=
literal|200
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getFloat
argument_list|(
name|StochasticLoadBalancer
operator|.
name|RegionCountSkewCostFunction
operator|.
name|REGION_COUNT_SKEW_COST_KEY
argument_list|,
name|StochasticLoadBalancer
operator|.
name|RegionCountSkewCostFunction
operator|.
name|DEFAULT_REGION_COUNT_SKEW_COST
argument_list|)
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"regionCountCost is not set to 0, "
operator|+
literal|" this will interfere with the HeterogeneousRegionCountCostFunction!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Called once per LB invocation to give the cost function to initialize it's state, and perform    * any costly calculation.    */
annotation|@
name|Override
name|void
name|init
parameter_list|(
specifier|final
name|BaseLoadBalancer
operator|.
name|Cluster
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|this
operator|.
name|loadRules
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|double
name|cost
parameter_list|()
block|{
name|double
name|cost
init|=
literal|0
decl_stmt|;
specifier|final
name|double
name|targetUsage
init|=
operator|(
operator|(
name|double
operator|)
name|this
operator|.
name|cluster
operator|.
name|numRegions
operator|/
operator|(
name|double
operator|)
name|this
operator|.
name|totalCapacity
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|cluster
operator|.
name|numServers
condition|;
name|i
operator|++
control|)
block|{
comment|// retrieve capacity for each RS
specifier|final
name|ServerName
name|sn
init|=
name|this
operator|.
name|cluster
operator|.
name|servers
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|double
name|limit
init|=
name|this
operator|.
name|limitPerRS
operator|.
name|getOrDefault
argument_list|(
name|sn
argument_list|,
name|defaultNumberOfRegions
argument_list|)
decl_stmt|;
specifier|final
name|double
name|nbrRegions
init|=
name|this
operator|.
name|cluster
operator|.
name|regionsPerServer
index|[
name|i
index|]
operator|.
name|length
decl_stmt|;
specifier|final
name|double
name|usage
init|=
name|nbrRegions
operator|/
name|limit
decl_stmt|;
if|if
condition|(
name|usage
operator|>
name|targetUsage
condition|)
block|{
comment|// cost is the number of regions above the local limit
specifier|final
name|double
name|localCost
init|=
operator|(
name|nbrRegions
operator|-
name|Math
operator|.
name|round
argument_list|(
name|limit
operator|*
name|targetUsage
argument_list|)
operator|)
operator|/
name|limit
decl_stmt|;
name|cost
operator|+=
name|localCost
expr_stmt|;
block|}
block|}
return|return
name|cost
operator|/
operator|(
name|double
operator|)
name|this
operator|.
name|cluster
operator|.
name|numServers
return|;
block|}
comment|/**    * used to load the rule files.    */
name|void
name|loadRules
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|readFile
argument_list|(
name|this
operator|.
name|rulesPath
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|lines
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"cannot load rules file, keeping latest rules file which has "
operator|+
name|this
operator|.
name|limitPerRule
operator|.
name|size
argument_list|()
operator|+
literal|" rules"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"loading rules file '"
operator|+
name|this
operator|.
name|rulesPath
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|this
operator|.
name|limitPerRule
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|line
range|:
name|lines
control|)
block|{
try|try
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|String
index|[]
name|splits
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"line '"
operator|+
name|line
operator|+
literal|"' is malformated, "
operator|+
literal|"expected [regexp] [limit]. Skipping line"
argument_list|)
throw|;
block|}
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|limit
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|splits
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|this
operator|.
name|limitPerRule
operator|.
name|put
argument_list|(
name|pattern
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|NumberFormatException
decl||
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error on line: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|rebuildCache
argument_list|()
expr_stmt|;
block|}
comment|/**    * used to read the rule files from either HDFS or local FS    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readFile
parameter_list|(
specifier|final
name|String
name|filename
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|filename
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
return|return
name|readFileFromLocalFS
argument_list|(
name|filename
argument_list|)
return|;
block|}
return|return
name|readFileFromHDFS
argument_list|(
name|filename
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"cannot read rules file located at ' "
operator|+
name|filename
operator|+
literal|" ':"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * used to read the rule files from HDFS    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readFileFromHDFS
parameter_list|(
specifier|final
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|readLines
argument_list|(
name|reader
argument_list|)
return|;
block|}
comment|/**    * used to read the rule files from local FS    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readFileFromLocalFS
parameter_list|(
specifier|final
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|filename
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|readLines
argument_list|(
name|reader
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readLines
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|records
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|records
return|;
block|}
comment|/**    * Rebuild cache matching ServerNames and their capacity.    */
specifier|private
name|void
name|rebuildCache
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rebuilding cache of capacity for each RS"
argument_list|)
expr_stmt|;
name|this
operator|.
name|limitPerRS
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalCapacity
operator|=
literal|0
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|cluster
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|cluster
operator|.
name|numServers
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ServerName
name|sn
init|=
name|this
operator|.
name|cluster
operator|.
name|servers
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|capacity
init|=
name|this
operator|.
name|findLimitForRS
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
operator|+
literal|" can hold "
operator|+
name|capacity
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalCapacity
operator|+=
name|capacity
expr_stmt|;
block|}
name|overallUsage
operator|=
operator|(
name|double
operator|)
name|this
operator|.
name|cluster
operator|.
name|numRegions
operator|/
operator|(
name|double
operator|)
name|this
operator|.
name|totalCapacity
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster can hold "
operator|+
name|this
operator|.
name|cluster
operator|.
name|numRegions
operator|+
literal|"/"
operator|+
name|this
operator|.
name|totalCapacity
operator|+
literal|" regions ("
operator|+
name|Math
operator|.
name|round
argument_list|(
name|overallUsage
operator|*
literal|100
argument_list|)
operator|+
literal|"%)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|overallUsage
operator|>=
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cluster is overused"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Find the limit for a ServerName. If not found then return the default value    * @param serverName the server we are looking for    * @return the limit    */
name|int
name|findLimitForRS
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
name|int
name|limit
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Pattern
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|this
operator|.
name|limitPerRule
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|matcher
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|matched
operator|=
literal|true
expr_stmt|;
name|limit
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|matched
condition|)
block|{
name|limit
operator|=
name|this
operator|.
name|defaultNumberOfRegions
expr_stmt|;
block|}
comment|// Feeding cache
name|this
operator|.
name|limitPerRS
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|limit
argument_list|)
expr_stmt|;
return|return
name|limit
return|;
block|}
name|int
name|getNumberOfRulesLoaded
parameter_list|()
block|{
return|return
name|this
operator|.
name|limitPerRule
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

