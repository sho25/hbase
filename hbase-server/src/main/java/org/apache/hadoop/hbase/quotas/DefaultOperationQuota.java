begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|OperationQuota
operator|.
name|AvgOperationSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|OperationQuota
operator|.
name|OperationType
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|DefaultOperationQuota
implements|implements
name|OperationQuota
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultOperationQuota
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|QuotaLimiter
argument_list|>
name|limiters
decl_stmt|;
specifier|private
name|long
name|writeAvailable
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|readAvailable
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|writeConsumed
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|readConsumed
init|=
literal|0
decl_stmt|;
specifier|private
name|AvgOperationSize
name|avgOpSize
init|=
operator|new
name|AvgOperationSize
argument_list|()
decl_stmt|;
specifier|public
name|DefaultOperationQuota
parameter_list|(
specifier|final
name|QuotaLimiter
modifier|...
name|limiters
parameter_list|)
block|{
name|this
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|limiters
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * NOTE: The order matters. It should be something like [user, table, namespace, global]    */
specifier|public
name|DefaultOperationQuota
parameter_list|(
specifier|final
name|List
argument_list|<
name|QuotaLimiter
argument_list|>
name|limiters
parameter_list|)
block|{
name|this
operator|.
name|limiters
operator|=
name|limiters
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkQuota
parameter_list|(
name|int
name|numWrites
parameter_list|,
name|int
name|numReads
parameter_list|,
name|int
name|numScans
parameter_list|)
throws|throws
name|ThrottlingException
block|{
name|writeConsumed
operator|=
name|estimateConsume
argument_list|(
name|OperationType
operator|.
name|MUTATE
argument_list|,
name|numWrites
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|readConsumed
operator|=
name|estimateConsume
argument_list|(
name|OperationType
operator|.
name|GET
argument_list|,
name|numReads
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|readConsumed
operator|+=
name|estimateConsume
argument_list|(
name|OperationType
operator|.
name|SCAN
argument_list|,
name|numScans
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|writeAvailable
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|readAvailable
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
for|for
control|(
specifier|final
name|QuotaLimiter
name|limiter
range|:
name|limiters
control|)
block|{
if|if
condition|(
name|limiter
operator|.
name|isBypass
argument_list|()
condition|)
continue|continue;
name|limiter
operator|.
name|checkQuota
argument_list|(
name|writeConsumed
argument_list|,
name|readConsumed
argument_list|)
expr_stmt|;
name|readAvailable
operator|=
name|Math
operator|.
name|min
argument_list|(
name|readAvailable
argument_list|,
name|limiter
operator|.
name|getReadAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|writeAvailable
operator|=
name|Math
operator|.
name|min
argument_list|(
name|writeAvailable
argument_list|,
name|limiter
operator|.
name|getWriteAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|QuotaLimiter
name|limiter
range|:
name|limiters
control|)
block|{
name|limiter
operator|.
name|grabQuota
argument_list|(
name|writeConsumed
argument_list|,
name|readConsumed
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Calculate and set the average size of get, scan and mutate for the current operation
name|long
name|getSize
init|=
name|avgOpSize
operator|.
name|getAvgOperationSize
argument_list|(
name|OperationType
operator|.
name|GET
argument_list|)
decl_stmt|;
name|long
name|scanSize
init|=
name|avgOpSize
operator|.
name|getAvgOperationSize
argument_list|(
name|OperationType
operator|.
name|SCAN
argument_list|)
decl_stmt|;
name|long
name|mutationSize
init|=
name|avgOpSize
operator|.
name|getAvgOperationSize
argument_list|(
name|OperationType
operator|.
name|MUTATE
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|QuotaLimiter
name|limiter
range|:
name|limiters
control|)
block|{
name|limiter
operator|.
name|addOperationSize
argument_list|(
name|OperationType
operator|.
name|GET
argument_list|,
name|getSize
argument_list|)
expr_stmt|;
name|limiter
operator|.
name|addOperationSize
argument_list|(
name|OperationType
operator|.
name|SCAN
argument_list|,
name|scanSize
argument_list|)
expr_stmt|;
name|limiter
operator|.
name|addOperationSize
argument_list|(
name|OperationType
operator|.
name|MUTATE
argument_list|,
name|mutationSize
argument_list|)
expr_stmt|;
block|}
comment|// Adjust the quota consumed for the specified operation
name|long
name|writeDiff
init|=
name|avgOpSize
operator|.
name|getOperationSize
argument_list|(
name|OperationType
operator|.
name|MUTATE
argument_list|)
operator|-
name|writeConsumed
decl_stmt|;
name|long
name|readDiff
init|=
operator|(
name|avgOpSize
operator|.
name|getOperationSize
argument_list|(
name|OperationType
operator|.
name|GET
argument_list|)
operator|+
name|avgOpSize
operator|.
name|getOperationSize
argument_list|(
name|OperationType
operator|.
name|SCAN
argument_list|)
operator|)
operator|-
name|readConsumed
decl_stmt|;
for|for
control|(
specifier|final
name|QuotaLimiter
name|limiter
range|:
name|limiters
control|)
block|{
if|if
condition|(
name|writeDiff
operator|!=
literal|0
condition|)
name|limiter
operator|.
name|consumeWrite
argument_list|(
name|writeDiff
argument_list|)
expr_stmt|;
if|if
condition|(
name|readDiff
operator|!=
literal|0
condition|)
name|limiter
operator|.
name|consumeRead
argument_list|(
name|readDiff
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReadAvailable
parameter_list|()
block|{
return|return
name|readAvailable
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteAvailable
parameter_list|()
block|{
return|return
name|writeAvailable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGetResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
name|avgOpSize
operator|.
name|addGetResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addScanResult
parameter_list|(
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|)
block|{
name|avgOpSize
operator|.
name|addScanResult
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMutation
parameter_list|(
specifier|final
name|Mutation
name|mutation
parameter_list|)
block|{
name|avgOpSize
operator|.
name|addMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getAvgOperationSize
parameter_list|(
name|OperationType
name|type
parameter_list|)
block|{
return|return
name|avgOpSize
operator|.
name|getAvgOperationSize
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|private
name|long
name|estimateConsume
parameter_list|(
specifier|final
name|OperationType
name|type
parameter_list|,
name|int
name|numReqs
parameter_list|,
name|long
name|avgSize
parameter_list|)
block|{
if|if
condition|(
name|numReqs
operator|>
literal|0
condition|)
block|{
for|for
control|(
specifier|final
name|QuotaLimiter
name|limiter
range|:
name|limiters
control|)
block|{
name|long
name|size
init|=
name|limiter
operator|.
name|getAvgOperationSize
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|avgSize
operator|=
name|size
expr_stmt|;
break|break;
block|}
block|}
return|return
name|avgSize
operator|*
name|numReqs
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

