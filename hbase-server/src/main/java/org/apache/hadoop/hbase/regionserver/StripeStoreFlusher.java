begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeStoreFileManager
operator|.
name|OPEN_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeMultiFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|StripeCompactionPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Stripe implementation of StoreFlusher. Flushes files either into L0 file w/o metadata, or  * into separate striped files, avoiding L0.  */
end_comment

begin_class
specifier|public
class|class
name|StripeStoreFlusher
extends|extends
name|StoreFlusher
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StripeStoreFlusher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Object
name|flushLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StripeCompactionPolicy
name|policy
decl_stmt|;
specifier|private
specifier|final
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|stripes
decl_stmt|;
specifier|public
name|StripeStoreFlusher
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Store
name|store
parameter_list|,
name|StripeCompactionPolicy
name|policy
parameter_list|,
name|StripeStoreFileManager
name|stripes
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
name|this
operator|.
name|stripes
operator|=
name|stripes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|flushSnapshot
parameter_list|(
name|MemStoreSnapshot
name|snapshot
parameter_list|,
name|long
name|cacheFlushSeqNum
parameter_list|,
name|MonitoredTask
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|int
name|cellsCount
init|=
name|snapshot
operator|.
name|getCellsCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|cellsCount
operator|==
literal|0
condition|)
return|return
name|result
return|;
comment|// don't flush if there are no entries
name|long
name|smallestReadPoint
init|=
name|store
operator|.
name|getSmallestReadPoint
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|createScanner
argument_list|(
name|snapshot
operator|.
name|getScanner
argument_list|()
argument_list|,
name|smallestReadPoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
comment|// NULL scanner returned from coprocessor hooks means skip normal processing
block|}
comment|// Let policy select flush method.
name|StripeFlushRequest
name|req
init|=
name|this
operator|.
name|policy
operator|.
name|selectFlush
argument_list|(
name|this
operator|.
name|stripes
argument_list|,
name|cellsCount
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|StripeMultiFileWriter
name|mw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mw
operator|=
name|req
operator|.
name|createWriter
argument_list|()
expr_stmt|;
comment|// Writer according to the policy.
name|StripeMultiFileWriter
operator|.
name|WriterFactory
name|factory
init|=
name|createWriterFactory
argument_list|(
name|snapshot
operator|.
name|getTimeRangeTracker
argument_list|()
argument_list|,
name|cellsCount
argument_list|)
decl_stmt|;
name|StoreScanner
name|storeScanner
init|=
operator|(
name|scanner
operator|instanceof
name|StoreScanner
operator|)
condition|?
operator|(
name|StoreScanner
operator|)
name|scanner
else|:
literal|null
decl_stmt|;
name|mw
operator|.
name|init
argument_list|(
name|storeScanner
argument_list|,
name|factory
argument_list|,
name|store
operator|.
name|getComparator
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|flushLock
init|)
block|{
name|performFlush
argument_list|(
name|scanner
argument_list|,
name|mw
argument_list|,
name|smallestReadPoint
argument_list|)
expr_stmt|;
name|result
operator|=
name|mw
operator|.
name|commitWriters
argument_list|(
name|cacheFlushSeqNum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
operator|(
name|mw
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Path
name|leftoverFile
range|:
name|mw
operator|.
name|abortWriters
argument_list|()
control|)
block|{
try|try
block|{
name|store
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|leftoverFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete a file after failed flush: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close flush scanner, ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|StripeMultiFileWriter
operator|.
name|WriterFactory
name|createWriterFactory
parameter_list|(
specifier|final
name|TimeRangeTracker
name|tracker
parameter_list|,
specifier|final
name|long
name|kvCount
parameter_list|)
block|{
return|return
operator|new
name|StripeMultiFileWriter
operator|.
name|WriterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Writer
name|createWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|StoreFile
operator|.
name|Writer
name|writer
init|=
name|store
operator|.
name|createWriterInTmp
argument_list|(
name|kvCount
argument_list|,
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getCompression
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setTimeRangeTracker
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
return|return
name|writer
return|;
block|}
block|}
return|;
block|}
comment|/** Stripe flush request wrapper that writes a non-striped file. */
specifier|public
specifier|static
class|class
name|StripeFlushRequest
block|{
annotation|@
name|VisibleForTesting
specifier|public
name|StripeMultiFileWriter
name|createWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|StripeMultiFileWriter
name|writer
init|=
operator|new
name|StripeMultiFileWriter
operator|.
name|SizeMultiWriter
argument_list|(
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setNoStripeMetadata
argument_list|()
expr_stmt|;
return|return
name|writer
return|;
block|}
block|}
comment|/** Stripe flush request wrapper based on boundaries. */
specifier|public
specifier|static
class|class
name|BoundaryStripeFlushRequest
extends|extends
name|StripeFlushRequest
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|targetBoundaries
decl_stmt|;
comment|/** @param targetBoundaries New files should be written with these boundaries. */
specifier|public
name|BoundaryStripeFlushRequest
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|targetBoundaries
parameter_list|)
block|{
name|this
operator|.
name|targetBoundaries
operator|=
name|targetBoundaries
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|StripeMultiFileWriter
name|createWriter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|StripeMultiFileWriter
operator|.
name|BoundaryMultiWriter
argument_list|(
name|targetBoundaries
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/** Stripe flush request wrapper based on size. */
specifier|public
specifier|static
class|class
name|SizeStripeFlushRequest
extends|extends
name|StripeFlushRequest
block|{
specifier|private
specifier|final
name|int
name|targetCount
decl_stmt|;
specifier|private
specifier|final
name|long
name|targetKvs
decl_stmt|;
comment|/**      * @param targetCount The maximum number of stripes to flush into.      * @param targetKvs The KV count of each segment. If targetKvs*targetCount is less than      *                  total number of kvs, all the overflow data goes into the last stripe.      */
specifier|public
name|SizeStripeFlushRequest
parameter_list|(
name|int
name|targetCount
parameter_list|,
name|long
name|targetKvs
parameter_list|)
block|{
name|this
operator|.
name|targetCount
operator|=
name|targetCount
expr_stmt|;
name|this
operator|.
name|targetKvs
operator|=
name|targetKvs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|StripeMultiFileWriter
name|createWriter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|StripeMultiFileWriter
operator|.
name|SizeMultiWriter
argument_list|(
name|this
operator|.
name|targetCount
argument_list|,
name|this
operator|.
name|targetKvs
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

