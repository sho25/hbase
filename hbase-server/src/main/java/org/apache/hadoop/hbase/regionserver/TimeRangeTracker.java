begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * Stores the minimum and maximum timestamp values (both are inclusive).  * Can be used to find if any given time range overlaps with its time range  * MemStores use this class to track its minimum and maximum timestamps.  * When writing StoreFiles, this information is stored in meta blocks and used  * at read time to match against the required TimeRange.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TimeRangeTracker
implements|implements
name|Writable
block|{
specifier|static
specifier|final
name|long
name|INITIAL_MINIMUM_TIMESTAMP
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|minimumTimestamp
init|=
name|INITIAL_MINIMUM_TIMESTAMP
decl_stmt|;
name|long
name|maximumTimestamp
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Default constructor.    * Initializes TimeRange to be null    */
specifier|public
name|TimeRangeTracker
parameter_list|()
block|{}
comment|/**    * Copy Constructor    * @param trt source TimeRangeTracker    */
specifier|public
name|TimeRangeTracker
parameter_list|(
specifier|final
name|TimeRangeTracker
name|trt
parameter_list|)
block|{
name|set
argument_list|(
name|trt
operator|.
name|getMinimumTimestamp
argument_list|()
argument_list|,
name|trt
operator|.
name|getMaximumTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimeRangeTracker
parameter_list|(
name|long
name|minimumTimestamp
parameter_list|,
name|long
name|maximumTimestamp
parameter_list|)
block|{
name|set
argument_list|(
name|minimumTimestamp
argument_list|,
name|maximumTimestamp
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|set
parameter_list|(
specifier|final
name|long
name|min
parameter_list|,
specifier|final
name|long
name|max
parameter_list|)
block|{
name|this
operator|.
name|minimumTimestamp
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|maximumTimestamp
operator|=
name|max
expr_stmt|;
block|}
comment|/**    * @param l    * @return True if we initialized values    */
specifier|private
name|boolean
name|init
parameter_list|(
specifier|final
name|long
name|l
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|minimumTimestamp
operator|!=
name|INITIAL_MINIMUM_TIMESTAMP
condition|)
return|return
literal|false
return|;
name|set
argument_list|(
name|l
argument_list|,
name|l
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Update the current TimestampRange to include the timestamp from Cell    * If the Key is of type DeleteColumn or DeleteFamily, it includes the    * entire time range from 0 to timestamp of the key.    * @param cell the Cell to include    */
specifier|public
name|void
name|includeTimestamp
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
name|includeTimestamp
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CellUtil
operator|.
name|isDeleteColumnOrFamily
argument_list|(
name|cell
argument_list|)
condition|)
block|{
name|includeTimestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If required, update the current TimestampRange to include timestamp    * @param timestamp the timestamp value to include    */
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"MT_CORRECTNESS"
argument_list|,
name|justification
operator|=
literal|"Intentional"
argument_list|)
name|void
name|includeTimestamp
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|)
block|{
comment|// Do test outside of synchronization block.  Synchronization in here can be problematic
comment|// when many threads writing one Store -- they can all pile up trying to add in here.
comment|// Happens when doing big write upload where we are hammering on one region.
if|if
condition|(
name|timestamp
operator|<
name|this
operator|.
name|minimumTimestamp
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|init
argument_list|(
name|timestamp
argument_list|)
condition|)
block|{
if|if
condition|(
name|timestamp
operator|<
name|this
operator|.
name|minimumTimestamp
condition|)
block|{
name|this
operator|.
name|minimumTimestamp
operator|=
name|timestamp
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|timestamp
operator|>
name|this
operator|.
name|maximumTimestamp
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|init
argument_list|(
name|timestamp
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|maximumTimestamp
operator|<
name|timestamp
condition|)
block|{
name|this
operator|.
name|maximumTimestamp
operator|=
name|timestamp
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Check if the range has any overlap with TimeRange    * @param tr TimeRange    * @return True if there is overlap, false otherwise    */
specifier|public
specifier|synchronized
name|boolean
name|includesTimeRange
parameter_list|(
specifier|final
name|TimeRange
name|tr
parameter_list|)
block|{
return|return
operator|(
name|this
operator|.
name|minimumTimestamp
operator|<
name|tr
operator|.
name|getMax
argument_list|()
operator|&&
name|this
operator|.
name|maximumTimestamp
operator|>=
name|tr
operator|.
name|getMin
argument_list|()
operator|)
return|;
block|}
comment|/**    * @return the minimumTimestamp    */
specifier|public
specifier|synchronized
name|long
name|getMinimumTimestamp
parameter_list|()
block|{
return|return
name|minimumTimestamp
return|;
block|}
comment|/**    * @return the maximumTimestamp    */
specifier|public
specifier|synchronized
name|long
name|getMaximumTimestamp
parameter_list|()
block|{
return|return
name|maximumTimestamp
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|minimumTimestamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|maximumTimestamp
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|minimumTimestamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|maximumTimestamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|minimumTimestamp
operator|+
literal|","
operator|+
name|maximumTimestamp
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

