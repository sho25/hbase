begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_comment
comment|/**  * This class holds all "physical" details necessary to run a compaction,  * and abstracts away the details specific to a particular compaction.  * It also has compaction request with all the logical details.  * Hence, this class is basically the compaction.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|CompactionContext
block|{
specifier|protected
name|CompactionRequest
name|request
init|=
literal|null
decl_stmt|;
comment|/**    * Called before coprocessor preCompactSelection and should filter the candidates    * for coprocessor; i.e. exclude the files that definitely cannot be compacted at this time.    * @param filesCompacting files currently compacting    * @return the list of files that can theoretically be compacted.    */
specifier|public
specifier|abstract
name|List
argument_list|<
name|StoreFile
argument_list|>
name|preSelect
parameter_list|(
specifier|final
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|)
function_decl|;
comment|/**    * Called to select files for compaction. Must fill in the request field if successful.    * @param filesCompacting Files currently being compacted by other compactions.    * @param isUserCompaction Whether this is a user compaction.    * @param mayUseOffPeak Whether the underlying policy may assume it's off-peak hours.    * @param forceMajor Whether to force major compaction.    * @return Whether the selection succeeded. Selection may be empty and lead to no compaction.    */
specifier|public
specifier|abstract
name|boolean
name|select
parameter_list|(
specifier|final
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|,
specifier|final
name|boolean
name|isUserCompaction
parameter_list|,
specifier|final
name|boolean
name|mayUseOffPeak
parameter_list|,
specifier|final
name|boolean
name|forceMajor
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Forces external selection to be applied for this compaction.    * @param request The pre-cooked request with selection and other settings.    */
specifier|public
name|void
name|forceSelect
parameter_list|(
name|CompactionRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|List
argument_list|<
name|Path
argument_list|>
name|compact
parameter_list|(
name|ThroughputController
name|throughputController
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|public
name|CompactionRequest
name|getRequest
parameter_list|()
block|{
assert|assert
name|hasSelection
argument_list|()
assert|;
return|return
name|this
operator|.
name|request
return|;
block|}
specifier|public
name|boolean
name|hasSelection
parameter_list|()
block|{
return|return
name|this
operator|.
name|request
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

