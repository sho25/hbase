begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A SCP that differs from default only in how it gets the list of  * Regions hosted on the crashed-server; it also reads hbase:meta directly rather  * than rely solely on Master memory for list of Regions that were on crashed server.  * This version of SCP is for external invocation as part of fix-up (e.g. HBCK2's  * scheduleRecoveries). It is for the case where meta has references to 'Unknown Servers',  * servers that are in hbase:meta but not in live-server or dead-server lists; i.e. Master  * and hbase:meta content have deviated. It should never happen in normal running  * cluster but if we do drop accounting of servers, we need a means of fix-up.  * Eventually, as part of normal CatalogJanitor task, rather than just identify  * these 'Unknown Servers', it would make repair, queuing something like this  * HBCKSCP to do cleanup, reassigning them so Master and hbase:meta are aligned again.  *  *<p>NOTE that this SCP is costly to run; does a full scan of hbase:meta.</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HBCKServerCrashProcedure
extends|extends
name|ServerCrashProcedure
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HBCKServerCrashProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * @param serverName Name of the crashed server.    * @param shouldSplitWal True if we should split WALs as part of crashed server processing.    * @param carryingMeta True if carrying hbase:meta table region.    */
specifier|public
name|HBCKServerCrashProcedure
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|boolean
name|shouldSplitWal
parameter_list|,
specifier|final
name|boolean
name|carryingMeta
parameter_list|)
block|{
name|super
argument_list|(
name|env
argument_list|,
name|serverName
argument_list|,
name|shouldSplitWal
argument_list|,
name|carryingMeta
argument_list|)
expr_stmt|;
block|}
comment|/**    * Used when deserializing from a procedure store; we'll construct one of these then call    * #deserializeStateData(InputStream). Do not use directly.    */
specifier|public
name|HBCKServerCrashProcedure
parameter_list|()
block|{}
comment|/**    * Adds Regions found by super method any found scanning hbase:meta.    */
annotation|@
name|Override
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NP_NULL_ON_SOME_PATH_EXCEPTION"
argument_list|,
name|justification
operator|=
literal|"FindBugs seems confused on ps in below."
argument_list|)
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsOnCrashedServer
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
comment|// Super can return immutable emptyList.
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|ris
init|=
name|super
operator|.
name|getRegionsOnCrashedServer
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|ps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ps
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed get of all regions; continuing"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ps
operator|==
literal|null
operator|||
name|ps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No regions found in hbase:meta"
argument_list|)
expr_stmt|;
return|return
name|ris
return|;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|aggregate
init|=
name|ris
operator|==
literal|null
operator|||
name|ris
operator|.
name|isEmpty
argument_list|()
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ris
argument_list|)
decl_stmt|;
name|int
name|before
init|=
name|aggregate
operator|.
name|size
argument_list|()
decl_stmt|;
name|ps
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getSecond
argument_list|()
operator|.
name|equals
argument_list|(
name|getServerName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|aggregate
operator|.
name|add
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} mentions of {} in hbase:meta"
argument_list|,
name|aggregate
operator|.
name|size
argument_list|()
operator|-
name|before
argument_list|,
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|aggregate
return|;
block|}
block|}
end_class

end_unit

