begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**   * Encapsulates per-region load metrics.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionLoad
block|{
specifier|protected
name|HBaseProtos
operator|.
name|RegionLoad
name|regionLoadPB
decl_stmt|;
specifier|public
name|RegionLoad
parameter_list|(
name|HBaseProtos
operator|.
name|RegionLoad
name|regionLoadPB
parameter_list|)
block|{
name|this
operator|.
name|regionLoadPB
operator|=
name|regionLoadPB
expr_stmt|;
block|}
comment|/**    * @return the region name    */
specifier|public
name|byte
index|[]
name|getName
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getRegionSpecifier
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * @return the region name as a string    */
specifier|public
name|String
name|getNameAsString
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return the number of stores    */
specifier|public
name|int
name|getStores
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getStores
argument_list|()
return|;
block|}
comment|/**    * @return the number of storefiles    */
specifier|public
name|int
name|getStorefiles
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getStorefiles
argument_list|()
return|;
block|}
comment|/**    * @return the total size of the storefiles, in MB    */
specifier|public
name|int
name|getStorefileSizeMB
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getStorefileSizeMB
argument_list|()
return|;
block|}
comment|/**    * @return the memstore size, in MB    */
specifier|public
name|int
name|getMemStoreSizeMB
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getMemstoreSizeMB
argument_list|()
return|;
block|}
comment|/**    * @return the approximate size of storefile indexes on the heap, in MB    */
specifier|public
name|int
name|getStorefileIndexSizeMB
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getStorefileIndexSizeMB
argument_list|()
return|;
block|}
comment|/**    * @return the number of requests made to region    */
specifier|public
name|long
name|getRequestsCount
parameter_list|()
block|{
return|return
name|getReadRequestsCount
argument_list|()
operator|+
name|getWriteRequestsCount
argument_list|()
return|;
block|}
comment|/**    * @return the number of read requests made to region    */
specifier|public
name|long
name|getReadRequestsCount
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getReadRequestsCount
argument_list|()
return|;
block|}
comment|/**    * @return the number of write requests made to region    */
specifier|public
name|long
name|getWriteRequestsCount
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getWriteRequestsCount
argument_list|()
return|;
block|}
comment|/**    * @return The current total size of root-level indexes for the region, in KB.    */
specifier|public
name|int
name|getRootIndexSizeKB
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getRootIndexSizeKB
argument_list|()
return|;
block|}
comment|/**    * @return The total size of all index blocks, not just the root level, in KB.    */
specifier|public
name|int
name|getTotalStaticIndexSizeKB
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getTotalStaticIndexSizeKB
argument_list|()
return|;
block|}
comment|/**    * @return The total size of all Bloom filter blocks, not just loaded into the    * block cache, in KB.    */
specifier|public
name|int
name|getTotalStaticBloomSizeKB
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getTotalStaticBloomSizeKB
argument_list|()
return|;
block|}
comment|/**    * @return the total number of kvs in current compaction    */
specifier|public
name|long
name|getTotalCompactingKVs
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getTotalCompactingKVs
argument_list|()
return|;
block|}
comment|/**    * @return the number of already compacted kvs in current compaction    */
specifier|public
name|long
name|getCurrentCompactedKVs
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getCurrentCompactedKVs
argument_list|()
return|;
block|}
comment|/**    * This does not really belong inside RegionLoad but its being done in the name of expediency.    * @return the completed sequence Id for the region    */
specifier|public
name|long
name|getCompleteSequenceId
parameter_list|()
block|{
return|return
name|regionLoadPB
operator|.
name|getCompleteSequenceId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

