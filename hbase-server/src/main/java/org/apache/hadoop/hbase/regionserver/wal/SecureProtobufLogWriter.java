begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|EncryptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ZeroCopyLiteralByteString
import|;
end_import

begin_class
specifier|public
class|class
name|SecureProtobufLogWriter
extends|extends
name|ProtobufLogWriter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SecureProtobufLogWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CIPHER
init|=
literal|"AES"
decl_stmt|;
specifier|private
name|Encryptor
name|encryptor
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|WALHeader
name|buildWALHeader
parameter_list|(
name|WALHeader
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|ENABLE_WAL_ENCRYPTION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Get an instance of our cipher
name|Cipher
name|cipher
init|=
name|Encryption
operator|.
name|getCipher
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_WAL_ALGORITHM_CONF_KEY
argument_list|,
name|DEFAULT_CIPHER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cipher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cipher '"
operator|+
name|cipher
operator|+
literal|"' is not available"
argument_list|)
throw|;
block|}
comment|// Generate an encryption key for this WAL
name|SecureRandom
name|rng
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
name|byte
index|[]
name|keyBytes
init|=
operator|new
name|byte
index|[
name|cipher
operator|.
name|getKeyLength
argument_list|()
index|]
decl_stmt|;
name|rng
operator|.
name|nextBytes
argument_list|(
name|keyBytes
argument_list|)
expr_stmt|;
name|Key
name|key
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
name|cipher
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setEncryptionKey
argument_list|(
name|ZeroCopyLiteralByteString
operator|.
name|wrap
argument_list|(
name|EncryptionUtil
operator|.
name|wrapKey
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_WAL_KEY_NAME_CONF_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_MASTERKEY_NAME_CONF_KEY
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set up the encryptor
name|encryptor
operator|=
name|cipher
operator|.
name|getEncryptor
argument_list|()
expr_stmt|;
name|encryptor
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Initialized secure protobuf WAL: cipher="
operator|+
name|cipher
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|buildWALHeader
argument_list|(
name|builder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initAfterHeader
parameter_list|(
name|boolean
name|doCompress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|ENABLE_WAL_ENCRYPTION
argument_list|,
literal|false
argument_list|)
operator|&&
name|encryptor
operator|!=
literal|null
condition|)
block|{
name|WALCellCodec
name|codec
init|=
name|SecureWALCellCodec
operator|.
name|getCodec
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|encryptor
argument_list|)
decl_stmt|;
name|this
operator|.
name|cellEncoder
operator|=
name|codec
operator|.
name|getEncoder
argument_list|(
name|this
operator|.
name|output
argument_list|)
expr_stmt|;
comment|// We do not support compression
name|this
operator|.
name|compressionContext
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|initAfterHeader
argument_list|(
name|doCompress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

