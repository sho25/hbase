begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Generate a new style scanner id to prevent collision with previous started server or other RSs.  * We have 64 bits to use.  * The first 32 bits are MurmurHash32 of ServerName string "host,port,ts".  * The ServerName contains both host, port, and start timestamp so it can prevent collision.  * The lowest 32bit is generated by atomic int.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ScannerIdGenerator
block|{
specifier|private
specifier|final
name|long
name|serverNameHash
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|scannerIdGen
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|ScannerIdGenerator
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|long
name|hash
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|hashString
argument_list|(
name|serverName
operator|.
name|toString
argument_list|()
argument_list|,
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|asInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|serverNameHash
operator|=
name|hash
operator|<<
literal|32
expr_stmt|;
block|}
specifier|public
name|long
name|generateNewScannerId
parameter_list|()
block|{
return|return
operator|(
name|scannerIdGen
operator|.
name|incrementAndGet
argument_list|()
operator|&
literal|0x00000000FFFFFFFFL
operator|)
operator||
name|serverNameHash
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
name|ScannerIdGenerator
name|sig
init|=
operator|new
name|ScannerIdGenerator
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"a.example.org,1234,5678"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sig
operator|.
name|generateNewScannerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

