begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * Region state accountant. It holds the states of all regions in the memory.  * In normal scenario, it should match the meta table and the true region states.  *  * This map is used by AssignmentManager to track region states.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionStates
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionStates
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Regions currently in transition.    */
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|regionsInTransition
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Region encoded name to state map.    * All the regions should be in this map.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|regionStates
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Server to regions assignment map.    * Contains the set of regions currently assigned to a given server.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serverHoldings
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Maintains the mapping from the default region to the replica regions.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|defaultReplicaToOtherReplicas
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Region to server assignment map.    * Contains the server a given region is currently assigned to.    */
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionAssignments
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Encoded region name to server assignment map for re-assignment    * purpose. Contains the server a given region is last known assigned    * to, which has not completed log splitting, so not assignable.    * If a region is currently assigned, this server info in this    * map should be the same as that in regionAssignments.    * However the info in regionAssignments is cleared when the region    * is offline while the info in lastAssignments is cleared when    * the region is closed or the server is dead and processed.    */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServerName
argument_list|>
name|lastAssignments
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Encoded region name to server assignment map for the    * purpose to clean up serverHoldings when a region is online    * on a new server. When the region is offline from the previous    * server, we cleaned up regionAssignments so that it has the    * latest assignment map. But we didn't clean up serverHoldings    * to match the meta. We need this map to find out the old server    * whose serverHoldings needs cleanup, given a moved region.    */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServerName
argument_list|>
name|oldAssignments
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Map a host port pair string to the latest start code    * of a region server which is known to be dead. It is dead    * to us, but server manager may not know it yet.    */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|deadServers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Map a dead servers to the time when log split is done.    * Since log splitting is not ordered, we have to remember    * all processed instances. The map is cleaned up based    * on a configured time. By default, we assume a dead    * server should be done with log splitting in two hours.    */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|Long
argument_list|>
name|processedServers
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|lastProcessedServerCleanTime
decl_stmt|;
specifier|private
specifier|final
name|TableStateManager
name|tableStateManager
decl_stmt|;
specifier|private
specifier|final
name|RegionStateStore
name|regionStateStore
decl_stmt|;
specifier|private
specifier|final
name|ServerManager
name|serverManager
decl_stmt|;
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
comment|// The maximum time to keep a log split info in region states map
specifier|static
specifier|final
name|String
name|LOG_SPLIT_TIME
init|=
literal|"hbase.master.maximum.logsplit.keeptime"
decl_stmt|;
specifier|static
specifier|final
name|long
name|DEFAULT_LOG_SPLIT_TIME
init|=
literal|7200000L
decl_stmt|;
comment|// 2 hours
name|RegionStates
parameter_list|(
specifier|final
name|Server
name|master
parameter_list|,
specifier|final
name|TableStateManager
name|tableStateManager
parameter_list|,
specifier|final
name|ServerManager
name|serverManager
parameter_list|,
specifier|final
name|RegionStateStore
name|regionStateStore
parameter_list|)
block|{
name|this
operator|.
name|tableStateManager
operator|=
name|tableStateManager
expr_stmt|;
name|this
operator|.
name|regionStateStore
operator|=
name|regionStateStore
expr_stmt|;
name|this
operator|.
name|serverManager
operator|=
name|serverManager
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|master
expr_stmt|;
block|}
comment|/**    * @return an unmodifiable the region assignment map    */
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getRegionAssignments
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|regionAssignments
argument_list|)
return|;
block|}
comment|/**    * Return the replicas (including default) for the regions grouped by ServerName    * @param regions    * @return a pair containing the groupings as a map    */
specifier|synchronized
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|getRegionAssignments
parameter_list|(
name|Collection
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|HRegionInfo
name|defaultReplica
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|allReplicas
init|=
name|defaultReplicaToOtherReplicas
operator|.
name|get
argument_list|(
name|defaultReplica
argument_list|)
decl_stmt|;
if|if
condition|(
name|allReplicas
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|allReplicas
control|)
block|{
name|ServerName
name|server
init|=
name|regionAssignments
operator|.
name|get
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsOnServer
init|=
name|map
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsOnServer
operator|==
literal|null
condition|)
block|{
name|regionsOnServer
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|regionsOnServer
argument_list|)
expr_stmt|;
block|}
name|regionsOnServer
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
specifier|synchronized
name|ServerName
name|getRegionServerOfRegion
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|regionAssignments
operator|.
name|get
argument_list|(
name|hri
argument_list|)
return|;
block|}
comment|/**    * Get regions in transition and their states    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|getRegionsInTransition
parameter_list|()
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
operator|)
name|regionsInTransition
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/**    * @return True if specified region in transition.    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionInTransition
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|regionsInTransition
operator|.
name|containsKey
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return True if specified region in transition.    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionInTransition
parameter_list|(
specifier|final
name|String
name|encodedName
parameter_list|)
block|{
return|return
name|regionsInTransition
operator|.
name|containsKey
argument_list|(
name|encodedName
argument_list|)
return|;
block|}
comment|/**    * @return True if any region in transition.    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionsInTransition
parameter_list|()
block|{
return|return
operator|!
name|regionsInTransition
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * @return True if specified region assigned, and not in transition.    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionOnline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
operator|!
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
operator|&&
name|regionAssignments
operator|.
name|containsKey
argument_list|(
name|hri
argument_list|)
return|;
block|}
comment|/**    * @return True if specified region offline/closed, but not in transition.    * If the region is not in the map, it is offline to us too.    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionOffline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|getRegionState
argument_list|(
name|hri
argument_list|)
operator|==
literal|null
operator|||
operator|(
operator|!
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
operator|&&
name|isRegionInState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|OFFLINE
argument_list|,
name|State
operator|.
name|CLOSED
argument_list|)
operator|)
return|;
block|}
comment|/**    * @return True if specified region is in one of the specified states.    */
specifier|public
name|boolean
name|isRegionInState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|State
modifier|...
name|states
parameter_list|)
block|{
return|return
name|isRegionInState
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|states
argument_list|)
return|;
block|}
comment|/**    * @return True if specified region is in one of the specified states.    */
specifier|public
name|boolean
name|isRegionInState
parameter_list|(
specifier|final
name|String
name|encodedName
parameter_list|,
specifier|final
name|State
modifier|...
name|states
parameter_list|)
block|{
name|RegionState
name|regionState
init|=
name|getRegionState
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
return|return
name|isOneOfStates
argument_list|(
name|regionState
argument_list|,
name|states
argument_list|)
return|;
block|}
comment|/**    * Wait for the state map to be updated by assignment manager.    */
specifier|public
specifier|synchronized
name|void
name|waitForUpdate
parameter_list|(
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get region transition state    */
specifier|public
name|RegionState
name|getRegionTransitionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|getRegionTransitionState
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get region transition state    */
specifier|public
specifier|synchronized
name|RegionState
name|getRegionTransitionState
parameter_list|(
specifier|final
name|String
name|encodedName
parameter_list|)
block|{
return|return
name|regionsInTransition
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
return|;
block|}
comment|/**    * Add a list of regions to RegionStates. If a region is split    * and offline, its state will be SPLIT. Otherwise, its state will    * be OFFLINE. Region already in RegionStates will be skipped.    */
specifier|public
name|void
name|createRegionStates
parameter_list|(
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
parameter_list|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|hris
control|)
block|{
name|createRegionState
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a region to RegionStates. If the region is split    * and offline, its state will be SPLIT. Otherwise, its state will    * be OFFLINE. If it is already in RegionStates, this call has    * no effect, and the original state is returned.    */
specifier|public
name|RegionState
name|createRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|createRegionState
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Add a region to RegionStates with the specified state.    * If the region is already in RegionStates, this call has    * no effect, and the original state is returned.    *    * @param hri the region info to create a state for    * @param newState the state to the region in set to    * @param serverName the server the region is transitioning on    * @param lastHost the last server that hosts the region    * @return the current state    */
specifier|public
specifier|synchronized
name|RegionState
name|createRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|State
name|newState
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|ServerName
name|lastHost
parameter_list|)
block|{
if|if
condition|(
name|newState
operator|==
literal|null
operator|||
operator|(
name|newState
operator|==
name|State
operator|.
name|OPEN
operator|&&
name|serverName
operator|==
literal|null
operator|)
condition|)
block|{
name|newState
operator|=
name|State
operator|.
name|OFFLINE
expr_stmt|;
block|}
if|if
condition|(
name|hri
operator|.
name|isOffline
argument_list|()
operator|&&
name|hri
operator|.
name|isSplit
argument_list|()
condition|)
block|{
name|newState
operator|=
name|State
operator|.
name|SPLIT
expr_stmt|;
name|serverName
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|encodedName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|RegionState
name|regionState
init|=
name|regionStates
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionState
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Tried to create a state for a region already in RegionStates, "
operator|+
literal|"used existing: "
operator|+
name|regionState
operator|+
literal|", ignored new: "
operator|+
name|newState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionState
operator|=
operator|new
name|RegionState
argument_list|(
name|hri
argument_list|,
name|newState
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|regionStates
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
name|regionState
argument_list|)
expr_stmt|;
if|if
condition|(
name|newState
operator|==
name|State
operator|.
name|OPEN
condition|)
block|{
if|if
condition|(
operator|!
name|serverName
operator|.
name|equals
argument_list|(
name|lastHost
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Open region's last host "
operator|+
name|lastHost
operator|+
literal|" should be the same as the current one "
operator|+
name|serverName
operator|+
literal|", ignored the last and used the current one"
argument_list|)
expr_stmt|;
name|lastHost
operator|=
name|serverName
expr_stmt|;
block|}
name|lastAssignments
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
name|lastHost
argument_list|)
expr_stmt|;
name|regionAssignments
operator|.
name|put
argument_list|(
name|hri
argument_list|,
name|lastHost
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isOneOfStates
argument_list|(
name|regionState
argument_list|,
name|State
operator|.
name|MERGED
argument_list|,
name|State
operator|.
name|SPLIT
argument_list|,
name|State
operator|.
name|OFFLINE
argument_list|)
condition|)
block|{
name|regionsInTransition
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
name|regionState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastHost
operator|!=
literal|null
operator|&&
name|newState
operator|!=
name|State
operator|.
name|SPLIT
condition|)
block|{
name|addToServerHoldings
argument_list|(
name|lastHost
argument_list|,
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|newState
operator|!=
name|State
operator|.
name|OPEN
condition|)
block|{
name|oldAssignments
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
name|lastHost
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|regionState
return|;
block|}
comment|/**    * Update a region state. It will be put in transition if not already there.    */
specifier|public
name|RegionState
name|updateRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|State
name|state
parameter_list|)
block|{
name|RegionState
name|regionState
init|=
name|getRegionState
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|state
argument_list|,
name|regionState
operator|==
literal|null
condition|?
literal|null
else|:
name|regionState
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Update a region state. It will be put in transition if not already there.    */
specifier|public
name|RegionState
name|updateRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|State
name|state
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|state
argument_list|,
name|serverName
argument_list|,
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|)
return|;
block|}
specifier|public
name|void
name|regionOnline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|regionOnline
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|)
expr_stmt|;
block|}
comment|/**    * A region is online, won't be in transition any more.    * We can't confirm it is really online on specified region server    * because it hasn't been put in region server's online region list yet.    */
specifier|public
name|void
name|regionOnline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
name|long
name|openSeqNum
parameter_list|)
block|{
name|String
name|encodedName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
comment|// This is possible if the region server dies before master gets a
comment|// chance to handle ZK event in time. At this time, if the dead server
comment|// is already processed by SSH, we should ignore this event.
comment|// If not processed yet, ignore and let SSH deal with it.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignored, "
operator|+
name|encodedName
operator|+
literal|" was opened on a dead server: "
operator|+
name|serverName
argument_list|)
expr_stmt|;
return|return;
block|}
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|OPEN
argument_list|,
name|serverName
argument_list|,
name|openSeqNum
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|regionsInTransition
operator|.
name|remove
argument_list|(
name|encodedName
argument_list|)
expr_stmt|;
name|ServerName
name|oldServerName
init|=
name|regionAssignments
operator|.
name|put
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serverName
operator|.
name|equals
argument_list|(
name|oldServerName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Onlined "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" on "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|addToServerHoldings
argument_list|(
name|serverName
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|addToReplicaMapping
argument_list|(
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldServerName
operator|==
literal|null
condition|)
block|{
name|oldServerName
operator|=
name|oldAssignments
operator|.
name|remove
argument_list|(
name|encodedName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldServerName
operator|!=
literal|null
operator|&&
name|serverHoldings
operator|.
name|containsKey
argument_list|(
name|oldServerName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Offlined "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" from "
operator|+
name|oldServerName
argument_list|)
expr_stmt|;
name|removeFromServerHoldings
argument_list|(
name|oldServerName
argument_list|,
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|addToServerHoldings
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
name|regions
operator|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|serverHoldings
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
name|regions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addToReplicaMapping
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|HRegionInfo
name|defaultReplica
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|replicas
init|=
name|defaultReplicaToOtherReplicas
operator|.
name|get
argument_list|(
name|defaultReplica
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicas
operator|==
literal|null
condition|)
block|{
name|replicas
operator|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|defaultReplicaToOtherReplicas
operator|.
name|put
argument_list|(
name|defaultReplica
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
block|}
name|replicas
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeFromServerHoldings
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|oldRegions
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|oldRegions
operator|.
name|remove
argument_list|(
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldRegions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|serverHoldings
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeFromReplicaMapping
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|HRegionInfo
name|defaultReplica
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|replicas
init|=
name|defaultReplicaToOtherReplicas
operator|.
name|get
argument_list|(
name|defaultReplica
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicas
operator|!=
literal|null
condition|)
block|{
name|replicas
operator|.
name|remove
argument_list|(
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultReplicaToOtherReplicas
operator|.
name|remove
argument_list|(
name|defaultReplica
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A dead server's wals have been split so that all the regions    * used to be open on it can be safely assigned now. Mark them assignable.    */
specifier|public
specifier|synchronized
name|void
name|logSplit
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|it
init|=
name|lastAssignments
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ServerName
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding to processed servers "
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
name|processedServers
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|server
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|long
name|obsoleteTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|LOG_SPLIT_TIME
argument_list|,
name|DEFAULT_LOG_SPLIT_TIME
argument_list|)
decl_stmt|;
comment|// Doesn't have to be very accurate about the clean up time
if|if
condition|(
name|now
operator|>
name|lastProcessedServerCleanTime
operator|+
name|obsoleteTime
condition|)
block|{
name|lastProcessedServerCleanTime
operator|=
name|now
expr_stmt|;
name|long
name|cutoff
init|=
name|now
operator|-
name|obsoleteTime
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Long
argument_list|>
argument_list|>
name|it
init|=
name|processedServers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Long
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
name|cutoff
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed from processed servers "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Log split is done for a given region, so it is assignable now.    */
specifier|public
name|void
name|logSplit
parameter_list|(
specifier|final
name|HRegionInfo
name|region
parameter_list|)
block|{
name|clearLastAssignment
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|clearLastAssignment
parameter_list|(
specifier|final
name|HRegionInfo
name|region
parameter_list|)
block|{
name|lastAssignments
operator|.
name|remove
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A region is offline, won't be in transition any more.    */
specifier|public
name|void
name|regionOffline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|regionOffline
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * A region is offline, won't be in transition any more. Its state    * should be the specified expected state, which can only be    * Split/Merged/Offline/null(=Offline)/SplittingNew/MergingNew.    */
specifier|public
name|void
name|regionOffline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|State
name|expectedState
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|expectedState
operator|==
literal|null
operator|||
name|RegionState
operator|.
name|isUnassignable
argument_list|(
name|expectedState
argument_list|)
argument_list|,
literal|"Offlined region should not be "
operator|+
name|expectedState
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRegionInState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|SPLITTING_NEW
argument_list|,
name|State
operator|.
name|MERGING_NEW
argument_list|)
condition|)
block|{
comment|// Remove it from all region maps
name|deleteRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
return|return;
block|}
name|State
name|newState
init|=
name|expectedState
operator|==
literal|null
condition|?
name|State
operator|.
name|OFFLINE
else|:
name|expectedState
decl_stmt|;
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|newState
argument_list|)
expr_stmt|;
name|String
name|encodedName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|regionsInTransition
operator|.
name|remove
argument_list|(
name|encodedName
argument_list|)
expr_stmt|;
name|ServerName
name|oldServerName
init|=
name|regionAssignments
operator|.
name|remove
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldServerName
operator|!=
literal|null
operator|&&
name|serverHoldings
operator|.
name|containsKey
argument_list|(
name|oldServerName
argument_list|)
condition|)
block|{
if|if
condition|(
name|newState
operator|==
name|State
operator|.
name|MERGED
operator|||
name|newState
operator|==
name|State
operator|.
name|SPLIT
operator|||
name|hri
operator|.
name|isMetaRegion
argument_list|()
operator|||
name|tableStateManager
operator|.
name|isTableState
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLING
argument_list|)
condition|)
block|{
comment|// Offline the region only if it's merged/split, or the table is disabled/disabling.
comment|// Otherwise, offline it from this server only when it is online on a different server.
name|LOG
operator|.
name|info
argument_list|(
literal|"Offlined "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" from "
operator|+
name|oldServerName
argument_list|)
expr_stmt|;
name|removeFromServerHoldings
argument_list|(
name|oldServerName
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|removeFromReplicaMapping
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Need to remember it so that we can offline it from this
comment|// server when it is online on a different server.
name|oldAssignments
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
name|oldServerName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * A server is offline, all regions on it are dead.    */
specifier|public
specifier|synchronized
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|serverOffline
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
comment|// Offline all regions on this server not already in transition.
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|rits
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|assignedRegions
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignedRegions
operator|==
literal|null
condition|)
block|{
name|assignedRegions
operator|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Offline regions outside the loop to avoid ConcurrentModificationException
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToOffline
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|assignedRegions
control|)
block|{
comment|// Offline open regions, no need to offline if SPLIT/MERGED/OFFLINE
if|if
condition|(
name|isRegionOnline
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|regionsToOffline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isRegionInState
argument_list|(
name|region
argument_list|,
name|State
operator|.
name|SPLITTING
argument_list|,
name|State
operator|.
name|MERGING
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Offline splitting/merging region "
operator|+
name|getRegionState
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|regionsToOffline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionsToOffline
control|)
block|{
name|regionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RegionState
name|state
range|:
name|regionsInTransition
operator|.
name|values
argument_list|()
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|state
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignedRegions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
condition|)
block|{
comment|// Region is open on this region server, but in transition.
comment|// This region must be moving away from this server, or splitting/merging.
comment|// SSH will handle it, either skip assigning, or re-assign.
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioning "
operator|+
name|state
operator|+
literal|" will be handled by SSH for "
operator|+
name|sn
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sn
operator|.
name|equals
argument_list|(
name|state
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Region is in transition on this region server, and this
comment|// region is not open on this server. So the region must be
comment|// moving to this server from another one (i.e. opening or
comment|// pending open on this server, was open on another one.
comment|// Offline state is also kind of pending open if the region is in
comment|// transition. The region could be in failed_close state too if we have
comment|// tried several times to open it while this region server is not reachable)
if|if
condition|(
name|isOneOfStates
argument_list|(
name|state
argument_list|,
name|State
operator|.
name|OPENING
argument_list|,
name|State
operator|.
name|PENDING_OPEN
argument_list|,
name|State
operator|.
name|FAILED_OPEN
argument_list|,
name|State
operator|.
name|FAILED_CLOSE
argument_list|,
name|State
operator|.
name|OFFLINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found region in "
operator|+
name|state
operator|+
literal|" to be reassigned by SSH for "
operator|+
name|sn
argument_list|)
expr_stmt|;
name|rits
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"THIS SHOULD NOT HAPPEN: unexpected "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|rits
return|;
block|}
comment|/**    * Gets the online regions of the specified table.    * This method looks at the in-memory state.  It does not go to<code>hbase:meta</code>.    * Only returns<em>online</em> regions.  If a region on this table has been    * closed during a disable, etc., it will be included in the returned list.    * So, the returned list may not necessarily be ALL regions in this table, its    * all the ONLINE regions in the table.    * @param tableName    * @return Online regions from<code>tableName</code>    */
specifier|public
specifier|synchronized
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getRegionsOfTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|tableRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// boundary needs to have table's name but regionID 0 so that it is sorted
comment|// before all table's regions.
name|HRegionInfo
name|boundary
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionAssignments
operator|.
name|tailMap
argument_list|(
name|boundary
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
break|break;
name|tableRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
return|return
name|tableRegions
return|;
block|}
comment|/**    * Wait on region to clear regions-in-transition.    *<p>    * If the region isn't in transition, returns immediately.  Otherwise, method    * blocks until the region is out of transition.    */
specifier|public
specifier|synchronized
name|void
name|waitOnRegionToClearRegionsInTransition
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
condition|)
return|return;
while|while
condition|(
operator|!
name|server
operator|.
name|isStopped
argument_list|()
operator|&&
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|RegionState
name|rs
init|=
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on "
operator|+
name|rs
operator|+
literal|" to clear regions-in-transition"
argument_list|)
expr_stmt|;
name|waitForUpdate
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Giving up wait on region in "
operator|+
literal|"transition because stoppable.isStopped is set"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A table is deleted. Remove its regions from all internal maps.    * We loop through all regions assuming we don't delete tables too much.    */
specifier|public
name|void
name|tableDeleted
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToDelete
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|RegionState
name|state
range|:
name|regionStates
operator|.
name|values
argument_list|()
control|)
block|{
name|HRegionInfo
name|region
init|=
name|state
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|regionsToDelete
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regionsToDelete
control|)
block|{
name|deleteRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a copy of all regions assigned to a server    */
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|getServerRegions
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|regions
argument_list|)
return|;
block|}
comment|/**    * Remove a region from all state maps.    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|synchronized
name|void
name|deleteRegion
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|String
name|encodedName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|regionsInTransition
operator|.
name|remove
argument_list|(
name|encodedName
argument_list|)
expr_stmt|;
name|regionStates
operator|.
name|remove
argument_list|(
name|encodedName
argument_list|)
expr_stmt|;
name|lastAssignments
operator|.
name|remove
argument_list|(
name|encodedName
argument_list|)
expr_stmt|;
name|ServerName
name|sn
init|=
name|regionAssignments
operator|.
name|remove
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|regions
operator|.
name|remove
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checking if a region was assigned to a server which is not online now.    * If so, we should hold re-assign this region till SSH has split its wals.    * Once logs are split, the last assignment of this region will be reset,    * which means a null last assignment server is ok for re-assigning.    *    * A region server could be dead but we don't know it yet. We may    * think it's online falsely. Therefore if a server is online, we still    * need to confirm it reachable and having the expected start code.    */
specifier|synchronized
name|boolean
name|wasRegionOnDeadServer
parameter_list|(
specifier|final
name|String
name|encodedName
parameter_list|)
block|{
name|ServerName
name|server
init|=
name|lastAssignments
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
return|return
name|isServerDeadAndNotProcessed
argument_list|(
name|server
argument_list|)
return|;
block|}
specifier|synchronized
name|boolean
name|isServerDeadAndNotProcessed
parameter_list|(
name|ServerName
name|server
parameter_list|)
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|String
name|hostAndPort
init|=
name|server
operator|.
name|getHostAndPort
argument_list|()
decl_stmt|;
name|long
name|startCode
init|=
name|server
operator|.
name|getStartcode
argument_list|()
decl_stmt|;
name|Long
name|deadCode
init|=
name|deadServers
operator|.
name|get
argument_list|(
name|hostAndPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|deadCode
operator|==
literal|null
operator|||
name|startCode
operator|>
name|deadCode
operator|.
name|longValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|serverManager
operator|.
name|isServerReachable
argument_list|(
name|server
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// The size of deadServers won't grow unbounded.
name|deadServers
operator|.
name|put
argument_list|(
name|hostAndPort
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|startCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Watch out! If the server is not dead, the region could
comment|// remain unassigned. That's why ServerManager#isServerReachable
comment|// should use some retry.
comment|//
comment|// We cache this info since it is very unlikely for that
comment|// instance to come back up later on. We don't want to expire
comment|// the server since we prefer to let it die naturally.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't reach online server "
operator|+
name|server
argument_list|)
expr_stmt|;
block|}
comment|// Now, we know it's dead. Check if it's processed
return|return
operator|!
name|processedServers
operator|.
name|containsKey
argument_list|(
name|server
argument_list|)
return|;
block|}
comment|/**    * Get the last region server a region was on for purpose of re-assignment,    * i.e. should the re-assignment be held back till log split is done?    */
specifier|synchronized
name|ServerName
name|getLastRegionServerOfRegion
parameter_list|(
specifier|final
name|String
name|encodedName
parameter_list|)
block|{
return|return
name|lastAssignments
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
return|;
block|}
specifier|synchronized
name|void
name|setLastRegionServerOfRegions
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfos
parameter_list|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionInfos
control|)
block|{
name|setLastRegionServerOfRegion
argument_list|(
name|serverName
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
name|void
name|setLastRegionServerOfRegion
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|String
name|encodedName
parameter_list|)
block|{
name|lastAssignments
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|isRegionOnServer
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
return|return
name|regions
operator|==
literal|null
condition|?
literal|false
else|:
name|regions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
return|;
block|}
name|void
name|splitRegion
parameter_list|(
name|HRegionInfo
name|p
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|regionStateStore
operator|.
name|splitRegion
argument_list|(
name|p
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|sn
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// After PONR, split is considered to be done.
comment|// Update server holdings to be aligned with the meta.
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|sn
operator|+
literal|" should host some regions"
argument_list|)
throw|;
block|}
name|regions
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|mergeRegions
parameter_list|(
name|HRegionInfo
name|p
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|regionStateStore
operator|.
name|mergeRegions
argument_list|(
name|p
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|sn
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// After PONR, merge is considered to be done.
comment|// Update server holdings to be aligned with the meta.
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|sn
operator|+
literal|" should host some regions"
argument_list|)
throw|;
block|}
name|regions
operator|.
name|remove
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|regions
operator|.
name|remove
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * At cluster clean re/start, mark all user regions closed except those of tables    * that are excluded, such as disabled/disabling/enabling tables. All user regions    * and their previous locations are returned.    */
specifier|synchronized
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|closeAllUserRegions
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|excludedTables
parameter_list|)
block|{
name|boolean
name|noExcludeTables
init|=
name|excludedTables
operator|==
literal|null
operator|||
name|excludedTables
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|toBeClosed
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|regionStates
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionState
name|state
range|:
name|regionStates
operator|.
name|values
argument_list|()
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|state
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|isSplit
argument_list|()
operator|||
name|hri
operator|.
name|isSplit
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|TableName
name|tableName
init|=
name|hri
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
operator|&&
operator|(
name|noExcludeTables
operator|||
operator|!
name|excludedTables
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
operator|)
condition|)
block|{
name|toBeClosed
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|allUserRegions
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|toBeClosed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|toBeClosed
control|)
block|{
name|RegionState
name|regionState
init|=
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
name|allUserRegions
operator|.
name|put
argument_list|(
name|hri
argument_list|,
name|regionState
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|allUserRegions
return|;
block|}
comment|/**    * Compute the average load across all region servers.    * Currently, this uses a very naive computation - just uses the number of    * regions being served, ignoring stats about number of requests.    * @return the average load    */
specifier|protected
specifier|synchronized
name|double
name|getAverageLoad
parameter_list|()
block|{
name|int
name|numServers
init|=
literal|0
decl_stmt|,
name|totalLoad
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|e
range|:
name|serverHoldings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|regionCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|totalLoad
operator|+=
name|regionCount
expr_stmt|;
name|numServers
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numServers
operator|>
literal|1
condition|)
block|{
comment|// The master region server holds only a couple regions.
comment|// Don't consider this server in calculating the average load
comment|// if there are other region servers to avoid possible confusion.
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hris
operator|!=
literal|null
condition|)
block|{
name|totalLoad
operator|-=
name|hris
operator|.
name|size
argument_list|()
expr_stmt|;
name|numServers
operator|--
expr_stmt|;
block|}
block|}
return|return
name|numServers
operator|==
literal|0
condition|?
literal|0.0
else|:
operator|(
name|double
operator|)
name|totalLoad
operator|/
operator|(
name|double
operator|)
name|numServers
return|;
block|}
comment|/**    * This is an EXPENSIVE clone.  Cloning though is the safest thing to do.    * Can't let out original since it can change and at least the load balancer    * wants to iterate this exported list.  We need to synchronize on regions    * since all access to this.servers is under a lock on this.regions.    *    * @return A clone of current assignments by table.    */
specifier|protected
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|getAssignmentsByTable
parameter_list|()
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hbase.master.loadbalance.bytable"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|svrToRegions
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|(
name|serverHoldings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|e
range|:
name|serverHoldings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|svrToRegions
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ensemble"
argument_list|)
argument_list|,
name|svrToRegions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|e
range|:
name|serverHoldings
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|)
continue|continue;
name|TableName
name|tablename
init|=
name|hri
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|svrToRegions
init|=
name|result
operator|.
name|get
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
if|if
condition|(
name|svrToRegions
operator|==
literal|null
condition|)
block|{
name|svrToRegions
operator|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|(
name|serverHoldings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|tablename
argument_list|,
name|svrToRegions
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|svrToRegions
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
name|regions
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|svrToRegions
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
name|regions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|onlineSvrs
init|=
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
decl_stmt|;
comment|// Take care of servers w/o assignments.
for|for
control|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|map
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ServerName
name|svr
range|:
name|onlineSvrs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|svr
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|svr
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|RegionState
name|getRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|getRegionState
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a clone of region assignments per server    * @return a Map of ServerName to a List of HRegionInfo's    */
specifier|protected
specifier|synchronized
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|getRegionAssignmentsByServer
parameter_list|()
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|regionsByServer
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|(
name|serverHoldings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|e
range|:
name|serverHoldings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|regionsByServer
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|regionsByServer
return|;
block|}
specifier|protected
specifier|synchronized
name|RegionState
name|getRegionState
parameter_list|(
specifier|final
name|String
name|encodedName
parameter_list|)
block|{
return|return
name|regionStates
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
return|;
block|}
comment|/**    * Get the HRegionInfo from cache, if not there, from the hbase:meta table    * @param  regionName    * @return HRegionInfo for the region    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|protected
name|HRegionInfo
name|getRegionInfo
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|String
name|encodedName
init|=
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|RegionState
name|regionState
init|=
name|getRegionState
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionState
operator|!=
literal|null
condition|)
block|{
return|return
name|regionState
operator|.
name|getRegion
argument_list|()
return|;
block|}
try|try
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|server
operator|.
name|getConnection
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|hri
operator|!=
literal|null
condition|)
block|{
name|createRegionState
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
return|return
name|hri
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|server
operator|.
name|abort
argument_list|(
literal|"Aborting because error occoured while reading "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
operator|+
literal|" from hbase:meta"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|boolean
name|isOneOfStates
parameter_list|(
name|RegionState
name|regionState
parameter_list|,
name|State
modifier|...
name|states
parameter_list|)
block|{
name|State
name|s
init|=
name|regionState
operator|!=
literal|null
condition|?
name|regionState
operator|.
name|getState
argument_list|()
else|:
literal|null
decl_stmt|;
for|for
control|(
name|State
name|state
range|:
name|states
control|)
block|{
if|if
condition|(
name|s
operator|==
name|state
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Update a region state. It will be put in transition if not already there.    */
specifier|private
name|RegionState
name|updateRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|RegionState
operator|.
name|State
name|state
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
name|long
name|openSeqNum
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|RegionState
operator|.
name|State
operator|.
name|FAILED_CLOSE
operator|||
name|state
operator|==
name|RegionState
operator|.
name|State
operator|.
name|FAILED_OPEN
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to open/close "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" on "
operator|+
name|serverName
operator|+
literal|", set to "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
name|String
name|encodedName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|RegionState
name|regionState
init|=
operator|new
name|RegionState
argument_list|(
name|hri
argument_list|,
name|state
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
name|RegionState
name|oldState
init|=
name|getRegionState
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|regionState
operator|.
name|equals
argument_list|(
name|oldState
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Transition "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|regionState
argument_list|)
expr_stmt|;
comment|// Persist region state before updating in-memory info, if needed
name|regionStateStore
operator|.
name|updateRegionState
argument_list|(
name|openSeqNum
argument_list|,
name|regionState
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|regionsInTransition
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
name|regionState
argument_list|)
expr_stmt|;
name|regionStates
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
name|regionState
argument_list|)
expr_stmt|;
comment|// For these states, region should be properly closed.
comment|// There should be no log splitting issue.
if|if
condition|(
operator|(
name|state
operator|==
name|State
operator|.
name|CLOSED
operator|||
name|state
operator|==
name|State
operator|.
name|MERGED
operator|||
name|state
operator|==
name|State
operator|.
name|SPLIT
operator|)
operator|&&
name|lastAssignments
operator|.
name|containsKey
argument_list|(
name|encodedName
argument_list|)
condition|)
block|{
name|ServerName
name|last
init|=
name|lastAssignments
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|lastAssignments
operator|.
name|remove
argument_list|(
name|encodedName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|encodedName
operator|+
literal|" moved to "
operator|+
name|state
operator|+
literal|" on "
operator|+
name|serverName
operator|+
literal|", expected "
operator|+
name|last
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Once a region is opened, record its last assignment right away.
if|if
condition|(
name|serverName
operator|!=
literal|null
operator|&&
name|state
operator|==
name|State
operator|.
name|OPEN
condition|)
block|{
name|ServerName
name|last
init|=
name|lastAssignments
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serverName
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|)
block|{
name|lastAssignments
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|isServerDeadAndNotProcessed
argument_list|(
name|last
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|encodedName
operator|+
literal|" moved to "
operator|+
name|serverName
operator|+
literal|", while it's previous host "
operator|+
name|last
operator|+
literal|" is dead but not processed yet"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// notify the change
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
return|return
name|regionState
return|;
block|}
block|}
end_class

end_unit

