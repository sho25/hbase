begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Region state accountant. It holds the states of all regions in the memory.  * In normal scenario, it should match the meta table and the true region states.  *  * This map is used by AssignmentManager to track region states.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionStates
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionStates
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Regions currently in transition.    */
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|regionsInTransition
decl_stmt|;
comment|/**    * Region encoded name to state map.    * All the regions should be in this map.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|regionStates
decl_stmt|;
comment|/**    * Server to regions assignment map.    * Contains the set of regions currently assigned to a given server.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serverHoldings
decl_stmt|;
comment|/**    * Region to server assignment map.    * Contains the server a given region is currently assigned to.    */
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionAssignments
decl_stmt|;
specifier|private
specifier|final
name|ServerManager
name|serverManager
decl_stmt|;
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
name|RegionStates
parameter_list|(
specifier|final
name|Server
name|master
parameter_list|,
specifier|final
name|ServerManager
name|serverManager
parameter_list|)
block|{
name|regionStates
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
argument_list|()
expr_stmt|;
name|regionsInTransition
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
argument_list|()
expr_stmt|;
name|serverHoldings
operator|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|regionAssignments
operator|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverManager
operator|=
name|serverManager
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|master
expr_stmt|;
block|}
comment|/**    * @return an unmodifiable the region assignment map    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getRegionAssignments
parameter_list|()
block|{
return|return
operator|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
operator|)
name|regionAssignments
operator|.
name|clone
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|ServerName
name|getRegionServerOfRegion
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|regionAssignments
operator|.
name|get
argument_list|(
name|hri
argument_list|)
return|;
block|}
comment|/**    * Get regions in transition and their states    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|getRegionsInTransition
parameter_list|()
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
operator|)
name|regionsInTransition
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/**    * @return True if specified region in transition.    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionInTransition
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|regionsInTransition
operator|.
name|containsKey
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return True if specified region in transition.    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionInTransition
parameter_list|(
specifier|final
name|String
name|regionName
parameter_list|)
block|{
return|return
name|regionsInTransition
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
return|;
block|}
comment|/**    * @return True if any region in transition.    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionsInTransition
parameter_list|()
block|{
return|return
operator|!
name|regionsInTransition
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * @return True if specified region assigned.    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionAssigned
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|regionAssignments
operator|.
name|containsKey
argument_list|(
name|hri
argument_list|)
return|;
block|}
comment|/**    * @return True if specified region is in specified state    */
specifier|public
specifier|synchronized
name|boolean
name|isRegionInState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|State
name|state
parameter_list|)
block|{
name|RegionState
name|regionState
init|=
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|State
name|s
init|=
name|regionState
operator|!=
literal|null
condition|?
name|regionState
operator|.
name|getState
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
name|s
operator|==
name|state
return|;
block|}
comment|/**    * Wait for the state map to be updated by assignment manager.    */
specifier|public
specifier|synchronized
name|void
name|waitForUpdate
parameter_list|(
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get region transition state    */
specifier|public
specifier|synchronized
name|RegionState
name|getRegionTransitionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|regionsInTransition
operator|.
name|get
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get region transition state    */
specifier|public
specifier|synchronized
name|RegionState
name|getRegionTransitionState
parameter_list|(
specifier|final
name|String
name|regionName
parameter_list|)
block|{
return|return
name|regionsInTransition
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
return|;
block|}
comment|/**    * Add a list of regions to RegionStates. The initial state is OFFLINE.    * If any region is already in RegionStates, that region will be skipped.    */
specifier|public
specifier|synchronized
name|void
name|createRegionStates
parameter_list|(
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
parameter_list|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|hris
control|)
block|{
name|createRegionState
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a region to RegionStates. The initial state is OFFLINE.    * If it is already in RegionStates, this call has no effect,    * and the original state is returned.    */
specifier|public
specifier|synchronized
name|RegionState
name|createRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|String
name|regionName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|RegionState
name|regionState
init|=
name|regionStates
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionState
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Tried to create a state of a region already in RegionStates, "
operator|+
literal|"used existing state: "
operator|+
name|regionState
operator|+
literal|", ignored new state: state=OFFLINE, server=null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionState
operator|=
operator|new
name|RegionState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|OFFLINE
argument_list|)
expr_stmt|;
name|regionStates
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|regionState
argument_list|)
expr_stmt|;
block|}
return|return
name|regionState
return|;
block|}
comment|/**    * Update a region state. It will be put in transition if not already there.    */
specifier|public
specifier|synchronized
name|RegionState
name|updateRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|State
name|state
parameter_list|)
block|{
name|RegionState
name|regionState
init|=
name|regionStates
operator|.
name|get
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|serverName
init|=
operator|(
name|regionState
operator|==
literal|null
operator|||
name|state
operator|==
name|State
operator|.
name|CLOSED
operator|||
name|state
operator|==
name|State
operator|.
name|OFFLINE
operator|)
condition|?
literal|null
else|:
name|regionState
operator|.
name|getServerName
argument_list|()
decl_stmt|;
return|return
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|state
argument_list|,
name|serverName
argument_list|)
return|;
block|}
comment|/**    * Update a region state. It will be put in transition if not already there.    *    * If we can't find the region info based on the region name in    * the transition, log a warning and return null.    */
specifier|public
specifier|synchronized
name|RegionState
name|updateRegionState
parameter_list|(
specifier|final
name|RegionTransition
name|transition
parameter_list|,
specifier|final
name|State
name|state
parameter_list|)
block|{
name|byte
index|[]
name|regionName
init|=
name|transition
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
block|{
name|String
name|prettyRegionName
init|=
name|HRegionInfo
operator|.
name|prettyPrint
argument_list|(
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regionName
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to find region "
operator|+
name|prettyRegionName
operator|+
literal|" in updating its state to "
operator|+
name|state
operator|+
literal|" based on region transition "
operator|+
name|transition
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|updateRegionState
argument_list|(
name|regionInfo
argument_list|,
name|state
argument_list|,
name|transition
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Update a region state. It will be put in transition if not already there.    */
specifier|public
specifier|synchronized
name|RegionState
name|updateRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|State
name|state
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|ServerName
name|newServerName
init|=
name|serverName
decl_stmt|;
if|if
condition|(
name|serverName
operator|!=
literal|null
operator|&&
operator|(
name|state
operator|==
name|State
operator|.
name|CLOSED
operator|||
name|state
operator|==
name|State
operator|.
name|OFFLINE
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Closed region "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" still on "
operator|+
name|serverName
operator|+
literal|"? Ignored, reset it to null"
argument_list|)
expr_stmt|;
name|newServerName
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|FAILED_CLOSE
operator|||
name|state
operator|==
name|State
operator|.
name|FAILED_OPEN
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to transition "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" on "
operator|+
name|serverName
operator|+
literal|", set to "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
name|String
name|regionName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|RegionState
name|regionState
init|=
operator|new
name|RegionState
argument_list|(
name|hri
argument_list|,
name|state
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|newServerName
argument_list|)
decl_stmt|;
name|RegionState
name|oldState
init|=
name|regionStates
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|regionState
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldState
operator|==
literal|null
operator|||
name|oldState
operator|.
name|getState
argument_list|()
operator|!=
name|regionState
operator|.
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|regionState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newServerName
operator|!=
literal|null
operator|||
operator|(
name|state
operator|!=
name|State
operator|.
name|PENDING_CLOSE
operator|&&
name|state
operator|!=
name|State
operator|.
name|CLOSING
operator|)
condition|)
block|{
name|regionsInTransition
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|regionState
argument_list|)
expr_stmt|;
block|}
comment|// notify the change
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|regionState
return|;
block|}
comment|/**    * A region is online, won't be in transition any more.    * We can't confirm it is really online on specified region server    * because it hasn't been put in region server's online region list yet.    */
specifier|public
specifier|synchronized
name|void
name|regionOnline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|String
name|regionName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|RegionState
name|oldState
init|=
name|regionStates
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldState
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Online a region not in RegionStates: "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|State
name|state
init|=
name|oldState
operator|.
name|getState
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|oldState
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|State
operator|.
name|OPEN
operator|||
name|sn
operator|==
literal|null
operator|||
operator|!
name|sn
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Online a region "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" with current state="
operator|+
name|state
operator|+
literal|", expected state=OPEN"
operator|+
literal|", assigned to server: "
operator|+
name|sn
operator|+
literal|" expected "
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|OPEN
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|regionsInTransition
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|ServerName
name|oldServerName
init|=
name|regionAssignments
operator|.
name|put
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serverName
operator|.
name|equals
argument_list|(
name|oldServerName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Onlined "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" on "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|serverHoldings
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
name|regions
operator|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|serverHoldings
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
name|regions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldServerName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Offlined "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" from "
operator|+
name|oldServerName
argument_list|)
expr_stmt|;
name|serverHoldings
operator|.
name|get
argument_list|(
name|oldServerName
argument_list|)
operator|.
name|remove
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A region is offline, won't be in transition any more.    */
specifier|public
name|void
name|regionOffline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|regionOffline
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * A region is offline, won't be in transition any more.    * Its state should be the specified expected state, which    * can be Split/Merged/Offline/null(=Offline) only.    */
specifier|public
specifier|synchronized
name|void
name|regionOffline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|State
name|expectedState
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|expectedState
operator|==
literal|null
operator|||
name|expectedState
operator|==
name|State
operator|.
name|OFFLINE
operator|||
name|expectedState
operator|==
name|State
operator|.
name|SPLIT
operator|||
name|expectedState
operator|==
name|State
operator|.
name|MERGED
argument_list|,
literal|"Offlined region should be in state"
operator|+
literal|" OFFLINE/SPLIT/MERGED instead of "
operator|+
name|expectedState
argument_list|)
expr_stmt|;
name|String
name|regionName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|RegionState
name|oldState
init|=
name|regionStates
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldState
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Offline a region not in RegionStates: "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|State
name|state
init|=
name|oldState
operator|.
name|getState
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|oldState
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|State
operator|.
name|OFFLINE
operator|&&
name|state
operator|!=
name|State
operator|.
name|SPLITTING
operator|&&
name|state
operator|!=
name|State
operator|.
name|MERGING
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Offline a region "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" with current state="
operator|+
name|state
operator|+
literal|", expected state=OFFLINE/SPLITTING/MERGING"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sn
operator|!=
literal|null
operator|&&
name|state
operator|==
name|State
operator|.
name|OFFLINE
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Offline a region "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" with current state=OFFLINE, assigned to server: "
operator|+
name|sn
operator|+
literal|", expected null"
argument_list|)
expr_stmt|;
block|}
block|}
name|State
name|newState
init|=
name|expectedState
decl_stmt|;
if|if
condition|(
name|newState
operator|==
literal|null
condition|)
name|newState
operator|=
name|State
operator|.
name|OFFLINE
expr_stmt|;
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|newState
argument_list|)
expr_stmt|;
name|regionsInTransition
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|ServerName
name|oldServerName
init|=
name|regionAssignments
operator|.
name|remove
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldServerName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Offlined "
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" from "
operator|+
name|oldServerName
argument_list|)
expr_stmt|;
name|serverHoldings
operator|.
name|get
argument_list|(
name|oldServerName
argument_list|)
operator|.
name|remove
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A server is offline, all regions on it are dead.    */
specifier|public
specifier|synchronized
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|serverOffline
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|watcher
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
comment|// Clean up this server from map of servers to regions, and remove all regions
comment|// of this server from online map of regions.
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|rits
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|assignedRegions
init|=
name|serverHoldings
operator|.
name|remove
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignedRegions
operator|==
literal|null
condition|)
block|{
name|assignedRegions
operator|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|HRegionInfo
name|region
range|:
name|assignedRegions
control|)
block|{
name|regionAssignments
operator|.
name|remove
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RegionState
name|state
range|:
name|regionsInTransition
operator|.
name|values
argument_list|()
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|state
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignedRegions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
condition|)
block|{
comment|// Region is open on this region server, but in transition.
comment|// This region must be moving away from this server, or splitting/merging.
comment|// SSH will handle it, either skip assigning, or re-assign.
name|LOG
operator|.
name|info
argument_list|(
literal|"Transitioning "
operator|+
name|state
operator|+
literal|" will be handled by SSH for "
operator|+
name|sn
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|isSplitting
argument_list|()
operator|||
name|state
operator|.
name|isMerging
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Offline splitting/merging region "
operator|+
name|state
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Delete the ZNode if exists
name|ZKAssign
operator|.
name|deleteNodeFailSilent
argument_list|(
name|watcher
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|regionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|server
operator|.
name|abort
argument_list|(
literal|"Unexpected ZK exception deleting node "
operator|+
name|hri
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|sn
operator|.
name|equals
argument_list|(
name|state
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Region is in transition on this region server, and this
comment|// region is not open on this server. So the region must be
comment|// moving to this server from another one (i.e. opening or
comment|// pending open on this server, was open on another one
if|if
condition|(
name|state
operator|.
name|isPendingOpen
argument_list|()
operator|||
name|state
operator|.
name|isOpening
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found opening region "
operator|+
name|state
operator|+
literal|" to be reassigned by SSH for "
operator|+
name|sn
argument_list|)
expr_stmt|;
name|rits
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"THIS SHOULD NOT HAPPEN: unexpected state "
operator|+
name|state
operator|+
literal|" of region in transition on server "
operator|+
name|sn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assignedRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|rits
return|;
block|}
comment|/**    * Gets the online regions of the specified table.    * This method looks at the in-memory state.  It does not go to<code>.META.</code>.    * Only returns<em>online</em> regions.  If a region on this table has been    * closed during a disable, etc., it will be included in the returned list.    * So, the returned list may not necessarily be ALL regions in this table, its    * all the ONLINE regions in the table.    * @param tableName    * @return Online regions from<code>tableName</code>    */
specifier|public
specifier|synchronized
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getRegionsOfTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|tableRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// boundary needs to have table's name but regionID 0 so that it is sorted
comment|// before all table's regions.
name|HRegionInfo
name|boundary
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionAssignments
operator|.
name|tailMap
argument_list|(
name|boundary
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
break|break;
name|tableRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
return|return
name|tableRegions
return|;
block|}
comment|/**    * Wait on region to clear regions-in-transition.    *<p>    * If the region isn't in transition, returns immediately.  Otherwise, method    * blocks until the region is out of transition.    */
specifier|public
specifier|synchronized
name|void
name|waitOnRegionToClearRegionsInTransition
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
condition|)
return|return;
while|while
condition|(
operator|!
name|server
operator|.
name|isStopped
argument_list|()
operator|&&
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|RegionState
name|rs
init|=
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on "
operator|+
name|rs
operator|+
literal|" to clear regions-in-transition"
argument_list|)
expr_stmt|;
name|waitForUpdate
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Giving up wait on region in "
operator|+
literal|"transition because stoppable.isStopped is set"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Waits until the specified region has completed assignment.    *<p>    * If the region is already assigned, returns immediately.  Otherwise, method    * blocks until the region is assigned.    */
specifier|public
specifier|synchronized
name|void
name|waitForAssignment
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|isRegionAssigned
argument_list|(
name|hri
argument_list|)
condition|)
return|return;
while|while
condition|(
operator|!
name|server
operator|.
name|isStopped
argument_list|()
operator|&&
operator|!
name|isRegionAssigned
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|RegionState
name|rs
init|=
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on "
operator|+
name|rs
operator|+
literal|" to be assigned"
argument_list|)
expr_stmt|;
name|waitForUpdate
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Giving up wait on region "
operator|+
literal|"assignment because stoppable.isStopped is set"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compute the average load across all region servers.    * Currently, this uses a very naive computation - just uses the number of    * regions being served, ignoring stats about number of requests.    * @return the average load    */
specifier|protected
specifier|synchronized
name|double
name|getAverageLoad
parameter_list|()
block|{
name|int
name|numServers
init|=
literal|0
decl_stmt|,
name|totalLoad
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|e
range|:
name|serverHoldings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|regionCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionCount
operator|>
literal|0
operator|||
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|totalLoad
operator|+=
name|regionCount
expr_stmt|;
name|numServers
operator|++
expr_stmt|;
block|}
block|}
return|return
name|numServers
operator|==
literal|0
condition|?
literal|0.0
else|:
operator|(
name|double
operator|)
name|totalLoad
operator|/
operator|(
name|double
operator|)
name|numServers
return|;
block|}
comment|/**    * This is an EXPENSIVE clone.  Cloning though is the safest thing to do.    * Can't let out original since it can change and at least the load balancer    * wants to iterate this exported list.  We need to synchronize on regions    * since all access to this.servers is under a lock on this.regions.    *    * @return A clone of current assignments by table.    */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|getAssignmentsByTable
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hbase.master.loadbalance.bytable"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|svrToRegions
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|(
name|serverHoldings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|e
range|:
name|serverHoldings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|svrToRegions
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"ensemble"
argument_list|,
name|svrToRegions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|e
range|:
name|serverHoldings
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|)
continue|continue;
name|String
name|tablename
init|=
name|hri
operator|.
name|getTableNameAsString
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|svrToRegions
init|=
name|result
operator|.
name|get
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
if|if
condition|(
name|svrToRegions
operator|==
literal|null
condition|)
block|{
name|svrToRegions
operator|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|(
name|serverHoldings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|tablename
argument_list|,
name|svrToRegions
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|svrToRegions
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
name|regions
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|svrToRegions
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
name|regions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|onlineSvrs
init|=
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
decl_stmt|;
comment|// Take care of servers w/o assignments.
for|for
control|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|map
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ServerName
name|svr
range|:
name|onlineSvrs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|svr
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|svr
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
specifier|synchronized
name|RegionState
name|getRegionState
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|regionStates
operator|.
name|get
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|synchronized
name|RegionState
name|getRegionState
parameter_list|(
specifier|final
name|String
name|regionName
parameter_list|)
block|{
return|return
name|regionStates
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
return|;
block|}
comment|/**    * Get the HRegionInfo from cache, if not there, from the META table    * @param  regionName    * @return HRegionInfo for the region    */
specifier|protected
name|HRegionInfo
name|getRegionInfo
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|String
name|encodedName
init|=
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|RegionState
name|regionState
init|=
name|regionStates
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionState
operator|!=
literal|null
condition|)
block|{
return|return
name|regionState
operator|.
name|getRegion
argument_list|()
return|;
block|}
try|try
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
init|=
name|MetaReader
operator|.
name|getRegion
argument_list|(
name|server
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|hri
operator|!=
literal|null
condition|)
block|{
name|createRegionState
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
return|return
name|hri
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|server
operator|.
name|abort
argument_list|(
literal|"Aborting because error occoured while reading "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
operator|+
literal|" from .META."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

