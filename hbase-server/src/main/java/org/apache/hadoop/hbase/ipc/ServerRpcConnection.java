begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|RPC_HEADER
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|CryptoCipherFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|crypto
operator|.
name|random
operator|.
name|CryptoRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|crypto
operator|.
name|random
operator|.
name|CryptoRandomFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|VersionInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteBufferOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|aes
operator|.
name|CryptoAES
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|CallCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|SingleByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseSaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|ConnectionHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RequestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|ResponseHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|UserInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_comment
comment|/** Reads calls from a connection and queues them for handling. */
end_comment

begin_class
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"VO_VOLATILE_INCREMENT"
argument_list|,
name|justification
operator|=
literal|"False positive according to http://sourceforge.net/p/findbugs/bugs/1032/"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|abstract
class|class
name|ServerRpcConnection
implements|implements
name|Closeable
block|{
comment|/**  */
specifier|protected
specifier|final
name|RpcServer
name|rpcServer
decl_stmt|;
comment|// If the connection header has been read or not.
specifier|protected
name|boolean
name|connectionHeaderRead
init|=
literal|false
decl_stmt|;
specifier|protected
name|CallCleanup
name|callCleanup
decl_stmt|;
comment|// Cache the remote host& port info so that even if the socket is
comment|// disconnected, we can say where it used to connect to.
specifier|protected
name|String
name|hostAddress
decl_stmt|;
specifier|protected
name|int
name|remotePort
decl_stmt|;
specifier|protected
name|InetAddress
name|addr
decl_stmt|;
specifier|protected
name|ConnectionHeader
name|connectionHeader
decl_stmt|;
comment|/**    * Codec the client asked use.    */
specifier|protected
name|Codec
name|codec
decl_stmt|;
comment|/**    * Compression codec the client asked us use.    */
specifier|protected
name|CompressionCodec
name|compressionCodec
decl_stmt|;
specifier|protected
name|BlockingService
name|service
decl_stmt|;
specifier|protected
name|AuthMethod
name|authMethod
decl_stmt|;
specifier|protected
name|boolean
name|saslContextEstablished
decl_stmt|;
specifier|protected
name|boolean
name|skipInitialSaslHandshake
decl_stmt|;
specifier|private
name|ByteBuffer
name|unwrappedData
decl_stmt|;
comment|// When is this set? FindBugs wants to know! Says NP
specifier|private
name|ByteBuffer
name|unwrappedDataLengthBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|useSasl
decl_stmt|;
specifier|protected
name|HBaseSaslRpcServer
name|saslServer
decl_stmt|;
specifier|protected
name|CryptoAES
name|cryptoAES
decl_stmt|;
specifier|protected
name|boolean
name|useWrap
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|useCryptoAesWrap
init|=
literal|false
decl_stmt|;
comment|// was authentication allowed with a fallback to simple auth
specifier|protected
name|boolean
name|authenticatedWithFallback
decl_stmt|;
specifier|protected
name|boolean
name|retryImmediatelySupported
init|=
literal|false
decl_stmt|;
specifier|protected
name|User
name|user
init|=
literal|null
decl_stmt|;
specifier|protected
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
specifier|public
name|ServerRpcConnection
parameter_list|(
name|RpcServer
name|rpcServer
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|rpcServer
expr_stmt|;
name|this
operator|.
name|callCleanup
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|remotePort
return|;
block|}
specifier|public
name|String
name|getHostAddress
parameter_list|()
block|{
return|return
name|hostAddress
return|;
block|}
specifier|public
name|InetAddress
name|getHostInetAddress
parameter_list|()
block|{
return|return
name|addr
return|;
block|}
specifier|public
name|int
name|getRemotePort
parameter_list|()
block|{
return|return
name|remotePort
return|;
block|}
specifier|public
name|VersionInfo
name|getVersionInfo
parameter_list|()
block|{
if|if
condition|(
name|connectionHeader
operator|.
name|hasVersionInfo
argument_list|()
condition|)
block|{
return|return
name|connectionHeader
operator|.
name|getVersionInfo
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getFatalConnectionString
parameter_list|(
specifier|final
name|int
name|version
parameter_list|,
specifier|final
name|byte
name|authByte
parameter_list|)
block|{
return|return
literal|"serverVersion="
operator|+
name|RpcServer
operator|.
name|CURRENT_VERSION
operator|+
literal|", clientVersion="
operator|+
name|version
operator|+
literal|", authMethod="
operator|+
name|authByte
operator|+
literal|", authSupported="
operator|+
operator|(
name|authMethod
operator|!=
literal|null
operator|)
operator|+
literal|" from "
operator|+
name|toString
argument_list|()
return|;
block|}
specifier|private
name|UserGroupInformation
name|getAuthorizedUgi
parameter_list|(
name|String
name|authorizedId
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|authorizedUgi
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|DIGEST
condition|)
block|{
name|TokenIdentifier
name|tokenId
init|=
name|HBaseSaslRpcServer
operator|.
name|getIdentifier
argument_list|(
name|authorizedId
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|secretManager
argument_list|)
decl_stmt|;
name|authorizedUgi
operator|=
name|tokenId
operator|.
name|getUser
argument_list|()
expr_stmt|;
if|if
condition|(
name|authorizedUgi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Can't retrieve username from tokenIdentifier."
argument_list|)
throw|;
block|}
name|authorizedUgi
operator|.
name|addTokenIdentifier
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorizedUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|authorizedId
argument_list|)
expr_stmt|;
block|}
name|authorizedUgi
operator|.
name|setAuthenticationMethod
argument_list|(
name|authMethod
operator|.
name|authenticationMethod
operator|.
name|getAuthMethod
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|authorizedUgi
return|;
block|}
comment|/**    * Set up cell block codecs    * @throws FatalConnectionException    */
specifier|private
name|void
name|setupCellBlockCodecs
parameter_list|(
specifier|final
name|ConnectionHeader
name|header
parameter_list|)
throws|throws
name|FatalConnectionException
block|{
comment|// TODO: Plug in other supported decoders.
if|if
condition|(
operator|!
name|header
operator|.
name|hasCellBlockCodecClass
argument_list|()
condition|)
return|return;
name|String
name|className
init|=
name|header
operator|.
name|getCellBlockCodecClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
operator|||
name|className
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return;
try|try
block|{
name|this
operator|.
name|codec
operator|=
operator|(
name|Codec
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedCellCodecException
argument_list|(
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|header
operator|.
name|hasCellBlockCompressorClass
argument_list|()
condition|)
return|return;
name|className
operator|=
name|header
operator|.
name|getCellBlockCompressorClass
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|compressionCodec
operator|=
operator|(
name|CompressionCodec
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedCompressionCodecException
argument_list|(
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set up cipher for rpc encryption with Apache Commons Crypto    *    * @throws FatalConnectionException    */
specifier|private
name|void
name|setupCryptoCipher
parameter_list|(
specifier|final
name|ConnectionHeader
name|header
parameter_list|,
name|RPCProtos
operator|.
name|ConnectionHeaderResponse
operator|.
name|Builder
name|chrBuilder
parameter_list|)
throws|throws
name|FatalConnectionException
block|{
comment|// If simple auth, return
if|if
condition|(
name|saslServer
operator|==
literal|null
condition|)
return|return;
comment|// check if rpc encryption with Crypto AES
name|String
name|qop
init|=
name|saslServer
operator|.
name|getNegotiatedQop
argument_list|()
decl_stmt|;
name|boolean
name|isEncryption
init|=
name|SaslUtil
operator|.
name|QualityOfProtection
operator|.
name|PRIVACY
operator|.
name|getSaslQop
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|qop
argument_list|)
decl_stmt|;
name|boolean
name|isCryptoAesEncryption
init|=
name|isEncryption
operator|&&
name|this
operator|.
name|rpcServer
operator|.
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.rpc.crypto.encryption.aes.enabled"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isCryptoAesEncryption
condition|)
return|return;
if|if
condition|(
operator|!
name|header
operator|.
name|hasRpcCryptoCipherTransformation
argument_list|()
condition|)
return|return;
name|String
name|transformation
init|=
name|header
operator|.
name|getRpcCryptoCipherTransformation
argument_list|()
decl_stmt|;
if|if
condition|(
name|transformation
operator|==
literal|null
operator|||
name|transformation
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return;
comment|// Negotiates AES based on complete saslServer.
comment|// The Crypto metadata need to be encrypted and send to client.
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// the property for SecureRandomFactory
name|properties
operator|.
name|setProperty
argument_list|(
name|CryptoRandomFactory
operator|.
name|CLASSES_KEY
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.crypto.sasl.encryption.aes.crypto.random"
argument_list|,
literal|"org.apache.commons.crypto.random.JavaCryptoRandom"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the property for cipher class
name|properties
operator|.
name|setProperty
argument_list|(
name|CryptoCipherFactory
operator|.
name|CLASSES_KEY
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.rpc.crypto.encryption.aes.cipher.class"
argument_list|,
literal|"org.apache.commons.crypto.cipher.JceCipher"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|cipherKeyBits
init|=
name|this
operator|.
name|rpcServer
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.rpc.crypto.encryption.aes.cipher.keySizeBits"
argument_list|,
literal|128
argument_list|)
decl_stmt|;
comment|// generate key and iv
if|if
condition|(
name|cipherKeyBits
operator|%
literal|8
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The AES cipher key size in bits"
operator|+
literal|" should be a multiple of byte"
argument_list|)
throw|;
block|}
name|int
name|len
init|=
name|cipherKeyBits
operator|/
literal|8
decl_stmt|;
name|byte
index|[]
name|inKey
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|byte
index|[]
name|outKey
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|byte
index|[]
name|inIv
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|byte
index|[]
name|outIv
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
try|try
block|{
comment|// generate the cipher meta data with SecureRandom
name|CryptoRandom
name|secureRandom
init|=
name|CryptoRandomFactory
operator|.
name|getCryptoRandom
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|secureRandom
operator|.
name|nextBytes
argument_list|(
name|inKey
argument_list|)
expr_stmt|;
name|secureRandom
operator|.
name|nextBytes
argument_list|(
name|outKey
argument_list|)
expr_stmt|;
name|secureRandom
operator|.
name|nextBytes
argument_list|(
name|inIv
argument_list|)
expr_stmt|;
name|secureRandom
operator|.
name|nextBytes
argument_list|(
name|outIv
argument_list|)
expr_stmt|;
comment|// create CryptoAES for server
name|cryptoAES
operator|=
operator|new
name|CryptoAES
argument_list|(
name|transformation
argument_list|,
name|properties
argument_list|,
name|inKey
argument_list|,
name|outKey
argument_list|,
name|inIv
argument_list|,
name|outIv
argument_list|)
expr_stmt|;
comment|// create SaslCipherMeta and send to client,
comment|//  for client, the [inKey, outKey], [inIv, outIv] should be reversed
name|RPCProtos
operator|.
name|CryptoCipherMeta
operator|.
name|Builder
name|ccmBuilder
init|=
name|RPCProtos
operator|.
name|CryptoCipherMeta
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ccmBuilder
operator|.
name|setTransformation
argument_list|(
name|transformation
argument_list|)
expr_stmt|;
name|ccmBuilder
operator|.
name|setInIv
argument_list|(
name|getByteString
argument_list|(
name|outIv
argument_list|)
argument_list|)
expr_stmt|;
name|ccmBuilder
operator|.
name|setInKey
argument_list|(
name|getByteString
argument_list|(
name|outKey
argument_list|)
argument_list|)
expr_stmt|;
name|ccmBuilder
operator|.
name|setOutIv
argument_list|(
name|getByteString
argument_list|(
name|inIv
argument_list|)
argument_list|)
expr_stmt|;
name|ccmBuilder
operator|.
name|setOutKey
argument_list|(
name|getByteString
argument_list|(
name|inKey
argument_list|)
argument_list|)
expr_stmt|;
name|chrBuilder
operator|.
name|setCryptoCipherMeta
argument_list|(
name|ccmBuilder
argument_list|)
expr_stmt|;
name|useCryptoAesWrap
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedCryptoException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ByteString
name|getByteString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
comment|// return singleton to reduce object allocation
return|return
operator|(
name|bytes
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
name|ByteString
operator|.
name|EMPTY
else|:
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bytes
argument_list|)
return|;
block|}
specifier|private
name|UserGroupInformation
name|createUser
parameter_list|(
name|ConnectionHeader
name|head
parameter_list|)
block|{
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|head
operator|.
name|hasUserInfo
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UserInformation
name|userInfoProto
init|=
name|head
operator|.
name|getUserInfo
argument_list|()
decl_stmt|;
name|String
name|effectiveUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userInfoProto
operator|.
name|hasEffectiveUser
argument_list|()
condition|)
block|{
name|effectiveUser
operator|=
name|userInfoProto
operator|.
name|getEffectiveUser
argument_list|()
expr_stmt|;
block|}
name|String
name|realUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userInfoProto
operator|.
name|hasRealUser
argument_list|()
condition|)
block|{
name|realUser
operator|=
name|userInfoProto
operator|.
name|getRealUser
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|effectiveUser
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|realUser
operator|!=
literal|null
condition|)
block|{
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|realUser
argument_list|)
decl_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|effectiveUser
argument_list|,
name|realUserUgi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|effectiveUser
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ugi
return|;
block|}
specifier|protected
specifier|final
name|void
name|disposeSasl
parameter_list|()
block|{
if|if
condition|(
name|saslServer
operator|!=
literal|null
condition|)
block|{
name|saslServer
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|saslServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * No protobuf encoding of raw sasl messages    */
specifier|protected
specifier|final
name|void
name|doRawSaslReply
parameter_list|(
name|SaslStatus
name|status
parameter_list|,
name|Writable
name|rv
parameter_list|,
name|String
name|errorClass
parameter_list|,
name|String
name|error
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferChain
name|bc
decl_stmt|;
comment|// In my testing, have noticed that sasl messages are usually
comment|// in the ballpark of 100-200. That's why the initial capacity is 256.
try|try
init|(
name|ByteBufferOutputStream
name|saslResponse
init|=
operator|new
name|ByteBufferOutputStream
argument_list|(
literal|256
argument_list|)
init|;
name|DataOutputStream
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|saslResponse
argument_list|)
init|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|status
operator|.
name|state
argument_list|)
expr_stmt|;
comment|// write status
if|if
condition|(
name|status
operator|==
name|SaslStatus
operator|.
name|SUCCESS
condition|)
block|{
name|rv
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|errorClass
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
name|bc
operator|=
operator|new
name|BufferChain
argument_list|(
name|saslResponse
operator|.
name|getByteBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doRespond
argument_list|(
parameter_list|()
lambda|->
name|bc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|saslReadAndProcess
parameter_list|(
name|ByteBuff
name|saslToken
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|saslContextEstablished
condition|)
block|{
if|if
condition|(
name|RpcServer
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|RpcServer
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Have read input token of size "
operator|+
name|saslToken
operator|.
name|limit
argument_list|()
operator|+
literal|" for processing by saslServer.unwrap()"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useWrap
condition|)
block|{
name|processOneRpc
argument_list|(
name|saslToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|b
init|=
name|saslToken
operator|.
name|hasArray
argument_list|()
condition|?
name|saslToken
operator|.
name|array
argument_list|()
else|:
name|saslToken
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|plaintextData
decl_stmt|;
if|if
condition|(
name|useCryptoAesWrap
condition|)
block|{
comment|// unwrap with CryptoAES
name|plaintextData
operator|=
name|cryptoAES
operator|.
name|unwrap
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plaintextData
operator|=
name|saslServer
operator|.
name|unwrap
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|processUnwrappedData
argument_list|(
name|plaintextData
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|byte
index|[]
name|replyToken
decl_stmt|;
try|try
block|{
if|if
condition|(
name|saslServer
operator|==
literal|null
condition|)
block|{
name|saslServer
operator|=
operator|new
name|HBaseSaslRpcServer
argument_list|(
name|authMethod
argument_list|,
name|rpcServer
operator|.
name|saslProps
argument_list|,
name|rpcServer
operator|.
name|secretManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|RpcServer
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created SASL server with mechanism = "
operator|+
name|authMethod
operator|.
name|getMechanismName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|RpcServer
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Have read input token of size "
operator|+
name|saslToken
operator|.
name|limit
argument_list|()
operator|+
literal|" for processing by saslServer.evaluateResponse()"
argument_list|)
expr_stmt|;
block|}
name|replyToken
operator|=
name|saslServer
operator|.
name|evaluateResponse
argument_list|(
name|saslToken
operator|.
name|hasArray
argument_list|()
condition|?
name|saslToken
operator|.
name|array
argument_list|()
else|:
name|saslToken
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOException
name|sendToClient
init|=
name|e
decl_stmt|;
name|Throwable
name|cause
init|=
name|e
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|InvalidToken
condition|)
block|{
name|sendToClient
operator|=
operator|(
name|InvalidToken
operator|)
name|cause
expr_stmt|;
break|break;
block|}
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|doRawSaslReply
argument_list|(
name|SaslStatus
operator|.
name|ERROR
argument_list|,
literal|null
argument_list|,
name|sendToClient
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|sendToClient
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|authenticationFailure
argument_list|()
expr_stmt|;
name|String
name|clientIP
init|=
name|this
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// attempting user could be null
name|RpcServer
operator|.
name|AUDITLOG
operator|.
name|warn
argument_list|(
name|RpcServer
operator|.
name|AUTH_FAILED_FOR
operator|+
name|clientIP
operator|+
literal|":"
operator|+
name|saslServer
operator|.
name|getAttemptingUser
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|replyToken
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|RpcServer
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Will send token of size "
operator|+
name|replyToken
operator|.
name|length
operator|+
literal|" from saslServer."
argument_list|)
expr_stmt|;
block|}
name|doRawSaslReply
argument_list|(
name|SaslStatus
operator|.
name|SUCCESS
argument_list|,
operator|new
name|BytesWritable
argument_list|(
name|replyToken
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|saslServer
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|String
name|qop
init|=
name|saslServer
operator|.
name|getNegotiatedQop
argument_list|()
decl_stmt|;
name|useWrap
operator|=
name|qop
operator|!=
literal|null
operator|&&
operator|!
literal|"auth"
operator|.
name|equalsIgnoreCase
argument_list|(
name|qop
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|getAuthorizedUgi
argument_list|(
name|saslServer
operator|.
name|getAuthorizationID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|RpcServer
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL server context established. Authenticated client: "
operator|+
name|ugi
operator|+
literal|". Negotiated QoP is "
operator|+
name|qop
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|authenticationSuccess
argument_list|()
expr_stmt|;
name|RpcServer
operator|.
name|AUDITLOG
operator|.
name|info
argument_list|(
name|RpcServer
operator|.
name|AUTH_SUCCESSFUL_FOR
operator|+
name|ugi
argument_list|)
expr_stmt|;
name|saslContextEstablished
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processUnwrappedData
parameter_list|(
name|byte
index|[]
name|inBuf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ReadableByteChannel
name|ch
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|inBuf
argument_list|)
argument_list|)
decl_stmt|;
comment|// Read all RPCs contained in the inBuf, even partial ones
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|count
decl_stmt|;
if|if
condition|(
name|unwrappedDataLengthBuffer
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|count
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|channelRead
argument_list|(
name|ch
argument_list|,
name|unwrappedDataLengthBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
operator|||
name|unwrappedDataLengthBuffer
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
return|return;
block|}
if|if
condition|(
name|unwrappedData
operator|==
literal|null
condition|)
block|{
name|unwrappedDataLengthBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|int
name|unwrappedDataLength
init|=
name|unwrappedDataLengthBuffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|unwrappedDataLength
operator|==
name|RpcClient
operator|.
name|PING_CALL_ID
condition|)
block|{
if|if
condition|(
name|RpcServer
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|RpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received ping message"
argument_list|)
expr_stmt|;
name|unwrappedDataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
continue|continue;
comment|// ping message
block|}
name|unwrappedData
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|unwrappedDataLength
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|channelRead
argument_list|(
name|ch
argument_list|,
name|unwrappedData
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
operator|||
name|unwrappedData
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
return|return;
if|if
condition|(
name|unwrappedData
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
name|unwrappedDataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|unwrappedData
operator|.
name|flip
argument_list|()
expr_stmt|;
name|processOneRpc
argument_list|(
operator|new
name|SingleByteBuff
argument_list|(
name|unwrappedData
argument_list|)
argument_list|)
expr_stmt|;
name|unwrappedData
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|processOneRpc
parameter_list|(
name|ByteBuff
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|connectionHeaderRead
condition|)
block|{
name|processRequest
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processConnectionHeader
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionHeaderRead
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|authorizeConnection
argument_list|()
condition|)
block|{
comment|// Throw FatalConnectionException wrapping ACE so client does right thing and closes
comment|// down the connection instead of trying to read non-existent retun.
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Connection from "
operator|+
name|this
operator|+
literal|" for service "
operator|+
name|connectionHeader
operator|.
name|getServiceName
argument_list|()
operator|+
literal|" is unauthorized for user: "
operator|+
name|ugi
argument_list|)
throw|;
block|}
name|this
operator|.
name|user
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|userProvider
operator|.
name|create
argument_list|(
name|this
operator|.
name|ugi
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|authorizeConnection
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
comment|// If auth method is DIGEST, the token was obtained by the
comment|// real user for the effective user, therefore not required to
comment|// authorize real user. doAs is allowed only for simple or kerberos
comment|// authentication
if|if
condition|(
name|ugi
operator|!=
literal|null
operator|&&
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthMethod
operator|.
name|DIGEST
operator|)
condition|)
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi
argument_list|,
name|this
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rpcServer
operator|.
name|authorize
argument_list|(
name|ugi
argument_list|,
name|connectionHeader
argument_list|,
name|getHostInetAddress
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|authorizationSuccess
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ae
parameter_list|)
block|{
if|if
condition|(
name|RpcServer
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection authorization failed: "
operator|+
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ae
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|authorizationFailure
argument_list|()
expr_stmt|;
name|doRespond
argument_list|(
name|getErrorResponse
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|AccessDeniedException
argument_list|(
name|ae
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// Reads the connection header following version
specifier|private
name|void
name|processConnectionHeader
parameter_list|(
name|ByteBuff
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|this
operator|.
name|connectionHeader
operator|=
name|ConnectionHeader
operator|.
name|parseFrom
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CodedInputStream
name|cis
init|=
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
operator|new
name|ByteBuffByteInput
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|limit
argument_list|()
argument_list|)
operator|.
name|newCodedInput
argument_list|()
decl_stmt|;
name|cis
operator|.
name|enableAliasing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionHeader
operator|=
name|ConnectionHeader
operator|.
name|parseFrom
argument_list|(
name|cis
argument_list|)
expr_stmt|;
block|}
name|String
name|serviceName
init|=
name|connectionHeader
operator|.
name|getServiceName
argument_list|()
decl_stmt|;
if|if
condition|(
name|serviceName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EmptyServiceNameException
argument_list|()
throw|;
name|this
operator|.
name|service
operator|=
name|RpcServer
operator|.
name|getService
argument_list|(
name|this
operator|.
name|rpcServer
operator|.
name|services
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|service
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownServiceException
argument_list|(
name|serviceName
argument_list|)
throw|;
name|setupCellBlockCodecs
argument_list|(
name|this
operator|.
name|connectionHeader
argument_list|)
expr_stmt|;
name|RPCProtos
operator|.
name|ConnectionHeaderResponse
operator|.
name|Builder
name|chrBuilder
init|=
name|RPCProtos
operator|.
name|ConnectionHeaderResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|setupCryptoCipher
argument_list|(
name|this
operator|.
name|connectionHeader
argument_list|,
name|chrBuilder
argument_list|)
expr_stmt|;
name|responseConnectionHeader
argument_list|(
name|chrBuilder
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|protocolUser
init|=
name|createUser
argument_list|(
name|connectionHeader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|useSasl
condition|)
block|{
name|ugi
operator|=
name|protocolUser
expr_stmt|;
if|if
condition|(
name|ugi
operator|!=
literal|null
condition|)
block|{
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthMethod
operator|.
name|SIMPLE
operator|.
name|authenticationMethod
argument_list|)
expr_stmt|;
block|}
comment|// audit logging for SASL authenticated users happens in saslReadAndProcess()
if|if
condition|(
name|authenticatedWithFallback
condition|)
block|{
name|RpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Allowed fallback to SIMPLE auth for "
operator|+
name|ugi
operator|+
literal|" connecting from "
operator|+
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RpcServer
operator|.
name|AUDITLOG
operator|.
name|info
argument_list|(
name|RpcServer
operator|.
name|AUTH_SUCCESSFUL_FOR
operator|+
name|ugi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// user is authenticated
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|authMethod
operator|.
name|authenticationMethod
argument_list|)
expr_stmt|;
comment|//Now we check if this is a proxy user case. If the protocol user is
comment|//different from the 'user', it is a proxy user scenario. However,
comment|//this is not allowed if user authenticated with DIGEST.
if|if
condition|(
operator|(
name|protocolUser
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|protocolUser
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|DIGEST
condition|)
block|{
comment|// Not allowed to doAs if token authentication is used
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Authenticated user ("
operator|+
name|ugi
operator|+
literal|") doesn't match what the client claims to be ("
operator|+
name|protocolUser
operator|+
literal|")"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// Effective user can be different from authenticated user
comment|// for simple auth or kerberos auth
comment|// The user is the real user. Now we create a proxy user
name|UserGroupInformation
name|realUser
init|=
name|ugi
decl_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|protocolUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
comment|// Now the user is a proxy user, set Authentication method Proxy.
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|PROXY
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|connectionHeader
operator|.
name|hasVersionInfo
argument_list|()
condition|)
block|{
comment|// see if this connection will support RetryImmediatelyException
name|retryImmediatelySupported
operator|=
name|VersionInfoUtil
operator|.
name|hasMinimumVersion
argument_list|(
name|getVersionInfo
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|RpcServer
operator|.
name|AUDITLOG
operator|.
name|info
argument_list|(
literal|"Connection from "
operator|+
name|this
operator|.
name|hostAddress
operator|+
literal|" port: "
operator|+
name|this
operator|.
name|remotePort
operator|+
literal|" with version info: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|connectionHeader
operator|.
name|getVersionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RpcServer
operator|.
name|AUDITLOG
operator|.
name|info
argument_list|(
literal|"Connection from "
operator|+
name|this
operator|.
name|hostAddress
operator|+
literal|" port: "
operator|+
name|this
operator|.
name|remotePort
operator|+
literal|" with unknown version info"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Send the response for connection header    */
specifier|private
name|void
name|responseConnectionHeader
parameter_list|(
name|RPCProtos
operator|.
name|ConnectionHeaderResponse
operator|.
name|Builder
name|chrBuilder
parameter_list|)
throws|throws
name|FatalConnectionException
block|{
comment|// Response the connection header if Crypto AES is enabled
if|if
condition|(
operator|!
name|chrBuilder
operator|.
name|hasCryptoCipherMeta
argument_list|()
condition|)
return|return;
try|try
block|{
name|byte
index|[]
name|connectionHeaderResBytes
init|=
name|chrBuilder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// encrypt the Crypto AES cipher meta data with sasl server, and send to client
name|byte
index|[]
name|unwrapped
init|=
operator|new
name|byte
index|[
name|connectionHeaderResBytes
operator|.
name|length
operator|+
literal|4
index|]
decl_stmt|;
name|Bytes
operator|.
name|putBytes
argument_list|(
name|unwrapped
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|connectionHeaderResBytes
operator|.
name|length
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|putBytes
argument_list|(
name|unwrapped
argument_list|,
literal|4
argument_list|,
name|connectionHeaderResBytes
argument_list|,
literal|0
argument_list|,
name|connectionHeaderResBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|wrapped
init|=
name|saslServer
operator|.
name|wrap
argument_list|(
name|unwrapped
argument_list|,
literal|0
argument_list|,
name|unwrapped
operator|.
name|length
argument_list|)
decl_stmt|;
name|BufferChain
name|bc
decl_stmt|;
try|try
init|(
name|ByteBufferOutputStream
name|response
init|=
operator|new
name|ByteBufferOutputStream
argument_list|(
name|wrapped
operator|.
name|length
operator|+
literal|4
argument_list|)
init|;
name|DataOutputStream
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|response
argument_list|)
init|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|wrapped
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
name|bc
operator|=
operator|new
name|BufferChain
argument_list|(
name|response
operator|.
name|getByteBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doRespond
argument_list|(
parameter_list|()
lambda|->
name|bc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedCryptoException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|doRespond
parameter_list|(
name|RpcResponse
name|resp
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @param buf    *          Has the request header and the request param and optionally    *          encoded data buffer all in this one array.    * @throws IOException    * @throws InterruptedException    */
specifier|protected
name|void
name|processRequest
parameter_list|(
name|ByteBuff
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|totalRequestSize
init|=
name|buf
operator|.
name|limit
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
comment|// Here we read in the header. We avoid having pb
comment|// do its default 4k allocation for CodedInputStream. We force it to use
comment|// backing array.
name|CodedInputStream
name|cis
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|cis
operator|=
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|limit
argument_list|()
argument_list|)
operator|.
name|newCodedInput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cis
operator|=
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
operator|new
name|ByteBuffByteInput
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|limit
argument_list|()
argument_list|)
operator|.
name|newCodedInput
argument_list|()
expr_stmt|;
block|}
name|cis
operator|.
name|enableAliasing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|headerSize
init|=
name|cis
operator|.
name|readRawVarint32
argument_list|()
decl_stmt|;
name|offset
operator|=
name|cis
operator|.
name|getTotalBytesRead
argument_list|()
expr_stmt|;
name|Message
operator|.
name|Builder
name|builder
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|cis
argument_list|,
name|headerSize
argument_list|)
expr_stmt|;
name|RequestHeader
name|header
init|=
operator|(
name|RequestHeader
operator|)
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|offset
operator|+=
name|headerSize
expr_stmt|;
name|int
name|id
init|=
name|header
operator|.
name|getCallId
argument_list|()
decl_stmt|;
if|if
condition|(
name|RpcServer
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|RpcServer
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"RequestHeader "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|header
argument_list|)
operator|+
literal|" totalRequestSize: "
operator|+
name|totalRequestSize
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
comment|// Enforcing the call queue size, this triggers a retry in the client
comment|// This is a bit late to be doing this check - we have already read in the
comment|// total request.
if|if
condition|(
operator|(
name|totalRequestSize
operator|+
name|this
operator|.
name|rpcServer
operator|.
name|callQueueSizeInBytes
operator|.
name|sum
argument_list|()
operator|)
operator|>
name|this
operator|.
name|rpcServer
operator|.
name|maxQueueSizeInBytes
condition|)
block|{
specifier|final
name|ServerCall
argument_list|<
name|?
argument_list|>
name|callTooBig
init|=
name|createCall
argument_list|(
name|id
argument_list|,
name|this
operator|.
name|service
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|totalRequestSize
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|callCleanup
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|exception
argument_list|(
name|RpcServer
operator|.
name|CALL_QUEUE_TOO_BIG_EXCEPTION
argument_list|)
expr_stmt|;
name|callTooBig
operator|.
name|setResponse
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|RpcServer
operator|.
name|CALL_QUEUE_TOO_BIG_EXCEPTION
argument_list|,
literal|"Call queue is full on "
operator|+
name|this
operator|.
name|rpcServer
operator|.
name|server
operator|.
name|getServerName
argument_list|()
operator|+
literal|", is hbase.ipc.server.max.callqueue.size too small?"
argument_list|)
expr_stmt|;
name|callTooBig
operator|.
name|sendResponseIfReady
argument_list|()
expr_stmt|;
return|return;
block|}
name|MethodDescriptor
name|md
init|=
literal|null
decl_stmt|;
name|Message
name|param
init|=
literal|null
decl_stmt|;
name|CellScanner
name|cellScanner
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|header
operator|.
name|hasRequestParam
argument_list|()
operator|&&
name|header
operator|.
name|getRequestParam
argument_list|()
condition|)
block|{
name|md
operator|=
name|this
operator|.
name|service
operator|.
name|getDescriptorForType
argument_list|()
operator|.
name|findMethodByName
argument_list|(
name|header
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|header
operator|.
name|getMethodName
argument_list|()
argument_list|)
throw|;
name|builder
operator|=
name|this
operator|.
name|service
operator|.
name|getRequestPrototype
argument_list|(
name|md
argument_list|)
operator|.
name|newBuilderForType
argument_list|()
expr_stmt|;
name|cis
operator|.
name|resetSizeCounter
argument_list|()
expr_stmt|;
name|int
name|paramSize
init|=
name|cis
operator|.
name|readRawVarint32
argument_list|()
decl_stmt|;
name|offset
operator|+=
name|cis
operator|.
name|getTotalBytesRead
argument_list|()
expr_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|cis
argument_list|,
name|paramSize
argument_list|)
expr_stmt|;
name|param
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|offset
operator|+=
name|paramSize
expr_stmt|;
block|}
else|else
block|{
comment|// currently header must have request param, so we directly throw
comment|// exception here
name|String
name|msg
init|=
literal|"Invalid request header: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|header
argument_list|)
operator|+
literal|", should have param set in it"
decl_stmt|;
name|RpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|header
operator|.
name|hasCellBlockMeta
argument_list|()
condition|)
block|{
name|buf
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|ByteBuff
name|dup
init|=
name|buf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|dup
operator|.
name|limit
argument_list|(
name|offset
operator|+
name|header
operator|.
name|getCellBlockMeta
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|cellScanner
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|cellBlockBuilder
operator|.
name|createCellScannerReusingBuffers
argument_list|(
name|this
operator|.
name|codec
argument_list|,
name|this
operator|.
name|compressionCodec
argument_list|,
name|dup
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|InetSocketAddress
name|address
init|=
name|this
operator|.
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
operator|(
name|address
operator|!=
literal|null
condition|?
name|address
else|:
literal|"(channel closed)"
operator|)
operator|+
literal|" is unable to read call parameter from client "
operator|+
name|getHostAddress
argument_list|()
decl_stmt|;
name|RpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|exception
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// probably the hbase hadoop version does not match the running hadoop
comment|// version
if|if
condition|(
name|t
operator|instanceof
name|LinkageError
condition|)
block|{
name|t
operator|=
operator|new
name|DoNotRetryIOException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|// If the method is not present on the server, do not retry.
if|if
condition|(
name|t
operator|instanceof
name|UnsupportedOperationException
condition|)
block|{
name|t
operator|=
operator|new
name|DoNotRetryIOException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|ServerCall
argument_list|<
name|?
argument_list|>
name|readParamsFailedCall
init|=
name|createCall
argument_list|(
name|id
argument_list|,
name|this
operator|.
name|service
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|totalRequestSize
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|callCleanup
argument_list|)
decl_stmt|;
name|readParamsFailedCall
operator|.
name|setResponse
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|t
argument_list|,
name|msg
operator|+
literal|"; "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|readParamsFailedCall
operator|.
name|sendResponseIfReady
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|timeout
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|header
operator|.
name|hasTimeout
argument_list|()
operator|&&
name|header
operator|.
name|getTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|timeout
operator|=
name|Math
operator|.
name|max
argument_list|(
name|this
operator|.
name|rpcServer
operator|.
name|minClientRequestTimeout
argument_list|,
name|header
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ServerCall
argument_list|<
name|?
argument_list|>
name|call
init|=
name|createCall
argument_list|(
name|id
argument_list|,
name|this
operator|.
name|service
argument_list|,
name|md
argument_list|,
name|header
argument_list|,
name|param
argument_list|,
name|cellScanner
argument_list|,
name|totalRequestSize
argument_list|,
name|this
operator|.
name|addr
argument_list|,
name|timeout
argument_list|,
name|this
operator|.
name|callCleanup
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|rpcServer
operator|.
name|scheduler
operator|.
name|dispatch
argument_list|(
operator|new
name|CallRunner
argument_list|(
name|this
operator|.
name|rpcServer
argument_list|,
name|call
argument_list|)
argument_list|)
condition|)
block|{
name|this
operator|.
name|rpcServer
operator|.
name|callQueueSizeInBytes
operator|.
name|add
argument_list|(
operator|-
literal|1
operator|*
name|call
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|exception
argument_list|(
name|RpcServer
operator|.
name|CALL_QUEUE_TOO_BIG_EXCEPTION
argument_list|)
expr_stmt|;
name|call
operator|.
name|setResponse
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|RpcServer
operator|.
name|CALL_QUEUE_TOO_BIG_EXCEPTION
argument_list|,
literal|"Call queue is full on "
operator|+
name|this
operator|.
name|rpcServer
operator|.
name|server
operator|.
name|getServerName
argument_list|()
operator|+
literal|", too many items queued ?"
argument_list|)
expr_stmt|;
name|call
operator|.
name|sendResponseIfReady
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
name|RpcResponse
name|getErrorResponse
parameter_list|(
name|String
name|msg
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|ResponseHeader
operator|.
name|Builder
name|headerBuilder
init|=
name|ResponseHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCallId
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ServerCall
operator|.
name|setExceptionResponse
argument_list|(
name|e
argument_list|,
name|msg
argument_list|,
name|headerBuilder
argument_list|)
expr_stmt|;
name|ByteBuffer
name|headerBuf
init|=
name|ServerCall
operator|.
name|createHeaderAndMessageBytes
argument_list|(
literal|null
argument_list|,
name|headerBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|BufferChain
name|buf
init|=
operator|new
name|BufferChain
argument_list|(
name|headerBuf
argument_list|)
decl_stmt|;
return|return
parameter_list|()
lambda|->
name|buf
return|;
block|}
specifier|private
name|void
name|doBadPreambleHandling
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|doBadPreambleHandling
argument_list|(
name|msg
argument_list|,
operator|new
name|FatalConnectionException
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doBadPreambleHandling
parameter_list|(
name|String
name|msg
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|doRespond
argument_list|(
name|getErrorResponse
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|boolean
name|processPreamble
parameter_list|(
name|ByteBuffer
name|preambleBuffer
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|preambleBuffer
operator|.
name|remaining
argument_list|()
operator|==
literal|6
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RPC_HEADER
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|RPC_HEADER
index|[
name|i
index|]
operator|!=
name|preambleBuffer
operator|.
name|get
argument_list|()
condition|)
block|{
name|doBadPreambleHandling
argument_list|(
literal|"Expected HEADER="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|RPC_HEADER
argument_list|)
operator|+
literal|" but received HEADER="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|preambleBuffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|RPC_HEADER
operator|.
name|length
argument_list|)
operator|+
literal|" from "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|int
name|version
init|=
name|preambleBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xFF
decl_stmt|;
name|byte
name|authbyte
init|=
name|preambleBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|this
operator|.
name|authMethod
operator|=
name|AuthMethod
operator|.
name|valueOf
argument_list|(
name|authbyte
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|SimpleRpcServer
operator|.
name|CURRENT_VERSION
condition|)
block|{
name|String
name|msg
init|=
name|getFatalConnectionString
argument_list|(
name|version
argument_list|,
name|authbyte
argument_list|)
decl_stmt|;
name|doBadPreambleHandling
argument_list|(
name|msg
argument_list|,
operator|new
name|WrongVersionException
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|authMethod
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|getFatalConnectionString
argument_list|(
name|version
argument_list|,
name|authbyte
argument_list|)
decl_stmt|;
name|doBadPreambleHandling
argument_list|(
name|msg
argument_list|,
operator|new
name|BadAuthException
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|.
name|isSecurityEnabled
operator|&&
name|authMethod
operator|==
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|.
name|allowFallbackToSimpleAuth
condition|)
block|{
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|authenticationFallback
argument_list|()
expr_stmt|;
name|authenticatedWithFallback
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|AccessDeniedException
name|ae
init|=
operator|new
name|AccessDeniedException
argument_list|(
literal|"Authentication is required"
argument_list|)
decl_stmt|;
name|doRespond
argument_list|(
name|getErrorResponse
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ae
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|rpcServer
operator|.
name|isSecurityEnabled
operator|&&
name|authMethod
operator|!=
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
name|doRawSaslReply
argument_list|(
name|SaslStatus
operator|.
name|SUCCESS
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|SaslUtil
operator|.
name|SWITCH_TO_SIMPLE_AUTH
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
comment|// client has already sent the initial Sasl message and we
comment|// should ignore it. Both client and server should fall back
comment|// to simple auth from now on.
name|skipInitialSaslHandshake
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|authMethod
operator|!=
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
name|useSasl
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|abstract
name|boolean
name|isConnectionOpen
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|ServerCall
argument_list|<
name|?
argument_list|>
name|createCall
parameter_list|(
name|int
name|id
parameter_list|,
name|BlockingService
name|service
parameter_list|,
name|MethodDescriptor
name|md
parameter_list|,
name|RequestHeader
name|header
parameter_list|,
name|Message
name|param
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|,
name|long
name|size
parameter_list|,
name|InetAddress
name|remoteAddress
parameter_list|,
name|int
name|timeout
parameter_list|,
name|CallCleanup
name|reqCleanup
parameter_list|)
function_decl|;
specifier|private
specifier|static
class|class
name|ByteBuffByteInput
extends|extends
name|ByteInput
block|{
specifier|private
name|ByteBuff
name|buf
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|int
name|length
decl_stmt|;
name|ByteBuffByteInput
parameter_list|(
name|ByteBuff
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|read
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|this
operator|.
name|buf
operator|.
name|get
argument_list|(
name|getAbsoluteOffset
argument_list|(
name|offset
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|getAbsoluteOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|this
operator|.
name|offset
operator|+
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|int
name|offset
parameter_list|,
name|byte
index|[]
name|out
parameter_list|,
name|int
name|outOffset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|.
name|get
argument_list|(
name|getAbsoluteOffset
argument_list|(
name|offset
argument_list|)
argument_list|,
name|out
argument_list|,
name|outOffset
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|int
name|offset
parameter_list|,
name|ByteBuffer
name|out
parameter_list|)
block|{
name|int
name|len
init|=
name|out
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|this
operator|.
name|buf
operator|.
name|get
argument_list|(
name|out
argument_list|,
name|getAbsoluteOffset
argument_list|(
name|offset
argument_list|)
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|length
return|;
block|}
block|}
block|}
end_class

end_unit

