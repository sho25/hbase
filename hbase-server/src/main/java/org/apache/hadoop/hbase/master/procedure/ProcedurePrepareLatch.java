begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|VersionInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_comment
comment|/**  * Latch used by the Master to have the prepare() sync behaviour for old  * clients, that can only get exceptions in a synchronous way.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|abstract
class|class
name|ProcedurePrepareLatch
block|{
specifier|private
specifier|static
specifier|final
name|NoopLatch
name|noopLatch
init|=
operator|new
name|NoopLatch
argument_list|()
decl_stmt|;
comment|/**    * Create a latch if the client does not have async proc support.    * This uses the default 1.1 version.    * @return a CompatibilityLatch or a NoopLatch if the client has async proc support    */
specifier|public
specifier|static
name|ProcedurePrepareLatch
name|createLatch
parameter_list|()
block|{
comment|// don't use the latch if we have procedure support (default 1.1)
return|return
name|createLatch
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * Create a latch if the client does not have async proc support    * @param major major version with async proc support    * @param minor minor version with async proc support    * @return a CompatibilityLatch or a NoopLatch if the client has async proc support    */
specifier|public
specifier|static
name|ProcedurePrepareLatch
name|createLatch
parameter_list|(
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|)
block|{
comment|// don't use the latch if we have procedure support
return|return
name|hasProcedureSupport
argument_list|(
name|major
argument_list|,
name|minor
argument_list|)
condition|?
name|noopLatch
else|:
operator|new
name|CompatibilityLatch
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasProcedureSupport
parameter_list|(
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|)
block|{
return|return
name|VersionInfoUtil
operator|.
name|currentClientHasMinimumVersion
argument_list|(
name|major
argument_list|,
name|minor
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|countDown
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|await
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|public
specifier|static
name|void
name|releaseLatch
parameter_list|(
specifier|final
name|ProcedurePrepareLatch
name|latch
parameter_list|,
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NoopLatch
extends|extends
name|ProcedurePrepareLatch
block|{
annotation|@
name|Override
specifier|protected
name|void
name|countDown
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|await
parameter_list|()
throws|throws
name|IOException
block|{}
block|}
specifier|protected
specifier|static
class|class
name|CompatibilityLatch
extends|extends
name|ProcedurePrepareLatch
block|{
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|countDown
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|proc
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|exception
operator|=
name|proc
operator|.
name|getException
argument_list|()
operator|.
name|unwrapRemoteIOException
argument_list|()
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|await
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

