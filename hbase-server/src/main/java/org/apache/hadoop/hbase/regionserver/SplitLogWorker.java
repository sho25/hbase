begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|SplitLogWorkerCoordination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitLogWorker
operator|.
name|TaskExecutor
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SyncReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CancelableProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|SyncReplicationWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This worker is spawned in every regionserver, including master. The Worker waits for log  * splitting tasks to be put up by the {@link org.apache.hadoop.hbase.master.SplitLogManager}  * running in the master and races with other workers in other serves to acquire those tasks.  * The coordination is done via coordination engine.  *<p>  * If a worker has successfully moved the task from state UNASSIGNED to OWNED then it owns the task.  * It keeps heart beating the manager by periodically moving the task from UNASSIGNED to OWNED  * state. On success it moves the task to TASK_DONE. On unrecoverable error it moves task state to  * ERR. If it cannot continue but wants the master to retry the task then it moves the task state to  * RESIGNED.  *<p>  * The manager can take a task away from a worker by moving the task from OWNED to UNASSIGNED. In  * the absence of a global lock there is a unavoidable race here - a worker might have just finished  * its task when it is stripped of its ownership. Here we rely on the idempotency of the log  * splitting task for correctness  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitLogWorker
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplitLogWorker
operator|.
name|class
argument_list|)
decl_stmt|;
name|Thread
name|worker
decl_stmt|;
comment|// thread pool which executes recovery work
specifier|private
name|SplitLogWorkerCoordination
name|coordination
decl_stmt|;
specifier|private
name|RegionServerServices
name|server
decl_stmt|;
specifier|public
name|SplitLogWorker
parameter_list|(
name|Server
name|hserver
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RegionServerServices
name|server
parameter_list|,
name|TaskExecutor
name|splitTaskExecutor
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|coordination
operator|=
name|hserver
operator|.
name|getCoordinatedStateManager
argument_list|()
operator|.
name|getSplitLogWorkerCoordination
argument_list|()
expr_stmt|;
name|coordination
operator|.
name|init
argument_list|(
name|server
argument_list|,
name|conf
argument_list|,
name|splitTaskExecutor
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SplitLogWorker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RegionServerServices
name|server
parameter_list|,
name|LastSequenceId
name|sequenceIdChecker
parameter_list|,
name|WALFactory
name|factory
parameter_list|)
block|{
name|this
argument_list|(
name|server
argument_list|,
name|conf
argument_list|,
name|server
argument_list|,
parameter_list|(
name|f
parameter_list|,
name|p
parameter_list|)
lambda|->
name|splitLog
argument_list|(
name|f
argument_list|,
name|p
argument_list|,
name|conf
argument_list|,
name|server
argument_list|,
name|sequenceIdChecker
argument_list|,
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// returns whether we need to continue the split work
specifier|private
specifier|static
name|boolean
name|processSyncReplicationWAL
parameter_list|(
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RegionServerServices
name|server
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|walDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|walFile
init|=
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|walFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|optSyncPeerId
init|=
name|SyncReplicationWALProvider
operator|.
name|getSyncReplicationPeerIdFromWALName
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|optSyncPeerId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|peerId
init|=
name|optSyncPeerId
operator|.
name|get
argument_list|()
decl_stmt|;
name|ReplicationPeerImpl
name|peer
init|=
name|server
operator|.
name|getReplicationSourceService
argument_list|()
operator|.
name|getReplicationPeers
argument_list|()
operator|.
name|getPeer
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
operator|||
operator|!
name|peer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|isSyncReplication
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Pair
argument_list|<
name|SyncReplicationState
argument_list|,
name|SyncReplicationState
argument_list|>
name|stateAndNewState
init|=
name|peer
operator|.
name|getSyncReplicationStateAndNewState
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateAndNewState
operator|.
name|getFirst
argument_list|()
operator|.
name|equals
argument_list|(
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|)
operator|&&
name|stateAndNewState
operator|.
name|getSecond
argument_list|()
operator|.
name|equals
argument_list|(
name|SyncReplicationState
operator|.
name|NONE
argument_list|)
condition|)
block|{
comment|// copy the file to remote and overwrite the previous one
name|String
name|remoteWALDir
init|=
name|peer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getRemoteWALDir
argument_list|()
decl_stmt|;
name|Path
name|remoteWALDirForPeer
init|=
name|ReplicationUtils
operator|.
name|getPeerRemoteWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
name|Path
name|tmpRemoteWAL
init|=
operator|new
name|Path
argument_list|(
name|remoteWALDirForPeer
argument_list|,
name|filename
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|FileSystem
name|remoteFs
init|=
name|ReplicationUtils
operator|.
name|getRemoteWALFileSystem
argument_list|(
name|conf
argument_list|,
name|remoteWALDir
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|walFile
argument_list|)
init|; @SuppressWarnings("deprecation")
name|FSDataOutputStream
name|out
init|=
name|remoteFs
operator|.
name|createNonRecursive
argument_list|(
name|tmpRemoteWAL
argument_list|,
literal|true
argument_list|,
name|FSUtils
operator|.
name|getDefaultBufferSize
argument_list|(
name|remoteFs
argument_list|)
argument_list|,
name|remoteFs
operator|.
name|getDefaultReplication
argument_list|(
name|tmpRemoteWAL
argument_list|)
argument_list|,
name|remoteFs
operator|.
name|getDefaultBlockSize
argument_list|(
name|tmpRemoteWAL
argument_list|)
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|Path
name|toCommitRemoteWAL
init|=
operator|new
name|Path
argument_list|(
name|remoteWALDirForPeer
argument_list|,
name|filename
operator|+
name|ReplicationUtils
operator|.
name|RENAME_WAL_SUFFIX
argument_list|)
decl_stmt|;
comment|// Some FileSystem implementations may not support atomic rename so we need to do it in two
comment|// phases
name|FSUtils
operator|.
name|renameFile
argument_list|(
name|remoteFs
argument_list|,
name|tmpRemoteWAL
argument_list|,
name|toCommitRemoteWAL
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|renameFile
argument_list|(
name|remoteFs
argument_list|,
name|toCommitRemoteWAL
argument_list|,
operator|new
name|Path
argument_list|(
name|remoteWALDirForPeer
argument_list|,
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|stateAndNewState
operator|.
name|getFirst
argument_list|()
operator|.
name|equals
argument_list|(
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|)
operator|&&
name|stateAndNewState
operator|.
name|getSecond
argument_list|()
operator|.
name|equals
argument_list|(
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
operator|)
operator|||
name|stateAndNewState
operator|.
name|getFirst
argument_list|()
operator|.
name|equals
argument_list|(
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
condition|)
block|{
comment|// check whether we still need to process this file
comment|// actually we only write wal file which name is ended with .syncrep in A state, and after
comment|// transiting to a state other than A, we will reopen all the regions so the data in the wal
comment|// will be flushed so the wal file will be archived soon. But it is still possible that there
comment|// is a server crash when we are transiting from A to S, to simplify the logic of the transit
comment|// procedure, here we will also check the remote snapshot directory in state S, so that we do
comment|// not need wait until all the wal files with .syncrep suffix to be archived before finishing
comment|// the procedure.
name|String
name|remoteWALDir
init|=
name|peer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getRemoteWALDir
argument_list|()
decl_stmt|;
name|Path
name|remoteSnapshotDirForPeer
init|=
name|ReplicationUtils
operator|.
name|getPeerSnapshotWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
name|FileSystem
name|remoteFs
init|=
name|ReplicationUtils
operator|.
name|getRemoteWALFileSystem
argument_list|(
name|conf
argument_list|,
name|remoteWALDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteSnapshotDirForPeer
argument_list|,
name|filename
argument_list|)
argument_list|)
condition|)
block|{
comment|// the file has been replayed when the remote cluster was transited from S to DA, the
comment|// content will be replicated back to us so give up split it.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Giveup splitting {} since it has been replayed in the remote cluster and "
operator|+
literal|"the content will be replicated back"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|static
name|Status
name|splitLog
parameter_list|(
name|String
name|name
parameter_list|,
name|CancelableProgressable
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RegionServerServices
name|server
parameter_list|,
name|LastSequenceId
name|sequenceIdChecker
parameter_list|,
name|WALFactory
name|factory
parameter_list|)
block|{
name|Path
name|walDir
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
try|try
block|{
name|walDir
operator|=
name|FSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|walDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not find root dir or fs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|RESIGNED
return|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|processSyncReplicationWAL
argument_list|(
name|name
argument_list|,
name|conf
argument_list|,
name|server
argument_list|,
name|fs
argument_list|,
name|walDir
argument_list|)
condition|)
block|{
return|return
name|Status
operator|.
name|DONE
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to process sync replication wal {}"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|RESIGNED
return|;
block|}
comment|// TODO have to correctly figure out when log splitting has been
comment|// interrupted or has encountered a transient error and when it has
comment|// encountered a bad non-retry-able persistent error.
try|try
block|{
name|SplitLogWorkerCoordination
name|splitLogWorkerCoordination
init|=
name|server
operator|.
name|getCoordinatedStateManager
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getCoordinatedStateManager
argument_list|()
operator|.
name|getSplitLogWorkerCoordination
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|WALSplitter
operator|.
name|splitLogFile
argument_list|(
name|walDir
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|p
argument_list|,
name|sequenceIdChecker
argument_list|,
name|splitLogWorkerCoordination
argument_list|,
name|factory
argument_list|,
name|server
argument_list|)
condition|)
block|{
return|return
name|Status
operator|.
name|PREEMPTED
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|iioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"log splitting of "
operator|+
name|name
operator|+
literal|" interrupted, resigning"
argument_list|,
name|iioe
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|RESIGNED
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|FileNotFoundException
condition|)
block|{
comment|// A wal file may not exist anymore. Nothing can be recovered so move on
name|LOG
operator|.
name|warn
argument_list|(
literal|"WAL {} does not exist anymore"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|DONE
return|;
block|}
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RetriesExhaustedException
operator|&&
operator|(
name|cause
operator|instanceof
name|NotServingRegionException
operator|||
name|cause
operator|instanceof
name|ConnectException
operator|||
name|cause
operator|instanceof
name|SocketTimeoutException
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"log replaying of "
operator|+
name|name
operator|+
literal|" can't connect to the target regionserver, "
operator|+
literal|"resigning"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|RESIGNED
return|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|InterruptedException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"log splitting of "
operator|+
name|name
operator|+
literal|" interrupted, resigning"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|RESIGNED
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"log splitting of "
operator|+
name|name
operator|+
literal|" failed, returning error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|ERR
return|;
block|}
return|return
name|Status
operator|.
name|DONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SplitLogWorker "
operator|+
name|server
operator|.
name|getServerName
argument_list|()
operator|+
literal|" starting"
argument_list|)
expr_stmt|;
name|coordination
operator|.
name|registerListener
argument_list|()
expr_stmt|;
comment|// wait for Coordination Engine is ready
name|boolean
name|res
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|res
operator|&&
operator|!
name|coordination
operator|.
name|isStop
argument_list|()
condition|)
block|{
name|res
operator|=
name|coordination
operator|.
name|isReady
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|coordination
operator|.
name|isStop
argument_list|()
condition|)
block|{
name|coordination
operator|.
name|taskLoop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|ExceptionUtil
operator|.
name|isInterrupt
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SplitLogWorker interrupted. Exiting. "
operator|+
operator|(
name|coordination
operator|.
name|isStop
argument_list|()
condition|?
literal|""
else|:
literal|" (ERROR: exitWorker is not set, exiting anyway)"
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// only a logical error can cause here. Printing it out
comment|// to make debugging easier
name|LOG
operator|.
name|error
argument_list|(
literal|"unexpected error "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|coordination
operator|.
name|removeListener
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SplitLogWorker "
operator|+
name|server
operator|.
name|getServerName
argument_list|()
operator|+
literal|" exiting"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If the worker is doing a task i.e. splitting a log file then stop the task.    * It doesn't exit the worker thread.    */
specifier|public
name|void
name|stopTask
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending interrupt to stop the worker thread"
argument_list|)
expr_stmt|;
name|worker
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// TODO interrupt often gets swallowed, do what else?
block|}
comment|/**    * start the SplitLogWorker thread    */
specifier|public
name|void
name|start
parameter_list|()
block|{
name|worker
operator|=
operator|new
name|Thread
argument_list|(
literal|null
argument_list|,
name|this
argument_list|,
literal|"SplitLogWorker-"
operator|+
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|toShortString
argument_list|()
argument_list|)
expr_stmt|;
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * stop the SplitLogWorker thread    */
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|coordination
operator|.
name|stopProcessingTasks
argument_list|()
expr_stmt|;
name|stopTask
argument_list|()
expr_stmt|;
block|}
comment|/**    * Objects implementing this interface actually do the task that has been    * acquired by a {@link SplitLogWorker}. Since there isn't a water-tight    * guarantee that two workers will not be executing the same task therefore it    * is better to have workers prepare the task and then have the    * {@link org.apache.hadoop.hbase.master.SplitLogManager} commit the work in    * SplitLogManager.TaskFinisher    */
annotation|@
name|FunctionalInterface
specifier|public
interface|interface
name|TaskExecutor
block|{
enum|enum
name|Status
block|{
name|DONE
parameter_list|()
operator|,
constructor|ERR(
block|)
enum|,
name|RESIGNED
parameter_list|()
operator|,
constructor|PREEMPTED(
block|)
block|}
end_class

begin_function_decl
name|Status
name|exec
parameter_list|(
name|String
name|name
parameter_list|,
name|CancelableProgressable
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|}
comment|/**    * Returns the number of tasks processed by coordination.    * This method is used by tests only    */
end_comment

begin_function
unit|@
name|VisibleForTesting
specifier|public
name|int
name|getTaskReadySeq
parameter_list|()
block|{
return|return
name|coordination
operator|.
name|getTaskReadySeq
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

