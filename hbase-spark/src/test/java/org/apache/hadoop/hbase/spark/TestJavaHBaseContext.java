begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|LoadIncrementalHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|spark
operator|.
name|example
operator|.
name|hbasecontext
operator|.
name|JavaHBaseBulkDeleteExample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaRDD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaSparkContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestJavaHBaseContext
implements|implements
name|Serializable
block|{
specifier|private
specifier|transient
name|JavaSparkContext
name|jsc
decl_stmt|;
name|HBaseTestingUtility
name|htu
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJavaHBaseContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnFamily
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnFamily1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|String
name|columnFamilyStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|columnFamily
argument_list|)
decl_stmt|;
name|String
name|columnFamilyStr1
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|columnFamily1
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|jsc
operator|=
operator|new
name|JavaSparkContext
argument_list|(
literal|"local"
argument_list|,
literal|"JavaHBaseContextSuite"
argument_list|)
expr_stmt|;
name|File
name|tempDir
init|=
name|Files
operator|.
name|createTempDir
argument_list|()
decl_stmt|;
name|tempDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|htu
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"cleaning up test dir"
argument_list|)
expr_stmt|;
name|htu
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting minicluster"
argument_list|)
expr_stmt|;
name|htu
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|htu
operator|.
name|startMiniHBaseCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" - minicluster started"
argument_list|)
expr_stmt|;
try|try
block|{
name|htu
operator|.
name|deleteTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|" - no table "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|" found"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|" - creating table "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|htu
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|columnFamily
block|,
name|columnFamily1
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" - created table"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
name|htu
operator|.
name|deleteTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"shuting down minicluster"
argument_list|)
expr_stmt|;
name|htu
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|htu
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" - minicluster shut down"
argument_list|)
expr_stmt|;
name|htu
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|jsc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|jsc
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkPut
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"1,"
operator|+
name|columnFamilyStr
operator|+
literal|",a,1"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"2,"
operator|+
name|columnFamilyStr
operator|+
literal|",a,2"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"3,"
operator|+
name|columnFamilyStr
operator|+
literal|",a,3"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"4,"
operator|+
name|columnFamilyStr
operator|+
literal|",a,4"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"5,"
operator|+
name|columnFamilyStr
operator|+
literal|",a,5"
argument_list|)
expr_stmt|;
name|JavaRDD
argument_list|<
name|String
argument_list|>
name|rdd
init|=
name|jsc
operator|.
name|parallelize
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|htu
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|JavaHBaseContext
name|hbaseContext
init|=
operator|new
name|JavaHBaseContext
argument_list|(
name|jsc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|hbaseContext
operator|.
name|bulkPut
argument_list|(
name|rdd
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|new
name|PutFunction
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Result
name|result1
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Row 1 should had been deleted"
argument_list|,
name|result1
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result2
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Row 2 should had been deleted"
argument_list|,
name|result2
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result3
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Row 3 should had been deleted"
argument_list|,
name|result3
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result4
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Row 4 should had been deleted"
argument_list|,
name|result4
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result5
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Row 5 should had been deleted"
argument_list|,
name|result5
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PutFunction
implements|implements
name|Function
argument_list|<
name|String
argument_list|,
name|Put
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|Put
name|call
parameter_list|(
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|cells
init|=
name|v
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cells
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cells
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cells
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cells
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|JavaRDD
argument_list|<
name|byte
index|[]
argument_list|>
name|rdd
init|=
name|jsc
operator|.
name|parallelize
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|htu
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|populateTableWithMockData
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|JavaHBaseContext
name|hbaseContext
init|=
operator|new
name|JavaHBaseContext
argument_list|(
name|jsc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|hbaseContext
operator|.
name|bulkDelete
argument_list|(
name|rdd
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|new
name|JavaHBaseBulkDeleteExample
operator|.
name|DeleteFunction
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|Result
name|result1
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Row 1 should had been deleted"
argument_list|,
name|result1
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result2
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Row 2 should had been deleted"
argument_list|,
name|result2
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result3
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Row 3 should had been deleted"
argument_list|,
name|result3
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result4
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Row 4 should had been deleted"
argument_list|,
name|result4
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result5
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Row 5 should had been deleted"
argument_list|,
name|result5
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDistributedScan
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|htu
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|populateTableWithMockData
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|JavaHBaseContext
name|hbaseContext
init|=
operator|new
name|JavaHBaseContext
argument_list|(
name|jsc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JavaRDD
argument_list|<
name|String
argument_list|>
name|javaRdd
init|=
name|hbaseContext
operator|.
name|hbaseRDD
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|scan
argument_list|)
operator|.
name|map
argument_list|(
operator|new
name|ScanConvertFunction
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|javaRdd
operator|.
name|collect
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ScanConvertFunction
implements|implements
name|Function
argument_list|<
name|Tuple2
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
argument_list|,
name|String
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|Tuple2
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
name|v1
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|v1
operator|.
name|_1
argument_list|()
operator|.
name|copyBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkGet
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|JavaRDD
argument_list|<
name|byte
index|[]
argument_list|>
name|rdd
init|=
name|jsc
operator|.
name|parallelize
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|htu
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|populateTableWithMockData
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|JavaHBaseContext
name|hbaseContext
init|=
operator|new
name|JavaHBaseContext
argument_list|(
name|jsc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|JavaRDD
argument_list|<
name|String
argument_list|>
name|stringJavaRDD
init|=
name|hbaseContext
operator|.
name|bulkGet
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
literal|2
argument_list|,
name|rdd
argument_list|,
operator|new
name|GetFunction
argument_list|()
argument_list|,
operator|new
name|ResultFunction
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringJavaRDD
operator|.
name|count
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|output
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|(
literal|"testBulkLoad"
argument_list|)
decl_stmt|;
comment|// Add cell as String: "row,falmily,qualifier,value"
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// row1
name|list
operator|.
name|add
argument_list|(
literal|"1,"
operator|+
name|columnFamilyStr
operator|+
literal|",b,1"
argument_list|)
expr_stmt|;
comment|// row3
name|list
operator|.
name|add
argument_list|(
literal|"3,"
operator|+
name|columnFamilyStr
operator|+
literal|",a,2"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"3,"
operator|+
name|columnFamilyStr
operator|+
literal|",b,1"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"3,"
operator|+
name|columnFamilyStr1
operator|+
literal|",a,1"
argument_list|)
expr_stmt|;
comment|//row2
name|list
operator|.
name|add
argument_list|(
literal|"2,"
operator|+
name|columnFamilyStr
operator|+
literal|",a,3"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"2,"
operator|+
name|columnFamilyStr
operator|+
literal|",b,3"
argument_list|)
expr_stmt|;
name|JavaRDD
argument_list|<
name|String
argument_list|>
name|rdd
init|=
name|jsc
operator|.
name|parallelize
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|htu
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|JavaHBaseContext
name|hbaseContext
init|=
operator|new
name|JavaHBaseContext
argument_list|(
name|jsc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|hbaseContext
operator|.
name|bulkLoad
argument_list|(
name|rdd
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|new
name|BulkLoadFunction
argument_list|()
argument_list|,
name|output
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|FamilyHFileWriteOptions
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
name|HConstants
operator|.
name|DEFAULT_MAX_FILE_SIZE
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Do bulk load
name|LoadIncrementalHFiles
name|load
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|load
operator|.
name|doBulkLoad
argument_list|(
name|output
argument_list|,
name|admin
argument_list|,
name|table
argument_list|,
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check row1
name|List
argument_list|<
name|Cell
argument_list|>
name|cell1
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|listCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cell1
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// Check row3
name|List
argument_list|<
name|Cell
argument_list|>
name|cell3
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|listCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cell3
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// Check row2
name|List
argument_list|<
name|Cell
argument_list|>
name|cell2
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|listCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cell2
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkLoadThinRows
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|output
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|(
literal|"testBulkLoadThinRows"
argument_list|)
decl_stmt|;
comment|// because of the limitation of scala bulkLoadThinRows API
comment|// we need to provide data as<row, all cells in that row>
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// row1
name|List
argument_list|<
name|String
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list1
operator|.
name|add
argument_list|(
literal|"1,"
operator|+
name|columnFamilyStr
operator|+
literal|",b,1"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
comment|// row3
name|List
argument_list|<
name|String
argument_list|>
name|list3
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list3
operator|.
name|add
argument_list|(
literal|"3,"
operator|+
name|columnFamilyStr
operator|+
literal|",a,2"
argument_list|)
expr_stmt|;
name|list3
operator|.
name|add
argument_list|(
literal|"3,"
operator|+
name|columnFamilyStr
operator|+
literal|",b,1"
argument_list|)
expr_stmt|;
name|list3
operator|.
name|add
argument_list|(
literal|"3,"
operator|+
name|columnFamilyStr1
operator|+
literal|",a,1"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|list3
argument_list|)
expr_stmt|;
comment|//row2
name|List
argument_list|<
name|String
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list2
operator|.
name|add
argument_list|(
literal|"2,"
operator|+
name|columnFamilyStr
operator|+
literal|",a,3"
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
literal|"2,"
operator|+
name|columnFamilyStr
operator|+
literal|",b,3"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|JavaRDD
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|rdd
init|=
name|jsc
operator|.
name|parallelize
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|htu
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|JavaHBaseContext
name|hbaseContext
init|=
operator|new
name|JavaHBaseContext
argument_list|(
name|jsc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|hbaseContext
operator|.
name|bulkLoadThinRows
argument_list|(
name|rdd
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|new
name|BulkLoadThinRowsFunction
argument_list|()
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|FamilyHFileWriteOptions
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
name|HConstants
operator|.
name|DEFAULT_MAX_FILE_SIZE
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Do bulk load
name|LoadIncrementalHFiles
name|load
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|load
operator|.
name|doBulkLoad
argument_list|(
name|output
argument_list|,
name|admin
argument_list|,
name|table
argument_list|,
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check row1
name|List
argument_list|<
name|Cell
argument_list|>
name|cell1
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|listCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cell1
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// Check row3
name|List
argument_list|<
name|Cell
argument_list|>
name|cell3
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|listCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cell3
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell3
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// Check row2
name|List
argument_list|<
name|Cell
argument_list|>
name|cell2
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|listCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cell2
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|columnFamilyStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BulkLoadFunction
implements|implements
name|Function
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|KeyFamilyQualifier
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|KeyFamilyQualifier
argument_list|,
name|byte
index|[]
argument_list|>
name|call
parameter_list|(
name|String
name|v1
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|v1
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
index|[]
name|strs
init|=
name|v1
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|strs
operator|.
name|length
operator|!=
literal|4
condition|)
return|return
literal|null
return|;
name|KeyFamilyQualifier
name|kfq
init|=
operator|new
name|KeyFamilyQualifier
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strs
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strs
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strs
index|[
literal|2
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|(
name|kfq
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strs
index|[
literal|3
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BulkLoadThinRowsFunction
implements|implements
name|Function
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|Pair
argument_list|<
name|ByteArrayWrapper
argument_list|,
name|FamiliesQualifiersValues
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|ByteArrayWrapper
argument_list|,
name|FamiliesQualifiersValues
argument_list|>
name|call
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ByteArrayWrapper
name|rowKey
init|=
literal|null
decl_stmt|;
name|FamiliesQualifiersValues
name|fqv
init|=
operator|new
name|FamiliesQualifiersValues
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cell
range|:
name|list
control|)
block|{
name|String
index|[]
name|strs
init|=
name|cell
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowKey
operator|==
literal|null
condition|)
block|{
name|rowKey
operator|=
operator|new
name|ByteArrayWrapper
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fqv
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strs
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strs
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strs
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Pair
argument_list|(
name|rowKey
argument_list|,
name|fqv
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GetFunction
implements|implements
name|Function
argument_list|<
name|byte
index|[]
argument_list|,
name|Get
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|Get
name|call
parameter_list|(
name|byte
index|[]
name|v
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|Get
argument_list|(
name|v
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ResultFunction
implements|implements
name|Function
argument_list|<
name|Result
argument_list|,
name|String
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|String
name|call
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|it
init|=
name|result
operator|.
name|listCells
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Cell
name|cell
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|q
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"counter"
operator|.
name|equals
argument_list|(
name|q
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|q
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|q
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|populateTableWithMockData
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|columnFamily
argument_list|,
name|columnFamily
argument_list|,
name|columnFamily
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

