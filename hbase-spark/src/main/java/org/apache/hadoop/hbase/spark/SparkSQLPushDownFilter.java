begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|spark
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FilterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|sql
operator|.
name|datasources
operator|.
name|hbase
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|collection
operator|.
name|mutable
operator|.
name|MutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This filter will push down all qualifier logic given to us  * by SparkSQL so that we have make the filters at the region server level  * and avoid sending the data back to the client to be filtered.  */
end_comment

begin_class
specifier|public
class|class
name|SparkSQLPushDownFilter
extends|extends
name|FilterBase
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SparkSQLPushDownFilter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//The following values are populated with protobuffer
name|DynamicLogicExpression
name|dynamicLogicExpression
decl_stmt|;
name|byte
index|[]
index|[]
name|valueFromQueryArray
decl_stmt|;
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|String
argument_list|>
argument_list|>
name|currentCellToColumnIndexMap
decl_stmt|;
comment|//The following values are transient
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteArrayComparable
argument_list|>
name|columnToCurrentRowValueMap
init|=
literal|null
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|rowKeyFamily
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|rowKeyQualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
specifier|public
name|SparkSQLPushDownFilter
parameter_list|(
name|DynamicLogicExpression
name|dynamicLogicExpression
parameter_list|,
name|byte
index|[]
index|[]
name|valueFromQueryArray
parameter_list|,
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|String
argument_list|>
argument_list|>
name|currentCellToColumnIndexMap
parameter_list|)
block|{
name|this
operator|.
name|dynamicLogicExpression
operator|=
name|dynamicLogicExpression
expr_stmt|;
name|this
operator|.
name|valueFromQueryArray
operator|=
name|valueFromQueryArray
expr_stmt|;
name|this
operator|.
name|currentCellToColumnIndexMap
operator|=
name|currentCellToColumnIndexMap
expr_stmt|;
block|}
specifier|public
name|SparkSQLPushDownFilter
parameter_list|(
name|DynamicLogicExpression
name|dynamicLogicExpression
parameter_list|,
name|byte
index|[]
index|[]
name|valueFromQueryArray
parameter_list|,
name|MutableList
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|dynamicLogicExpression
operator|=
name|dynamicLogicExpression
expr_stmt|;
name|this
operator|.
name|valueFromQueryArray
operator|=
name|valueFromQueryArray
expr_stmt|;
comment|//generate family qualifier to index mapping
name|this
operator|.
name|currentCellToColumnIndexMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
name|fields
operator|.
name|apply
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cfBytes
init|=
name|field
operator|.
name|cfBytes
argument_list|()
decl_stmt|;
name|ByteArrayComparable
name|familyByteComparable
init|=
operator|new
name|ByteArrayComparable
argument_list|(
name|cfBytes
argument_list|,
literal|0
argument_list|,
name|cfBytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|String
argument_list|>
name|qualifierIndexMap
init|=
name|currentCellToColumnIndexMap
operator|.
name|get
argument_list|(
name|familyByteComparable
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifierIndexMap
operator|==
literal|null
condition|)
block|{
name|qualifierIndexMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|currentCellToColumnIndexMap
operator|.
name|put
argument_list|(
name|familyByteComparable
argument_list|,
name|qualifierIndexMap
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|qBytes
init|=
name|field
operator|.
name|colBytes
argument_list|()
decl_stmt|;
name|ByteArrayComparable
name|qualifierByteComparable
init|=
operator|new
name|ByteArrayComparable
argument_list|(
name|qBytes
argument_list|,
literal|0
argument_list|,
name|qBytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|qualifierIndexMap
operator|.
name|put
argument_list|(
name|qualifierByteComparable
argument_list|,
name|field
operator|.
name|colName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
comment|//If the map RowValueMap is empty then we need to populate
comment|// the row key
if|if
condition|(
name|columnToCurrentRowValueMap
operator|==
literal|null
condition|)
block|{
name|columnToCurrentRowValueMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|String
argument_list|>
name|qualifierColumnMap
init|=
name|currentCellToColumnIndexMap
operator|.
name|get
argument_list|(
operator|new
name|ByteArrayComparable
argument_list|(
name|rowKeyFamily
argument_list|,
literal|0
argument_list|,
name|rowKeyFamily
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifierColumnMap
operator|!=
literal|null
condition|)
block|{
name|String
name|rowKeyColumnName
init|=
name|qualifierColumnMap
operator|.
name|get
argument_list|(
operator|new
name|ByteArrayComparable
argument_list|(
name|rowKeyQualifier
argument_list|,
literal|0
argument_list|,
name|rowKeyQualifier
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
comment|//Make sure that the rowKey is part of the where clause
if|if
condition|(
name|rowKeyColumnName
operator|!=
literal|null
condition|)
block|{
name|columnToCurrentRowValueMap
operator|.
name|put
argument_list|(
name|rowKeyColumnName
argument_list|,
operator|new
name|ByteArrayComparable
argument_list|(
name|c
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|c
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//Always populate the column value into the RowValueMap
name|ByteArrayComparable
name|currentFamilyByteComparable
init|=
operator|new
name|ByteArrayComparable
argument_list|(
name|c
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|c
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|String
argument_list|>
name|qualifierColumnMap
init|=
name|currentCellToColumnIndexMap
operator|.
name|get
argument_list|(
name|currentFamilyByteComparable
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifierColumnMap
operator|!=
literal|null
condition|)
block|{
name|String
name|columnName
init|=
name|qualifierColumnMap
operator|.
name|get
argument_list|(
operator|new
name|ByteArrayComparable
argument_list|(
name|c
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnName
operator|!=
literal|null
condition|)
block|{
name|columnToCurrentRowValueMap
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
operator|new
name|ByteArrayComparable
argument_list|(
name|c
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|c
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRow
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|result
init|=
name|dynamicLogicExpression
operator|.
name|execute
argument_list|(
name|columnToCurrentRowValueMap
argument_list|,
name|valueFromQueryArray
argument_list|)
decl_stmt|;
name|columnToCurrentRowValueMap
operator|=
literal|null
expr_stmt|;
return|return
operator|!
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error running dynamic logic on row"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @param pbBytes A pb serialized instance    * @return An instance of SparkSQLPushDownFilter    * @throws org.apache.hadoop.hbase.exceptions.DeserializationException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
specifier|static
name|SparkSQLPushDownFilter
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|pbBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|FilterProtos
operator|.
name|SQLPredicatePushDownFilter
name|proto
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|FilterProtos
operator|.
name|SQLPredicatePushDownFilter
operator|.
name|parseFrom
argument_list|(
name|pbBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//Load DynamicLogicExpression
name|DynamicLogicExpression
name|dynamicLogicExpression
init|=
name|DynamicLogicExpressionBuilder
operator|.
name|build
argument_list|(
name|proto
operator|.
name|getDynamicLogicExpression
argument_list|()
argument_list|)
decl_stmt|;
comment|//Load valuesFromQuery
specifier|final
name|List
argument_list|<
name|ByteString
argument_list|>
name|valueFromQueryArrayList
init|=
name|proto
operator|.
name|getValueFromQueryArrayList
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|valueFromQueryArray
init|=
operator|new
name|byte
index|[
name|valueFromQueryArrayList
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueFromQueryArrayList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|valueFromQueryArray
index|[
name|i
index|]
operator|=
name|valueFromQueryArrayList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
comment|//Load mapping from HBase family/qualifier to Spark SQL columnName
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|String
argument_list|>
argument_list|>
name|currentCellToColumnIndexMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FilterProtos
operator|.
name|SQLPredicatePushDownCellToColumnMapping
name|sqlPredicatePushDownCellToColumnMapping
range|:
name|proto
operator|.
name|getCellToColumnMappingList
argument_list|()
control|)
block|{
name|byte
index|[]
name|familyArray
init|=
name|sqlPredicatePushDownCellToColumnMapping
operator|.
name|getColumnFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ByteArrayComparable
name|familyByteComparable
init|=
operator|new
name|ByteArrayComparable
argument_list|(
name|familyArray
argument_list|,
literal|0
argument_list|,
name|familyArray
operator|.
name|length
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|String
argument_list|>
name|qualifierMap
init|=
name|currentCellToColumnIndexMap
operator|.
name|get
argument_list|(
name|familyByteComparable
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifierMap
operator|==
literal|null
condition|)
block|{
name|qualifierMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|currentCellToColumnIndexMap
operator|.
name|put
argument_list|(
name|familyByteComparable
argument_list|,
name|qualifierMap
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|qualifierArray
init|=
name|sqlPredicatePushDownCellToColumnMapping
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ByteArrayComparable
name|qualifierByteComparable
init|=
operator|new
name|ByteArrayComparable
argument_list|(
name|qualifierArray
argument_list|,
literal|0
argument_list|,
name|qualifierArray
operator|.
name|length
argument_list|)
decl_stmt|;
name|qualifierMap
operator|.
name|put
argument_list|(
name|qualifierByteComparable
argument_list|,
name|sqlPredicatePushDownCellToColumnMapping
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SparkSQLPushDownFilter
argument_list|(
name|dynamicLogicExpression
argument_list|,
name|valueFromQueryArray
argument_list|,
name|currentCellToColumnIndexMap
argument_list|)
return|;
block|}
comment|/**    * @return The filter serialized using pb    */
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
name|FilterProtos
operator|.
name|SQLPredicatePushDownFilter
operator|.
name|Builder
name|builder
init|=
name|FilterProtos
operator|.
name|SQLPredicatePushDownFilter
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|FilterProtos
operator|.
name|SQLPredicatePushDownCellToColumnMapping
operator|.
name|Builder
name|columnMappingBuilder
init|=
name|FilterProtos
operator|.
name|SQLPredicatePushDownCellToColumnMapping
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setDynamicLogicExpression
argument_list|(
name|dynamicLogicExpression
operator|.
name|toExpressionString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|valueFromQuery
range|:
name|valueFromQueryArray
control|)
block|{
name|builder
operator|.
name|addValueFromQueryArray
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|valueFromQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteArrayComparable
argument_list|,
name|HashMap
argument_list|<
name|ByteArrayComparable
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyEntry
range|:
name|currentCellToColumnIndexMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteArrayComparable
argument_list|,
name|String
argument_list|>
name|qualifierEntry
range|:
name|familyEntry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnMappingBuilder
operator|.
name|setColumnFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|familyEntry
operator|.
name|getKey
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnMappingBuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|qualifierEntry
operator|.
name|getKey
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnMappingBuilder
operator|.
name|setColumnName
argument_list|(
name|qualifierEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addCellToColumnMapping
argument_list|(
name|columnMappingBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

