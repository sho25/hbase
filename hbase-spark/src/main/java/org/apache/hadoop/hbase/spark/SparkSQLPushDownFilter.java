begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FilterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|collection
operator|.
name|mutable
operator|.
name|MutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This filter will push down all qualifier logic given to us  * by SparkSQL so that we have make the filters at the region server level  * and avoid sending the data back to the client to be filtered.  */
end_comment

begin_class
specifier|public
class|class
name|SparkSQLPushDownFilter
extends|extends
name|FilterBase
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SparkSQLPushDownFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|ColumnFamilyQualifierMapKeyWrapper
argument_list|,
name|ColumnFilter
argument_list|>
name|columnFamilyQualifierFilterMap
decl_stmt|;
specifier|public
name|SparkSQLPushDownFilter
parameter_list|(
name|HashMap
argument_list|<
name|ColumnFamilyQualifierMapKeyWrapper
argument_list|,
name|ColumnFilter
argument_list|>
name|columnFamilyQualifierFilterMap
parameter_list|)
block|{
name|this
operator|.
name|columnFamilyQualifierFilterMap
operator|=
name|columnFamilyQualifierFilterMap
expr_stmt|;
block|}
comment|/**    * This method will find the related filter logic for the given    * column family and qualifier then execute it.  It will also    * not clone the in coming cell to avoid extra object creation    *    * @param c            The Cell to be validated    * @return             ReturnCode object to determine if skipping is required    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Get filter if one exist
name|ColumnFilter
name|filter
init|=
name|columnFamilyQualifierFilterMap
operator|.
name|get
argument_list|(
operator|new
name|ColumnFamilyQualifierMapKeyWrapper
argument_list|(
name|c
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|c
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
comment|//If no filter then just include values
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
else|else
block|{
comment|//If there is a filter then run validation
if|if
condition|(
name|filter
operator|.
name|validate
argument_list|(
name|c
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|c
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
block|}
comment|//If validation fails then skip whole row
return|return
name|ReturnCode
operator|.
name|NEXT_ROW
return|;
block|}
comment|/**    * @param pbBytes A pb serialized instance    * @return An instance of SparkSQLPushDownFilter    * @throws org.apache.hadoop.hbase.exceptions.DeserializationException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
specifier|static
name|SparkSQLPushDownFilter
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|pbBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|HashMap
argument_list|<
name|ColumnFamilyQualifierMapKeyWrapper
argument_list|,
name|ColumnFilter
argument_list|>
name|columnFamilyQualifierFilterMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|FilterProtos
operator|.
name|SQLPredicatePushDownFilter
name|proto
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|FilterProtos
operator|.
name|SQLPredicatePushDownFilter
operator|.
name|parseFrom
argument_list|(
name|pbBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|FilterProtos
operator|.
name|SQLPredicatePushDownColumnFilter
argument_list|>
name|columnFilterListList
init|=
name|proto
operator|.
name|getColumnFilterListList
argument_list|()
decl_stmt|;
for|for
control|(
name|FilterProtos
operator|.
name|SQLPredicatePushDownColumnFilter
name|columnFilter
range|:
name|columnFilterListList
control|)
block|{
name|byte
index|[]
name|columnFamily
init|=
name|columnFilter
operator|.
name|getColumnFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|columnFilter
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|ColumnFamilyQualifierMapKeyWrapper
name|columnFamilyQualifierMapKeyWrapper
init|=
operator|new
name|ColumnFamilyQualifierMapKeyWrapper
argument_list|(
name|columnFamily
argument_list|,
literal|0
argument_list|,
name|columnFamily
operator|.
name|length
argument_list|,
name|qualifier
argument_list|,
literal|0
argument_list|,
name|qualifier
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|MutableList
argument_list|<
name|byte
index|[]
argument_list|>
name|points
init|=
operator|new
name|MutableList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|MutableList
argument_list|<
name|ScanRange
argument_list|>
name|scanRanges
init|=
operator|new
name|MutableList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteString
name|byteString
range|:
name|columnFilter
operator|.
name|getGetPointListList
argument_list|()
control|)
block|{
name|points
operator|.
name|$plus$eq
argument_list|(
name|byteString
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FilterProtos
operator|.
name|RowRange
name|rowRange
range|:
name|columnFilter
operator|.
name|getRangeListList
argument_list|()
control|)
block|{
name|ScanRange
name|scanRange
init|=
operator|new
name|ScanRange
argument_list|(
name|rowRange
operator|.
name|getStopRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|rowRange
operator|.
name|getStopRowInclusive
argument_list|()
argument_list|,
name|rowRange
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|rowRange
operator|.
name|getStartRowInclusive
argument_list|()
argument_list|)
decl_stmt|;
name|scanRanges
operator|.
name|$plus$eq
argument_list|(
name|scanRange
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ColumnFilter
name|columnFilterObj
init|=
operator|new
name|ColumnFilter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|points
argument_list|,
name|scanRanges
argument_list|)
decl_stmt|;
name|columnFamilyQualifierFilterMap
operator|.
name|put
argument_list|(
name|columnFamilyQualifierMapKeyWrapper
argument_list|,
name|columnFilterObj
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SparkSQLPushDownFilter
argument_list|(
name|columnFamilyQualifierFilterMap
argument_list|)
return|;
block|}
comment|/**    * @return The filter serialized using pb    */
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
name|FilterProtos
operator|.
name|SQLPredicatePushDownFilter
operator|.
name|Builder
name|builder
init|=
name|FilterProtos
operator|.
name|SQLPredicatePushDownFilter
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|FilterProtos
operator|.
name|SQLPredicatePushDownColumnFilter
operator|.
name|Builder
name|columnBuilder
init|=
name|FilterProtos
operator|.
name|SQLPredicatePushDownColumnFilter
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|FilterProtos
operator|.
name|RowRange
operator|.
name|Builder
name|rowRangeBuilder
init|=
name|FilterProtos
operator|.
name|RowRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ColumnFamilyQualifierMapKeyWrapper
argument_list|,
name|ColumnFilter
argument_list|>
name|entry
range|:
name|columnFamilyQualifierFilterMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|setColumnFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|cloneColumnFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|cloneQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MutableList
argument_list|<
name|byte
index|[]
argument_list|>
name|points
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|points
argument_list|()
decl_stmt|;
name|int
name|pointLength
init|=
name|points
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointLength
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|point
init|=
name|points
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|columnBuilder
operator|.
name|addGetPointList
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|point
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MutableList
argument_list|<
name|ScanRange
argument_list|>
name|ranges
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|ranges
argument_list|()
decl_stmt|;
name|int
name|rangeLength
init|=
name|ranges
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rangeLength
condition|;
name|i
operator|++
control|)
block|{
name|ScanRange
name|scanRange
init|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|rowRangeBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rowRangeBuilder
operator|.
name|setStartRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|scanRange
operator|.
name|lowerBound
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rowRangeBuilder
operator|.
name|setStopRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|scanRange
operator|.
name|upperBound
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rowRangeBuilder
operator|.
name|setStartRowInclusive
argument_list|(
name|scanRange
operator|.
name|isLowerBoundEqualTo
argument_list|()
argument_list|)
expr_stmt|;
name|rowRangeBuilder
operator|.
name|setStopRowInclusive
argument_list|(
name|scanRange
operator|.
name|isUpperBoundEqualTo
argument_list|()
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|addRangeList
argument_list|(
name|rowRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addColumnFilterList
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

