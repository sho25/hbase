begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ServerCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HalfStoreFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Tool to load the output of HFileOutputFormat into an existing table.  * @see #usage()  */
end_comment

begin_class
specifier|public
class|class
name|LoadIncrementalHFiles
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LoadIncrementalHFiles
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TABLE_CREATE_MAX_RETRIES
init|=
literal|20
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TABLE_CREATE_SLEEP
init|=
literal|60000
decl_stmt|;
specifier|static
name|AtomicLong
name|regionCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|HBaseAdmin
name|hbAdmin
decl_stmt|;
specifier|private
name|Configuration
name|cfg
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Future
argument_list|>
name|futures
init|=
operator|new
name|HashSet
argument_list|<
name|Future
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Future
argument_list|>
name|futuresForSplittingHFile
init|=
operator|new
name|HashSet
argument_list|<
name|Future
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|String
name|NAME
init|=
literal|"completebulkload"
decl_stmt|;
specifier|public
name|LoadIncrementalHFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|hbAdmin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
name|NAME
operator|+
literal|" /path/to/hfileoutputformat-output "
operator|+
literal|"tablename"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Represents an HFile waiting to be loaded. An queue is used    * in this class in order to support the case where a region has    * split during the process of the load. When this happens,    * the HFile is split into two physical parts across the new    * region boundary, and each part is added back into the queue.    * The import process finishes when the queue is empty.    */
specifier|private
specifier|static
class|class
name|LoadQueueItem
block|{
specifier|final
name|byte
index|[]
name|family
decl_stmt|;
specifier|final
name|Path
name|hfilePath
decl_stmt|;
specifier|public
name|LoadQueueItem
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|Path
name|hfilePath
parameter_list|)
block|{
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
name|this
operator|.
name|hfilePath
operator|=
name|hfilePath
expr_stmt|;
block|}
block|}
comment|/**    * Walk the given directory for all HFiles, and return a Queue    * containing all such files.    */
specifier|private
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|discoverLoadQueue
parameter_list|(
name|Path
name|hfofDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|hfofDir
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|hfofDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"HFileOutputFormat dir "
operator|+
name|hfofDir
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|FileStatus
index|[]
name|familyDirStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hfofDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyDirStatuses
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"No families found in "
operator|+
name|hfofDir
argument_list|)
throw|;
block|}
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|ret
init|=
operator|new
name|LinkedList
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|familyDirStatuses
control|)
block|{
if|if
condition|(
operator|!
name|stat
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping non-directory "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Path
name|familyDir
init|=
name|stat
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Skip _logs, etc
if|if
condition|(
name|familyDir
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
continue|continue;
name|byte
index|[]
name|family
init|=
name|familyDir
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Path
index|[]
name|hfiles
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|familyDir
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|hfile
range|:
name|hfiles
control|)
block|{
if|if
condition|(
name|hfile
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|LoadQueueItem
argument_list|(
name|family
argument_list|,
name|hfile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Perform a bulk load of the given directory into the given    * pre-existing table.    * @param hfofDir the directory that was provided as the output path    * of a job using HFileOutputFormat    * @param table the table to load into    * @throws TableNotFoundException if table does not yet exist    */
specifier|public
name|void
name|doBulkLoad
parameter_list|(
name|Path
name|hfofDir
parameter_list|,
name|HTable
name|table
parameter_list|)
throws|throws
name|TableNotFoundException
throws|,
name|IOException
block|{
name|HConnection
name|conn
init|=
name|table
operator|.
name|getConnection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|conn
operator|.
name|isTableAvailable
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|"is not currently available."
argument_list|)
throw|;
block|}
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
init|=
literal|null
decl_stmt|;
name|int
name|nrThreads
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"hbase.loadincremental.threads.max"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|)
decl_stmt|;
name|ThreadFactoryBuilder
name|builder
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNameFormat
argument_list|(
literal|"LoadIncrementalHFiles-%1$d"
argument_list|)
expr_stmt|;
name|ExecutorService
name|pool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|nrThreads
argument_list|,
name|nrThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|pool
operator|)
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|queue
operator|=
name|discoverLoadQueue
argument_list|(
name|hfofDir
argument_list|)
expr_stmt|;
comment|// outer loop picks up LoadQueueItem due to HFile split
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
operator|||
name|futuresForSplittingHFile
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|startEndKeys
init|=
name|table
operator|.
name|getStartEndKeys
argument_list|()
decl_stmt|;
comment|// inner loop groups callables
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LoadQueueItem
name|item
init|=
name|queue
operator|.
name|remove
argument_list|()
decl_stmt|;
name|tryLoad
argument_list|(
name|item
argument_list|,
name|conn
argument_list|,
name|table
argument_list|,
name|queue
argument_list|,
name|startEndKeys
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Future
argument_list|>
name|iter
init|=
name|futuresForSplittingHFile
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
name|timeoutSeen
init|=
literal|false
decl_stmt|;
name|Future
name|future
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
break|break;
comment|// we have at least two new HFiles to process
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ee
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
name|timeoutSeen
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|timeoutSeen
condition|)
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ee
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
operator|&&
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|err
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|err
operator|.
name|append
argument_list|(
literal|"-------------------------------------------------\n"
argument_list|)
expr_stmt|;
name|err
operator|.
name|append
argument_list|(
literal|"Bulk load aborted with some files not yet loaded:\n"
argument_list|)
expr_stmt|;
name|err
operator|.
name|append
argument_list|(
literal|"-------------------------------------------------\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|LoadQueueItem
name|q
range|:
name|queue
control|)
block|{
name|err
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
operator|.
name|append
argument_list|(
name|q
operator|.
name|hfilePath
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// unique file name for the table
name|String
name|getUniqueName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|String
name|name
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|tableName
argument_list|)
operator|+
literal|","
operator|+
name|regionCount
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
return|return
name|name
return|;
block|}
name|void
name|splitStoreFileAndRequeue
parameter_list|(
specifier|final
name|LoadQueueItem
name|item
parameter_list|,
specifier|final
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
specifier|final
name|HTable
name|table
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|splitKey
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|hfilePath
init|=
name|item
operator|.
name|hfilePath
decl_stmt|;
comment|// We use a '_' prefix which is ignored when walking directory trees
comment|// above.
specifier|final
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|item
operator|.
name|hfilePath
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"_tmp"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HFile at "
operator|+
name|hfilePath
operator|+
literal|" no longer fits inside a single "
operator|+
literal|"region. Splitting..."
argument_list|)
expr_stmt|;
name|String
name|uniqueName
init|=
name|getUniqueName
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|familyDesc
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getFamily
argument_list|(
name|item
operator|.
name|family
argument_list|)
decl_stmt|;
name|Path
name|botOut
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
name|uniqueName
operator|+
literal|".bottom"
argument_list|)
decl_stmt|;
name|Path
name|topOut
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
name|uniqueName
operator|+
literal|".top"
argument_list|)
decl_stmt|;
name|splitStoreFile
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|hfilePath
argument_list|,
name|familyDesc
argument_list|,
name|splitKey
argument_list|,
name|botOut
argument_list|,
name|topOut
argument_list|)
expr_stmt|;
comment|// Add these back at the *front* of the queue, so there's a lower
comment|// chance that the region will just split again before we get there.
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|queue
operator|.
name|addFirst
argument_list|(
operator|new
name|LoadQueueItem
argument_list|(
name|item
operator|.
name|family
argument_list|,
name|botOut
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addFirst
argument_list|(
operator|new
name|LoadQueueItem
argument_list|(
name|item
operator|.
name|family
argument_list|,
name|topOut
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully split into new HFiles "
operator|+
name|botOut
operator|+
literal|" and "
operator|+
name|topOut
argument_list|)
expr_stmt|;
block|}
comment|/**    * Attempt to load the given load queue item into its target region server.    * If the hfile boundary no longer fits into a region, physically splits    * the hfile such that the new bottom half will fit, and adds the two    * resultant hfiles back into the load queue.    */
specifier|private
name|boolean
name|tryLoad
parameter_list|(
specifier|final
name|LoadQueueItem
name|item
parameter_list|,
specifier|final
name|HConnection
name|conn
parameter_list|,
specifier|final
name|HTable
name|table
parameter_list|,
specifier|final
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
specifier|final
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|startEndKeys
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|hfilePath
init|=
name|item
operator|.
name|hfilePath
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|hfilePath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|HFile
operator|.
name|Reader
name|hfr
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|hfilePath
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|first
decl_stmt|,
name|last
decl_stmt|;
try|try
block|{
name|hfr
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|first
operator|=
name|hfr
operator|.
name|getFirstRowKey
argument_list|()
expr_stmt|;
name|last
operator|=
name|hfr
operator|.
name|getLastRowKey
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hfr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to load hfile="
operator|+
name|hfilePath
operator|+
literal|" first="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
argument_list|)
operator|+
literal|" last="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|last
operator|==
literal|null
condition|)
block|{
assert|assert
name|first
operator|==
literal|null
operator|&&
name|last
operator|==
literal|null
assert|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hfile "
operator|+
name|hfilePath
operator|+
literal|" has no entries, skipping"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid range: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
argument_list|)
operator|+
literal|"> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|last
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|startEndKeys
operator|.
name|getFirst
argument_list|()
argument_list|,
name|first
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|idx
operator|=
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|final
name|int
name|indexForCallable
init|=
name|idx
decl_stmt|;
name|boolean
name|lastKeyInRange
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|last
argument_list|,
name|startEndKeys
operator|.
name|getSecond
argument_list|()
index|[
name|idx
index|]
argument_list|)
operator|<
literal|0
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|startEndKeys
operator|.
name|getSecond
argument_list|()
index|[
name|idx
index|]
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lastKeyInRange
condition|)
block|{
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|splitStoreFileAndRequeue
argument_list|(
name|item
argument_list|,
name|queue
argument_list|,
name|table
argument_list|,
name|startEndKeys
operator|.
name|getFirst
argument_list|()
index|[
name|indexForCallable
index|]
argument_list|,
name|startEndKeys
operator|.
name|getSecond
argument_list|()
index|[
name|indexForCallable
index|]
argument_list|)
expr_stmt|;
return|return
operator|(
name|Void
operator|)
literal|null
return|;
block|}
block|}
decl_stmt|;
name|futuresForSplittingHFile
operator|.
name|add
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|ServerCallable
argument_list|<
name|Void
argument_list|>
name|svrCallable
init|=
operator|new
name|ServerCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|conn
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|first
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to connect to server "
operator|+
name|location
operator|+
literal|"for row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|regionName
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|server
operator|.
name|bulkLoadHFile
argument_list|(
name|hfilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|regionName
argument_list|,
name|item
operator|.
name|family
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|conn
operator|.
name|getRegionServerWithRetries
argument_list|(
name|svrCallable
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * Split a storefile into a top and bottom half, maintaining    * the metadata, recreating bloom filters, etc.    */
specifier|static
name|void
name|splitStoreFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inFile
parameter_list|,
name|HColumnDescriptor
name|familyDesc
parameter_list|,
name|byte
index|[]
name|splitKey
parameter_list|,
name|Path
name|bottomOut
parameter_list|,
name|Path
name|topOut
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Open reader with no block cache, and not in-memory
name|Reference
name|topReference
init|=
operator|new
name|Reference
argument_list|(
name|splitKey
argument_list|,
name|Range
operator|.
name|top
argument_list|)
decl_stmt|;
name|Reference
name|bottomReference
init|=
operator|new
name|Reference
argument_list|(
name|splitKey
argument_list|,
name|Range
operator|.
name|bottom
argument_list|)
decl_stmt|;
name|copyHFileHalf
argument_list|(
name|conf
argument_list|,
name|inFile
argument_list|,
name|topOut
argument_list|,
name|topReference
argument_list|,
name|familyDesc
argument_list|)
expr_stmt|;
name|copyHFileHalf
argument_list|(
name|conf
argument_list|,
name|inFile
argument_list|,
name|bottomOut
argument_list|,
name|bottomReference
argument_list|,
name|familyDesc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy half of an HFile into a new HFile.    */
specifier|private
specifier|static
name|void
name|copyHFileHalf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inFile
parameter_list|,
name|Path
name|outFile
parameter_list|,
name|Reference
name|reference
parameter_list|,
name|HColumnDescriptor
name|familyDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|inFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HalfStoreFileReader
name|halfReader
init|=
literal|null
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|halfWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|halfReader
operator|=
operator|new
name|HalfStoreFileReader
argument_list|(
name|fs
argument_list|,
name|inFile
argument_list|,
name|cacheConf
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|fileInfo
init|=
name|halfReader
operator|.
name|loadFileInfo
argument_list|()
decl_stmt|;
name|int
name|blocksize
init|=
name|familyDescriptor
operator|.
name|getBlocksize
argument_list|()
decl_stmt|;
name|Algorithm
name|compression
init|=
name|familyDescriptor
operator|.
name|getCompression
argument_list|()
decl_stmt|;
name|BloomType
name|bloomFilterType
init|=
name|familyDescriptor
operator|.
name|getBloomFilterType
argument_list|()
decl_stmt|;
name|halfWriter
operator|=
operator|new
name|StoreFile
operator|.
name|Writer
argument_list|(
name|fs
argument_list|,
name|outFile
argument_list|,
name|blocksize
argument_list|,
name|compression
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|bloomFilterType
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HFileScanner
name|scanner
init|=
name|halfReader
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|()
expr_stmt|;
do|do
block|{
name|KeyValue
name|kv
init|=
name|scanner
operator|.
name|getKeyValue
argument_list|()
decl_stmt|;
name|halfWriter
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|fileInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|shouldCopyHFileMetaKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|halfWriter
operator|.
name|appendFileInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|halfWriter
operator|!=
literal|null
condition|)
name|halfWriter
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|halfReader
operator|!=
literal|null
condition|)
name|halfReader
operator|.
name|close
argument_list|(
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|shouldCopyHFileMetaKey
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
operator|!
name|HFile
operator|.
name|isReservedFileInfoKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|doesTableExist
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|hbAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/*    * Infers region boundaries for a new table.    * Parameter:    *   bdryMap is a map between keys to an integer belonging to {+1, -1}    *     If a key is a start key of a file, then it maps to +1    *     If a key is an end key of a file, then it maps to -1    * Algo:    * 1) Poll on the keys in order:     *    a) Keep adding the mapped values to these keys (runningSum)     *    b) Each time runningSum reaches 0, add the start Key from when the runningSum had started to a boundary list.    * 2) Return the boundary list.     */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|inferBoundaries
parameter_list|(
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|bdryMap
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|keysArray
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|runningValue
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|currStartKey
init|=
literal|null
decl_stmt|;
name|boolean
name|firstBoundary
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|item
range|:
name|bdryMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|runningValue
operator|==
literal|0
condition|)
name|currStartKey
operator|=
name|item
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|runningValue
operator|+=
name|item
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|runningValue
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|firstBoundary
condition|)
name|keysArray
operator|.
name|add
argument_list|(
name|currStartKey
argument_list|)
expr_stmt|;
name|firstBoundary
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|keysArray
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/*    * If the table is created for the first time, then "completebulkload" reads the files twice.    * More modifications necessary if we want to avoid doing it.    */
specifier|private
name|void
name|createTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|dirPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|hfofDir
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|hfofDir
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|hfofDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"HFileOutputFormat dir "
operator|+
name|hfofDir
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|FileStatus
index|[]
name|familyDirStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hfofDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyDirStatuses
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"No families found in "
operator|+
name|hfofDir
argument_list|)
throw|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
literal|null
decl_stmt|;
comment|// Add column families
comment|// Build a set of keys
name|byte
index|[]
index|[]
name|keys
init|=
literal|null
decl_stmt|;
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|familyDirStatuses
control|)
block|{
if|if
condition|(
operator|!
name|stat
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping non-directory "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Path
name|familyDir
init|=
name|stat
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Skip _logs, etc
if|if
condition|(
name|familyDir
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
continue|continue;
name|byte
index|[]
name|family
init|=
name|familyDir
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|hcd
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|Path
index|[]
name|hfiles
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|familyDir
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|hfile
range|:
name|hfiles
control|)
block|{
if|if
condition|(
name|hfile
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
continue|continue;
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|hfile
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|first
decl_stmt|,
name|last
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|first
operator|=
name|reader
operator|.
name|getFirstRowKey
argument_list|()
expr_stmt|;
name|last
operator|=
name|reader
operator|.
name|getLastRowKey
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to figure out region boundaries hfile="
operator|+
name|hfile
operator|+
literal|" first="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
argument_list|)
operator|+
literal|" last="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
comment|// To eventually infer start key-end key boundaries
name|Integer
name|value
init|=
name|map
operator|.
name|containsKey
argument_list|(
name|first
argument_list|)
condition|?
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
name|first
argument_list|)
else|:
literal|0
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|first
argument_list|,
name|value
operator|+
literal|1
argument_list|)
expr_stmt|;
name|value
operator|=
name|map
operator|.
name|containsKey
argument_list|(
name|last
argument_list|)
condition|?
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
name|last
argument_list|)
else|:
literal|0
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|last
argument_list|,
name|value
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|keys
operator|=
name|LoadIncrementalHFiles
operator|.
name|inferBoundaries
argument_list|(
name|map
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|hbAdmin
operator|.
name|createTableAsync
argument_list|(
name|htd
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Caught Socket timeout.. Mostly caused by a slow region assignment by master!"
argument_list|)
expr_stmt|;
block|}
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|cfg
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|HConnection
name|conn
init|=
name|table
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|int
name|ctr
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|conn
operator|.
name|isTableAvailable
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|&&
operator|(
name|ctr
operator|<
name|TABLE_CREATE_MAX_RETRIES
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|"not yet available... Sleeping for 60 more seconds..."
argument_list|)
expr_stmt|;
comment|/* Every TABLE_CREATE_SLEEP milliseconds, wakes up and checks if the table is available*/
name|Thread
operator|.
name|sleep
argument_list|(
name|TABLE_CREATE_SLEEP
argument_list|)
expr_stmt|;
name|ctr
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" is finally available!!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|String
name|dirPath
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|tableName
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|boolean
name|tableExists
init|=
name|this
operator|.
name|doesTableExist
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tableExists
condition|)
name|this
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|dirPath
argument_list|)
expr_stmt|;
name|Path
name|hfofDir
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|cfg
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|doBulkLoad
argument_list|(
name|hfofDir
argument_list|,
name|table
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

