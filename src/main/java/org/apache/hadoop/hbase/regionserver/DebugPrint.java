begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
specifier|public
class|class
name|DebugPrint
block|{
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|enabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|sync
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|static
specifier|public
name|void
name|enable
parameter_list|()
block|{
name|enabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|public
name|void
name|disable
parameter_list|()
block|{
name|enabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|public
name|void
name|reset
parameter_list|()
block|{
synchronized|synchronized
init|(
name|sync
init|)
block|{
name|enable
argument_list|()
expr_stmt|;
comment|// someone wants us enabled basically.
name|out
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
specifier|public
name|void
name|dumpToFile
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileWriter
name|f
init|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|sync
init|)
block|{
name|f
operator|.
name|write
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|println
parameter_list|(
name|String
name|m
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
operator|.
name|get
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|sync
init|)
block|{
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

