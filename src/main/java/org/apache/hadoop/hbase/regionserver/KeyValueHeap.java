begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|KVComparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_comment
comment|/**  * Implements a heap merge across any number of KeyValueScanners.  *<p>  * Implements KeyValueScanner itself.  *<p>  * This class is used at the Region level to merge across Stores  * and at the Store level to merge across the memstore and StoreFiles.  *<p>  * In the Region case, we also need InternalScanner.next(List), so this class  * also implements InternalScanner.  WARNING: As is, if you try to use this  * as an InternalScanner at the Store level, you will get runtime exceptions.  */
end_comment

begin_class
specifier|public
class|class
name|KeyValueHeap
implements|implements
name|KeyValueScanner
implements|,
name|InternalScanner
block|{
specifier|private
name|PriorityQueue
argument_list|<
name|KeyValueScanner
argument_list|>
name|heap
init|=
literal|null
decl_stmt|;
specifier|private
name|KeyValueScanner
name|current
init|=
literal|null
decl_stmt|;
specifier|private
name|KVScannerComparator
name|comparator
decl_stmt|;
comment|/**    * Constructor.  This KeyValueHeap will handle closing of passed in    * KeyValueScanners.    * @param scanners    * @param comparator    */
specifier|public
name|KeyValueHeap
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|KVComparator
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
operator|new
name|KVScannerComparator
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scanners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|heap
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|KeyValueScanner
argument_list|>
argument_list|(
name|scanners
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|comparator
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
if|if
condition|(
name|scanner
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|heap
operator|.
name|add
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|current
operator|=
name|heap
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|KeyValue
name|peek
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|this
operator|.
name|current
operator|.
name|peek
argument_list|()
return|;
block|}
specifier|public
name|KeyValue
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|KeyValue
name|kvReturn
init|=
name|this
operator|.
name|current
operator|.
name|next
argument_list|()
decl_stmt|;
name|KeyValue
name|kvNext
init|=
name|this
operator|.
name|current
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|kvNext
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|current
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|this
operator|.
name|heap
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|KeyValueScanner
name|topScanner
init|=
name|this
operator|.
name|heap
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|topScanner
operator|==
literal|null
operator|||
name|this
operator|.
name|comparator
operator|.
name|compare
argument_list|(
name|kvNext
argument_list|,
name|topScanner
operator|.
name|peek
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|heap
operator|.
name|add
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|this
operator|.
name|heap
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|kvReturn
return|;
block|}
comment|/**    * Gets the next row of keys from the top-most scanner.    *<p>    * This method takes care of updating the heap.    *<p>    * This can ONLY be called when you are using Scanners that implement    * InternalScanner as well as KeyValueScanner (a {@link StoreScanner}).    * @param result    * @param limit    * @return true if there are more keys, false if all scanners are done    */
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|InternalScanner
name|currentAsInternal
init|=
operator|(
name|InternalScanner
operator|)
name|this
operator|.
name|current
decl_stmt|;
name|boolean
name|mayContainsMoreRows
init|=
name|currentAsInternal
operator|.
name|next
argument_list|(
name|result
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|KeyValue
name|pee
init|=
name|this
operator|.
name|current
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|/*      * By definition, any InternalScanner must return false only when it has no      * further rows to be fetched. So, we can close a scanner if it returns      * false. All existing implementations seem to be fine with this. It is much      * more efficient to close scanners which are not needed than keep them in      * the heap. This is also required for certain optimizations.      */
if|if
condition|(
name|pee
operator|==
literal|null
operator|||
operator|!
name|mayContainsMoreRows
condition|)
block|{
name|this
operator|.
name|current
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|heap
operator|.
name|add
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|current
operator|=
name|this
operator|.
name|heap
operator|.
name|poll
argument_list|()
expr_stmt|;
return|return
operator|(
name|this
operator|.
name|current
operator|!=
literal|null
operator|)
return|;
block|}
comment|/**    * Gets the next row of keys from the top-most scanner.    *<p>    * This method takes care of updating the heap.    *<p>    * This can ONLY be called when you are using Scanners that implement    * InternalScanner as well as KeyValueScanner (a {@link StoreScanner}).    * @param result    * @return true if there are more keys, false if all scanners are done    */
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|next
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|KVScannerComparator
implements|implements
name|Comparator
argument_list|<
name|KeyValueScanner
argument_list|>
block|{
specifier|private
name|KVComparator
name|kvComparator
decl_stmt|;
comment|/**      * Constructor      * @param kvComparator      */
specifier|public
name|KVScannerComparator
parameter_list|(
name|KVComparator
name|kvComparator
parameter_list|)
block|{
name|this
operator|.
name|kvComparator
operator|=
name|kvComparator
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|KeyValueScanner
name|left
parameter_list|,
name|KeyValueScanner
name|right
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|left
operator|.
name|peek
argument_list|()
argument_list|,
name|right
operator|.
name|peek
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Compares two KeyValue      * @param left      * @param right      * @return less than 0 if left is smaller, 0 if equal etc..      */
specifier|public
name|int
name|compare
parameter_list|(
name|KeyValue
name|left
parameter_list|,
name|KeyValue
name|right
parameter_list|)
block|{
return|return
name|this
operator|.
name|kvComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
comment|/**      * @return KVComparator      */
specifier|public
name|KVComparator
name|getComparator
parameter_list|()
block|{
return|return
name|this
operator|.
name|kvComparator
return|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|current
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|current
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|heap
operator|!=
literal|null
condition|)
block|{
name|KeyValueScanner
name|scanner
decl_stmt|;
while|while
condition|(
operator|(
name|scanner
operator|=
name|this
operator|.
name|heap
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Seeks all scanners at or below the specified seek key.  If we earlied-out    * of a row, we may end up skipping values that were never reached yet.    * Rather than iterating down, we want to give the opportunity to re-seek.    *<p>    * As individual scanners may run past their ends, those scanners are    * automatically closed and removed from the heap.    * @param seekKey KeyValue to seek at or after    * @return true if KeyValues exist at or after specified key, false if not    * @throws IOException    */
specifier|public
name|boolean
name|seek
parameter_list|(
name|KeyValue
name|seekKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|heap
operator|.
name|add
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
name|this
operator|.
name|current
operator|=
literal|null
expr_stmt|;
name|KeyValueScanner
name|scanner
decl_stmt|;
while|while
condition|(
operator|(
name|scanner
operator|=
name|this
operator|.
name|heap
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|KeyValue
name|topKey
init|=
name|scanner
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|.
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|seekKey
argument_list|,
name|topKey
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// Correct?
comment|// Top KeyValue is at-or-after Seek KeyValue
name|this
operator|.
name|current
operator|=
name|scanner
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|scanner
operator|.
name|seek
argument_list|(
name|seekKey
argument_list|)
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|heap
operator|.
name|add
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Heap is returning empty, scanner is done
return|return
literal|false
return|;
block|}
comment|/**    * @return the current Heap    */
specifier|public
name|PriorityQueue
argument_list|<
name|KeyValueScanner
argument_list|>
name|getHeap
parameter_list|()
block|{
return|return
name|this
operator|.
name|heap
return|;
block|}
block|}
end_class

end_unit

