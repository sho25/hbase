begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|RegionTransitionEventData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|HBaseEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|HBaseEventHandler
operator|.
name|HBaseEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  * This is a helper class for region servers to update various states in   * Zookeeper. The various updates are abstracted out here.   *   * The "startRegionXXX" methods are to be called first, followed by the   * "finishRegionXXX" methods. Supports updating zookeeper periodically as a   * part of the "startRegionXXX". Currently handles the following state updates:  *   - Close region  *   - Open region  */
end_comment

begin_comment
comment|// TODO: make this thread local, in which case it is re-usable per thread
end_comment

begin_class
specifier|public
class|class
name|RSZookeeperUpdater
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RSZookeeperUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|regionServerName
decl_stmt|;
specifier|private
name|String
name|regionName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|regionZNode
init|=
literal|null
decl_stmt|;
specifier|private
name|ZooKeeperWrapper
name|zkWrapper
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|zkVersion
init|=
literal|0
decl_stmt|;
name|HBaseEventType
name|lastUpdatedState
decl_stmt|;
specifier|public
name|RSZookeeperUpdater
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|regionServerName
parameter_list|,
name|String
name|regionName
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|regionServerName
argument_list|,
name|regionName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RSZookeeperUpdater
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|regionServerName
parameter_list|,
name|String
name|regionName
parameter_list|,
name|int
name|zkVersion
parameter_list|)
block|{
name|this
operator|.
name|zkWrapper
operator|=
name|ZooKeeperWrapper
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|regionServerName
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServerName
operator|=
name|regionServerName
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
name|regionName
expr_stmt|;
comment|// get the region ZNode we have to create
name|this
operator|.
name|regionZNode
operator|=
name|zkWrapper
operator|.
name|getZNode
argument_list|(
name|zkWrapper
operator|.
name|getRegionInTransitionZNode
argument_list|()
argument_list|,
name|regionName
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkVersion
operator|=
name|zkVersion
expr_stmt|;
block|}
comment|/**    * This method updates the various states in ZK to inform the master that the     * region server has started closing the region.    * @param updatePeriodically - if true, periodically updates the state in ZK    */
specifier|public
name|void
name|startRegionCloseEvent
parameter_list|(
name|HMsg
name|hmsg
parameter_list|,
name|boolean
name|updatePeriodically
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if this ZNode already exists, something is wrong
if|if
condition|(
name|zkWrapper
operator|.
name|exists
argument_list|(
name|regionZNode
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"ZNode "
operator|+
name|regionZNode
operator|+
literal|" already exists in ZooKeeper, will NOT close region."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// create the region node in the unassigned directory first
name|zkWrapper
operator|.
name|createZNodeIfNotExists
argument_list|(
name|regionZNode
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// update the data for "regionName" ZNode in unassigned to CLOSING
name|updateZKWithEventData
argument_list|(
name|HBaseEventType
operator|.
name|RS2ZK_REGION_CLOSING
argument_list|,
name|hmsg
argument_list|)
expr_stmt|;
comment|// TODO: implement the updatePeriodically logic here
block|}
comment|/**    * This method updates the states in ZK to signal that the region has been     * closed. This will stop the periodic updater thread if one was started.    * @throws IOException    */
specifier|public
name|void
name|finishRegionCloseEvent
parameter_list|(
name|HMsg
name|hmsg
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: stop the updatePeriodically here
comment|// update the data for "regionName" ZNode in unassigned to CLOSED
name|updateZKWithEventData
argument_list|(
name|HBaseEventType
operator|.
name|RS2ZK_REGION_CLOSED
argument_list|,
name|hmsg
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method updates the various states in ZK to inform the master that the     * region server has started opening the region.    * @param updatePeriodically - if true, periodically updates the state in ZK    */
specifier|public
name|void
name|startRegionOpenEvent
parameter_list|(
name|HMsg
name|hmsg
parameter_list|,
name|boolean
name|updatePeriodically
parameter_list|)
throws|throws
name|IOException
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zkWrapper
operator|.
name|readZNode
argument_list|(
name|regionZNode
argument_list|,
name|stat
argument_list|)
decl_stmt|;
comment|// if there is no ZNode for this region, something is wrong
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"ZNode "
operator|+
name|regionZNode
operator|+
literal|" does not exist in ZooKeeper, will NOT open region."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// if the ZNode is not in the closed state, something is wrong
name|HBaseEventType
name|rsEvent
init|=
name|HBaseEventType
operator|.
name|fromByte
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsEvent
operator|!=
name|HBaseEventType
operator|.
name|RS2ZK_REGION_CLOSED
operator|&&
name|rsEvent
operator|!=
name|HBaseEventType
operator|.
name|M2ZK_REGION_OFFLINE
condition|)
block|{
name|String
name|msg
init|=
literal|"ZNode "
operator|+
name|regionZNode
operator|+
literal|" is not in CLOSED/OFFLINE state (state = "
operator|+
name|rsEvent
operator|+
literal|"), will NOT open region."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// get the version to update from ZK
name|zkVersion
operator|=
name|stat
operator|.
name|getVersion
argument_list|()
expr_stmt|;
comment|// update the data for "regionName" ZNode in unassigned to CLOSING
name|updateZKWithEventData
argument_list|(
name|HBaseEventType
operator|.
name|RS2ZK_REGION_OPENING
argument_list|,
name|hmsg
argument_list|)
expr_stmt|;
comment|// TODO: implement the updatePeriodically logic here
block|}
comment|/**    * This method updates the states in ZK to signal that the region has been     * opened. This will stop the periodic updater thread if one was started.    * @throws IOException    */
specifier|public
name|void
name|finishRegionOpenEvent
parameter_list|(
name|HMsg
name|hmsg
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: stop the updatePeriodically here
comment|// update the data for "regionName" ZNode in unassigned to CLOSED
name|updateZKWithEventData
argument_list|(
name|HBaseEventType
operator|.
name|RS2ZK_REGION_OPENED
argument_list|,
name|hmsg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isClosingRegion
parameter_list|()
block|{
return|return
operator|(
name|lastUpdatedState
operator|==
name|HBaseEventType
operator|.
name|RS2ZK_REGION_CLOSING
operator|)
return|;
block|}
specifier|public
name|boolean
name|isOpeningRegion
parameter_list|()
block|{
return|return
operator|(
name|lastUpdatedState
operator|==
name|HBaseEventType
operator|.
name|RS2ZK_REGION_OPENING
operator|)
return|;
block|}
specifier|public
name|void
name|abortOpenRegion
parameter_list|(
name|HMsg
name|hmsg
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Aborting open of region "
operator|+
name|regionName
argument_list|)
expr_stmt|;
comment|// TODO: stop the updatePeriodically for start open region here
comment|// update the data for "regionName" ZNode in unassigned to CLOSED
name|updateZKWithEventData
argument_list|(
name|HBaseEventType
operator|.
name|RS2ZK_REGION_CLOSED
argument_list|,
name|hmsg
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateZKWithEventData
parameter_list|(
name|HBaseEventType
name|hbEventType
parameter_list|,
name|HMsg
name|hmsg
parameter_list|)
throws|throws
name|IOException
block|{
comment|// update the data for "regionName" ZNode in unassigned to "hbEventType"
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|Writables
operator|.
name|getBytes
argument_list|(
operator|new
name|RegionTransitionEventData
argument_list|(
name|hbEventType
argument_list|,
name|regionServerName
argument_list|,
name|hmsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error creating event data for "
operator|+
name|hbEventType
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating ZNode "
operator|+
name|regionZNode
operator|+
literal|" with ["
operator|+
name|hbEventType
operator|+
literal|"]"
operator|+
literal|" expected version = "
operator|+
name|zkVersion
argument_list|)
expr_stmt|;
name|lastUpdatedState
operator|=
name|hbEventType
expr_stmt|;
name|zkWrapper
operator|.
name|writeZNode
argument_list|(
name|regionZNode
argument_list|,
name|data
argument_list|,
name|zkVersion
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkVersion
operator|++
expr_stmt|;
block|}
block|}
end_class

end_unit

