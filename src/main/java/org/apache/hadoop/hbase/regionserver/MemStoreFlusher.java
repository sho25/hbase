begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DroppedSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * Thread that flushes cache on request  *  * NOTE: This class extends Thread rather than Chore because the sleep time  * can be interrupted when there is something to do, rather than the Chore  * sleep time which is invariant.  *  * @see FlushRequester  */
end_comment

begin_class
class|class
name|MemStoreFlusher
extends|extends
name|Thread
implements|implements
name|FlushRequester
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MemStoreFlusher
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// These two data members go together.  Any entry in the one must have
comment|// a corresponding entry in the other.
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|FlushQueueEntry
argument_list|>
name|flushQueue
init|=
operator|new
name|DelayQueue
argument_list|<
name|FlushQueueEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|HRegion
argument_list|,
name|FlushQueueEntry
argument_list|>
name|regionsInQueue
init|=
operator|new
name|HashMap
argument_list|<
name|HRegion
argument_list|,
name|FlushQueueEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|threadWakeFrequency
decl_stmt|;
specifier|private
specifier|final
name|HRegionServer
name|server
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|long
name|globalMemStoreLimit
decl_stmt|;
specifier|protected
specifier|final
name|long
name|globalMemStoreLimitLowMark
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_UPPER
init|=
literal|0.4f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_LOWER
init|=
literal|0.25f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UPPER_KEY
init|=
literal|"hbase.regionserver.global.memstore.upperLimit"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOWER_KEY
init|=
literal|"hbase.regionserver.global.memstore.lowerLimit"
decl_stmt|;
specifier|private
name|long
name|blockingStoreFilesNumber
decl_stmt|;
specifier|private
name|long
name|blockingWaitTime
decl_stmt|;
comment|/**    * @param conf    * @param server    */
specifier|public
name|MemStoreFlusher
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HRegionServer
name|server
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|threadWakeFrequency
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|long
name|max
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
decl_stmt|;
name|this
operator|.
name|globalMemStoreLimit
operator|=
name|globalMemStoreLimit
argument_list|(
name|max
argument_list|,
name|DEFAULT_UPPER
argument_list|,
name|UPPER_KEY
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|lower
init|=
name|globalMemStoreLimit
argument_list|(
name|max
argument_list|,
name|DEFAULT_LOWER
argument_list|,
name|LOWER_KEY
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|lower
operator|>
name|this
operator|.
name|globalMemStoreLimit
condition|)
block|{
name|lower
operator|=
name|this
operator|.
name|globalMemStoreLimit
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting globalMemStoreLimitLowMark == globalMemStoreLimit "
operator|+
literal|"because supplied "
operator|+
name|LOWER_KEY
operator|+
literal|" was> "
operator|+
name|UPPER_KEY
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|globalMemStoreLimitLowMark
operator|=
name|lower
expr_stmt|;
name|this
operator|.
name|blockingStoreFilesNumber
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.blockingStoreFiles"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|blockingStoreFilesNumber
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|blockingStoreFilesNumber
operator|=
literal|1
operator|+
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|blockingWaitTime
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.blockingWaitTime"
argument_list|,
literal|90000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"globalMemStoreLimit="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|globalMemStoreLimit
argument_list|)
operator|+
literal|", globalMemStoreLimitLowMark="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|globalMemStoreLimitLowMark
argument_list|)
operator|+
literal|", maxHeap="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calculate size using passed<code>key</code> for configured    * percentage of<code>max</code>.    * @param max    * @param defaultLimit    * @param key    * @param c    * @return Limit.    */
specifier|static
name|long
name|globalMemStoreLimit
parameter_list|(
specifier|final
name|long
name|max
parameter_list|,
specifier|final
name|float
name|defaultLimit
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|)
block|{
name|float
name|limit
init|=
name|c
operator|.
name|getFloat
argument_list|(
name|key
argument_list|,
name|defaultLimit
argument_list|)
decl_stmt|;
return|return
name|getMemStoreLimit
argument_list|(
name|max
argument_list|,
name|limit
argument_list|,
name|defaultLimit
argument_list|)
return|;
block|}
specifier|static
name|long
name|getMemStoreLimit
parameter_list|(
specifier|final
name|long
name|max
parameter_list|,
specifier|final
name|float
name|limit
parameter_list|,
specifier|final
name|float
name|defaultLimit
parameter_list|)
block|{
if|if
condition|(
name|limit
operator|>=
literal|0.9f
operator|||
name|limit
operator|<
literal|0.1f
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting global memstore limit to default of "
operator|+
name|defaultLimit
operator|+
literal|" because supplied value outside allowed range of 0.1 -> 0.9"
argument_list|)
expr_stmt|;
block|}
return|return
call|(
name|long
call|)
argument_list|(
name|max
operator|*
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|this
operator|.
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|FlushQueueEntry
name|fqe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fqe
operator|=
name|flushQueue
operator|.
name|poll
argument_list|(
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|fqe
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|flushRegion
argument_list|(
name|fqe
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
continue|continue;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|ex
parameter_list|)
block|{
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cache flush failed"
operator|+
operator|(
name|fqe
operator|!=
literal|null
condition|?
operator|(
literal|" for region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|fqe
operator|.
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|)
else|:
literal|""
operator|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|checkFileSystem
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
name|this
operator|.
name|regionsInQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|flushQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" exiting"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|requestFlush
parameter_list|(
name|HRegion
name|r
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInQueue
init|)
block|{
if|if
condition|(
operator|!
name|regionsInQueue
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
condition|)
block|{
comment|// This entry has no delay so it will be added at the top of the flush
comment|// queue.  It'll come out near immediately.
name|FlushQueueEntry
name|fqe
init|=
operator|new
name|FlushQueueEntry
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|this
operator|.
name|regionsInQueue
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|fqe
argument_list|)
expr_stmt|;
name|this
operator|.
name|flushQueue
operator|.
name|add
argument_list|(
name|fqe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Only interrupt once it's done with a run through the work loop.    */
name|void
name|interruptIfNecessary
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * A flushRegion that checks store file count.  If too many, puts the flush    * on delay queue to retry later.    * @param fqe    * @return true if the region was successfully flushed, false otherwise. If     * false, there will be accompanying log messages explaining why the log was    * not flushed.    */
specifier|private
name|boolean
name|flushRegion
parameter_list|(
specifier|final
name|FlushQueueEntry
name|fqe
parameter_list|)
block|{
name|HRegion
name|region
init|=
name|fqe
operator|.
name|region
decl_stmt|;
if|if
condition|(
operator|!
name|fqe
operator|.
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
operator|&&
name|isTooManyStoreFiles
argument_list|(
name|region
argument_list|)
condition|)
block|{
if|if
condition|(
name|fqe
operator|.
name|isMaximumWait
argument_list|(
name|this
operator|.
name|blockingWaitTime
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waited "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|fqe
operator|.
name|createTime
operator|)
operator|+
literal|"ms on a compaction to clean up 'too many store files'; waited "
operator|+
literal|"long enough... proceeding with flush of "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If this is first time we've been put off, then emit a log message.
if|if
condition|(
name|fqe
operator|.
name|getRequeueCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// Note: We don't impose blockingStoreFiles constraint on meta regions
name|LOG
operator|.
name|warn
argument_list|(
literal|"Region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" has too many "
operator|+
literal|"store files; delaying flush up to "
operator|+
name|this
operator|.
name|blockingWaitTime
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|server
operator|.
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|region
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Put back on the queue.  Have it come back out of the queue
comment|// after a delay of this.blockingWaitTime / 100 ms.
name|this
operator|.
name|flushQueue
operator|.
name|add
argument_list|(
name|fqe
operator|.
name|requeue
argument_list|(
name|this
operator|.
name|blockingWaitTime
operator|/
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tell a lie, it's not flushed but it's ok
return|return
literal|true
return|;
block|}
block|}
return|return
name|flushRegion
argument_list|(
name|region
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/*    * Flush a region.    * @param region Region to flush.    * @param emergencyFlush Set if we are being force flushed. If true the region    * needs to be removed from the flush queue. If false, when we were called    * from the main flusher run loop and we got the entry to flush by calling    * poll on the flush queue (which removed it).    *    * @return true if the region was successfully flushed, false otherwise. If    * false, there will be accompanying log messages explaining why the log was    * not flushed.    */
specifier|private
name|boolean
name|flushRegion
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|boolean
name|emergencyFlush
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|regionsInQueue
init|)
block|{
name|FlushQueueEntry
name|fqe
init|=
name|this
operator|.
name|regionsInQueue
operator|.
name|remove
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqe
operator|!=
literal|null
operator|&&
name|emergencyFlush
condition|)
block|{
comment|// Need to remove from region from delay queue.  When NOT an
comment|// emergencyFlush, then item was removed via a flushQueue.poll.
name|flushQueue
operator|.
name|remove
argument_list|(
name|fqe
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|region
operator|.
name|flushcache
argument_list|()
condition|)
block|{
name|server
operator|.
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|region
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|getMetrics
argument_list|()
operator|.
name|addFlush
argument_list|(
name|region
operator|.
name|getRecentFlushInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DroppedSnapshotException
name|ex
parameter_list|)
block|{
comment|// Cache flush can fail in a few places. If it fails in a critical
comment|// section, we get a DroppedSnapshotException and a replay of hlog
comment|// is required. Currently the only way to do this is a restart of
comment|// the server. Abort because hdfs is probably bad (HBASE-644 is a case
comment|// where hdfs was bad but passed the hdfs check).
name|server
operator|.
name|abort
argument_list|(
literal|"Replay of HLog required. Forcing server shutdown"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cache flush failed"
operator|+
operator|(
name|region
operator|!=
literal|null
condition|?
operator|(
literal|" for region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|)
else|:
literal|""
operator|)
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|checkFileSystem
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isTooManyStoreFiles
parameter_list|(
name|HRegion
name|region
parameter_list|)
block|{
for|for
control|(
name|Store
name|hstore
range|:
name|region
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hstore
operator|.
name|getStorefilesCount
argument_list|()
operator|>
name|this
operator|.
name|blockingStoreFilesNumber
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check if the regionserver's memstore memory usage is greater than the    * limit. If so, flush regions with the biggest memstores until we're down    * to the lower limit. This method blocks callers until we're down to a safe    * amount of memstore consumption.    */
specifier|public
specifier|synchronized
name|void
name|reclaimMemStoreMemory
parameter_list|()
block|{
if|if
condition|(
name|server
operator|.
name|getGlobalMemStoreSize
argument_list|()
operator|>=
name|globalMemStoreLimit
condition|)
block|{
name|flushSomeRegions
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Emergency!  Need to flush memory.    */
specifier|private
specifier|synchronized
name|void
name|flushSomeRegions
parameter_list|()
block|{
comment|// keep flushing until we hit the low water mark
name|long
name|globalMemStoreSize
init|=
operator|-
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|HRegion
argument_list|>
name|regionsToCompact
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|HRegion
argument_list|>
name|m
init|=
name|this
operator|.
name|server
operator|.
name|getCopyOfOnlineRegionsSortedBySize
argument_list|()
init|;
operator|(
name|globalMemStoreSize
operator|=
name|server
operator|.
name|getGlobalMemStoreSize
argument_list|()
operator|)
operator|>=
name|this
operator|.
name|globalMemStoreLimitLowMark
condition|;
control|)
block|{
comment|// flush the region with the biggest memstore
if|if
condition|(
name|m
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No online regions to flush though we've been asked flush "
operator|+
literal|"some; globalMemStoreSize="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|globalMemStoreSize
argument_list|)
operator|+
literal|", globalMemStoreLimitLowMark="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|globalMemStoreLimitLowMark
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|HRegion
name|biggestMemStoreRegion
init|=
name|m
operator|.
name|remove
argument_list|(
name|m
operator|.
name|firstKey
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Forced flushing of "
operator|+
name|biggestMemStoreRegion
operator|.
name|toString
argument_list|()
operator|+
literal|" because global memstore limit of "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|globalMemStoreLimit
argument_list|)
operator|+
literal|" exceeded; currently "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|globalMemStoreSize
argument_list|)
operator|+
literal|" and flushing till "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|globalMemStoreLimitLowMark
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|flushRegion
argument_list|(
name|biggestMemStoreRegion
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Flush failed"
argument_list|)
expr_stmt|;
break|break;
block|}
name|regionsToCompact
operator|.
name|add
argument_list|(
name|biggestMemStoreRegion
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HRegion
name|region
range|:
name|regionsToCompact
control|)
block|{
name|server
operator|.
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|region
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Datastructure used in the flush queue.  Holds region and retry count.    * Keeps tabs on how old this object is.  Implements {@link Delayed}.  On    * construction, the delay is zero. When added to a delay queue, we'll come    * out near immediately.  Call {@link #requeue(long)} passing delay in    * milliseconds before readding to delay queue if you want it to stay there    * a while.    */
specifier|static
class|class
name|FlushQueueEntry
implements|implements
name|Delayed
block|{
specifier|private
specifier|final
name|HRegion
name|region
decl_stmt|;
specifier|private
specifier|final
name|long
name|createTime
decl_stmt|;
specifier|private
name|long
name|whenToExpire
decl_stmt|;
specifier|private
name|int
name|requeueCount
init|=
literal|0
decl_stmt|;
name|FlushQueueEntry
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|createTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|whenToExpire
operator|=
name|this
operator|.
name|createTime
expr_stmt|;
block|}
comment|/**      * @param maximumWait      * @return True if we have been delayed><code>maximumWait</code> milliseconds.      */
specifier|public
name|boolean
name|isMaximumWait
parameter_list|(
specifier|final
name|long
name|maximumWait
parameter_list|)
block|{
return|return
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|this
operator|.
name|createTime
operator|)
operator|>
name|maximumWait
return|;
block|}
comment|/**      * @return Count of times {@link #resetDelay()} was called; i.e this is      * number of times we've been requeued.      */
specifier|public
name|int
name|getRequeueCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|requeueCount
return|;
block|}
comment|/**      * @param when When to expire, when to come up out of the queue.      * Specify in milliseconds.  This method adds System.currentTimeMillis()      * to whatever you pass.      * @return This.      */
specifier|public
name|FlushQueueEntry
name|requeue
parameter_list|(
specifier|final
name|long
name|when
parameter_list|)
block|{
name|this
operator|.
name|whenToExpire
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|when
expr_stmt|;
name|this
operator|.
name|requeueCount
operator|++
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|this
operator|.
name|whenToExpire
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|other
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|-
name|other
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

