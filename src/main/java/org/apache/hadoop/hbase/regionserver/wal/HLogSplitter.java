begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
operator|.
name|recoverFileLease
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * This class is responsible for splitting up a bunch of regionserver commit log  * files that are no longer being written to, into new files, one per region for  * region to replay on startup. Delete the old log files when finished.  */
end_comment

begin_class
specifier|public
class|class
name|HLogSplitter
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LOG_SPLITTER_IMPL
init|=
literal|"hbase.hlog.splitter.impl"
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HLogSplitter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|long
name|splitTime
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|splitSize
init|=
literal|0
decl_stmt|;
comment|/**    * Name of file that holds recovered edits written by the wal log splitting    * code, one per region    */
specifier|public
specifier|static
specifier|final
name|String
name|RECOVERED_EDITS
init|=
literal|"recovered.edits"
decl_stmt|;
comment|/**    * Create a new HLogSplitter using the given {@link Configuration} and the    *<code>hbase.hlog.splitter.impl</code> property to derived the instance    * class to use.    *     * @param conf    * @return New HLogSplitter instance    */
specifier|public
specifier|static
name|HLogSplitter
name|createLogSplitter
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|HLogSplitter
argument_list|>
name|splitterClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HLogSplitter
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
name|LOG_SPLITTER_IMPL
argument_list|,
name|HLogSplitter
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|splitterClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Private immutable datastructure to hold Writer and its Path.
specifier|private
specifier|final
specifier|static
class|class
name|WriterAndPath
block|{
specifier|final
name|Path
name|p
decl_stmt|;
specifier|final
name|Writer
name|w
decl_stmt|;
name|WriterAndPath
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|Writer
name|w
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
block|}
block|}
comment|/**    * Split up a bunch of regionserver commit log files that are no longer being    * written to, into new files, one per region for region to replay on startup.    * Delete the old log files when finished.    *     * @param rootDir    *          qualified root directory of the HBase instance    * @param srcDir    *          Directory of log files to split: e.g.    *<code>${ROOTDIR}/log_HOST_PORT</code>    * @param oldLogDir    *          directory where processed (split) logs will be archived to    * @param fs    *          FileSystem    * @param conf    *          Configuration    * @throws IOException    *           will throw if corrupted hlogs aren't tolerated    * @return the list of splits    */
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|splitLog
parameter_list|(
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|Path
name|srcDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|srcDir
argument_list|)
condition|)
block|{
comment|// Nothing to do
return|return
name|splits
return|;
block|}
name|FileStatus
index|[]
name|logfiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|logfiles
operator|==
literal|null
operator|||
name|logfiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// Nothing to do
return|return
name|splits
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Splitting "
operator|+
name|logfiles
operator|.
name|length
operator|+
literal|" hlog(s) in "
operator|+
name|srcDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|splits
operator|=
name|splitLog
argument_list|(
name|rootDir
argument_list|,
name|srcDir
argument_list|,
name|oldLogDir
argument_list|,
name|logfiles
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|Path
name|newPath
init|=
name|HLog
operator|.
name|getHLogArchivePath
argument_list|(
name|oldLogDir
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving "
operator|+
name|FSUtils
operator|.
name|getPath
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
operator|+
literal|" to "
operator|+
name|FSUtils
operator|.
name|getPath
argument_list|(
name|newPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|newPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moved "
operator|+
name|files
operator|.
name|length
operator|+
literal|" log files to "
operator|+
name|FSUtils
operator|.
name|getPath
argument_list|(
name|oldLogDir
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|srcDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete "
operator|+
name|srcDir
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|IOException
name|io
init|=
operator|new
name|IOException
argument_list|(
literal|"Cannot delete: "
operator|+
name|srcDir
argument_list|)
decl_stmt|;
name|io
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|io
throw|;
block|}
name|splitTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hlog file splitting completed in "
operator|+
name|splitTime
operator|+
literal|" ms for "
operator|+
name|srcDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|splits
return|;
block|}
comment|/**    * @return time that this split took    */
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|splitTime
return|;
block|}
comment|/**    * @return aggregate size of hlogs that were split    */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|splitSize
return|;
block|}
comment|/**    * Sorts the HLog edits in the given list of logfiles (that are a mix of edits    * on multiple regions) by region and then splits them per region directories,    * in batches of (hbase.hlog.split.batch.size)    *     * A batch consists of a set of log files that will be sorted in a single map    * of edits indexed by region the resulting map will be concurrently written    * by multiple threads to their corresponding regions    *     * Each batch consists of more more log files that are - recovered (files is    * opened for append then closed to ensure no process is writing into it) -    * parsed (each edit in the log is appended to a list of edits indexed by    * region see {@link #parseHLog} for more details) - marked as either    * processed or corrupt depending on parsing outcome - the resulting edits    * indexed by region are concurrently written to their corresponding region    * region directories - original files are then archived to a different    * directory    *     *     *     * @param rootDir    *          hbase directory    * @param srcDir    *          logs directory    * @param oldLogDir    *          directory where processed logs are archived to    * @param logfiles    *          the list of log files to split    * @param fs    * @param conf    * @return    * @throws IOException    */
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|splitLog
parameter_list|(
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|Path
name|srcDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|FileStatus
index|[]
name|logfiles
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|processedLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|WriterAndPath
argument_list|>
name|logWriters
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|WriterAndPath
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
literal|null
decl_stmt|;
comment|// Number of logs in a read batch
comment|// More means faster but bigger mem consumption
comment|// TODO make a note on the conf rename and update hbase-site.xml if needed
name|int
name|logFilesPerStep
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hlog.split.batch.size"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|boolean
name|skipErrors
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.hlog.split.skip.errors"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|splitSize
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|logfiles
operator|.
name|length
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|LinkedList
argument_list|<
name|Entry
argument_list|>
argument_list|>
name|editsByRegion
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|LinkedList
argument_list|<
name|Entry
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|logFilesPerStep
condition|;
name|j
operator|++
control|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|logfiles
operator|.
name|length
condition|)
block|{
break|break;
block|}
name|FileStatus
name|log
init|=
name|logfiles
index|[
name|i
index|]
decl_stmt|;
name|Path
name|logPath
init|=
name|log
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|logLength
init|=
name|log
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|splitSize
operator|+=
name|logLength
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Splitting hlog "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|logfiles
operator|.
name|length
operator|+
literal|": "
operator|+
name|logPath
operator|+
literal|", length="
operator|+
name|logLength
argument_list|)
expr_stmt|;
try|try
block|{
name|recoverFileLease
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|parseHLog
argument_list|(
name|log
argument_list|,
name|editsByRegion
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|processedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
comment|// truncated files are expected if a RS crashes (see HBASE-2643)
name|LOG
operator|.
name|info
argument_list|(
literal|"EOF from hlog "
operator|+
name|logPath
operator|+
literal|".  continuing"
argument_list|)
expr_stmt|;
name|processedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If the IOE resulted from bad file format,
comment|// then this problem is idempotent and retrying won't help
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ParseException from hlog "
operator|+
name|logPath
operator|+
literal|".  continuing"
argument_list|)
expr_stmt|;
name|processedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|skipErrors
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got while parsing hlog "
operator|+
name|logPath
operator|+
literal|". Marking as corrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|corruptedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
name|writeEditsBatchToRegions
argument_list|(
name|editsByRegion
argument_list|,
name|logWriters
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
operator|.
name|length
operator|>
name|processedLogs
operator|.
name|size
argument_list|()
operator|+
name|corruptedLogs
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Discovered orphan hlog after split. Maybe "
operator|+
literal|"HRegionServer was not dead when we started"
argument_list|)
throw|;
block|}
name|archiveLogs
argument_list|(
name|corruptedLogs
argument_list|,
name|processedLogs
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|splits
operator|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|logWriters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|WriterAndPath
name|wap
range|:
name|logWriters
operator|.
name|values
argument_list|()
control|)
block|{
name|wap
operator|.
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|splits
operator|.
name|add
argument_list|(
name|wap
operator|.
name|p
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed "
operator|+
name|wap
operator|.
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|splits
return|;
block|}
comment|/**    * Takes splitLogsMap and concurrently writes them to region directories using a thread pool    *    * @param splitLogsMap map that contains the log splitting result indexed by region    * @param logWriters map that contains a writer per region    * @param rootDir hbase root dir    * @param fs    * @param conf    * @throws IOException    */
specifier|private
name|void
name|writeEditsBatchToRegions
parameter_list|(
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|LinkedList
argument_list|<
name|Entry
argument_list|>
argument_list|>
name|splitLogsMap
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|WriterAndPath
argument_list|>
name|logWriters
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Number of threads to use when log splitting to rewrite the logs.
comment|// More means faster but bigger mem consumption.
name|int
name|logWriterThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.writer.threads"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|boolean
name|skipErrors
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.skip.errors"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Future
argument_list|>
name|writeFutureResult
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Future
argument_list|>
argument_list|()
decl_stmt|;
name|ThreadFactoryBuilder
name|builder
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNameFormat
argument_list|(
literal|"SplitWriter-%1$d"
argument_list|)
expr_stmt|;
name|ThreadFactory
name|factory
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|threadPool
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|logWriterThreads
argument_list|,
name|factory
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|region
range|:
name|splitLogsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Callable
name|splitter
init|=
name|createNewSplitter
argument_list|(
name|rootDir
argument_list|,
name|logWriters
argument_list|,
name|splitLogsMap
argument_list|,
name|region
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writeFutureResult
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|threadPool
operator|.
name|submit
argument_list|(
name|splitter
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Wait for all threads to terminate
try|try
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
operator|!
name|threadPool
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|String
name|message
init|=
literal|"Waiting for hlog writers to terminate, elapsed "
operator|+
name|j
operator|*
literal|5
operator|+
literal|" seconds"
decl_stmt|;
if|if
condition|(
name|j
operator|<
literal|30
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Hlog writers were interrupted, possible data loss!"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|skipErrors
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not finish writing log entries"
argument_list|,
name|ex
argument_list|)
throw|;
comment|// TODO maybe we should fail here regardless if skipErrors is active or not
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Future
argument_list|>
name|entry
range|:
name|writeFutureResult
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Writer for region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|+
literal|" was interrupted, however the write process should have "
operator|+
literal|"finished. Throwing up "
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|(
operator|new
name|IOException
argument_list|(
name|e1
operator|.
name|getCause
argument_list|()
argument_list|)
operator|)
throw|;
block|}
block|}
block|}
comment|/**    * Moves processed logs to a oldLogDir after successful processing Moves    * corrupted logs (any log that couldn't be successfully parsed to corruptDir    * (.corrupt) for later investigation    *     * @param corruptedLogs    * @param processedLogs    * @param oldLogDir    * @param fs    * @param conf    * @throws IOException    */
specifier|private
specifier|static
name|void
name|archiveLogs
parameter_list|(
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedLogs
parameter_list|,
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|processedLogs
parameter_list|,
specifier|final
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|corruptDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.corrupt.dir"
argument_list|,
literal|".corrupt"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|corruptDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to mkdir "
operator|+
name|corruptDir
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|oldLogDir
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|corrupted
range|:
name|corruptedLogs
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|corruptDir
argument_list|,
name|corrupted
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|corrupted
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to move corrupted log "
operator|+
name|corrupted
operator|+
literal|" to "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving corrupted log "
operator|+
name|corrupted
operator|+
literal|" to "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Path
name|p
range|:
name|processedLogs
control|)
block|{
name|Path
name|newPath
init|=
name|HLog
operator|.
name|getHLogArchivePath
argument_list|(
name|oldLogDir
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|p
argument_list|,
name|newPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to move  "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Archived processed log "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Path to a file under RECOVERED_EDITS_DIR directory of the region found in    *<code>logEntry</code> named for the sequenceid in the passed    *<code>logEntry</code>: e.g. /hbase/some_table/2323432434/recovered.edits/2332.    * This method also ensures existence of RECOVERED_EDITS_DIR under the region    * creating it if necessary.    * @param fs    * @param logEntry    * @param rootDir HBase root dir.    * @return Path to file into which to dump split log edits.    * @throws IOException    */
specifier|static
name|Path
name|getRegionSplitEditsPath
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Entry
name|logEntry
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableDir
init|=
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|regiondir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|tableDir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|regiondir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"This region's directory doesn't exist: "
operator|+
name|regiondir
operator|.
name|toString
argument_list|()
operator|+
literal|". It is very likely that it was"
operator|+
literal|" already split so it's safe to discard those edits."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Path
name|dir
init|=
name|HLog
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
name|LOG
operator|.
name|warn
argument_list|(
literal|"mkdir failed on "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|formatRecoveredEditsFileName
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSeqNum
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|formatRecoveredEditsFileName
parameter_list|(
specifier|final
name|long
name|seqid
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|seqid
argument_list|)
return|;
block|}
comment|/*    * Parse a single hlog and put the edits in @splitLogsMap    *    * @param logfile to split    * @param splitLogsMap output parameter: a map with region names as keys and a    * list of edits as values    * @param fs the filesystem    * @param conf the configuration    * @throws IOException if hlog is corrupted, or can't be open    */
specifier|private
name|void
name|parseHLog
parameter_list|(
specifier|final
name|FileStatus
name|logfile
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|LinkedList
argument_list|<
name|Entry
argument_list|>
argument_list|>
name|splitLogsMap
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check for possibly empty file. With appends, currently Hadoop reports a
comment|// zero length even if the file has been sync'd. Revisit if HDFS-376 or
comment|// HDFS-878 is committed.
name|long
name|length
init|=
name|logfile
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File "
operator|+
name|logfile
operator|.
name|getPath
argument_list|()
operator|+
literal|" might be still open, length is 0"
argument_list|)
expr_stmt|;
block|}
name|Path
name|path
init|=
name|logfile
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Reader
name|in
decl_stmt|;
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|in
operator|=
name|getReader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
comment|//TODO should we ignore an empty, not-last log file if skip.errors is false?
comment|//Either way, the caller should decide what to do. E.g. ignore if this is the last
comment|//log in sequence.
comment|//TODO is this scenario still possible if the log has been recovered (i.e. closed)
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not open "
operator|+
name|path
operator|+
literal|" for reading. File is empty"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
name|Entry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|in
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|Entry
argument_list|>
name|queue
init|=
name|splitLogsMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|queue
operator|=
operator|new
name|LinkedList
argument_list|<
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
name|splitLogsMap
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|addLast
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pushed="
operator|+
name|editsCount
operator|+
literal|" entries from "
operator|+
name|path
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Close log reader in finally threw exception -- continuing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Callable
argument_list|<
name|Void
argument_list|>
name|createNewSplitter
parameter_list|(
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|WriterAndPath
argument_list|>
name|logWriters
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|LinkedList
argument_list|<
name|Entry
argument_list|>
argument_list|>
name|logEntries
parameter_list|,
specifier|final
name|byte
index|[]
name|region
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Split writer thread for region "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
name|logEntries
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" got "
operator|+
name|entries
operator|.
name|size
argument_list|()
operator|+
literal|" to process"
argument_list|)
expr_stmt|;
name|long
name|threadTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
name|WriterAndPath
name|wap
init|=
name|logWriters
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
name|logEntry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|wap
operator|==
literal|null
condition|)
block|{
name|Path
name|regionedits
init|=
name|getRegionSplitEditsPath
argument_list|(
name|fs
argument_list|,
name|logEntry
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionedits
operator|==
literal|null
condition|)
block|{
comment|// we already print a message if it's null in getRegionSplitEditsPath
break|break;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|regionedits
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old edits file. It could be the "
operator|+
literal|"result of a previous failed split attempt. Deleting "
operator|+
name|regionedits
operator|+
literal|", length="
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|regionedits
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|regionedits
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed delete of old "
operator|+
name|regionedits
argument_list|)
expr_stmt|;
block|}
block|}
name|Writer
name|w
init|=
name|createWriter
argument_list|(
name|fs
argument_list|,
name|regionedits
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|wap
operator|=
operator|new
name|WriterAndPath
argument_list|(
name|regionedits
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|logWriters
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|wap
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating writer path="
operator|+
name|regionedits
operator|+
literal|" region="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|wap
operator|.
name|w
operator|.
name|append
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" Applied "
operator|+
name|editsCount
operator|+
literal|" total edits to "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
argument_list|)
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|threadTime
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" Got while writing log entry to log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
comment|/**    * Create a new {@link Writer} for writing log splits.    *     * @param fs    * @param logfile    * @param conf    * @return A new Writer instance    * @throws IOException    */
specifier|protected
name|Writer
name|createWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logfile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HLog
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|logfile
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Create a new {@link Reader} for reading logs to split.    *     * @param fs    * @param curLogFile    * @param conf    * @return A new Reader instance    * @throws IOException    */
specifier|protected
name|Reader
name|getReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|curLogFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|curLogFile
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

