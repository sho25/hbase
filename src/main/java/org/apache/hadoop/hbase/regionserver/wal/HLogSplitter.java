begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
operator|.
name|recoverFileLease
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * This class is responsible for splitting up a bunch of regionserver commit log  * files that are no longer being written to, into new files, one per region for  * region to replay on startup. Delete the old log files when finished.  */
end_comment

begin_class
specifier|public
class|class
name|HLogSplitter
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LOG_SPLITTER_IMPL
init|=
literal|"hbase.hlog.splitter.impl"
decl_stmt|;
comment|/**    * Name of file that holds recovered edits written by the wal log splitting    * code, one per region    */
specifier|public
specifier|static
specifier|final
name|String
name|RECOVERED_EDITS
init|=
literal|"recovered.edits"
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HLogSplitter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|hasSplit
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|splitTime
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|splitSize
init|=
literal|0
decl_stmt|;
comment|// Parameters for split process
specifier|protected
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|protected
specifier|final
name|Path
name|srcDir
decl_stmt|;
specifier|protected
specifier|final
name|Path
name|oldLogDir
decl_stmt|;
specifier|protected
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Major subcomponents of the split process.
comment|// These are separated into inner classes to make testing easier.
name|OutputSink
name|outputSink
decl_stmt|;
name|EntryBuffers
name|entryBuffers
decl_stmt|;
comment|// If an exception is thrown by one of the other threads, it will be
comment|// stored here.
specifier|protected
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|thrown
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
comment|// Wait/notify for when data has been produced by the reader thread,
comment|// consumed by the reader thread, or an exception occurred
name|Object
name|dataAvailable
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**    * Create a new HLogSplitter using the given {@link Configuration} and the    *<code>hbase.hlog.splitter.impl</code> property to derived the instance    * class to use.    *    * @param rootDir hbase directory    * @param srcDir logs directory    * @param oldLogDir directory where processed logs are archived to    * @param logfiles the list of log files to split    */
specifier|public
specifier|static
name|HLogSplitter
name|createLogSplitter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|Path
name|srcDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|HLogSplitter
argument_list|>
name|splitterClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HLogSplitter
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
name|LOG_SPLITTER_IMPL
argument_list|,
name|HLogSplitter
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|HLogSplitter
argument_list|>
name|constructor
init|=
name|splitterClass
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|,
comment|// conf
name|Path
operator|.
name|class
argument_list|,
comment|// rootDir
name|Path
operator|.
name|class
argument_list|,
comment|// srcDir
name|Path
operator|.
name|class
argument_list|,
comment|// oldLogDir
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// fs
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|,
name|rootDir
argument_list|,
name|srcDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HLogSplitter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|Path
name|srcDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
name|this
operator|.
name|srcDir
operator|=
name|srcDir
expr_stmt|;
name|this
operator|.
name|oldLogDir
operator|=
name|oldLogDir
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|entryBuffers
operator|=
operator|new
name|EntryBuffers
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.buffersize"
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|outputSink
operator|=
operator|new
name|OutputSink
argument_list|()
expr_stmt|;
block|}
comment|/**    * Split up a bunch of regionserver commit log files that are no longer being    * written to, into new files, one per region for region to replay on startup.    * Delete the old log files when finished.    *     * @throws IOException will throw if corrupted hlogs aren't tolerated    * @return the list of splits    */
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|splitLog
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|hasSplit
argument_list|,
literal|"An HLogSplitter instance may only be used once"
argument_list|)
expr_stmt|;
name|hasSplit
operator|=
literal|true
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|srcDir
argument_list|)
condition|)
block|{
comment|// Nothing to do
return|return
name|splits
return|;
block|}
name|FileStatus
index|[]
name|logfiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|logfiles
operator|==
literal|null
operator|||
name|logfiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// Nothing to do
return|return
name|splits
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Splitting "
operator|+
name|logfiles
operator|.
name|length
operator|+
literal|" hlog(s) in "
operator|+
name|srcDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|splits
operator|=
name|splitLog
argument_list|(
name|logfiles
argument_list|)
expr_stmt|;
name|splitTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hlog file splitting completed in "
operator|+
name|splitTime
operator|+
literal|" ms for "
operator|+
name|srcDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|splits
return|;
block|}
comment|/**    * @return time that this split took    */
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|splitTime
return|;
block|}
comment|/**    * @return aggregate size of hlogs that were split    */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|splitSize
return|;
block|}
comment|/**    * @return a map from encoded region ID to the number of edits written out    * for that region.    */
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|hasSplit
argument_list|)
expr_stmt|;
return|return
name|outputSink
operator|.
name|getOutputCounts
argument_list|()
return|;
block|}
comment|/**    * Splits the HLog edits in the given list of logfiles (that are a mix of edits    * on multiple regions) by region and then splits them per region directories,    * in batches of (hbase.hlog.split.batch.size)    *     * This process is split into multiple threads. In the main thread, we loop    * through the logs to be split. For each log, we:    *<ul>    *<li> Recover it (take and drop HDFS lease) to ensure no other process can write</li>    *<li> Read each edit (see {@link #parseHLog}</li>    *<li> Mark as "processed" or "corrupt" depending on outcome</li>    *</ul>    *     * Each edit is passed into the EntryBuffers instance, which takes care of    * memory accounting and splitting the edits by region.    *     * The OutputSink object then manages N other WriterThreads which pull chunks    * of edits from EntryBuffers and write them to the output region directories.    *     * After the process is complete, the log files are archived to a separate    * directory.    */
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|splitLog
parameter_list|(
specifier|final
name|FileStatus
index|[]
name|logfiles
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|processedLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
literal|null
decl_stmt|;
name|boolean
name|skipErrors
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.hlog.split.skip.errors"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|splitSize
operator|=
literal|0
expr_stmt|;
name|outputSink
operator|.
name|startWriterThreads
argument_list|(
name|entryBuffers
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|log
range|:
name|logfiles
control|)
block|{
name|Path
name|logPath
init|=
name|log
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|logLength
init|=
name|log
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|splitSize
operator|+=
name|logLength
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Splitting hlog "
operator|+
operator|(
name|i
operator|++
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|logfiles
operator|.
name|length
operator|+
literal|": "
operator|+
name|logPath
operator|+
literal|", length="
operator|+
name|logLength
argument_list|)
expr_stmt|;
try|try
block|{
name|recoverFileLease
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|parseHLog
argument_list|(
name|log
argument_list|,
name|entryBuffers
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|processedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If the IOE resulted from bad file format,
comment|// then this problem is idempotent and retrying won't help
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ParseException from hlog "
operator|+
name|logPath
operator|+
literal|".  continuing"
argument_list|)
expr_stmt|;
name|processedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|skipErrors
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got while parsing hlog "
operator|+
name|logPath
operator|+
literal|". Marking as corrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|corruptedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|fs
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
operator|.
name|length
operator|>
name|processedLogs
operator|.
name|size
argument_list|()
operator|+
name|corruptedLogs
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OrphanHLogAfterSplitException
argument_list|(
literal|"Discovered orphan hlog after split. Maybe the "
operator|+
literal|"HRegionServer was not dead when we started"
argument_list|)
throw|;
block|}
name|archiveLogs
argument_list|(
name|srcDir
argument_list|,
name|corruptedLogs
argument_list|,
name|processedLogs
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|splits
operator|=
name|outputSink
operator|.
name|finishWritingAndClose
argument_list|()
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
comment|/**    * Moves processed logs to a oldLogDir after successful processing Moves    * corrupted logs (any log that couldn't be successfully parsed to corruptDir    * (.corrupt) for later investigation    *     * @param corruptedLogs    * @param processedLogs    * @param oldLogDir    * @param fs    * @param conf    * @throws IOException    */
specifier|private
specifier|static
name|void
name|archiveLogs
parameter_list|(
specifier|final
name|Path
name|srcDir
parameter_list|,
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedLogs
parameter_list|,
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|processedLogs
parameter_list|,
specifier|final
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|corruptDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.corrupt.dir"
argument_list|,
literal|".corrupt"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|corruptDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to mkdir "
operator|+
name|corruptDir
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|oldLogDir
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|corrupted
range|:
name|corruptedLogs
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|corruptDir
argument_list|,
name|corrupted
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|corrupted
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to move corrupted log "
operator|+
name|corrupted
operator|+
literal|" to "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving corrupted log "
operator|+
name|corrupted
operator|+
literal|" to "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Path
name|p
range|:
name|processedLogs
control|)
block|{
name|Path
name|newPath
init|=
name|HLog
operator|.
name|getHLogArchivePath
argument_list|(
name|oldLogDir
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|p
argument_list|,
name|newPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to move  "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Archived processed log "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|srcDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete src dir: "
operator|+
name|srcDir
argument_list|)
throw|;
block|}
block|}
comment|/**    * Path to a file under RECOVERED_EDITS_DIR directory of the region found in    *<code>logEntry</code> named for the sequenceid in the passed    *<code>logEntry</code>: e.g. /hbase/some_table/2323432434/recovered.edits/2332.    * This method also ensures existence of RECOVERED_EDITS_DIR under the region    * creating it if necessary.    * @param fs    * @param logEntry    * @param rootDir HBase root dir.    * @return Path to file into which to dump split log edits.    * @throws IOException    */
specifier|static
name|Path
name|getRegionSplitEditsPath
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Entry
name|logEntry
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableDir
init|=
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|regiondir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|tableDir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|regiondir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"This region's directory doesn't exist: "
operator|+
name|regiondir
operator|.
name|toString
argument_list|()
operator|+
literal|". It is very likely that it was"
operator|+
literal|" already split so it's safe to discard those edits."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Path
name|dir
init|=
name|HLog
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
name|LOG
operator|.
name|warn
argument_list|(
literal|"mkdir failed on "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|formatRecoveredEditsFileName
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSeqNum
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|formatRecoveredEditsFileName
parameter_list|(
specifier|final
name|long
name|seqid
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|seqid
argument_list|)
return|;
block|}
comment|/*    * Parse a single hlog and put the edits in @splitLogsMap    *    * @param logfile to split    * @param splitLogsMap output parameter: a map with region names as keys and a    * list of edits as values    * @param fs the filesystem    * @param conf the configuration    * @throws IOException if hlog is corrupted, or can't be open    */
specifier|private
name|void
name|parseHLog
parameter_list|(
specifier|final
name|FileStatus
name|logfile
parameter_list|,
name|EntryBuffers
name|entryBuffers
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check for possibly empty file. With appends, currently Hadoop reports a
comment|// zero length even if the file has been sync'd. Revisit if HDFS-376 or
comment|// HDFS-878 is committed.
name|long
name|length
init|=
name|logfile
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File "
operator|+
name|logfile
operator|.
name|getPath
argument_list|()
operator|+
literal|" might be still open, length is 0"
argument_list|)
expr_stmt|;
block|}
name|Path
name|path
init|=
name|logfile
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Reader
name|in
decl_stmt|;
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|in
operator|=
name|getReader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
comment|//TODO should we ignore an empty, not-last log file if skip.errors is false?
comment|//Either way, the caller should decide what to do. E.g. ignore if this is the last
comment|//log in sequence.
comment|//TODO is this scenario still possible if the log has been recovered (i.e. closed)
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not open "
operator|+
name|path
operator|+
literal|" for reading. File is empty"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
name|Entry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|in
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|entryBuffers
operator|.
name|appendEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pushed="
operator|+
name|editsCount
operator|+
literal|" entries from "
operator|+
name|path
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Close log reader in finally threw exception -- continuing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writerThreadError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|thrown
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check for errors in the writer threads. If any is found, rethrow it.    */
specifier|private
name|void
name|checkForErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|Throwable
name|thrown
init|=
name|this
operator|.
name|thrown
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|thrown
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|thrown
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|thrown
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create a new {@link Writer} for writing log splits.    */
specifier|protected
name|Writer
name|createWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logfile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HLog
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|logfile
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Create a new {@link Reader} for reading logs to split.    */
specifier|protected
name|Reader
name|getReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|curLogFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|curLogFile
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Class which accumulates edits and separates them into a buffer per region    * while simultaneously accounting RAM usage. Blocks if the RAM usage crosses    * a predefined threshold.    *     * Writer threads then pull region-specific buffers from this class.    */
class|class
name|EntryBuffers
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
name|buffers
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|/* Track which regions are currently in the middle of writing. We don't allow        an IO thread to pick up bytes from a region if we're already writing        data for that region in a different IO thread. */
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|currentlyWriting
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|long
name|totalBuffered
init|=
literal|0
decl_stmt|;
name|long
name|maxHeapUsage
decl_stmt|;
name|EntryBuffers
parameter_list|(
name|long
name|maxHeapUsage
parameter_list|)
block|{
name|this
operator|.
name|maxHeapUsage
operator|=
name|maxHeapUsage
expr_stmt|;
block|}
comment|/**      * Append a log entry into the corresponding region buffer.      * Blocks if the total heap usage has crossed the specified threshold.      *       * @throws InterruptedException      * @throws IOException       */
name|void
name|appendEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|HLogKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RegionEntryBuffer
name|buffer
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|buffer
operator|=
name|buffers
operator|.
name|get
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|RegionEntryBuffer
argument_list|(
name|key
operator|.
name|getTablename
argument_list|()
argument_list|,
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|buffers
operator|.
name|put
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
name|long
name|incrHeap
init|=
name|buffer
operator|.
name|appendEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|totalBuffered
operator|+=
name|incrHeap
expr_stmt|;
block|}
comment|// If we crossed the chunk threshold, wait for more space to be available
synchronized|synchronized
init|(
name|dataAvailable
init|)
block|{
while|while
condition|(
name|totalBuffered
operator|>
name|maxHeapUsage
operator|&&
name|thrown
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Used "
operator|+
name|totalBuffered
operator|+
literal|" bytes of buffered edits, waiting for IO threads..."
argument_list|)
expr_stmt|;
name|dataAvailable
operator|.
name|wait
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|checkForErrors
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
name|RegionEntryBuffer
name|getChunkToWrite
parameter_list|()
block|{
name|long
name|biggestSize
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|biggestBufferKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
name|entry
range|:
name|buffers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|size
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|heapSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|biggestSize
operator|&&
operator|!
name|currentlyWriting
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|biggestSize
operator|=
name|size
expr_stmt|;
name|biggestBufferKey
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|biggestBufferKey
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RegionEntryBuffer
name|buffer
init|=
name|buffers
operator|.
name|remove
argument_list|(
name|biggestBufferKey
argument_list|)
decl_stmt|;
name|currentlyWriting
operator|.
name|add
argument_list|(
name|biggestBufferKey
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
name|void
name|doneWriting
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|boolean
name|removed
init|=
name|currentlyWriting
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
assert|assert
name|removed
assert|;
block|}
name|long
name|size
init|=
name|buffer
operator|.
name|heapSize
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|dataAvailable
init|)
block|{
name|totalBuffered
operator|-=
name|size
expr_stmt|;
comment|// We may unblock writers
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
name|boolean
name|isRegionCurrentlyWriting
parameter_list|(
name|byte
index|[]
name|region
parameter_list|)
block|{
return|return
name|currentlyWriting
operator|.
name|contains
argument_list|(
name|region
argument_list|)
return|;
block|}
block|}
comment|/**    * A buffer of some number of edits for a given region.    * This accumulates edits and also provides a memory optimization in order to    * share a single byte array instance for the table and region name.    * Also tracks memory usage of the accumulated edits.    */
specifier|static
class|class
name|RegionEntryBuffer
implements|implements
name|HeapSize
block|{
name|long
name|heapInBuffer
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entryBuffer
decl_stmt|;
name|byte
index|[]
name|tableName
decl_stmt|;
name|byte
index|[]
name|encodedRegionName
decl_stmt|;
name|RegionEntryBuffer
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|byte
index|[]
name|region
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|encodedRegionName
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|entryBuffer
operator|=
operator|new
name|LinkedList
argument_list|<
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|long
name|appendEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|internify
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entryBuffer
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|long
name|incrHeap
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|heapSize
argument_list|()
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
literal|2
operator|*
name|ClassSize
operator|.
name|REFERENCE
argument_list|)
operator|+
comment|// HLogKey pointers
literal|0
decl_stmt|;
comment|// TODO linkedlist entry
name|heapInBuffer
operator|+=
name|incrHeap
expr_stmt|;
return|return
name|incrHeap
return|;
block|}
specifier|private
name|void
name|internify
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|HLogKey
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|k
operator|.
name|internTableName
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|k
operator|.
name|internEncodedRegionName
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|heapInBuffer
return|;
block|}
block|}
class|class
name|WriterThread
extends|extends
name|Thread
block|{
specifier|private
specifier|volatile
name|boolean
name|shouldStop
init|=
literal|false
decl_stmt|;
name|WriterThread
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
literal|"WriterThread-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doRun
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in log splitting write thread"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|writerThreadError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doRun
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writer thread "
operator|+
name|this
operator|+
literal|": starting"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|RegionEntryBuffer
name|buffer
init|=
name|entryBuffers
operator|.
name|getChunkToWrite
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
comment|// No data currently available, wait on some more to show up
synchronized|synchronized
init|(
name|dataAvailable
init|)
block|{
if|if
condition|(
name|shouldStop
condition|)
return|return;
try|try
block|{
name|dataAvailable
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shouldStop
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
continue|continue;
block|}
assert|assert
name|buffer
operator|!=
literal|null
assert|;
try|try
block|{
name|writeBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|entryBuffers
operator|.
name|doneWriting
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeBuffer
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
name|buffer
operator|.
name|entryBuffer
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" got an empty buffer, skipping"
argument_list|)
expr_stmt|;
return|return;
block|}
name|WriterAndPath
name|wap
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
name|logEntry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|wap
operator|==
literal|null
condition|)
block|{
name|wap
operator|=
name|outputSink
operator|.
name|getWriterAndPath
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|wap
operator|==
literal|null
condition|)
block|{
comment|// getWriterAndPath decided we don't need to write these edits
comment|// Message was already logged
return|return;
block|}
block|}
name|wap
operator|.
name|w
operator|.
name|append
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
block|}
comment|// Pass along summary statistics
name|wap
operator|.
name|incrementEdits
argument_list|(
name|editsCount
argument_list|)
expr_stmt|;
name|wap
operator|.
name|incrementNanoTime
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" Got while writing log entry to log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|void
name|finish
parameter_list|()
block|{
name|shouldStop
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Class that manages the output streams from the log splitting process.    */
class|class
name|OutputSink
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|WriterAndPath
argument_list|>
name|logWriters
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|WriterAndPath
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|WriterThread
argument_list|>
name|writerThreads
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/* Set of regions which we've decided should not output edits */
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|blacklistedRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|hasClosed
init|=
literal|false
decl_stmt|;
comment|/**      * Start the threads that will pump data from the entryBuffers      * to the output files.      * @return the list of started threads      */
specifier|synchronized
name|void
name|startWriterThreads
parameter_list|(
name|EntryBuffers
name|entryBuffers
parameter_list|)
block|{
comment|// More threads could potentially write faster at the expense
comment|// of causing more disk seeks as the logs are split.
comment|// 3. After a certain setting (probably around 3) the
comment|// process will be bound on the reader in the current
comment|// implementation anyway.
name|int
name|numThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.writer.threads"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|WriterThread
name|t
init|=
operator|new
name|WriterThread
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|writerThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|finishWritingAndClose
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for split writer threads to finish"
argument_list|)
expr_stmt|;
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
name|t
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|checkForErrors
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Split writers finished"
argument_list|)
expr_stmt|;
return|return
name|closeStreams
argument_list|()
return|;
block|}
comment|/**      * Close all of the output streams.      * @return the list of paths written.      */
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|closeStreams
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|hasClosed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|WriterAndPath
name|wap
range|:
name|logWriters
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|wap
operator|.
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't close log at "
operator|+
name|wap
operator|.
name|p
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|paths
operator|.
name|add
argument_list|(
name|wap
operator|.
name|p
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed path "
operator|+
name|wap
operator|.
name|p
operator|+
literal|" (wrote "
operator|+
name|wap
operator|.
name|editsWritten
operator|+
literal|" edits in "
operator|+
operator|(
name|wap
operator|.
name|nanosSpent
operator|/
literal|1000
operator|/
literal|1000
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|thrown
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
name|hasClosed
operator|=
literal|true
expr_stmt|;
return|return
name|paths
return|;
block|}
comment|/**      * Get a writer and path for a log starting at the given entry.      *       * This function is threadsafe so long as multiple threads are always      * acting on different regions.      *       * @return null if this region shouldn't output any logs      */
name|WriterAndPath
name|getWriterAndPath
parameter_list|(
name|Entry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|region
index|[]
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|WriterAndPath
name|ret
init|=
name|logWriters
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
comment|// If we already decided that this region doesn't get any output
comment|// we don't need to check again.
if|if
condition|(
name|blacklistedRegions
operator|.
name|contains
argument_list|(
name|region
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Need to create writer
name|Path
name|regionedits
init|=
name|getRegionSplitEditsPath
argument_list|(
name|fs
argument_list|,
name|entry
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionedits
operator|==
literal|null
condition|)
block|{
comment|// Edits dir doesn't exist
name|blacklistedRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|deletePreexistingOldEdits
argument_list|(
name|regionedits
argument_list|)
expr_stmt|;
name|Writer
name|w
init|=
name|createWriter
argument_list|(
name|fs
argument_list|,
name|regionedits
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ret
operator|=
operator|new
name|WriterAndPath
argument_list|(
name|regionedits
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|logWriters
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating writer path="
operator|+
name|regionedits
operator|+
literal|" region="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * If the specified path exists, issue a warning and delete it.      */
specifier|private
name|void
name|deletePreexistingOldEdits
parameter_list|(
name|Path
name|regionedits
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|regionedits
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old edits file. It could be the "
operator|+
literal|"result of a previous failed split attempt. Deleting "
operator|+
name|regionedits
operator|+
literal|", length="
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|regionedits
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|regionedits
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed delete of old "
operator|+
name|regionedits
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return a map from encoded region ID to the number of edits written out      * for that region.      */
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|ret
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|logWriters
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|WriterAndPath
argument_list|>
name|entry
range|:
name|logWriters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|editsWritten
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
comment|/**    *  Private data structure that wraps a Writer and its Path,    *  also collecting statistics about the data written to this    *  output.    */
specifier|private
specifier|final
specifier|static
class|class
name|WriterAndPath
block|{
specifier|final
name|Path
name|p
decl_stmt|;
specifier|final
name|Writer
name|w
decl_stmt|;
comment|/* Count of edits written to this path */
name|long
name|editsWritten
init|=
literal|0
decl_stmt|;
comment|/* Number of nanos spent writing to this log */
name|long
name|nanosSpent
init|=
literal|0
decl_stmt|;
name|WriterAndPath
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|Writer
name|w
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
block|}
name|void
name|incrementEdits
parameter_list|(
name|int
name|edits
parameter_list|)
block|{
name|editsWritten
operator|+=
name|edits
expr_stmt|;
block|}
name|void
name|incrementNanoTime
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|nanosSpent
operator|+=
name|nanos
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

