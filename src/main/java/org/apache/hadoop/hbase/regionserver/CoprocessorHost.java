begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Implements the coprocessor environment and runtime support.  */
end_comment

begin_class
specifier|public
class|class
name|CoprocessorHost
block|{
comment|/**    * Environment priority comparator.    * Coprocessors are chained in sorted order.    */
class|class
name|EnvironmentPriorityComparator
implements|implements
name|Comparator
argument_list|<
name|Environment
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Environment
name|env1
parameter_list|,
name|Environment
name|env2
parameter_list|)
block|{
if|if
condition|(
name|env1
operator|.
name|priority
operator|.
name|intValue
argument_list|()
operator|<
name|env2
operator|.
name|priority
operator|.
name|intValue
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|env1
operator|.
name|priority
operator|.
name|intValue
argument_list|()
operator|>
name|env2
operator|.
name|priority
operator|.
name|intValue
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Encapsulation of the environment of each coprocessor    */
class|class
name|Environment
implements|implements
name|CoprocessorEnvironment
block|{
comment|/**      * A wrapper for HTable. Can be used to restrict privilege.      *      * Currently it just helps to track tables opened by a Coprocessor and      * facilitate close of them if it is aborted.      *      * We also disallow row locking.      *      * There is nothing now that will stop a coprocessor from using HTable      * objects directly instead of this API, but in the future we intend to      * analyze coprocessor implementations as they are loaded and reject those      * which attempt to use objects and methods outside the Environment      * sandbox.      */
class|class
name|HTableWrapper
implements|implements
name|HTableInterface
block|{
specifier|private
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|private
name|HTable
name|table
decl_stmt|;
specifier|public
name|HTableWrapper
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|openTables
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|void
name|internalClose
parameter_list|()
throws|throws
name|IOException
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|table
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|internalClose
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|openTables
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Result
name|getRowOrBefore
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|row
argument_list|,
name|family
argument_list|)
return|;
block|}
specifier|public
name|Result
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
return|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
throws|throws
name|IOException
block|{
name|table
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|checkAndPut
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|checkAndPut
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|put
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|checkAndDelete
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|checkAndDelete
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|delete
argument_list|)
return|;
block|}
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|)
return|;
block|}
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
name|writeToWAL
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|increment
parameter_list|(
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
return|;
block|}
specifier|public
name|void
name|flushCommits
parameter_list|()
throws|throws
name|IOException
block|{
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAutoFlush
parameter_list|()
block|{
return|return
name|table
operator|.
name|isAutoFlush
argument_list|()
return|;
block|}
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|getScanner
argument_list|(
name|family
argument_list|)
return|;
block|}
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|getScanner
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
return|;
block|}
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|getTableDescriptor
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|public
name|RowLock
name|lockRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"row locking is not allowed within the coprocessor environment"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|unlockRow
parameter_list|(
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"row locking is not allowed within the coprocessor environment"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|batch
parameter_list|(
name|List
argument_list|<
name|Row
argument_list|>
name|actions
parameter_list|,
name|Object
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|table
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|batch
parameter_list|(
name|List
argument_list|<
name|Row
argument_list|>
name|actions
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|table
operator|.
name|batch
argument_list|(
name|actions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|get
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|CoprocessorProtocol
parameter_list|,
name|R
parameter_list|>
name|void
name|coprocessorExec
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|Throwable
block|{
name|table
operator|.
name|coprocessorExec
argument_list|(
name|protocol
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|callable
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|CoprocessorProtocol
parameter_list|,
name|R
parameter_list|>
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|coprocessorExec
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|)
throws|throws
name|IOException
throws|,
name|Throwable
block|{
return|return
name|table
operator|.
name|coprocessorExec
argument_list|(
name|protocol
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|callable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|CoprocessorProtocol
parameter_list|>
name|T
name|coprocessorProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|table
operator|.
name|coprocessorProxy
argument_list|(
name|protocol
argument_list|,
name|row
argument_list|)
return|;
block|}
block|}
comment|/** The coprocessor */
name|Coprocessor
name|impl
decl_stmt|;
comment|/** Environment variables */
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Chaining priority */
name|Coprocessor
operator|.
name|Priority
name|priority
init|=
name|Coprocessor
operator|.
name|Priority
operator|.
name|USER
decl_stmt|;
comment|/** Current coprocessor state */
name|Coprocessor
operator|.
name|State
name|state
init|=
name|Coprocessor
operator|.
name|State
operator|.
name|UNINSTALLED
decl_stmt|;
comment|/** Accounting for tables opened by the coprocessor */
name|List
argument_list|<
name|HTableInterface
argument_list|>
name|openTables
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|HTableInterface
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Constructor      * @param impl the coprocessor instance      * @param priority chaining priority      */
specifier|public
name|Environment
parameter_list|(
specifier|final
name|Coprocessor
name|impl
parameter_list|,
name|Coprocessor
operator|.
name|Priority
name|priority
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|state
operator|=
name|Coprocessor
operator|.
name|State
operator|.
name|INSTALLED
expr_stmt|;
block|}
comment|/** Initialize the environment */
name|void
name|startup
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|Coprocessor
operator|.
name|State
operator|.
name|INSTALLED
operator|||
name|state
operator|==
name|Coprocessor
operator|.
name|State
operator|.
name|STOPPED
condition|)
block|{
name|state
operator|=
name|Coprocessor
operator|.
name|State
operator|.
name|STARTING
expr_stmt|;
try|try
block|{
name|impl
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|state
operator|=
name|Coprocessor
operator|.
name|State
operator|.
name|ACTIVE
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting coprocessor "
operator|+
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not starting coprocessor "
operator|+
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" because not inactive (state="
operator|+
name|state
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Clean up the environment */
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|Coprocessor
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|state
operator|=
name|Coprocessor
operator|.
name|State
operator|.
name|STOPPING
expr_stmt|;
try|try
block|{
name|impl
operator|.
name|stop
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|state
operator|=
name|Coprocessor
operator|.
name|State
operator|.
name|STOPPED
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error stopping coprocessor "
operator|+
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not stopping coprocessor "
operator|+
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" because not active (state="
operator|+
name|state
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|// clean up any table references
for|for
control|(
name|HTableInterface
name|table
range|:
name|openTables
control|)
block|{
try|try
block|{
operator|(
operator|(
name|HTableWrapper
operator|)
name|table
operator|)
operator|.
name|internalClose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// nothing can be done here
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|shouldBypass
parameter_list|()
block|{
name|boolean
name|current
init|=
name|bypass
operator|.
name|get
argument_list|()
decl_stmt|;
name|bypass
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|current
return|;
block|}
name|boolean
name|shouldComplete
parameter_list|()
block|{
name|boolean
name|current
init|=
name|complete
operator|.
name|get
argument_list|()
decl_stmt|;
name|complete
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|current
return|;
block|}
comment|/** @return the coprocessor environment version */
annotation|@
name|Override
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|Coprocessor
operator|.
name|VERSION
return|;
block|}
comment|/** @return the HBase release */
annotation|@
name|Override
specifier|public
name|String
name|getHBaseVersion
parameter_list|()
block|{
return|return
name|VersionInfo
operator|.
name|getVersion
argument_list|()
return|;
block|}
comment|/** @return the region */
annotation|@
name|Override
specifier|public
name|HRegion
name|getRegion
parameter_list|()
block|{
return|return
name|region
return|;
block|}
comment|/** @return reference to the region server services */
annotation|@
name|Override
specifier|public
name|RegionServerServices
name|getRegionServerServices
parameter_list|()
block|{
return|return
name|rsServices
return|;
block|}
comment|/**      * Open a table from within the Coprocessor environment      * @param tableName the table name      * @return an interface for manipulating the table      * @exception IOException Exception      */
annotation|@
name|Override
specifier|public
name|HTableInterface
name|getTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HTableWrapper
argument_list|(
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|complete
parameter_list|()
block|{
name|complete
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bypass
parameter_list|()
block|{
name|bypass
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CoprocessorHost
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Pattern
name|attrSpecMatch
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.+):(.+):(.+)"
argument_list|)
decl_stmt|;
comment|/** The region server services */
name|RegionServerServices
name|rsServices
decl_stmt|;
comment|/** The region */
name|HRegion
name|region
decl_stmt|;
comment|/** Ordered set of loaded coprocessors with lock */
specifier|final
name|ReentrantReadWriteLock
name|coprocessorLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Environment
argument_list|>
name|coprocessors
init|=
operator|new
name|TreeSet
argument_list|<
name|Environment
argument_list|>
argument_list|(
operator|new
name|EnvironmentPriorityComparator
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
name|bypass
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|initialValue
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
decl_stmt|;
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
name|complete
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|initialValue
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Constructor    * @param region the region    * @param rsServices an interface provide access to region server facilities    * @param conf the configuration    */
specifier|public
name|CoprocessorHost
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|RegionServerServices
name|rsServices
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|rsServices
operator|=
name|rsServices
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
comment|// load system default cp's from configuration.
name|loadSystemCoprocessors
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// load Coprocessor From HDFS
name|loadTableCoprocessors
argument_list|()
expr_stmt|;
block|}
comment|/**    * Load system coprocessors. Read the class names from configuration.    * Called by constructor.    */
specifier|private
name|void
name|loadSystemCoprocessors
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
init|=
literal|null
decl_stmt|;
comment|// load default coprocessors from configure file
name|String
name|defaultCPClasses
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.coprocessor.default.classes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultCPClasses
operator|==
literal|null
operator|||
name|defaultCPClasses
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|defaultCPClasses
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|int
name|priority
init|=
name|Coprocessor
operator|.
name|Priority
operator|.
name|SYSTEM
operator|.
name|intValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|className
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|findCoprocessor
argument_list|(
name|className
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|ClassLoader
name|cl
init|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
try|try
block|{
name|implClass
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|implClass
argument_list|,
name|Coprocessor
operator|.
name|Priority
operator|.
name|SYSTEM
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"System coprocessor "
operator|+
name|className
operator|+
literal|" was loaded "
operator|+
literal|"successfully with priority ("
operator|+
name|priority
operator|++
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Class "
operator|+
name|className
operator|+
literal|" cannot be found. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Load coprocessor "
operator|+
name|className
operator|+
literal|" failed. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Load a coprocessor implementation into the host    * @param path path to implementation jar    * @param className the main class name    * @param priority chaining priority    * @throws IOException Exception    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|load
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|className
parameter_list|,
name|Coprocessor
operator|.
name|Priority
name|priority
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
init|=
literal|null
decl_stmt|;
comment|// Have we already loaded the class, perhaps from an earlier region open
comment|// for the same table?
try|try
block|{
name|implClass
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|className
operator|+
literal|" needs to be loaded from a file - "
operator|+
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
comment|// go ahead to load from file system.
block|}
comment|// If not, load
if|if
condition|(
name|implClass
operator|==
literal|null
condition|)
block|{
comment|// copy the jar to the local filesystem
if|if
condition|(
operator|!
name|path
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|": not a jar file?"
argument_list|)
throw|;
block|}
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/."
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|replace
argument_list|(
literal|','
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|"."
operator|+
name|className
operator|+
literal|"."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|".jar"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|copyToLocalFile
argument_list|(
name|path
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|dst
argument_list|)
expr_stmt|;
comment|// TODO: code weaving goes here
comment|// TODO: wrap heap allocations and enforce maximum usage limits
comment|/* TODO: inject code into loop headers that monitors CPU use and          aborts runaway user code */
comment|// load the jar and get the implementation main class
name|String
name|cp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
comment|// NOTE: Path.toURL is deprecated (toURI instead) but the URLClassLoader
comment|// unsuprisingly wants URLs, not URIs; so we will use the deprecated
comment|// method which returns URLs for as long as it is available
name|List
argument_list|<
name|URL
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|cp
argument_list|,
name|File
operator|.
name|pathSeparator
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
operator|)
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClassLoader
name|cl
init|=
operator|new
name|URLClassLoader
argument_list|(
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[]
block|{}
argument_list|)
argument_list|,
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
try|try
block|{
name|implClass
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|load
argument_list|(
name|implClass
argument_list|,
name|priority
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param implClass Implementation class    * @param priority priority    * @throws IOException Exception    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|void
name|load
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|,
name|Coprocessor
operator|.
name|Priority
name|priority
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create the instance
name|Coprocessor
name|impl
decl_stmt|;
name|Object
name|o
init|=
literal|null
decl_stmt|;
try|try
block|{
name|o
operator|=
name|implClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|impl
operator|=
operator|(
name|Coprocessor
operator|)
name|o
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// create the environment
name|Environment
name|env
init|=
operator|new
name|Environment
argument_list|(
name|impl
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|env
operator|.
name|startup
argument_list|()
expr_stmt|;
comment|// Check if it's an Endpoint.
comment|// Due to current dynamic protocol design, Endpoint
comment|// uses a different way to be registered and executed.
comment|// It uses a visitor pattern to invoke registered Endpoint
comment|// method.
for|for
control|(
name|Class
name|c
range|:
name|implClass
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|CoprocessorProtocol
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|region
operator|.
name|registerProtocol
argument_list|(
name|c
argument_list|,
operator|(
name|CoprocessorProtocol
operator|)
name|o
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
try|try
block|{
name|coprocessorLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|coprocessors
operator|.
name|add
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Find a coprocessor implementation by class name    * @param className the class name    * @return the coprocessor, or null if not found    */
specifier|public
name|Coprocessor
name|findCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
block|{
comment|// initialize the coprocessors
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|env
operator|.
name|impl
return|;
block|}
block|}
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|env
operator|.
name|impl
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|loadTableCoprocessors
parameter_list|()
block|{
comment|// scan the table attributes for coprocessor load specifications
comment|// initialize the coprocessors
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"COPROCESSOR"
argument_list|)
condition|)
block|{
comment|// found one
try|try
block|{
name|String
name|spec
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|attrSpecMatch
operator|.
name|matcher
argument_list|(
name|spec
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Coprocessor
operator|.
name|Priority
name|priority
init|=
name|Coprocessor
operator|.
name|Priority
operator|.
name|valueOf
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|load
argument_list|(
name|path
argument_list|,
name|className
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Load coprocessor "
operator|+
name|className
operator|+
literal|" from HTD of "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|" successfully."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"attribute '"
operator|+
name|key
operator|+
literal|"' has invalid coprocessor spec"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Invoked before a region open    */
specifier|public
name|void
name|preOpen
parameter_list|()
block|{
name|loadTableCoprocessors
argument_list|()
expr_stmt|;
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preOpen
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invoked after a region open    */
specifier|public
name|void
name|postOpen
parameter_list|()
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postOpen
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invoked before a region is closed    * @param abortRequested true if the server is aborting    */
specifier|public
name|void
name|preClose
parameter_list|(
name|boolean
name|abortRequested
parameter_list|)
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preClose
argument_list|(
name|env
argument_list|,
name|abortRequested
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invoked after a region is closed    * @param abortRequested true if the server is aborting    */
specifier|public
name|void
name|postClose
parameter_list|(
name|boolean
name|abortRequested
parameter_list|)
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postClose
argument_list|(
name|env
argument_list|,
name|abortRequested
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invoked before a region is compacted.    * @param willSplit true if the compaction is about to trigger a split    */
specifier|public
name|void
name|preCompact
parameter_list|(
name|boolean
name|willSplit
parameter_list|)
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preCompact
argument_list|(
name|env
argument_list|,
name|willSplit
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invoked after a region is compacted.    * @param willSplit true if the compaction is about to trigger a split    */
specifier|public
name|void
name|postCompact
parameter_list|(
name|boolean
name|willSplit
parameter_list|)
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postCompact
argument_list|(
name|env
argument_list|,
name|willSplit
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invoked before a memstore flush    */
specifier|public
name|void
name|preFlush
parameter_list|()
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preFlush
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invoked after a memstore flush    */
specifier|public
name|void
name|postFlush
parameter_list|()
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postFlush
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invoked just before a split    */
specifier|public
name|void
name|preSplit
parameter_list|()
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preSplit
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invoked just after a split    * @param l the new left-hand daughter region    * @param r the new right-hand daughter region    */
specifier|public
name|void
name|postSplit
parameter_list|(
name|HRegion
name|l
parameter_list|,
name|HRegion
name|r
parameter_list|)
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postSplit
argument_list|(
name|env
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// RegionObserver support
comment|/**    * @param row the row key    * @param family the family    * @param result the result set from the region    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|preGetClosestRowBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preGetClosestRowBefore
argument_list|(
name|env
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param row the row key    * @param family the family    * @param result the result set from the region    * @exception IOException Exception    */
specifier|public
name|void
name|postGetClosestRowBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postGetClosestRowBefore
argument_list|(
name|env
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param get the Get request    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|preGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preGet
argument_list|(
name|env
argument_list|,
name|get
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param get the Get request    * @param results the result set    * @return the possibly transformed result set to use    * @exception IOException Exception    */
specifier|public
name|void
name|postGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postGet
argument_list|(
name|env
argument_list|,
name|get
argument_list|,
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param get the Get request    * @return true or false to return to client if bypassing normal operation,    * or null otherwise    * @exception IOException Exception    */
specifier|public
name|Boolean
name|preExists
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|exists
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preExists
argument_list|(
name|env
argument_list|,
name|get
argument_list|,
name|exists
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|exists
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param get the Get request    * @param exists the result returned by the region server    * @return the result to return to the client    * @exception IOException Exception    */
specifier|public
name|boolean
name|postExists
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
name|boolean
name|exists
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|exists
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postExists
argument_list|(
name|env
argument_list|,
name|get
argument_list|,
name|exists
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|exists
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param familyMap map of family to edits for the given family.    * @param writeToWAL true if the change should be written to the WAL    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|prePut
parameter_list|(
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|prePut
argument_list|(
name|env
argument_list|,
name|familyMap
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param familyMap map of family to edits for the given family.    * @param writeToWAL true if the change should be written to the WAL    * @exception IOException Exception    */
specifier|public
name|void
name|postPut
parameter_list|(
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postPut
argument_list|(
name|env
argument_list|,
name|familyMap
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param familyMap map of family to edits for the given family.    * @param writeToWAL true if the change should be written to the WAL    * @return true if default processing should be bypassed    * @exception IOException Exception    */
specifier|public
name|boolean
name|preDelete
parameter_list|(
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preDelete
argument_list|(
name|env
argument_list|,
name|familyMap
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param familyMap map of family to edits for the given family.    * @param writeToWAL true if the change should be written to the WAL    * @exception IOException Exception    */
specifier|public
name|void
name|postDelete
parameter_list|(
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postDelete
argument_list|(
name|env
argument_list|,
name|familyMap
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param value the expected value    * @param put data to put if check succeeds    * @return true or false to return to client if default processing should    * be bypassed, or null otherwise    * @throws IOException e    */
specifier|public
name|Boolean
name|preCheckAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preCheckAndPut
argument_list|(
name|env
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|put
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|result
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param value the expected value    * @param put data to put if check succeeds    * @throws IOException e    */
specifier|public
name|boolean
name|postCheckAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postCheckAndPut
argument_list|(
name|env
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|put
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param value the expected value    * @param delete delete to commit if check succeeds    * @return true or false to return to client if default processing should    * be bypassed, or null otherwise    * @throws IOException e    */
specifier|public
name|Boolean
name|preCheckAndDelete
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preCheckAndDelete
argument_list|(
name|env
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|delete
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|result
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param value the expected value    * @param delete delete to commit if check succeeds    * @throws IOException e    */
specifier|public
name|boolean
name|postCheckAndDelete
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postCheckAndDelete
argument_list|(
name|env
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|delete
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param amount long amount to increment    * @param writeToWAL true if the change should be written to the WAL    * @return return value for client if default operation should be bypassed,    * or null otherwise    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Long
name|preIncrementColumnValue
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|amount
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preIncrementColumnValue
argument_list|(
name|env
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|amount
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param row row to check    * @param family column family    * @param qualifier column qualifier    * @param amount long amount to increment    * @param writeToWAL true if the change should be written to the WAL    * @param result the result returned by incrementColumnValue    * @return the result to return to the client    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|long
name|postIncrementColumnValue
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|,
name|long
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postIncrementColumnValue
argument_list|(
name|env
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
name|writeToWAL
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param increment increment object    * @return result to return to client if default operation should be    * bypassed, null otherwise    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|Result
name|preIncrement
parameter_list|(
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|Result
name|result
init|=
operator|new
name|Result
argument_list|()
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preIncrement
argument_list|(
name|env
argument_list|,
name|increment
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|result
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param increment increment object    * @param result the result returned by incrementColumnValue    * @throws IOException if an error occurred on the coprocessor    */
specifier|public
name|void
name|postIncrement
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|,
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postIncrement
argument_list|(
name|env
argument_list|,
name|increment
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param scan the Scan specification    * @return scanner id to return to client if default operation should be    * bypassed, false otherwise    * @exception IOException Exception    */
specifier|public
name|InternalScanner
name|preScannerOpen
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|InternalScanner
name|s
init|=
literal|null
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|s
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preScannerOpen
argument_list|(
name|env
argument_list|,
name|scan
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|s
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param scan the Scan specification    * @param s the scanner    * @return the scanner instance to use    * @exception IOException Exception    */
specifier|public
name|InternalScanner
name|postScannerOpen
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|,
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|s
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postScannerOpen
argument_list|(
name|env
argument_list|,
name|scan
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|s
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param s the scanner    * @param results the result set returned by the region server    * @param limit the maximum number of results to return    * @return 'has next' indication to client if bypassing default behavior, or    * null otherwise    * @exception IOException Exception    */
specifier|public
name|Boolean
name|preScannerNext
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|boolean
name|hasNext
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|hasNext
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preScannerNext
argument_list|(
name|env
argument_list|,
name|s
argument_list|,
name|results
argument_list|,
name|limit
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
condition|?
name|hasNext
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param s the scanner    * @param results the result set returned by the region server    * @param limit the maximum number of results to return    * @param hasMore    * @return 'has more' indication to give to client    * @exception IOException Exception    */
specifier|public
name|boolean
name|postScannerNext
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
name|boolean
name|hasMore
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
name|hasMore
operator|=
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postScannerNext
argument_list|(
name|env
argument_list|,
name|s
argument_list|,
name|results
argument_list|,
name|limit
argument_list|,
name|hasMore
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|hasMore
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param s the scanner    * @return true if default behavior should be bypassed, false otherwise    * @exception IOException Exception    */
specifier|public
name|boolean
name|preScannerClose
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|preScannerClose
argument_list|(
name|env
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param s the scanner    * @exception IOException Exception    */
specifier|public
name|void
name|postScannerClose
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Environment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|impl
operator|instanceof
name|RegionObserver
condition|)
block|{
operator|(
operator|(
name|RegionObserver
operator|)
name|env
operator|.
name|impl
operator|)
operator|.
name|postScannerClose
argument_list|(
name|env
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|coprocessorLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

