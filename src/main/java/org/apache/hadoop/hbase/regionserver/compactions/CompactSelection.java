begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_class
specifier|public
class|class
name|CompactSelection
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompactSelection
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the actual list - this is needed to handle methods like "sublist"
comment|// correctly
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
comment|// number of off peak compactions either in the compaction queue or
comment|// happening now
specifier|public
specifier|static
name|Integer
name|numOutstandingOffPeakCompactions
init|=
literal|0
decl_stmt|;
comment|// HBase conf object
name|Configuration
name|conf
decl_stmt|;
comment|// was this compaction promoted to an off-peak
name|boolean
name|isOffPeakCompaction
init|=
literal|false
decl_stmt|;
comment|// compactRatio: double on purpose!  Float.MAX< Long.MAX< Double.MAX
comment|// With float, java will downcast your long to float for comparisons (bad)
specifier|private
name|double
name|compactRatio
decl_stmt|;
comment|// compaction ratio off-peak
specifier|private
name|double
name|compactRatioOffPeak
decl_stmt|;
comment|// offpeak start time
specifier|private
name|int
name|offPeakStartHour
init|=
operator|-
literal|1
decl_stmt|;
comment|// off peak end time
specifier|private
name|int
name|offPeakEndHour
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|CompactSelection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
parameter_list|)
block|{
name|this
operator|.
name|filesToCompact
operator|=
name|filesToCompact
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|compactRatio
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.hstore.compaction.ratio"
argument_list|,
literal|1.2F
argument_list|)
expr_stmt|;
name|this
operator|.
name|compactRatioOffPeak
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.hstore.compaction.ratio.offpeak"
argument_list|,
literal|5.0F
argument_list|)
expr_stmt|;
comment|// Peak time is from [offPeakStartHour, offPeakEndHour). Valid numbers are [0, 23]
name|this
operator|.
name|offPeakStartHour
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.offpeak.start.hour"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|offPeakEndHour
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.offpeak.end.hour"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidHour
argument_list|(
name|this
operator|.
name|offPeakStartHour
argument_list|)
operator|||
operator|!
name|isValidHour
argument_list|(
name|this
operator|.
name|offPeakEndHour
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|offPeakStartHour
operator|==
operator|-
literal|1
operator|&&
name|this
operator|.
name|offPeakEndHour
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid start/end hour for peak hour : start = "
operator|+
name|this
operator|.
name|offPeakStartHour
operator|+
literal|" end = "
operator|+
name|this
operator|.
name|offPeakEndHour
operator|+
literal|". Valid numbers are [0-23]"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|offPeakStartHour
operator|=
name|this
operator|.
name|offPeakEndHour
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|/**    * If the current hour falls in the off peak times and there are no    * outstanding off peak compactions, the current compaction is    * promoted to an off peak compaction. Currently only one off peak    * compaction is present in the compaction queue.    *    * @param currentHour    * @return    */
specifier|public
name|double
name|getCompactSelectionRatio
parameter_list|()
block|{
name|double
name|r
init|=
name|this
operator|.
name|compactRatio
decl_stmt|;
synchronized|synchronized
init|(
name|numOutstandingOffPeakCompactions
init|)
block|{
if|if
condition|(
name|isOffPeakHour
argument_list|()
operator|&&
name|numOutstandingOffPeakCompactions
operator|==
literal|0
condition|)
block|{
name|r
operator|=
name|this
operator|.
name|compactRatioOffPeak
expr_stmt|;
name|numOutstandingOffPeakCompactions
operator|++
expr_stmt|;
name|isOffPeakCompaction
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isOffPeakCompaction
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running an off-peak compaction, selection ratio = "
operator|+
name|compactRatioOffPeak
operator|+
literal|", numOutstandingOffPeakCompactions is now "
operator|+
name|numOutstandingOffPeakCompactions
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**    * The current compaction finished, so reset the off peak compactions count    * if this was an off peak compaction.    */
specifier|public
name|void
name|finishRequest
parameter_list|()
block|{
if|if
condition|(
name|isOffPeakCompaction
condition|)
block|{
synchronized|synchronized
init|(
name|numOutstandingOffPeakCompactions
init|)
block|{
name|numOutstandingOffPeakCompactions
operator|--
expr_stmt|;
name|isOffPeakCompaction
operator|=
literal|false
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Compaction done, numOutstandingOffPeakCompactions is now "
operator|+
name|numOutstandingOffPeakCompactions
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|getFilesToCompact
parameter_list|()
block|{
return|return
name|filesToCompact
return|;
block|}
comment|/**    * Removes all files from the current compaction list, and resets off peak    * compactions is set.    */
specifier|public
name|void
name|emptyFileList
parameter_list|()
block|{
name|filesToCompact
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|isOffPeakCompaction
condition|)
block|{
synchronized|synchronized
init|(
name|numOutstandingOffPeakCompactions
init|)
block|{
comment|// reset the off peak count
name|numOutstandingOffPeakCompactions
operator|--
expr_stmt|;
name|isOffPeakCompaction
operator|=
literal|false
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Nothing to compact, numOutstandingOffPeakCompactions is now "
operator|+
name|numOutstandingOffPeakCompactions
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isOffPeakCompaction
parameter_list|()
block|{
return|return
name|this
operator|.
name|isOffPeakCompaction
return|;
block|}
specifier|private
name|boolean
name|isOffPeakHour
parameter_list|()
block|{
name|int
name|currentHour
init|=
operator|(
operator|new
name|GregorianCalendar
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
decl_stmt|;
comment|// If offpeak time checking is disabled just return false.
if|if
condition|(
name|this
operator|.
name|offPeakStartHour
operator|==
name|this
operator|.
name|offPeakEndHour
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|offPeakStartHour
operator|<
name|this
operator|.
name|offPeakEndHour
condition|)
block|{
return|return
operator|(
name|currentHour
operator|>=
name|this
operator|.
name|offPeakStartHour
operator|&&
name|currentHour
operator|<
name|this
operator|.
name|offPeakEndHour
operator|)
return|;
block|}
return|return
operator|(
name|currentHour
operator|>=
name|this
operator|.
name|offPeakStartHour
operator|||
name|currentHour
operator|<
name|this
operator|.
name|offPeakEndHour
operator|)
return|;
block|}
specifier|public
name|CompactSelection
name|subList
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|CompactSelection
name|getSubList
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|filesToCompact
operator|=
name|filesToCompact
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|clearSubList
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|filesToCompact
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isValidHour
parameter_list|(
name|int
name|hour
parameter_list|)
block|{
return|return
operator|(
name|hour
operator|>=
literal|0
operator|&&
name|hour
operator|<=
literal|23
operator|)
return|;
block|}
block|}
end_class

end_unit

