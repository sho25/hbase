begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|QueryMatcher
operator|.
name|MatchCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Keeps track of the columns for a scan if they are not explicitly specified  */
end_comment

begin_class
specifier|public
class|class
name|ScanWildcardColumnTracker
implements|implements
name|ColumnTracker
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ScanWildcardColumnTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|columnBuffer
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|columnOffset
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|columnLength
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|currentCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|maxVersions
decl_stmt|;
comment|/**    * Return maxVersions of every row.    * @param maxVersion    */
specifier|public
name|ScanWildcardColumnTracker
parameter_list|(
name|int
name|maxVersion
parameter_list|)
block|{
name|this
operator|.
name|maxVersions
operator|=
name|maxVersion
expr_stmt|;
block|}
comment|/**    * Can only return INCLUDE or SKIP, since returning "NEXT" or    * "DONE" would imply we have finished with this row, when    * this class can't figure that out.    *    * @param bytes    * @param offset    * @param length    * @return The match code instance.    */
annotation|@
name|Override
specifier|public
name|MatchCode
name|checkColumn
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|columnBuffer
operator|==
literal|null
condition|)
block|{
comment|// first iteration.
name|columnBuffer
operator|=
name|bytes
expr_stmt|;
name|columnOffset
operator|=
name|offset
expr_stmt|;
name|columnLength
operator|=
name|length
expr_stmt|;
name|currentCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|++
name|currentCount
operator|>
name|maxVersions
condition|)
return|return
name|MatchCode
operator|.
name|SKIP
return|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
name|int
name|cmp
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|columnBuffer
argument_list|,
name|columnOffset
argument_list|,
name|columnLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|++
name|currentCount
operator|>
name|maxVersions
condition|)
return|return
name|MatchCode
operator|.
name|SKIP
return|;
comment|// skip to next col
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// new col> old col
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
comment|// switched columns, lets do something.x
name|columnBuffer
operator|=
name|bytes
expr_stmt|;
name|columnOffset
operator|=
name|offset
expr_stmt|;
name|columnLength
operator|=
name|length
expr_stmt|;
name|currentCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|++
name|currentCount
operator|>
name|maxVersions
condition|)
return|return
name|MatchCode
operator|.
name|SKIP
return|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// new col< oldcol
comment|// if (cmp< 0) {
comment|// WARNING: This means that very likely an edit for some other family
comment|// was incorrectly stored into the store for this one. Continue, but
comment|// complain.
name|LOG
operator|.
name|error
argument_list|(
literal|"ScanWildcardColumnTracker.checkColumn ran "
operator|+
literal|"into a column actually smaller than the previous column: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// switched columns
name|columnBuffer
operator|=
name|bytes
expr_stmt|;
name|columnOffset
operator|=
name|offset
expr_stmt|;
name|columnLength
operator|=
name|length
expr_stmt|;
name|currentCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|++
name|currentCount
operator|>
name|maxVersions
condition|)
return|return
name|MatchCode
operator|.
name|SKIP
return|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|()
block|{
comment|// no-op, shouldn't even be called
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ScanWildcardColumnTracker.update should never be called!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|columnBuffer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Used by matcher and scan/get to get a hint of the next column    * to seek to after checkColumn() returns SKIP.  Returns the next interesting    * column we want, or NULL there is none (wildcard scanner).    *    * @return The column count.    */
specifier|public
name|ColumnCount
name|getColumnHint
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * We can never know a-priori if we are done, so always return false.    * @return false    */
annotation|@
name|Override
specifier|public
name|boolean
name|done
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

