begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DroppedSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|OperationStatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Exec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|ExecResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|IncompatibleFilterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WritableByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CancelableProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CompressionTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cliffc
operator|.
name|high_scale_lib
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ClassToInstanceMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MutableClassToInstanceMap
import|;
end_import

begin_comment
comment|/**  * HRegion stores data for a certain region of a table.  It stores all columns  * for each row. A given table consists of one or more HRegions.  *  *<p>We maintain multiple HStores for a single HRegion.  *  *<p>An Store is a set of rows with some column data; together,  * they make up all the data for the rows.  *  *<p>Each HRegion has a 'startKey' and 'endKey'.  *<p>The first is inclusive, the second is exclusive (except for  * the final region)  The endKey of region 0 is the same as  * startKey for region 1 (if it exists).  The startKey for the  * first region is null. The endKey for the final region is null.  *  *<p>Locking at the HRegion level serves only one purpose: preventing the  * region from being closed (and consequently split) while other operations  * are ongoing. Each row level operation obtains both a row lock and a region  * read lock for the duration of the operation. While a scanner is being  * constructed, getScanner holds a read lock. If the scanner is successfully  * constructed, it holds a read lock until it is closed. A close takes out a  * write lock and consequently will block for ongoing operations and will block  * new operations from starting while the close is in progress.  *  *<p>An HRegion is defined by its table and its key extent.  *  *<p>It consists of at least one Store.  The number of Stores should be  * configurable, so that data which is accessed together is stored in the same  * Store.  Right now, we approximate that by building a single Store for  * each column family.  (This config info will be communicated via the  * tabledesc.)  *  *<p>The HTableDescriptor contains metainfo about the HRegion's table.  * regionName is a unique identifier for this HRegion. (startKey, endKey]  * defines the keyspace for this HRegion.  */
end_comment

begin_class
specifier|public
class|class
name|HRegion
implements|implements
name|HeapSize
block|{
comment|// , Writable{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HRegion
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|MERGEDIR
init|=
literal|"merges"
decl_stmt|;
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/* Closing can take some time; use the closing flag if there is stuff we don't    * want to do while in closing state; e.g. like offer this region up to the    * master as a region to close if the carrying regionserver is overloaded.    * Once set, it is never cleared.    */
specifier|final
name|AtomicBoolean
name|closing
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Members
comment|//////////////////////////////////////////////////////////////////////////////
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|lockedRows
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
name|lockIds
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|lockIdGenerator
init|=
literal|1
decl_stmt|;
specifier|static
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Store
argument_list|>
name|stores
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Store
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
decl_stmt|;
comment|// Registered region protocol handlers
specifier|private
name|ClassToInstanceMap
argument_list|<
name|CoprocessorProtocol
argument_list|>
name|protocolHandlers
init|=
name|MutableClassToInstanceMap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|//These variable are just used for getting data out of the region, to test on
comment|//client side
comment|// private int numStores = 0;
comment|// private int [] storeSize = null;
comment|// private byte [] name = null;
specifier|final
name|AtomicLong
name|memstoreSize
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Counter
name|readRequestsCount
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
specifier|final
name|Counter
name|writeRequestsCount
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
comment|/**    * The directory for the table this region is part of.    * This directory contains the directory for this region.    */
specifier|final
name|Path
name|tableDir
decl_stmt|;
specifier|final
name|HLog
name|log
decl_stmt|;
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionInfo
decl_stmt|;
specifier|final
name|Path
name|regiondir
decl_stmt|;
name|KeyValue
operator|.
name|KVComparator
name|comparator
decl_stmt|;
specifier|private
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|lastCompactInfo
init|=
literal|null
decl_stmt|;
comment|/*    * Data structure of write state flags used coordinating flushes,    * compactions and closes.    */
specifier|static
class|class
name|WriteState
block|{
comment|// Set while a memstore flush is happening.
specifier|volatile
name|boolean
name|flushing
init|=
literal|false
decl_stmt|;
comment|// Set when a flush has been requested.
specifier|volatile
name|boolean
name|flushRequested
init|=
literal|false
decl_stmt|;
comment|// Set while a compaction is running.
specifier|volatile
name|boolean
name|compacting
init|=
literal|false
decl_stmt|;
comment|// Gets set in close. If set, cannot compact or flush again.
specifier|volatile
name|boolean
name|writesEnabled
init|=
literal|true
decl_stmt|;
comment|// Set if region is read-only
specifier|volatile
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
comment|/**      * Set flags that make this region read-only.      *      * @param onOff flip value for region r/o setting      */
specifier|synchronized
name|void
name|setReadOnly
parameter_list|(
specifier|final
name|boolean
name|onOff
parameter_list|)
block|{
name|this
operator|.
name|writesEnabled
operator|=
operator|!
name|onOff
expr_stmt|;
name|this
operator|.
name|readOnly
operator|=
name|onOff
expr_stmt|;
block|}
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|this
operator|.
name|readOnly
return|;
block|}
name|boolean
name|isFlushRequested
parameter_list|()
block|{
return|return
name|this
operator|.
name|flushRequested
return|;
block|}
block|}
specifier|final
name|WriteState
name|writestate
init|=
operator|new
name|WriteState
argument_list|()
decl_stmt|;
specifier|final
name|long
name|memstoreFlushSize
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|lastFlushTime
decl_stmt|;
specifier|final
name|RegionServerServices
name|rsServices
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|recentFlushes
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|blockingMemStoreSize
decl_stmt|;
specifier|final
name|long
name|threadWakeFrequency
decl_stmt|;
comment|// Used to guard closes
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|// Stop updates lock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|updatesLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|splitRequest
decl_stmt|;
specifier|private
name|byte
index|[]
name|splitPoint
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteConsistencyControl
name|rwcc
init|=
operator|new
name|ReadWriteConsistencyControl
argument_list|()
decl_stmt|;
comment|// Coprocessor host
specifier|private
name|RegionCoprocessorHost
name|coprocessorHost
decl_stmt|;
comment|/**    * Name of the region info file that resides just under the region directory.    */
specifier|public
specifier|final
specifier|static
name|String
name|REGIONINFO_FILE
init|=
literal|".regioninfo"
decl_stmt|;
comment|/**    * Should only be used for testing purposes    */
specifier|public
name|HRegion
parameter_list|()
block|{
name|this
operator|.
name|tableDir
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|blockingMemStoreSize
operator|=
literal|0L
expr_stmt|;
name|this
operator|.
name|conf
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rsServices
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|fs
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|memstoreFlushSize
operator|=
literal|0L
expr_stmt|;
name|this
operator|.
name|log
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|regiondir
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|regionInfo
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|threadWakeFrequency
operator|=
literal|0L
expr_stmt|;
name|this
operator|.
name|coprocessorHost
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * HRegion constructor.  his constructor should only be used for testing and    * extensions.  Instances of HRegion should be instantiated with the    * {@link HRegion#newHRegion(Path, HLog, FileSystem, Configuration, org.apache.hadoop.hbase.HRegionInfo, FlushRequester)} method.    *    *    * @param tableDir qualified path of directory where region should be located,    * usually the table directory.    * @param log The HLog is the outbound log for any updates to the HRegion    * (There's a single HLog for all the HRegions on a single HRegionServer.)    * The log file is a logfile from the previous execution that's    * custom-computed for this HRegion. The HRegionServer computes and sorts the    * appropriate log info for this HRegion. If there is a previous log file    * (implying that the HRegion has been written-to before), then read it from    * the supplied path.    * @param fs is the filesystem.    * @param conf is global configuration settings.    * @param regionInfo - HRegionInfo that describes the region    * is new), then read them from the supplied path.    * @param rsServices reference to {@link RegionServerServices} or null    *    * @see HRegion#newHRegion(Path, HLog, FileSystem, Configuration, org.apache.hadoop.hbase.HRegionInfo, FlushRequester)    */
specifier|public
name|HRegion
parameter_list|(
name|Path
name|tableDir
parameter_list|,
name|HLog
name|log
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|RegionServerServices
name|rsServices
parameter_list|)
block|{
name|this
operator|.
name|tableDir
operator|=
name|tableDir
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|regionInfo
operator|.
name|getComparator
argument_list|()
expr_stmt|;
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|rsServices
operator|=
name|rsServices
expr_stmt|;
name|this
operator|.
name|threadWakeFrequency
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|String
name|encodedNameStr
init|=
name|this
operator|.
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|this
operator|.
name|regiondir
operator|=
name|getRegionDir
argument_list|(
name|this
operator|.
name|tableDir
argument_list|,
name|encodedNameStr
argument_list|)
expr_stmt|;
name|long
name|flushSize
init|=
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getMemStoreFlushSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|flushSize
operator|==
name|HTableDescriptor
operator|.
name|DEFAULT_MEMSTORE_FLUSH_SIZE
condition|)
block|{
name|flushSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hregion.memstore.flush.size"
argument_list|,
name|HTableDescriptor
operator|.
name|DEFAULT_MEMSTORE_FLUSH_SIZE
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|memstoreFlushSize
operator|=
name|flushSize
expr_stmt|;
name|this
operator|.
name|blockingMemStoreSize
operator|=
name|this
operator|.
name|memstoreFlushSize
operator|*
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hregion.memstore.block.multiplier"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// don't initialize coprocessors if not running within a regionserver
comment|// TODO: revisit if coprocessors should load in other cases
if|if
condition|(
name|rsServices
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|coprocessorHost
operator|=
operator|new
name|RegionCoprocessorHost
argument_list|(
name|this
argument_list|,
name|rsServices
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// Write out region name as string and its encoded name.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Instantiated "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize this region.    * @return What the next sequence (edit) id should be.    * @throws IOException e    */
specifier|public
name|long
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|initialize
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Initialize this region.    *    * @param reporter Tickle every so often if initialize is taking a while.    * @return What the next sequence (edit) id should be.    * @throws IOException e    */
specifier|public
name|long
name|initialize
parameter_list|(
specifier|final
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|preOpen
argument_list|()
expr_stmt|;
block|}
comment|// A region can be reopened if failed a split; reset flags
name|this
operator|.
name|closing
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Write HRI to a file in case we need to recover .META.
name|checkRegioninfoOnFilesystem
argument_list|()
expr_stmt|;
comment|// Remove temporary data left over from old regions
name|cleanupTmpDir
argument_list|()
expr_stmt|;
comment|// Load in all the HStores.  Get maximum seqid.
name|long
name|maxSeqId
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|c
range|:
name|this
operator|.
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|Store
name|store
init|=
name|instantiateHStore
argument_list|(
name|this
operator|.
name|tableDir
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|this
operator|.
name|stores
operator|.
name|put
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|long
name|storeSeqId
init|=
name|store
operator|.
name|getMaxSequenceId
argument_list|()
decl_stmt|;
if|if
condition|(
name|storeSeqId
operator|>
name|maxSeqId
condition|)
block|{
name|maxSeqId
operator|=
name|storeSeqId
expr_stmt|;
block|}
block|}
comment|// Recover any edits if available.
name|maxSeqId
operator|=
name|replayRecoveredEditsIfAny
argument_list|(
name|this
operator|.
name|regiondir
argument_list|,
name|maxSeqId
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
comment|// Get rid of any splits or merges that were lost in-progress.  Clean out
comment|// these directories here on open.  We may be opening a region that was
comment|// being split but we crashed in the middle of it all.
name|SplitTransaction
operator|.
name|cleanupAnySplitDetritus
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|deleteDirectory
argument_list|(
name|this
operator|.
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|regiondir
argument_list|,
name|MERGEDIR
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|writestate
operator|.
name|setReadOnly
argument_list|(
name|this
operator|.
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|writestate
operator|.
name|compacting
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|lastFlushTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Use maximum of log sequenceid or that which was found in stores
comment|// (particularly if no recovered edits, seqid will be -1).
name|long
name|nextSeqid
init|=
name|maxSeqId
operator|+
literal|1
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Onlined "
operator|+
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|"; next sequenceid="
operator|+
name|nextSeqid
argument_list|)
expr_stmt|;
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|postOpen
argument_list|()
expr_stmt|;
block|}
return|return
name|nextSeqid
return|;
block|}
comment|/*    * Move any passed HStore files into place (if any).  Used to pick up split    * files and any merges from splits and merges dirs.    * @param initialFiles    * @throws IOException    */
specifier|static
name|void
name|moveInitialFilesIntoPlace
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|initialFiles
parameter_list|,
specifier|final
name|Path
name|regiondir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialFiles
operator|!=
literal|null
operator|&&
name|fs
operator|.
name|exists
argument_list|(
name|initialFiles
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|initialFiles
argument_list|,
name|regiondir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to rename "
operator|+
name|initialFiles
operator|+
literal|" to "
operator|+
name|regiondir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return True if this region has references.    */
specifier|public
name|boolean
name|hasReferences
parameter_list|()
block|{
for|for
control|(
name|Store
name|store
range|:
name|this
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|StoreFile
name|sf
range|:
name|store
operator|.
name|getStorefiles
argument_list|()
control|)
block|{
comment|// Found a reference, return.
if|if
condition|(
name|sf
operator|.
name|isReference
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|AtomicLong
name|getMemstoreSize
parameter_list|()
block|{
return|return
name|memstoreSize
return|;
block|}
comment|/**    * Increase the size of mem store in this region and the size of global mem     * store    * @param memStoreSize    * @return the size of memstore in this region    */
specifier|public
name|long
name|addAndGetGlobalMemstoreSize
parameter_list|(
name|long
name|memStoreSize
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rsServices
operator|!=
literal|null
condition|)
block|{
name|RegionServerAccounting
name|rsAccounting
init|=
name|this
operator|.
name|rsServices
operator|.
name|getRegionServerAccounting
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsAccounting
operator|!=
literal|null
condition|)
block|{
name|rsAccounting
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
name|memStoreSize
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|memstoreSize
operator|.
name|getAndAdd
argument_list|(
name|memStoreSize
argument_list|)
return|;
block|}
comment|/*    * Write out an info file under the region directory.  Useful recovering    * mangled regions.    * @throws IOException    */
specifier|private
name|void
name|checkRegioninfoOnFilesystem
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|regioninfoPath
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|regiondir
argument_list|,
name|REGIONINFO_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|regioninfoPath
argument_list|)
operator|&&
name|this
operator|.
name|fs
operator|.
name|getFileStatus
argument_list|(
name|regioninfoPath
argument_list|)
operator|.
name|getLen
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return;
block|}
comment|// Create in tmpdir and then move into place in case we crash after
comment|// create but before close.  If we don't successfully close the file,
comment|// subsequent region reopens will fail the below because create is
comment|// registered in NN.
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
name|getTmpDir
argument_list|()
argument_list|,
name|REGIONINFO_FILE
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|this
operator|.
name|fs
operator|.
name|create
argument_list|(
name|tmpPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|regionInfo
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|this
operator|.
name|regionInfo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|regioninfoPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename "
operator|+
name|tmpPath
operator|+
literal|" to "
operator|+
name|regioninfoPath
argument_list|)
throw|;
block|}
block|}
comment|/** @return a HRegionInfo object for this region */
specifier|public
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
return|;
block|}
comment|/** @return requestsCount for this region */
specifier|public
name|long
name|getRequestsCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|readRequestsCount
operator|.
name|get
argument_list|()
operator|+
name|this
operator|.
name|writeRequestsCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return readRequestsCount for this region */
specifier|public
name|long
name|getReadRequestsCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|readRequestsCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return writeRequestsCount for this region */
specifier|public
name|long
name|getWriteRequestsCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeRequestsCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return true if region is closed */
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * @return True if closing process has started.    */
specifier|public
name|boolean
name|isClosing
parameter_list|()
block|{
return|return
name|this
operator|.
name|closing
operator|.
name|get
argument_list|()
return|;
block|}
name|boolean
name|areWritesEnabled
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|writestate
init|)
block|{
return|return
name|this
operator|.
name|writestate
operator|.
name|writesEnabled
return|;
block|}
block|}
specifier|public
name|ReadWriteConsistencyControl
name|getRWCC
parameter_list|()
block|{
return|return
name|rwcc
return|;
block|}
comment|/**    * Close down this HRegion.  Flush the cache, shut down each HStore, don't    * service any more calls.    *    *<p>This method could take some time to execute, so don't call it from a    * time-sensitive thread.    *    * @return Vector of all the storage files that the HRegion's component    * HStores make use of.  It's a list of all HStoreFile objects. Returns empty    * vector if already closed and null if judged that it should not close.    *    * @throws IOException e    */
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|close
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|close
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|Object
name|closeLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**    * Close down this HRegion.  Flush the cache unless abort parameter is true,    * Shut down each HStore, don't service any more calls.    *    * This method could take some time to execute, so don't call it from a    * time-sensitive thread.    *    * @param abort true if server is aborting (only during testing)    * @return Vector of all the storage files that the HRegion's component    * HStores make use of.  It's a list of HStoreFile objects.  Can be null if    * we are not to close at this time or we are already closed.    *    * @throws IOException e    */
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|close
parameter_list|(
specifier|final
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Only allow one thread to close at a time. Serialize them so dual
comment|// threads attempting to close will run up against each other.
synchronized|synchronized
init|(
name|closeLock
init|)
block|{
return|return
name|doClose
argument_list|(
name|abort
argument_list|)
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|StoreFile
argument_list|>
name|doClose
parameter_list|(
specifier|final
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Region "
operator|+
name|this
operator|+
literal|" already closed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|coprocessorHost
operator|.
name|preClose
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
name|boolean
name|wasFlushing
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|writestate
init|)
block|{
comment|// Disable compacting and flushing by background threads for this
comment|// region.
name|writestate
operator|.
name|writesEnabled
operator|=
literal|false
expr_stmt|;
name|wasFlushing
operator|=
name|writestate
operator|.
name|flushing
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing "
operator|+
name|this
operator|+
literal|": disabling compactions& flushes"
argument_list|)
expr_stmt|;
while|while
condition|(
name|writestate
operator|.
name|compacting
operator|||
name|writestate
operator|.
name|flushing
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for"
operator|+
operator|(
name|writestate
operator|.
name|compacting
condition|?
literal|" compaction"
else|:
literal|""
operator|)
operator|+
operator|(
name|writestate
operator|.
name|flushing
condition|?
operator|(
name|writestate
operator|.
name|compacting
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
literal|" cache flush"
else|:
literal|""
operator|)
operator|+
literal|" to complete for region "
operator|+
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|writestate
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
comment|// If we were not just flushing, is it worth doing a preflush...one
comment|// that will clear out of the bulk of the memstore before we put up
comment|// the close flag?
if|if
condition|(
operator|!
name|abort
operator|&&
operator|!
name|wasFlushing
operator|&&
name|worthPreFlushing
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running close preflush of "
operator|+
name|this
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|internalFlushcache
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|closing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// SplitTransaction handles the null
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updates disabled for region "
operator|+
name|this
argument_list|)
expr_stmt|;
comment|// Don't flush the cache if we are aborting
if|if
condition|(
operator|!
name|abort
condition|)
block|{
name|internalFlushcache
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|StoreFile
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|store
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|coprocessorHost
operator|.
name|postClose
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed "
operator|+
name|this
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * @return True if its worth doing a flush before we put up the close flag.     */
specifier|private
name|boolean
name|worthPreFlushing
parameter_list|()
block|{
return|return
name|this
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
operator|>
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hregion.preclose.flush.size"
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|5
argument_list|)
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// HRegion accessors
comment|//////////////////////////////////////////////////////////////////////////////
comment|/** @return start key for region */
specifier|public
name|byte
index|[]
name|getStartKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
operator|.
name|getStartKey
argument_list|()
return|;
block|}
comment|/** @return end key for region */
specifier|public
name|byte
index|[]
name|getEndKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
operator|.
name|getEndKey
argument_list|()
return|;
block|}
comment|/** @return region id */
specifier|public
name|long
name|getRegionId
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
operator|.
name|getRegionId
argument_list|()
return|;
block|}
comment|/** @return region name */
specifier|public
name|byte
index|[]
name|getRegionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
operator|.
name|getRegionName
argument_list|()
return|;
block|}
comment|/** @return region name as string for logging */
specifier|public
name|String
name|getRegionNameAsString
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
return|;
block|}
comment|/** @return HTableDescriptor for this region */
specifier|public
name|HTableDescriptor
name|getTableDesc
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
return|;
block|}
comment|/** @return HLog in use for this region */
specifier|public
name|HLog
name|getLog
parameter_list|()
block|{
return|return
name|this
operator|.
name|log
return|;
block|}
comment|/** @return Configuration object */
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/** @return region directory Path */
specifier|public
name|Path
name|getRegionDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|regiondir
return|;
block|}
comment|/**    * Computes the Path of the HRegion    *    * @param tabledir qualified path for table    * @param name ENCODED region name    * @return Path of HRegion directory    */
specifier|public
specifier|static
name|Path
name|getRegionDir
parameter_list|(
specifier|final
name|Path
name|tabledir
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** @return FileSystem being used by this region */
specifier|public
name|FileSystem
name|getFilesystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|fs
return|;
block|}
comment|/** @return info about the last compaction<time, size> */
specifier|public
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|getLastCompactInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastCompactInfo
return|;
block|}
comment|/** @return the last time the region was flushed */
specifier|public
name|long
name|getLastFlushTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastFlushTime
return|;
block|}
comment|/** @return info about the last flushes<time, size> */
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getRecentFlushInfo
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|ret
init|=
name|this
operator|.
name|recentFlushes
decl_stmt|;
name|this
operator|.
name|recentFlushes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// HRegion maintenance.
comment|//
comment|// These methods are meant to be called periodically by the HRegionServer for
comment|// upkeep.
comment|//////////////////////////////////////////////////////////////////////////////
comment|/** @return returns size of largest HStore. */
specifier|public
name|long
name|getLargestHStoreSize
parameter_list|()
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Store
name|h
range|:
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|storeSize
init|=
name|h
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|storeSize
operator|>
name|size
condition|)
block|{
name|size
operator|=
name|storeSize
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
comment|/*    * Do preparation for pending compaction.    * @throws IOException    */
name|void
name|doRegionCompactionPrep
parameter_list|()
throws|throws
name|IOException
block|{   }
comment|/*    * Removes the temporary directory for this Store.    */
specifier|private
name|void
name|cleanupTmpDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FSUtils
operator|.
name|deleteDirectory
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|getTmpDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the temporary diretory for this region. This directory    * will have its contents removed when the region is reopened.    */
name|Path
name|getTmpDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getRegionDir
argument_list|()
argument_list|,
literal|".tmp"
argument_list|)
return|;
block|}
name|void
name|setForceMajorCompaction
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|)
block|{
for|for
control|(
name|Store
name|h
range|:
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|h
operator|.
name|setForceMajorCompaction
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Called by compaction thread and after region is opened to compact the    * HStores if necessary.    *    *<p>This operation could block for a long time, so don't call it from a    * time-sensitive thread.    *    * Note that no locking is necessary at this level because compaction only    * conflicts with a region split, and that cannot happen because the region    * server does them sequentially and not in parallel.    *    * @param majorCompaction True to force a major compaction regardless of thresholds    * @return split row if split is needed    * @throws IOException e    */
name|byte
index|[]
name|compactStores
parameter_list|(
specifier|final
name|boolean
name|majorCompaction
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|setForceMajorCompaction
argument_list|(
name|majorCompaction
argument_list|)
expr_stmt|;
return|return
name|compactStores
argument_list|()
return|;
block|}
comment|/*    * Called by compaction thread and after region is opened to compact the    * HStores if necessary.    *    *<p>This operation could block for a long time, so don't call it from a    * time-sensitive thread.    *    * Note that no locking is necessary at this level because compaction only    * conflicts with a region split, and that cannot happen because the region    * server does them sequentially and not in parallel.    *    * @return split row if split is needed    * @throws IOException e    */
specifier|public
name|byte
index|[]
name|compactStores
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closing
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping compaction on "
operator|+
name|this
operator|+
literal|" because closing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastCompactInfo
operator|=
literal|null
expr_stmt|;
name|byte
index|[]
name|splitRow
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping compaction on "
operator|+
name|this
operator|+
literal|" because closed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|this
operator|.
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|splitRow
return|;
block|}
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|preCompact
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
block|{
synchronized|synchronized
init|(
name|writestate
init|)
block|{
if|if
condition|(
operator|!
name|writestate
operator|.
name|compacting
operator|&&
name|writestate
operator|.
name|writesEnabled
condition|)
block|{
name|writestate
operator|.
name|compacting
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"NOT compacting region "
operator|+
name|this
operator|+
literal|": compacting="
operator|+
name|writestate
operator|.
name|compacting
operator|+
literal|", writesEnabled="
operator|+
name|writestate
operator|.
name|writesEnabled
argument_list|)
expr_stmt|;
return|return
name|splitRow
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting compaction on region "
operator|+
name|this
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|doRegionCompactionPrep
argument_list|()
expr_stmt|;
name|long
name|lastCompactSize
init|=
literal|0
decl_stmt|;
name|long
name|maxSize
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|completed
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|Store
name|store
range|:
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|Store
operator|.
name|StoreSize
name|ss
init|=
name|store
operator|.
name|compact
argument_list|()
decl_stmt|;
name|lastCompactSize
operator|+=
name|store
operator|.
name|getLastCompactSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|getSize
argument_list|()
operator|>
name|maxSize
condition|)
block|{
name|maxSize
operator|=
name|ss
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|splitRow
operator|=
name|ss
operator|.
name|getSplitRow
argument_list|()
expr_stmt|;
block|}
block|}
name|completed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|iioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"compaction interrupted by user: "
argument_list|,
name|iioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|(
operator|(
name|completed
operator|)
condition|?
literal|"completed"
else|:
literal|"aborted"
operator|)
operator|+
literal|" compaction on region "
operator|+
name|this
operator|+
literal|" after "
operator|+
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|now
argument_list|,
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|completed
condition|)
block|{
name|this
operator|.
name|lastCompactInfo
operator|=
operator|new
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|(
operator|(
name|now
operator|-
name|startTime
operator|)
operator|/
literal|1000
argument_list|,
name|lastCompactSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|writestate
init|)
block|{
name|writestate
operator|.
name|compacting
operator|=
literal|false
expr_stmt|;
name|writestate
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|postCompact
argument_list|(
name|splitRow
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|splitRow
operator|!=
literal|null
condition|)
block|{
assert|assert
name|splitPoint
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|splitRow
argument_list|,
name|splitPoint
argument_list|)
assert|;
name|this
operator|.
name|splitPoint
operator|=
literal|null
expr_stmt|;
comment|// clear the split point (if set)
block|}
return|return
name|splitRow
return|;
block|}
comment|/**    * Flush the cache.    *    * When this method is called the cache will be flushed unless:    *<ol>    *<li>the cache is empty</li>    *<li>the region is closed.</li>    *<li>a flush is already in progress</li>    *<li>writes are disabled</li>    *</ol>    *    *<p>This method may block for some time, so it should not be called from a    * time-sensitive thread.    *    * @return true if cache was flushed    *    * @throws IOException general io exceptions    * @throws DroppedSnapshotException Thrown when replay of hlog is required    * because a Snapshot was not properly persisted.    */
specifier|public
name|boolean
name|flushcache
parameter_list|()
throws|throws
name|IOException
block|{
comment|// fail-fast instead of waiting on the lock
if|if
condition|(
name|this
operator|.
name|closing
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping flush on "
operator|+
name|this
operator|+
literal|" because closing"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping flush on "
operator|+
name|this
operator|+
literal|" because closed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|preFlush
argument_list|()
expr_stmt|;
block|}
try|try
block|{
synchronized|synchronized
init|(
name|writestate
init|)
block|{
if|if
condition|(
operator|!
name|writestate
operator|.
name|flushing
operator|&&
name|writestate
operator|.
name|writesEnabled
condition|)
block|{
name|this
operator|.
name|writestate
operator|.
name|flushing
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NOT flushing memstore for region "
operator|+
name|this
operator|+
literal|", flushing="
operator|+
name|writestate
operator|.
name|flushing
operator|+
literal|", writesEnabled="
operator|+
name|writestate
operator|.
name|writesEnabled
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
name|boolean
name|result
init|=
name|internalFlushcache
argument_list|()
decl_stmt|;
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|postFlush
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|writestate
init|)
block|{
name|writestate
operator|.
name|flushing
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|writestate
operator|.
name|flushRequested
operator|=
literal|false
expr_stmt|;
name|writestate
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Flush the memstore.    *    * Flushing the memstore is a little tricky. We have a lot of updates in the    * memstore, all of which have also been written to the log. We need to    * write those updates in the memstore out to disk, while being able to    * process reads/writes as much as possible during the flush operation. Also,    * the log has to state clearly the point in time at which the memstore was    * flushed. (That way, during recovery, we know when we can rely on the    * on-disk flushed structures and when we have to recover the memstore from    * the log.)    *    *<p>So, we have a three-step process:    *    *<ul><li>A. Flush the memstore to the on-disk stores, noting the current    * sequence ID for the log.<li>    *    *<li>B. Write a FLUSHCACHE-COMPLETE message to the log, using the sequence    * ID that was current at the time of memstore-flush.</li>    *    *<li>C. Get rid of the memstore structures that are now redundant, as    * they've been flushed to the on-disk HStores.</li>    *</ul>    *<p>This method is protected, but can be accessed via several public    * routes.    *    *<p> This method may block for some time.    *    * @return true if the region needs compacting    *    * @throws IOException general io exceptions    * @throws DroppedSnapshotException Thrown when replay of hlog is required    * because a Snapshot was not properly persisted.    */
specifier|protected
name|boolean
name|internalFlushcache
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|internalFlushcache
argument_list|(
name|this
operator|.
name|log
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * @param wal Null if we're NOT to go via hlog/wal.    * @param myseqid The seqid to use if<code>wal</code> is null writing out    * flush file.    * @return true if the region needs compacting    * @throws IOException    * @see #internalFlushcache()    */
specifier|protected
name|boolean
name|internalFlushcache
parameter_list|(
specifier|final
name|HLog
name|wal
parameter_list|,
specifier|final
name|long
name|myseqid
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Clear flush flag.
comment|// Record latest flush time
name|this
operator|.
name|lastFlushTime
operator|=
name|startTime
expr_stmt|;
comment|// If nothing to flush, return and avoid logging start/stop flush.
if|if
condition|(
name|this
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started memstore flush for "
operator|+
name|this
operator|+
literal|", current region memstore size "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
argument_list|)
operator|+
operator|(
operator|(
name|wal
operator|!=
literal|null
operator|)
condition|?
literal|""
else|:
literal|"; wal is null, using passed sequenceid="
operator|+
name|myseqid
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Stop updates while we snapshot the memstore of all stores. We only have
comment|// to do this for a moment.  Its quick.  The subsequent sequence id that
comment|// goes into the HLog after we've flushed all these snapshots also goes
comment|// into the info file that sits beside the flushed files.
comment|// We also set the memstore size to zero here before we allow updates
comment|// again so its value will represent the size of the updates received
comment|// during the flush
name|long
name|sequenceId
init|=
operator|-
literal|1L
decl_stmt|;
name|long
name|completeSequenceId
init|=
operator|-
literal|1L
decl_stmt|;
comment|// We have to take a write lock during snapshot, or else a write could
comment|// end up in both snapshot and memstore (makes it difficult to do atomic
comment|// rows then)
name|this
operator|.
name|updatesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
specifier|final
name|long
name|currentMemStoreSize
init|=
name|this
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StoreFlusher
argument_list|>
name|storeFlushers
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFlusher
argument_list|>
argument_list|(
name|stores
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|sequenceId
operator|=
operator|(
name|wal
operator|==
literal|null
operator|)
condition|?
name|myseqid
else|:
name|wal
operator|.
name|startCacheFlush
argument_list|()
expr_stmt|;
name|completeSequenceId
operator|=
name|this
operator|.
name|getCompleteCacheFlushSequenceId
argument_list|(
name|sequenceId
argument_list|)
expr_stmt|;
for|for
control|(
name|Store
name|s
range|:
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|storeFlushers
operator|.
name|add
argument_list|(
name|s
operator|.
name|getStoreFlusher
argument_list|(
name|completeSequenceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// prepare flush (take a snapshot)
for|for
control|(
name|StoreFlusher
name|flusher
range|:
name|storeFlushers
control|)
block|{
name|flusher
operator|.
name|prepare
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|updatesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished snapshotting, commencing flushing stores"
argument_list|)
expr_stmt|;
comment|// Any failure from here on out will be catastrophic requiring server
comment|// restart so hlog content can be replayed and put back into the memstore.
comment|// Otherwise, the snapshot content while backed up in the hlog, it will not
comment|// be part of the current running servers state.
name|boolean
name|compactionRequested
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// A.  Flush memstore to all the HStores.
comment|// Keep running vector of all store files that includes both old and the
comment|// just-made new flush store file.
for|for
control|(
name|StoreFlusher
name|flusher
range|:
name|storeFlushers
control|)
block|{
name|flusher
operator|.
name|flushCache
argument_list|()
expr_stmt|;
block|}
comment|// Switch snapshot (in memstore) -> new hfile (thus causing
comment|// all the store scanners to reset/reseek).
for|for
control|(
name|StoreFlusher
name|flusher
range|:
name|storeFlushers
control|)
block|{
name|boolean
name|needsCompaction
init|=
name|flusher
operator|.
name|commit
argument_list|()
decl_stmt|;
if|if
condition|(
name|needsCompaction
condition|)
block|{
name|compactionRequested
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|storeFlushers
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Set down the memstore size by amount of flush.
name|this
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
operator|-
name|currentMemStoreSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// An exception here means that the snapshot was not persisted.
comment|// The hlog needs to be replayed so its content is restored to memstore.
comment|// Currently, only a server restart will do this.
comment|// We used to only catch IOEs but its possible that we'd get other
comment|// exceptions -- e.g. HBASE-659 was about an NPE -- so now we catch
comment|// all and sundry.
if|if
condition|(
name|wal
operator|!=
literal|null
condition|)
name|wal
operator|.
name|abortCacheFlush
argument_list|()
expr_stmt|;
name|DroppedSnapshotException
name|dse
init|=
operator|new
name|DroppedSnapshotException
argument_list|(
literal|"region: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|dse
operator|.
name|initCause
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
name|dse
throw|;
block|}
comment|// If we get to here, the HStores have been written. If we get an
comment|// error in completeCacheFlush it will release the lock it is holding
comment|// B.  Write a FLUSHCACHE-COMPLETE message to the log.
comment|//     This tells future readers that the HStores were emitted correctly,
comment|//     and that all updates to the log for this regionName that have lower
comment|//     log-sequence-ids can be safely ignored.
if|if
condition|(
name|wal
operator|!=
literal|null
condition|)
block|{
name|wal
operator|.
name|completeCacheFlush
argument_list|(
name|this
operator|.
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|completeSequenceId
argument_list|,
name|this
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// C. Finally notify anyone waiting on memstore to clear:
comment|// e.g. checkResources().
synchronized|synchronized
init|(
name|this
init|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
comment|// FindBugs NN_NAKED_NOTIFY
block|}
name|long
name|time
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished memstore flush of ~"
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|currentMemStoreSize
argument_list|)
operator|+
literal|" for region "
operator|+
name|this
operator|+
literal|" in "
operator|+
name|time
operator|+
literal|"ms, sequenceid="
operator|+
name|sequenceId
operator|+
literal|", compaction requested="
operator|+
name|compactionRequested
operator|+
operator|(
operator|(
name|wal
operator|==
literal|null
operator|)
condition|?
literal|"; wal=null"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|recentFlushes
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|(
name|time
operator|/
literal|1000
argument_list|,
name|currentMemStoreSize
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|compactionRequested
return|;
block|}
comment|/**    * Get the sequence number to be associated with this cache flush. Used by    * TransactionalRegion to not complete pending transactions.    *    *    * @param currentSequenceId    * @return sequence id to complete the cache flush with    */
specifier|protected
name|long
name|getCompleteCacheFlushSequenceId
parameter_list|(
name|long
name|currentSequenceId
parameter_list|)
block|{
return|return
name|currentSequenceId
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// get() methods for client use.
comment|//////////////////////////////////////////////////////////////////////////////
comment|/**    * Return all the data for the row that matches<i>row</i> exactly,    * or the one that immediately preceeds it, at or immediately before    *<i>ts</i>.    *    * @param row row key    * @return map of values    * @throws IOException    */
name|Result
name|getClosestRowBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getClosestRowBefore
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
return|;
block|}
comment|/**    * Return all the data for the row that matches<i>row</i> exactly,    * or the one that immediately preceeds it, at or immediately before    *<i>ts</i>.    *    * @param row row key    * @param family column family to find on    * @return map of values    * @throws IOException read exceptions    */
specifier|public
name|Result
name|getClosestRowBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|Result
name|result
init|=
operator|new
name|Result
argument_list|()
decl_stmt|;
if|if
condition|(
name|coprocessorHost
operator|.
name|preGetClosestRowBefore
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|result
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
comment|// look across all the HStores for this region and determine what the
comment|// closest key is across all column families, since the data may be sparse
name|checkRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|readRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|Store
name|store
init|=
name|getStore
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
decl_stmt|;
comment|// get the closest key. (HStore.getRowKeyAtOrBefore can return null)
name|KeyValue
name|key
init|=
name|store
operator|.
name|getRowKeyAtOrBefore
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|key
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|postGetClosestRowBefore
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return an iterator that scans over the HRegion, returning the indicated    * columns and rows specified by the {@link Scan}.    *<p>    * This Iterator must be closed by the caller.    *    * @param scan configured {@link Scan}    * @return InternalScanner    * @throws IOException read exceptions    */
specifier|public
name|InternalScanner
name|getScanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|scan
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|void
name|prepareScanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|scan
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
comment|// Adding all families to scanner
for|for
control|(
name|byte
index|[]
name|family
range|:
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|InternalScanner
name|getScanner
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|additionalScanners
parameter_list|)
throws|throws
name|IOException
block|{
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|readRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Verify families are all valid
name|prepareScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
if|if
condition|(
name|scan
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|family
range|:
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|checkFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|instantiateInternalScanner
argument_list|(
name|scan
argument_list|,
name|additionalScanners
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|InternalScanner
name|instantiateInternalScanner
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|additionalScanners
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RegionScanner
argument_list|(
name|scan
argument_list|,
name|additionalScanners
argument_list|)
return|;
block|}
comment|/*    * @param delete The passed delete is modified by this method. WARNING!    */
specifier|private
name|void
name|prepareDelete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check to see if this is a deleteRow insert
if|if
condition|(
name|delete
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|family
range|:
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
comment|// Don't eat the timestamp
name|delete
operator|.
name|deleteFamily
argument_list|(
name|family
argument_list|,
name|delete
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|byte
index|[]
name|family
range|:
name|delete
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|family
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchColumnFamilyException
argument_list|(
literal|"Empty family is invalid"
argument_list|)
throw|;
block|}
name|checkFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// set() methods for client use.
comment|//////////////////////////////////////////////////////////////////////////////
comment|/**    * @param delete delete object    * @param lockid existing lock id, or null for grab a lock    * @param writeToWAL append to the write ahead lock or not    * @throws IOException read exceptions    */
specifier|public
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|,
name|Integer
name|lockid
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReadOnly
argument_list|()
expr_stmt|;
name|checkResources
argument_list|()
expr_stmt|;
name|Integer
name|lid
init|=
literal|null
decl_stmt|;
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|row
init|=
name|delete
operator|.
name|getRow
argument_list|()
decl_stmt|;
comment|// If we did not pass an existing row lock, obtain a new one
name|lid
operator|=
name|getLock
argument_list|(
name|lockid
argument_list|,
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// All edits for the given row (across all column families) must happen atomically.
name|prepareDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|delete
operator|.
name|getFamilyMap
argument_list|()
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|lockid
operator|==
literal|null
condition|)
name|releaseRowLock
argument_list|(
name|lid
argument_list|)
expr_stmt|;
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param familyMap map of family to edits for the given family.    * @param writeToWAL    * @throws IOException    */
specifier|public
name|void
name|delete
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Run coprocessor pre hook outside of locks to avoid deadlock */
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|coprocessorHost
operator|.
name|preDelete
argument_list|(
name|familyMap
argument_list|,
name|writeToWAL
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|byteNow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|boolean
name|flush
init|=
literal|false
decl_stmt|;
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|e
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|kvCount
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
comment|//  Check if time is LATEST, change to time of most recent addition if so
comment|//  This is expensive.
if|if
condition|(
name|kv
operator|.
name|isLatestTimestamp
argument_list|()
operator|&&
name|kv
operator|.
name|isDeleteType
argument_list|()
condition|)
block|{
name|byte
index|[]
name|qual
init|=
name|kv
operator|.
name|getQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|qual
operator|==
literal|null
condition|)
name|qual
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
name|Integer
name|count
init|=
name|kvCount
operator|.
name|get
argument_list|(
name|qual
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|kvCount
operator|.
name|put
argument_list|(
name|qual
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|kvCount
operator|.
name|put
argument_list|(
name|qual
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|kvCount
operator|.
name|get
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
name|get
argument_list|(
name|get
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|<
name|count
condition|)
block|{
comment|// Nothing to delete
name|kv
operator|.
name|updateLatestStamp
argument_list|(
name|byteNow
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
name|count
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected size: "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|KeyValue
name|getkv
init|=
name|result
operator|.
name|get
argument_list|(
name|count
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Bytes
operator|.
name|putBytes
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getTimestampOffset
argument_list|()
argument_list|,
name|getkv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|getkv
operator|.
name|getTimestampOffset
argument_list|()
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|kv
operator|.
name|updateLatestStamp
argument_list|(
name|byteNow
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|writeToWAL
condition|)
block|{
comment|// write/sync to WAL should happen before we touch memstore.
comment|//
comment|// If order is reversed, i.e. we write to memstore first, and
comment|// for some reason fail to write/sync to commit log, the memstore
comment|// will contain uncommitted transactions.
comment|//
comment|// bunch up all edits across all column families into a
comment|// single WALEdit.
name|WALEdit
name|walEdit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|addFamilyMapToWALEdit
argument_list|(
name|familyMap
argument_list|,
name|walEdit
argument_list|)
expr_stmt|;
name|this
operator|.
name|log
operator|.
name|append
argument_list|(
name|regionInfo
argument_list|,
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walEdit
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
comment|// Now make changes to the memstore.
name|long
name|addedSize
init|=
name|applyFamilyMapToMemstore
argument_list|(
name|familyMap
argument_list|)
decl_stmt|;
name|flush
operator|=
name|isFlushSize
argument_list|(
name|this
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
name|addedSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|postDelete
argument_list|(
name|familyMap
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flush
condition|)
block|{
comment|// Request a cache flush.  Do it outside update lock.
name|requestFlush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param put    * @throws IOException    */
specifier|public
name|void
name|put
parameter_list|(
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|put
argument_list|(
name|put
argument_list|,
literal|null
argument_list|,
name|put
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param put    * @param writeToWAL    * @throws IOException    */
specifier|public
name|void
name|put
parameter_list|(
name|Put
name|put
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|put
argument_list|(
name|put
argument_list|,
literal|null
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param put    * @param lockid    * @throws IOException    */
specifier|public
name|void
name|put
parameter_list|(
name|Put
name|put
parameter_list|,
name|Integer
name|lockid
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|put
argument_list|(
name|put
argument_list|,
name|lockid
argument_list|,
name|put
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param put    * @param lockid    * @param writeToWAL    * @throws IOException    */
specifier|public
name|void
name|put
parameter_list|(
name|Put
name|put
parameter_list|,
name|Integer
name|lockid
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReadOnly
argument_list|()
expr_stmt|;
comment|// Do a rough check that we have resources to accept a write.  The check is
comment|// 'rough' in that between the resource check and the call to obtain a
comment|// read lock, resources may run out.  For now, the thought is that this
comment|// will be extremely rare; we'll deal with it when it happens.
name|checkResources
argument_list|()
expr_stmt|;
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
comment|// We obtain a per-row lock, so other clients will block while one client
comment|// performs an update. The read lock is released by the client calling
comment|// #commit or #abort or if the HRegionServer lease on the lock expires.
comment|// See HRegionServer#RegionListener for how the expire on HRegionServer
comment|// invokes a HRegion#abort.
name|byte
index|[]
name|row
init|=
name|put
operator|.
name|getRow
argument_list|()
decl_stmt|;
comment|// If we did not pass an existing row lock, obtain a new one
name|Integer
name|lid
init|=
name|getLock
argument_list|(
name|lockid
argument_list|,
name|row
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
comment|// All edits for the given row (across all column families) must happen atomically.
comment|// Coprocessor interception happens in put(Map,boolean)
name|put
argument_list|(
name|put
operator|.
name|getFamilyMap
argument_list|()
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|lockid
operator|==
literal|null
condition|)
name|releaseRowLock
argument_list|(
name|lid
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Struct-like class that tracks the progress of a batch operation,    * accumulating status codes and tracking the index at which processing    * is proceeding.    */
specifier|private
specifier|static
class|class
name|BatchOperationInProgress
parameter_list|<
name|T
parameter_list|>
block|{
name|T
index|[]
name|operations
decl_stmt|;
name|OperationStatusCode
index|[]
name|retCodes
decl_stmt|;
name|int
name|nextIndexToProcess
init|=
literal|0
decl_stmt|;
specifier|public
name|BatchOperationInProgress
parameter_list|(
name|T
index|[]
name|operations
parameter_list|)
block|{
name|this
operator|.
name|operations
operator|=
name|operations
expr_stmt|;
name|retCodes
operator|=
operator|new
name|OperationStatusCode
index|[
name|operations
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|retCodes
argument_list|,
name|OperationStatusCode
operator|.
name|NOT_RUN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|nextIndexToProcess
operator|==
name|operations
operator|.
name|length
return|;
block|}
block|}
comment|/**    * Perform a batch put with no pre-specified locks    * @see HRegion#put(Pair[])    */
specifier|public
name|OperationStatusCode
index|[]
name|put
parameter_list|(
name|Put
index|[]
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
name|putsAndLocks
index|[]
init|=
operator|new
name|Pair
index|[
name|puts
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|puts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|putsAndLocks
index|[
name|i
index|]
operator|=
operator|new
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|puts
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|put
argument_list|(
name|putsAndLocks
argument_list|)
return|;
block|}
comment|/**    * Perform a batch of puts.    * @param putsAndLocks the list of puts paired with their requested lock IDs.    * @throws IOException    */
specifier|public
name|OperationStatusCode
index|[]
name|put
parameter_list|(
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
index|[]
name|putsAndLocks
parameter_list|)
throws|throws
name|IOException
block|{
name|BatchOperationInProgress
argument_list|<
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|batchOp
init|=
operator|new
name|BatchOperationInProgress
argument_list|<
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|putsAndLocks
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|batchOp
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|checkReadOnly
argument_list|()
expr_stmt|;
name|checkResources
argument_list|()
expr_stmt|;
name|long
name|newSize
decl_stmt|;
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|addedSize
init|=
name|doMiniBatchPut
argument_list|(
name|batchOp
argument_list|)
decl_stmt|;
name|newSize
operator|=
name|this
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
name|addedSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isFlushSize
argument_list|(
name|newSize
argument_list|)
condition|)
block|{
name|requestFlush
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|batchOp
operator|.
name|retCodes
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|long
name|doMiniBatchPut
parameter_list|(
name|BatchOperationInProgress
argument_list|<
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|batchOp
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Run coprocessor pre hook outside of locks to avoid deadlock */
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|batchOp
operator|.
name|operations
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchOp
operator|.
name|operations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
name|nextPair
init|=
name|batchOp
operator|.
name|operations
index|[
name|i
index|]
decl_stmt|;
name|Put
name|put
init|=
name|nextPair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
init|=
name|put
operator|.
name|getFamilyMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|coprocessorHost
operator|.
name|prePut
argument_list|(
name|familyMap
argument_list|,
name|put
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
condition|)
block|{
comment|// pre hook says skip this Put
comment|// adjust nextIndexToProcess if we skipped before it
if|if
condition|(
name|batchOp
operator|.
name|nextIndexToProcess
operator|>
name|i
condition|)
block|{
name|batchOp
operator|.
name|nextIndexToProcess
operator|--
expr_stmt|;
block|}
continue|continue;
block|}
name|ops
operator|.
name|add
argument_list|(
name|nextPair
argument_list|)
expr_stmt|;
block|}
name|batchOp
operator|.
name|operations
operator|=
name|ops
operator|.
name|toArray
argument_list|(
operator|new
name|Pair
index|[
name|ops
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|byteNow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|boolean
name|locked
init|=
literal|false
decl_stmt|;
comment|/** Keep track of the locks we hold so we can release them in finally clause */
name|List
argument_list|<
name|Integer
argument_list|>
name|acquiredLocks
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|batchOp
operator|.
name|operations
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// reference family maps directly so coprocessors can mutate them if desired
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
index|[]
name|familyMaps
init|=
operator|new
name|Map
index|[
name|batchOp
operator|.
name|operations
operator|.
name|length
index|]
decl_stmt|;
comment|// We try to set up a batch in the range [firstIndex,lastIndexExclusive)
name|int
name|firstIndex
init|=
name|batchOp
operator|.
name|nextIndexToProcess
decl_stmt|;
name|int
name|lastIndexExclusive
init|=
name|firstIndex
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// ------------------------------------
comment|// STEP 1. Try to acquire as many locks as we can, and ensure
comment|// we acquire at least one.
comment|// ----------------------------------
name|int
name|numReadyToWrite
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|lastIndexExclusive
operator|<
name|batchOp
operator|.
name|operations
operator|.
name|length
condition|)
block|{
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
name|nextPair
init|=
name|batchOp
operator|.
name|operations
index|[
name|lastIndexExclusive
index|]
decl_stmt|;
name|Put
name|put
init|=
name|nextPair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Integer
name|providedLockId
init|=
name|nextPair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
init|=
name|put
operator|.
name|getFamilyMap
argument_list|()
decl_stmt|;
comment|// store the family map reference to allow for mutations
name|familyMaps
index|[
name|lastIndexExclusive
index|]
operator|=
name|familyMap
expr_stmt|;
comment|// Check the families in the put. If bad, skip this one.
try|try
block|{
name|checkFamilies
argument_list|(
name|familyMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchColumnFamilyException
name|nscf
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No such column family in batch put"
argument_list|,
name|nscf
argument_list|)
expr_stmt|;
name|batchOp
operator|.
name|retCodes
index|[
name|lastIndexExclusive
index|]
operator|=
name|OperationStatusCode
operator|.
name|BAD_FAMILY
expr_stmt|;
name|lastIndexExclusive
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// If we haven't got any rows in our batch, we should block to
comment|// get the next one.
name|boolean
name|shouldBlock
init|=
name|numReadyToWrite
operator|==
literal|0
decl_stmt|;
name|Integer
name|acquiredLockId
init|=
name|getLock
argument_list|(
name|providedLockId
argument_list|,
name|put
operator|.
name|getRow
argument_list|()
argument_list|,
name|shouldBlock
argument_list|)
decl_stmt|;
if|if
condition|(
name|acquiredLockId
operator|==
literal|null
condition|)
block|{
comment|// We failed to grab another lock
assert|assert
operator|!
name|shouldBlock
operator|:
literal|"Should never fail to get lock when blocking"
assert|;
break|break;
comment|// stop acquiring more rows for this batch
block|}
if|if
condition|(
name|providedLockId
operator|==
literal|null
condition|)
block|{
name|acquiredLocks
operator|.
name|add
argument_list|(
name|acquiredLockId
argument_list|)
expr_stmt|;
block|}
name|lastIndexExclusive
operator|++
expr_stmt|;
name|numReadyToWrite
operator|++
expr_stmt|;
block|}
comment|// Nothing to put -- an exception in the above such as NoSuchColumnFamily?
if|if
condition|(
name|numReadyToWrite
operator|<=
literal|0
condition|)
return|return
literal|0L
return|;
comment|// We've now grabbed as many puts off the list as we can
comment|// ------------------------------------
comment|// STEP 2. Update any LATEST_TIMESTAMP timestamps
comment|// ----------------------------------
for|for
control|(
name|int
name|i
init|=
name|firstIndex
init|;
name|i
operator|<
name|lastIndexExclusive
condition|;
name|i
operator|++
control|)
block|{
comment|// skip invalid
if|if
condition|(
name|batchOp
operator|.
name|retCodes
index|[
name|i
index|]
operator|!=
name|OperationStatusCode
operator|.
name|NOT_RUN
condition|)
continue|continue;
name|updateKVTimestamps
argument_list|(
name|familyMaps
index|[
name|i
index|]
operator|.
name|values
argument_list|()
argument_list|,
name|byteNow
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|locked
operator|=
literal|true
expr_stmt|;
comment|// ------------------------------------
comment|// STEP 3. Write to WAL
comment|// ----------------------------------
name|WALEdit
name|walEdit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstIndex
init|;
name|i
operator|<
name|lastIndexExclusive
condition|;
name|i
operator|++
control|)
block|{
comment|// Skip puts that were determined to be invalid during preprocessing
if|if
condition|(
name|batchOp
operator|.
name|retCodes
index|[
name|i
index|]
operator|!=
name|OperationStatusCode
operator|.
name|NOT_RUN
condition|)
continue|continue;
name|Put
name|p
init|=
name|batchOp
operator|.
name|operations
index|[
name|i
index|]
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|getWriteToWAL
argument_list|()
condition|)
continue|continue;
name|addFamilyMapToWALEdit
argument_list|(
name|familyMaps
index|[
name|i
index|]
argument_list|,
name|walEdit
argument_list|)
expr_stmt|;
block|}
comment|// Append the edit to WAL
name|this
operator|.
name|log
operator|.
name|append
argument_list|(
name|regionInfo
argument_list|,
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walEdit
argument_list|,
name|now
argument_list|)
expr_stmt|;
comment|// ------------------------------------
comment|// STEP 4. Write back to memstore
comment|// ----------------------------------
name|long
name|addedSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstIndex
init|;
name|i
operator|<
name|lastIndexExclusive
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batchOp
operator|.
name|retCodes
index|[
name|i
index|]
operator|!=
name|OperationStatusCode
operator|.
name|NOT_RUN
condition|)
continue|continue;
name|addedSize
operator|+=
name|applyFamilyMapToMemstore
argument_list|(
name|familyMaps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|batchOp
operator|.
name|retCodes
index|[
name|i
index|]
operator|=
name|OperationStatusCode
operator|.
name|SUCCESS
expr_stmt|;
block|}
comment|// ------------------------------------
comment|// STEP 5. Run coprocessor post hooks
comment|// ------------------------------------
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|firstIndex
init|;
name|i
operator|<
name|lastIndexExclusive
condition|;
name|i
operator|++
control|)
block|{
comment|// only for successful puts
if|if
condition|(
name|batchOp
operator|.
name|retCodes
index|[
name|i
index|]
operator|!=
name|OperationStatusCode
operator|.
name|SUCCESS
condition|)
continue|continue;
name|Put
name|p
init|=
name|batchOp
operator|.
name|operations
index|[
name|i
index|]
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|coprocessorHost
operator|.
name|postPut
argument_list|(
name|familyMaps
index|[
name|i
index|]
argument_list|,
name|p
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|addedSize
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|locked
condition|)
name|this
operator|.
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|toRelease
range|:
name|acquiredLocks
control|)
block|{
name|releaseRowLock
argument_list|(
name|toRelease
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|firstIndex
init|;
name|i
operator|<
name|lastIndexExclusive
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batchOp
operator|.
name|retCodes
index|[
name|i
index|]
operator|==
name|OperationStatusCode
operator|.
name|NOT_RUN
condition|)
block|{
name|batchOp
operator|.
name|retCodes
index|[
name|i
index|]
operator|=
name|OperationStatusCode
operator|.
name|FAILURE
expr_stmt|;
block|}
block|}
block|}
name|batchOp
operator|.
name|nextIndexToProcess
operator|=
name|lastIndexExclusive
expr_stmt|;
block|}
block|}
comment|//TODO, Think that gets/puts and deletes should be refactored a bit so that
comment|//the getting of the lock happens before, so that you would just pass it into
comment|//the methods. So in the case of checkAndMutate you could just do lockRow,
comment|//get, put, unlockRow or something
comment|/**    *    * @param row    * @param family    * @param qualifier    * @param compareOp    * @param comparator    * @param lockId    * @param writeToWAL    * @throws IOException    * @return true if the new put was execute, false otherwise    */
specifier|public
name|boolean
name|checkAndMutate
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOp
name|compareOp
parameter_list|,
name|WritableByteArrayComparable
name|comparator
parameter_list|,
name|Writable
name|w
parameter_list|,
name|Integer
name|lockId
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReadOnly
argument_list|()
expr_stmt|;
comment|//TODO, add check for value length or maybe even better move this to the
comment|//client if this becomes a global setting
name|checkResources
argument_list|()
expr_stmt|;
name|boolean
name|isPut
init|=
name|w
operator|instanceof
name|Put
decl_stmt|;
if|if
condition|(
operator|!
name|isPut
operator|&&
operator|!
operator|(
name|w
operator|instanceof
name|Delete
operator|)
condition|)
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Action must be Put or Delete"
argument_list|)
throw|;
name|Row
name|r
init|=
operator|(
name|Row
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|row
argument_list|,
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Action's getRow must match the passed row"
argument_list|)
throw|;
block|}
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|RowLock
name|lock
init|=
name|isPut
condition|?
operator|(
operator|(
name|Put
operator|)
name|w
operator|)
operator|.
name|getRowLock
argument_list|()
else|:
operator|(
operator|(
name|Delete
operator|)
name|w
operator|)
operator|.
name|getRowLock
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|,
name|lock
argument_list|)
decl_stmt|;
name|checkFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
comment|// Lock row
name|Integer
name|lid
init|=
name|getLock
argument_list|(
name|lockId
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|=
name|get
argument_list|(
name|get
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|matches
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
operator|(
name|comparator
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|comparator
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|matches
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|int
name|compareResult
init|=
name|comparator
operator|.
name|compareTo
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|compareOp
condition|)
block|{
case|case
name|LESS
case|:
name|matches
operator|=
name|compareResult
operator|<=
literal|0
expr_stmt|;
break|break;
case|case
name|LESS_OR_EQUAL
case|:
name|matches
operator|=
name|compareResult
operator|<
literal|0
expr_stmt|;
break|break;
case|case
name|EQUAL
case|:
name|matches
operator|=
name|compareResult
operator|==
literal|0
expr_stmt|;
break|break;
case|case
name|NOT_EQUAL
case|:
name|matches
operator|=
name|compareResult
operator|!=
literal|0
expr_stmt|;
break|break;
case|case
name|GREATER_OR_EQUAL
case|:
name|matches
operator|=
name|compareResult
operator|>
literal|0
expr_stmt|;
break|break;
case|case
name|GREATER
case|:
name|matches
operator|=
name|compareResult
operator|>=
literal|0
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown Compare op "
operator|+
name|compareOp
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|//If matches put the new put or delete the new delete
if|if
condition|(
name|matches
condition|)
block|{
comment|// All edits for the given row (across all column families) must happen atomically.
if|if
condition|(
name|isPut
condition|)
block|{
name|put
argument_list|(
operator|(
operator|(
name|Put
operator|)
name|w
operator|)
operator|.
name|getFamilyMap
argument_list|()
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Delete
name|d
init|=
operator|(
name|Delete
operator|)
name|w
decl_stmt|;
name|prepareDelete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|d
operator|.
name|getFamilyMap
argument_list|()
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|lockId
operator|==
literal|null
condition|)
name|releaseRowLock
argument_list|(
name|lid
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Replaces any KV timestamps set to {@link HConstants#LATEST_TIMESTAMP}    * with the provided current timestamp.    */
specifier|private
name|void
name|updateKVTimestamps
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|keyLists
parameter_list|,
specifier|final
name|byte
index|[]
name|now
parameter_list|)
block|{
for|for
control|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keys
range|:
name|keyLists
control|)
block|{
if|if
condition|(
name|keys
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|KeyValue
name|key
range|:
name|keys
control|)
block|{
name|key
operator|.
name|updateLatestStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Check if resources to support an update.    *    * Here we synchronize on HRegion, a broad scoped lock.  Its appropriate    * given we're figuring in here whether this region is able to take on    * writes.  This is only method with a synchronize (at time of writing),    * this and the synchronize on 'this' inside in internalFlushCache to send    * the notify.    */
specifier|private
name|void
name|checkResources
parameter_list|()
block|{
comment|// If catalog region, do not impose resource constraints or block updates.
if|if
condition|(
name|this
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
condition|)
return|return;
name|boolean
name|blocked
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|this
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
operator|>
name|this
operator|.
name|blockingMemStoreSize
condition|)
block|{
name|requestFlush
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|blocked
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Blocking updates for '"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' on region "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getRegionName
argument_list|()
argument_list|)
operator|+
literal|": memstore size "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|" is>= than blocking "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|blockingMemStoreSize
argument_list|)
operator|+
literal|" size"
argument_list|)
expr_stmt|;
block|}
name|blocked
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|(
name|threadWakeFrequency
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue;
block|}
block|}
block|}
if|if
condition|(
name|blocked
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unblocking updates for region "
operator|+
name|this
operator|+
literal|" '"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @throws IOException Throws exception if region is in read-only mode.    */
specifier|protected
name|void
name|checkReadOnly
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|writestate
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"region is read only"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add updates first to the hlog and then add values to memstore.    * Warning: Assumption is caller has lock on passed in row.    * @param family    * @param edits Cell updates by column    * @praram now    * @throws IOException    */
specifier|private
name|void
name|put
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|edits
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
decl_stmt|;
name|familyMap
operator|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|familyMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|edits
argument_list|)
expr_stmt|;
name|this
operator|.
name|put
argument_list|(
name|familyMap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add updates first to the hlog (if writeToWal) and then add values to memstore.    * Warning: Assumption is caller has lock on passed in row.    * @param familyMap map of family to edits for the given family.    * @param writeToWAL if true, then we should write to the log    * @throws IOException    */
specifier|private
name|void
name|put
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* run pre put hook outside of lock to avoid deadlock */
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|coprocessorHost
operator|.
name|prePut
argument_list|(
name|familyMap
argument_list|,
name|writeToWAL
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|byteNow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|boolean
name|flush
init|=
literal|false
decl_stmt|;
name|this
operator|.
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkFamilies
argument_list|(
name|familyMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|updateKVTimestamps
argument_list|(
name|familyMap
operator|.
name|values
argument_list|()
argument_list|,
name|byteNow
argument_list|)
expr_stmt|;
comment|// write/sync to WAL should happen before we touch memstore.
comment|//
comment|// If order is reversed, i.e. we write to memstore first, and
comment|// for some reason fail to write/sync to commit log, the memstore
comment|// will contain uncommitted transactions.
if|if
condition|(
name|writeToWAL
condition|)
block|{
name|WALEdit
name|walEdit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|addFamilyMapToWALEdit
argument_list|(
name|familyMap
argument_list|,
name|walEdit
argument_list|)
expr_stmt|;
name|this
operator|.
name|log
operator|.
name|append
argument_list|(
name|regionInfo
argument_list|,
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walEdit
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
name|long
name|addedSize
init|=
name|applyFamilyMapToMemstore
argument_list|(
name|familyMap
argument_list|)
decl_stmt|;
name|flush
operator|=
name|isFlushSize
argument_list|(
name|this
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
name|addedSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|postPut
argument_list|(
name|familyMap
argument_list|,
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flush
condition|)
block|{
comment|// Request a cache flush.  Do it outside update lock.
name|requestFlush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Atomically apply the given map of family->edits to the memstore.    * This handles the consistency control on its own, but the caller    * should already have locked updatesLock.readLock(). This also does    *<b>not</b> check the families for validity.    *    * @return the additional memory usage of the memstore caused by the    * new entries.    */
specifier|private
name|long
name|applyFamilyMapToMemstore
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
parameter_list|)
block|{
name|ReadWriteConsistencyControl
operator|.
name|WriteEntry
name|w
init|=
literal|null
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
try|try
block|{
name|w
operator|=
name|rwcc
operator|.
name|beginMemstoreInsert
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|e
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|edits
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
name|getStore
argument_list|(
name|family
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|edits
control|)
block|{
name|kv
operator|.
name|setMemstoreTS
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|+=
name|store
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|rwcc
operator|.
name|completeMemstoreInsert
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**    * Check the collection of families for validity.    * @throws NoSuchColumnFamilyException if a family does not exist.    */
specifier|private
name|void
name|checkFamilies
parameter_list|(
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|families
parameter_list|)
throws|throws
name|NoSuchColumnFamilyException
block|{
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|checkFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Append the given map of family->edits to a WALEdit data structure.    * This does not write to the HLog itself.    * @param familyMap map of family->edits    * @param walEdit the destination entry to append into    */
specifier|private
name|void
name|addFamilyMapToWALEdit
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|WALEdit
name|walEdit
parameter_list|)
block|{
for|for
control|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|edits
range|:
name|familyMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|edits
control|)
block|{
name|walEdit
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|requestFlush
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|rsServices
operator|==
literal|null
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|writestate
init|)
block|{
if|if
condition|(
name|this
operator|.
name|writestate
operator|.
name|isFlushRequested
argument_list|()
condition|)
block|{
return|return;
block|}
name|writestate
operator|.
name|flushRequested
operator|=
literal|true
expr_stmt|;
block|}
comment|// Make request outside of synchronize block; HBASE-818.
name|this
operator|.
name|rsServices
operator|.
name|getFlushRequester
argument_list|()
operator|.
name|requestFlush
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Flush requested on "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * @param size    * @return True if size is over the flush threshold    */
specifier|private
name|boolean
name|isFlushSize
parameter_list|(
specifier|final
name|long
name|size
parameter_list|)
block|{
return|return
name|size
operator|>
name|this
operator|.
name|memstoreFlushSize
return|;
block|}
comment|/**    * Read the edits log put under this region by wal log splitting process.  Put    * the recovered edits back up into this region.    *    *<p>We can ignore any log message that has a sequence ID that's equal to or    * lower than minSeqId.  (Because we know such log messages are already    * reflected in the HFiles.)    *    *<p>While this is running we are putting pressure on memory yet we are    * outside of our usual accounting because we are not yet an onlined region    * (this stuff is being run as part of Region initialization).  This means    * that if we're up against global memory limits, we'll not be flagged to flush    * because we are not online. We can't be flushed by usual mechanisms anyways;    * we're not yet online so our relative sequenceids are not yet aligned with    * HLog sequenceids -- not till we come up online, post processing of split    * edits.    *    *<p>But to help relieve memory pressure, at least manage our own heap size    * flushing if are in excess of per-region limits.  Flushing, though, we have    * to be careful and avoid using the regionserver/hlog sequenceid.  Its running    * on a different line to whats going on in here in this region context so if we    * crashed replaying these edits, but in the midst had a flush that used the    * regionserver log with a sequenceid in excess of whats going on in here    * in this region and with its split editlogs, then we could miss edits the    * next time we go to recover. So, we have to flush inline, using seqids that    * make sense in a this single region context only -- until we online.    *    * @param regiondir    * @param minSeqId Any edit found in split editlogs needs to be in excess of    * this minSeqId to be applied, else its skipped.    * @param reporter    * @return the sequence id of the last edit added to this region out of the    * recovered edits log or<code>minSeqId</code> if nothing added from editlogs.    * @throws UnsupportedEncodingException    * @throws IOException    */
specifier|protected
name|long
name|replayRecoveredEditsIfAny
parameter_list|(
specifier|final
name|Path
name|regiondir
parameter_list|,
specifier|final
name|long
name|minSeqId
parameter_list|,
specifier|final
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|IOException
block|{
name|long
name|seqid
init|=
name|minSeqId
decl_stmt|;
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|HLog
operator|.
name|getSplitEditFilesSorted
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|regiondir
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
operator|||
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|seqid
return|;
for|for
control|(
name|Path
name|edits
range|:
name|files
control|)
block|{
if|if
condition|(
name|edits
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|edits
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Null or non-existent edits file: "
operator|+
name|edits
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|isZeroLengthThenDelete
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|edits
argument_list|)
condition|)
continue|continue;
try|try
block|{
name|seqid
operator|=
name|replayRecoveredEdits
argument_list|(
name|edits
argument_list|,
name|seqid
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|boolean
name|skipErrors
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.skip.errors"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipErrors
condition|)
block|{
name|Path
name|p
init|=
name|HLog
operator|.
name|moveAsideBadEditsFile
argument_list|(
name|fs
argument_list|,
name|edits
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"hbase.skip.errors=true so continuing. Renamed "
operator|+
name|edits
operator|+
literal|" as "
operator|+
name|p
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
if|if
condition|(
name|seqid
operator|>
name|minSeqId
condition|)
block|{
comment|// Then we added some edits to memory. Flush and cleanup split edit files.
name|internalFlushcache
argument_list|(
literal|null
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
comment|// Now delete the content of recovered edits.  We're done w/ them.
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed delete of "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted recovered.edits file="
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|seqid
return|;
block|}
comment|/*    * @param edits File of recovered edits.    * @param minSeqId Minimum sequenceid found in a store file.  Edits in log    * must be larger than this to be replayed.    * @param reporter    * @return the sequence id of the last edit added to this region out of the    * recovered edits log or<code>minSeqId</code> if nothing added from editlogs.    * @throws IOException    */
specifier|private
name|long
name|replayRecoveredEdits
parameter_list|(
specifier|final
name|Path
name|edits
parameter_list|,
specifier|final
name|long
name|minSeqId
parameter_list|,
specifier|final
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Replaying edits from "
operator|+
name|edits
operator|+
literal|"; minSequenceid="
operator|+
name|minSeqId
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Reader
name|reader
init|=
name|HLog
operator|.
name|getReader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|edits
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|currentEditSeqId
init|=
name|minSeqId
decl_stmt|;
name|long
name|firstSeqIdInLog
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|skippedEdits
init|=
literal|0
decl_stmt|;
name|long
name|editsCount
init|=
literal|0
decl_stmt|;
name|long
name|intervalEdits
init|=
literal|0
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry
decl_stmt|;
name|Store
name|store
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// How many edits seen before we check elapsed time
name|int
name|interval
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.report.interval.edits"
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
comment|// How often to send a progress report (default 1/2 master timeout)
name|int
name|period
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.report.period"
argument_list|,
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.assignment.timeoutmonitor.timeout"
argument_list|,
literal|30000
argument_list|)
operator|/
literal|2
argument_list|)
decl_stmt|;
name|long
name|lastReport
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|HLogKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|WALEdit
name|val
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|intervalEdits
operator|+=
name|val
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|intervalEdits
operator|>=
name|interval
condition|)
block|{
comment|// Number of edits interval reached
name|intervalEdits
operator|=
literal|0
expr_stmt|;
name|long
name|cur
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastReport
operator|+
name|period
operator|<=
name|cur
condition|)
block|{
comment|// Timeout reached
if|if
condition|(
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Progressable reporter failed, stopping replay"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|lastReport
operator|=
name|cur
expr_stmt|;
block|}
block|}
block|}
comment|// Start coprocessor replay here. The coprocessor is for each WALEdit
comment|// instead of a KeyValue.
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|coprocessorHost
operator|.
name|preWALRestore
argument_list|(
name|this
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
comment|// if bypass this log entry, ignore it ...
continue|continue;
block|}
block|}
if|if
condition|(
name|firstSeqIdInLog
operator|==
operator|-
literal|1
condition|)
block|{
name|firstSeqIdInLog
operator|=
name|key
operator|.
name|getLogSeqNum
argument_list|()
expr_stmt|;
block|}
comment|// Now, figure if we should skip this edit.
if|if
condition|(
name|key
operator|.
name|getLogSeqNum
argument_list|()
operator|<=
name|currentEditSeqId
condition|)
block|{
name|skippedEdits
operator|++
expr_stmt|;
continue|continue;
block|}
name|currentEditSeqId
operator|=
name|key
operator|.
name|getLogSeqNum
argument_list|()
expr_stmt|;
name|boolean
name|flush
init|=
literal|false
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|val
operator|.
name|getKeyValues
argument_list|()
control|)
block|{
comment|// Check this edit is for me. Also, guard against writing the special
comment|// METACOLUMN info such as HBASE::CACHEFLUSH entries
if|if
condition|(
name|kv
operator|.
name|matchingFamily
argument_list|(
name|HLog
operator|.
name|METAFAMILY
argument_list|)
operator|||
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|this
operator|.
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
condition|)
block|{
name|skippedEdits
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Figure which store the edit is meant for.
if|if
condition|(
name|store
operator|==
literal|null
operator|||
operator|!
name|kv
operator|.
name|matchingFamily
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|store
operator|=
name|this
operator|.
name|stores
operator|.
name|get
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
comment|// This should never happen.  Perhaps schema was changed between
comment|// crash and redeploy?
name|LOG
operator|.
name|warn
argument_list|(
literal|"No family for "
operator|+
name|kv
argument_list|)
expr_stmt|;
name|skippedEdits
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Once we are over the limit, restoreEdit will keep returning true to
comment|// flush -- but don't flush until we've played all the kvs that make up
comment|// the WALEdit.
name|flush
operator|=
name|restoreEdit
argument_list|(
name|store
argument_list|,
name|kv
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|flush
condition|)
name|internalFlushcache
argument_list|(
literal|null
argument_list|,
name|currentEditSeqId
argument_list|)
expr_stmt|;
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
name|coprocessorHost
operator|.
name|postWALRestore
argument_list|(
name|this
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
name|Path
name|p
init|=
name|HLog
operator|.
name|moveAsideBadEditsFile
argument_list|(
name|fs
argument_list|,
name|edits
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered EOF. Most likely due to Master failure during "
operator|+
literal|"log spliting, so we have this data in another edit.  "
operator|+
literal|"Continuing, but renaming "
operator|+
name|edits
operator|+
literal|" as "
operator|+
name|p
argument_list|,
name|eof
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// If the IOE resulted from bad file format,
comment|// then this problem is idempotent and retrying won't help
if|if
condition|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
condition|)
block|{
name|Path
name|p
init|=
name|HLog
operator|.
name|moveAsideBadEditsFile
argument_list|(
name|fs
argument_list|,
name|edits
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"File corruption encountered!  "
operator|+
literal|"Continuing, but renaming "
operator|+
name|edits
operator|+
literal|" as "
operator|+
name|p
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// other IO errors may be transient (bad network connection,
comment|// checksum exception on one datanode, etc).  throw& retry
throw|throw
name|ioe
throw|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Applied "
operator|+
name|editsCount
operator|+
literal|", skipped "
operator|+
name|skippedEdits
operator|+
literal|", firstSequenceidInLog="
operator|+
name|firstSeqIdInLog
operator|+
literal|", maxSequenceidInLog="
operator|+
name|currentEditSeqId
argument_list|)
expr_stmt|;
block|}
return|return
name|currentEditSeqId
return|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Used by tests    * @param s Store to add edit too.    * @param kv KeyValue to add.    * @return True if we should flush.    */
specifier|protected
name|boolean
name|restoreEdit
parameter_list|(
specifier|final
name|Store
name|s
parameter_list|,
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
return|return
name|isFlushSize
argument_list|(
name|this
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
name|s
operator|.
name|add
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * @param fs    * @param p File to check.    * @return True if file was zero-length (and if so, we'll delete it in here).    * @throws IOException    */
specifier|private
specifier|static
name|boolean
name|isZeroLengthThenDelete
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getLen
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|false
return|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"File "
operator|+
name|p
operator|+
literal|" is zero-length, deleting."
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|protected
name|Store
name|instantiateHStore
parameter_list|(
name|Path
name|tableDir
parameter_list|,
name|HColumnDescriptor
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Store
argument_list|(
name|tableDir
argument_list|,
name|this
argument_list|,
name|c
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|conf
argument_list|)
return|;
block|}
comment|/**    * Return HStore instance.    * Use with caution.  Exposed for use of fixup utilities.    * @param column Name of column family hosted by this region.    * @return Store that goes with the family on passed<code>column</code>.    * TODO: Make this lookup faster.    */
specifier|public
name|Store
name|getStore
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
return|return
name|this
operator|.
name|stores
operator|.
name|get
argument_list|(
name|column
argument_list|)
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Support code
comment|//////////////////////////////////////////////////////////////////////////////
comment|/** Make sure this is a valid row for the HRegion */
specifier|private
name|void
name|checkRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rowIsInRange
argument_list|(
name|regionInfo
argument_list|,
name|row
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WrongRegionException
argument_list|(
literal|"Requested row out of range for "
operator|+
literal|"HRegion "
operator|+
name|this
operator|+
literal|", startKey='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|+
literal|"', getEndKey()='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionInfo
operator|.
name|getEndKey
argument_list|()
argument_list|)
operator|+
literal|"', row='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Obtain a lock on the given row.  Blocks until success.    *    * I know it's strange to have two mappings:    *<pre>    *   ROWS  ==> LOCKS    *</pre>    * as well as    *<pre>    *   LOCKS ==> ROWS    *</pre>    *    * But it acts as a guard on the client; a miswritten client just can't    * submit the name of a row and start writing to it; it must know the correct    * lockid, which matches the lock list in memory.    *    *<p>It would be more memory-efficient to assume a correctly-written client,    * which maybe we'll do in the future.    *    * @param row Name of row to lock.    * @throws IOException    * @return The id of the held lock.    */
specifier|public
name|Integer
name|obtainRowLock
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|internalObtainRowLock
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Obtains or tries to obtain the given row lock.    * @param waitForLock if true, will block until the lock is available.    *        Otherwise, just tries to obtain the lock and returns    *        null if unavailable.    */
specifier|private
name|Integer
name|internalObtainRowLock
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|waitForLock
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|startRegionOperation
argument_list|()
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|lockedRows
init|)
block|{
while|while
condition|(
name|lockedRows
operator|.
name|contains
argument_list|(
name|row
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|waitForLock
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|lockedRows
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Empty
block|}
block|}
comment|// generate a new lockid. Attempt to insert the new [lockid, row].
comment|// if this lockid already exists in the map then revert and retry
comment|// We could have first done a lockIds.get, and if it does not exist only
comment|// then do a lockIds.put, but the hope is that the lockIds.put will
comment|// mostly return null the first time itself because there won't be
comment|// too many lockId collisions.
name|byte
index|[]
name|prev
init|=
literal|null
decl_stmt|;
name|Integer
name|lockId
init|=
literal|null
decl_stmt|;
do|do
block|{
name|lockId
operator|=
operator|new
name|Integer
argument_list|(
name|lockIdGenerator
operator|++
argument_list|)
expr_stmt|;
name|prev
operator|=
name|lockIds
operator|.
name|put
argument_list|(
name|lockId
argument_list|,
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|lockIds
operator|.
name|put
argument_list|(
name|lockId
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// revert old value
name|lockIdGenerator
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
comment|// generate new start point
block|}
block|}
do|while
condition|(
name|prev
operator|!=
literal|null
condition|)
do|;
name|lockedRows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|lockedRows
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|lockId
return|;
block|}
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Used by unit tests.    * @param lockid    * @return Row that goes with<code>lockid</code>    */
name|byte
index|[]
name|getRowFromLock
parameter_list|(
specifier|final
name|Integer
name|lockid
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lockedRows
init|)
block|{
return|return
name|lockIds
operator|.
name|get
argument_list|(
name|lockid
argument_list|)
return|;
block|}
block|}
comment|/**    * Release the row lock!    * @param lockid  The lock ID to release.    */
specifier|public
name|void
name|releaseRowLock
parameter_list|(
specifier|final
name|Integer
name|lockid
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lockedRows
init|)
block|{
name|byte
index|[]
name|row
init|=
name|lockIds
operator|.
name|remove
argument_list|(
name|lockid
argument_list|)
decl_stmt|;
name|lockedRows
operator|.
name|remove
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|lockedRows
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * See if row is currently locked.    * @param lockid    * @return boolean    */
name|boolean
name|isRowLocked
parameter_list|(
specifier|final
name|Integer
name|lockid
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lockedRows
init|)
block|{
if|if
condition|(
name|lockIds
operator|.
name|get
argument_list|(
name|lockid
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Returns existing row lock if found, otherwise    * obtains a new row lock and returns it.    * @param lockid requested by the user, or null if the user didn't already hold lock    * @param row the row to lock    * @param waitForLock if true, will block until the lock is available, otherwise will    * simply return null if it could not acquire the lock.    * @return lockid or null if waitForLock is false and the lock was unavailable.    */
specifier|private
name|Integer
name|getLock
parameter_list|(
name|Integer
name|lockid
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|waitForLock
parameter_list|)
throws|throws
name|IOException
block|{
name|Integer
name|lid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|lockid
operator|==
literal|null
condition|)
block|{
name|lid
operator|=
name|internalObtainRowLock
argument_list|(
name|row
argument_list|,
name|waitForLock
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isRowLocked
argument_list|(
name|lockid
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid row lock"
argument_list|)
throw|;
block|}
name|lid
operator|=
name|lockid
expr_stmt|;
block|}
return|return
name|lid
return|;
block|}
specifier|public
name|void
name|bulkLoadHFile
parameter_list|(
name|String
name|hfilePath
parameter_list|,
name|byte
index|[]
name|familyName
parameter_list|)
throws|throws
name|IOException
block|{
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|Store
name|store
init|=
name|getStore
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"No such column family "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|familyName
argument_list|)
argument_list|)
throw|;
block|}
name|store
operator|.
name|bulkLoadHFile
argument_list|(
name|hfilePath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|HRegion
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|(
operator|(
name|HRegion
operator|)
name|o
operator|)
operator|.
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
return|;
block|}
comment|/** @return Path of region base directory */
specifier|public
name|Path
name|getTableDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableDir
return|;
block|}
comment|/**    * RegionScanner is an iterator through a bunch of rows in an HRegion.    *<p>    * It is used to combine scanners from multiple Stores (aka column families).    */
class|class
name|RegionScanner
implements|implements
name|InternalScanner
block|{
comment|// Package local for testability
name|KeyValueHeap
name|storeHeap
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|stopRow
decl_stmt|;
specifier|private
name|Filter
name|filter
decl_stmt|;
specifier|private
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|batch
decl_stmt|;
specifier|private
name|int
name|isScan
decl_stmt|;
specifier|private
name|boolean
name|filterClosed
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|readPt
decl_stmt|;
specifier|public
name|HRegionInfo
name|getRegionName
parameter_list|()
block|{
return|return
name|regionInfo
return|;
block|}
name|RegionScanner
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|additionalScanners
parameter_list|)
throws|throws
name|IOException
block|{
comment|//DebugPrint.println("HRegionScanner.<init>");
name|this
operator|.
name|filter
operator|=
name|scan
operator|.
name|getFilter
argument_list|()
expr_stmt|;
name|this
operator|.
name|batch
operator|=
name|scan
operator|.
name|getBatch
argument_list|()
expr_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|stopRow
operator|=
name|scan
operator|.
name|getStopRow
argument_list|()
expr_stmt|;
block|}
comment|// If we are doing a get, we want to be [startRow,endRow] normally
comment|// it is [startRow,endRow) and if startRow=endRow we get nothing.
name|this
operator|.
name|isScan
operator|=
name|scan
operator|.
name|isGetScan
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
expr_stmt|;
name|this
operator|.
name|readPt
operator|=
name|ReadWriteConsistencyControl
operator|.
name|resetThreadReadPoint
argument_list|(
name|rwcc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValueScanner
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|additionalScanners
operator|!=
literal|null
condition|)
block|{
name|scanners
operator|.
name|addAll
argument_list|(
name|additionalScanners
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|entry
range|:
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Store
name|store
init|=
name|stores
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storeHeap
operator|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
name|RegionScanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|scan
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reset both the filter and the old filter.      */
specifier|protected
name|void
name|resetFilters
parameter_list|()
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|outResults
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|filterClosed
condition|)
block|{
throw|throw
operator|new
name|UnknownScannerException
argument_list|(
literal|"Scanner was closed (timed out?) "
operator|+
literal|"after we renewed it. Could be caused by a very slow scanner "
operator|+
literal|"or a lengthy garbage collection"
argument_list|)
throw|;
block|}
name|startRegionOperation
argument_list|()
expr_stmt|;
name|readRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
comment|// This could be a new thread from the last time we called next().
name|ReadWriteConsistencyControl
operator|.
name|setThreadReadPoint
argument_list|(
name|this
operator|.
name|readPt
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|returnResult
init|=
name|nextInternal
argument_list|(
name|limit
argument_list|)
decl_stmt|;
name|outResults
operator|.
name|addAll
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|resetFilters
argument_list|()
expr_stmt|;
if|if
condition|(
name|isFilterDone
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|returnResult
return|;
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|outResults
parameter_list|)
throws|throws
name|IOException
block|{
comment|// apply the batching limit by default
return|return
name|next
argument_list|(
name|outResults
argument_list|,
name|batch
argument_list|)
return|;
block|}
comment|/*      * @return True if a filter rules the scanner is over, done.      */
specifier|synchronized
name|boolean
name|isFilterDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|filter
operator|!=
literal|null
operator|&&
name|this
operator|.
name|filter
operator|.
name|filterAllRemaining
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|nextInternal
parameter_list|(
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|currentRow
init|=
name|peekRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|isStopRow
argument_list|(
name|currentRow
argument_list|)
condition|)
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|hasFilterRow
argument_list|()
condition|)
block|{
name|filter
operator|.
name|filterRow
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|filterRow
argument_list|()
condition|)
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|filterRowKey
argument_list|(
name|currentRow
argument_list|)
condition|)
block|{
name|nextRow
argument_list|(
name|currentRow
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|nextRow
decl_stmt|;
do|do
block|{
name|this
operator|.
name|storeHeap
operator|.
name|next
argument_list|(
name|results
argument_list|,
name|limit
operator|-
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|hasFilterRow
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IncompatibleFilterException
argument_list|(
literal|"Filter with filterRow(List<KeyValue>) incompatible with scan with limit!"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
comment|// we are expecting more yes, but also limited to how many we can return.
block|}
block|}
do|while
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currentRow
argument_list|,
name|nextRow
operator|=
name|peekRow
argument_list|()
argument_list|)
condition|)
do|;
specifier|final
name|boolean
name|stopRow
init|=
name|isStopRow
argument_list|(
name|nextRow
argument_list|)
decl_stmt|;
comment|// now that we have an entire row, lets process with a filters:
comment|// first filter with the filterRow(List)
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|hasFilterRow
argument_list|()
condition|)
block|{
name|filter
operator|.
name|filterRow
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
operator|||
name|filterRow
argument_list|()
condition|)
block|{
comment|// this seems like a redundant step - we already consumed the row
comment|// there're no left overs.
comment|// the reasons for calling this method are:
comment|// 1. reset the filters.
comment|// 2. provide a hook to fast forward the row (used by subclasses)
name|nextRow
argument_list|(
name|currentRow
argument_list|)
expr_stmt|;
comment|// This row was totally filtered out, if this is NOT the last row,
comment|// we should continue on.
if|if
condition|(
operator|!
name|stopRow
condition|)
continue|continue;
block|}
return|return
operator|!
name|stopRow
return|;
block|}
block|}
block|}
specifier|private
name|boolean
name|filterRow
parameter_list|()
block|{
return|return
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|filterRow
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|filterRowKey
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|filterRowKey
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
return|;
block|}
specifier|protected
name|void
name|nextRow
parameter_list|(
name|byte
index|[]
name|currentRow
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currentRow
argument_list|,
name|peekRow
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|storeHeap
operator|.
name|next
argument_list|(
name|MOCKED_LIST
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resetFilters
argument_list|()
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|peekRow
parameter_list|()
block|{
name|KeyValue
name|kv
init|=
name|this
operator|.
name|storeHeap
operator|.
name|peek
argument_list|()
decl_stmt|;
return|return
name|kv
operator|==
literal|null
condition|?
literal|null
else|:
name|kv
operator|.
name|getRow
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isStopRow
parameter_list|(
name|byte
index|[]
name|currentRow
parameter_list|)
block|{
return|return
name|currentRow
operator|==
literal|null
operator|||
operator|(
name|stopRow
operator|!=
literal|null
operator|&&
name|comparator
operator|.
name|compareRows
argument_list|(
name|stopRow
argument_list|,
literal|0
argument_list|,
name|stopRow
operator|.
name|length
argument_list|,
name|currentRow
argument_list|,
literal|0
argument_list|,
name|currentRow
operator|.
name|length
argument_list|)
operator|<=
name|isScan
operator|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|storeHeap
operator|!=
literal|null
condition|)
block|{
name|storeHeap
operator|.
name|close
argument_list|()
expr_stmt|;
name|storeHeap
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|filterClosed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Utility methods
comment|/**    * A utility method to create new instances of HRegion based on the    * {@link HConstants#REGION_IMPL} configuration property.    * @param tableDir qualified path of directory where region should be located,    * usually the table directory.    * @param log The HLog is the outbound log for any updates to the HRegion    * (There's a single HLog for all the HRegions on a single HRegionServer.)    * The log file is a logfile from the previous execution that's    * custom-computed for this HRegion. The HRegionServer computes and sorts the    * appropriate log info for this HRegion. If there is a previous log file    * (implying that the HRegion has been written-to before), then read it from    * the supplied path.    * @param fs is the filesystem.    * @param conf is global configuration settings.    * @param regionInfo - HRegionInfo that describes the region    * is new), then read them from the supplied path.    * @param rsServices    * @return the new instance    */
specifier|public
specifier|static
name|HRegion
name|newHRegion
parameter_list|(
name|Path
name|tableDir
parameter_list|,
name|HLog
name|log
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|RegionServerServices
name|rsServices
parameter_list|)
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|HRegion
argument_list|>
name|regionClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HRegion
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
name|HConstants
operator|.
name|REGION_IMPL
argument_list|,
name|HRegion
operator|.
name|class
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|HRegion
argument_list|>
name|c
init|=
name|regionClass
operator|.
name|getConstructor
argument_list|(
name|Path
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|,
name|HRegionInfo
operator|.
name|class
argument_list|,
name|RegionServerServices
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|(
name|tableDir
argument_list|,
name|log
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|rsServices
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// todo: what should I throw here?
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not instantiate a region instance."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convenience method creating new HRegions. Used by createTable and by the    * bootstrap code in the HMaster constructor.    * Note, this method creates an {@link HLog} for the created region. It    * needs to be closed explicitly.  Use {@link HRegion#getLog()} to get    * access.    * @param info Info for region to create.    * @param rootDir Root directory for HBase instance    * @param conf    * @return new HRegion    *    * @throws IOException    */
specifier|public
specifier|static
name|HRegion
name|createHRegion
parameter_list|(
specifier|final
name|HRegionInfo
name|info
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableDir
init|=
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|tableDir
argument_list|,
name|info
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|regionDir
argument_list|)
expr_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|newHRegion
argument_list|(
name|tableDir
argument_list|,
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|info
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|region
operator|.
name|initialize
argument_list|()
expr_stmt|;
return|return
name|region
return|;
block|}
comment|/**    * Open a Region.    * @param info Info for region to be opened.    * @param wal HLog for region to use. This method will call    * HLog#setSequenceNumber(long) passing the result of the call to    * HRegion#getMinSequenceId() to ensure the log id is properly kept    * up.  HRegionStore does this every time it opens a new region.    * @param conf    * @return new HRegion    *    * @throws IOException    */
specifier|public
specifier|static
name|HRegion
name|openHRegion
parameter_list|(
specifier|final
name|HRegionInfo
name|info
parameter_list|,
specifier|final
name|HLog
name|wal
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|openHRegion
argument_list|(
name|info
argument_list|,
name|wal
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Open a Region.    * @param info Info for region to be opened.    * @param wal HLog for region to use. This method will call    * HLog#setSequenceNumber(long) passing the result of the call to    * HRegion#getMinSequenceId() to ensure the log id is properly kept    * up.  HRegionStore does this every time it opens a new region.    * @param conf    * @param flusher An interface we can request flushes against.    * @param reporter An interface we can report progress against.    * @return new HRegion    *    * @throws IOException    */
specifier|public
specifier|static
name|HRegion
name|openHRegion
parameter_list|(
specifier|final
name|HRegionInfo
name|info
parameter_list|,
specifier|final
name|HLog
name|wal
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|RegionServerServices
name|rsServices
parameter_list|,
specifier|final
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opening region: "
operator|+
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Passed region info is null"
argument_list|)
throw|;
block|}
name|Path
name|dir
init|=
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegion
name|r
init|=
name|HRegion
operator|.
name|newHRegion
argument_list|(
name|dir
argument_list|,
name|wal
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|info
argument_list|,
name|rsServices
argument_list|)
decl_stmt|;
return|return
name|r
operator|.
name|openHRegion
argument_list|(
name|reporter
argument_list|)
return|;
block|}
comment|/**    * Open HRegion.    * Calls initialize and sets sequenceid.    * @param reporter    * @return Returns<code>this</code>    * @throws IOException    */
specifier|protected
name|HRegion
name|openHRegion
parameter_list|(
specifier|final
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|checkCompressionCodecs
argument_list|()
expr_stmt|;
name|long
name|seqid
init|=
name|initialize
argument_list|(
name|reporter
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|log
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|log
operator|.
name|setSequenceNumber
argument_list|(
name|seqid
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|private
name|void
name|checkCompressionCodecs
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|HColumnDescriptor
name|fam
range|:
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|CompressionTest
operator|.
name|testCompression
argument_list|(
name|fam
operator|.
name|getCompression
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionTest
operator|.
name|testCompression
argument_list|(
name|fam
operator|.
name|getCompactionCompression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Inserts a new region's meta information into the passed    *<code>meta</code> region. Used by the HMaster bootstrap code adding    * new table to ROOT table.    *    * @param meta META HRegion to be updated    * @param r HRegion to add to<code>meta</code>    *    * @throws IOException    */
specifier|public
specifier|static
name|void
name|addRegionToMETA
parameter_list|(
name|HRegion
name|meta
parameter_list|,
name|HRegion
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|checkResources
argument_list|()
expr_stmt|;
comment|// The row key is the region name
name|byte
index|[]
name|row
init|=
name|r
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|Integer
name|lid
init|=
name|meta
operator|.
name|obtainRowLock
argument_list|(
name|row
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|edits
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|edits
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|edits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|releaseRowLock
argument_list|(
name|lid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes all the files for a HRegion    *    * @param fs the file system object    * @param rootdir qualified path of HBase root directory    * @param info HRegionInfo for region to be deleted    * @throws IOException    */
specifier|public
specifier|static
name|void
name|deleteRegion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|HRegionInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteRegion
argument_list|(
name|fs
argument_list|,
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|rootdir
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|deleteRegion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|regiondir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DELETING region "
operator|+
name|regiondir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|regiondir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed delete of "
operator|+
name|regiondir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Computes the Path of the HRegion    *    * @param rootdir qualified path of HBase root directory    * @param info HRegionInfo for the region    * @return qualified path of region directory    */
specifier|public
specifier|static
name|Path
name|getRegionDir
parameter_list|(
specifier|final
name|Path
name|rootdir
parameter_list|,
specifier|final
name|HRegionInfo
name|info
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|info
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Determines if the specified row is within the row range specified by the    * specified HRegionInfo    *    * @param info HRegionInfo that specifies the row range    * @param row row to be checked    * @return true if the row is within the range specified by the HRegionInfo    */
specifier|public
specifier|static
name|boolean
name|rowIsInRange
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
operator|(
operator|(
name|info
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
operator|||
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|row
argument_list|)
operator|<=
literal|0
operator|)
operator|)
operator|&&
operator|(
operator|(
name|info
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
operator|||
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|row
argument_list|)
operator|>
literal|0
operator|)
operator|)
return|;
block|}
comment|/**    * Make the directories for a specific column family    *    * @param fs the file system    * @param tabledir base directory where region will live (usually the table dir)    * @param hri    * @param colFamily the column family    * @throws IOException    */
specifier|public
specifier|static
name|void
name|makeColumnFamilyDirs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|tabledir
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|byte
index|[]
name|colFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|Store
operator|.
name|getStoreHomedir
argument_list|(
name|tabledir
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|colFamily
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merge two HRegions.  The regions must be adjacent and must not overlap.    *    * @param srcA    * @param srcB    * @return new merged HRegion    * @throws IOException    */
specifier|public
specifier|static
name|HRegion
name|mergeAdjacent
parameter_list|(
specifier|final
name|HRegion
name|srcA
parameter_list|,
specifier|final
name|HRegion
name|srcB
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|a
init|=
name|srcA
decl_stmt|;
name|HRegion
name|b
init|=
name|srcB
decl_stmt|;
comment|// Make sure that srcA comes first; important for key-ordering during
comment|// write of the merged file.
if|if
condition|(
name|srcA
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|srcB
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot merge two regions with null start key"
argument_list|)
throw|;
block|}
comment|// A's start key is null but B's isn't. Assume A comes before B
block|}
elseif|else
if|if
condition|(
operator|(
name|srcB
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|srcA
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|srcB
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|a
operator|=
name|srcB
expr_stmt|;
name|b
operator|=
name|srcA
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|b
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot merge non-adjacent regions"
argument_list|)
throw|;
block|}
return|return
name|merge
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**    * Merge two regions whether they are adjacent or not.    *    * @param a region a    * @param b region b    * @return new merged region    * @throws IOException    */
specifier|public
specifier|static
name|HRegion
name|merge
parameter_list|(
name|HRegion
name|a
parameter_list|,
name|HRegion
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Regions do not belong to the same table"
argument_list|)
throw|;
block|}
name|FileSystem
name|fs
init|=
name|a
operator|.
name|getFilesystem
argument_list|()
decl_stmt|;
comment|// Make sure each region's cache is empty
name|a
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|b
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Compact each region so we only have one store file per family
name|a
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Files for region: "
operator|+
name|a
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|fs
argument_list|,
name|a
operator|.
name|getRegionDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Files for region: "
operator|+
name|b
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|fs
argument_list|,
name|b
operator|.
name|getRegionDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|a
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|tabledesc
init|=
name|a
operator|.
name|getTableDesc
argument_list|()
decl_stmt|;
name|HLog
name|log
init|=
name|a
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|Path
name|tableDir
init|=
name|a
operator|.
name|getTableDir
argument_list|()
decl_stmt|;
comment|// Presume both are of same region type -- i.e. both user or catalog
comment|// table regions.  This way can use comparator.
specifier|final
name|byte
index|[]
name|startKey
init|=
operator|(
name|a
operator|.
name|comparator
operator|.
name|matchingRows
argument_list|(
name|a
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
operator|.
name|length
argument_list|)
operator|||
name|b
operator|.
name|comparator
operator|.
name|matchingRows
argument_list|(
name|b
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
operator|.
name|length
argument_list|)
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
operator|(
name|a
operator|.
name|comparator
operator|.
name|compareRows
argument_list|(
name|a
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
argument_list|,
name|b
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
argument_list|)
operator|<=
literal|0
condition|?
name|a
operator|.
name|getStartKey
argument_list|()
else|:
name|b
operator|.
name|getStartKey
argument_list|()
operator|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|endKey
init|=
operator|(
name|a
operator|.
name|comparator
operator|.
name|matchingRows
argument_list|(
name|a
operator|.
name|getEndKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
operator|.
name|length
argument_list|)
operator|||
name|a
operator|.
name|comparator
operator|.
name|matchingRows
argument_list|(
name|b
operator|.
name|getEndKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
operator|.
name|length
argument_list|)
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
operator|(
name|a
operator|.
name|comparator
operator|.
name|compareRows
argument_list|(
name|a
operator|.
name|getEndKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
argument_list|,
name|b
operator|.
name|getEndKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
argument_list|)
operator|<=
literal|0
condition|?
name|b
operator|.
name|getEndKey
argument_list|()
else|:
name|a
operator|.
name|getEndKey
argument_list|()
operator|)
decl_stmt|;
name|HRegionInfo
name|newRegionInfo
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tabledesc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating new region "
operator|+
name|newRegionInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|encodedName
init|=
name|newRegionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Path
name|newRegionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|a
operator|.
name|getTableDir
argument_list|()
argument_list|,
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|newRegionDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot merge; target file collision at "
operator|+
name|newRegionDir
argument_list|)
throw|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|newRegionDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting merge of regions: "
operator|+
name|a
operator|+
literal|" and "
operator|+
name|b
operator|+
literal|" into new region "
operator|+
name|newRegionInfo
operator|.
name|toString
argument_list|()
operator|+
literal|" with start key<"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|startKey
argument_list|)
operator|+
literal|"> and end key<"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|endKey
argument_list|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
comment|// Move HStoreFiles under new region directory
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|byFamily
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|byFamily
operator|=
name|filesByFamily
argument_list|(
name|byFamily
argument_list|,
name|a
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|byFamily
operator|=
name|filesByFamily
argument_list|(
name|byFamily
argument_list|,
name|b
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|es
range|:
name|byFamily
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|colFamily
init|=
name|es
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|makeColumnFamilyDirs
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|,
name|newRegionInfo
argument_list|,
name|colFamily
argument_list|)
expr_stmt|;
comment|// Because we compacted the source regions we should have no more than two
comment|// HStoreFiles per family and there will be no reference store
name|List
argument_list|<
name|StoreFile
argument_list|>
name|srcFiles
init|=
name|es
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcFiles
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|long
name|seqA
init|=
name|srcFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMaxSequenceId
argument_list|()
decl_stmt|;
name|long
name|seqB
init|=
name|srcFiles
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMaxSequenceId
argument_list|()
decl_stmt|;
if|if
condition|(
name|seqA
operator|==
name|seqB
condition|)
block|{
comment|// Can't have same sequenceid since on open of a store, this is what
comment|// distingushes the files (see the map of stores how its keyed by
comment|// sequenceid).
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Files have same sequenceid: "
operator|+
name|seqA
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|StoreFile
name|hsf
range|:
name|srcFiles
control|)
block|{
name|StoreFile
operator|.
name|rename
argument_list|(
name|fs
argument_list|,
name|hsf
operator|.
name|getPath
argument_list|()
argument_list|,
name|StoreFile
operator|.
name|getUniqueFile
argument_list|(
name|fs
argument_list|,
name|Store
operator|.
name|getStoreHomedir
argument_list|(
name|tableDir
argument_list|,
name|newRegionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|colFamily
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Files for new region"
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|fs
argument_list|,
name|newRegionDir
argument_list|)
expr_stmt|;
block|}
name|HRegion
name|dstRegion
init|=
name|HRegion
operator|.
name|newHRegion
argument_list|(
name|tableDir
argument_list|,
name|log
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|newRegionInfo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dstRegion
operator|.
name|readRequestsCount
operator|.
name|set
argument_list|(
name|a
operator|.
name|readRequestsCount
operator|.
name|get
argument_list|()
operator|+
name|b
operator|.
name|readRequestsCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|dstRegion
operator|.
name|writeRequestsCount
operator|.
name|set
argument_list|(
name|a
operator|.
name|writeRequestsCount
operator|.
name|get
argument_list|()
operator|+
name|b
operator|.
name|writeRequestsCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|dstRegion
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|dstRegion
operator|.
name|compactStores
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Files for new region"
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|fs
argument_list|,
name|dstRegion
operator|.
name|getRegionDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteRegion
argument_list|(
name|fs
argument_list|,
name|a
operator|.
name|getRegionDir
argument_list|()
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|fs
argument_list|,
name|b
operator|.
name|getRegionDir
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"merge completed. New region is "
operator|+
name|dstRegion
argument_list|)
expr_stmt|;
return|return
name|dstRegion
return|;
block|}
comment|/*    * Fills a map with a vector of store files keyed by column family.    * @param byFamily Map to fill.    * @param storeFiles Store files to process.    * @param family    * @return Returns<code>byFamily</code>    */
specifier|private
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|filesByFamily
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|byFamily
parameter_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
parameter_list|)
block|{
for|for
control|(
name|StoreFile
name|src
range|:
name|storeFiles
control|)
block|{
name|byte
index|[]
name|family
init|=
name|src
operator|.
name|getFamily
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|v
init|=
name|byFamily
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
expr_stmt|;
name|byFamily
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|v
operator|.
name|add
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
return|return
name|byFamily
return|;
block|}
comment|/**    * @return True if needs a mojor compaction.    * @throws IOException    */
name|boolean
name|isMajorCompaction
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Store
name|store
range|:
name|this
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|store
operator|.
name|isMajorCompaction
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/*    * List the files under the specified directory    *    * @param fs    * @param dir    * @throws IOException    */
specifier|private
specifier|static
name|void
name|listPaths
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
index|[
name|i
index|]
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"d "
operator|+
name|path
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|fs
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"f "
operator|+
name|path
operator|+
literal|" size="
operator|+
name|stats
index|[
name|i
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//
comment|// HBASE-880
comment|//
comment|/**    * @param get get object    * @param lockid existing lock id, or null for no previous lock    * @return result    * @throws IOException read exceptions    */
specifier|public
name|Result
name|get
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|Integer
name|lockid
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Verify families are all valid
if|if
condition|(
name|get
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|family
range|:
name|get
operator|.
name|familySet
argument_list|()
control|)
block|{
name|checkFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Adding all families to scanner
for|for
control|(
name|byte
index|[]
name|family
range|:
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
name|get
argument_list|(
name|get
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|results
argument_list|)
return|;
block|}
comment|/**    * An optimized version of {@link #get(Get)} that checks MemStore first for    * the specified query.    *<p>    * This is intended for use by increment operations where we have the    * guarantee that versions are never inserted out-of-order so if a value    * exists in MemStore it is the latest value.    *<p>    * It only makes sense to use this method without a TimeRange and maxVersions    * equal to 1.    * @param get    * @return result    * @throws IOException    */
specifier|private
name|List
argument_list|<
name|KeyValue
argument_list|>
name|getLastIncrement
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScan
name|iscan
init|=
operator|new
name|InternalScan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
comment|// memstore scan
name|iscan
operator|.
name|checkOnlyMemStore
argument_list|()
expr_stmt|;
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scanner
operator|=
name|getScanner
argument_list|(
name|iscan
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// count how many columns we're looking for
name|int
name|expected
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
init|=
name|get
operator|.
name|getFamilyMap
argument_list|()
decl_stmt|;
for|for
control|(
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qfs
range|:
name|familyMap
operator|.
name|values
argument_list|()
control|)
block|{
name|expected
operator|+=
name|qfs
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// found everything we were looking for, done
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
name|expected
condition|)
block|{
return|return
name|results
return|;
block|}
comment|// still have more columns to find
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// subtract what was found in memstore
for|for
control|(
name|KeyValue
name|kv
range|:
name|results
control|)
block|{
name|byte
index|[]
name|family
init|=
name|kv
operator|.
name|getFamily
argument_list|()
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qfs
init|=
name|familyMap
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|qfs
operator|.
name|remove
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qfs
operator|.
name|isEmpty
argument_list|()
condition|)
name|familyMap
operator|.
name|remove
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|expected
operator|--
expr_stmt|;
block|}
comment|// make a new get for just what is left
name|Get
name|newGet
init|=
operator|new
name|Get
argument_list|(
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|f
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|f
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|f
operator|.
name|getValue
argument_list|()
control|)
block|{
name|newGet
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|newGet
operator|.
name|setTimeRange
argument_list|(
name|get
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMin
argument_list|()
argument_list|,
name|get
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|iscan
operator|=
operator|new
name|InternalScan
argument_list|(
name|newGet
argument_list|)
expr_stmt|;
block|}
comment|// check store files for what is left
name|List
argument_list|<
name|KeyValue
argument_list|>
name|fileResults
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|iscan
operator|.
name|checkOnlyStoreFiles
argument_list|()
expr_stmt|;
name|scanner
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|scanner
operator|=
name|getScanner
argument_list|(
name|iscan
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|fileResults
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// combine and return
name|results
operator|.
name|addAll
argument_list|(
name|fileResults
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/*    * Do a get based on the get parameter.    * @param withCoprocessor invoke coprocessor or not. We don't want to    * always invoke cp for this private method.    */
specifier|private
name|List
argument_list|<
name|KeyValue
argument_list|>
name|get
parameter_list|(
name|Get
name|get
parameter_list|,
name|boolean
name|withCoprocessor
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
comment|// pre-get CP hook
if|if
condition|(
name|withCoprocessor
operator|&&
operator|(
name|coprocessorHost
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|coprocessorHost
operator|.
name|preGet
argument_list|(
name|get
argument_list|,
name|results
argument_list|)
condition|)
block|{
return|return
name|results
return|;
block|}
block|}
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scanner
operator|=
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// post-get CP hook
if|if
condition|(
name|withCoprocessor
operator|&&
operator|(
name|coprocessorHost
operator|!=
literal|null
operator|)
condition|)
block|{
name|coprocessorHost
operator|.
name|postGet
argument_list|(
name|get
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    *    * Perform one or more increment operations on a row.    *<p>    * Increments performed are done under row lock but reads do not take locks    * out so this can be seen partially complete by gets and scans.    * @param increment    * @param lockid    * @param writeToWAL    * @return new keyvalues after increment    * @throws IOException    */
specifier|public
name|Result
name|increment
parameter_list|(
name|Increment
name|increment
parameter_list|,
name|Integer
name|lockid
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Use RWCC to make this set of increments atomic to reads
name|byte
index|[]
name|row
init|=
name|increment
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|checkRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|TimeRange
name|tr
init|=
name|increment
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|boolean
name|flush
init|=
literal|false
decl_stmt|;
name|WALEdit
name|walEdits
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|allKVs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|increment
operator|.
name|numColumns
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|increment
operator|.
name|numColumns
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
comment|// Lock row
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|Integer
name|lid
init|=
name|getLock
argument_list|(
name|lockid
argument_list|,
name|row
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Process each family
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|>
name|family
range|:
name|increment
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Store
name|store
init|=
name|stores
operator|.
name|get
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get previous values for all columns in this family
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|column
range|:
name|family
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|column
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
name|tr
operator|.
name|getMin
argument_list|()
argument_list|,
name|tr
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
name|getLastIncrement
argument_list|(
name|get
argument_list|)
decl_stmt|;
comment|// Iterate the input columns and update existing values if they were
comment|// found, otherwise add new column initialized to the increment amount
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|column
range|:
name|family
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|amount
init|=
name|column
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|<
name|results
operator|.
name|size
argument_list|()
operator|&&
name|results
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|matchingQualifier
argument_list|(
name|column
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|amount
operator|+=
name|Bytes
operator|.
name|toLong
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// Append new incremented KeyValue to list
name|KeyValue
name|newKV
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|column
operator|.
name|getKey
argument_list|()
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|amount
argument_list|)
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
name|newKV
argument_list|)
expr_stmt|;
comment|// Append update to WAL
if|if
condition|(
name|writeToWAL
condition|)
block|{
if|if
condition|(
name|walEdits
operator|==
literal|null
condition|)
block|{
name|walEdits
operator|=
operator|new
name|WALEdit
argument_list|()
expr_stmt|;
block|}
name|walEdits
operator|.
name|add
argument_list|(
name|newKV
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write the KVs for this family into the store
name|size
operator|+=
name|store
operator|.
name|upsert
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|allKVs
operator|.
name|addAll
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Actually write to WAL now
if|if
condition|(
name|writeToWAL
condition|)
block|{
name|this
operator|.
name|log
operator|.
name|append
argument_list|(
name|regionInfo
argument_list|,
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walEdits
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|this
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|flush
operator|=
name|isFlushSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|releaseRowLock
argument_list|(
name|lid
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flush
condition|)
block|{
comment|// Request a cache flush.  Do it outside update lock.
name|requestFlush
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Result
argument_list|(
name|allKVs
argument_list|)
return|;
block|}
comment|/**    * @param row    * @param family    * @param qualifier    * @param amount    * @param writeToWAL    * @return The new value.    * @throws IOException    */
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|boolean
name|flush
init|=
literal|false
decl_stmt|;
comment|// Lock row
name|long
name|result
init|=
name|amount
decl_stmt|;
name|startRegionOperation
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRequestsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|Integer
name|lid
init|=
name|obtainRowLock
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|this
operator|.
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Store
name|store
init|=
name|stores
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Get the old value:
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
comment|// we don't want to invoke coprocessor in this case; ICV is wrapped
comment|// in HRegionServer, so we leave getLastIncrement alone
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
name|getLastIncrement
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|KeyValue
name|kv
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|kv
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|int
name|valueOffset
init|=
name|kv
operator|.
name|getValueOffset
argument_list|()
decl_stmt|;
name|result
operator|+=
name|Bytes
operator|.
name|toLong
argument_list|(
name|buffer
argument_list|,
name|valueOffset
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
expr_stmt|;
block|}
comment|// build the KeyValue now:
name|KeyValue
name|newKv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|result
argument_list|)
argument_list|)
decl_stmt|;
comment|// now log it:
if|if
condition|(
name|writeToWAL
condition|)
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WALEdit
name|walEdit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|walEdit
operator|.
name|add
argument_list|(
name|newKv
argument_list|)
expr_stmt|;
name|this
operator|.
name|log
operator|.
name|append
argument_list|(
name|regionInfo
argument_list|,
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walEdit
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
comment|// Now request the ICV to the store, this will set the timestamp
comment|// appropriately depending on if there is a value in memcache or not.
comment|// returns the change in the size of the memstore from operation
name|long
name|size
init|=
name|store
operator|.
name|updateColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|size
operator|=
name|this
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|flush
operator|=
name|isFlushSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|updatesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|releaseRowLock
argument_list|(
name|lid
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flush
condition|)
block|{
comment|// Request a cache flush.  Do it outside update lock.
name|requestFlush
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|//
comment|// New HBASE-880 Helpers
comment|//
specifier|private
name|void
name|checkFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|NoSuchColumnFamilyException
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|hasFamily
argument_list|(
name|family
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchColumnFamilyException
argument_list|(
literal|"Column family "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|" does not exist in region "
operator|+
name|this
operator|+
literal|" in table "
operator|+
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|long
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
operator|(
literal|4
operator|*
name|Bytes
operator|.
name|SIZEOF_LONG
operator|)
operator|+
name|ClassSize
operator|.
name|ARRAY
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
literal|26
operator|*
name|ClassSize
operator|.
name|REFERENCE
argument_list|)
operator|+
name|ClassSize
operator|.
name|OBJECT
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEEP_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
operator|(
name|ClassSize
operator|.
name|OBJECT
operator|*
literal|2
operator|)
operator|+
operator|(
literal|2
operator|*
name|ClassSize
operator|.
name|ATOMIC_BOOLEAN
operator|)
operator|+
name|ClassSize
operator|.
name|ATOMIC_LONG
operator|+
name|ClassSize
operator|.
name|ATOMIC_INTEGER
operator|+
comment|// Using TreeMap for TreeSet
name|ClassSize
operator|.
name|TREEMAP
operator|+
comment|// Using TreeMap for HashMap
name|ClassSize
operator|.
name|TREEMAP
operator|+
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP
operator|+
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP_ENTRY
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|OBJECT
operator|+
operator|(
literal|5
operator|*
name|Bytes
operator|.
name|SIZEOF_BOOLEAN
operator|)
argument_list|)
operator|+
operator|(
literal|3
operator|*
name|ClassSize
operator|.
name|REENTRANT_LOCK
operator|)
argument_list|)
decl_stmt|;
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
name|long
name|heapSize
init|=
name|DEEP_OVERHEAD
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|this
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|heapSize
operator|+=
name|store
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
return|return
name|heapSize
return|;
block|}
comment|/*    * This method calls System.exit.    * @param message Message to print out.  May be null.    */
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: HRegion CATLALOG_TABLE_DIR [major_compact]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" major_compact  Pass this option to major compact "
operator|+
literal|"passed region."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Default outputs scan of passed region."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Registers a new CoprocessorProtocol subclass and instance to    * be available for handling {@link HRegion#exec(Exec)} calls.    *    *<p>    * Only a single protocol type/handler combination may be registered per    * region.    * After the first registration, subsequent calls with the same protocol type    * will fail with a return value of {@code false}.    *</p>    * @param protocol a {@code CoprocessorProtocol} subinterface defining the    * protocol methods    * @param handler an instance implementing the interface    * @param<T> the protocol type    * @return {@code true} if the registration was successful, {@code false}    * otherwise    */
specifier|public
parameter_list|<
name|T
extends|extends
name|CoprocessorProtocol
parameter_list|>
name|boolean
name|registerProtocol
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|T
name|handler
parameter_list|)
block|{
comment|/* No stacking of protocol handlers is currently allowed.  The      * first to claim wins!      */
if|if
condition|(
name|protocolHandlers
operator|.
name|containsKey
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Protocol "
operator|+
name|protocol
operator|.
name|getName
argument_list|()
operator|+
literal|" already registered, rejecting request from "
operator|+
name|handler
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|protocolHandlers
operator|.
name|putInstance
argument_list|(
name|protocol
argument_list|,
name|handler
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registered protocol handler: region="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getRegionName
argument_list|()
argument_list|)
operator|+
literal|" protocol="
operator|+
name|protocol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Executes a single {@link org.apache.hadoop.hbase.ipc.CoprocessorProtocol}    * method using the registered protocol handlers.    * {@link CoprocessorProtocol} implementations must be registered via the    * {@link org.apache.hadoop.hbase.regionserver.HRegion#registerProtocol(Class, org.apache.hadoop.hbase.ipc.CoprocessorProtocol)}    * method before they are available.    *    * @param call an {@code Exec} instance identifying the protocol, method name,    *     and parameters for the method invocation    * @return an {@code ExecResult} instance containing the region name of the    *     invocation and the return value    * @throws IOException if no registered protocol handler is found or an error    *     occurs during the invocation    * @see org.apache.hadoop.hbase.regionserver.HRegion#registerProtocol(Class, org.apache.hadoop.hbase.ipc.CoprocessorProtocol)    */
specifier|public
name|ExecResult
name|exec
parameter_list|(
name|Exec
name|call
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CoprocessorProtocol
argument_list|>
name|protocol
init|=
name|call
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|protocolHandlers
operator|.
name|containsKey
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HBaseRPC
operator|.
name|UnknownProtocolException
argument_list|(
name|protocol
argument_list|,
literal|"No matching handler for protocol "
operator|+
name|protocol
operator|.
name|getName
argument_list|()
operator|+
literal|" in region "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|CoprocessorProtocol
name|handler
init|=
name|protocolHandlers
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|)
decl_stmt|;
name|Object
name|value
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
decl_stmt|;
try|try
block|{
name|Method
name|method
init|=
name|protocol
operator|.
name|getMethod
argument_list|(
name|call
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|call
operator|.
name|getParameterClasses
argument_list|()
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|method
operator|.
name|getReturnType
argument_list|()
expr_stmt|;
name|value
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|handler
argument_list|,
name|call
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwable
name|target
init|=
name|e
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|target
throw|;
block|}
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|setStackTrace
argument_list|(
name|target
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|IOException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected throwable object "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
return|return
operator|new
name|ExecResult
argument_list|(
name|getRegionName
argument_list|()
argument_list|,
name|returnType
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/*    * Process table.    * Do major compaction or list content.    * @param fs    * @param p    * @param log    * @param c    * @param majorCompact    * @throws IOException    */
specifier|private
specifier|static
name|void
name|processTable
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|HLog
name|log
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|boolean
name|majorCompact
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
name|String
name|rootStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
decl_stmt|;
name|String
name|metaStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
comment|// Currently expects tables have one region only.
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|rootStr
argument_list|)
condition|)
block|{
name|region
operator|=
name|HRegion
operator|.
name|newHRegion
argument_list|(
name|p
argument_list|,
name|log
argument_list|,
name|fs
argument_list|,
name|c
argument_list|,
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|metaStr
argument_list|)
condition|)
block|{
name|region
operator|=
name|HRegion
operator|.
name|newHRegion
argument_list|(
name|p
argument_list|,
name|log
argument_list|,
name|fs
argument_list|,
name|c
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not a known catalog table: "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|region
operator|.
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|majorCompact
condition|)
block|{
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Default behavior
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// scan.addFamily(HConstants.CATALOG_FAMILY);
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
do|do
block|{
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|done
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
if|if
condition|(
name|kvs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|LOG
operator|.
name|info
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|done
condition|)
do|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|shouldForceSplit
parameter_list|()
block|{
return|return
name|this
operator|.
name|splitRequest
return|;
block|}
name|byte
index|[]
name|getSplitPoint
parameter_list|()
block|{
return|return
name|this
operator|.
name|splitPoint
return|;
block|}
name|void
name|forceSplit
parameter_list|(
name|byte
index|[]
name|sp
parameter_list|)
block|{
comment|// NOTE : this HRegion will go away after the forced split is successfull
comment|//        therefore, no reason to clear this value
name|this
operator|.
name|splitRequest
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|sp
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|splitPoint
operator|=
name|sp
expr_stmt|;
block|}
block|}
comment|/**    * Give the region a chance to prepare before it is split.    */
specifier|protected
name|void
name|prepareToSplit
parameter_list|()
block|{
comment|// nothing
block|}
comment|/**    * @return The priority that this region should have in the compaction queue    */
specifier|public
name|int
name|getCompactPriority
parameter_list|()
block|{
name|int
name|count
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|count
operator|=
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|store
operator|.
name|getCompactPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * Checks every store to see if one has too many    * store files    * @return true if any store has too many store files    */
specifier|public
name|boolean
name|hasTooManyStoreFiles
parameter_list|()
block|{
for|for
control|(
name|Store
name|store
range|:
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|store
operator|.
name|hasTooManyStoreFiles
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** @return the coprocessor host */
specifier|public
name|RegionCoprocessorHost
name|getCoprocessorHost
parameter_list|()
block|{
return|return
name|coprocessorHost
return|;
block|}
comment|/** @param coprocessorHost the new coprocessor host */
specifier|public
name|void
name|setCoprocessorHost
parameter_list|(
specifier|final
name|RegionCoprocessorHost
name|coprocessorHost
parameter_list|)
block|{
name|this
operator|.
name|coprocessorHost
operator|=
name|coprocessorHost
expr_stmt|;
block|}
comment|/**    * This method needs to be called before any public call that reads or    * modifies data. It has to be called just before a try.    * #closeRegionOperation needs to be called in the try's finally block    * Acquires a read lock and checks if the region is closing or closed.    * @throws NotServingRegionException when the region is closing or closed    */
specifier|private
name|void
name|startRegionOperation
parameter_list|()
throws|throws
name|NotServingRegionException
block|{
if|if
condition|(
name|this
operator|.
name|closing
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotServingRegionException
argument_list|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is closing"
argument_list|)
throw|;
block|}
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NotServingRegionException
argument_list|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is closed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Closes the lock. This needs to be called in the finally block corresponding    * to the try block of #startRegionOperation    */
specifier|private
name|void
name|closeRegionOperation
parameter_list|()
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**    * A mocked list implementaion - discards all updates.    */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|MOCKED_LIST
init|=
operator|new
name|AbstractList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|KeyValue
name|element
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|KeyValue
argument_list|>
name|c
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// this list is never changed as a result of an update
block|}
annotation|@
name|Override
specifier|public
name|KeyValue
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Facility for dumping and compacting catalog tables.    * Only does catalog tables since these are only tables we for sure know    * schema on.  For usage run:    *<pre>    *   ./bin/hbase org.apache.hadoop.hbase.regionserver.HRegion    *</pre>    * @param args    * @throws IOException    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsageAndExit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|majorCompact
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|args
index|[
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"major"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|(
literal|"ERROR: Unrecognized option<"
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|majorCompact
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|Path
name|tableDir
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|c
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|logdir
init|=
operator|new
name|Path
argument_list|(
name|c
operator|.
name|get
argument_list|(
literal|"hbase.tmp.dir"
argument_list|)
argument_list|,
literal|"hlog"
operator|+
name|tableDir
operator|.
name|getName
argument_list|()
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|c
operator|.
name|get
argument_list|(
literal|"hbase.tmp.dir"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
specifier|final
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|logdir
argument_list|,
name|oldLogDir
argument_list|,
name|c
argument_list|)
decl_stmt|;
try|try
block|{
name|processTable
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|,
name|log
argument_list|,
name|c
argument_list|,
name|majorCompact
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|BlockCache
name|bc
init|=
name|StoreFile
operator|.
name|getBlockCache
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|bc
operator|!=
literal|null
condition|)
name|bc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

