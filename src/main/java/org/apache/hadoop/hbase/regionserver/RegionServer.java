begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|OperationStatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRowLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AdminProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Exec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|ExecResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WritableByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
operator|.
name|HFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
operator|.
name|RegionOpeningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ReplicateWALEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ReplicateWALEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|SplitRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|SplitRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ActionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
operator|.
name|FamilyPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ExecCoprocessorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ExecCoprocessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|LockRowRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|LockRowResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Mutate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Mutate
operator|.
name|MutateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|UnlockRowRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|UnlockRowResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
operator|.
name|QosPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Leases
operator|.
name|LeaseStillHeldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|CloseMetaHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|CloseRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|CloseRootHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|OpenMetaHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|OpenRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|OpenRootHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|metrics
operator|.
name|SchemaMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * RegionServer makes a set of HRegions available to clients. It checks in with  * the HMaster. There are many RegionServers in a single HBase deployment.  *  * This will be a replacement for the HRegionServer. It has protobuf protocols  * implementations. All the HRegionInterface implementations stay in HRegionServer  * for possible backward compatibility requests.  This also makes it easier to  * rip of HRegionInterface later on.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|RegionServer
implements|implements
name|ClientProtocol
implements|,
name|AdminProtocol
implements|,
name|Runnable
implements|,
name|RegionServerServices
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/*    * Strings to be used in forming the exception message for    * RegionsAlreadyInTransitionException.    */
specifier|protected
specifier|static
specifier|final
name|String
name|OPEN
init|=
literal|"OPEN"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|CLOSE
init|=
literal|"CLOSE"
decl_stmt|;
comment|//RegionName vs current action in progress
comment|//true - if open region action in progress
comment|//false - if close region action in progress
specifier|protected
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Boolean
argument_list|>
name|regionsInTransitionInRS
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|maxScannerResultSize
decl_stmt|;
comment|// Cache flushing
specifier|protected
name|MemStoreFlusher
name|cacheFlusher
decl_stmt|;
comment|// catalog tracker
specifier|protected
name|CatalogTracker
name|catalogTracker
decl_stmt|;
comment|/**    * Go here to get table descriptors.    */
specifier|protected
name|TableDescriptors
name|tableDescriptors
decl_stmt|;
comment|// Replication services. If no replication, this handler will be null.
specifier|protected
name|ReplicationSourceService
name|replicationSourceHandler
decl_stmt|;
specifier|protected
name|ReplicationSinkService
name|replicationSinkHandler
decl_stmt|;
comment|// Compactions
specifier|public
name|CompactSplitThread
name|compactSplitThread
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RegionScanner
argument_list|>
name|scanners
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RegionScanner
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Map of regions currently being served by this region server. Key is the    * encoded region name.  All access should be synchronized.    */
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|onlineRegions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
comment|// Leases
specifier|protected
name|Leases
name|leases
decl_stmt|;
comment|// Instance of the hbase executor service.
specifier|protected
name|ExecutorService
name|service
decl_stmt|;
comment|// Request counter.
comment|// Do we need this?  Can't we just sum region counters?  St.Ack 20110412
specifier|protected
name|AtomicInteger
name|requestCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// If false, the file system has become unavailable
specifier|protected
specifier|volatile
name|boolean
name|fsOk
decl_stmt|;
specifier|protected
name|HFileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|NORMAL_QOS
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|QOS_THRESHOLD
init|=
literal|10
decl_stmt|;
comment|// the line between low and high qos
specifier|protected
specifier|static
specifier|final
name|int
name|HIGH_QOS
init|=
literal|100
decl_stmt|;
comment|// Set when a report to the master comes back with a message asking us to
comment|// shutdown. Also set by call to stop when debugging or running unit tests
comment|// of HRegionServer in isolation.
specifier|protected
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
comment|// Go down hard. Used if file system becomes unavailable and also in
comment|// debugging and unit tests.
specifier|protected
specifier|volatile
name|boolean
name|abortRequested
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rowlocks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Instantiated as a row lock lease. If the lease times out, the row lock is    * released    */
specifier|private
class|class
name|RowLockListener
implements|implements
name|LeaseListener
block|{
specifier|private
specifier|final
name|String
name|lockName
decl_stmt|;
specifier|private
specifier|final
name|HRegion
name|region
decl_stmt|;
name|RowLockListener
parameter_list|(
specifier|final
name|String
name|lockName
parameter_list|,
specifier|final
name|HRegion
name|region
parameter_list|)
block|{
name|this
operator|.
name|lockName
operator|=
name|lockName
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
block|}
specifier|public
name|void
name|leaseExpired
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row Lock "
operator|+
name|this
operator|.
name|lockName
operator|+
literal|" lease expired"
argument_list|)
expr_stmt|;
name|Integer
name|r
init|=
name|rowlocks
operator|.
name|remove
argument_list|(
name|this
operator|.
name|lockName
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|releaseRowLock
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Instantiated as a scanner lease. If the lease times out, the scanner is    * closed    */
specifier|private
class|class
name|ScannerListener
implements|implements
name|LeaseListener
block|{
specifier|private
specifier|final
name|String
name|scannerName
decl_stmt|;
name|ScannerListener
parameter_list|(
specifier|final
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|scannerName
operator|=
name|n
expr_stmt|;
block|}
specifier|public
name|void
name|leaseExpired
parameter_list|()
block|{
name|RegionScanner
name|s
init|=
name|scanners
operator|.
name|remove
argument_list|(
name|this
operator|.
name|scannerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanner "
operator|+
name|this
operator|.
name|scannerName
operator|+
literal|" lease expired on region "
operator|+
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerClose
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerClose
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing scanner for "
operator|+
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanner "
operator|+
name|this
operator|.
name|scannerName
operator|+
literal|" lease expired"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Method to get the Integer lock identifier used internally from the long    * lock identifier used by the client.    *    * @param lockId    *          long row lock identifier from client    * @return intId Integer row lock used internally in HRegion    * @throws IOException    *           Thrown if this is not a valid client lock id.    */
name|Integer
name|getLockFromId
parameter_list|(
name|long
name|lockId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|lockId
operator|==
operator|-
literal|1L
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|lockName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|lockId
argument_list|)
decl_stmt|;
name|Integer
name|rl
init|=
name|rowlocks
operator|.
name|get
argument_list|(
name|lockName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRowLockException
argument_list|(
literal|"Invalid row lock"
argument_list|)
throw|;
block|}
name|this
operator|.
name|leases
operator|.
name|renewLease
argument_list|(
name|lockName
argument_list|)
expr_stmt|;
return|return
name|rl
return|;
block|}
comment|/**    * Called to verify that this server is up and running.    *    * @throws IOException    */
specifier|protected
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|stopped
operator|||
name|this
operator|.
name|abortRequested
condition|)
block|{
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"Server "
operator|+
name|getServerName
argument_list|()
operator|+
literal|" not running"
operator|+
operator|(
name|this
operator|.
name|abortRequested
condition|?
literal|", aborting"
else|:
literal|""
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fsOk
condition|)
block|{
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"File system not available"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|checkIfRegionInTransition
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|String
name|currentAction
parameter_list|)
throws|throws
name|RegionAlreadyInTransitionException
block|{
name|byte
index|[]
name|encodedName
init|=
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|containsKey
argument_list|(
name|encodedName
argument_list|)
condition|)
block|{
name|boolean
name|openAction
init|=
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
comment|// The below exception message will be used in master.
throw|throw
operator|new
name|RegionAlreadyInTransitionException
argument_list|(
literal|"Received:"
operator|+
name|currentAction
operator|+
literal|" for the region:"
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" ,which we are already trying to "
operator|+
operator|(
name|openAction
condition|?
name|OPEN
else|:
name|CLOSE
operator|)
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param region Region to close    * @param abort True if we are aborting    * @param zk True if we are to update zk about the region close; if the close    * was orchestrated by master, then update zk.  If the close is being run by    * the regionserver because its going down, don't update zk.    * @return True if closed a region.    */
specifier|protected
name|boolean
name|closeRegion
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|boolean
name|abort
parameter_list|,
specifier|final
name|boolean
name|zk
parameter_list|)
block|{
return|return
name|closeRegion
argument_list|(
name|region
argument_list|,
name|abort
argument_list|,
name|zk
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * @param region Region to close    * @param abort True if we are aborting    * @param zk True if we are to update zk about the region close; if the close    * was orchestrated by master, then update zk.  If the close is being run by    * the regionserver because its going down, don't update zk.    * @param versionOfClosingNode    *   the version of znode to compare when RS transitions the znode from    *   CLOSING state.    * @return True if closed a region.    */
specifier|protected
name|boolean
name|closeRegion
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|boolean
name|abort
parameter_list|,
specifier|final
name|boolean
name|zk
parameter_list|,
specifier|final
name|int
name|versionOfClosingNode
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|containsKey
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received close for region we are already opening or closing; "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|putIfAbsent
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CloseRegionHandler
name|crh
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|isRootRegion
argument_list|()
condition|)
block|{
name|crh
operator|=
operator|new
name|CloseRootHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|abort
argument_list|,
name|zk
argument_list|,
name|versionOfClosingNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|region
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|crh
operator|=
operator|new
name|CloseMetaHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|abort
argument_list|,
name|zk
argument_list|,
name|versionOfClosingNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|crh
operator|=
operator|new
name|CloseRegionHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|abort
argument_list|,
name|zk
argument_list|,
name|versionOfClosingNode
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|service
operator|.
name|submit
argument_list|(
name|crh
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * @param regionName    * @return HRegion for the passed binary<code>regionName</code> or null if    *         named region is not member of the online regions.    */
specifier|public
name|HRegion
name|getOnlineRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|String
name|encodedRegionName
init|=
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|onlineRegions
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HRegion
name|getFromOnlineRegions
parameter_list|(
specifier|final
name|String
name|encodedRegionName
parameter_list|)
block|{
return|return
name|this
operator|.
name|onlineRegions
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
return|;
block|}
comment|/**    * Protected utility method for safely obtaining an HRegion handle.    *    * @param regionName    *          Name of online {@link HRegion} to return    * @return {@link HRegion} for<code>regionName</code>    * @throws NotServingRegionException    */
specifier|protected
name|HRegion
name|getRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|NotServingRegionException
block|{
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
name|region
operator|=
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotServingRegionException
argument_list|(
literal|"Region is not online: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|region
return|;
block|}
comment|/*    * Cleanup after Throwable caught invoking method. Converts<code>t</code> to    * IOE if it isn't already.    *    * @param t Throwable    *    * @return Throwable converted to an IOE; methods can only let out IOEs.    */
specifier|protected
name|Throwable
name|cleanup
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|cleanup
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/*    * Cleanup after Throwable caught invoking method. Converts<code>t</code> to    * IOE if it isn't already.    *    * @param t Throwable    *    * @param msg Message to log in error. Can be null.    *    * @return Throwable converted to an IOE; methods can only let out IOEs.    */
specifier|protected
name|Throwable
name|cleanup
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|)
block|{
comment|// Don't log as error if NSRE; NSRE is 'normal' operation.
if|if
condition|(
name|t
operator|instanceof
name|NotServingRegionException
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NotServingRegionException; "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkThrowable
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkThrowable
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkOOME
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
comment|/*    * @param t    *    * @return Make<code>t</code> an IOE if it isn't already.    */
specifier|protected
name|IOException
name|convertThrowableToIOE
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|convertThrowableToIOE
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/*    * @param t    *    * @param msg Message to put in new IOE if passed<code>t</code> is not an IOE    *    * @return Make<code>t</code> an IOE if it isn't already.    */
specifier|protected
name|IOException
name|convertThrowableToIOE
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|)
block|{
return|return
operator|(
name|t
operator|instanceof
name|IOException
condition|?
operator|(
name|IOException
operator|)
name|t
else|:
name|msg
operator|==
literal|null
operator|||
name|msg
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
else|:
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
operator|)
return|;
block|}
comment|/*    * Check if an OOME and, if so, abort immediately to avoid creating more objects.    *    * @param e    *    * @return True if we OOME'd and are aborting.    */
specifier|public
name|boolean
name|checkOOME
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
operator|||
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|OutOfMemoryError
operator|)
operator|||
operator|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"java.lang.OutOfMemoryError"
argument_list|)
operator|)
condition|)
block|{
name|stop
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Run out of memory; HRegionServer will abort itself immediately"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|stop
condition|)
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stop
return|;
block|}
comment|/**    * Checks to see if the file system is still accessible. If not, sets    * abortRequested and stopRequested    *    * @return false if file system is not available    */
specifier|public
name|boolean
name|checkFileSystem
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|fsOk
operator|&&
name|this
operator|.
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|FSUtils
operator|.
name|checkFileSystemAvailable
argument_list|(
name|this
operator|.
name|fs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|abort
argument_list|(
literal|"File System not available"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsOk
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|fsOk
return|;
block|}
specifier|protected
name|long
name|addRowLock
parameter_list|(
name|Integer
name|r
parameter_list|,
name|HRegion
name|region
parameter_list|)
throws|throws
name|LeaseStillHeldException
block|{
name|long
name|lockId
init|=
name|nextLong
argument_list|()
decl_stmt|;
name|String
name|lockName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|lockId
argument_list|)
decl_stmt|;
name|rowlocks
operator|.
name|put
argument_list|(
name|lockName
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|this
operator|.
name|leases
operator|.
name|createLease
argument_list|(
name|lockName
argument_list|,
operator|new
name|RowLockListener
argument_list|(
name|lockName
argument_list|,
name|region
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|lockId
return|;
block|}
specifier|protected
name|long
name|addScanner
parameter_list|(
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|LeaseStillHeldException
block|{
name|long
name|scannerId
init|=
name|nextLong
argument_list|()
decl_stmt|;
name|String
name|scannerName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|put
argument_list|(
name|scannerName
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|this
operator|.
name|leases
operator|.
name|createLease
argument_list|(
name|scannerName
argument_list|,
operator|new
name|ScannerListener
argument_list|(
name|scannerName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|scannerId
return|;
block|}
comment|/**    * Generate a random positive long number    *    * @return a random positive long number    */
specifier|protected
name|long
name|nextLong
parameter_list|()
block|{
name|long
name|n
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return
name|nextLong
argument_list|()
return|;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|n
operator|=
operator|-
name|n
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
comment|// Start Client methods
comment|/**    * Get data from a table.    *    * @param controller the RPC controller    * @param request the get request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|GetResponse
name|get
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|GetResponse
operator|.
name|Builder
name|builder
init|=
name|GetResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|Get
name|get
init|=
name|request
operator|.
name|getGet
argument_list|()
decl_stmt|;
name|Boolean
name|existence
init|=
literal|null
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getClosestRowBefore
argument_list|()
condition|)
block|{
if|if
condition|(
name|get
operator|.
name|getColumnCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"get ClosestRowBefore supports one and only one family now, not "
operator|+
name|get
operator|.
name|getColumnCount
argument_list|()
operator|+
literal|" families"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|row
init|=
name|get
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|get
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|r
operator|=
name|region
operator|.
name|getClosestRowBefore
argument_list|(
name|row
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Get
name|clientGet
init|=
name|ProtobufUtil
operator|.
name|toGet
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getExistenceOnly
argument_list|()
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|existence
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preExists
argument_list|(
name|clientGet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existence
operator|==
literal|null
condition|)
block|{
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|clientGet
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|clientGet
argument_list|,
name|lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getExistenceOnly
argument_list|()
condition|)
block|{
name|boolean
name|exists
init|=
name|r
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exists
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postExists
argument_list|(
name|clientGet
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
name|existence
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|existence
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setExists
argument_list|(
name|existence
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Mutate data in a table.    *    * @param controller the RPC controller    * @param request the mutate request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|MutateResponse
name|mutate
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|MutateRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|MutateResponse
operator|.
name|Builder
name|builder
init|=
name|MutateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Mutate
name|mutate
init|=
name|request
operator|.
name|getMutate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|Integer
name|lock
init|=
literal|null
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
name|Boolean
name|processed
init|=
literal|null
decl_stmt|;
name|MutateType
name|type
init|=
name|mutate
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|APPEND
case|:
name|r
operator|=
name|append
argument_list|(
name|region
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCREMENT
case|:
name|r
operator|=
name|increment
argument_list|(
name|region
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|Put
name|put
init|=
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|mutate
argument_list|)
decl_stmt|;
name|lock
operator|=
name|getLockFromId
argument_list|(
name|put
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCondition
argument_list|()
condition|)
block|{
name|Condition
name|condition
init|=
name|request
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|condition
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|condition
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|condition
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|CompareOp
name|compareOp
init|=
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|condition
operator|.
name|getCompareType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|WritableByteArrayComparable
name|comparator
init|=
operator|(
name|WritableByteArrayComparable
operator|)
name|ProtobufUtil
operator|.
name|toObject
argument_list|(
name|condition
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processed
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preCheckAndPut
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processed
operator|==
literal|null
condition|)
block|{
name|boolean
name|result
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|lock
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postCheckAndPut
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|processed
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|,
name|lock
argument_list|)
expr_stmt|;
name|processed
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
break|break;
case|case
name|DELETE
case|:
name|Delete
name|delete
init|=
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|mutate
argument_list|)
decl_stmt|;
name|lock
operator|=
name|getLockFromId
argument_list|(
name|delete
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCondition
argument_list|()
condition|)
block|{
name|Condition
name|condition
init|=
name|request
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|condition
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|condition
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|condition
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|CompareOp
name|compareOp
init|=
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|condition
operator|.
name|getCompareType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|WritableByteArrayComparable
name|comparator
init|=
operator|(
name|WritableByteArrayComparable
operator|)
name|ProtobufUtil
operator|.
name|toObject
argument_list|(
name|condition
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processed
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preCheckAndDelete
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processed
operator|==
literal|null
condition|)
block|{
name|boolean
name|result
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|lock
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postCheckAndDelete
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|processed
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
name|lock
argument_list|,
name|delete
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
name|processed
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported mutate type: "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|processed
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setProcessed
argument_list|(
name|processed
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// remote scanner interface
comment|//
comment|/**    * Scan data in a table.    *    * @param controller the RPC controller    * @param request the scan request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|ScanResponse
name|scan
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ScanRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|Leases
operator|.
name|Lease
name|lease
init|=
literal|null
decl_stmt|;
name|String
name|scannerName
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasScannerId
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|hasScan
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required input: scannerId or scan"
argument_list|)
throw|;
block|}
name|long
name|scannerId
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasScannerId
argument_list|()
condition|)
block|{
name|scannerId
operator|=
name|request
operator|.
name|getScannerId
argument_list|()
expr_stmt|;
name|scannerName
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If checkOpen failed, server not running or filesystem gone,
comment|// cancel this lease; filesystem is gone or we're closing or something.
if|if
condition|(
name|scannerName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|leases
operator|.
name|cancelLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseException
name|le
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Server shutting down and client tried to access missing scanner "
operator|+
name|scannerName
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|ttl
init|=
literal|0
decl_stmt|;
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
name|RegionScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|boolean
name|moreResults
init|=
literal|true
decl_stmt|;
name|boolean
name|closeScanner
init|=
literal|false
decl_stmt|;
name|ScanResponse
operator|.
name|Builder
name|builder
init|=
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCloseScanner
argument_list|()
condition|)
block|{
name|closeScanner
operator|=
name|request
operator|.
name|getCloseScanner
argument_list|()
expr_stmt|;
block|}
name|int
name|rows
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasNumberOfRows
argument_list|()
condition|)
block|{
name|rows
operator|=
name|request
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasScannerId
argument_list|()
condition|)
block|{
name|scanner
operator|=
name|scanners
operator|.
name|get
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownScannerException
argument_list|(
literal|"Name: "
operator|+
name|scannerName
operator|+
literal|", already closed?"
argument_list|)
throw|;
block|}
name|region
operator|=
name|getRegion
argument_list|(
name|scanner
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|region
operator|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
name|ClientProtos
operator|.
name|Scan
name|protoScan
init|=
name|request
operator|.
name|getScan
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|protoScan
argument_list|)
decl_stmt|;
name|region
operator|.
name|prepareScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerOpen
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerOpen
argument_list|(
name|scan
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
block|}
name|scannerId
operator|=
name|addScanner
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|scannerName
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|ttl
operator|=
name|leases
operator|.
name|leasePeriod
expr_stmt|;
block|}
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
block|{
try|try
block|{
comment|// Remove lease while its being processed in server; protects against case
comment|// where processing of request takes> lease expiration time.
name|lease
operator|=
name|leases
operator|.
name|removeLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Result
argument_list|>
argument_list|(
name|rows
argument_list|)
decl_stmt|;
name|long
name|currentScanResultSize
init|=
literal|0
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
comment|// Call coprocessor. Get region info from scanner.
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|bypass
init|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|rows
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|r
operator|.
name|raw
argument_list|()
control|)
block|{
name|currentScanResultSize
operator|+=
name|kv
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bypass
operator|!=
literal|null
operator|&&
name|bypass
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|&&
name|currentScanResultSize
operator|<
name|maxScannerResultSize
condition|;
name|i
operator|++
control|)
block|{
comment|// Collect values to be returned here
name|boolean
name|moreRows
init|=
name|scanner
operator|.
name|next
argument_list|(
name|values
argument_list|,
name|SchemaMetrics
operator|.
name|METRIC_NEXTSIZE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|values
control|)
block|{
name|currentScanResultSize
operator|+=
name|kv
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
operator|new
name|Result
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|moreRows
condition|)
block|{
break|break;
block|}
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// coprocessor postNext hook
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|rows
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If the scanner's filter - if any - is done with the scan
comment|// and wants to tell the client to stop the scan. This is done by passing
comment|// a null result, and setting moreResults to false.
if|if
condition|(
name|scanner
operator|.
name|isFilterDone
argument_list|()
operator|&&
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|moreResults
operator|=
literal|false
expr_stmt|;
name|results
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addResult
argument_list|(
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// We're done. On way out re-add the above removed lease.
comment|// Adding resets expiration time on lease.
if|if
condition|(
name|scanners
operator|.
name|containsKey
argument_list|(
name|scannerName
argument_list|)
condition|)
block|{
if|if
condition|(
name|lease
operator|!=
literal|null
condition|)
name|leases
operator|.
name|addLease
argument_list|(
name|lease
argument_list|)
expr_stmt|;
name|ttl
operator|=
name|leases
operator|.
name|leasePeriod
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|moreResults
operator|||
name|closeScanner
condition|)
block|{
name|ttl
operator|=
literal|0
expr_stmt|;
name|moreResults
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerClose
argument_list|(
name|scanner
argument_list|)
condition|)
block|{
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
comment|// bypass
block|}
block|}
name|scanner
operator|=
name|scanners
operator|.
name|remove
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|leases
operator|.
name|cancelLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerClose
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ttl
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setTtl
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setScannerId
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMoreResults
argument_list|(
name|moreResults
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|scannerName
operator|!=
literal|null
operator|&&
name|t
operator|instanceof
name|NotServingRegionException
condition|)
block|{
name|scanners
operator|.
name|remove
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
block|}
throw|throw
name|convertThrowableToIOE
argument_list|(
name|cleanup
argument_list|(
name|t
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Lock a row in a table.    *    * @param controller the RPC controller    * @param request the lock row request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|LockRowResponse
name|lockRow
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|LockRowRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
if|if
condition|(
name|request
operator|.
name|getRowCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"lockRow supports only one row now, not "
operator|+
name|request
operator|.
name|getRowCount
argument_list|()
operator|+
literal|" rows"
argument_list|)
throw|;
block|}
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|request
operator|.
name|getRow
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|Integer
name|r
init|=
name|region
operator|.
name|obtainRowLock
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|long
name|lockId
init|=
name|addRowLock
argument_list|(
name|r
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Row lock "
operator|+
name|lockId
operator|+
literal|" explicitly acquired by client"
argument_list|)
expr_stmt|;
name|LockRowResponse
operator|.
name|Builder
name|builder
init|=
name|LockRowResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setLockId
argument_list|(
name|lockId
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|convertThrowableToIOE
argument_list|(
name|cleanup
argument_list|(
name|t
argument_list|,
literal|"Error obtaining row lock (fsOk: "
operator|+
name|this
operator|.
name|fsOk
operator|+
literal|")"
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Unlock a locked row in a table.    *    * @param controller the RPC controller    * @param request the unlock row request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HIGH_QOS
argument_list|)
specifier|public
name|UnlockRowResponse
name|unlockRow
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|UnlockRowRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|hasLockId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Invalid unlock rowrequest, missing lock id"
argument_list|)
throw|;
block|}
name|long
name|lockId
init|=
name|request
operator|.
name|getLockId
argument_list|()
decl_stmt|;
name|String
name|lockName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|lockId
argument_list|)
decl_stmt|;
try|try
block|{
name|Integer
name|r
init|=
name|rowlocks
operator|.
name|remove
argument_list|(
name|lockName
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRowLockException
argument_list|(
name|lockName
argument_list|)
throw|;
block|}
name|region
operator|.
name|releaseRowLock
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|this
operator|.
name|leases
operator|.
name|cancelLease
argument_list|(
name|lockName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Row lock "
operator|+
name|lockId
operator|+
literal|" has been explicitly released by client"
argument_list|)
expr_stmt|;
return|return
name|UnlockRowResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|convertThrowableToIOE
argument_list|(
name|cleanup
argument_list|(
name|t
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Atomically bulk load several HFiles into an open region    * @return true if successful, false is failed but recoverably (no action)    * @throws IOException if failed unrecoverably    */
annotation|@
name|Override
specifier|public
name|BulkLoadHFileResponse
name|bulkLoadHFile
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|BulkLoadHFileRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FamilyPath
name|familyPath
range|:
name|request
operator|.
name|getFamilyPathList
argument_list|()
control|)
block|{
name|familyPaths
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|(
name|familyPath
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|familyPath
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|loaded
init|=
name|region
operator|.
name|bulkLoadHFiles
argument_list|(
name|familyPaths
argument_list|)
decl_stmt|;
name|BulkLoadHFileResponse
operator|.
name|Builder
name|builder
init|=
name|BulkLoadHFileResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setLoaded
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Executes a single {@link org.apache.hadoop.hbase.ipc.CoprocessorProtocol}    * method using the registered protocol handlers.    * {@link CoprocessorProtocol} implementations must be registered per-region    * via the    * {@link org.apache.hadoop.hbase.regionserver.HRegion#registerProtocol(Class, org.apache.hadoop.hbase.ipc.CoprocessorProtocol)}    * method before they are available.    *    * @param regionName name of the region against which the invocation is executed    * @param call an {@code Exec} instance identifying the protocol, method name,    *     and parameters for the method invocation    * @return an {@code ExecResult} instance containing the region name of the    *     invocation and the return value    * @throws IOException if no registered protocol handler is found or an error    *     occurs during the invocation    * @see org.apache.hadoop.hbase.regionserver.HRegion#registerProtocol(Class, org.apache.hadoop.hbase.ipc.CoprocessorProtocol)    */
annotation|@
name|Override
specifier|public
name|ExecCoprocessorResponse
name|execCoprocessor
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ExecCoprocessorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|ExecCoprocessorResponse
operator|.
name|Builder
name|builder
init|=
name|ExecCoprocessorResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|Exec
name|call
init|=
name|request
operator|.
name|getCall
argument_list|()
decl_stmt|;
name|Exec
name|clientCall
init|=
name|ProtobufUtil
operator|.
name|toExec
argument_list|(
name|call
argument_list|)
decl_stmt|;
name|ExecResult
name|result
init|=
name|region
operator|.
name|exec
argument_list|(
name|clientCall
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|ProtobufUtil
operator|.
name|toParameter
argument_list|(
name|result
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Execute multiple actions on a table: get, mutate, and/or execCoprocessor    *    * @param controller the RPC controller    * @param request the multi request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|MultiResponse
name|multi
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|MultiRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|MultiResponse
operator|.
name|Builder
name|builder
init|=
name|MultiResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasAtomic
argument_list|()
operator|&&
name|request
operator|.
name|getAtomic
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Mutate
argument_list|>
name|mutates
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutate
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MultiAction
name|actionUnion
range|:
name|request
operator|.
name|getActionList
argument_list|()
control|)
block|{
if|if
condition|(
name|actionUnion
operator|.
name|hasMutate
argument_list|()
condition|)
block|{
name|mutates
operator|.
name|add
argument_list|(
name|actionUnion
operator|.
name|getMutate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported atomic action type: "
operator|+
name|actionUnion
argument_list|)
throw|;
block|}
block|}
name|mutateRows
argument_list|(
name|region
argument_list|,
name|mutates
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ActionResult
operator|.
name|Builder
name|resultBuilder
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Mutate
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutate
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MultiAction
name|actionUnion
range|:
name|request
operator|.
name|getActionList
argument_list|()
control|)
block|{
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|actionUnion
operator|.
name|hasGet
argument_list|()
condition|)
block|{
name|Get
name|get
init|=
name|ProtobufUtil
operator|.
name|toGet
argument_list|(
name|actionUnion
operator|.
name|getGet
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|get
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
name|lock
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|actionUnion
operator|.
name|hasMutate
argument_list|()
condition|)
block|{
name|Mutate
name|mutate
init|=
name|actionUnion
operator|.
name|getMutate
argument_list|()
decl_stmt|;
name|MutateType
name|type
init|=
name|mutate
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|MutateType
operator|.
name|PUT
condition|)
block|{
if|if
condition|(
operator|!
name|puts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|put
argument_list|(
name|builder
argument_list|,
name|region
argument_list|,
name|puts
argument_list|)
expr_stmt|;
name|puts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
block|}
name|Result
name|r
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|APPEND
case|:
name|r
operator|=
name|append
argument_list|(
name|region
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCREMENT
case|:
name|r
operator|=
name|increment
argument_list|(
name|region
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|puts
operator|.
name|add
argument_list|(
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|Delete
name|delete
init|=
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|mutate
argument_list|)
decl_stmt|;
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|delete
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
name|lock
argument_list|,
name|delete
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported mutate type: "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|actionUnion
operator|.
name|hasExec
argument_list|()
condition|)
block|{
name|Exec
name|call
init|=
name|ProtobufUtil
operator|.
name|toExec
argument_list|(
name|actionUnion
operator|.
name|getExec
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|region
operator|.
name|exec
argument_list|(
name|call
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error: invalid action: "
operator|+
name|actionUnion
operator|+
literal|". "
operator|+
literal|"it must be a Get, Mutate, or Exec."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Invalid action, "
operator|+
literal|"it must be a Get, Mutate, or Exec."
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resultBuilder
operator|==
literal|null
condition|)
block|{
name|resultBuilder
operator|=
name|ActionResult
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resultBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|NameBytesPair
name|value
init|=
name|ProtobufUtil
operator|.
name|toParameter
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|resultBuilder
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addResult
argument_list|(
name|resultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|builder
operator|.
name|addResult
argument_list|(
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|puts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|put
argument_list|(
name|builder
argument_list|,
name|region
argument_list|,
name|puts
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|// End Client methods
comment|// Start Admin methods
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HIGH_QOS
argument_list|)
specifier|public
name|GetRegionInfoResponse
name|getRegionInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetRegionInfoRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|GetRegionInfoResponse
operator|.
name|Builder
name|builder
init|=
name|GetRegionInfoResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegionInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetStoreFileResponse
name|getStoreFile
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetStoreFileRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columnFamilies
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getFamilyCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnFamilies
operator|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|keySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnFamilies
operator|=
operator|new
name|HashSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ByteString
name|cf
range|:
name|request
operator|.
name|getFamilyList
argument_list|()
control|)
block|{
name|columnFamilies
operator|.
name|add
argument_list|(
name|cf
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nCF
init|=
name|columnFamilies
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileList
init|=
name|region
operator|.
name|getStoreFileList
argument_list|(
name|columnFamilies
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|nCF
index|]
index|[]
argument_list|)
argument_list|)
decl_stmt|;
name|GetStoreFileResponse
operator|.
name|Builder
name|builder
init|=
name|GetStoreFileResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAllStoreFile
argument_list|(
name|fileList
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HIGH_QOS
argument_list|)
specifier|public
name|GetOnlineRegionResponse
name|getOnlineRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetOnlineRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|onlineRegions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|e
range|:
name|this
operator|.
name|onlineRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|GetOnlineRegionResponse
operator|.
name|Builder
name|builder
init|=
name|GetOnlineRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|list
control|)
block|{
name|builder
operator|.
name|addRegionInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|// Region open/close direct RPCs
comment|/**    * Open a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HIGH_QOS
argument_list|)
specifier|public
name|OpenRegionResponse
name|openRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|OpenRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|int
name|versionOfOfflineNode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasVersionOfOfflineNode
argument_list|()
condition|)
block|{
name|versionOfOfflineNode
operator|=
name|request
operator|.
name|getVersionOfOfflineNode
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|OpenRegionResponse
operator|.
name|Builder
name|builder
init|=
name|OpenRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|request
operator|.
name|getRegionList
argument_list|()
control|)
block|{
name|HRegionInfo
name|region
init|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|checkIfRegionInTransition
argument_list|(
name|region
argument_list|,
name|OPEN
argument_list|)
expr_stmt|;
name|HRegion
name|onlineRegion
init|=
name|getFromOnlineRegions
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|onlineRegion
condition|)
block|{
comment|// See HBASE-5094. Cross check with META if still this RS is owning the
comment|// region.
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
init|=
name|MetaReader
operator|.
name|getRegion
argument_list|(
name|this
operator|.
name|catalogTracker
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getSecond
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempted open of "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" but already online on this server"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addOpeningState
argument_list|(
name|RegionOpeningState
operator|.
name|ALREADY_OPENED
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The region "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" is online on this server but META does not have this server."
argument_list|)
expr_stmt|;
name|removeFromOnlineRegions
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Received request to open region: "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|putIfAbsent
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
name|this
operator|.
name|tableDescriptors
operator|.
name|get
argument_list|(
name|region
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Need to pass the expected version in the constructor.
if|if
condition|(
name|region
operator|.
name|isRootRegion
argument_list|()
condition|)
block|{
name|this
operator|.
name|service
operator|.
name|submit
argument_list|(
operator|new
name|OpenRootHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|htd
argument_list|,
name|versionOfOfflineNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|region
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|this
operator|.
name|service
operator|.
name|submit
argument_list|(
operator|new
name|OpenMetaHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|htd
argument_list|,
name|versionOfOfflineNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|service
operator|.
name|submit
argument_list|(
operator|new
name|OpenRegionHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|htd
argument_list|,
name|versionOfOfflineNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addOpeningState
argument_list|(
name|RegionOpeningState
operator|.
name|OPENED
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Close a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HIGH_QOS
argument_list|)
specifier|public
name|CloseRegionResponse
name|closeRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CloseRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|int
name|versionOfClosingNode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasVersionOfClosingNode
argument_list|()
condition|)
block|{
name|versionOfClosingNode
operator|=
name|request
operator|.
name|getVersionOfClosingNode
argument_list|()
expr_stmt|;
block|}
name|boolean
name|zk
init|=
name|request
operator|.
name|getTransitionInZK
argument_list|()
decl_stmt|;
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|CloseRegionResponse
operator|.
name|Builder
name|builder
init|=
name|CloseRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received close region: "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|". Version of ZK closing node:"
operator|+
name|versionOfClosingNode
argument_list|)
expr_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|checkIfRegionInTransition
argument_list|(
name|regionInfo
argument_list|,
name|CLOSE
argument_list|)
expr_stmt|;
name|boolean
name|closed
init|=
name|closeRegion
argument_list|(
name|regionInfo
argument_list|,
literal|false
argument_list|,
name|zk
argument_list|,
name|versionOfClosingNode
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setClosed
argument_list|(
name|closed
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Flush a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HIGH_QOS
argument_list|)
specifier|public
name|FlushRegionResponse
name|flushRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|FlushRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushing "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|shouldFlush
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasIfOlderThanTs
argument_list|()
condition|)
block|{
name|shouldFlush
operator|=
name|region
operator|.
name|getLastFlushTime
argument_list|()
operator|<
name|request
operator|.
name|getIfOlderThanTs
argument_list|()
expr_stmt|;
block|}
name|FlushRegionResponse
operator|.
name|Builder
name|builder
init|=
name|FlushRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldFlush
condition|)
block|{
name|builder
operator|.
name|setFlushed
argument_list|(
name|region
operator|.
name|flushcache
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setLastFlushTime
argument_list|(
name|region
operator|.
name|getLastFlushTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Split a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HIGH_QOS
argument_list|)
specifier|public
name|SplitRegionResponse
name|splitRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|SplitRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Splitting "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|byte
index|[]
name|splitPoint
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasSplitPoint
argument_list|()
condition|)
block|{
name|splitPoint
operator|=
name|request
operator|.
name|getSplitPoint
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|region
operator|.
name|forceSplit
argument_list|(
name|splitPoint
argument_list|)
expr_stmt|;
name|compactSplitThread
operator|.
name|requestSplit
argument_list|(
name|region
argument_list|,
name|region
operator|.
name|checkSplit
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SplitRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Compact a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HIGH_QOS
argument_list|)
specifier|public
name|CompactRegionResponse
name|compactRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CompactRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compacting "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|major
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasMajor
argument_list|()
condition|)
block|{
name|major
operator|=
name|request
operator|.
name|getMajor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|major
condition|)
block|{
name|region
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
block|}
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|region
argument_list|,
literal|"User-triggered "
operator|+
operator|(
name|major
condition|?
literal|"major "
else|:
literal|""
operator|)
operator|+
literal|"compaction"
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
return|return
name|CompactRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Replicate WAL entries on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HIGH_QOS
argument_list|)
specifier|public
name|ReplicateWALEntryResponse
name|replicateWALEntry
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ReplicateWALEntryRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
if|if
condition|(
name|replicationSinkHandler
operator|!=
literal|null
condition|)
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HLog
operator|.
name|Entry
index|[]
name|entries
init|=
name|ProtobufUtil
operator|.
name|toHLogEntries
argument_list|(
name|request
operator|.
name|getEntryList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
operator|&&
name|entries
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|replicationSinkHandler
operator|.
name|replicateLogEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ReplicateWALEntryResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Roll the WAL writer of the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|RollWALWriterResponse
name|rollWALWriter
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|RollWALWriterRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HLog
name|wal
init|=
name|this
operator|.
name|getWAL
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|regionsToFlush
init|=
name|wal
operator|.
name|rollWriter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RollWALWriterResponse
operator|.
name|Builder
name|builder
init|=
name|RollWALWriterResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionsToFlush
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|region
range|:
name|regionsToFlush
control|)
block|{
name|builder
operator|.
name|addRegionToFlush
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Stop the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|StopServerResponse
name|stopServer
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|StopServerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|String
name|reason
init|=
name|request
operator|.
name|getReason
argument_list|()
decl_stmt|;
name|stop
argument_list|(
name|reason
argument_list|)
expr_stmt|;
return|return
name|StopServerResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get some information of the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|GetServerInfoResponse
name|getServerInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetServerInfoRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ServerName
name|serverName
init|=
name|getServerName
argument_list|()
decl_stmt|;
name|requestCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|GetServerInfoResponse
operator|.
name|Builder
name|builder
init|=
name|GetServerInfoResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setServerName
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// End Admin methods
comment|/**    * Find the HRegion based on a region specifier    *    * @param regionSpecifier the region specifier    * @return the corresponding region    * @throws IOException if the specifier is not null,    *    but failed to find the region    */
specifier|protected
name|HRegion
name|getRegion
parameter_list|(
specifier|final
name|RegionSpecifier
name|regionSpecifier
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|value
init|=
name|regionSpecifier
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|regionSpecifier
operator|.
name|getType
argument_list|()
decl_stmt|;
name|checkOpen
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REGION_NAME
case|:
return|return
name|getRegion
argument_list|(
name|value
argument_list|)
return|;
case|case
name|ENCODED_REGION_NAME
case|:
name|String
name|encodedRegionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|this
operator|.
name|onlineRegions
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotServingRegionException
argument_list|(
literal|"Region is not online: "
operator|+
name|encodedRegionName
argument_list|)
throw|;
block|}
return|return
name|region
return|;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported region specifier type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Execute an append mutation.    *    * @param region    * @param mutate    * @return    * @throws IOException    */
specifier|protected
name|Result
name|append
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|Mutate
name|mutate
parameter_list|)
throws|throws
name|IOException
block|{
name|Append
name|append
init|=
name|ProtobufUtil
operator|.
name|toAppend
argument_list|(
name|mutate
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preAppend
argument_list|(
name|append
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|append
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|region
operator|.
name|append
argument_list|(
name|append
argument_list|,
name|lock
argument_list|,
name|append
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postAppend
argument_list|(
name|append
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
comment|/**    * Execute an increment mutation.    *    * @param region    * @param mutate    * @return    * @throws IOException    */
specifier|protected
name|Result
name|increment
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|Mutate
name|mutate
parameter_list|)
throws|throws
name|IOException
block|{
name|Increment
name|increment
init|=
name|ProtobufUtil
operator|.
name|toIncrement
argument_list|(
name|mutate
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preIncrement
argument_list|(
name|increment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|increment
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|region
operator|.
name|increment
argument_list|(
name|increment
argument_list|,
name|lock
argument_list|,
name|increment
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postIncrement
argument_list|(
name|increment
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
comment|/**    * Execute a list of put mutations.    *    * @param builder    * @param region    * @param puts    */
specifier|protected
name|void
name|put
parameter_list|(
specifier|final
name|MultiResponse
operator|.
name|Builder
name|builder
parameter_list|,
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|List
argument_list|<
name|Mutate
argument_list|>
name|puts
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
index|[]
name|putsWithLocks
init|=
operator|new
name|Pair
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|ActionResult
operator|.
name|Builder
name|resultBuilder
init|=
name|ActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|NameBytesPair
name|value
init|=
name|ProtobufUtil
operator|.
name|toParameter
argument_list|(
operator|new
name|Result
argument_list|()
argument_list|)
decl_stmt|;
name|resultBuilder
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ActionResult
name|result
init|=
name|resultBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Mutate
name|put
range|:
name|puts
control|)
block|{
name|Put
name|p
init|=
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|p
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|putsWithLocks
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|p
argument_list|,
name|lock
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|requestCount
operator|.
name|addAndGet
argument_list|(
name|puts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|OperationStatus
name|codes
index|[]
init|=
name|region
operator|.
name|put
argument_list|(
name|putsWithLocks
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|codes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|codes
index|[
name|i
index|]
operator|.
name|getOperationStatusCode
argument_list|()
operator|!=
name|OperationStatusCode
operator|.
name|SUCCESS
condition|)
block|{
name|result
operator|=
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
name|codes
index|[
name|i
index|]
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setResult
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|ActionResult
name|result
init|=
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
name|ie
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|puts
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Mutate a list of rows atomically.    *    * @param region    * @param mutates    * @throws IOException    */
specifier|protected
name|void
name|mutateRows
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|List
argument_list|<
name|Mutate
argument_list|>
name|mutates
parameter_list|)
throws|throws
name|IOException
block|{
name|Mutate
name|firstMutate
init|=
name|mutates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|row
init|=
name|firstMutate
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RowMutations
name|rm
init|=
operator|new
name|RowMutations
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|Mutate
name|mutate
range|:
name|mutates
control|)
block|{
name|MutateType
name|type
init|=
name|mutate
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|mutate
operator|.
name|getMutateType
argument_list|()
condition|)
block|{
case|case
name|PUT
case|:
name|rm
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|mutate
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|rm
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|mutate
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"mutate supports atomic put and/or delete, not "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|region
operator|.
name|mutateRow
argument_list|(
name|rm
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

