begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Syncable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * HLog stores all the edits to the HStore.  Its the hbase write-ahead-log  * implementation.  *  * It performs logfile-rolling, so external callers are not aware that the  * underlying file is being rolled.  *  *<p>  * There is one HLog per RegionServer.  All edits for all Regions carried by  * a particular RegionServer are entered first in the HLog.  *  *<p>  * Each HRegion is identified by a unique long<code>int</code>. HRegions do  * not need to declare themselves before using the HLog; they simply include  * their HRegion-id in the<code>append</code> or  *<code>completeCacheFlush</code> calls.  *  *<p>  * An HLog consists of multiple on-disk files, which have a chronological order.  * As data is flushed to other (better) on-disk structures, the log becomes  * obsolete. We can destroy all the log messages for a given HRegion-id up to  * the most-recent CACHEFLUSH message from that HRegion.  *  *<p>  * It's only practical to delete entire files. Thus, we delete an entire on-disk  * file F when all of the messages in F have a log-sequence-id that's older  * (smaller) than the most-recent CACHEFLUSH message for every HRegion that has  * a message in F.  *  *<p>  * Synchronized methods can never execute in parallel. However, between the  * start of a cache flush and the completion point, appends are allowed but log  * rolling is not. To prevent log rolling taking place during this period, a  * separate reentrant lock is used.  *  *<p>To read an HLog, call {@link #getReader(org.apache.hadoop.fs.FileSystem,  * org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration)}.  *  */
end_comment

begin_class
specifier|public
class|class
name|HLog
implements|implements
name|Syncable
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HLog
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|METAFAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"METAFAMILY"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|METAROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"METAROW"
argument_list|)
decl_stmt|;
comment|/*    * Name of directory that holds recovered edits written by the wal log    * splitting code, one per region    */
specifier|private
specifier|static
specifier|final
name|String
name|RECOVERED_EDITS_DIR
init|=
literal|"recovered.edits"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|EDITFILES_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-?[0-9]+"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|dir
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Listeners that are called on WAL events.
specifier|private
name|List
argument_list|<
name|WALObserver
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|WALObserver
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|optionalFlushInterval
decl_stmt|;
specifier|private
specifier|final
name|long
name|blocksize
decl_stmt|;
specifier|private
specifier|final
name|int
name|flushlogentries
decl_stmt|;
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
specifier|private
specifier|final
name|Path
name|oldLogDir
decl_stmt|;
specifier|private
name|boolean
name|logRollRequested
decl_stmt|;
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Writer
argument_list|>
name|logWriterClass
decl_stmt|;
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Reader
argument_list|>
name|logReaderClass
decl_stmt|;
specifier|static
name|void
name|resetLogReaderClass
parameter_list|()
block|{
name|HLog
operator|.
name|logReaderClass
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|OutputStream
name|hdfs_out
decl_stmt|;
comment|// OutputStream associated with the current SequenceFile.writer
specifier|private
name|int
name|initialReplication
decl_stmt|;
comment|// initial replication factor of SequenceFile.writer
specifier|private
name|Method
name|getNumCurrentReplicas
decl_stmt|;
comment|// refers to DFSOutputStream.getNumCurrentReplicas
specifier|final
specifier|static
name|Object
index|[]
name|NO_ARGS
init|=
operator|new
name|Object
index|[]
block|{}
decl_stmt|;
comment|// used to indirectly tell syncFs to force the sync
specifier|private
name|boolean
name|forceSync
init|=
literal|false
decl_stmt|;
specifier|public
interface|interface
name|Reader
block|{
name|void
name|init
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
name|Entry
name|next
parameter_list|()
throws|throws
name|IOException
function_decl|;
name|Entry
name|next
parameter_list|(
name|Entry
name|reuse
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|long
name|getPosition
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
interface|interface
name|Writer
block|{
name|void
name|init
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
function_decl|;
name|void
name|append
parameter_list|(
name|Entry
name|entry
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|long
name|getLength
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
comment|/*    * Current log file.    */
name|Writer
name|writer
decl_stmt|;
comment|/*    * Map of all log files but the current one.    */
specifier|final
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Path
argument_list|>
name|outputfiles
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Path
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/*    * Map of regions to most recent sequence/edit id in their memstore.    * Key is encoded region name.    */
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|lastSeqWritten
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|logSeqNum
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// The timestamp (in ms) when the log file was created.
specifier|private
specifier|volatile
name|long
name|filenum
init|=
operator|-
literal|1
decl_stmt|;
comment|//number of transactions in the current Hlog.
specifier|private
specifier|final
name|AtomicInteger
name|numEntries
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// If> than this size, roll the log. This is typically 0.95 times the size
comment|// of the default Hdfs block size.
specifier|private
specifier|final
name|long
name|logrollsize
decl_stmt|;
comment|// This lock prevents starting a log roll during a cache flush.
comment|// synchronized is insufficient because a cache flush spans two method calls.
specifier|private
specifier|final
name|Lock
name|cacheFlushLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|// We synchronize on updateLock to prevent updates and to prevent a log roll
comment|// during an update
comment|// locked during appends
specifier|private
specifier|final
name|Object
name|updateLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
comment|/*    * If more than this many logs, force flush of oldest region to oldest edit    * goes to disk.  If too many and we crash, then will take forever replaying.    * Keep the number of logs tidy.    */
specifier|private
specifier|final
name|int
name|maxLogs
decl_stmt|;
comment|/**    * Thread that handles optional sync'ing    */
specifier|private
specifier|final
name|LogSyncer
name|logSyncerThread
decl_stmt|;
comment|/**    * Pattern used to validate a HLog file name    */
specifier|private
specifier|static
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*\\.\\d*"
argument_list|)
decl_stmt|;
specifier|static
name|byte
index|[]
name|COMPLETE_CACHE_FLUSH
decl_stmt|;
static|static
block|{
try|try
block|{
name|COMPLETE_CACHE_FLUSH
operator|=
literal|"HBASE::CACHEFLUSH"
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
comment|// For measuring latency of writes
specifier|private
specifier|static
specifier|volatile
name|long
name|writeOps
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|long
name|writeTime
decl_stmt|;
comment|// For measuring latency of syncs
specifier|private
specifier|static
specifier|volatile
name|long
name|syncOps
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|long
name|syncTime
decl_stmt|;
specifier|public
specifier|static
name|long
name|getWriteOps
parameter_list|()
block|{
name|long
name|ret
init|=
name|writeOps
decl_stmt|;
name|writeOps
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|long
name|getWriteTime
parameter_list|()
block|{
name|long
name|ret
init|=
name|writeTime
decl_stmt|;
name|writeTime
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|long
name|getSyncOps
parameter_list|()
block|{
name|long
name|ret
init|=
name|syncOps
decl_stmt|;
name|syncOps
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|long
name|getSyncTime
parameter_list|()
block|{
name|long
name|ret
init|=
name|syncTime
decl_stmt|;
name|syncTime
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Constructor.    *    * @param fs filesystem handle    * @param dir path to where hlogs are stored    * @param oldLogDir path to where hlogs are archived    * @param conf configuration to use    * @throws IOException    */
specifier|public
name|HLog
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|oldLogDir
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an edit log at the given<code>dir</code> location.    *    * You should never have to load an existing log. If there is a log at    * startup, it should have already been processed and deleted by the time the    * HLog object is started up.    *    * @param fs filesystem handle    * @param dir path to where hlogs are stored    * @param oldLogDir path to where hlogs are archived    * @param conf configuration to use    * @param listeners Listeners on WAL events. Listeners passed here will    * be registered before we do anything else; e.g. the    * Constructor {@link #rollWriter()}.    * @param prefix should always be hostname and port in distributed env and    *        it will be URL encoded before being used.    *        If prefix is null, "hlog" will be used    * @throws IOException    */
specifier|public
name|HLog
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|List
argument_list|<
name|WALObserver
argument_list|>
name|listeners
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|oldLogDir
argument_list|,
name|conf
argument_list|,
name|listeners
argument_list|,
literal|true
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an edit log at the given<code>dir</code> location.    *    * You should never have to load an existing log. If there is a log at    * startup, it should have already been processed and deleted by the time the    * HLog object is started up.    *    * @param fs filesystem handle    * @param dir path to where hlogs are stored    * @param oldLogDir path to where hlogs are archived    * @param conf configuration to use    * @param listeners Listeners on WAL events. Listeners passed here will    * be registered before we do anything else; e.g. the    * Constructor {@link #rollWriter()}.    * @param failIfLogDirExists If true IOException will be thrown if dir already exists.    * @param prefix should always be hostname and port in distributed env and    *        it will be URL encoded before being used.    *        If prefix is null, "hlog" will be used    * @throws IOException    */
specifier|public
name|HLog
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|List
argument_list|<
name|WALObserver
argument_list|>
name|listeners
parameter_list|,
specifier|final
name|boolean
name|failIfLogDirExists
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
name|listeners
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WALObserver
name|i
range|:
name|listeners
control|)
block|{
name|registerWALActionsListener
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|flushlogentries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.flushlogentries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|blocksize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
name|this
operator|.
name|fs
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Roll at 95% of block size.
name|float
name|multi
init|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.regionserver.logroll.multiplier"
argument_list|,
literal|0.95f
argument_list|)
decl_stmt|;
name|this
operator|.
name|logrollsize
operator|=
call|(
name|long
call|)
argument_list|(
name|this
operator|.
name|blocksize
operator|*
name|multi
argument_list|)
expr_stmt|;
name|this
operator|.
name|optionalFlushInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.optionallogflushinterval"
argument_list|,
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|failIfLogDirExists
operator|&&
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target HLog directory already exists: "
operator|+
name|dir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to mkdir "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|this
operator|.
name|oldLogDir
operator|=
name|oldLogDir
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|oldLogDir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|this
operator|.
name|oldLogDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to mkdir "
operator|+
name|this
operator|.
name|oldLogDir
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|maxLogs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|this
operator|.
name|enabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.regionserver.hlog.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HLog configuration: blocksize="
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|this
operator|.
name|blocksize
argument_list|)
operator|+
literal|", rollsize="
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|this
operator|.
name|logrollsize
argument_list|)
operator|+
literal|", enabled="
operator|+
name|this
operator|.
name|enabled
operator|+
literal|", flushlogentries="
operator|+
name|this
operator|.
name|flushlogentries
operator|+
literal|", optionallogflushinternal="
operator|+
name|this
operator|.
name|optionalFlushInterval
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
comment|// If prefix is null||empty then just name it hlog
name|this
operator|.
name|prefix
operator|=
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"hlog"
else|:
name|URLEncoder
operator|.
name|encode
argument_list|(
name|prefix
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
comment|// rollWriter sets this.hdfs_out if it can.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// handle the reflection necessary to call getNumCurrentReplicas()
name|this
operator|.
name|getNumCurrentReplicas
operator|=
literal|null
expr_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|hdfs_out
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|getNumCurrentReplicas
operator|=
name|this
operator|.
name|hdfs_out
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getNumCurrentReplicas"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
name|this
operator|.
name|getNumCurrentReplicas
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// Thrown if getNumCurrentReplicas() function isn't available
name|exception
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|// Thrown if we can't get access to getNumCurrentReplicas()
name|exception
operator|=
name|e
expr_stmt|;
name|this
operator|.
name|getNumCurrentReplicas
operator|=
literal|null
expr_stmt|;
comment|// could happen on setAccessible()
block|}
block|}
if|if
condition|(
name|this
operator|.
name|getNumCurrentReplicas
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using getNumCurrentReplicas--HDFS-826"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getNumCurrentReplicas--HDFS-826 not available; hdfs_out="
operator|+
name|this
operator|.
name|hdfs_out
operator|+
literal|", exception="
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logSyncerThread
operator|=
operator|new
name|LogSyncer
argument_list|(
name|this
operator|.
name|optionalFlushInterval
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|logSyncerThread
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".logSyncer"
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
specifier|public
name|void
name|registerWALActionsListener
parameter_list|(
specifier|final
name|WALObserver
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|unregisterWALActionsListener
parameter_list|(
specifier|final
name|WALObserver
name|listener
parameter_list|)
block|{
return|return
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @return Current state of the monotonically increasing file id.    */
end_comment

begin_function
specifier|public
name|long
name|getFilenum
parameter_list|()
block|{
return|return
name|this
operator|.
name|filenum
return|;
block|}
end_function

begin_comment
comment|/**    * Called by HRegionServer when it opens a new region to ensure that log    * sequence numbers are always greater than the latest sequence number of the    * region being brought on-line.    *    * @param newvalue We'll set log edit/sequence number to this value if it    * is greater than the current value.    */
end_comment

begin_function
specifier|public
name|void
name|setSequenceNumber
parameter_list|(
specifier|final
name|long
name|newvalue
parameter_list|)
block|{
for|for
control|(
name|long
name|id
init|=
name|this
operator|.
name|logSeqNum
operator|.
name|get
argument_list|()
init|;
name|id
operator|<
name|newvalue
operator|&&
operator|!
name|this
operator|.
name|logSeqNum
operator|.
name|compareAndSet
argument_list|(
name|id
argument_list|,
name|newvalue
argument_list|)
condition|;
name|id
operator|=
name|this
operator|.
name|logSeqNum
operator|.
name|get
argument_list|()
control|)
block|{
comment|// This could spin on occasion but better the occasional spin than locking
comment|// every increment of sequence number.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Changed sequenceid from "
operator|+
name|logSeqNum
operator|+
literal|" to "
operator|+
name|newvalue
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * @return log sequence number    */
end_comment

begin_function
specifier|public
name|long
name|getSequenceNumber
parameter_list|()
block|{
return|return
name|logSeqNum
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// usage: see TestLogRolling.java
end_comment

begin_function
name|OutputStream
name|getOutputStream
parameter_list|()
block|{
return|return
name|this
operator|.
name|hdfs_out
return|;
block|}
end_function

begin_comment
comment|/**    * Roll the log writer. That is, start writing log messages to a new file.    *    * Because a log cannot be rolled during a cache flush, and a cache flush    * spans two method calls, a special lock needs to be obtained so that a cache    * flush cannot start when the log is being rolled and the log cannot be    * rolled during a cache flush.    *    *<p>Note that this method cannot be synchronized because it is possible that    * startCacheFlush runs, obtaining the cacheFlushLock, then this method could    * start which would obtain the lock on this but block on obtaining the    * cacheFlushLock and then completeCacheFlush could be called which would wait    * for the lock on this and consequently never release the cacheFlushLock    *    * @return If lots of logs, flush the returned regions so next time through    * we can clean logs. Returns null if nothing to flush.  Names are actual    * region names as returned by {@link HRegionInfo#getEncodedName()}    * @throws org.apache.hadoop.hbase.regionserver.wal.FailedLogCloseException    * @throws IOException    */
end_comment

begin_function
specifier|public
name|byte
index|[]
index|[]
name|rollWriter
parameter_list|()
throws|throws
name|FailedLogCloseException
throws|,
name|IOException
block|{
comment|// Return if nothing to flush.
if|if
condition|(
name|this
operator|.
name|writer
operator|!=
literal|null
operator|&&
name|this
operator|.
name|numEntries
operator|.
name|get
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
index|[]
name|regionsToFlush
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|cacheFlushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
name|regionsToFlush
return|;
block|}
comment|// Do all the preparation outside of the updateLock to block
comment|// as less as possible the incoming writes
name|long
name|currentFilenum
init|=
name|this
operator|.
name|filenum
decl_stmt|;
name|this
operator|.
name|filenum
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Path
name|newPath
init|=
name|computeFilename
argument_list|()
decl_stmt|;
name|HLog
operator|.
name|Writer
name|nextWriter
init|=
name|this
operator|.
name|createWriterInstance
argument_list|(
name|fs
argument_list|,
name|newPath
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|nextInitialReplication
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|newPath
argument_list|)
operator|.
name|getReplication
argument_list|()
decl_stmt|;
comment|// Can we get at the dfsclient outputstream?  If an instance of
comment|// SFLW, it'll have done the necessary reflection to get at the
comment|// protected field name.
name|OutputStream
name|nextHdfsOut
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nextWriter
operator|instanceof
name|SequenceFileLogWriter
condition|)
block|{
name|nextHdfsOut
operator|=
operator|(
operator|(
name|SequenceFileLogWriter
operator|)
name|nextWriter
operator|)
operator|.
name|getDFSCOutputStream
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|updateLock
init|)
block|{
comment|// Clean up current writer.
name|Path
name|oldFile
init|=
name|cleanupCurrentWriter
argument_list|(
name|currentFilenum
argument_list|)
decl_stmt|;
name|this
operator|.
name|writer
operator|=
name|nextWriter
expr_stmt|;
name|this
operator|.
name|initialReplication
operator|=
name|nextInitialReplication
expr_stmt|;
name|this
operator|.
name|hdfs_out
operator|=
name|nextHdfsOut
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|(
name|oldFile
operator|!=
literal|null
condition|?
literal|"Roll "
operator|+
name|FSUtils
operator|.
name|getPath
argument_list|(
name|oldFile
argument_list|)
operator|+
literal|", entries="
operator|+
name|this
operator|.
name|numEntries
operator|.
name|get
argument_list|()
operator|+
literal|", filesize="
operator|+
name|this
operator|.
name|fs
operator|.
name|getFileStatus
argument_list|(
name|oldFile
argument_list|)
operator|.
name|getLen
argument_list|()
operator|+
literal|". "
else|:
literal|""
operator|)
operator|+
literal|"New hlog "
operator|+
name|FSUtils
operator|.
name|getPath
argument_list|(
name|newPath
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|numEntries
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|logRollRequested
operator|=
literal|false
expr_stmt|;
block|}
comment|// Tell our listeners that a new log was created
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALObserver
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|logRolled
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Can we delete any of the old log files?
if|if
condition|(
name|this
operator|.
name|outputfiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|lastSeqWritten
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Last sequenceid written is empty. Deleting all old hlogs"
argument_list|)
expr_stmt|;
comment|// If so, then no new writes have come in since all regions were
comment|// flushed (and removed from the lastSeqWritten map). Means can
comment|// remove all but currently open log file.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Path
argument_list|>
name|e
range|:
name|this
operator|.
name|outputfiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|archiveLogFile
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|outputfiles
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|regionsToFlush
operator|=
name|cleanOldLogs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|cacheFlushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|regionsToFlush
return|;
block|}
end_function

begin_comment
comment|/**    * This method allows subclasses to inject different writers without having to    * extend other methods like rollWriter().    *     * @param fs    * @param path    * @param conf    * @return Writer instance    * @throws IOException    */
end_comment

begin_function
specifier|protected
name|Writer
name|createWriterInstance
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createWriter
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Get a reader for the WAL.    * @param fs    * @param path    * @param conf    * @return A WAL reader.  Close when done with it.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|Reader
name|getReader
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|logReaderClass
operator|==
literal|null
condition|)
block|{
name|logReaderClass
operator|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|SequenceFileLogReader
operator|.
name|class
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|HLog
operator|.
name|Reader
name|reader
init|=
name|logReaderClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|reader
operator|.
name|init
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot get log reader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Get a writer for the WAL.    * @param path    * @param conf    * @return A WAL writer.  Close when done with it.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|Writer
name|createWriter
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|logWriterClass
operator|==
literal|null
condition|)
block|{
name|logWriterClass
operator|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.regionserver.hlog.writer.impl"
argument_list|,
name|SequenceFileLogWriter
operator|.
name|class
argument_list|,
name|Writer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|HLog
operator|.
name|Writer
name|writer
init|=
operator|(
name|HLog
operator|.
name|Writer
operator|)
name|logWriterClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|writer
operator|.
name|init
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|writer
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IOException
name|ie
init|=
operator|new
name|IOException
argument_list|(
literal|"cannot get log writer"
argument_list|)
decl_stmt|;
name|ie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ie
throw|;
block|}
block|}
end_function

begin_comment
comment|/*    * Clean up old commit logs.    * @return If lots of logs, flush the returned region so next time through    * we can clean logs. Returns null if nothing to flush.  Returns array of    * encoded region names to flush.    * @throws IOException    */
end_comment

begin_function
specifier|private
name|byte
index|[]
index|[]
name|cleanOldLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|Long
name|oldestOutstandingSeqNum
init|=
name|getOldestOutstandingSeqNum
argument_list|()
decl_stmt|;
comment|// Get the set of all log files whose last sequence number is smaller than
comment|// the oldest edit's sequence number.
name|TreeSet
argument_list|<
name|Long
argument_list|>
name|sequenceNumbers
init|=
operator|new
name|TreeSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|this
operator|.
name|outputfiles
operator|.
name|headMap
argument_list|(
operator|(
name|Long
operator|.
name|valueOf
argument_list|(
name|oldestOutstandingSeqNum
operator|.
name|longValue
argument_list|()
argument_list|)
operator|)
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Now remove old log files (if any)
name|int
name|logsToRemove
init|=
name|sequenceNumbers
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|logsToRemove
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// Find associated region; helps debugging.
name|byte
index|[]
name|oldestRegion
init|=
name|getOldestRegion
argument_list|(
name|oldestOutstandingSeqNum
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|logsToRemove
operator|+
literal|" hlogs to remove"
operator|+
literal|" out of total "
operator|+
name|this
operator|.
name|outputfiles
operator|.
name|size
argument_list|()
operator|+
literal|";"
operator|+
literal|" oldest outstanding sequenceid is "
operator|+
name|oldestOutstandingSeqNum
operator|+
literal|" from region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|oldestRegion
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Long
name|seq
range|:
name|sequenceNumbers
control|)
block|{
name|archiveLogFile
argument_list|(
name|this
operator|.
name|outputfiles
operator|.
name|remove
argument_list|(
name|seq
argument_list|)
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If too many log files, figure which regions we need to flush.
comment|// Array is an array of encoded region names.
name|byte
index|[]
index|[]
name|regions
init|=
literal|null
decl_stmt|;
name|int
name|logCount
init|=
name|this
operator|.
name|outputfiles
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|logCount
operator|>
name|this
operator|.
name|maxLogs
operator|&&
name|this
operator|.
name|outputfiles
operator|!=
literal|null
operator|&&
name|this
operator|.
name|outputfiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// This is an array of encoded region names.
name|regions
operator|=
name|findMemstoresWithEditsEqualOrOlderThan
argument_list|(
name|this
operator|.
name|outputfiles
operator|.
name|firstKey
argument_list|()
argument_list|,
name|this
operator|.
name|lastSeqWritten
argument_list|)
expr_stmt|;
if|if
condition|(
name|regions
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Too many hlogs: logs="
operator|+
name|logCount
operator|+
literal|", maxlogs="
operator|+
name|this
operator|.
name|maxLogs
operator|+
literal|"; forcing flush of "
operator|+
name|regions
operator|.
name|length
operator|+
literal|" regions(s): "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regions
return|;
block|}
end_function

begin_comment
comment|/**    * Return regions (memstores) that have edits that are equal or less than    * the passed<code>oldestWALseqid</code>.    * @param oldestWALseqid    * @param regionsToSeqids    * @return All regions whose seqid is< than<code>oldestWALseqid</code> (Not    * necessarily in order).  Null if no regions found.    */
end_comment

begin_function
specifier|static
name|byte
index|[]
index|[]
name|findMemstoresWithEditsEqualOrOlderThan
parameter_list|(
specifier|final
name|long
name|oldestWALseqid
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|regionsToSeqids
parameter_list|)
block|{
comment|//  This method is static so it can be unit tested the easier.
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|regionsToSeqids
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<=
name|oldestWALseqid
condition|)
block|{
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
name|regions
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regions
operator|==
literal|null
condition|?
literal|null
else|:
name|regions
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
block|}
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*    * @return Logs older than this id are safe to remove.    */
end_comment

begin_function
specifier|private
name|Long
name|getOldestOutstandingSeqNum
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|min
argument_list|(
name|this
operator|.
name|lastSeqWritten
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @param oldestOutstandingSeqNum    * @return (Encoded) name of oldest outstanding region.    */
end_comment

begin_function
specifier|private
name|byte
index|[]
name|getOldestRegion
parameter_list|(
specifier|final
name|Long
name|oldestOutstandingSeqNum
parameter_list|)
block|{
name|byte
index|[]
name|oldestRegion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|this
operator|.
name|lastSeqWritten
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
operator|==
name|oldestOutstandingSeqNum
operator|.
name|longValue
argument_list|()
condition|)
block|{
name|oldestRegion
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|oldestRegion
return|;
block|}
end_function

begin_comment
comment|/*    * Cleans up current writer closing and adding to outputfiles.    * Presumes we're operating inside an updateLock scope.    * @return Path to current writer or null if none.    * @throws IOException    */
end_comment

begin_function
specifier|private
name|Path
name|cleanupCurrentWriter
parameter_list|(
specifier|final
name|long
name|currentfilenum
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|oldFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|writer
operator|!=
literal|null
condition|)
block|{
comment|// Close the current writer, get a new one.
try|try
block|{
name|this
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Failed close of log file.  Means we're losing edits.  For now,
comment|// shut ourselves down to minimize loss.  Alternative is to try and
comment|// keep going.  See HBASE-930.
name|FailedLogCloseException
name|flce
init|=
operator|new
name|FailedLogCloseException
argument_list|(
literal|"#"
operator|+
name|currentfilenum
argument_list|)
decl_stmt|;
name|flce
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|currentfilenum
operator|>=
literal|0
condition|)
block|{
name|oldFile
operator|=
name|computeFilename
argument_list|(
name|currentfilenum
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputfiles
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|logSeqNum
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|oldFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oldFile
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|archiveLogFile
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|Long
name|seqno
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|newPath
init|=
name|getHLogArchivePath
argument_list|(
name|this
operator|.
name|oldLogDir
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"moving old hlog file "
operator|+
name|FSUtils
operator|.
name|getPath
argument_list|(
name|p
argument_list|)
operator|+
literal|" whose highest sequenceid is "
operator|+
name|seqno
operator|+
literal|" to "
operator|+
name|FSUtils
operator|.
name|getPath
argument_list|(
name|newPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|rename
argument_list|(
name|p
argument_list|,
name|newPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * This is a convenience method that computes a new filename with a given    * using the current HLog file-number    * @return Path    */
end_comment

begin_function
specifier|protected
name|Path
name|computeFilename
parameter_list|()
block|{
return|return
name|computeFilename
argument_list|(
name|this
operator|.
name|filenum
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * This is a convenience method that computes a new filename with a given    * file-number.    * @param filenum to use    * @return Path    */
end_comment

begin_function
specifier|protected
name|Path
name|computeFilename
parameter_list|(
name|long
name|filenum
parameter_list|)
block|{
if|if
condition|(
name|filenum
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"hlog file number can't be< 0"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|prefix
operator|+
literal|"."
operator|+
name|filenum
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Shut down the log and delete the log directory    *    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|closeAndDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|this
operator|.
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|Path
name|p
init|=
name|getHLogArchivePath
argument_list|(
name|this
operator|.
name|oldLogDir
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" to "
operator|+
name|p
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moved "
operator|+
name|files
operator|.
name|length
operator|+
literal|" log files to "
operator|+
name|FSUtils
operator|.
name|getPath
argument_list|(
name|this
operator|.
name|oldLogDir
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to delete "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Shut down the log.    *    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|logSyncerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// Make sure we synced everything
name|logSyncerThread
operator|.
name|join
argument_list|(
name|this
operator|.
name|optionalFlushInterval
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while waiting for syncer thread to die"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|cacheFlushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Tell our listeners that the log is closing
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALObserver
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|logCloseRequested
argument_list|()
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|updateLock
init|)
block|{
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"closing hlog writer in "
operator|+
name|this
operator|.
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheFlushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/** Append an entry to the log.    *    * @param regionInfo    * @param logEdit    * @param now Time of this edit write.    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|append
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
specifier|final
name|boolean
name|isMetaRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|regionName
init|=
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|append
argument_list|(
name|regionInfo
argument_list|,
name|makeKey
argument_list|(
name|regionName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * @param now    * @param regionName    * @param tableName    * @return New log key.    */
end_comment

begin_function
specifier|protected
name|HLogKey
name|makeKey
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|long
name|seqnum
parameter_list|,
name|long
name|now
parameter_list|)
block|{
return|return
operator|new
name|HLogKey
argument_list|(
name|regionName
argument_list|,
name|tableName
argument_list|,
name|seqnum
argument_list|,
name|now
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Append an entry to the log.    *    * @param regionInfo    * @param logEdit    * @param logKey    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|append
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot append; log is closed"
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|updateLock
init|)
block|{
name|long
name|seqNum
init|=
name|obtainSeqNum
argument_list|()
decl_stmt|;
name|logKey
operator|.
name|setLogSeqNum
argument_list|(
name|seqNum
argument_list|)
expr_stmt|;
comment|// The 'lastSeqWritten' map holds the sequence number of the oldest
comment|// write for each region (i.e. the first edit added to the particular
comment|// memstore). When the cache is flushed, the entry for the
comment|// region being flushed is removed if the sequence number of the flush
comment|// is greater than or equal to the value in lastSeqWritten.
name|this
operator|.
name|lastSeqWritten
operator|.
name|putIfAbsent
argument_list|(
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|seqNum
argument_list|)
argument_list|)
expr_stmt|;
name|doWrite
argument_list|(
name|regionInfo
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
name|this
operator|.
name|numEntries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|// Sync if catalog region, and if not then check if that table supports
comment|// deferred log flushing
if|if
condition|(
name|regionInfo
operator|.
name|isMetaRegion
argument_list|()
operator|||
operator|!
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|isDeferredLogFlush
argument_list|()
condition|)
block|{
comment|// sync txn to file system
name|this
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Append a set of edits to the log. Log edits are keyed by (encoded)    * regionName, rowname, and log-sequence-id.    *    * Later, if we sort by these keys, we obtain all the relevant edits for a    * given key-range of the HRegion (TODO). Any edits that do not have a    * matching COMPLETE_CACHEFLUSH message can be discarded.    *    *<p>    * Logs cannot be restarted once closed, or once the HLog process dies. Each    * time the HLog starts, it must create a new log. This means that other    * systems should process the log appropriately upon each startup (and prior    * to initializing HLog).    *    * synchronized prevents appends during the completion of a cache flush or for    * the duration of a log roll.    *    * @param info    * @param tableName    * @param edits    * @param now    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|append
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|WALEdit
name|edits
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|edits
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot append; log is closed"
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|updateLock
init|)
block|{
name|long
name|seqNum
init|=
name|obtainSeqNum
argument_list|()
decl_stmt|;
comment|// The 'lastSeqWritten' map holds the sequence number of the oldest
comment|// write for each region (i.e. the first edit added to the particular
comment|// memstore). . When the cache is flushed, the entry for the
comment|// region being flushed is removed if the sequence number of the flush
comment|// is greater than or equal to the value in lastSeqWritten.
comment|// Use encoded name.  Its shorter, guaranteed unique and a subset of
comment|// actual  name.
name|byte
index|[]
name|hriKey
init|=
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|this
operator|.
name|lastSeqWritten
operator|.
name|putIfAbsent
argument_list|(
name|hriKey
argument_list|,
name|seqNum
argument_list|)
expr_stmt|;
name|HLogKey
name|logKey
init|=
name|makeKey
argument_list|(
name|hriKey
argument_list|,
name|tableName
argument_list|,
name|seqNum
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|doWrite
argument_list|(
name|info
argument_list|,
name|logKey
argument_list|,
name|edits
argument_list|)
expr_stmt|;
name|this
operator|.
name|numEntries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|// Sync if catalog region, and if not then check if that table supports
comment|// deferred log flushing
if|if
condition|(
name|info
operator|.
name|isMetaRegion
argument_list|()
operator|||
operator|!
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|isDeferredLogFlush
argument_list|()
condition|)
block|{
comment|// sync txn to file system
name|this
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * This thread is responsible to call syncFs and buffer up the writers while    * it happens.    */
end_comment

begin_class
class|class
name|LogSyncer
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|long
name|optionalFlushInterval
decl_stmt|;
specifier|private
name|boolean
name|syncerShuttingDown
init|=
literal|false
decl_stmt|;
name|LogSyncer
parameter_list|(
name|long
name|optionalFlushInterval
parameter_list|)
block|{
name|this
operator|.
name|optionalFlushInterval
operator|=
name|optionalFlushInterval
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// awaiting with a timeout doesn't always
comment|// throw exceptions on interrupt
while|while
condition|(
operator|!
name|this
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|optionalFlushInterval
argument_list|)
expr_stmt|;
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while syncing, requesting close of hlog "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|requestLogRoll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" interrupted while waiting for sync requests"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|syncerShuttingDown
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" exiting"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|updateLock
init|)
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
return|return;
block|}
block|}
try|try
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Done in parallel for all writer threads, thanks to HDFS-895
name|this
operator|.
name|writer
operator|.
name|sync
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|updateLock
init|)
block|{
name|syncTime
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|now
expr_stmt|;
name|syncOps
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|logRollRequested
condition|)
block|{
name|checkLowReplication
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|writer
operator|.
name|getLength
argument_list|()
operator|>
name|this
operator|.
name|logrollsize
condition|)
block|{
name|requestLogRoll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Could not append. Requesting close of hlog"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|requestLogRoll
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|checkLowReplication
parameter_list|()
block|{
comment|// if the number of replicas in HDFS has fallen below the initial
comment|// value, then roll logs.
try|try
block|{
name|int
name|numCurrentReplicas
init|=
name|getLogReplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|numCurrentReplicas
operator|!=
literal|0
operator|&&
name|numCurrentReplicas
operator|<
name|this
operator|.
name|initialReplication
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HDFS pipeline error detected. "
operator|+
literal|"Found "
operator|+
name|numCurrentReplicas
operator|+
literal|" replicas but expecting "
operator|+
name|this
operator|.
name|initialReplication
operator|+
literal|" replicas. "
operator|+
literal|" Requesting close of hlog."
argument_list|)
expr_stmt|;
name|requestLogRoll
argument_list|()
expr_stmt|;
name|logRollRequested
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to invoke DFSOutputStream.getNumCurrentReplicas"
operator|+
name|e
operator|+
literal|" still proceeding ahead..."
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * This method gets the datanode replication count for the current HLog.    *    * If the pipeline isn't started yet or is empty, you will get the default    * replication factor.  Therefore, if this function returns 0, it means you    * are not properly running with the HDFS-826 patch.    * @throws InvocationTargetException    * @throws IllegalAccessException    * @throws IllegalArgumentException    *    * @throws Exception    */
end_comment

begin_function
name|int
name|getLogReplication
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
if|if
condition|(
name|this
operator|.
name|getNumCurrentReplicas
operator|!=
literal|null
operator|&&
name|this
operator|.
name|hdfs_out
operator|!=
literal|null
condition|)
block|{
name|Object
name|repl
init|=
name|this
operator|.
name|getNumCurrentReplicas
operator|.
name|invoke
argument_list|(
name|this
operator|.
name|hdfs_out
argument_list|,
name|NO_ARGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|repl
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|repl
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
name|boolean
name|canGetCurReplicas
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumCurrentReplicas
operator|!=
literal|null
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|hsync
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Not yet implemented up in hdfs so just call hflush.
name|sync
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|requestLogRoll
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALObserver
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|logRollRequested
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|protected
name|void
name|doWrite
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|enabled
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALObserver
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|visitLogEntryBeforeWrite
argument_list|(
name|info
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|this
operator|.
name|writer
operator|.
name|append
argument_list|(
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
name|logKey
argument_list|,
name|logEdit
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|took
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|now
decl_stmt|;
name|writeTime
operator|+=
name|took
expr_stmt|;
name|writeOps
operator|++
expr_stmt|;
if|if
condition|(
name|took
operator|>
literal|1000
condition|)
block|{
name|long
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|logEdit
operator|.
name|getKeyValues
argument_list|()
control|)
block|{
name|len
operator|+=
name|kv
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s took %d ms appending an edit to hlog; editcount=%d, len~=%s"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|took
argument_list|,
name|this
operator|.
name|numEntries
operator|.
name|get
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|len
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Could not append. Requesting close of hlog"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|requestLogRoll
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
end_function

begin_comment
comment|/** @return How many items have been added to the log */
end_comment

begin_function
name|int
name|getNumEntries
parameter_list|()
block|{
return|return
name|numEntries
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Obtain a log sequence number.    */
end_comment

begin_function
specifier|private
name|long
name|obtainSeqNum
parameter_list|()
block|{
return|return
name|this
operator|.
name|logSeqNum
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/** @return the number of log files in use */
end_comment

begin_function
name|int
name|getNumLogFiles
parameter_list|()
block|{
return|return
name|outputfiles
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * By acquiring a log sequence ID, we can allow log messages to continue while    * we flush the cache.    *    * Acquire a lock so that we do not roll the log between the start and    * completion of a cache-flush. Otherwise the log-seq-id for the flush will    * not appear in the correct logfile.    *    * @return sequence ID to pass {@link #completeCacheFlush(byte[], byte[], long, boolean)}    * (byte[], byte[], long)}    * @see #completeCacheFlush(byte[], byte[], long, boolean)    * @see #abortCacheFlush()    */
end_comment

begin_function
specifier|public
name|long
name|startCacheFlush
parameter_list|()
block|{
name|this
operator|.
name|cacheFlushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|obtainSeqNum
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Complete the cache flush    *    * Protected by cacheFlushLock    *    * @param encodedRegionName    * @param tableName    * @param logSeqId    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|completeCacheFlush
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|long
name|logSeqId
parameter_list|,
specifier|final
name|boolean
name|isMetaRegion
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|updateLock
init|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
name|completeCacheFlushLogEdit
argument_list|()
decl_stmt|;
name|HLogKey
name|key
init|=
name|makeKey
argument_list|(
name|encodedRegionName
argument_list|,
name|tableName
argument_list|,
name|logSeqId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|writer
operator|.
name|append
argument_list|(
operator|new
name|Entry
argument_list|(
name|key
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|writeTime
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|now
expr_stmt|;
name|writeOps
operator|++
expr_stmt|;
name|this
operator|.
name|numEntries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|Long
name|seq
init|=
name|this
operator|.
name|lastSeqWritten
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|seq
operator|!=
literal|null
operator|&&
name|logSeqId
operator|>=
name|seq
operator|.
name|longValue
argument_list|()
condition|)
block|{
name|this
operator|.
name|lastSeqWritten
operator|.
name|remove
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sync txn to file system
name|this
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|cacheFlushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|WALEdit
name|completeCacheFlushLogEdit
parameter_list|()
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|METAROW
argument_list|,
name|METAFAMILY
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|COMPLETE_CACHE_FLUSH
argument_list|)
decl_stmt|;
name|WALEdit
name|e
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|e
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
end_function

begin_comment
comment|/**    * Abort a cache flush.    * Call if the flush fails. Note that the only recovery for an aborted flush    * currently is a restart of the regionserver so the snapshot content dropped    * by the failure gets restored to the memstore.    */
end_comment

begin_function
specifier|public
name|void
name|abortCacheFlush
parameter_list|()
block|{
name|this
operator|.
name|cacheFlushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * @param family    * @return true if the column is a meta column    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|isMetaFamily
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|METAFAMILY
argument_list|,
name|family
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|HLogKey
argument_list|>
name|getKeyClass
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HLogKey
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.regionserver.hlog.keyclass"
argument_list|,
name|HLogKey
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|HLogKey
name|newKey
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|HLogKey
argument_list|>
name|keyClass
init|=
name|getKeyClass
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|keyClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot create hlog key"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot create hlog key"
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Utility class that lets us keep track of the edit with it's key    * Only used when splitting logs    */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|Entry
implements|implements
name|Writable
block|{
specifier|private
name|WALEdit
name|edit
decl_stmt|;
specifier|private
name|HLogKey
name|key
decl_stmt|;
specifier|public
name|Entry
parameter_list|()
block|{
name|edit
operator|=
operator|new
name|WALEdit
argument_list|()
expr_stmt|;
name|key
operator|=
operator|new
name|HLogKey
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor for both params      * @param edit log's edit      * @param key log's key      */
specifier|public
name|Entry
parameter_list|(
name|HLogKey
name|key
parameter_list|,
name|WALEdit
name|edit
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|edit
operator|=
name|edit
expr_stmt|;
block|}
comment|/**      * Gets the edit      * @return edit      */
specifier|public
name|WALEdit
name|getEdit
parameter_list|()
block|{
return|return
name|edit
return|;
block|}
comment|/**      * Gets the key      * @return key      */
specifier|public
name|HLogKey
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|key
operator|+
literal|"="
operator|+
name|this
operator|.
name|edit
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|key
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
name|this
operator|.
name|edit
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|key
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|this
operator|.
name|edit
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * Construct the HLog directory name    *    * @param info HServerInfo for server    * @return the HLog directory name    */
end_comment

begin_function
specifier|public
specifier|static
name|String
name|getHLogDirectoryName
parameter_list|(
name|HServerInfo
name|info
parameter_list|)
block|{
return|return
name|getHLogDirectoryName
argument_list|(
name|info
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Construct the HLog directory name    *    * @param serverAddress    * @param startCode    * @return the HLog directory name    */
end_comment

begin_function
specifier|public
specifier|static
name|String
name|getHLogDirectoryName
parameter_list|(
name|String
name|serverAddress
parameter_list|,
name|long
name|startCode
parameter_list|)
block|{
if|if
condition|(
name|serverAddress
operator|==
literal|null
operator|||
name|serverAddress
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getHLogDirectoryName
argument_list|(
name|HServerInfo
operator|.
name|getServerName
argument_list|(
name|serverAddress
argument_list|,
name|startCode
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Construct the HLog directory name    *    * @param serverName    * @return the HLog directory name    */
end_comment

begin_function
specifier|public
specifier|static
name|String
name|getHLogDirectoryName
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
name|StringBuilder
name|dirName
init|=
operator|new
name|StringBuilder
argument_list|(
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|dirName
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|dirName
operator|.
name|append
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
return|return
name|dirName
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Get the directory we are making logs in.    *     * @return dir    */
end_comment

begin_function
specifier|protected
name|Path
name|getDir
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|validateHLogFilename
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|filename
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
name|Path
name|getHLogArchivePath
parameter_list|(
name|Path
name|oldLogDir
parameter_list|,
name|Path
name|p
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|oldLogDir
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|String
name|formatRecoveredEditsFileName
parameter_list|(
specifier|final
name|long
name|seqid
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|seqid
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns sorted set of edit files made by wal-log splitter.    * @param fs    * @param regiondir    * @return Files in passed<code>regiondir</code> as a sorted set.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|getSplitEditFilesSorted
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|regiondir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|editsdir
init|=
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|editsdir
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Return files and only files that match the editfile names pattern.
comment|// There can be other files in this directory other than edit files.
comment|// In particular, on error, we'll move aside the bad edit file giving
comment|// it a timestamp suffix.  See moveAsideBadEditsFile.
name|Matcher
name|m
init|=
name|EDITFILES_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|fs
operator|.
name|isFile
argument_list|(
name|p
argument_list|)
operator|&&
name|m
operator|.
name|matches
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed isFile check on "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|filesSorted
init|=
operator|new
name|TreeSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
return|return
name|filesSorted
return|;
for|for
control|(
name|FileStatus
name|status
range|:
name|files
control|)
block|{
name|filesSorted
operator|.
name|add
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|filesSorted
return|;
block|}
end_function

begin_comment
comment|/**    * Move aside a bad edits file.    * @param fs    * @param edits Edits file to move aside.    * @return The name of the moved aside file.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|Path
name|moveAsideBadEditsFile
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|edits
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|moveAsideName
init|=
operator|new
name|Path
argument_list|(
name|edits
operator|.
name|getParent
argument_list|()
argument_list|,
name|edits
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|edits
argument_list|,
name|moveAsideName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rename failed from "
operator|+
name|edits
operator|+
literal|" to "
operator|+
name|moveAsideName
argument_list|)
expr_stmt|;
block|}
return|return
name|moveAsideName
return|;
block|}
end_function

begin_comment
comment|/**    * @param regiondir This regions directory in the filesystem.    * @return The directory that holds recovered edits files for the region    *<code>regiondir</code>    */
end_comment

begin_function
specifier|public
specifier|static
name|Path
name|getRegionDirRecoveredEditsDir
parameter_list|(
specifier|final
name|Path
name|regiondir
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|regiondir
argument_list|,
name|RECOVERED_EDITS_DIR
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|long
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|OBJECT
operator|+
operator|(
literal|5
operator|*
name|ClassSize
operator|.
name|REFERENCE
operator|)
operator|+
name|ClassSize
operator|.
name|ATOMIC_INTEGER
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
operator|+
operator|(
literal|3
operator|*
name|Bytes
operator|.
name|SIZEOF_LONG
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: HLog<ARGS>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Arguments:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" --dump  Dump textual representation of passed one or more files"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"         For example: HLog --dump hdfs://example.com:9000/hbase/.logs/MACHINE/LOGFILE"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" --split Split the passed directory of WAL logs"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"         For example: HLog --split hdfs://example.com:9000/hbase/.logs/DIR"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|dump
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|isFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|p
operator|+
literal|" is not a file"
argument_list|)
throw|;
block|}
name|Reader
name|log
init|=
name|getReader
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|log
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"#"
operator|+
name|count
operator|+
literal|", pos="
operator|+
name|log
operator|.
name|getPosition
argument_list|()
operator|+
literal|" "
operator|+
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|split
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|p
operator|+
literal|" is not a directory"
argument_list|)
throw|;
block|}
name|HLogSplitter
name|logSplitter
init|=
name|HLogSplitter
operator|.
name|createLogSplitter
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|logSplitter
operator|.
name|splitLog
argument_list|(
name|baseDir
argument_list|,
name|p
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Pass one or more log file names and it will either dump out a text version    * on<code>stdout</code> or split the specified log files.    *    * @param args    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|dump
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
literal|"--dump"
argument_list|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
literal|"--split"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|dump
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|usage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Path
name|logPath
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|dump
condition|)
block|{
name|dump
argument_list|(
name|conf
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|split
argument_list|(
name|conf
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

unit|}
end_unit

