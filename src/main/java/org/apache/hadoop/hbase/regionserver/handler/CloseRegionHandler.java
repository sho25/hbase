begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Handles closing of a region on a region server.  */
end_comment

begin_class
specifier|public
class|class
name|CloseRegionHandler
extends|extends
name|EventHandler
block|{
comment|// NOTE on priorities shutting down.  There are none for close. There are some
comment|// for open.  I think that is right.  On shutdown, we want the meta to close
comment|// before root and both to close after the user regions have closed.  What
comment|// about the case where master tells us to shutdown a catalog region and we
comment|// have a running queue of user regions to close?
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CloseRegionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|FAILED
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|RegionServerServices
name|rsServices
decl_stmt|;
specifier|private
specifier|final
name|HRegionInfo
name|regionInfo
decl_stmt|;
comment|// If true, the hosting server is aborting.  Region close process is different
comment|// when we are aborting.
specifier|private
specifier|final
name|boolean
name|abort
decl_stmt|;
comment|// Update zk on closing transitions. Usually true.  Its false if cluster
comment|// is going down.  In this case, its the rs that initiates the region
comment|// close -- not the master process so state up in zk will unlikely be
comment|// CLOSING.
specifier|private
specifier|final
name|boolean
name|zk
decl_stmt|;
comment|// This is executed after receiving an CLOSE RPC from the master.
specifier|public
name|CloseRegionHandler
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|rsServices
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
block|{
name|this
argument_list|(
name|server
argument_list|,
name|rsServices
argument_list|,
name|regionInfo
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method used internally by the RegionServer to close out regions.    * @param server    * @param rsServices    * @param regionInfo    * @param abort If the regionserver is aborting.    * @param zk If the close should be noted out in zookeeper.    */
specifier|public
name|CloseRegionHandler
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|rsServices
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|boolean
name|abort
parameter_list|,
specifier|final
name|boolean
name|zk
parameter_list|)
block|{
name|this
argument_list|(
name|server
argument_list|,
name|rsServices
argument_list|,
name|regionInfo
argument_list|,
name|abort
argument_list|,
name|zk
argument_list|,
name|EventType
operator|.
name|M_RS_CLOSE_REGION
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|CloseRegionHandler
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|rsServices
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|boolean
name|abort
parameter_list|,
specifier|final
name|boolean
name|zk
parameter_list|,
name|EventType
name|eventType
parameter_list|)
block|{
name|super
argument_list|(
name|server
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|rsServices
operator|=
name|rsServices
expr_stmt|;
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|abort
operator|=
name|abort
expr_stmt|;
name|this
operator|.
name|zk
operator|=
name|zk
expr_stmt|;
block|}
specifier|public
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|()
block|{
name|String
name|name
init|=
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing close of "
operator|+
name|name
argument_list|)
expr_stmt|;
name|String
name|encodedRegionName
init|=
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
comment|// Check that this region is being served here
name|HRegion
name|region
init|=
name|this
operator|.
name|rsServices
operator|.
name|getFromOnlineRegions
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received CLOSE for region "
operator|+
name|name
operator|+
literal|" but currently not serving"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|expectedVersion
init|=
name|FAILED
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|zk
condition|)
block|{
name|expectedVersion
operator|=
name|setClosingState
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectedVersion
operator|==
name|FAILED
condition|)
return|return;
block|}
comment|// Close the region
try|try
block|{
comment|// TODO: If we need to keep updating CLOSING stamp to prevent against
comment|//       a timeout if this is long-running, need to spin up a thread?
name|region
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unrecoverable exception while closing region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", still finishing close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rsServices
operator|.
name|removeFromOnlineRegions
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|zk
condition|)
name|setClosedState
argument_list|(
name|expectedVersion
argument_list|,
name|region
argument_list|)
expr_stmt|;
comment|// Done!  Region is closed on this RS
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Transition ZK node to CLOSED    * @param expectedVersion    */
specifier|private
name|void
name|setClosedState
parameter_list|(
specifier|final
name|int
name|expectedVersion
parameter_list|,
specifier|final
name|HRegion
name|region
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|regionInfo
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|expectedVersion
argument_list|)
operator|==
name|FAILED
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Completed the CLOSE of a region but when transitioning from "
operator|+
literal|" CLOSING to CLOSED got a version mismatch, someone else clashed "
operator|+
literal|"so now unassigning"
argument_list|)
expr_stmt|;
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// I've seen NPE when table was deleted while close was running in unit tests.
name|LOG
operator|.
name|warn
argument_list|(
literal|"NPE during close -- catching and continuing..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed transitioning node from CLOSING to CLOSED"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close region after failing to transition"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/**    * Create ZK node in CLOSING state.    * @return The expectedVersion.  If -1, we failed setting CLOSING.    */
specifier|private
name|int
name|setClosingState
parameter_list|()
block|{
name|int
name|expectedVersion
init|=
name|FAILED
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|expectedVersion
operator|=
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|regionInfo
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|)
operator|==
name|FAILED
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error creating node in CLOSING state, aborting close of "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error creating node in CLOSING state, aborting close of "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|expectedVersion
return|;
block|}
block|}
end_class

end_unit

