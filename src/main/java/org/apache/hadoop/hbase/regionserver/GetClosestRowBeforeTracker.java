begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|KVComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * State and utility processing {@link HRegion#getClosestRowBefore(byte[], byte[])}.  * Like {@link ScanDeleteTracker} and {@link ScanDeleteTracker} but does not  * implement the {@link DeleteTracker} interface since state spans rows (There  * is no update nor reset method).  */
end_comment

begin_class
class|class
name|GetClosestRowBeforeTracker
block|{
specifier|private
specifier|final
name|KeyValue
name|targetkey
decl_stmt|;
comment|// Any cell w/ a ts older than this is expired.
specifier|private
specifier|final
name|long
name|oldestts
decl_stmt|;
specifier|private
name|KeyValue
name|candidate
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|KVComparator
name|kvcomparator
decl_stmt|;
comment|// Flag for whether we're doing getclosest on a metaregion.
specifier|private
specifier|final
name|boolean
name|metaregion
decl_stmt|;
comment|// Offset and length into targetkey demarking table name (if in a metaregion).
specifier|private
specifier|final
name|int
name|rowoffset
decl_stmt|;
specifier|private
specifier|final
name|int
name|tablenamePlusDelimiterLength
decl_stmt|;
comment|// Deletes keyed by row.  Comparator compares on row portion of KeyValue only.
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|KeyValue
argument_list|,
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|deletes
decl_stmt|;
comment|/**    * @param c    * @param kv Presume first on row: i.e. empty column, maximum timestamp and    * a type of Type.Maximum    * @param ttl Time to live in ms for this Store    * @param metaregion True if this is .META. or -ROOT- region.    */
name|GetClosestRowBeforeTracker
parameter_list|(
specifier|final
name|KVComparator
name|c
parameter_list|,
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|long
name|ttl
parameter_list|,
specifier|final
name|boolean
name|metaregion
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|metaregion
operator|=
name|metaregion
expr_stmt|;
name|this
operator|.
name|targetkey
operator|=
name|kv
expr_stmt|;
comment|// If we are in a metaregion, then our table name is the prefix on the
comment|// targetkey.
name|this
operator|.
name|rowoffset
operator|=
name|kv
operator|.
name|getRowOffset
argument_list|()
expr_stmt|;
name|int
name|l
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|metaregion
condition|)
block|{
name|l
operator|=
name|KeyValue
operator|.
name|getDelimiter
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|rowoffset
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|HRegionInfo
operator|.
name|DELIMITER
argument_list|)
operator|-
name|this
operator|.
name|rowoffset
expr_stmt|;
block|}
name|this
operator|.
name|tablenamePlusDelimiterLength
operator|=
name|metaregion
condition|?
name|l
operator|+
literal|1
else|:
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|oldestts
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|ttl
expr_stmt|;
name|this
operator|.
name|kvcomparator
operator|=
name|c
expr_stmt|;
name|KeyValue
operator|.
name|RowComparator
name|rc
init|=
operator|new
name|KeyValue
operator|.
name|RowComparator
argument_list|(
name|this
operator|.
name|kvcomparator
argument_list|)
decl_stmt|;
name|this
operator|.
name|deletes
operator|=
operator|new
name|TreeMap
argument_list|<
name|KeyValue
argument_list|,
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param kv    * @return True if this<code>kv</code> is expired.    */
name|boolean
name|isExpired
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
return|return
name|Store
operator|.
name|isExpired
argument_list|(
name|kv
argument_list|,
name|this
operator|.
name|oldestts
argument_list|)
return|;
block|}
comment|/*    * Add the specified KeyValue to the list of deletes.    * @param kv    */
specifier|private
name|void
name|addDelete
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|rowdeletes
init|=
name|this
operator|.
name|deletes
operator|.
name|get
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowdeletes
operator|==
literal|null
condition|)
block|{
name|rowdeletes
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|kvcomparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletes
operator|.
name|put
argument_list|(
name|kv
argument_list|,
name|rowdeletes
argument_list|)
expr_stmt|;
block|}
name|rowdeletes
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param kv Adds candidate if nearer the target than previous candidate.    * @return True if updated candidate.    */
specifier|private
name|boolean
name|addCandidate
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isDeleted
argument_list|(
name|kv
argument_list|)
operator|&&
name|isBetterCandidate
argument_list|(
name|kv
argument_list|)
condition|)
block|{
name|this
operator|.
name|candidate
operator|=
name|kv
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|isBetterCandidate
parameter_list|(
specifier|final
name|KeyValue
name|contender
parameter_list|)
block|{
return|return
name|this
operator|.
name|candidate
operator|==
literal|null
operator|||
operator|(
name|this
operator|.
name|kvcomparator
operator|.
name|compareRows
argument_list|(
name|this
operator|.
name|candidate
argument_list|,
name|contender
argument_list|)
operator|<
literal|0
operator|&&
name|this
operator|.
name|kvcomparator
operator|.
name|compareRows
argument_list|(
name|contender
argument_list|,
name|this
operator|.
name|targetkey
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
comment|/*    * Check if specified KeyValue buffer has been deleted by a previously    * seen delete.    * @param kv    * @return true is the specified KeyValue is deleted, false if not    */
specifier|private
name|boolean
name|isDeleted
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|deletes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|rowdeletes
init|=
name|this
operator|.
name|deletes
operator|.
name|get
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowdeletes
operator|==
literal|null
operator|||
name|rowdeletes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|isDeleted
argument_list|(
name|kv
argument_list|,
name|rowdeletes
argument_list|)
return|;
block|}
comment|/**    * Check if the specified KeyValue buffer has been deleted by a previously    * seen delete.    * @param kv    * @param ds    * @return True is the specified KeyValue is deleted, false if not    */
specifier|public
name|boolean
name|isDeleted
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|ds
parameter_list|)
block|{
if|if
condition|(
name|deletes
operator|==
literal|null
operator|||
name|deletes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|KeyValue
name|d
range|:
name|ds
control|)
block|{
name|long
name|kvts
init|=
name|kv
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|dts
init|=
name|d
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isDeleteFamily
argument_list|()
condition|)
block|{
if|if
condition|(
name|kvts
operator|<=
name|dts
condition|)
return|return
literal|true
return|;
continue|continue;
block|}
comment|// Check column
name|int
name|ret
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|d
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|d
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|d
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|<=
operator|-
literal|1
condition|)
block|{
comment|// This delete is for an earlier column.
continue|continue;
block|}
elseif|else
if|if
condition|(
name|ret
operator|>=
literal|1
condition|)
block|{
comment|// Beyond this kv.
break|break;
block|}
comment|// Check Timestamp
if|if
condition|(
name|kvts
operator|>
name|dts
condition|)
return|return
literal|false
return|;
comment|// Check Type
switch|switch
condition|(
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|d
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|Delete
case|:
return|return
name|kvts
operator|==
name|dts
return|;
case|case
name|DeleteColumn
case|:
return|return
literal|true
return|;
default|default:
continue|continue;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/*    * Handle keys whose values hold deletes.    * Add to the set of deletes and then if the candidate keys contain any that    * might match, then check for a match and remove it.  Implies candidates    * is made with a Comparator that ignores key type.    * @param kv    * @return True if we removed<code>k</code> from<code>candidates</code>.    */
name|boolean
name|handleDeletes
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
name|addDelete
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|hasCandidate
argument_list|()
condition|)
return|return
name|deleted
return|;
if|if
condition|(
name|isDeleted
argument_list|(
name|this
operator|.
name|candidate
argument_list|)
condition|)
block|{
name|this
operator|.
name|candidate
operator|=
literal|null
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|deleted
return|;
block|}
comment|/**    * Do right thing with passed key, add to deletes or add to candidates.    * @param kv    * @return True if we added a candidate    */
name|boolean
name|handle
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
if|if
condition|(
name|kv
operator|.
name|isDelete
argument_list|()
condition|)
block|{
name|handleDeletes
argument_list|(
name|kv
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|addCandidate
argument_list|(
name|kv
argument_list|)
return|;
block|}
comment|/**    * @return True if has candidate    */
specifier|public
name|boolean
name|hasCandidate
parameter_list|()
block|{
return|return
name|this
operator|.
name|candidate
operator|!=
literal|null
return|;
block|}
comment|/**    * @return Best candidate or null.    */
specifier|public
name|KeyValue
name|getCandidate
parameter_list|()
block|{
return|return
name|this
operator|.
name|candidate
return|;
block|}
specifier|public
name|KeyValue
name|getTargetKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|targetkey
return|;
block|}
comment|/**    * @param kv Current kv    * @param First on row kv.    * @param state    * @return True if we went too far, past the target key.    */
name|boolean
name|isTooFar
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|KeyValue
name|firstOnRow
parameter_list|)
block|{
return|return
name|this
operator|.
name|kvcomparator
operator|.
name|compareRows
argument_list|(
name|kv
argument_list|,
name|firstOnRow
argument_list|)
operator|>
literal|0
return|;
block|}
name|boolean
name|isTargetTable
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
if|if
condition|(
operator|!
name|metaregion
condition|)
return|return
literal|true
return|;
comment|// Compare start of keys row.  Compare including delimiter.  Saves having
comment|// to calculate where tablename ends in the candidate kv.
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|targetkey
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|this
operator|.
name|rowoffset
argument_list|,
name|this
operator|.
name|tablenamePlusDelimiterLength
argument_list|,
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|this
operator|.
name|tablenamePlusDelimiterLength
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
end_class

end_unit

