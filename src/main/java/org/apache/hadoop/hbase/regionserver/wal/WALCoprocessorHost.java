begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|Coprocessor
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Implements the coprocessor environment and runtime support for coprocessors  * loaded within a {@link HLog}.  */
end_comment

begin_class
specifier|public
class|class
name|WALCoprocessorHost
extends|extends
name|CoprocessorHost
argument_list|<
name|WALCoprocessorHost
operator|.
name|WALEnvironment
argument_list|>
block|{
comment|/**    * Encapsulation of the environment of each coprocessor    */
specifier|static
class|class
name|WALEnvironment
extends|extends
name|CoprocessorHost
operator|.
name|Environment
implements|implements
name|WALCoprocessorEnvironment
block|{
specifier|private
name|HLog
name|wal
decl_stmt|;
annotation|@
name|Override
specifier|public
name|HLog
name|getWAL
parameter_list|()
block|{
return|return
name|wal
return|;
block|}
comment|/**      * Constructor      * @param impl the coprocessor instance      * @param priority chaining priority      * @param seq load sequence      * @param hlog HLog      */
specifier|public
name|WALEnvironment
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|,
specifier|final
name|Coprocessor
name|impl
parameter_list|,
specifier|final
name|Coprocessor
operator|.
name|Priority
name|priority
parameter_list|,
specifier|final
name|int
name|seq
parameter_list|,
specifier|final
name|HLog
name|hlog
parameter_list|)
block|{
name|super
argument_list|(
name|impl
argument_list|,
name|priority
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|this
operator|.
name|wal
operator|=
name|hlog
expr_stmt|;
block|}
block|}
name|HLog
name|wal
decl_stmt|;
comment|/**    * Constructor    * @param region the region    * @param rsServices interface to available region server functionality    * @param conf the configuration    */
specifier|public
name|WALCoprocessorHost
parameter_list|(
specifier|final
name|HLog
name|log
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|wal
operator|=
name|log
expr_stmt|;
comment|// load system default cp's from configuration.
name|loadSystemCoprocessors
argument_list|(
name|conf
argument_list|,
name|WAL_COPROCESSOR_CONF_KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WALEnvironment
name|createEnvironment
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|,
name|Coprocessor
name|instance
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|int
name|seq
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
operator|new
name|WALEnvironment
argument_list|(
name|implClass
argument_list|,
name|instance
argument_list|,
name|priority
argument_list|,
name|seq
argument_list|,
name|this
operator|.
name|wal
argument_list|)
return|;
block|}
comment|/**    * @param info    * @param logKey    * @param logEdit    * @return true if default behavior should be bypassed, false otherwise    * @throws IOException    */
specifier|public
name|boolean
name|preWALWrite
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
for|for
control|(
name|WALEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|WALObserver
condition|)
block|{
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|WALObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|preWALWrite
argument_list|(
name|env
argument_list|,
name|info
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
name|bypass
operator||=
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|bypass
return|;
block|}
comment|/**    * @param info    * @param logKey    * @param logEdit    * @throws IOException    */
specifier|public
name|void
name|postWALWrite
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|WALEnvironment
name|env
range|:
name|coprocessors
control|)
block|{
if|if
condition|(
name|env
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|WALObserver
condition|)
block|{
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|WALObserver
operator|)
name|env
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|postWALWrite
argument_list|(
name|env
argument_list|,
name|info
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|shouldComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

