begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Copyright 2010 The Apache Software Foundation * * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * This class delegates to the BlockingQueue but wraps all Stores in  * compaction requests that hold the priority and the date requested.  *  * Implementation Note: With an elevation time of -1 there is the potential for  * starvation of the lower priority compaction requests as long as there is a  * constant stream of high priority requests.  */
end_comment

begin_class
specifier|public
class|class
name|PriorityCompactionQueue
implements|implements
name|BlockingQueue
argument_list|<
name|CompactionRequest
argument_list|>
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PriorityCompactionQueue
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** The actual blocking queue we delegate to */
specifier|protected
specifier|final
name|BlockingQueue
argument_list|<
name|CompactionRequest
argument_list|>
name|queue
init|=
operator|new
name|PriorityBlockingQueue
argument_list|<
name|CompactionRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Hash map of the Stores contained within the Compaction Queue */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Pair
argument_list|<
name|HRegion
argument_list|,
name|Store
argument_list|>
argument_list|,
name|CompactionRequest
argument_list|>
name|storesInQueue
init|=
operator|new
name|HashMap
argument_list|<
name|Pair
argument_list|<
name|HRegion
argument_list|,
name|Store
argument_list|>
argument_list|,
name|CompactionRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Creates a new PriorityCompactionQueue with no priority elevation time */
specifier|public
name|PriorityCompactionQueue
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create PriorityCompactionQueue"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Pair
argument_list|<
name|HRegion
argument_list|,
name|Store
argument_list|>
name|toPair
parameter_list|(
name|CompactionRequest
name|cr
parameter_list|)
block|{
return|return
name|Pair
operator|.
name|newPair
argument_list|(
name|cr
operator|.
name|getHRegion
argument_list|()
argument_list|,
name|cr
operator|.
name|getStore
argument_list|()
argument_list|)
return|;
block|}
comment|/** If the store is not already in the queue it will add it and return a    * new compaction request object.  If it is already present in the queue    * then it will return null.    * @param p If null it will use the default priority    * @return returns a compaction request if it isn't already in the queue    */
specifier|protected
name|CompactionRequest
name|addToCompactionQueue
parameter_list|(
name|CompactionRequest
name|newRequest
parameter_list|)
block|{
name|CompactionRequest
name|queuedRequest
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|storesInQueue
init|)
block|{
name|queuedRequest
operator|=
name|storesInQueue
operator|.
name|get
argument_list|(
name|toPair
argument_list|(
name|newRequest
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|queuedRequest
operator|==
literal|null
operator|||
name|newRequest
operator|.
name|getPriority
argument_list|()
operator|<
name|queuedRequest
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|String
name|reason
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|queuedRequest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|newRequest
operator|.
name|getPriority
argument_list|()
operator|<
name|queuedRequest
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"Reason : priority changed from "
operator|+
name|queuedRequest
operator|.
name|getPriority
argument_list|()
operator|+
literal|" to "
operator|+
name|newRequest
operator|.
name|getPriority
argument_list|()
operator|+
literal|". "
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Inserting store in queue. "
operator|+
name|reason
operator|+
name|newRequest
argument_list|)
expr_stmt|;
name|storesInQueue
operator|.
name|put
argument_list|(
name|toPair
argument_list|(
name|newRequest
argument_list|)
argument_list|,
name|newRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Store already in queue, skipping. Queued: "
operator|+
name|queuedRequest
operator|+
literal|", requested: "
operator|+
name|newRequest
argument_list|)
expr_stmt|;
name|newRequest
operator|=
literal|null
expr_stmt|;
comment|// It is already present so don't add it
block|}
block|}
if|if
condition|(
name|newRequest
operator|!=
literal|null
operator|&&
name|queuedRequest
operator|!=
literal|null
condition|)
block|{
comment|// Remove the lower priority request
name|queue
operator|.
name|remove
argument_list|(
name|queuedRequest
argument_list|)
expr_stmt|;
block|}
return|return
name|newRequest
return|;
block|}
comment|/** Removes the request from the stores in queue    * @param remove    */
specifier|protected
name|CompactionRequest
name|removeFromQueue
parameter_list|(
name|CompactionRequest
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
literal|null
return|;
synchronized|synchronized
init|(
name|storesInQueue
init|)
block|{
name|CompactionRequest
name|cr
init|=
name|storesInQueue
operator|.
name|remove
argument_list|(
name|toPair
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
operator|&&
operator|!
name|cr
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|//Because we don't synchronize across both this.regionsInQueue and this.queue
comment|//a rare race condition exists where a higher priority compaction request replaces
comment|//the lower priority request in this.regionsInQueue but the lower priority request
comment|//is taken off this.queue before the higher can be added to this.queue.
comment|//So if we didn't remove what we were expecting we put it back on.
name|storesInQueue
operator|.
name|put
argument_list|(
name|toPair
argument_list|(
name|cr
argument_list|)
argument_list|,
name|cr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Removed a compaction request it couldn't find in storesInQueue: "
operator|+
literal|"region = "
operator|+
name|c
operator|.
name|getHRegion
argument_list|()
operator|+
literal|", store = "
operator|+
name|c
operator|.
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cr
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|CompactionRequest
name|e
parameter_list|)
block|{
name|CompactionRequest
name|request
init|=
name|this
operator|.
name|addToCompactionQueue
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|boolean
name|result
init|=
name|queue
operator|.
name|add
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|CompactionRequest
name|e
parameter_list|)
block|{
name|CompactionRequest
name|request
init|=
name|this
operator|.
name|addToCompactionQueue
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|(
name|request
operator|!=
literal|null
operator|)
condition|?
name|queue
operator|.
name|offer
argument_list|(
name|request
argument_list|)
else|:
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|CompactionRequest
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|CompactionRequest
name|request
init|=
name|this
operator|.
name|addToCompactionQueue
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|put
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|CompactionRequest
name|e
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|CompactionRequest
name|request
init|=
name|this
operator|.
name|addToCompactionQueue
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|(
name|request
operator|!=
literal|null
operator|)
condition|?
name|queue
operator|.
name|offer
argument_list|(
name|request
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
else|:
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionRequest
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|CompactionRequest
name|cr
init|=
name|queue
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
name|removeFromQueue
argument_list|(
name|cr
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionRequest
name|poll
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|CompactionRequest
name|cr
init|=
name|queue
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
name|removeFromQueue
argument_list|(
name|cr
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|CompactionRequest
condition|)
block|{
name|CompactionRequest
name|cr
init|=
name|removeFromQueue
argument_list|(
operator|(
name|CompactionRequest
operator|)
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionRequest
name|remove
parameter_list|()
block|{
name|CompactionRequest
name|cr
init|=
name|queue
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
name|removeFromQueue
argument_list|(
name|cr
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionRequest
name|poll
parameter_list|()
block|{
name|CompactionRequest
name|cr
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
name|removeFromQueue
argument_list|(
name|cr
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|remainingCapacity
parameter_list|()
block|{
return|return
name|queue
operator|.
name|remainingCapacity
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CompactionRequest
condition|)
block|{
synchronized|synchronized
init|(
name|storesInQueue
init|)
block|{
return|return
name|storesInQueue
operator|.
name|containsKey
argument_list|(
name|toPair
argument_list|(
operator|(
name|CompactionRequest
operator|)
name|r
argument_list|)
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|r
operator|instanceof
name|CompactionRequest
condition|)
block|{
return|return
name|queue
operator|.
name|contains
argument_list|(
name|r
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionRequest
name|element
parameter_list|()
block|{
name|CompactionRequest
name|cr
init|=
name|queue
operator|.
name|element
argument_list|()
decl_stmt|;
return|return
operator|(
name|cr
operator|!=
literal|null
operator|)
condition|?
name|cr
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionRequest
name|peek
parameter_list|()
block|{
name|CompactionRequest
name|cr
init|=
name|queue
operator|.
name|peek
argument_list|()
decl_stmt|;
return|return
operator|(
name|cr
operator|!=
literal|null
operator|)
condition|?
name|cr
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|storesInQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Unimplemented methods, collection methods
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|CompactionRequest
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|CompactionRequest
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|CompactionRequest
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|CompactionRequest
argument_list|>
name|c
parameter_list|,
name|int
name|maxElements
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

