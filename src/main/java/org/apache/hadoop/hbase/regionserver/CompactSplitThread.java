begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Compact region on request and then run split if appropriate  */
end_comment

begin_class
specifier|public
class|class
name|CompactSplitThread
implements|implements
name|CompactionRequestor
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompactSplitThread
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HRegionServer
name|server
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|ThreadPoolExecutor
name|largeCompactions
decl_stmt|;
specifier|private
specifier|final
name|ThreadPoolExecutor
name|smallCompactions
decl_stmt|;
specifier|private
specifier|final
name|ThreadPoolExecutor
name|splits
decl_stmt|;
specifier|private
specifier|final
name|long
name|throttleSize
decl_stmt|;
comment|/* The default priority for user-specified compaction requests.    * The user gets top priority unless we have blocking compactions. (Pri<= 0)    */
specifier|public
specifier|static
specifier|final
name|int
name|PRIORITY_USER
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NO_PRIORITY
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
comment|/**    * Splitting should not take place if the total number of regions exceed this.    * This is not a hard limit to the number of regions but it is a guideline to    * stop splitting after number of online regions is greater than this.    */
specifier|private
name|int
name|regionSplitLimit
decl_stmt|;
comment|/** @param server */
name|CompactSplitThread
parameter_list|(
name|HRegionServer
name|server
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|server
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionSplitLimit
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.regionSplitLimit"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|int
name|largeThreads
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.thread.compaction.large"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|smallThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.thread.compaction.small"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.thread.compaction.throttle"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|throttleSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.thread.compaction.throttle"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we have a complicated default. see HBASE-3877
name|long
name|flushSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
name|HTableDescriptor
operator|.
name|DEFAULT_MEMSTORE_FLUSH_SIZE
argument_list|)
decl_stmt|;
name|long
name|splitSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MAX_FILESIZE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_MAX_FILE_SIZE
argument_list|)
decl_stmt|;
name|throttleSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|flushSize
operator|*
literal|2
argument_list|,
name|splitSize
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
name|int
name|splitThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.thread.split"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// if we have throttle threads, make sure the user also specified size
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|smallThreads
operator|==
literal|0
operator|||
name|throttleSize
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|n
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|largeCompactions
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|largeThreads
argument_list|,
name|largeThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|PriorityBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|n
operator|+
literal|"-largeCompactions-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|largeCompactions
operator|.
name|setRejectedExecutionHandler
argument_list|(
operator|new
name|CompactionRequest
operator|.
name|Rejection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|smallThreads
operator|<=
literal|0
condition|)
block|{
name|this
operator|.
name|smallCompactions
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|smallCompactions
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|smallThreads
argument_list|,
name|smallThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|PriorityBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|n
operator|+
literal|"-smallCompactions-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|smallCompactions
operator|.
name|setRejectedExecutionHandler
argument_list|(
operator|new
name|CompactionRequest
operator|.
name|Rejection
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|splits
operator|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|splitThreads
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|n
operator|+
literal|"-splits-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"compaction_queue="
operator|+
operator|(
name|smallCompactions
operator|!=
literal|null
condition|?
literal|"("
operator|+
name|largeCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|":"
operator|+
name|smallCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|")"
else|:
name|largeCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|", split_queue="
operator|+
name|splits
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|requestSplit
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|)
block|{
comment|// don't split regions that are blocking
if|if
condition|(
name|shouldSplitRegion
argument_list|()
operator|&&
name|r
operator|.
name|getCompactPriority
argument_list|()
operator|>=
name|PRIORITY_USER
condition|)
block|{
name|byte
index|[]
name|midKey
init|=
name|r
operator|.
name|checkSplit
argument_list|()
decl_stmt|;
if|if
condition|(
name|midKey
operator|!=
literal|null
condition|)
block|{
name|requestSplit
argument_list|(
name|r
argument_list|,
name|midKey
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Wait for mid-flight schema alter requests. (if any). We don't want to execute a split    * when a schema alter is in progress as we end up in an inconsistent state.    * @param tableName    */
specifier|private
name|void
name|waitForInflightSchemaChange
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
while|while
condition|(
name|this
operator|.
name|server
operator|.
name|getSchemaChangeTracker
argument_list|()
operator|.
name|isSchemaChangeInProgress
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|requestSplit
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
name|byte
index|[]
name|midKey
parameter_list|)
block|{
if|if
condition|(
name|midKey
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Region "
operator|+
name|r
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" not splittable because midkey=null"
argument_list|)
expr_stmt|;
return|return;
block|}
name|waitForInflightSchemaChange
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTableNameAsString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|splits
operator|.
name|execute
argument_list|(
operator|new
name|SplitRequest
argument_list|(
name|r
argument_list|,
name|midKey
argument_list|,
name|this
operator|.
name|server
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Split requested for "
operator|+
name|r
operator|+
literal|".  "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ree
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not execute split for "
operator|+
name|r
argument_list|,
name|ree
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|requestCompaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|String
name|why
parameter_list|)
block|{
for|for
control|(
name|Store
name|s
range|:
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|requestCompaction
argument_list|(
name|r
argument_list|,
name|s
argument_list|,
name|why
argument_list|,
name|NO_PRIORITY
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|requestCompaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|Store
name|s
parameter_list|,
specifier|final
name|String
name|why
parameter_list|)
block|{
name|requestCompaction
argument_list|(
name|r
argument_list|,
name|s
argument_list|,
name|why
argument_list|,
name|NO_PRIORITY
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|requestCompaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|String
name|why
parameter_list|,
name|int
name|p
parameter_list|)
block|{
for|for
control|(
name|Store
name|s
range|:
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|requestCompaction
argument_list|(
name|r
argument_list|,
name|s
argument_list|,
name|why
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param r HRegion store belongs to    * @param s Store to request compaction on    * @param why Why compaction requested -- used in debug messages    * @param priority override the default priority (NO_PRIORITY == decide)    */
specifier|public
specifier|synchronized
name|void
name|requestCompaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|Store
name|s
parameter_list|,
specifier|final
name|String
name|why
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
return|return;
block|}
name|CompactionRequest
name|cr
init|=
name|s
operator|.
name|requestCompaction
argument_list|()
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
name|cr
operator|.
name|setServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|priority
operator|!=
name|NO_PRIORITY
condition|)
block|{
name|cr
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
name|ThreadPoolExecutor
name|pool
init|=
name|largeCompactions
decl_stmt|;
if|if
condition|(
name|smallCompactions
operator|!=
literal|null
operator|&&
name|throttleSize
operator|>
name|cr
operator|.
name|getSize
argument_list|()
condition|)
block|{
comment|// smallCompactions is like the 10 items or less line at Walmart
name|pool
operator|=
name|smallCompactions
expr_stmt|;
block|}
name|pool
operator|.
name|execute
argument_list|(
name|cr
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|type
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|smallCompactions
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
operator|(
name|pool
operator|==
name|smallCompactions
operator|)
condition|?
literal|"Small "
else|:
literal|"Large "
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|type
operator|+
literal|"Compaction requested: "
operator|+
name|cr
operator|+
operator|(
name|why
operator|!=
literal|null
operator|&&
operator|!
name|why
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"; Because: "
operator|+
name|why
else|:
literal|""
operator|)
operator|+
literal|"; "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Only interrupt once it's done with a run through the work loop.    */
name|void
name|interruptIfNecessary
parameter_list|()
block|{
name|splits
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|largeCompactions
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|smallCompactions
operator|!=
literal|null
condition|)
name|smallCompactions
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|waitFor
parameter_list|(
name|ThreadPoolExecutor
name|t
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
try|try
block|{
name|done
operator|=
name|t
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for "
operator|+
name|name
operator|+
literal|" to finish..."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted waiting for "
operator|+
name|name
operator|+
literal|" to finish..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|join
parameter_list|()
block|{
name|waitFor
argument_list|(
name|splits
argument_list|,
literal|"Split Thread"
argument_list|)
expr_stmt|;
name|waitFor
argument_list|(
name|largeCompactions
argument_list|,
literal|"Large Compaction Thread"
argument_list|)
expr_stmt|;
if|if
condition|(
name|smallCompactions
operator|!=
literal|null
condition|)
block|{
name|waitFor
argument_list|(
name|smallCompactions
argument_list|,
literal|"Small Compaction Thread"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the current size of the queue containing regions that are    * processed.    *    * @return The current size of the regions queue.    */
specifier|public
name|int
name|getCompactionQueueSize
parameter_list|()
block|{
name|int
name|size
init|=
name|largeCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|smallCompactions
operator|!=
literal|null
condition|)
name|size
operator|+=
name|smallCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
name|boolean
name|shouldSplitRegion
parameter_list|()
block|{
return|return
operator|(
name|regionSplitLimit
operator|>
name|server
operator|.
name|getNumberOfOnlineRegions
argument_list|()
operator|)
return|;
block|}
comment|/**    * @return the regionSplitLimit    */
specifier|public
name|int
name|getRegionSplitLimit
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionSplitLimit
return|;
block|}
block|}
end_class

end_unit

