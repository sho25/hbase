begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * A Key for an entry in the change log.  *  * The log intermingles edits to many tables and rows, so each log entry  * identifies the appropriate table and row.  Within a table and row, they're  * also sorted.  *  *<p>Some Transactional edits (START, COMMIT, ABORT) will not have an  * associated row.  */
end_comment

begin_class
specifier|public
class|class
name|HLogKey
implements|implements
name|WritableComparable
argument_list|<
name|HLogKey
argument_list|>
block|{
comment|// should be< 0 (@see #readFields(DataInput))
specifier|private
specifier|static
specifier|final
name|int
name|VERSION
init|=
operator|-
literal|1
decl_stmt|;
comment|//  The encoded region name.
specifier|private
name|byte
index|[]
name|encodedRegionName
decl_stmt|;
specifier|private
name|byte
index|[]
name|tablename
decl_stmt|;
specifier|private
name|long
name|logSeqNum
decl_stmt|;
comment|// Time at which this edit was written.
specifier|private
name|long
name|writeTime
decl_stmt|;
specifier|private
name|UUID
name|clusterId
decl_stmt|;
comment|/** Writable Consructor -- Do not use. */
specifier|public
name|HLogKey
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0L
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the log key!    * We maintain the tablename mainly for debugging purposes.    * A regionName is always a sub-table object.    *    * @param encodedRegionName Encoded name of the region as returned by    *<code>HRegionInfo#getEncodedNameAsBytes()</code>.    * @param tablename   - name of table    * @param logSeqNum   - log sequence number    * @param now Time at which this edit was written.    * @param clusterId of the cluster (used in Replication)    */
specifier|public
name|HLogKey
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|byte
index|[]
name|tablename
parameter_list|,
name|long
name|logSeqNum
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|UUID
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|encodedRegionName
operator|=
name|encodedRegionName
expr_stmt|;
name|this
operator|.
name|tablename
operator|=
name|tablename
expr_stmt|;
name|this
operator|.
name|logSeqNum
operator|=
name|logSeqNum
expr_stmt|;
name|this
operator|.
name|writeTime
operator|=
name|now
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
block|}
comment|/** @return encoded region name */
specifier|public
name|byte
index|[]
name|getEncodedRegionName
parameter_list|()
block|{
return|return
name|encodedRegionName
return|;
block|}
comment|/** @return table name */
specifier|public
name|byte
index|[]
name|getTablename
parameter_list|()
block|{
return|return
name|tablename
return|;
block|}
comment|/** @return log sequence number */
specifier|public
name|long
name|getLogSeqNum
parameter_list|()
block|{
return|return
name|logSeqNum
return|;
block|}
name|void
name|setLogSeqNum
parameter_list|(
name|long
name|logSeqNum
parameter_list|)
block|{
name|this
operator|.
name|logSeqNum
operator|=
name|logSeqNum
expr_stmt|;
block|}
comment|/**    * @return the write time    */
specifier|public
name|long
name|getWriteTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeTime
return|;
block|}
comment|/**    * Get the id of the original cluster    * @return Cluster id.    */
specifier|public
name|UUID
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
comment|/**    * Set the cluster id of this key    * @param clusterId    */
specifier|public
name|void
name|setClusterId
parameter_list|(
name|UUID
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|tablename
argument_list|)
operator|+
literal|"/"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedRegionName
argument_list|)
operator|+
literal|"/"
operator|+
name|logSeqNum
return|;
block|}
comment|/**    * Produces a string map for this key. Useful for programmatic use and    * manipulation of the data stored in an HLogKey, for example, printing     * as JSON.    *     * @return a Map containing data from this key    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toStringMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stringMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|tablename
argument_list|)
argument_list|)
expr_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
literal|"region"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|)
expr_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
literal|"sequence"
argument_list|,
name|logSeqNum
argument_list|)
expr_stmt|;
return|return
name|stringMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|HLogKey
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|Bytes
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
name|result
operator|^=
name|this
operator|.
name|logSeqNum
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|writeTime
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|clusterId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|HLogKey
name|o
parameter_list|)
block|{
name|int
name|result
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
name|o
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|logSeqNum
operator|<
name|o
operator|.
name|logSeqNum
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|logSeqNum
operator|>
name|o
operator|.
name|logSeqNum
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|writeTime
operator|<
name|o
operator|.
name|writeTime
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|writeTime
operator|>
name|o
operator|.
name|writeTime
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
comment|// why isn't cluster id accounted for?
return|return
name|result
return|;
block|}
comment|/**    * Drop this instance's tablename byte array and instead    * hold a reference to the provided tablename. This is not    * meant to be a general purpose setter - it's only used    * to collapse references to conserve memory.    */
name|void
name|internTableName
parameter_list|(
name|byte
index|[]
name|tablename
parameter_list|)
block|{
comment|// We should not use this as a setter - only to swap
comment|// in a new reference to the same table name.
assert|assert
name|Bytes
operator|.
name|equals
argument_list|(
name|tablename
argument_list|,
name|this
operator|.
name|tablename
argument_list|)
assert|;
name|this
operator|.
name|tablename
operator|=
name|tablename
expr_stmt|;
block|}
comment|/**    * Drop this instance's region name byte array and instead    * hold a reference to the provided region name. This is not    * meant to be a general purpose setter - it's only used    * to collapse references to conserve memory.    */
name|void
name|internEncodedRegionName
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|)
block|{
comment|// We should not use this as a setter - only to swap
comment|// in a new reference to the same table name.
assert|assert
name|Bytes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
name|encodedRegionName
argument_list|)
assert|;
name|this
operator|.
name|encodedRegionName
operator|=
name|encodedRegionName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|encodedRegionName
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|tablename
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|logSeqNum
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|writeTime
argument_list|)
expr_stmt|;
comment|// avoid storing 16 bytes when replication is not enabled
if|if
condition|(
name|this
operator|.
name|clusterId
operator|==
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|clusterId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|clusterId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
literal|0
decl_stmt|;
comment|// HLogKey was not versioned in the beginning.
comment|// In order to introduce it now, we make use of the fact
comment|// that encodedRegionName was written with Bytes.writeByteArray,
comment|// which encodes the array length as a vint which is>= 0.
comment|// Hence if the vint is>= 0 we have an old version and the vint
comment|// encodes the length of encodedRegionName.
comment|// If< 0 we just read the version and the next vint is the length.
comment|// @see Bytes#readByteArray(DataInput)
name|int
name|len
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
comment|// what we just read was the version
name|version
operator|=
name|len
expr_stmt|;
name|len
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|encodedRegionName
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
expr_stmt|;
name|this
operator|.
name|tablename
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|logSeqNum
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
expr_stmt|;
if|if
condition|(
name|version
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|this
operator|.
name|clusterId
operator|=
operator|new
name|UUID
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
comment|// dummy read (former byte cluster id)
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// Means it's a very old key, just continue
block|}
block|}
block|}
block|}
end_class

end_unit

