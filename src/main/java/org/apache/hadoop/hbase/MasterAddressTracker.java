begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperNodeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_comment
comment|/**  * Manages the location of the current active Master for this RegionServer.  *<p>  * Listens for ZooKeeper events related to the master address. The node  *<code>/master</code> will contain the address of the current master.  * This listener is interested in  *<code>NodeDeleted</code> and<code>NodeCreated</code> events on  *<code>/master</code>.  *<p>  * Utilizes {@link ZooKeeperNodeTracker} for zk interactions.  *<p>  * You can get the current master via {@link #getMasterAddress()}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MasterAddressTracker
extends|extends
name|ZooKeeperNodeTracker
block|{
comment|/**    * Construct a master address listener with the specified    *<code>zookeeper</code> reference.    *<p>    * This constructor does not trigger any actions, you must call methods    * explicitly.  Normally you will just want to execute {@link #start()} to    * begin tracking of the master address.    *    * @param watcher zk reference and watcher    * @param abortable abortable in case of fatal error    */
specifier|public
name|MasterAddressTracker
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|masterAddressZNode
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the address of the current master if one is available.  Returns null    * if no current master.    * @return Server name or null if timed out.    */
specifier|public
name|ServerName
name|getMasterAddress
parameter_list|()
block|{
return|return
name|bytesToServerName
argument_list|(
name|super
operator|.
name|getData
argument_list|(
literal|false
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Check if there is a master available.    * @return true if there is a master set, false if not.    */
specifier|public
name|boolean
name|hasMaster
parameter_list|()
block|{
return|return
name|super
operator|.
name|getData
argument_list|(
literal|false
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * @param bytes Byte array of {@link ServerName#toString()}    * @return A {@link ServerName} instance.    */
specifier|private
name|ServerName
name|bytesToServerName
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|bytes
operator|==
literal|null
condition|?
literal|null
else|:
name|ServerName
operator|.
name|parseVersionedServerName
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

