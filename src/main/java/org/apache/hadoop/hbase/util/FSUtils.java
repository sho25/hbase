begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HDFSBlocksDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Utility methods for interacting with the underlying file system.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|abstract
class|class
name|FSUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Full access permissions (starting point for a umask) */
specifier|private
specifier|static
specifier|final
name|String
name|FULL_RWX_PERMISSIONS
init|=
literal|"777"
decl_stmt|;
specifier|protected
name|FSUtils
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|FSUtils
name|getInstance
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|scheme
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find scheme for uri "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
operator|+
literal|", default to hdfs"
argument_list|)
expr_stmt|;
name|scheme
operator|=
literal|"hdfs"
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|fsUtilsClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.fsutil."
operator|+
name|scheme
operator|+
literal|".impl"
argument_list|,
name|FSHDFSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Default to HDFS impl
name|FSUtils
name|fsUtils
init|=
operator|(
name|FSUtils
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|fsUtilsClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|fsUtils
return|;
block|}
comment|/**    * Delete if exists.    * @param fs filesystem object    * @param dir directory to delete    * @return True if deleted<code>dir</code>    * @throws IOException e    */
specifier|public
specifier|static
name|boolean
name|deleteDirectory
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
operator|&&
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Check if directory exists.  If it does not, create it.    * @param fs filesystem object    * @param dir path to check    * @return Path    * @throws IOException e    */
specifier|public
name|Path
name|checkdir
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
comment|/**    * Create the specified file on the filesystem. By default, this will:    *<ol>    *<li>overwrite the file if it exists</li>    *<li>apply the umask in the configuration (if it is enabled)</li>    *<li>use the fs configured buffer size (or {@value DEFAULT_BUFFER_SIZE} if    * not set)</li>    *<li>use the default replication</li>    *<li>use the default block size</li>    *<li>not track progress</li>    *</ol>    *     * @param fs {@link FileSystem} on which to write the file    * @param path {@link Path} to the file to write    * @return output stream to the created file    * @throws IOException if the file cannot be created    */
specifier|public
specifier|static
name|FSDataOutputStream
name|create
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|FsPermission
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Create the specified file on the filesystem. By default, this will:    *<ol>    *<li>apply the umask in the configuration (if it is enabled)</li>    *<li>use the fs configured buffer size (or {@value DEFAULT_BUFFER_SIZE} if    * not set)</li>    *<li>use the default replication</li>    *<li>use the default block size</li>    *<li>not track progress</li>    *</ol>    *     * @param fs {@link FileSystem} on which to write the file    * @param path {@link Path} to the file to write    * @param perm    * @param overwrite Whether or not the created file should be overwritten.    * @return output stream to the created file    * @throws IOException if the file cannot be created    */
specifier|public
specifier|static
name|FSDataOutputStream
name|create
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|FsPermission
name|perm
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating file="
operator|+
name|path
operator|+
literal|" with permission="
operator|+
name|perm
argument_list|)
expr_stmt|;
return|return
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|perm
argument_list|,
name|overwrite
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get the file permissions specified in the configuration, if they are    * enabled.    *     * @param fs filesystem that the file will be created on.    * @param conf configuration to read for determining if permissions are    *          enabled and which to use    * @param permssionConfKey property key in the configuration to use when    *          finding the permission    * @return the permission to use when creating a new file on the fs. If    *         special permissions are not specified in the configuration, then    *         the default permissions on the the fs will be returned.    */
specifier|public
specifier|static
name|FsPermission
name|getFilePermissions
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|permssionConfKey
parameter_list|)
block|{
name|boolean
name|enablePermissions
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|ENABLE_DATA_FILE_UMASK
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|enablePermissions
condition|)
block|{
try|try
block|{
name|FsPermission
name|perm
init|=
operator|new
name|FsPermission
argument_list|(
name|FULL_RWX_PERMISSIONS
argument_list|)
decl_stmt|;
comment|// make sure that we have a mask, if not, go default.
name|String
name|mask
init|=
name|conf
operator|.
name|get
argument_list|(
name|permssionConfKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|mask
operator|==
literal|null
condition|)
return|return
name|FsPermission
operator|.
name|getDefault
argument_list|()
return|;
comment|// appy the umask
name|FsPermission
name|umask
init|=
operator|new
name|FsPermission
argument_list|(
name|mask
argument_list|)
decl_stmt|;
return|return
name|perm
operator|.
name|applyUMask
argument_list|(
name|umask
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Incorrect umask attempted to be created: "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|permssionConfKey
argument_list|)
operator|+
literal|", using default file permissions."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|FsPermission
operator|.
name|getDefault
argument_list|()
return|;
block|}
block|}
return|return
name|FsPermission
operator|.
name|getDefault
argument_list|()
return|;
block|}
comment|/**    * Checks to see if the specified file system is available    *    * @param fs filesystem    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|checkFileSystemAvailable
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
return|return;
block|}
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"file system close failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|IOException
name|io
init|=
operator|new
name|IOException
argument_list|(
literal|"File system is not available"
argument_list|)
decl_stmt|;
name|io
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
expr_stmt|;
throw|throw
name|io
throw|;
block|}
comment|/**    * Check whether dfs is in safemode.     * @param conf    * @throws IOException    */
specifier|public
specifier|static
name|void
name|checkDfsSafeMode
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isInSafeMode
init|=
literal|false
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
comment|// Check whether dfs is on safemode.
name|isInSafeMode
operator|=
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isInSafeMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File system is in safemode, it can't be written now"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verifies current version of file system    *    * @param fs filesystem object    * @param rootdir root hbase directory    * @return null if no version file exists, version string otherwise.    * @throws IOException e    */
specifier|public
specifier|static
name|String
name|getVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|versionFile
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
decl_stmt|;
name|String
name|version
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|versionFile
argument_list|)
condition|)
block|{
name|FSDataInputStream
name|s
init|=
name|fs
operator|.
name|open
argument_list|(
name|versionFile
argument_list|)
decl_stmt|;
try|try
block|{
name|version
operator|=
name|DataInputStream
operator|.
name|readUTF
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Version file was empty, odd, will try to set it."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|version
return|;
block|}
comment|/**    * Verifies current version of file system    *    * @param fs file system    * @param rootdir root directory of HBase installation    * @param message if true, issues a message on System.out    *    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|checkVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|boolean
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|checkVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|message
argument_list|,
literal|0
argument_list|,
name|HConstants
operator|.
name|DEFAULT_VERSION_FILE_WRITE_ATTEMPTS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies current version of file system    *    * @param fs file system    * @param rootdir root directory of HBase installation    * @param message if true, issues a message on System.out    * @param wait wait interval    * @param retries number of times to retry    *    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|checkVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|boolean
name|message
parameter_list|,
name|int
name|wait
parameter_list|,
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|version
init|=
name|getVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|rootRegionExists
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
condition|)
block|{
comment|// rootDir is empty (no version file and no root region)
comment|// just create new version file (HBASE-1195)
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|wait
argument_list|,
name|retries
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|version
operator|.
name|compareTo
argument_list|(
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
argument_list|)
operator|==
literal|0
condition|)
return|return;
comment|// version is deprecated require migration
comment|// Output on stdout so user sees it in terminal.
name|String
name|msg
init|=
literal|"File system needs to be upgraded."
operator|+
literal|"  You have version "
operator|+
name|version
operator|+
literal|" and I want version "
operator|+
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
operator|+
literal|".  Run the '${HBASE_HOME}/bin/hbase migrate' script."
decl_stmt|;
if|if
condition|(
name|message
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING! "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FileSystemVersionException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|/**    * Sets version of file system    *    * @param fs filesystem object    * @param rootdir hbase root    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|setVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
argument_list|,
literal|0
argument_list|,
name|HConstants
operator|.
name|DEFAULT_VERSION_FILE_WRITE_ATTEMPTS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets version of file system    *    * @param fs filesystem object    * @param rootdir hbase root    * @param wait time to wait for retry    * @param retries number of times to retry before failing    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|setVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|int
name|wait
parameter_list|,
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
block|{
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
argument_list|,
name|wait
argument_list|,
name|retries
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets version of file system    *    * @param fs filesystem object    * @param rootdir hbase root directory    * @param version version to set    * @param wait time to wait for retry    * @param retries number of times to retry before throwing an IOException    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|setVersion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|String
name|version
parameter_list|,
name|int
name|wait
parameter_list|,
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|versionFile
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|FSDataOutputStream
name|s
init|=
name|fs
operator|.
name|create
argument_list|(
name|versionFile
argument_list|)
decl_stmt|;
name|s
operator|.
name|writeUTF
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created version file at "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
operator|+
literal|" set its version at:"
operator|+
name|version
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|retries
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create version file at "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
operator|+
literal|", retrying: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|versionFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|wait
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|wait
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|retries
operator|--
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Checks that a cluster ID file exists in the HBase root directory    * @param fs the root directory FileSystem    * @param rootdir the HBase root directory in HDFS    * @param wait how long to wait between retries    * @return<code>true</code> if the file exists, otherwise<code>false</code>    * @throws IOException if checking the FileSystem fails    */
specifier|public
specifier|static
name|boolean
name|checkClusterIdExists
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|int
name|wait
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|CLUSTER_ID_FILE_NAME
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|wait
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to check cluster ID file in "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
operator|+
literal|", retrying in "
operator|+
name|wait
operator|+
literal|"msec: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|wait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns the value of the unique cluster ID stored for this HBase instance.    * @param fs the root directory FileSystem    * @param rootdir the path to the HBase root directory    * @return the unique cluster identifier    * @throws IOException if reading the cluster ID file fails    */
specifier|public
specifier|static
name|String
name|getClusterId
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|idPath
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|CLUSTER_ID_FILE_NAME
argument_list|)
decl_stmt|;
name|String
name|clusterId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|idPath
argument_list|)
condition|)
block|{
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|idPath
argument_list|)
decl_stmt|;
try|try
block|{
name|clusterId
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cluster ID file "
operator|+
name|idPath
operator|.
name|toString
argument_list|()
operator|+
literal|" was empty"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cluster ID file does not exist at "
operator|+
name|idPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterId
return|;
block|}
comment|/**    * Writes a new unique identifier for this cluster to the "hbase.id" file    * in the HBase root directory    * @param fs the root directory FileSystem    * @param rootdir the path to the HBase root directory    * @param clusterId the unique identifier to store    * @param wait how long (in milliseconds) to wait between retries    * @throws IOException if writing to the FileSystem fails and no wait value    */
specifier|public
specifier|static
name|void
name|setClusterId
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|int
name|wait
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|CLUSTER_ID_FILE_NAME
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|s
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|s
operator|.
name|writeUTF
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created cluster ID file at "
operator|+
name|filePath
operator|.
name|toString
argument_list|()
operator|+
literal|" with ID: "
operator|+
name|clusterId
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|wait
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create cluster ID file in "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
operator|+
literal|", retrying in "
operator|+
name|wait
operator|+
literal|"msec: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|wait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Verifies root directory path is a valid URI with a scheme    *    * @param root root directory path    * @return Passed<code>root</code> argument.    * @throws IOException if not a valid URI with a scheme    */
specifier|public
specifier|static
name|Path
name|validateRootPath
parameter_list|(
name|Path
name|root
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|URI
name|rootURI
init|=
operator|new
name|URI
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
name|rootURI
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Root directory does not have a scheme"
argument_list|)
throw|;
block|}
return|return
name|root
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|IOException
name|io
init|=
operator|new
name|IOException
argument_list|(
literal|"Root directory path is not a valid "
operator|+
literal|"URI -- check your "
operator|+
name|HConstants
operator|.
name|HBASE_DIR
operator|+
literal|" configuration"
argument_list|)
decl_stmt|;
name|io
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|io
throw|;
block|}
block|}
comment|/**    * If DFS, check safe mode and if so, wait until we clear it.    * @param conf configuration    * @param wait Sleep between retries    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|waitOnSafeMode
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|long
name|wait
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
return|return;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
comment|// Make sure dfs is not in safe mode
while|while
condition|(
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for dfs to exit safe mode..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|wait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//continue
block|}
block|}
block|}
comment|/**    * Return the 'path' component of a Path.  In Hadoop, Path is an URI.  This    * method returns the 'path' component of a Path's URI: e.g. If a Path is    *<code>hdfs://example.org:9000/hbase_trunk/TestTable/compaction.dir</code>,    * this method returns<code>/hbase_trunk/TestTable/compaction.dir</code>.    * This method is useful if you want to print out a Path without qualifying    * Filesystem instance.    * @param p Filesystem Path whose 'path' component we are to return.    * @return Path portion of the Filesystem    */
specifier|public
specifier|static
name|String
name|getPath
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**    * @param c configuration    * @return Path to hbase root directory: i.e.<code>hbase.rootdir</code> from    * configuration as a qualified Path.    * @throws IOException e    */
specifier|public
specifier|static
name|Path
name|getRootDir
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
return|;
block|}
comment|/**    * Checks if root region exists    *    * @param fs file system    * @param rootdir root directory of HBase installation    * @return true if exists    * @throws IOException e    */
specifier|public
specifier|static
name|boolean
name|rootRegionExists
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootRegionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|rootdir
argument_list|,
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|rootRegionDir
argument_list|)
return|;
block|}
comment|/**    * Compute HDFS blocks distribution of a given file, or a portion of the file    * @param fs file system    * @param status file status of the file    * @param start start position of the portion    * @param length length of the portion     * @return The HDFS blocks distribution    */
specifier|static
specifier|public
name|HDFSBlocksDistribution
name|computeHDFSBlocksDistribution
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|status
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|HDFSBlocksDistribution
name|blocksDistribution
init|=
operator|new
name|HDFSBlocksDistribution
argument_list|()
decl_stmt|;
name|BlockLocation
index|[]
name|blockLocations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockLocation
name|bl
range|:
name|blockLocations
control|)
block|{
name|String
index|[]
name|hosts
init|=
name|bl
operator|.
name|getHosts
argument_list|()
decl_stmt|;
name|long
name|len
init|=
name|bl
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|blocksDistribution
operator|.
name|addHostsAndBlockWeight
argument_list|(
name|hosts
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
return|return
name|blocksDistribution
return|;
block|}
comment|/**    * Runs through the hbase rootdir and checks all stores have only    * one file in them -- that is, they've been major compacted.  Looks    * at root and meta tables too.    * @param fs filesystem    * @param hbaseRootDir hbase root directory    * @return True if this hbase install is major compacted.    * @throws IOException e    */
specifier|public
specifier|static
name|boolean
name|isMajorCompacted
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Presumes any directory under hbase.rootdir is a table.
name|FileStatus
index|[]
name|tableDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hbaseRootDir
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|tableDir
range|:
name|tableDirs
control|)
block|{
comment|// Skip the .log directory.  All others should be tables.  Inside a table,
comment|// there are compaction.dir directories to skip.  Otherwise, all else
comment|// should be regions.  Then in each region, should only be family
comment|// directories.  Under each of these, should be one file only.
name|Path
name|d
init|=
name|tableDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|FileStatus
index|[]
name|regionDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|Path
name|dd
init|=
name|regionDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Else its a region name.  Now look in region for families.
name|FileStatus
index|[]
name|familyDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dd
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|familyDir
range|:
name|familyDirs
control|)
block|{
name|Path
name|family
init|=
name|familyDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Now in family make sure only one file.
name|FileStatus
index|[]
name|familyStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyStatus
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|family
operator|.
name|toString
argument_list|()
operator|+
literal|" has "
operator|+
name|familyStatus
operator|.
name|length
operator|+
literal|" files."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// TODO move this method OUT of FSUtils. No dependencies to HMaster
comment|/**    * Returns the total overall fragmentation percentage. Includes .META. and    * -ROOT- as well.    *    * @param master  The master defining the HBase root and file system.    * @return A map for each table and its percentage.    * @throws IOException When scanning the directory fails.    */
specifier|public
specifier|static
name|int
name|getTotalTableFragmentation
parameter_list|(
specifier|final
name|HMaster
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|getTableFragmentation
argument_list|(
name|master
argument_list|)
decl_stmt|;
return|return
name|map
operator|!=
literal|null
operator|&&
name|map
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|map
operator|.
name|get
argument_list|(
literal|"-TOTAL-"
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
comment|/**    * Runs through the HBase rootdir and checks how many stores for each table    * have more than one file in them. Checks -ROOT- and .META. too. The total    * percentage across all tables is stored under the special key "-TOTAL-".    *    * @param master  The master defining the HBase root and file system.    * @return A map for each table and its percentage.    * @throws IOException When scanning the directory fails.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getTableFragmentation
parameter_list|(
specifier|final
name|HMaster
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getRootDir
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// since HMaster.getFileSystem() is package private
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getTableFragmentation
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * Runs through the HBase rootdir and checks how many stores for each table    * have more than one file in them. Checks -ROOT- and .META. too. The total    * percentage across all tables is stored under the special key "-TOTAL-".    *    * @param fs  The file system to use.    * @param hbaseRootDir  The root directory to scan.    * @return A map for each table and its percentage.    * @throws IOException When scanning the directory fails.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getTableFragmentation
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|frags
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|cfCountTotal
init|=
literal|0
decl_stmt|;
name|int
name|cfFragTotal
init|=
literal|0
decl_stmt|;
name|DirFilter
name|df
init|=
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
decl_stmt|;
comment|// presumes any directory under hbase.rootdir is a table
name|FileStatus
index|[]
name|tableDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hbaseRootDir
argument_list|,
name|df
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|tableDir
range|:
name|tableDirs
control|)
block|{
comment|// Skip the .log directory.  All others should be tables.  Inside a table,
comment|// there are compaction.dir directories to skip.  Otherwise, all else
comment|// should be regions.  Then in each region, should only be family
comment|// directories.  Under each of these, should be one file only.
name|Path
name|d
init|=
name|tableDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|cfCount
init|=
literal|0
decl_stmt|;
name|int
name|cfFrag
init|=
literal|0
decl_stmt|;
name|FileStatus
index|[]
name|regionDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|,
name|df
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|Path
name|dd
init|=
name|regionDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// else its a region name, now look in region for families
name|FileStatus
index|[]
name|familyDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dd
argument_list|,
name|df
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|familyDir
range|:
name|familyDirs
control|)
block|{
name|cfCount
operator|++
expr_stmt|;
name|cfCountTotal
operator|++
expr_stmt|;
name|Path
name|family
init|=
name|familyDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// now in family make sure only one file
name|FileStatus
index|[]
name|familyStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyStatus
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|cfFrag
operator|++
expr_stmt|;
name|cfFragTotal
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// compute percentage per table and store in result list
name|frags
operator|.
name|put
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|,
name|Math
operator|.
name|round
argument_list|(
operator|(
name|float
operator|)
name|cfFrag
operator|/
name|cfCount
operator|*
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set overall percentage for all tables
name|frags
operator|.
name|put
argument_list|(
literal|"-TOTAL-"
argument_list|,
name|Math
operator|.
name|round
argument_list|(
operator|(
name|float
operator|)
name|cfFragTotal
operator|/
name|cfCountTotal
operator|*
literal|100
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|frags
return|;
block|}
comment|/**    * Expects to find -ROOT- directory.    * @param fs filesystem    * @param hbaseRootDir hbase root directory    * @return True if this a pre020 layout.    * @throws IOException e    */
specifier|public
specifier|static
name|boolean
name|isPre020FileLayout
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|mapfiles
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|hbaseRootDir
argument_list|,
literal|"-ROOT-"
argument_list|)
argument_list|,
literal|"70236052"
argument_list|)
argument_list|,
literal|"info"
argument_list|)
argument_list|,
literal|"mapfiles"
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|mapfiles
argument_list|)
return|;
block|}
comment|/**    * Runs through the hbase rootdir and checks all stores have only    * one file in them -- that is, they've been major compacted.  Looks    * at root and meta tables too.  This version differs from    * {@link #isMajorCompacted(FileSystem, Path)} in that it expects a    * pre-0.20.0 hbase layout on the filesystem.  Used migrating.    * @param fs filesystem    * @param hbaseRootDir hbase root directory    * @return True if this hbase install is major compacted.    * @throws IOException e    */
specifier|public
specifier|static
name|boolean
name|isMajorCompactedPre020
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Presumes any directory under hbase.rootdir is a table.
name|FileStatus
index|[]
name|tableDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hbaseRootDir
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|tableDir
range|:
name|tableDirs
control|)
block|{
comment|// Inside a table, there are compaction.dir directories to skip.
comment|// Otherwise, all else should be regions.  Then in each region, should
comment|// only be family directories.  Under each of these, should be a mapfile
comment|// and info directory and in these only one file.
name|Path
name|d
init|=
name|tableDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|FileStatus
index|[]
name|regionDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|Path
name|dd
init|=
name|regionDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Else its a region name.  Now look in region for families.
name|FileStatus
index|[]
name|familyDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dd
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|familyDir
range|:
name|familyDirs
control|)
block|{
name|Path
name|family
init|=
name|familyDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|infoAndMapfile
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Assert that only info and mapfile in family dir.
if|if
condition|(
name|infoAndMapfile
operator|.
name|length
operator|!=
literal|0
operator|&&
name|infoAndMapfile
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|family
operator|.
name|toString
argument_list|()
operator|+
literal|" has more than just info and mapfile: "
operator|+
name|infoAndMapfile
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Make sure directory named info or mapfile.
for|for
control|(
name|int
name|ll
init|=
literal|0
init|;
name|ll
operator|<
literal|2
condition|;
name|ll
operator|++
control|)
block|{
if|if
condition|(
name|infoAndMapfile
index|[
name|ll
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"info"
argument_list|)
operator|||
name|infoAndMapfile
index|[
name|ll
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"mapfiles"
argument_list|)
condition|)
continue|continue;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected directory name: "
operator|+
name|infoAndMapfile
index|[
name|ll
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Now in family, there are 'mapfile' and 'info' subdirs.  Just
comment|// look in the 'mapfile' subdir.
name|FileStatus
index|[]
name|familyStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|family
argument_list|,
literal|"mapfiles"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyStatus
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|family
operator|.
name|toString
argument_list|()
operator|+
literal|" has "
operator|+
name|familyStatus
operator|.
name|length
operator|+
literal|" files."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * A {@link PathFilter} that returns directories.    */
specifier|public
specifier|static
class|class
name|DirFilter
implements|implements
name|PathFilter
block|{
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|public
name|DirFilter
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|boolean
name|isValid
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|HConstants
operator|.
name|HBASE_NON_USER_TABLE_DIRS
operator|.
name|contains
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|isValid
operator|=
name|this
operator|.
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDir
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|isValid
return|;
block|}
block|}
comment|/**    * Heuristic to determine whether is safe or not to open a file for append    * Looks both for dfs.support.append and use reflection to search    * for SequenceFile.Writer.syncFs() or FSDataOutputStream.hflush()    * @param conf    * @return True if append support    */
specifier|public
specifier|static
name|boolean
name|isAppendSupported
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|append
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|append
condition|)
block|{
try|try
block|{
comment|// TODO: The implementation that comes back when we do a createWriter
comment|// may not be using SequenceFile so the below is not a definitive test.
comment|// Will do for now (hdfs-200).
name|SequenceFile
operator|.
name|Writer
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"syncFs"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
name|append
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|append
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|append
condition|)
block|{
comment|// Look for the 0.21, 0.22, new-style append evidence.
try|try
block|{
name|FSDataOutputStream
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"hflush"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
name|append
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|append
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

begin_return
return|return
name|append
return|;
end_return

begin_comment
unit|}
comment|/**    * @param conf    * @return True if this filesystem whose scheme is 'hdfs'.    * @throws IOException    */
end_comment

begin_function
unit|public
specifier|static
name|boolean
name|isHDFS
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
return|return
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"hdfs"
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Recover file lease. Used when a file might be suspect     * to be had been left open by another process.    * @param fs FileSystem handle    * @param p Path of file to recover lease    * @param conf Configuration handle    * @throws IOException    */
end_comment

begin_function_decl
specifier|public
specifier|abstract
name|void
name|recoverFileLease
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
function_decl|;
end_function_decl

begin_comment
comment|/**    * @param fs    * @param rootdir    * @return All the table directories under<code>rootdir</code>. Ignore non table hbase folders such as    * .logs, .oldlogs, .corrupt, .META., and -ROOT- folders.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|getTableDirs
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// presumes any directory under hbase.rootdir is a table
name|FileStatus
index|[]
name|dirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootdir
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|tabledirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|dirs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|dir
range|:
name|dirs
control|)
block|{
name|Path
name|p
init|=
name|dir
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|HConstants
operator|.
name|HBASE_NON_USER_TABLE_DIRS
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|tabledirs
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tabledirs
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Path
name|getTablePath
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
block|{
return|return
name|getTablePath
argument_list|(
name|rootdir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Path
name|getTablePath
parameter_list|(
name|Path
name|rootdir
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|tableName
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @param conf    * @return Returns the filesystem of the hbase rootdir.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|FileSystem
name|getCurrentFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRootDir
argument_list|(
name|conf
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Runs through the HBase rootdir and creates a reverse lookup map for     * table StoreFile names to the full Path.     *<br>    * Example...<br>    * Key = 3944417774205889744<br>    * Value = hdfs://localhost:51169/user/userid/-ROOT-/70236052/info/3944417774205889744    *    * @param fs  The file system to use.    * @param hbaseRootDir  The root directory to scan.    * @return Map keyed by StoreFile name with a value of the full Path.    * @throws IOException When scanning the directory fails.    */
end_comment

begin_function
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|getTableStoreFilePathMap
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|hbaseRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|// if this method looks similar to 'getTableFragmentation' that is because
comment|// it was borrowed from it.
name|DirFilter
name|df
init|=
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
decl_stmt|;
comment|// presumes any directory under hbase.rootdir is a table
name|FileStatus
index|[]
name|tableDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hbaseRootDir
argument_list|,
name|df
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|tableDir
range|:
name|tableDirs
control|)
block|{
comment|// Skip the .log directory.  All others should be tables.  Inside a table,
comment|// there are compaction.dir directories to skip.  Otherwise, all else
comment|// should be regions.
name|Path
name|d
init|=
name|tableDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|FileStatus
index|[]
name|regionDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|,
name|df
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|regionDirs
control|)
block|{
name|Path
name|dd
init|=
name|regionDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// else its a region name, now look in region for families
name|FileStatus
index|[]
name|familyDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dd
argument_list|,
name|df
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|familyDir
range|:
name|familyDirs
control|)
block|{
name|Path
name|family
init|=
name|familyDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// now in family, iterate over the StoreFiles and
comment|// put in map
name|FileStatus
index|[]
name|familyStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|family
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|sfStatus
range|:
name|familyStatus
control|)
block|{
name|Path
name|sf
init|=
name|sfStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|sf
operator|.
name|getName
argument_list|()
argument_list|,
name|sf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|map
return|;
block|}
end_function

begin_comment
comment|/**    * Calls fs.listStatus() and treats FileNotFoundException as non-fatal    * This would accommodate difference in various hadoop versions    *     * @param fs file system    * @param dir directory    * @param filter path filter    * @return null if tabledir doesn't exist, otherwise FileStatus array    */
end_comment

begin_function
specifier|public
specifier|static
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|status
operator|=
name|filter
operator|==
literal|null
condition|?
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
else|:
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// if directory doesn't exist, return null
name|LOG
operator|.
name|info
argument_list|(
name|dir
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|length
operator|<
literal|1
condition|)
return|return
literal|null
return|;
return|return
name|status
return|;
block|}
end_function

unit|}
end_unit

