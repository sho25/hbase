begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A generic, immutable class for pairs of objects both of type<code>T</code>.  * @param<T>  * @see Pair if Types differ.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|PairOfSameType
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|T
name|first
decl_stmt|;
specifier|private
specifier|final
name|T
name|second
decl_stmt|;
comment|/**    * Constructor    * @param a operand    * @param b operand    */
specifier|public
name|PairOfSameType
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|second
operator|=
name|b
expr_stmt|;
block|}
comment|/**    * Return the first element stored in the pair.    * @return T    */
specifier|public
name|T
name|getFirst
parameter_list|()
block|{
return|return
name|first
return|;
block|}
comment|/**    * Return the second element stored in the pair.    * @return T    */
specifier|public
name|T
name|getSecond
parameter_list|()
block|{
return|return
name|second
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
name|Object
name|x
parameter_list|,
name|Object
name|y
parameter_list|)
block|{
return|return
operator|(
name|x
operator|==
literal|null
operator|&&
name|y
operator|==
literal|null
operator|)
operator|||
operator|(
name|x
operator|!=
literal|null
operator|&&
name|x
operator|.
name|equals
argument_list|(
name|y
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
operator|instanceof
name|PairOfSameType
operator|&&
name|equals
argument_list|(
name|first
argument_list|,
operator|(
operator|(
name|PairOfSameType
operator|)
name|other
operator|)
operator|.
name|first
argument_list|)
operator|&&
name|equals
argument_list|(
name|second
argument_list|,
operator|(
operator|(
name|PairOfSameType
operator|)
name|other
operator|)
operator|.
name|second
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return
operator|(
name|second
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|second
operator|.
name|hashCode
argument_list|()
operator|+
literal|1
return|;
elseif|else
if|if
condition|(
name|second
operator|==
literal|null
condition|)
return|return
name|first
operator|.
name|hashCode
argument_list|()
operator|+
literal|2
return|;
else|else
return|return
name|first
operator|.
name|hashCode
argument_list|()
operator|*
literal|17
operator|+
name|second
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
name|getFirst
argument_list|()
operator|+
literal|","
operator|+
name|getSecond
argument_list|()
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|returned
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|this
operator|.
name|returned
operator|<
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
operator|++
name|this
operator|.
name|returned
operator|==
literal|1
condition|)
return|return
name|getFirst
argument_list|()
return|;
elseif|else
if|if
condition|(
name|this
operator|.
name|returned
operator|==
literal|2
condition|)
return|return
name|getSecond
argument_list|()
return|;
else|else
throw|throw
operator|new
name|IllegalAccessError
argument_list|(
literal|"this.returned="
operator|+
name|this
operator|.
name|returned
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

