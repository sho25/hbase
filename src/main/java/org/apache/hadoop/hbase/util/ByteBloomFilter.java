begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Implements a<i>Bloom filter</i>, as defined by Bloom in 1970.  *<p>  * The Bloom filter is a data structure that was introduced in 1970 and that has  * been adopted by the networking research community in the past decade thanks  * to the bandwidth efficiencies that it offers for the transmission of set  * membership information between networked hosts. A sender encodes the  * information into a bit vector, the Bloom filter, that is more compact than a  * conventional representation. Computation and space costs for construction are  * linear in the number of elements. The receiver uses the filter to test  * whether various elements are members of the set. Though the filter will  * occasionally return a false positive, it will never return a false negative.  * When creating the filter, the sender can choose its desired point in a  * trade-off between the false positive rate and the size.  *  *<p>  * Originally inspired by<a href="http://www.one-lab.org">European Commission  * One-Lab Project 034819</a>.  *  * Bloom filters are very sensitive to the number of elements inserted into  * them. For HBase, the number of entries depends on the size of the data stored  * in the column. Currently the default region size is 256MB, so entry count ~=  * 256MB / (average value size for column). Despite this rule of thumb, there is  * no efficient way to calculate the entry count after compactions. Therefore,  * it is often easier to use a dynamic bloom filter that will add extra space  * instead of allowing the error rate to grow.  *  * ( http://www.eecs.harvard.edu/~michaelm/NEWWORK/postscripts/BloomFilterSurvey  * .pdf )  *  * m denotes the number of bits in the Bloom filter (bitSize) n denotes the  * number of elements inserted into the Bloom filter (maxKeys) k represents the  * number of hash functions used (nbHash) e represents the desired false  * positive rate for the bloom (err)  *  * If we fix the error rate (e) and know the number of entries, then the optimal  * bloom size m = -(n * ln(err) / (ln(2)^2) ~= n * ln(err) / ln(0.6185)  *  * The probability of false positives is minimized when k = m/n ln(2).  *  * @see BloomFilter The general behavior of a filter  *  * @see<a  *      href="http://portal.acm.org/citation.cfm?id=362692&dl=ACM&coll=portal">  *      Space/Time Trade-Offs in Hash Coding with Allowable Errors</a>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ByteBloomFilter
implements|implements
name|BloomFilter
implements|,
name|BloomFilterWriter
block|{
comment|/** Current file format version */
specifier|public
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
comment|/** Bytes (B) in the array. This actually has to fit into an int. */
specifier|protected
name|long
name|byteSize
decl_stmt|;
comment|/** Number of hash functions */
specifier|protected
name|int
name|hashCount
decl_stmt|;
comment|/** Hash type */
specifier|protected
specifier|final
name|int
name|hashType
decl_stmt|;
comment|/** Hash Function */
specifier|protected
specifier|final
name|Hash
name|hash
decl_stmt|;
comment|/** Keys currently in the bloom */
specifier|protected
name|int
name|keyCount
decl_stmt|;
comment|/** Max Keys expected for the bloom */
specifier|protected
name|int
name|maxKeys
decl_stmt|;
comment|/** Bloom bits */
specifier|protected
name|ByteBuffer
name|bloom
decl_stmt|;
comment|/** Record separator for the Bloom filter statistics human-readable string */
specifier|public
specifier|static
specifier|final
name|String
name|STATS_RECORD_SEP
init|=
literal|"; "
decl_stmt|;
comment|/**    * Used in computing the optimal Bloom filter size. This approximately equals    * 0.480453.    */
specifier|public
specifier|static
specifier|final
name|double
name|LOG2_SQUARED
init|=
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|/**    * A random number generator to use for "fake lookups" when testing to    * estimate the ideal false positive rate.    */
specifier|private
specifier|static
name|Random
name|randomGeneratorForTest
decl_stmt|;
comment|/** Bit-value lookup array to prevent doing the same work over and over */
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bitvals
init|=
block|{
operator|(
name|byte
operator|)
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x02
block|,
operator|(
name|byte
operator|)
literal|0x04
block|,
operator|(
name|byte
operator|)
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0x10
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x80
block|}
decl_stmt|;
comment|/**    * Loads bloom filter meta data from file input.    * @param meta stored bloom meta data    * @throws IllegalArgumentException meta data is invalid    */
specifier|public
name|ByteBloomFilter
parameter_list|(
name|DataInput
name|meta
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
name|this
operator|.
name|byteSize
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|hashCount
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|hashType
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|keyCount
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxKeys
operator|=
name|this
operator|.
name|keyCount
expr_stmt|;
name|this
operator|.
name|hash
operator|=
name|Hash
operator|.
name|getInstance
argument_list|(
name|this
operator|.
name|hashType
argument_list|)
expr_stmt|;
if|if
condition|(
name|hash
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid hash type: "
operator|+
name|hashType
argument_list|)
throw|;
block|}
name|sanityCheck
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param maxKeys    * @param errorRate    * @return the number of bits for a Bloom filter than can hold the given    *         number of keys and provide the given error rate, assuming that the    *         optimal number of hash functions is used and it does not have to    *         be an integer.    */
specifier|public
specifier|static
name|long
name|computeBitSize
parameter_list|(
name|long
name|maxKeys
parameter_list|,
name|double
name|errorRate
parameter_list|)
block|{
return|return
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|maxKeys
operator|*
operator|(
operator|-
name|Math
operator|.
name|log
argument_list|(
name|errorRate
argument_list|)
operator|/
name|LOG2_SQUARED
operator|)
argument_list|)
return|;
block|}
comment|/**    * The maximum number of keys we can put into a Bloom filter of a certain    * size to maintain the given error rate, assuming the number of hash    * functions is chosen optimally and does not even have to be an integer    * (hence the "ideal" in the function name).    *    * @param bitSize    * @param errorRate    * @return maximum number of keys that can be inserted into the Bloom filter    * @see #computeMaxKeys(long, double, int) for a more precise estimate    */
specifier|public
specifier|static
name|long
name|idealMaxKeys
parameter_list|(
name|long
name|bitSize
parameter_list|,
name|double
name|errorRate
parameter_list|)
block|{
comment|// The reason we need to use floor here is that otherwise we might put
comment|// more keys in a Bloom filter than is allowed by the target error rate.
return|return
call|(
name|long
call|)
argument_list|(
name|bitSize
operator|*
operator|(
name|LOG2_SQUARED
operator|/
operator|-
name|Math
operator|.
name|log
argument_list|(
name|errorRate
argument_list|)
operator|)
argument_list|)
return|;
block|}
comment|/**    * The maximum number of keys we can put into a Bloom filter of a certain    * size to get the given error rate, with the given number of hash functions.    *    * @param bitSize    * @param errorRate    * @param hashCount    * @return the maximum number of keys that can be inserted in a Bloom filter    *         to maintain the target error rate, if the number of hash functions    *         is provided.    */
specifier|public
specifier|static
name|long
name|computeMaxKeys
parameter_list|(
name|long
name|bitSize
parameter_list|,
name|double
name|errorRate
parameter_list|,
name|int
name|hashCount
parameter_list|)
block|{
return|return
call|(
name|long
call|)
argument_list|(
operator|-
name|bitSize
operator|*
literal|1.0
operator|/
name|hashCount
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|1
operator|-
name|Math
operator|.
name|exp
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|errorRate
argument_list|)
operator|/
name|hashCount
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Computes the error rate for this Bloom filter, taking into account the    * actual number of hash functions and keys inserted. The return value of    * this function changes as a Bloom filter is being populated. Used for    * reporting the actual error rate of compound Bloom filters when writing    * them out.    *    * @return error rate for this particular Bloom filter    */
specifier|public
name|double
name|actualErrorRate
parameter_list|()
block|{
return|return
name|actualErrorRate
argument_list|(
name|keyCount
argument_list|,
name|byteSize
operator|*
literal|8
argument_list|,
name|hashCount
argument_list|)
return|;
block|}
comment|/**    * Computes the actual error rate for the given number of elements, number    * of bits, and number of hash functions. Taken directly from the    *<a href=    * "http://en.wikipedia.org/wiki/Bloom_filter#Probability_of_false_positives"    *> Wikipedia Bloom filter article</a>.    *    * @param maxKeys    * @param bitSize    * @param functionCount    * @return the actual error rate    */
specifier|public
specifier|static
name|double
name|actualErrorRate
parameter_list|(
name|long
name|maxKeys
parameter_list|,
name|long
name|bitSize
parameter_list|,
name|int
name|functionCount
parameter_list|)
block|{
return|return
name|Math
operator|.
name|exp
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|1
operator|-
name|Math
operator|.
name|exp
argument_list|(
operator|-
name|functionCount
operator|*
name|maxKeys
operator|*
literal|1.0
operator|/
name|bitSize
argument_list|)
argument_list|)
operator|*
name|functionCount
argument_list|)
return|;
block|}
comment|/**    * Increases the given byte size of a Bloom filter until it can be folded by    * the given factor.    *    * @param bitSize    * @param foldFactor    * @return Foldable byte size    */
specifier|public
specifier|static
name|int
name|computeFoldableByteSize
parameter_list|(
name|long
name|bitSize
parameter_list|,
name|int
name|foldFactor
parameter_list|)
block|{
name|long
name|byteSizeLong
init|=
operator|(
name|bitSize
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|int
name|mask
init|=
operator|(
literal|1
operator|<<
name|foldFactor
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|mask
operator|&
name|byteSizeLong
operator|)
operator|!=
literal|0
condition|)
block|{
name|byteSizeLong
operator|>>=
name|foldFactor
expr_stmt|;
operator|++
name|byteSizeLong
expr_stmt|;
name|byteSizeLong
operator|<<=
name|foldFactor
expr_stmt|;
block|}
if|if
condition|(
name|byteSizeLong
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"byteSize="
operator|+
name|byteSizeLong
operator|+
literal|" too "
operator|+
literal|"large for bitSize="
operator|+
name|bitSize
operator|+
literal|", foldFactor="
operator|+
name|foldFactor
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|byteSizeLong
return|;
block|}
specifier|private
specifier|static
name|int
name|optimalFunctionCount
parameter_list|(
name|int
name|maxKeys
parameter_list|,
name|long
name|bitSize
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|*
operator|(
name|bitSize
operator|/
name|maxKeys
operator|)
argument_list|)
return|;
block|}
comment|/** Private constructor used by other constructors. */
specifier|private
name|ByteBloomFilter
parameter_list|(
name|int
name|hashType
parameter_list|)
block|{
name|this
operator|.
name|hashType
operator|=
name|hashType
expr_stmt|;
name|this
operator|.
name|hash
operator|=
name|Hash
operator|.
name|getInstance
argument_list|(
name|hashType
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determines& initializes bloom filter meta data from user config. Call    * {@link #allocBloom()} to allocate bloom filter data.    *    * @param maxKeys Maximum expected number of keys that will be stored in this    *          bloom    * @param errorRate Desired false positive error rate. Lower rate = more    *          storage required    * @param hashType Type of hash function to use    * @param foldFactor When finished adding entries, you may be able to 'fold'    *          this bloom to save space. Tradeoff potentially excess bytes in    *          bloom for ability to fold if keyCount is exponentially greater    *          than maxKeys.    * @throws IllegalArgumentException    */
specifier|public
name|ByteBloomFilter
parameter_list|(
name|int
name|maxKeys
parameter_list|,
name|double
name|errorRate
parameter_list|,
name|int
name|hashType
parameter_list|,
name|int
name|foldFactor
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
argument_list|(
name|hashType
argument_list|)
expr_stmt|;
name|long
name|bitSize
init|=
name|computeBitSize
argument_list|(
name|maxKeys
argument_list|,
name|errorRate
argument_list|)
decl_stmt|;
name|hashCount
operator|=
name|optimalFunctionCount
argument_list|(
name|maxKeys
argument_list|,
name|bitSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxKeys
operator|=
name|maxKeys
expr_stmt|;
comment|// increase byteSize so folding is possible
name|byteSize
operator|=
name|computeFoldableByteSize
argument_list|(
name|bitSize
argument_list|,
name|foldFactor
argument_list|)
expr_stmt|;
name|sanityCheck
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a Bloom filter of the given size.    *    * @param byteSizeHint the desired number of bytes for the Bloom filter bit    *          array. Will be increased so that folding is possible.    * @param errorRate target false positive rate of the Bloom filter    * @param hashType Bloom filter hash function type    * @param foldFactor    * @return the new Bloom filter of the desired size    */
specifier|public
specifier|static
name|ByteBloomFilter
name|createBySize
parameter_list|(
name|int
name|byteSizeHint
parameter_list|,
name|double
name|errorRate
parameter_list|,
name|int
name|hashType
parameter_list|,
name|int
name|foldFactor
parameter_list|)
block|{
name|ByteBloomFilter
name|bbf
init|=
operator|new
name|ByteBloomFilter
argument_list|(
name|hashType
argument_list|)
decl_stmt|;
name|bbf
operator|.
name|byteSize
operator|=
name|computeFoldableByteSize
argument_list|(
name|byteSizeHint
operator|*
literal|8
argument_list|,
name|foldFactor
argument_list|)
expr_stmt|;
name|long
name|bitSize
init|=
name|bbf
operator|.
name|byteSize
operator|*
literal|8
decl_stmt|;
name|bbf
operator|.
name|maxKeys
operator|=
operator|(
name|int
operator|)
name|idealMaxKeys
argument_list|(
name|bitSize
argument_list|,
name|errorRate
argument_list|)
expr_stmt|;
name|bbf
operator|.
name|hashCount
operator|=
name|optimalFunctionCount
argument_list|(
name|bbf
operator|.
name|maxKeys
argument_list|,
name|bitSize
argument_list|)
expr_stmt|;
comment|// Adjust max keys to bring error rate closer to what was requested,
comment|// because byteSize was adjusted to allow for folding, and hashCount was
comment|// rounded.
name|bbf
operator|.
name|maxKeys
operator|=
operator|(
name|int
operator|)
name|computeMaxKeys
argument_list|(
name|bitSize
argument_list|,
name|errorRate
argument_list|,
name|bbf
operator|.
name|hashCount
argument_list|)
expr_stmt|;
return|return
name|bbf
return|;
block|}
comment|/**    * Creates another similar Bloom filter. Does not copy the actual bits, and    * sets the new filter's key count to zero.    *    * @return a Bloom filter with the same configuration as this    */
specifier|public
name|ByteBloomFilter
name|createAnother
parameter_list|()
block|{
name|ByteBloomFilter
name|bbf
init|=
operator|new
name|ByteBloomFilter
argument_list|(
name|hashType
argument_list|)
decl_stmt|;
name|bbf
operator|.
name|byteSize
operator|=
name|byteSize
expr_stmt|;
name|bbf
operator|.
name|hashCount
operator|=
name|hashCount
expr_stmt|;
name|bbf
operator|.
name|maxKeys
operator|=
name|maxKeys
expr_stmt|;
return|return
name|bbf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|allocBloom
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|bloom
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can only create bloom once."
argument_list|)
throw|;
block|}
name|this
operator|.
name|bloom
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
operator|(
name|int
operator|)
name|this
operator|.
name|byteSize
argument_list|)
expr_stmt|;
assert|assert
name|this
operator|.
name|bloom
operator|.
name|hasArray
argument_list|()
assert|;
block|}
name|void
name|sanityCheck
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
literal|0
operator|>=
name|this
operator|.
name|byteSize
operator|||
name|this
operator|.
name|byteSize
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid byteSize: "
operator|+
name|this
operator|.
name|byteSize
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|hashCount
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Hash function count must be> 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|hash
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"hashType must be known"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|keyCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must have positive keyCount"
argument_list|)
throw|;
block|}
block|}
name|void
name|bloomCheck
parameter_list|(
name|ByteBuffer
name|bloom
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|this
operator|.
name|byteSize
operator|!=
name|bloom
operator|.
name|limit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configured bloom length should match actual length"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|add
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
comment|/*      * For faster hashing, use combinatorial generation      * http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf      */
name|int
name|hash1
init|=
name|this
operator|.
name|hash
operator|.
name|hash
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|hash2
init|=
name|this
operator|.
name|hash
operator|.
name|hash
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|hash1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|hashCount
condition|;
name|i
operator|++
control|)
block|{
name|long
name|hashLoc
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|hash1
operator|+
name|i
operator|*
name|hash2
operator|)
operator|%
operator|(
name|this
operator|.
name|byteSize
operator|*
literal|8
operator|)
argument_list|)
decl_stmt|;
name|set
argument_list|(
name|hashLoc
argument_list|)
expr_stmt|;
block|}
operator|++
name|this
operator|.
name|keyCount
expr_stmt|;
block|}
comment|/** Should only be used in tests */
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|,
name|this
operator|.
name|bloom
argument_list|)
return|;
block|}
comment|/** Should only be used in tests */
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|bloom
argument_list|)
return|;
block|}
comment|/** Should only be used in tests */
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|ByteBuffer
name|bloom
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|,
name|bloom
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|ByteBuffer
name|theBloom
parameter_list|)
block|{
if|if
condition|(
name|theBloom
operator|==
literal|null
condition|)
block|{
comment|// In a version 1 HFile Bloom filter data is stored in a separate meta
comment|// block which is loaded on demand, but in version 2 it is pre-loaded.
comment|// We want to use the same API in both cases.
name|theBloom
operator|=
name|bloom
expr_stmt|;
block|}
if|if
condition|(
name|theBloom
operator|.
name|limit
argument_list|()
operator|!=
name|byteSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bloom does not match expected size:"
operator|+
literal|" theBloom.limit()="
operator|+
name|theBloom
operator|.
name|limit
argument_list|()
operator|+
literal|", byteSize="
operator|+
name|byteSize
argument_list|)
throw|;
block|}
return|return
name|contains
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|theBloom
operator|.
name|array
argument_list|()
argument_list|,
name|theBloom
operator|.
name|arrayOffset
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|byteSize
argument_list|,
name|hash
argument_list|,
name|hashCount
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
index|[]
name|bloomArray
parameter_list|,
name|int
name|bloomOffset
parameter_list|,
name|int
name|bloomSize
parameter_list|,
name|Hash
name|hash
parameter_list|,
name|int
name|hashCount
parameter_list|)
block|{
name|int
name|hash1
init|=
name|hash
operator|.
name|hash
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|hash2
init|=
name|hash
operator|.
name|hash
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|hash1
argument_list|)
decl_stmt|;
name|int
name|bloomBitSize
init|=
name|bloomSize
operator|*
literal|8
decl_stmt|;
if|if
condition|(
name|randomGeneratorForTest
operator|==
literal|null
condition|)
block|{
comment|// Production mode.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hashCount
condition|;
name|i
operator|++
control|)
block|{
name|long
name|hashLoc
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|hash1
operator|+
name|i
operator|*
name|hash2
operator|)
operator|%
name|bloomBitSize
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|get
argument_list|(
name|hashLoc
argument_list|,
name|bloomArray
argument_list|,
name|bloomOffset
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// Test mode with "fake lookups" to estimate "ideal false positive rate".
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hashCount
condition|;
name|i
operator|++
control|)
block|{
name|long
name|hashLoc
init|=
name|randomGeneratorForTest
operator|.
name|nextInt
argument_list|(
name|bloomBitSize
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|get
argument_list|(
name|hashLoc
argument_list|,
name|bloomArray
argument_list|,
name|bloomOffset
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|//---------------------------------------------------------------------------
comment|/** Private helpers */
comment|/**    * Set the bit at the specified index to 1.    *    * @param pos index of bit    */
name|void
name|set
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
name|int
name|bytePos
init|=
call|(
name|int
call|)
argument_list|(
name|pos
operator|/
literal|8
argument_list|)
decl_stmt|;
name|int
name|bitPos
init|=
call|(
name|int
call|)
argument_list|(
name|pos
operator|%
literal|8
argument_list|)
decl_stmt|;
name|byte
name|curByte
init|=
name|bloom
operator|.
name|get
argument_list|(
name|bytePos
argument_list|)
decl_stmt|;
name|curByte
operator||=
name|bitvals
index|[
name|bitPos
index|]
expr_stmt|;
name|bloom
operator|.
name|put
argument_list|(
name|bytePos
argument_list|,
name|curByte
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if bit at specified index is 1.    *    * @param pos index of bit    * @return true if bit at specified index is 1, false if 0.    */
specifier|static
name|boolean
name|get
parameter_list|(
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|bloomArray
parameter_list|,
name|int
name|bloomOffset
parameter_list|)
block|{
name|int
name|bytePos
init|=
call|(
name|int
call|)
argument_list|(
name|pos
operator|/
literal|8
argument_list|)
decl_stmt|;
name|int
name|bitPos
init|=
call|(
name|int
call|)
argument_list|(
name|pos
operator|%
literal|8
argument_list|)
decl_stmt|;
name|byte
name|curByte
init|=
name|bloomArray
index|[
name|bloomOffset
operator|+
name|bytePos
index|]
decl_stmt|;
name|curByte
operator|&=
name|bitvals
index|[
name|bitPos
index|]
expr_stmt|;
return|return
operator|(
name|curByte
operator|!=
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getKeyCount
parameter_list|()
block|{
return|return
name|keyCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxKeys
parameter_list|()
block|{
return|return
name|maxKeys
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getByteSize
parameter_list|()
block|{
return|return
name|byteSize
return|;
block|}
specifier|public
name|int
name|getHashType
parameter_list|()
block|{
return|return
name|hashType
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compactBloom
parameter_list|()
block|{
comment|// see if the actual size is exponentially smaller than expected.
if|if
condition|(
name|this
operator|.
name|keyCount
operator|>
literal|0
operator|&&
name|this
operator|.
name|bloom
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|int
name|pieces
init|=
literal|1
decl_stmt|;
name|int
name|newByteSize
init|=
operator|(
name|int
operator|)
name|this
operator|.
name|byteSize
decl_stmt|;
name|int
name|newMaxKeys
init|=
name|this
operator|.
name|maxKeys
decl_stmt|;
comment|// while exponentially smaller& folding is lossless
while|while
condition|(
operator|(
name|newByteSize
operator|&
literal|1
operator|)
operator|==
literal|0
operator|&&
name|newMaxKeys
operator|>
operator|(
name|this
operator|.
name|keyCount
operator|<<
literal|1
operator|)
condition|)
block|{
name|pieces
operator|<<=
literal|1
expr_stmt|;
name|newByteSize
operator|>>=
literal|1
expr_stmt|;
name|newMaxKeys
operator|>>=
literal|1
expr_stmt|;
block|}
comment|// if we should fold these into pieces
if|if
condition|(
name|pieces
operator|>
literal|1
condition|)
block|{
name|byte
index|[]
name|array
init|=
name|this
operator|.
name|bloom
operator|.
name|array
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|this
operator|.
name|bloom
operator|.
name|arrayOffset
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|newByteSize
decl_stmt|;
name|int
name|off
init|=
name|end
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|1
init|;
name|p
operator|<
name|pieces
condition|;
operator|++
name|p
control|)
block|{
for|for
control|(
name|int
name|pos
init|=
name|start
init|;
name|pos
operator|<
name|end
condition|;
operator|++
name|pos
control|)
block|{
name|array
index|[
name|pos
index|]
operator||=
name|array
index|[
name|off
operator|++
index|]
expr_stmt|;
block|}
block|}
comment|// folding done, only use a subset of this array
name|this
operator|.
name|bloom
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|this
operator|.
name|bloom
operator|.
name|limit
argument_list|(
name|newByteSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|bloom
operator|=
name|this
operator|.
name|bloom
operator|.
name|slice
argument_list|()
expr_stmt|;
name|this
operator|.
name|byteSize
operator|=
name|newByteSize
expr_stmt|;
name|this
operator|.
name|maxKeys
operator|=
name|newMaxKeys
expr_stmt|;
block|}
block|}
block|}
comment|//---------------------------------------------------------------------------
comment|/**    * Writes just the bloom filter to the output array    * @param out OutputStream to place bloom    * @throws IOException Error writing bloom array    */
specifier|public
name|void
name|writeBloom
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|bloom
operator|.
name|hasArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Only writes ByteBuffer with underlying array."
argument_list|)
throw|;
block|}
name|out
operator|.
name|write
argument_list|(
name|bloom
operator|.
name|array
argument_list|()
argument_list|,
name|bloom
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bloom
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|getMetaWriter
parameter_list|()
block|{
return|return
operator|new
name|MetaWriter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|getDataWriter
parameter_list|()
block|{
return|return
operator|new
name|DataWriter
argument_list|()
return|;
block|}
specifier|private
class|class
name|MetaWriter
implements|implements
name|Writable
block|{
specifier|protected
name|MetaWriter
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cant read with this class."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|byteSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|hashCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|hashType
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|keyCount
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|DataWriter
implements|implements
name|Writable
block|{
specifier|protected
name|DataWriter
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cant read with this class."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeBloom
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getHashCount
parameter_list|()
block|{
return|return
name|hashCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsAutoLoading
parameter_list|()
block|{
return|return
name|bloom
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|setFakeLookupMode
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|randomGeneratorForTest
operator|=
operator|new
name|Random
argument_list|(
literal|283742987L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|randomGeneratorForTest
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    * Just concatenate row and column by default. May return the original row    * buffer if the column qualifier is empty.    */
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|createBloomKey
parameter_list|(
name|byte
index|[]
name|rowBuf
parameter_list|,
name|int
name|rowOffset
parameter_list|,
name|int
name|rowLen
parameter_list|,
name|byte
index|[]
name|qualBuf
parameter_list|,
name|int
name|qualOffset
parameter_list|,
name|int
name|qualLen
parameter_list|)
block|{
comment|// Optimize the frequent case when only the row is provided.
if|if
condition|(
name|qualLen
operator|<=
literal|0
operator|&&
name|rowOffset
operator|==
literal|0
operator|&&
name|rowLen
operator|==
name|rowBuf
operator|.
name|length
condition|)
return|return
name|rowBuf
return|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|rowLen
operator|+
name|qualLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rowBuf
argument_list|,
name|rowOffset
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|rowLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualLen
operator|>
literal|0
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|qualBuf
argument_list|,
name|qualOffset
argument_list|,
name|result
argument_list|,
name|rowLen
argument_list|,
name|qualLen
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
return|;
block|}
comment|/**    * A human-readable string with statistics for the given Bloom filter.    *    * @param bloomFilter the Bloom filter to output statistics for;    * @return a string consisting of "&lt;key&gt;:&lt;value&gt;" parts    *         separated by {@link #STATS_RECORD_SEP}.    */
specifier|public
specifier|static
name|String
name|formatStats
parameter_list|(
name|BloomFilterBase
name|bloomFilter
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|long
name|k
init|=
name|bloomFilter
operator|.
name|getKeyCount
argument_list|()
decl_stmt|;
name|long
name|m
init|=
name|bloomFilter
operator|.
name|getMaxKeys
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"BloomSize: "
operator|+
name|bloomFilter
operator|.
name|getByteSize
argument_list|()
operator|+
name|STATS_RECORD_SEP
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"No of Keys in bloom: "
operator|+
name|k
operator|+
name|STATS_RECORD_SEP
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Max Keys for bloom: "
operator|+
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|STATS_RECORD_SEP
operator|+
literal|"Percentage filled: "
operator|+
name|NumberFormat
operator|.
name|getPercentInstance
argument_list|()
operator|.
name|format
argument_list|(
name|k
operator|*
literal|1.0
operator|/
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|formatStats
argument_list|(
name|this
argument_list|)
operator|+
name|STATS_RECORD_SEP
operator|+
literal|"Actual error rate: "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%.8f"
argument_list|,
name|actualErrorRate
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

