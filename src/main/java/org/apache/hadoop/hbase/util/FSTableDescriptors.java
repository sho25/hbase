begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link TableDescriptors} that reads descriptors from the  * passed filesystem.  It expects descriptors to be in a file under the  * table's directory in FS.  Can be read-only -- i.e. does not modify  * the filesystem or can be read and write.  */
end_comment

begin_class
specifier|public
class|class
name|FSTableDescriptors
implements|implements
name|TableDescriptors
block|{
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootdir
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|fsreadonly
decl_stmt|;
name|long
name|cachehits
init|=
literal|0
decl_stmt|;
name|long
name|invocations
init|=
literal|0
decl_stmt|;
comment|// This cache does not age out the old stuff.  Thinking is that the amount
comment|// of data we keep up in here is so small, no need to do occasional purge.
comment|// TODO.
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TableDescriptorModtime
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|TableDescriptorModtime
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Data structure to hold modification time and table descriptor.    */
specifier|static
class|class
name|TableDescriptorModtime
block|{
specifier|private
specifier|final
name|HTableDescriptor
name|descriptor
decl_stmt|;
specifier|private
specifier|final
name|long
name|modtime
decl_stmt|;
name|TableDescriptorModtime
parameter_list|(
specifier|final
name|long
name|modtime
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
block|{
name|this
operator|.
name|descriptor
operator|=
name|htd
expr_stmt|;
name|this
operator|.
name|modtime
operator|=
name|modtime
expr_stmt|;
block|}
name|long
name|getModtime
parameter_list|()
block|{
return|return
name|this
operator|.
name|modtime
return|;
block|}
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
block|{
return|return
name|this
operator|.
name|descriptor
return|;
block|}
block|}
specifier|public
name|FSTableDescriptors
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootdir
parameter_list|)
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param fs    * @param rootdir    * @param fsreadOnly True if we are read-only when it comes to filesystem    * operations; i.e. on remove, we do not do delete in fs.    */
specifier|public
name|FSTableDescriptors
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootdir
parameter_list|,
specifier|final
name|boolean
name|fsreadOnly
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|rootdir
operator|=
name|rootdir
expr_stmt|;
name|this
operator|.
name|fsreadonly
operator|=
name|fsreadOnly
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.hbase.TableDescriptors#getHTableDescriptor(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|get
parameter_list|(
specifier|final
name|byte
index|[]
name|tablename
parameter_list|)
throws|throws
name|TableExistsException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tablename
argument_list|)
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.hbase.TableDescriptors#getTableDescriptor(byte[])    */
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|get
parameter_list|(
specifier|final
name|String
name|tablename
parameter_list|)
throws|throws
name|TableExistsException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|invocations
operator|++
expr_stmt|;
if|if
condition|(
name|HTableDescriptor
operator|.
name|ROOT_TABLEDESC
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|tablename
argument_list|)
condition|)
block|{
name|cachehits
operator|++
expr_stmt|;
return|return
name|HTableDescriptor
operator|.
name|ROOT_TABLEDESC
return|;
block|}
if|if
condition|(
name|HTableDescriptor
operator|.
name|META_TABLEDESC
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|tablename
argument_list|)
condition|)
block|{
name|cachehits
operator|++
expr_stmt|;
return|return
name|HTableDescriptor
operator|.
name|META_TABLEDESC
return|;
block|}
comment|// Look in cache of descriptors.
name|TableDescriptorModtime
name|tdm
init|=
name|this
operator|.
name|cache
operator|.
name|get
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
comment|// Check mod time has not changed (this is trip to NN).
name|long
name|modtime
init|=
name|FSUtils
operator|.
name|getTableInfoModtime
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|tablename
argument_list|)
decl_stmt|;
if|if
condition|(
name|tdm
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|modtime
operator|<=
name|tdm
operator|.
name|getModtime
argument_list|()
condition|)
block|{
name|cachehits
operator|++
expr_stmt|;
return|return
name|tdm
operator|.
name|getTableDescriptor
argument_list|()
return|;
block|}
block|}
name|HTableDescriptor
name|htd
init|=
name|FSUtils
operator|.
name|getTableDescriptor
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|tablename
argument_list|)
decl_stmt|;
if|if
condition|(
name|htd
operator|==
literal|null
condition|)
block|{
comment|// More likely is above will throw a FileNotFoundException
throw|throw
operator|new
name|TableExistsException
argument_list|(
literal|"No descriptor for "
operator|+
name|tablename
argument_list|)
throw|;
block|}
name|this
operator|.
name|cache
operator|.
name|put
argument_list|(
name|tablename
argument_list|,
operator|new
name|TableDescriptorModtime
argument_list|(
name|modtime
argument_list|,
name|htd
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|htd
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.hbase.TableDescriptors#getTableDescriptors(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path)    */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
name|getAll
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
name|htds
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|tableDirs
init|=
name|FSUtils
operator|.
name|getTableDirs
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|d
range|:
name|tableDirs
control|)
block|{
name|HTableDescriptor
name|htd
init|=
name|get
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|htd
operator|==
literal|null
condition|)
continue|continue;
name|htds
operator|.
name|put
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
return|return
name|htds
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|,
name|htd
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|htd
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|fsreadonly
condition|)
name|FSUtils
operator|.
name|updateHTableDescriptor
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|long
name|modtime
init|=
name|FSUtils
operator|.
name|getTableInfoModtime
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|cache
operator|.
name|put
argument_list|(
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|,
operator|new
name|TableDescriptorModtime
argument_list|(
name|modtime
argument_list|,
name|htd
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|remove
parameter_list|(
specifier|final
name|String
name|tablename
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fsreadonly
condition|)
block|{
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTablePath
argument_list|(
name|this
operator|.
name|rootdir
argument_list|,
name|tablename
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|tabledir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|tabledir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed delete of "
operator|+
name|tabledir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|TableDescriptorModtime
name|tdm
init|=
name|this
operator|.
name|cache
operator|.
name|remove
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
return|return
name|tdm
operator|==
literal|null
condition|?
literal|null
else|:
name|tdm
operator|.
name|getTableDescriptor
argument_list|()
return|;
block|}
block|}
end_class

end_unit

