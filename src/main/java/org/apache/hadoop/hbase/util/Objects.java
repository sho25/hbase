begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MultiAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_comment
comment|/**  * Utility methods for interacting with object instances.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Objects
block|{
specifier|private
specifier|static
class|class
name|QuantityMap
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|Quantity
argument_list|>
block|{
specifier|public
name|void
name|increment
parameter_list|(
name|String
name|type
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Quantity
name|q
init|=
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
name|q
operator|=
operator|new
name|Quantity
argument_list|()
expr_stmt|;
name|q
operator|.
name|what
operator|=
name|type
expr_stmt|;
name|put
argument_list|(
name|type
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
name|q
operator|.
name|increment
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stat
parameter_list|(
name|String
name|type
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|Quantity
name|q
init|=
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
name|q
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|q
operator|.
name|what
operator|=
name|type
expr_stmt|;
name|put
argument_list|(
name|type
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
name|q
operator|.
name|increment
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Quantity
block|{
name|int
name|count
decl_stmt|;
name|String
name|what
decl_stmt|;
specifier|public
name|void
name|increment
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
name|count
operator|+=
name|amount
expr_stmt|;
block|}
specifier|public
name|void
name|appendToString
parameter_list|(
name|StringBuilder
name|out
parameter_list|)
block|{
if|if
condition|(
name|out
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|out
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|count
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|what
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|1
operator|&&
operator|!
name|what
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|Stat
extends|extends
name|Quantity
block|{
name|int
name|min
decl_stmt|;
name|int
name|max
decl_stmt|;
name|long
name|total
decl_stmt|;
specifier|public
name|void
name|increment
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|min
operator|=
name|max
operator|=
name|amount
expr_stmt|;
block|}
else|else
block|{
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|amount
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|amount
argument_list|)
expr_stmt|;
block|}
name|total
operator|+=
name|amount
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|appendToString
parameter_list|(
name|StringBuilder
name|out
parameter_list|)
block|{
name|super
operator|.
name|appendToString
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|" [ "
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"min="
argument_list|)
operator|.
name|append
argument_list|(
name|min
argument_list|)
operator|.
name|append
argument_list|(
literal|" max="
argument_list|)
operator|.
name|append
argument_list|(
name|max
argument_list|)
operator|.
name|append
argument_list|(
literal|" avg="
argument_list|)
operator|.
name|append
argument_list|(
call|(
name|int
call|)
argument_list|(
name|total
operator|/
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|" ]"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|QuantityComparator
implements|implements
name|Comparator
argument_list|<
name|Quantity
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Quantity
name|q1
parameter_list|,
name|Quantity
name|q2
parameter_list|)
block|{
if|if
condition|(
name|q1
operator|.
name|count
operator|<
name|q2
operator|.
name|count
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|q1
operator|.
name|count
operator|>
name|q2
operator|.
name|count
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Attempts to construct a text description of the given object, by    * introspecting known classes and building a description of size.    * @param obj    * @return Description    */
specifier|public
specifier|static
name|String
name|describeQuantity
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|QuantityMap
name|quantities
init|=
operator|new
name|QuantityMap
argument_list|()
decl_stmt|;
name|quantify
argument_list|(
name|obj
argument_list|,
name|quantities
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Quantity
argument_list|>
name|totals
init|=
operator|new
name|ArrayList
argument_list|<
name|Quantity
argument_list|>
argument_list|(
name|quantities
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|totals
argument_list|,
operator|new
name|QuantityComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Quantity
name|q
range|:
name|totals
control|)
block|{
name|q
operator|.
name|appendToString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|quantify
parameter_list|(
name|Object
name|obj
parameter_list|,
name|QuantityMap
name|quantities
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Class
name|type
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|quantities
operator|.
name|increment
argument_list|(
name|type
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|quantify
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|obj
argument_list|,
name|i
argument_list|)
argument_list|,
name|quantities
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Iterable
condition|)
block|{
for|for
control|(
name|Object
name|child
range|:
operator|(
operator|(
name|Iterable
operator|)
name|obj
operator|)
control|)
block|{
name|quantify
argument_list|(
name|child
argument_list|,
name|quantities
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|MultiAction
condition|)
block|{
name|MultiAction
name|multi
init|=
operator|(
name|MultiAction
operator|)
name|obj
decl_stmt|;
name|quantify
argument_list|(
name|multi
operator|.
name|allActions
argument_list|()
argument_list|,
name|quantities
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Action
condition|)
block|{
name|quantify
argument_list|(
operator|(
operator|(
name|Action
operator|)
name|obj
operator|)
operator|.
name|getAction
argument_list|()
argument_list|,
name|quantities
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Put
condition|)
block|{
name|quantities
operator|.
name|increment
argument_list|(
literal|"Put"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|quantities
operator|.
name|increment
argument_list|(
literal|"KeyValue"
argument_list|,
operator|(
operator|(
name|Put
operator|)
name|obj
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keyValues
range|:
operator|(
operator|(
name|Put
operator|)
name|obj
operator|)
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|keyValues
control|)
block|{
name|quantities
operator|.
name|stat
argument_list|(
literal|"values"
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Delete
condition|)
block|{
name|quantities
operator|.
name|increment
argument_list|(
literal|"Delete"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
range|:
operator|(
operator|(
name|Delete
operator|)
name|obj
operator|)
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|quantities
operator|.
name|increment
argument_list|(
literal|"KeyValue"
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Increment
condition|)
block|{
name|quantities
operator|.
name|increment
argument_list|(
literal|"Increment"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|quantities
operator|.
name|increment
argument_list|(
literal|"KeyValue"
argument_list|,
operator|(
operator|(
name|Increment
operator|)
name|obj
operator|)
operator|.
name|numColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Get
condition|)
block|{
name|quantities
operator|.
name|increment
argument_list|(
literal|"Get"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|type
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|quantities
operator|.
name|increment
argument_list|(
name|type
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

