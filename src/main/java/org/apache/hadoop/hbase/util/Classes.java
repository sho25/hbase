begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Utilities for class manipulation.  */
end_comment

begin_class
specifier|public
class|class
name|Classes
block|{
comment|/**    * Equivalent of {@link Class#forName(String)} which also returns classes for    * primitives like<code>boolean</code>, etc.    *     * @param className    *          The name of the class to retrieve. Can be either a normal class or    *          a primitive class.    * @return The class specified by<code>className</code>    * @throws ClassNotFoundException    *           If the requested class can not be found.    */
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|extendedForName
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|valueType
operator|=
name|boolean
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|valueType
operator|=
name|byte
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|valueType
operator|=
name|short
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|valueType
operator|=
name|int
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|valueType
operator|=
name|long
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|valueType
operator|=
name|float
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
name|valueType
operator|=
name|double
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|valueType
operator|=
name|char
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|valueType
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
return|return
name|valueType
return|;
block|}
block|}
end_class

end_unit

