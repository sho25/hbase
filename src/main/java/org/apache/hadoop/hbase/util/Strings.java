begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Utility for Strings.  */
end_comment

begin_class
specifier|public
class|class
name|Strings
block|{
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_SEPARATOR
init|=
literal|"="
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_KEYVALUE_SEPARATOR
init|=
literal|", "
decl_stmt|;
comment|/**    * Append to a StringBuilder a key/value.    * Uses default separators.    * @param sb StringBuilder to use    * @param key Key to append.    * @param value Value to append.    * @return Passed<code>sb</code> populated with key/value.    */
specifier|public
specifier|static
name|StringBuilder
name|appendKeyValue
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
return|return
name|appendKeyValue
argument_list|(
name|sb
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|DEFAULT_SEPARATOR
argument_list|,
name|DEFAULT_KEYVALUE_SEPARATOR
argument_list|)
return|;
block|}
comment|/**    * Append to a StringBuilder a key/value.    * Uses default separators.    * @param sb StringBuilder to use    * @param key Key to append.    * @param value Value to append.    * @param separator Value to use between key and value.    * @param keyValueSeparator Value to use between key/value sets.    * @return Passed<code>sb</code> populated with key/value.    */
specifier|public
specifier|static
name|StringBuilder
name|appendKeyValue
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|String
name|separator
parameter_list|,
specifier|final
name|String
name|keyValueSeparator
parameter_list|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|keyValueSeparator
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Given a PTR string generated via reverse DNS lookup, return everything    * except the trailing period. Example for host.example.com., return    * host.example.com    * @param dnPtr a domain name pointer (PTR) string.    * @return Sanitized hostname with last period stripped off.    *    */
specifier|public
specifier|static
name|String
name|domainNamePointerToHostName
parameter_list|(
name|String
name|dnPtr
parameter_list|)
block|{
if|if
condition|(
name|dnPtr
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|dnPtr
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|?
name|dnPtr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dnPtr
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|dnPtr
return|;
block|}
block|}
end_class

end_unit

