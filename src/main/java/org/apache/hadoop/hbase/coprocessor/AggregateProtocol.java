begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|AggregationClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * Defines the aggregation functions that are to be supported in this  * Coprocessor. For each method, it takes a Scan object and a columnInterpreter.  * The scan object should have a column family (else an exception will be  * thrown), and an optional column qualifier. In the current implementation  * {@link AggregateImplementation}, only one column family and column qualifier  * combination is served. In case there are more than one, only first one will  * be picked. Refer to {@link AggregationClient} for some general conditions on  * input parameters.  */
end_comment

begin_interface
specifier|public
interface|interface
name|AggregateProtocol
extends|extends
name|CoprocessorProtocol
block|{
comment|/**    * Gives the maximum for a given combination of column qualifier and column    * family, in the given row range as defined in the Scan object. In its    * current implementation, it takes one column family and one column qualifier    * (if provided). In case of null column qualifier, maximum value for the    * entire column family will be returned.    * @param ci    * @param scan    * @return max value as mentioned above    * @throws IOException    */
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|>
name|T
name|getMax
parameter_list|(
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Gives the minimum for a given combination of column qualifier and column    * family, in the given row range as defined in the Scan object. In its    * current implementation, it takes one column family and one column qualifier    * (if provided). In case of null column qualifier, minimum value for the    * entire column family will be returned.    * @param ci    * @param scan    * @return min as mentioned above    * @throws IOException    */
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|>
name|T
name|getMin
parameter_list|(
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Gives the sum for a given combination of column qualifier and column    * family, in the given row range as defined in the Scan object. In its    * current implementation, it takes one column family and one column qualifier    * (if provided). In case of null column qualifier, sum for the entire column    * family will be returned.    * @param ci    * @param scan    * @return sum of values as defined by the column interpreter    * @throws IOException    */
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|>
name|S
name|getSum
parameter_list|(
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Gives the row count for the given column family and column qualifier, in    * the given row range as defined in the Scan object.    * @param ci    * @param scan    * @return    * @throws IOException    */
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|>
name|long
name|getRowNum
parameter_list|(
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Gives a Pair with first object as Sum and second object as row count,    * computed for a given combination of column qualifier and column family in    * the given row range as defined in the Scan object. In its current    * implementation, it takes one column family and one column qualifier (if    * provided). In case of null column qualifier, an aggregate sum over all the    * entire column family will be returned.    *<p>    * The average is computed in    * {@link AggregationClient#avg(byte[], ColumnInterpreter, Scan)} by    * processing results from all regions, so its "ok" to pass sum and a Long    * type.    * @param ci    * @param scan    * @return    * @throws IOException    */
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|>
name|Pair
argument_list|<
name|S
argument_list|,
name|Long
argument_list|>
name|getAvg
parameter_list|(
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Gives a Pair with first object a List containing Sum and sum of squares,    * and the second object as row count. It is computed for a given combination of    * column qualifier and column family in the given row range as defined in the    * Scan object. In its current implementation, it takes one column family and    * one column qualifier (if provided). The idea is get the value of variance first:    * the average of the squares less the square of the average a standard    * deviation is square root of variance.    * @param ci    * @param scan    * @return    * @throws IOException    */
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|>
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
name|getStd
parameter_list|(
name|ColumnInterpreter
argument_list|<
name|T
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

