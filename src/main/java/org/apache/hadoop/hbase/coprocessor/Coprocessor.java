begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_comment
comment|/**  * Coprocess interface.  */
end_comment

begin_interface
specifier|public
interface|interface
name|Coprocessor
block|{
specifier|public
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
comment|/**    * Installation priority. Coprocessors will be executed in sequence    * by the order of coprocessor priority.    */
specifier|public
enum|enum
name|Priority
block|{
name|HIGHEST
argument_list|(
literal|0
argument_list|)
block|,
name|SYSTEM
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|4
argument_list|)
block|,
name|USER
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
block|,
name|LOWEST
parameter_list|(
name|Integer
operator|.
name|MAX_VALUE
parameter_list|)
constructor_decl|;
specifier|private
name|int
name|prio
decl_stmt|;
name|Priority
parameter_list|(
name|int
name|prio
parameter_list|)
block|{
name|this
operator|.
name|prio
operator|=
name|prio
expr_stmt|;
block|}
specifier|public
name|int
name|intValue
parameter_list|()
block|{
return|return
name|prio
return|;
block|}
block|}
comment|// Interface
comment|/**    * Called before the region is reported as open to the master.    * @param e the environment provided by the region server    */
specifier|public
name|void
name|preOpen
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|)
function_decl|;
comment|/**    * Called after the region is reported as open to the master.    * @param e the environment provided by the region server    */
specifier|public
name|void
name|postOpen
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|)
function_decl|;
comment|/**    * Called before the memstore is flushed to disk.    * @param e the environment provided by the region server    */
specifier|public
name|void
name|preFlush
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|)
function_decl|;
comment|/**    * Called after the memstore is flushed to disk.    * @param e the environment provided by the region server    */
specifier|public
name|void
name|postFlush
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|)
function_decl|;
comment|/**    * Called before compaction.    * @param e the environment provided by the region server    * @param willSplit true if compaction will result in a split, false    * otherwise    */
specifier|public
name|void
name|preCompact
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|,
specifier|final
name|boolean
name|willSplit
parameter_list|)
function_decl|;
comment|/**    * Called after compaction.    * @param e the environment provided by the region server    * @param willSplit true if compaction will result in a split, false    * otherwise    */
specifier|public
name|void
name|postCompact
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|,
specifier|final
name|boolean
name|willSplit
parameter_list|)
function_decl|;
comment|/**    * Called before the region is split.    * @param e the environment provided by the region server    * (e.getRegion() returns the parent region)    */
specifier|public
name|void
name|preSplit
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|)
function_decl|;
comment|/**    * Called after the region is split.    * @param e the environment provided by the region server    * (e.getRegion() returns the parent region)    * @param l the left daughter region    * @param r the right daughter region    */
specifier|public
name|void
name|postSplit
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|,
specifier|final
name|HRegion
name|l
parameter_list|,
specifier|final
name|HRegion
name|r
parameter_list|)
function_decl|;
comment|/**    * Called before the region is reported as closed to the master.    * @param e the environment provided by the region server    * @param abortRequested true if the region server is aborting    */
specifier|public
name|void
name|preClose
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|,
name|boolean
name|abortRequested
parameter_list|)
function_decl|;
comment|/**    * Called after the region is reported as closed to the master.    * @param e the environment provided by the region server    * @param abortRequested true if the region server is aborting    */
specifier|public
name|void
name|postClose
parameter_list|(
specifier|final
name|CoprocessorEnvironment
name|e
parameter_list|,
name|boolean
name|abortRequested
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

