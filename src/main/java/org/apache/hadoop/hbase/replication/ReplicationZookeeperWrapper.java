begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * This class serves as a helper for all things related to zookeeper  * in replication.  *<p/>  * The layout looks something like this under zookeeper.znode.parent  * for the master cluster:  *<p/>  *<pre>  * replication/  *  master     {contains a full cluster address}  *  state      {contains true or false}  *  clusterId  {contains a byte}  *  peers/  *    1/   {contains a full cluster address}  *    2/  *    ...  *  rs/ {lists all RS that replicate}  *    startcode1/ {lists all peer clusters}  *      1/ {lists hlogs to process}  *        10.10.1.76%3A53488.123456789 {contains nothing or a position}  *        10.10.1.76%3A53488.123456790  *        ...  *      2/  *      ...  *    startcode2/  *    ...  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationZookeeperWrapper
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationZookeeperWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Name of znode we use to lock when failover
specifier|private
specifier|final
specifier|static
name|String
name|RS_LOCK_ZNODE
init|=
literal|"lock"
decl_stmt|;
comment|// Our handle on zookeeper
specifier|private
specifier|final
name|ZooKeeperWrapper
name|zookeeperWrapper
decl_stmt|;
comment|// Map of addresses of peer clusters with their ZKW
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ZooKeeperWrapper
argument_list|>
name|peerClusters
decl_stmt|;
comment|// Path to the root replication znode
specifier|private
specifier|final
name|String
name|replicationZNode
decl_stmt|;
comment|// Path to the peer clusters znode
specifier|private
specifier|final
name|String
name|peersZNode
decl_stmt|;
comment|// Path to the znode that contains all RS that replicates
specifier|private
specifier|final
name|String
name|rsZNode
decl_stmt|;
comment|// Path to this region server's name under rsZNode
specifier|private
specifier|final
name|String
name|rsServerNameZnode
decl_stmt|;
comment|// Name node if the replicationState znode
specifier|private
specifier|final
name|String
name|replicationStateNodeName
decl_stmt|;
comment|// If this RS is part of a master cluster
specifier|private
specifier|final
name|boolean
name|replicationMaster
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Is this cluster replicating at the moment?
specifier|private
specifier|final
name|AtomicBoolean
name|replicating
decl_stmt|;
comment|// Byte (stored as string here) that identifies this cluster
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
comment|/**    * Constructor used by region servers, connects to the peer cluster right away.    *    * @param zookeeperWrapper zkw to wrap    * @param conf             conf to use    * @param replicating    atomic boolean to start/stop replication    * @param rsName      the name of this region server, null if    *                         using RZH only to use the helping methods    * @throws IOException    */
specifier|public
name|ReplicationZookeeperWrapper
parameter_list|(
name|ZooKeeperWrapper
name|zookeeperWrapper
parameter_list|,
name|Configuration
name|conf
parameter_list|,
specifier|final
name|AtomicBoolean
name|replicating
parameter_list|,
name|String
name|rsName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|zookeeperWrapper
operator|=
name|zookeeperWrapper
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|replicationZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication"
argument_list|,
literal|"replication"
argument_list|)
decl_stmt|;
name|String
name|peersZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.peers"
argument_list|,
literal|"peers"
argument_list|)
decl_stmt|;
name|String
name|repMasterZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.master"
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|this
operator|.
name|replicationStateNodeName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.state"
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
name|String
name|clusterIdZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.clusterId"
argument_list|,
literal|"clusterId"
argument_list|)
decl_stmt|;
name|String
name|rsZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.rs"
argument_list|,
literal|"rs"
argument_list|)
decl_stmt|;
name|String
name|thisCluster
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
operator|+
literal|":"
operator|+
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|)
operator|+
literal|":"
operator|+
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
decl_stmt|;
name|this
operator|.
name|peerClusters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ZooKeeperWrapper
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|replicationZNode
operator|=
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|zookeeperWrapper
operator|.
name|getParentZNode
argument_list|()
argument_list|,
name|replicationZNodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|peersZNode
operator|=
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|replicationZNode
argument_list|,
name|peersZNodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|rsZNode
operator|=
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|replicationZNode
argument_list|,
name|rsZNodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicating
operator|=
name|replicating
expr_stmt|;
name|setReplicating
argument_list|()
expr_stmt|;
name|String
name|idResult
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getData
argument_list|(
name|this
operator|.
name|replicationZNode
argument_list|,
name|clusterIdZNodeName
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|idResult
operator|==
literal|null
condition|?
name|Byte
operator|.
name|toString
argument_list|(
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
else|:
name|idResult
expr_stmt|;
name|String
name|address
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getData
argument_list|(
name|this
operator|.
name|replicationZNode
argument_list|,
name|repMasterZNodeName
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|replicationMaster
operator|=
name|thisCluster
operator|.
name|equals
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"This cluster ("
operator|+
name|thisCluster
operator|+
literal|") is a "
operator|+
operator|(
name|this
operator|.
name|replicationMaster
condition|?
literal|"master"
else|:
literal|"slave"
operator|)
operator|+
literal|" for replication"
operator|+
literal|", compared with ("
operator|+
name|address
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rsServerNameZnode
operator|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|rsZNode
argument_list|,
name|rsName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|znodes
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|listZnodes
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
operator|new
name|ReplicationStatusWatcher
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|znodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|znode
range|:
name|znodes
control|)
block|{
name|connectToPeer
argument_list|(
name|znode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|this
operator|.
name|rsServerNameZnode
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Returns all region servers from given peer    *    * @param peerClusterId (byte) the cluster to interrogate    * @return addresses of all region servers    */
specifier|public
name|List
argument_list|<
name|HServerAddress
argument_list|>
name|getPeersAddresses
parameter_list|(
name|String
name|peerClusterId
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|peerClusters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|HServerAddress
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|ZooKeeperWrapper
name|zkw
init|=
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|peerClusterId
argument_list|)
decl_stmt|;
return|return
name|zkw
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|HServerAddress
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
name|zkw
operator|.
name|scanRSDirectory
argument_list|()
return|;
block|}
comment|/**    * This method connects this cluster to another one and registers it    * in this region server's replication znode    * @param peerId id of the peer cluster    */
specifier|private
name|void
name|connectToPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|ensemble
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getData
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|peerId
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ensemble
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wrong format of cluster address: "
operator|+
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getData
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|peerId
argument_list|)
argument_list|)
throw|;
block|}
name|Configuration
name|otherConf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|otherConf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|ensemble
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|otherConf
operator|.
name|set
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
name|ensemble
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|otherConf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|ensemble
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ZooKeeperWrapper
name|zkw
init|=
name|ZooKeeperWrapper
operator|.
name|createInstance
argument_list|(
name|otherConf
argument_list|,
literal|"connection to cluster: "
operator|+
name|peerId
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|registerListener
argument_list|(
operator|new
name|ReplicationStatusWatcher
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|peerClusters
operator|.
name|put
argument_list|(
name|peerId
argument_list|,
name|zkw
argument_list|)
expr_stmt|;
name|this
operator|.
name|zookeeperWrapper
operator|.
name|ensureExists
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|this
operator|.
name|rsServerNameZnode
argument_list|,
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new peer cluster "
operator|+
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|ensemble
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This reads the state znode for replication and sets the atomic boolean    */
specifier|private
name|void
name|setReplicating
parameter_list|()
block|{
name|String
name|value
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getDataAndWatch
argument_list|(
name|this
operator|.
name|replicationZNode
argument_list|,
name|this
operator|.
name|replicationStateNodeName
argument_list|,
operator|new
name|ReplicationStatusWatcher
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|replicating
operator|.
name|set
argument_list|(
name|value
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replication is now "
operator|+
operator|(
name|this
operator|.
name|replicating
operator|.
name|get
argument_list|()
condition|?
literal|"started"
else|:
literal|"stopped"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a new log to the list of hlogs in zookeeper    * @param filename name of the hlog's znode    * @param clusterId name of the cluster's znode    */
specifier|public
name|void
name|addLogToList
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|clusterId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|zookeeperWrapper
operator|.
name|writeZNode
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|this
operator|.
name|rsServerNameZnode
argument_list|,
name|clusterId
argument_list|)
argument_list|,
name|filename
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove a log from the list of hlogs in zookeeper    * @param filename name of the hlog's znode    * @param clusterId name of the cluster's znode    */
specifier|public
name|void
name|removeLogFromList
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|clusterId
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|zookeeperWrapper
operator|.
name|deleteZNode
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|this
operator|.
name|rsServerNameZnode
argument_list|,
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|clusterId
argument_list|,
name|filename
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the current position of the specified cluster in the current hlog    * @param filename filename name of the hlog's znode    * @param clusterId clusterId name of the cluster's znode    * @param position the position in the file    * @throws IOException    */
specifier|public
name|void
name|writeReplicationStatus
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|long
name|position
parameter_list|)
block|{
try|try
block|{
name|String
name|clusterZNode
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|this
operator|.
name|rsServerNameZnode
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|this
operator|.
name|zookeeperWrapper
operator|.
name|writeZNode
argument_list|(
name|clusterZNode
argument_list|,
name|filename
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|position
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a list of all the other region servers in this cluster    * and set a watch    * @param watch the watch to set    * @return a list of server nanes    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRegisteredRegionServers
parameter_list|(
name|Watcher
name|watch
parameter_list|)
block|{
return|return
name|this
operator|.
name|zookeeperWrapper
operator|.
name|listZnodes
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getRsZNode
argument_list|()
argument_list|,
name|watch
argument_list|)
return|;
block|}
comment|/**    * Get the list of the replicators that have queues, they can be alive, dead    * or simply from a previous run    * @param watch the watche to set    * @return a list of server names    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getListOfReplicators
parameter_list|(
name|Watcher
name|watch
parameter_list|)
block|{
return|return
name|this
operator|.
name|zookeeperWrapper
operator|.
name|listZnodes
argument_list|(
name|rsZNode
argument_list|,
name|watch
argument_list|)
return|;
block|}
comment|/**    * Get the list of peer clusters for the specified server names    * @param rs server names of the rs    * @param watch the watch to set    * @return a list of peer cluster    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getListPeersForRS
parameter_list|(
name|String
name|rs
parameter_list|,
name|Watcher
name|watch
parameter_list|)
block|{
return|return
name|this
operator|.
name|zookeeperWrapper
operator|.
name|listZnodes
argument_list|(
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|rsZNode
argument_list|,
name|rs
argument_list|)
argument_list|,
name|watch
argument_list|)
return|;
block|}
comment|/**    * Get the list of hlogs for the specified region server and peer cluster    * @param rs server names of the rs    * @param id peer cluster    * @param watch the watch to set    * @return a list of hlogs    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getListHLogsForPeerForRS
parameter_list|(
name|String
name|rs
parameter_list|,
name|String
name|id
parameter_list|,
name|Watcher
name|watch
parameter_list|)
block|{
return|return
name|this
operator|.
name|zookeeperWrapper
operator|.
name|listZnodes
argument_list|(
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|rsZNode
argument_list|,
name|rs
argument_list|)
argument_list|,
name|id
argument_list|)
argument_list|,
name|watch
argument_list|)
return|;
block|}
comment|/**    * Try to set a lock in another server's znode.    * @param znode the server names of the other server    * @return true if the lock was acquired, false in every other cases    */
specifier|public
name|boolean
name|lockOtherRS
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|zookeeperWrapper
operator|.
name|writeZNode
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|this
operator|.
name|rsZNode
argument_list|,
name|znode
argument_list|)
argument_list|,
name|RS_LOCK_ZNODE
argument_list|,
name|rsServerNameZnode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Won't lock "
operator|+
name|znode
operator|+
literal|" because "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO see if the other still exists!!
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * This methods copies all the hlogs queues from another region server    * and returns them all sorted per peer cluster (appended with the dead    * server's znode)    * @param znode server names to copy    * @return all hlogs for all peers of that cluster, null if an error occurred    */
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|copyQueuesFromRS
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
comment|// TODO this method isn't atomic enough, we could start copying and then
comment|// TODO fail for some reason and we would end up with znodes we don't want.
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|queues
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|nodePath
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|rsZNode
argument_list|,
name|znode
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|clusters
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|listZnodes
argument_list|(
name|nodePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// We have a lock znode in there, it will count as one.
if|if
condition|(
name|clusters
operator|==
literal|null
operator|||
name|clusters
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
name|queues
return|;
block|}
comment|// The lock isn't a peer cluster, remove it
name|clusters
operator|.
name|remove
argument_list|(
name|RS_LOCK_ZNODE
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|cluster
range|:
name|clusters
control|)
block|{
comment|// We add the name of the recovered RS to the new znode, we can even
comment|// do that for queues that were recovered 10 times giving a znode like
comment|// number-startcode-number-otherstartcode-number-anotherstartcode-etc
name|String
name|newCluster
init|=
name|cluster
operator|+
literal|"-"
operator|+
name|znode
decl_stmt|;
name|String
name|newClusterZnode
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|rsServerNameZnode
argument_list|,
name|newCluster
argument_list|)
decl_stmt|;
name|this
operator|.
name|zookeeperWrapper
operator|.
name|ensureExists
argument_list|(
name|newClusterZnode
argument_list|)
expr_stmt|;
name|String
name|clusterPath
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|nodePath
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hlogs
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|listZnodes
argument_list|(
name|clusterPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// That region server didn't have anything to replicate for this cluster
if|if
condition|(
name|hlogs
operator|==
literal|null
operator|||
name|hlogs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|SortedSet
argument_list|<
name|String
argument_list|>
name|logQueue
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|put
argument_list|(
name|newCluster
argument_list|,
name|logQueue
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|hlog
range|:
name|hlogs
control|)
block|{
name|String
name|position
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getData
argument_list|(
name|clusterPath
argument_list|,
name|hlog
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating "
operator|+
name|hlog
operator|+
literal|" with data "
operator|+
name|position
argument_list|)
expr_stmt|;
name|this
operator|.
name|zookeeperWrapper
operator|.
name|writeZNode
argument_list|(
name|newClusterZnode
argument_list|,
name|hlog
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|logQueue
operator|.
name|add
argument_list|(
name|hlog
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|queues
return|;
block|}
comment|/**    * Delete a complete queue of hlogs    * @param peerZnode znode of the peer cluster queue of hlogs to delete    */
specifier|public
name|void
name|deleteSource
parameter_list|(
name|String
name|peerZnode
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|zookeeperWrapper
operator|.
name|deleteZNode
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|rsServerNameZnode
argument_list|,
name|peerZnode
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Recursive deletion of all znodes in specified rs' znode    * @param znode    */
specifier|public
name|void
name|deleteRsQueues
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|zookeeperWrapper
operator|.
name|deleteZNode
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|rsZNode
argument_list|,
name|znode
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete this cluster's queues    */
specifier|public
name|void
name|deleteOwnRSZNode
parameter_list|()
block|{
name|deleteRsQueues
argument_list|(
name|this
operator|.
name|rsServerNameZnode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the position of the specified hlog in the specified peer znode    * @param peerId znode of the peer cluster    * @param hlog name of the hlog    * @return the position in that hlog    */
specifier|public
name|long
name|getHLogRepPosition
parameter_list|(
name|String
name|peerId
parameter_list|,
name|String
name|hlog
parameter_list|)
block|{
name|String
name|clusterZnode
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|rsServerNameZnode
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getData
argument_list|(
name|clusterZnode
argument_list|,
name|hlog
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|0
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**    * Tells if this cluster replicates or not    *    * @return if this is a master    */
specifier|public
name|boolean
name|isReplicationMaster
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationMaster
return|;
block|}
comment|/**    * Get the identification of the cluster    *    * @return the id for the cluster    */
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterId
return|;
block|}
comment|/**    * Get a map of all peer clusters    * @return map of peer cluster, zk address to ZKW    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ZooKeeperWrapper
argument_list|>
name|getPeerClusters
parameter_list|()
block|{
return|return
name|this
operator|.
name|peerClusters
return|;
block|}
comment|/**    * Watcher for the status of the replication    */
specifier|public
class|class
name|ReplicationStatusWatcher
implements|implements
name|Watcher
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|watchedEvent
parameter_list|)
block|{
name|Event
operator|.
name|EventType
name|type
init|=
name|watchedEvent
operator|.
name|getType
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got event "
operator|+
name|type
operator|+
literal|" with path "
operator|+
name|watchedEvent
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|NodeDataChanged
argument_list|)
condition|)
block|{
name|setReplicating
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

