begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationZookeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Gateway to Replication.  Used by {@link org.apache.hadoop.hbase.regionserver.HRegionServer}.  */
end_comment

begin_class
specifier|public
class|class
name|Replication
implements|implements
name|WALObserver
block|{
specifier|private
specifier|final
name|boolean
name|replication
decl_stmt|;
specifier|private
specifier|final
name|ReplicationSourceManager
name|replicationManager
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|replicating
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReplicationZookeeper
name|zkHelper
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|ReplicationSink
name|replicationSink
decl_stmt|;
comment|// Hosting server
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
comment|/**    * Instantiate the replication management (if rep is enabled).    * @param server Hosting server    * @param fs handle to the filesystem    * @param logDir    * @param oldLogDir directory where logs are archived    * @throws IOException    * @throws KeeperException     */
specifier|public
name|Replication
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|logDir
parameter_list|,
specifier|final
name|Path
name|oldLogDir
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|this
operator|.
name|server
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|isReplication
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|replication
condition|)
block|{
name|this
operator|.
name|zkHelper
operator|=
operator|new
name|ReplicationZookeeper
argument_list|(
name|server
argument_list|,
name|this
operator|.
name|replicating
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationManager
operator|=
operator|new
name|ReplicationSourceManager
argument_list|(
name|zkHelper
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|server
argument_list|,
name|fs
argument_list|,
name|this
operator|.
name|replicating
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|replicationManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|zkHelper
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * @param c Configuration to look at    * @return True if replication is enabled.    */
specifier|public
specifier|static
name|boolean
name|isReplication
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
block|{
return|return
name|c
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_ENABLE_KEY
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Join with the replication threads    */
specifier|public
name|void
name|join
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|replication
condition|)
block|{
name|this
operator|.
name|replicationManager
operator|.
name|join
argument_list|()
expr_stmt|;
name|this
operator|.
name|zkHelper
operator|.
name|deleteOwnRSZNode
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Carry on the list of log entries down to the sink    * @param entries list of entries to replicate    * @throws IOException    */
specifier|public
name|void
name|replicateLogEntries
parameter_list|(
name|HLog
operator|.
name|Entry
index|[]
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|replication
condition|)
block|{
name|this
operator|.
name|replicationSink
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If replication is enabled and this cluster is a master,    * it starts    * @throws IOException    */
specifier|public
name|void
name|startReplicationServices
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|replication
condition|)
block|{
name|this
operator|.
name|replicationManager
operator|.
name|init
argument_list|()
expr_stmt|;
name|this
operator|.
name|replicationSink
operator|=
operator|new
name|ReplicationSink
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|server
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the replication sources manager    * @return the manager if replication is enabled, else returns false    */
specifier|public
name|ReplicationSourceManager
name|getReplicationManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationManager
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLogEntryBeforeWrite
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|logEdit
operator|.
name|getKeyValues
argument_list|()
control|)
block|{
name|family
operator|=
name|kv
operator|.
name|getFamily
argument_list|()
expr_stmt|;
name|int
name|scope
init|=
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamily
argument_list|(
name|family
argument_list|)
operator|.
name|getScope
argument_list|()
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
operator|&&
operator|!
name|scopes
operator|.
name|containsKey
argument_list|(
name|family
argument_list|)
condition|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|scopes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logEdit
operator|.
name|setScopes
argument_list|(
name|scopes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|logRolled
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|getReplicationManager
argument_list|()
operator|.
name|logRolled
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|logRollRequested
parameter_list|()
block|{
comment|// Not interested
block|}
annotation|@
name|Override
specifier|public
name|void
name|logCloseRequested
parameter_list|()
block|{
comment|// not interested
block|}
block|}
end_class

end_unit

