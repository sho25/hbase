begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
package|;
end_package

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
specifier|public
class|class
name|AColumnFamilyDescriptor
extends|extends
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecordBase
implements|implements
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecord
block|{
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|SCHEMA$
init|=
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
operator|.
name|parse
argument_list|(
literal|"{\"type\":\"record\",\"name\":\"AColumnFamilyDescriptor\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"compression\",\"type\":{\"type\":\"enum\",\"name\":\"ACompressionAlgorithm\",\"symbols\":[\"LZO\",\"GZ\",\"NONE\"]}},{\"name\":\"maxVersions\",\"type\":\"int\"},{\"name\":\"blocksize\",\"type\":\"int\"},{\"name\":\"inMemory\",\"type\":\"boolean\"},{\"name\":\"timeToLive\",\"type\":\"int\"},{\"name\":\"blockCacheEnabled\",\"type\":\"boolean\"},{\"name\":\"bloomfilterEnabled\",\"type\":\"boolean\"}]}"
argument_list|)
decl_stmt|;
specifier|public
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|name
decl_stmt|;
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|ACompressionAlgorithm
name|compression
decl_stmt|;
specifier|public
name|int
name|maxVersions
decl_stmt|;
specifier|public
name|int
name|blocksize
decl_stmt|;
specifier|public
name|boolean
name|inMemory
decl_stmt|;
specifier|public
name|int
name|timeToLive
decl_stmt|;
specifier|public
name|boolean
name|blockCacheEnabled
decl_stmt|;
specifier|public
name|boolean
name|bloomfilterEnabled
decl_stmt|;
specifier|public
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|SCHEMA$
return|;
block|}
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|get
parameter_list|(
name|int
name|field$
parameter_list|)
block|{
switch|switch
condition|(
name|field$
condition|)
block|{
case|case
literal|0
case|:
return|return
name|name
return|;
case|case
literal|1
case|:
return|return
name|compression
return|;
case|case
literal|2
case|:
return|return
name|maxVersions
return|;
case|case
literal|3
case|:
return|return
name|blocksize
return|;
case|case
literal|4
case|:
return|return
name|inMemory
return|;
case|case
literal|5
case|:
return|return
name|timeToLive
return|;
case|case
literal|6
case|:
return|return
name|blockCacheEnabled
return|;
case|case
literal|7
case|:
return|return
name|bloomfilterEnabled
return|;
default|default:
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
literal|"Bad index"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|put
parameter_list|(
name|int
name|field$
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value$
parameter_list|)
block|{
switch|switch
condition|(
name|field$
condition|)
block|{
case|case
literal|0
case|:
name|name
operator|=
operator|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|compression
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|ACompressionAlgorithm
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|maxVersions
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|blocksize
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|inMemory
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|timeToLive
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|blockCacheEnabled
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|bloomfilterEnabled
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value$
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
literal|"Bad index"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

