begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|ipc
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificResponder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|util
operator|.
name|Utf8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|AClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|ADelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|AFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|AGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|AIOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|AIllegalArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|AMasterNotRunning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|APut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|AResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|AScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|ATableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|ATableExists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|avro
operator|.
name|generated
operator|.
name|HBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTablePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Start an Avro server  */
end_comment

begin_class
specifier|public
class|class
name|AvroServer
block|{
comment|/**    * The HBaseImpl is a glue object that connects Avro RPC calls to the    * HBase client API primarily defined in the HBaseAdmin and HTable objects.    */
specifier|public
specifier|static
class|class
name|HBaseImpl
implements|implements
name|HBase
block|{
comment|//
comment|// PROPERTIES
comment|//
specifier|protected
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|protected
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
specifier|protected
name|HTablePool
name|htablePool
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// nextScannerId and scannerMap are used to manage scanner state
specifier|protected
name|int
name|nextScannerId
init|=
literal|0
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ResultScanner
argument_list|>
name|scannerMap
init|=
literal|null
decl_stmt|;
comment|//
comment|// UTILITY METHODS
comment|//
comment|/**      * Assigns a unique ID to the scanner and adds the mapping to an internal      * hash-map.      *      * @param scanner      * @return integer scanner id      */
specifier|protected
specifier|synchronized
name|int
name|addScanner
parameter_list|(
name|ResultScanner
name|scanner
parameter_list|)
block|{
name|int
name|id
init|=
name|nextScannerId
operator|++
decl_stmt|;
name|scannerMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
comment|/**      * Returns the scanner associated with the specified ID.      *      * @param id      * @return a Scanner, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|ResultScanner
name|getScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Removes the scanner associated with the specified ID from the internal      * id->scanner hash-map.      *      * @param id      * @return a Scanner, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|ResultScanner
name|removeScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|//
comment|// CTOR METHODS
comment|//
comment|// TODO(hammer): figure out appropriate setting of maxSize for htablePool
comment|/**      * Constructs an HBaseImpl object.      * @throws IOException       */
name|HBaseImpl
parameter_list|()
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HBaseImpl
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|=
name|c
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|htablePool
operator|=
operator|new
name|HTablePool
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|scannerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ResultScanner
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// SERVICE METHODS
comment|//
comment|// TODO(hammer): Investigate use of the Command design pattern
comment|//
comment|// Cluster metadata
comment|//
specifier|public
name|Utf8
name|getHBaseVersion
parameter_list|()
throws|throws
name|AIOError
block|{
try|try
block|{
return|return
operator|new
name|Utf8
argument_list|(
name|admin
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getHBaseVersion
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
specifier|public
name|AClusterStatus
name|getClusterStatus
parameter_list|()
throws|throws
name|AIOError
block|{
try|try
block|{
return|return
name|AvroUtil
operator|.
name|csToACS
argument_list|(
name|admin
operator|.
name|getClusterStatus
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
specifier|public
name|GenericArray
argument_list|<
name|ATableDescriptor
argument_list|>
name|listTables
parameter_list|()
throws|throws
name|AIOError
block|{
try|try
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|Schema
name|atdSchema
init|=
name|Schema
operator|.
name|createArray
argument_list|(
name|ATableDescriptor
operator|.
name|SCHEMA$
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Array
argument_list|<
name|ATableDescriptor
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|result
operator|=
operator|new
name|GenericData
operator|.
name|Array
argument_list|<
name|ATableDescriptor
argument_list|>
argument_list|(
name|tables
operator|.
name|length
argument_list|,
name|atdSchema
argument_list|)
expr_stmt|;
for|for
control|(
name|HTableDescriptor
name|table
range|:
name|tables
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|AvroUtil
operator|.
name|htdToATD
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|//
comment|// Table metadata
comment|//
comment|// TODO(hammer): Handle the case where the table does not exist explicitly?
specifier|public
name|ATableDescriptor
name|describeTable
parameter_list|(
name|ByteBuffer
name|table
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
return|return
name|AvroUtil
operator|.
name|htdToATD
argument_list|(
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|table
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
return|return
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|ByteBuffer
name|table
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
return|return
name|admin
operator|.
name|tableExists
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|//
comment|// Family metadata
comment|//
comment|// TODO(hammer): Handle the case where the family does not exist explicitly?
specifier|public
name|AFamilyDescriptor
name|describeFamily
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|ByteBuffer
name|family
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|HTableDescriptor
name|htd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|AvroUtil
operator|.
name|hcdToAFD
argument_list|(
name|htd
operator|.
name|getFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|//
comment|// Table admin
comment|//
specifier|public
name|Void
name|createTable
parameter_list|(
name|ATableDescriptor
name|table
parameter_list|)
throws|throws
name|AIOError
throws|,
name|AIllegalArgument
throws|,
name|ATableExists
throws|,
name|AMasterNotRunning
block|{
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|AvroUtil
operator|.
name|atdToHTD
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|AIllegalArgument
name|iae
init|=
operator|new
name|AIllegalArgument
argument_list|()
decl_stmt|;
name|iae
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|e
parameter_list|)
block|{
name|ATableExists
name|tee
init|=
operator|new
name|ATableExists
argument_list|()
decl_stmt|;
name|tee
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|tee
throw|;
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|e
parameter_list|)
block|{
name|AMasterNotRunning
name|mnre
init|=
operator|new
name|AMasterNotRunning
argument_list|()
decl_stmt|;
name|mnre
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|mnre
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// Note that disable, flush and major compaction of .META. needed in client
comment|// TODO(hammer): more selective cache dirtying than flush?
specifier|public
name|Void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|table
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|admin
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// NB: Asynchronous operation
specifier|public
name|Void
name|modifyTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ATableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|admin
operator|.
name|modifyTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|AvroUtil
operator|.
name|atdToHTD
argument_list|(
name|tableDescriptor
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
specifier|public
name|Void
name|enableTable
parameter_list|(
name|ByteBuffer
name|table
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
specifier|public
name|Void
name|disableTable
parameter_list|(
name|ByteBuffer
name|table
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// NB: Asynchronous operation
specifier|public
name|Void
name|flush
parameter_list|(
name|ByteBuffer
name|table
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|admin
operator|.
name|flush
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// NB: Asynchronous operation
specifier|public
name|Void
name|split
parameter_list|(
name|ByteBuffer
name|table
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|admin
operator|.
name|split
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|//
comment|// Family admin
comment|//
specifier|public
name|Void
name|addFamily
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|AFamilyDescriptor
name|family
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|admin
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|,
name|AvroUtil
operator|.
name|afdToHCD
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// NB: Asynchronous operation
specifier|public
name|Void
name|deleteFamily
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|ByteBuffer
name|family
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|admin
operator|.
name|deleteColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// NB: Asynchronous operation
specifier|public
name|Void
name|modifyFamily
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|ByteBuffer
name|familyName
parameter_list|,
name|AFamilyDescriptor
name|familyDescriptor
parameter_list|)
throws|throws
name|AIOError
block|{
try|try
block|{
name|admin
operator|.
name|modifyColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|,
name|AvroUtil
operator|.
name|afdToHCD
argument_list|(
name|familyDescriptor
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|//
comment|// Single-row DML
comment|//
comment|// TODO(hammer): Java with statement for htablepool concision?
comment|// TODO(hammer): Can Get have timestamp and timerange simultaneously?
comment|// TODO(hammer): Do I need to catch the RuntimeException of getTable?
comment|// TODO(hammer): Handle gets with no results
comment|// TODO(hammer): Uses exists(Get) to ensure columns exist
specifier|public
name|AResult
name|get
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|AGet
name|aget
parameter_list|)
throws|throws
name|AIOError
block|{
name|HTableInterface
name|htable
init|=
name|htablePool
operator|.
name|getTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|AvroUtil
operator|.
name|resultToAResult
argument_list|(
name|htable
operator|.
name|get
argument_list|(
name|AvroUtil
operator|.
name|agetToGet
argument_list|(
name|aget
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|htablePool
operator|.
name|putTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|exists
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|AGet
name|aget
parameter_list|)
throws|throws
name|AIOError
block|{
name|HTableInterface
name|htable
init|=
name|htablePool
operator|.
name|getTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|htable
operator|.
name|exists
argument_list|(
name|AvroUtil
operator|.
name|agetToGet
argument_list|(
name|aget
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|htablePool
operator|.
name|putTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Void
name|put
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|APut
name|aput
parameter_list|)
throws|throws
name|AIOError
block|{
name|HTableInterface
name|htable
init|=
name|htablePool
operator|.
name|getTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|htable
operator|.
name|put
argument_list|(
name|AvroUtil
operator|.
name|aputToPut
argument_list|(
name|aput
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|htablePool
operator|.
name|putTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Void
name|delete
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|ADelete
name|adelete
parameter_list|)
throws|throws
name|AIOError
block|{
name|HTableInterface
name|htable
init|=
name|htablePool
operator|.
name|getTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|htable
operator|.
name|delete
argument_list|(
name|AvroUtil
operator|.
name|adeleteToDelete
argument_list|(
name|adelete
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|htablePool
operator|.
name|putTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|,
name|ByteBuffer
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|AIOError
block|{
name|HTableInterface
name|htable
init|=
name|htablePool
operator|.
name|getTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|htable
operator|.
name|incrementColumnValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualifier
argument_list|)
argument_list|,
name|amount
argument_list|,
name|writeToWAL
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|htablePool
operator|.
name|putTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Multi-row DML
comment|//
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|AScan
name|ascan
parameter_list|)
throws|throws
name|AIOError
block|{
name|HTableInterface
name|htable
init|=
name|htablePool
operator|.
name|getTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Scan
name|scan
init|=
name|AvroUtil
operator|.
name|ascanToScan
argument_list|(
name|ascan
argument_list|)
decl_stmt|;
return|return
name|addScanner
argument_list|(
name|htable
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|htablePool
operator|.
name|putTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Void
name|scannerClose
parameter_list|(
name|int
name|scannerId
parameter_list|)
throws|throws
name|AIOError
throws|,
name|AIllegalArgument
block|{
try|try
block|{
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|AIllegalArgument
name|aie
init|=
operator|new
name|AIllegalArgument
argument_list|()
decl_stmt|;
name|aie
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
literal|"scanner ID is invalid: "
operator|+
name|scannerId
argument_list|)
expr_stmt|;
throw|throw
name|aie
throw|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|removeScanner
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
specifier|public
name|GenericArray
argument_list|<
name|AResult
argument_list|>
name|scannerGetRows
parameter_list|(
name|int
name|scannerId
parameter_list|,
name|int
name|numberOfRows
parameter_list|)
throws|throws
name|AIOError
throws|,
name|AIllegalArgument
block|{
try|try
block|{
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|AIllegalArgument
name|aie
init|=
operator|new
name|AIllegalArgument
argument_list|()
decl_stmt|;
name|aie
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
literal|"scanner ID is invalid: "
operator|+
name|scannerId
argument_list|)
expr_stmt|;
throw|throw
name|aie
throw|;
block|}
return|return
name|AvroUtil
operator|.
name|resultsToAResults
argument_list|(
name|scanner
operator|.
name|next
argument_list|(
name|numberOfRows
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|AIOError
name|ioe
init|=
operator|new
name|AIOError
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|message
operator|=
operator|new
name|Utf8
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
comment|//
comment|// MAIN PROGRAM
comment|//
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|printUsageAndExit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java org.apache.hadoop.hbase.avro.AvroServer "
operator|+
literal|"--help | [--port=PORT] start"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Arguments:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" start Start Avro server"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" stop  Stop Avro server"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" port  Port to listen on. Default: 9090"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" help  Print this message and exit"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// TODO(hammer): Figure out a better way to keep the server alive!
specifier|protected
specifier|static
name|void
name|doMain
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|int
name|port
init|=
literal|9090
decl_stmt|;
specifier|final
name|String
name|portArgKey
init|=
literal|"--port="
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|args
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|portArgKey
argument_list|)
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|portArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
operator|||
name|cmd
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|(
literal|"To shutdown the Avro server run "
operator|+
literal|"bin/hbase-daemon.sh stop avro or send a kill signal to "
operator|+
literal|"the Avro server pid"
argument_list|)
expr_stmt|;
block|}
comment|// Print out usage if we get to here.
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"AvroServer"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase Avro server on port "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|SpecificResponder
name|r
init|=
operator|new
name|SpecificResponder
argument_list|(
name|HBase
operator|.
name|class
argument_list|,
operator|new
name|HBaseImpl
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|HttpServer
argument_list|(
name|r
argument_list|,
literal|9090
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
block|}
comment|// TODO(hammer): Look at Cassandra's daemonization and integration with JSVC
comment|// TODO(hammer): Don't eat it after a single exception
comment|// TODO(hammer): Figure out why we do doMain()
comment|// TODO(hammer): Figure out if we want String[] or String [] syntax
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|doMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

