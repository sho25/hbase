begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * A snapshot of all the information seen in a Sample.  */
end_comment

begin_class
specifier|public
class|class
name|Snapshot
block|{
specifier|private
specifier|static
specifier|final
name|double
name|MEDIAN_Q
init|=
literal|0.5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|P75_Q
init|=
literal|0.75
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|P95_Q
init|=
literal|0.95
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|P98_Q
init|=
literal|0.98
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|P99_Q
init|=
literal|0.99
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|P999_Q
init|=
literal|0.999
decl_stmt|;
specifier|private
specifier|final
name|double
index|[]
name|values
decl_stmt|;
comment|/**    * Create a new {@link Snapshot} with the given values.    *    * @param values    an unordered set of values in the sample    */
specifier|public
name|Snapshot
parameter_list|(
name|Collection
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|)
block|{
specifier|final
name|Object
index|[]
name|copy
init|=
name|values
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|this
operator|.
name|values
operator|=
operator|new
name|double
index|[
name|copy
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copy
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|values
index|[
name|i
index|]
operator|=
operator|(
name|Long
operator|)
name|copy
index|[
name|i
index|]
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|this
operator|.
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new {@link Snapshot} with the given values.    *    * @param values    an unordered set of values in the sample    */
specifier|public
name|Snapshot
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
operator|new
name|double
index|[
name|values
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|values
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|this
operator|.
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the value at the given quantile.    *    * @param quantile    a given quantile, in [0..1]    * @return the value in the distribution at quantile    */
specifier|public
name|double
name|getValue
parameter_list|(
name|double
name|quantile
parameter_list|)
block|{
if|if
condition|(
name|quantile
argument_list|<
literal|0.0
operator|||
name|quantile
argument_list|>
literal|1.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|quantile
operator|+
literal|" is not in [0..1]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0.0
return|;
block|}
specifier|final
name|double
name|pos
init|=
name|quantile
operator|*
operator|(
name|values
operator|.
name|length
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|1
condition|)
block|{
return|return
name|values
index|[
literal|0
index|]
return|;
block|}
if|if
condition|(
name|pos
operator|>=
name|values
operator|.
name|length
condition|)
block|{
return|return
name|values
index|[
name|values
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
specifier|final
name|double
name|lower
init|=
name|values
index|[
operator|(
name|int
operator|)
name|pos
operator|-
literal|1
index|]
decl_stmt|;
specifier|final
name|double
name|upper
init|=
name|values
index|[
operator|(
name|int
operator|)
name|pos
index|]
decl_stmt|;
return|return
name|lower
operator|+
operator|(
name|pos
operator|-
name|Math
operator|.
name|floor
argument_list|(
name|pos
argument_list|)
operator|)
operator|*
operator|(
name|upper
operator|-
name|lower
operator|)
return|;
block|}
comment|/**    * Returns the number of values in the snapshot.    *    * @return the number of values in the snapshot    */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|length
return|;
block|}
comment|/**    * Returns the median value in the distribution.    *    * @return the median value in the distribution    */
specifier|public
name|double
name|getMedian
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|MEDIAN_Q
argument_list|)
return|;
block|}
comment|/**    * Returns the value at the 75th percentile in the distribution.    *    * @return the value at the 75th percentile in the distribution    */
specifier|public
name|double
name|get75thPercentile
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|P75_Q
argument_list|)
return|;
block|}
comment|/**    * Returns the value at the 95th percentile in the distribution.    *    * @return the value at the 95th percentile in the distribution    */
specifier|public
name|double
name|get95thPercentile
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|P95_Q
argument_list|)
return|;
block|}
comment|/**    * Returns the value at the 98th percentile in the distribution.    *    * @return the value at the 98th percentile in the distribution    */
specifier|public
name|double
name|get98thPercentile
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|P98_Q
argument_list|)
return|;
block|}
comment|/**    * Returns the value at the 99th percentile in the distribution.    *    * @return the value at the 99th percentile in the distribution    */
specifier|public
name|double
name|get99thPercentile
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|P99_Q
argument_list|)
return|;
block|}
comment|/**    * Returns the value at the 99.9th percentile in the distribution.    *    * @return the value at the 99.9th percentile in the distribution    */
specifier|public
name|double
name|get999thPercentile
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|P999_Q
argument_list|)
return|;
block|}
comment|/**    * Returns the entire set of values in the snapshot.    *    * @return the entire set of values in the snapshot    */
specifier|public
name|double
index|[]
name|getValues
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|values
argument_list|,
name|values
operator|.
name|length
argument_list|)
return|;
block|}
block|}
end_class

end_unit

