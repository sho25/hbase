begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|HBaseEventHandler
operator|.
name|HBaseEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|MasterCloseRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|MasterOpenRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
operator|.
name|ZNodePathAndData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|EventType
import|;
end_import

begin_comment
comment|/**  * Watches the UNASSIGNED znode in ZK for the master, and handles all events   * relating to region transitions.  */
end_comment

begin_class
specifier|public
class|class
name|ZKUnassignedWatcher
implements|implements
name|Watcher
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKUnassignedWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: Start move this to HConstants
specifier|static
specifier|final
name|String
name|ROOT_TABLE_NAME_STR
init|=
literal|"-ROOT-"
decl_stmt|;
specifier|static
specifier|final
name|String
name|META_TABLE_NAME_STR
init|=
literal|".META."
decl_stmt|;
comment|// TODO: End move this to HConstants
specifier|private
name|ZooKeeperWrapper
name|zkWrapper
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|ZKUnassignedWatcher
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started ZKUnassigned watcher"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ZKUnassignedWatcher
parameter_list|()
throws|throws
name|IOException
block|{
name|zkWrapper
operator|=
name|ZooKeeperWrapper
operator|.
name|getInstance
argument_list|(
name|HMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the UNASSIGNED ZNode does not exist, create it.
name|zkWrapper
operator|.
name|createZNodeIfNotExists
argument_list|(
name|zkWrapper
operator|.
name|getRegionInTransitionZNode
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: get the outstanding changes in UNASSIGNED
comment|// Set a watch on Zookeeper's UNASSIGNED node if it exists.
name|zkWrapper
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is the processing loop that gets triggerred from the ZooKeeperWrapper.    * This zookeeper events process function dies the following:    *   - WATCHES the following events: NodeCreated, NodeDataChanged, NodeChildrenChanged    *   - IGNORES the following events: None, NodeDeleted    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|EventType
name|type
init|=
name|event
operator|.
name|getType
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"ZK-EVENT-PROCESS: Got zkEvent "
operator|+
name|type
operator|+
literal|" state:"
operator|+
name|event
operator|.
name|getState
argument_list|()
operator|+
literal|" path:"
operator|+
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Handle the ignored events
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|None
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|NodeDeleted
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// check if the path is for the UNASSIGNED directory we care about
if|if
condition|(
name|event
operator|.
name|getPath
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|zkWrapper
operator|.
name|getZNodePathForHBase
argument_list|(
name|zkWrapper
operator|.
name|getRegionInTransitionZNode
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|/*        * If a node is created in the UNASSIGNED directory in zookeeper, then:        *   1. watch its updates (this is an unassigned region).        *   2. read to see what its state is and handle as needed (state may have        *      changed before we started watching it)        */
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|NodeCreated
argument_list|)
condition|)
block|{
name|zkWrapper
operator|.
name|watchZNode
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|handleRegionStateInZK
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*        * Data on some node has changed. Read to see what the state is and handle        * as needed.        */
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|NodeDataChanged
argument_list|)
condition|)
block|{
name|handleRegionStateInZK
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*        * If there were some nodes created then watch those nodes        */
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|NodeChildrenChanged
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|ZNodePathAndData
argument_list|>
name|newZNodes
init|=
name|zkWrapper
operator|.
name|watchAndGetNewChildren
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ZNodePathAndData
name|zNodePathAndData
range|:
name|newZNodes
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Handling updates for znode: "
operator|+
name|zNodePathAndData
operator|.
name|getzNodePath
argument_list|()
argument_list|)
expr_stmt|;
name|handleRegionStateInZK
argument_list|(
name|zNodePathAndData
operator|.
name|getzNodePath
argument_list|()
argument_list|,
name|zNodePathAndData
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not process event from ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read the state of a node in ZK, and do the needful. We want to do the    * following:    *   1. If region's state is updated as CLOSED, invoke the ClosedRegionHandler.    *   2. If region's state is updated as OPENED, invoke the OpenRegionHandler.    * @param zNodePath    * @throws IOException    */
specifier|private
name|void
name|handleRegionStateInZK
parameter_list|(
name|String
name|zNodePath
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|zkWrapper
operator|.
name|readZNode
argument_list|(
name|zNodePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|handleRegionStateInZK
argument_list|(
name|zNodePath
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleRegionStateInZK
parameter_list|(
name|String
name|zNodePath
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
comment|// a null value is set when a node is created, we don't need to handle this
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|rgnInTransitNode
init|=
name|zkWrapper
operator|.
name|getRegionInTransitionZNode
argument_list|()
decl_stmt|;
name|String
name|region
init|=
name|zNodePath
operator|.
name|substring
argument_list|(
name|zNodePath
operator|.
name|indexOf
argument_list|(
name|rgnInTransitNode
argument_list|)
operator|+
name|rgnInTransitNode
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|HBaseEventType
name|rsEvent
init|=
name|HBaseEventType
operator|.
name|fromByte
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// if the node was CLOSED then handle it
if|if
condition|(
name|rsEvent
operator|==
name|HBaseEventType
operator|.
name|RS2ZK_REGION_CLOSED
condition|)
block|{
operator|new
name|MasterCloseRegionHandler
argument_list|(
name|rsEvent
argument_list|,
name|region
argument_list|,
name|data
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
comment|// if the region was OPENED then handle that
elseif|else
if|if
condition|(
name|rsEvent
operator|==
name|HBaseEventType
operator|.
name|RS2ZK_REGION_OPENED
operator|||
name|rsEvent
operator|==
name|HBaseEventType
operator|.
name|RS2ZK_REGION_OPENING
condition|)
block|{
operator|new
name|MasterOpenRegionHandler
argument_list|(
name|rsEvent
argument_list|,
name|region
argument_list|,
name|data
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

