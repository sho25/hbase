begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_comment
comment|/**  * Makes decisions about the placement and movement of Regions across  * RegionServers.  *  *<p>Cluster-wide load balancing will occur only when there are no regions in  * transition and according to a fixed period of a time using {@link #balanceCluster(Map)}.  *  *<p>Inline region placement with {@link #immediateAssignment} can be used when  * the Master needs to handle closed regions that it currently does not have  * a destination set for.  This can happen during master failover.  *  *<p>On cluster startup, bulk assignment can be used to determine  * locations for all Regions in a cluster.  *  *<p>This classes produces plans for the {@link AssignmentManager} to execute.  */
end_comment

begin_class
specifier|public
class|class
name|LoadBalancer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * Generate a global load balancing plan according to the specified map of    * server information to the most loaded regions of each server.    *    * The load balancing invariant is that all servers are within 1 region of the    * average number of regions per server.  If the average is an integer number,    * all servers will be balanced to the average.  Otherwise, all servers will    * have either floor(average) or ceiling(average) regions.    *    * The algorithm is currently implemented as such:    *    *<ol>    *<li>Determine the two valid numbers of regions each server should have,    *<b>MIN</b>=floor(average) and<b>MAX</b>=ceiling(average).    *    *<li>Iterate down the most loaded servers, shedding regions from each so    *     each server hosts exactly<b>MAX</b> regions.  Stop once you reach a    *     server that already has&lt;=<b>MAX</b> regions.    *    *<li>Iterate down the least loaded servers, assigning regions so each server    *     has exactly</b>MIN</b> regions.  Stop once you reach a server that    *     already has&gt;=<b>MIN</b> regions.    *    *     Regions being assigned to underloaded servers are those that were shed    *     in the previous step.  It is possible that there were not enough    *     regions shed to fill each underloaded server to<b>MIN</b>.  If so we    *     end up with a number of regions required to do so,<b>neededRegions</b>.    *    *     It is also possible that we were able fill each underloaded but ended    *     up with regions that were unassigned from overloaded servers but that    *     still do not have assignment.    *    *     If neither of these conditions hold (no regions needed to fill the    *     underloaded servers, no regions leftover from overloaded servers),    *     we are done and return.  Otherwise we handle these cases below.    *    *<li>If<b>neededRegions</b> is non-zero (still have underloaded servers),    *     we iterate the most loaded servers again, shedding a single server from    *     each (this brings them from having<b>MAX</b> regions to having    *<b>MIN</b> regions).    *    *<li>We now definitely have more regions that need assignment, either from    *     the previous step or from the original shedding from overloaded servers.    *    *     Iterate the least loaded servers filling each to<b>MIN</b>.    *    *<li>If we still have more regions that need assignment, again iterate the    *     least loaded servers, this time giving each one (filling them to    *</b>MAX</b>) until we run out.    *    *<li>All servers will now either host<b>MIN</b> or<b>MAX</b> regions.    *    *     In addition, any server hosting&gt;=<b>MAX</b> regions is guaranteed    *     to end up with<b>MAX</b> regions at the end of the balancing.  This    *     ensures the minimal number of regions possible are moved.    *</ol>    *    * TODO: We can at-most reassign the number of regions away from a particular    *       server to be how many they report as most loaded.    *       Should we just keep all assignment in memory?  Any objections?    *       Does this mean we need HeapSize on HMaster?  Or just careful monitor?    *       (current thinking is we will hold all assignments in memory)    *    * @param clusterState Map of regionservers and their load/region information to    *                   a list of their most loaded regions    * @return a list of regions to be moved, including source and destination,    *         or null if cluster is already balanced    */
specifier|public
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Make a map sorted by load and count regions
name|TreeMap
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serversByLoad
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|(
operator|new
name|HServerInfo
operator|.
name|LoadComparator
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numServers
init|=
name|clusterState
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numServers
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"numServers=0 so skipping load balancing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|int
name|numRegions
init|=
literal|0
decl_stmt|;
comment|// Iterate so we can count regions as we build the map
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|server
range|:
name|clusterState
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|server
operator|.
name|getKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|setNumberOfRegions
argument_list|(
name|server
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|numRegions
operator|+=
name|server
operator|.
name|getKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
expr_stmt|;
name|serversByLoad
operator|.
name|put
argument_list|(
name|server
operator|.
name|getKey
argument_list|()
argument_list|,
name|server
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check if we even need to do any load balancing
name|float
name|average
init|=
operator|(
name|float
operator|)
name|numRegions
operator|/
name|numServers
decl_stmt|;
comment|// for logging
name|int
name|min
init|=
name|numRegions
operator|/
name|numServers
decl_stmt|;
name|int
name|max
init|=
name|numRegions
operator|%
name|numServers
operator|==
literal|0
condition|?
name|min
else|:
name|min
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|serversByLoad
operator|.
name|lastKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
operator|<=
name|max
operator|&&
name|serversByLoad
operator|.
name|firstKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
operator|>=
name|min
condition|)
block|{
comment|// Skipped because no server outside (min,max) range
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping load balancing.  servers="
operator|+
name|numServers
operator|+
literal|" "
operator|+
literal|"regions="
operator|+
name|numRegions
operator|+
literal|" average="
operator|+
name|average
operator|+
literal|" "
operator|+
literal|"mostloaded="
operator|+
name|serversByLoad
operator|.
name|lastKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|" leastloaded="
operator|+
name|serversByLoad
operator|.
name|lastKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Balance the cluster
comment|// TODO: Look at data block locality or a more complex load to do this
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|regionsToMove
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionPlan
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|regionidx
init|=
literal|0
decl_stmt|;
comment|// track the index in above list for setting destination
comment|// Walk down most loaded, pruning each to the max
name|int
name|serversOverloaded
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|BalanceInfo
argument_list|>
name|serverBalanceInfo
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerInfo
argument_list|,
name|BalanceInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|server
range|:
name|serversByLoad
operator|.
name|descendingMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HServerInfo
name|serverInfo
init|=
name|server
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|regionCount
init|=
name|serverInfo
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionCount
operator|<=
name|max
condition|)
block|{
name|serverBalanceInfo
operator|.
name|put
argument_list|(
name|serverInfo
argument_list|,
operator|new
name|BalanceInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|serversOverloaded
operator|++
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|server
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|numToOffload
init|=
name|Math
operator|.
name|min
argument_list|(
name|regionCount
operator|-
name|max
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numTaken
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regions
control|)
block|{
comment|// Don't rebalance meta regions.
if|if
condition|(
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|)
continue|continue;
name|regionsToMove
operator|.
name|add
argument_list|(
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
name|serverInfo
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|numTaken
operator|++
expr_stmt|;
if|if
condition|(
name|numTaken
operator|>=
name|numToOffload
condition|)
break|break;
block|}
name|serverBalanceInfo
operator|.
name|put
argument_list|(
name|serverInfo
argument_list|,
operator|new
name|BalanceInfo
argument_list|(
name|numToOffload
argument_list|,
operator|(
operator|-
literal|1
operator|)
operator|*
name|numTaken
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Walk down least loaded, filling each to the min
name|int
name|serversUnderloaded
init|=
literal|0
decl_stmt|;
comment|// number of servers that get new regions
name|int
name|neededRegions
init|=
literal|0
decl_stmt|;
comment|// number of regions needed to bring all up to min
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|server
range|:
name|serversByLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|regionCount
init|=
name|server
operator|.
name|getKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionCount
operator|>=
name|min
condition|)
block|{
break|break;
block|}
name|serversUnderloaded
operator|++
expr_stmt|;
name|int
name|numToTake
init|=
name|min
operator|-
name|regionCount
decl_stmt|;
name|int
name|numTaken
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numTaken
operator|<
name|numToTake
operator|&&
name|regionidx
operator|<
name|regionsToMove
operator|.
name|size
argument_list|()
condition|)
block|{
name|regionsToMove
operator|.
name|get
argument_list|(
name|regionidx
argument_list|)
operator|.
name|setDestination
argument_list|(
name|server
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|numTaken
operator|++
expr_stmt|;
name|regionidx
operator|++
expr_stmt|;
block|}
name|serverBalanceInfo
operator|.
name|put
argument_list|(
name|server
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|BalanceInfo
argument_list|(
literal|0
argument_list|,
name|numTaken
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we still want to take some, increment needed
if|if
condition|(
name|numTaken
operator|<
name|numToTake
condition|)
block|{
name|neededRegions
operator|+=
operator|(
name|numToTake
operator|-
name|numTaken
operator|)
expr_stmt|;
block|}
block|}
comment|// If none needed to fill all to min and none left to drain all to max,
comment|// we are done
if|if
condition|(
name|neededRegions
operator|==
literal|0
operator|&&
name|regionidx
operator|==
name|regionsToMove
operator|.
name|size
argument_list|()
condition|)
block|{
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Calculated a load balance in "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|"ms. "
operator|+
literal|"Moving "
operator|+
name|regionsToMove
operator|.
name|size
argument_list|()
operator|+
literal|" regions off of "
operator|+
name|serversOverloaded
operator|+
literal|" overloaded servers onto "
operator|+
name|serversUnderloaded
operator|+
literal|" less loaded servers"
argument_list|)
expr_stmt|;
return|return
name|regionsToMove
return|;
block|}
comment|// Need to do a second pass.
comment|// Either more regions to assign out or servers that are still underloaded
comment|// If we need more to fill min, grab one from each most loaded until enough
if|if
condition|(
name|neededRegions
operator|!=
literal|0
condition|)
block|{
comment|// Walk down most loaded, grabbing one from each until we get enough
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|server
range|:
name|serversByLoad
operator|.
name|descendingMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BalanceInfo
name|balanceInfo
init|=
name|serverBalanceInfo
operator|.
name|get
argument_list|(
name|server
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|balanceInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|balanceInfo
operator|.
name|getNextRegionForUnload
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
name|server
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|)
break|break;
name|HRegionInfo
name|region
init|=
name|server
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|isMetaRegion
argument_list|()
condition|)
continue|continue;
comment|// Don't move meta regions.
name|regionsToMove
operator|.
name|add
argument_list|(
operator|new
name|RegionPlan
argument_list|(
name|region
argument_list|,
name|server
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|neededRegions
operator|==
literal|0
condition|)
block|{
comment|// No more regions needed, done shedding
break|break;
block|}
block|}
block|}
comment|// Now we have a set of regions that must be all assigned out
comment|// Assign each underloaded up to the min, then if leftovers, assign to max
comment|// Walk down least loaded, assigning to each to fill up to min
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|server
range|:
name|serversByLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|regionCount
init|=
name|server
operator|.
name|getKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
decl_stmt|;
name|BalanceInfo
name|balanceInfo
init|=
name|serverBalanceInfo
operator|.
name|get
argument_list|(
name|server
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|balanceInfo
operator|!=
literal|null
condition|)
block|{
name|regionCount
operator|+=
name|balanceInfo
operator|.
name|getNumRegionsAdded
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|regionCount
operator|>=
name|min
condition|)
block|{
break|break;
block|}
name|int
name|numToTake
init|=
name|min
operator|-
name|regionCount
decl_stmt|;
name|int
name|numTaken
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numTaken
operator|<
name|numToTake
operator|&&
name|regionidx
operator|<
name|regionsToMove
operator|.
name|size
argument_list|()
condition|)
block|{
name|regionsToMove
operator|.
name|get
argument_list|(
name|regionidx
argument_list|)
operator|.
name|setDestination
argument_list|(
name|server
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|numTaken
operator|++
expr_stmt|;
name|regionidx
operator|++
expr_stmt|;
block|}
block|}
comment|// If we still have regions to dish out, assign underloaded to max
if|if
condition|(
name|regionidx
operator|!=
name|regionsToMove
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|server
range|:
name|serversByLoad
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|regionCount
init|=
name|server
operator|.
name|getKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionCount
operator|>=
name|max
condition|)
block|{
break|break;
block|}
name|regionsToMove
operator|.
name|get
argument_list|(
name|regionidx
argument_list|)
operator|.
name|setDestination
argument_list|(
name|server
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|regionidx
operator|++
expr_stmt|;
if|if
condition|(
name|regionidx
operator|==
name|regionsToMove
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|regionidx
operator|==
name|regionsToMove
operator|.
name|size
argument_list|()
operator|)
assert|;
assert|assert
operator|(
name|neededRegions
operator|==
literal|0
operator|)
assert|;
comment|// All done!
name|LOG
operator|.
name|info
argument_list|(
literal|"Calculated a load balance in "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|"ms. "
operator|+
literal|"Moving "
operator|+
name|regionsToMove
operator|.
name|size
argument_list|()
operator|+
literal|" regions off of "
operator|+
name|serversOverloaded
operator|+
literal|" overloaded servers onto "
operator|+
name|serversUnderloaded
operator|+
literal|" less loaded servers"
argument_list|)
expr_stmt|;
return|return
name|regionsToMove
return|;
block|}
comment|/**    * Stores additional per-server information about the regions added/removed    * during the run of the balancing algorithm.    *    * For servers that receive additional regions, we are not updating the number    * of regions in HServerInfo once we decide to reassign regions to a server,    * but we need this information later in the algorithm.  This is stored in    *<b>numRegionsAdded</b>.    *    * For servers that shed regions, we need to track which regions we have    * already shed.<b>nextRegionForUnload</b> contains the index in the list    * of regions on the server that is the next to be shed.    */
specifier|private
specifier|static
class|class
name|BalanceInfo
block|{
specifier|private
specifier|final
name|int
name|nextRegionForUnload
decl_stmt|;
specifier|private
specifier|final
name|int
name|numRegionsAdded
decl_stmt|;
specifier|public
name|BalanceInfo
parameter_list|(
name|int
name|nextRegionForUnload
parameter_list|,
name|int
name|numRegionsAdded
parameter_list|)
block|{
name|this
operator|.
name|nextRegionForUnload
operator|=
name|nextRegionForUnload
expr_stmt|;
name|this
operator|.
name|numRegionsAdded
operator|=
name|numRegionsAdded
expr_stmt|;
block|}
specifier|public
name|int
name|getNextRegionForUnload
parameter_list|()
block|{
return|return
name|nextRegionForUnload
return|;
block|}
specifier|public
name|int
name|getNumRegionsAdded
parameter_list|()
block|{
return|return
name|numRegionsAdded
return|;
block|}
block|}
comment|/**    * Generates a bulk assignment plan to be used on cluster startup using a    * simple round-robin assignment.    *<p>    * Takes a list of all the regions and all the servers in the cluster and    * returns a map of each server to the regions that it should be assigned.    *<p>    * Currently implemented as a round-robin assignment.  Same invariant as    * load balancing, all servers holding floor(avg) or ceiling(avg).    *    * TODO: Use block locations from HDFS to place regions with their blocks    *    * @param regions all regions    * @param servers all servers    * @return map of server to the regions it should take, or null if no    *         assignment is possible (ie. no regions or no servers)    */
specifier|public
specifier|static
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|roundRobinAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
parameter_list|)
block|{
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|servers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numRegions
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numServers
init|=
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|float
operator|)
name|numRegions
operator|/
name|numServers
argument_list|)
decl_stmt|;
name|int
name|serverIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HServerInfo
name|server
range|:
name|servers
control|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|serverRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|max
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|serverIdx
init|;
name|i
operator|<
name|regions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|numServers
control|)
block|{
name|serverRegions
operator|.
name|add
argument_list|(
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|serverRegions
argument_list|)
expr_stmt|;
name|serverIdx
operator|++
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
comment|/**    * Generates a bulk assignment startup plan, attempting to reuse the existing    * assignment information from META, but adjusting for the specified list of    * available/online servers available for assignment.    *<p>    * Takes a map of all regions to their existing assignment from META.  Also    * takes a list of online servers for regions to be assigned to.  Attempts to    * retain all assignment, so in some instances initial assignment will not be    * completely balanced.    *<p>    * Any leftover regions without an existing server to be assigned to will be    * assigned randomly to available servers.    * @param regions regions and existing assignment from meta    * @param servers available servers    * @return map of servers and regions to be assigned to them    */
specifier|public
specifier|static
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|retainAssignment
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
parameter_list|)
block|{
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Build a map of server addresses to server info so we can match things up
name|Map
argument_list|<
name|HServerAddress
argument_list|,
name|HServerInfo
argument_list|>
name|serverMap
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerAddress
argument_list|,
name|HServerInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HServerInfo
name|server
range|:
name|servers
control|)
block|{
name|serverMap
operator|.
name|put
argument_list|(
name|server
operator|.
name|getServerAddress
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|assignments
operator|.
name|put
argument_list|(
name|server
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|region
range|:
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HServerAddress
name|hsa
init|=
name|region
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|HServerInfo
name|server
init|=
name|hsa
operator|==
literal|null
condition|?
literal|null
else|:
name|serverMap
operator|.
name|get
argument_list|(
name|hsa
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|assignments
operator|.
name|get
argument_list|(
name|server
argument_list|)
operator|.
name|add
argument_list|(
name|region
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assignments
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|region
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|assignments
return|;
block|}
comment|/**    * Find the block locations for all of the files for the specified region.    *    * Returns an ordered list of hosts that are hosting the blocks for this    * region.  The weight of each host is the sum of the block lengths of all    * files on that host, so the first host in the list is the server which    * holds the most bytes of the given region's HFiles.    *    * TODO: Make this work.  Need to figure out how to match hadoop's hostnames    *       given for block locations with our HServerAddress.    * TODO: Use the right directory for the region    * TODO: Use getFileBlockLocations on the files not the directory    *    * @param fs the filesystem    * @param region region    * @return ordered list of hosts holding blocks of the specified region    * @throws IOException if any filesystem errors    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getTopBlockLocations
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|HRegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|encodedName
init|=
name|region
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/hbase/table/"
operator|+
name|encodedName
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|blockLocations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HostAndWeight
argument_list|,
name|HostAndWeight
argument_list|>
name|hostWeights
init|=
operator|new
name|TreeMap
argument_list|<
name|HostAndWeight
argument_list|,
name|HostAndWeight
argument_list|>
argument_list|(
operator|new
name|HostAndWeight
operator|.
name|HostComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockLocation
name|bl
range|:
name|blockLocations
control|)
block|{
name|String
index|[]
name|hosts
init|=
name|bl
operator|.
name|getHosts
argument_list|()
decl_stmt|;
name|long
name|len
init|=
name|bl
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|HostAndWeight
name|haw
init|=
name|hostWeights
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|haw
operator|==
literal|null
condition|)
block|{
name|haw
operator|=
operator|new
name|HostAndWeight
argument_list|(
name|host
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|hostWeights
operator|.
name|put
argument_list|(
name|haw
argument_list|,
name|haw
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|haw
operator|.
name|addWeight
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|NavigableSet
argument_list|<
name|HostAndWeight
argument_list|>
name|orderedHosts
init|=
operator|new
name|TreeSet
argument_list|<
name|HostAndWeight
argument_list|>
argument_list|(
operator|new
name|HostAndWeight
operator|.
name|WeightComparator
argument_list|()
argument_list|)
decl_stmt|;
name|orderedHosts
operator|.
name|addAll
argument_list|(
name|hostWeights
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|topHosts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|orderedHosts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HostAndWeight
name|haw
range|:
name|orderedHosts
operator|.
name|descendingSet
argument_list|()
control|)
block|{
name|topHosts
operator|.
name|add
argument_list|(
name|haw
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|topHosts
return|;
block|}
comment|/**    * Stores the hostname and weight for that hostname.    *    * This is used when determining the physical locations of the blocks making    * up a region.    *    * To make a prioritized list of the hosts holding the most data of a region,    * this class is used to count the total weight for each host.  The weight is    * currently just the size of the file.    */
specifier|private
specifier|static
class|class
name|HostAndWeight
block|{
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
specifier|private
name|long
name|weight
decl_stmt|;
specifier|public
name|HostAndWeight
parameter_list|(
name|String
name|host
parameter_list|,
name|long
name|weight
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
block|}
specifier|public
name|void
name|addWeight
parameter_list|(
name|long
name|weight
parameter_list|)
block|{
name|this
operator|.
name|weight
operator|+=
name|weight
expr_stmt|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
specifier|public
name|long
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
specifier|private
specifier|static
class|class
name|HostComparator
implements|implements
name|Comparator
argument_list|<
name|HostAndWeight
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HostAndWeight
name|l
parameter_list|,
name|HostAndWeight
name|r
parameter_list|)
block|{
return|return
name|l
operator|.
name|getHost
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|WeightComparator
implements|implements
name|Comparator
argument_list|<
name|HostAndWeight
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HostAndWeight
name|l
parameter_list|,
name|HostAndWeight
name|r
parameter_list|)
block|{
if|if
condition|(
name|l
operator|.
name|getWeight
argument_list|()
operator|==
name|r
operator|.
name|getWeight
argument_list|()
condition|)
block|{
return|return
name|l
operator|.
name|getHost
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
return|return
name|l
operator|.
name|getWeight
argument_list|()
operator|<
name|r
operator|.
name|getWeight
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
block|}
comment|/**    * Generates an immediate assignment plan to be used by a new master for    * regions in transition that do not have an already known destination.    *    * Takes a list of regions that need immediate assignment and a list of    * all available servers.  Returns a map of regions to the server they    * should be assigned to.    *    * This method will return quickly and does not do any intelligent    * balancing.  The goal is to make a fast decision not the best decision    * possible.    *    * Currently this is random.    *    * @param regions    * @param servers    * @return map of regions to the server it should be assigned to    */
specifier|public
specifier|static
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerInfo
argument_list|>
name|immediateAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
parameter_list|)
block|{
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerInfo
argument_list|>
name|assignments
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|servers
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
specifier|public
specifier|static
name|HServerInfo
name|randomAssignment
parameter_list|(
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
parameter_list|)
block|{
if|if
condition|(
name|servers
operator|==
literal|null
operator|||
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Wanted to do random assignment but no servers to assign to"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|servers
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Stores the plan for the move of an individual region.    *    * Contains info for the region being moved, info for the server the region    * should be moved from, and info for the server the region should be moved    * to.    *    * The comparable implementation of this class compares only the region    * information and not the source/dest server info.    */
specifier|public
specifier|static
class|class
name|RegionPlan
implements|implements
name|Comparable
argument_list|<
name|RegionPlan
argument_list|>
block|{
specifier|private
specifier|final
name|HRegionInfo
name|hri
decl_stmt|;
specifier|private
specifier|final
name|HServerInfo
name|source
decl_stmt|;
specifier|private
name|HServerInfo
name|dest
decl_stmt|;
comment|/**      * Instantiate a plan for a region move, moving the specified region from      * the specified source server to the specified destination server.      *      * Destination server can be instantiated as null and later set      * with {@link #setDestination(HServerInfo)}.      *      * @param hri region to be moved      * @param source regionserver region should be moved from      * @param dest regionserver region should be moved to      */
specifier|public
name|RegionPlan
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|HServerInfo
name|source
parameter_list|,
name|HServerInfo
name|dest
parameter_list|)
block|{
name|this
operator|.
name|hri
operator|=
name|hri
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|dest
operator|=
name|dest
expr_stmt|;
block|}
comment|/**      * Set the destination server for the plan for this region.      */
specifier|public
name|void
name|setDestination
parameter_list|(
name|HServerInfo
name|dest
parameter_list|)
block|{
name|this
operator|.
name|dest
operator|=
name|dest
expr_stmt|;
block|}
comment|/**      * Get the source server for the plan for this region.      * @return server info for source      */
specifier|public
name|HServerInfo
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
comment|/**      * Get the destination server for the plan for this region.      * @return server info for destination      */
specifier|public
name|HServerInfo
name|getDestination
parameter_list|()
block|{
return|return
name|dest
return|;
block|}
comment|/**      * Get the encoded region name for the region this plan is for.      * @return Encoded region name      */
specifier|public
name|String
name|getRegionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|hri
operator|.
name|getEncodedName
argument_list|()
return|;
block|}
specifier|public
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|hri
return|;
block|}
comment|/**      * Compare the region info.      * @param o region plan you are comparing against      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RegionPlan
name|o
parameter_list|)
block|{
return|return
name|getRegionName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"hri="
operator|+
name|this
operator|.
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", src="
operator|+
operator|(
name|this
operator|.
name|source
operator|==
literal|null
condition|?
literal|""
else|:
name|this
operator|.
name|source
operator|.
name|getServerName
argument_list|()
operator|)
operator|+
literal|", dest="
operator|+
name|this
operator|.
name|dest
operator|.
name|getServerName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

