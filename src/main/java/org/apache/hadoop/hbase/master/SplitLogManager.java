begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
operator|.
name|Counters
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Chore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|TaskFinisher
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitLogWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|OrphanHLogAfterSplitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
operator|.
name|TaskState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|ResubmitDirective
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|TerminationStatus
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Distributes the task of log splitting to the available region servers.  * Coordination happens via zookeeper. For every log file that has to be split a  * znode is created under /hbase/splitlog. SplitLogWorkers race to grab a task.  *  * SplitLogManager monitors the task znodes that it creates using the  * timeoutMonitor thread. If a task's progress is slow then  * resubmit(String, boolean) will take away the task from the owner  * {@link SplitLogWorker} and the task will be  * upforgrabs again. When the task is done then the task's znode is deleted by  * SplitLogManager.  *  * Clients call {@link #splitLogDistributed(Path)} to split a region server's  * log files. The caller thread waits in this method until all the log files  * have been split.  *  * All the zookeeper calls made by this class are asynchronous. This is mainly  * to help reduce response time seen by the callers.  *  * There is race in this design between the SplitLogManager and the  * SplitLogWorker. SplitLogManager might re-queue a task that has in reality  * already been completed by a SplitLogWorker. We rely on the idempotency of  * the log splitting task for correctness.  *  * It is also assumed that every log splitting task is unique and once  * completed (either with success or with error) it will be not be submitted  * again. If a task is resubmitted then there is a risk that old "delete task"  * can delete the re-submission.  */
end_comment

begin_class
specifier|public
class|class
name|SplitLogManager
extends|extends
name|ZooKeeperListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SplitLogManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Stoppable
name|stopper
decl_stmt|;
specifier|private
specifier|final
name|String
name|serverName
decl_stmt|;
specifier|private
specifier|final
name|TaskFinisher
name|taskFinisher
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|long
name|zkretries
decl_stmt|;
specifier|private
name|long
name|resubmit_threshold
decl_stmt|;
specifier|private
name|long
name|timeout
decl_stmt|;
specifier|private
name|long
name|unassignedTimeout
decl_stmt|;
specifier|private
name|long
name|lastNodeCreateTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|public
name|boolean
name|ignoreZKDeleteForTesting
init|=
literal|false
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|TimeoutMonitor
name|timeoutMonitor
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|deadWorkers
init|=
literal|null
decl_stmt|;
specifier|private
name|Object
name|deadWorkersLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**    * Wrapper around {@link #SplitLogManager(ZooKeeperWatcher, Configuration,    * Stoppable, String, TaskFinisher)} that provides a task finisher for    * copying recovered edits to their final destination. The task finisher    * has to be robust because it can be arbitrarily restarted or called    * multiple times.    *     * @param zkw    * @param conf    * @param stopper    * @param serverName    */
specifier|public
name|SplitLogManager
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|String
name|serverName
parameter_list|)
block|{
name|this
argument_list|(
name|zkw
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|serverName
argument_list|,
operator|new
name|TaskFinisher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Status
name|finish
parameter_list|(
name|String
name|workerName
parameter_list|,
name|String
name|logfile
parameter_list|)
block|{
name|String
name|tmpname
init|=
name|ZKSplitLog
operator|.
name|getSplitLogDirTmpComponent
argument_list|(
name|workerName
argument_list|,
name|logfile
argument_list|)
decl_stmt|;
try|try
block|{
name|HLogSplitter
operator|.
name|moveRecoveredEditsFromTemp
argument_list|(
name|tmpname
argument_list|,
name|logfile
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not finish splitting of log file "
operator|+
name|logfile
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|ERR
return|;
block|}
return|return
name|Status
operator|.
name|DONE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Its OK to construct this object even when region-servers are not online. It    * does lookup the orphan tasks in zk but it doesn't block waiting for them    * to be done.    *    * @param zkw    * @param conf    * @param stopper    * @param serverName    * @param tf task finisher     */
specifier|public
name|SplitLogManager
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|String
name|serverName
parameter_list|,
name|TaskFinisher
name|tf
parameter_list|)
block|{
name|super
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskFinisher
operator|=
name|tf
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|stopper
operator|=
name|stopper
expr_stmt|;
name|this
operator|.
name|zkretries
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.splitlog.zk.retries"
argument_list|,
name|ZKSplitLog
operator|.
name|DEFAULT_ZK_RETRIES
argument_list|)
expr_stmt|;
name|this
operator|.
name|resubmit_threshold
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.splitlog.max.resubmit"
argument_list|,
name|ZKSplitLog
operator|.
name|DEFAULT_MAX_RESUBMIT
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.manager.timeout"
argument_list|,
name|ZKSplitLog
operator|.
name|DEFAULT_TIMEOUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|unassignedTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.manager.unassigned.timeout"
argument_list|,
name|ZKSplitLog
operator|.
name|DEFAULT_UNASSIGNED_TIMEOUT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"timeout = "
operator|+
name|timeout
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"unassigned timeout = "
operator|+
name|unassignedTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
name|this
operator|.
name|timeoutMonitor
operator|=
operator|new
name|TimeoutMonitor
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.manager.timeoutmonitor.period"
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|stopper
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|finishInitialization
parameter_list|()
block|{
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|timeoutMonitor
operator|.
name|getThread
argument_list|()
argument_list|,
name|serverName
operator|+
literal|".splitLogManagerTimeoutMonitor"
argument_list|)
expr_stmt|;
comment|// Watcher can be null during tests with Mock'd servers.
if|if
condition|(
name|this
operator|.
name|watcher
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|watcher
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lookForOrphans
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|FileStatus
index|[]
name|getFileList
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|logDirs
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileStatus
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|hLogDir
range|:
name|logDirs
control|)
block|{
name|this
operator|.
name|fs
operator|=
name|hLogDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|hLogDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|hLogDir
operator|+
literal|" doesn't exist. Nothing to do!"
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// TODO filter filenames?
name|FileStatus
index|[]
name|logfiles
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|hLogDir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|logfiles
operator|==
literal|null
operator|||
name|logfiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|hLogDir
operator|+
literal|" is empty dir, no logs to split"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|FileStatus
name|status
range|:
name|logfiles
control|)
name|fileStatus
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
name|FileStatus
index|[]
name|a
init|=
operator|new
name|FileStatus
index|[
name|fileStatus
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|fileStatus
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
comment|/**    * @param logDir    *            one region sever hlog dir path in .logs    * @throws IOException    *             if there was an error while splitting any log file    * @return cumulative size of the logfiles split    * @throws IOException     */
specifier|public
name|long
name|splitLogDistributed
parameter_list|(
specifier|final
name|Path
name|logDir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|logDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|logDirs
operator|.
name|add
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
return|return
name|splitLogDistributed
argument_list|(
name|logDirs
argument_list|)
return|;
block|}
comment|/**    * The caller will block until all the log files of the given region server    * have been processed - successfully split or an error is encountered - by an    * available worker region server. This method must only be called after the    * region servers have been brought online.    *    * @param logDirs    * @throws IOException    *          if there was an error while splitting any log file    * @return cumulative size of the logfiles split    */
specifier|public
name|long
name|splitLogDistributed
parameter_list|(
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|logDirs
parameter_list|)
throws|throws
name|IOException
block|{
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Doing distributed log split in "
operator|+
name|logDirs
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|logfiles
init|=
name|getFileList
argument_list|(
name|logDirs
argument_list|)
decl_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Checking directory contents..."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scheduling batch of logs to split"
argument_list|)
expr_stmt|;
name|tot_mgr_log_split_batch_start
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"started splitting logs in "
operator|+
name|logDirs
argument_list|)
expr_stmt|;
name|long
name|t
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|lf
range|:
name|logfiles
control|)
block|{
comment|// TODO If the log file is still being written to - which is most likely
comment|// the case for the last log file - then its length will show up here
comment|// as zero. The size of such a file can only be retrieved after
comment|// recover-lease is done. totalSize will be under in most cases and the
comment|// metrics that it drives will also be under-reported.
name|totalSize
operator|+=
name|lf
operator|.
name|getLen
argument_list|()
expr_stmt|;
if|if
condition|(
name|enqueueSplitTask
argument_list|(
name|lf
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|batch
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"duplicate log split scheduled for "
operator|+
name|lf
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|waitForSplittingCompletion
argument_list|(
name|batch
argument_list|,
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|done
operator|!=
name|batch
operator|.
name|installed
condition|)
block|{
name|batch
operator|.
name|isDead
operator|=
literal|true
expr_stmt|;
name|tot_mgr_log_split_batch_err
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while splitting logs in "
operator|+
name|logDirs
operator|+
literal|" installed = "
operator|+
name|batch
operator|.
name|installed
operator|+
literal|" but only "
operator|+
name|batch
operator|.
name|done
operator|+
literal|" done"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"error or interrupt while splitting logs in "
operator|+
name|logDirs
operator|+
literal|" Task = "
operator|+
name|batch
argument_list|)
throw|;
block|}
for|for
control|(
name|Path
name|logDir
range|:
name|logDirs
control|)
block|{
name|status
operator|.
name|setStatus
argument_list|(
literal|"Cleaning up log directory..."
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|logDir
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete log src dir. Ignoring. "
operator|+
name|logDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
name|files
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"returning success without actually splitting and "
operator|+
literal|"deleting all the log files in path "
operator|+
name|logDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete log src dir. Ignoring. "
operator|+
name|logDir
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
name|tot_mgr_log_split_batch_success
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|String
name|msg
init|=
literal|"finished splitting (more than or equal to) "
operator|+
name|totalSize
operator|+
literal|" bytes in "
operator|+
name|batch
operator|.
name|installed
operator|+
literal|" log files in "
operator|+
name|logDirs
operator|+
literal|" in "
operator|+
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t
operator|)
operator|+
literal|"ms"
decl_stmt|;
name|status
operator|.
name|markComplete
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|totalSize
return|;
block|}
comment|/**    * Add a task entry to splitlog znode if it is not already there.    *     * @param taskname the path of the log to be split    * @param batch the batch this task belongs to    * @return true if a new entry is created, false if it is already there.    */
name|boolean
name|enqueueSplitTask
parameter_list|(
name|String
name|taskname
parameter_list|,
name|TaskBatch
name|batch
parameter_list|)
block|{
name|tot_mgr_log_split_start
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|watcher
argument_list|,
name|taskname
argument_list|)
decl_stmt|;
name|Task
name|oldtask
init|=
name|createTaskIfAbsent
argument_list|(
name|path
argument_list|,
name|batch
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldtask
operator|==
literal|null
condition|)
block|{
comment|// publish the task in zk
name|createNode
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|waitForSplittingCompletion
parameter_list|(
name|TaskBatch
name|batch
parameter_list|,
name|MonitoredTask
name|status
parameter_list|)
block|{
synchronized|synchronized
init|(
name|batch
init|)
block|{
while|while
condition|(
operator|(
name|batch
operator|.
name|done
operator|+
name|batch
operator|.
name|error
operator|)
operator|!=
name|batch
operator|.
name|installed
condition|)
block|{
try|try
block|{
name|status
operator|.
name|setStatus
argument_list|(
literal|"Waiting for distributed tasks to finish. "
operator|+
literal|" scheduled="
operator|+
name|batch
operator|.
name|installed
operator|+
literal|" done="
operator|+
name|batch
operator|.
name|done
operator|+
literal|" error="
operator|+
name|batch
operator|.
name|error
argument_list|)
expr_stmt|;
name|batch
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopper
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stopped while waiting for log splits to be completed"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for log splits to be completed"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|setDone
parameter_list|(
name|String
name|path
parameter_list|,
name|TerminationStatus
name|status
parameter_list|)
block|{
name|Task
name|task
init|=
name|tasks
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|tot_mgr_unacquired_orphan_done
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"unacquired orphan task is done "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|task
init|)
block|{
if|if
condition|(
name|task
operator|.
name|status
operator|==
name|IN_PROGRESS
condition|)
block|{
if|if
condition|(
name|status
operator|==
name|SUCCESS
condition|)
block|{
name|tot_mgr_log_split_success
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Done splitting "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tot_mgr_log_split_err
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error splitting "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|status
operator|=
name|status
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|batch
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|task
operator|.
name|batch
init|)
block|{
if|if
condition|(
name|status
operator|==
name|SUCCESS
condition|)
block|{
name|task
operator|.
name|batch
operator|.
name|done
operator|++
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|batch
operator|.
name|error
operator|++
expr_stmt|;
block|}
name|task
operator|.
name|batch
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// delete the task node in zk. Keep trying indefinitely - its an async
comment|// call and no one is blocked waiting for this node to be deleted. All
comment|// task names are unique (log.<timestamp>) there is no risk of deleting
comment|// a future task.
name|deleteNode
argument_list|(
name|path
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|private
name|void
name|createNode
parameter_list|(
name|String
name|path
parameter_list|,
name|Long
name|retry_count
parameter_list|)
block|{
name|ZKUtil
operator|.
name|asyncCreate
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|path
argument_list|,
name|TaskState
operator|.
name|TASK_UNASSIGNED
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
argument_list|,
operator|new
name|CreateAsyncCallback
argument_list|()
argument_list|,
name|retry_count
argument_list|)
expr_stmt|;
name|tot_mgr_node_create_queued
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|private
name|void
name|createNodeSuccess
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|lastNodeCreateTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"put up splitlog task at znode "
operator|+
name|path
argument_list|)
expr_stmt|;
name|getDataSetWatch
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createNodeFailure
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// TODO the Manager should split the log locally instead of giving up
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to create task node"
operator|+
name|path
argument_list|)
expr_stmt|;
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getDataSetWatch
parameter_list|(
name|String
name|path
parameter_list|,
name|Long
name|retry_count
parameter_list|)
block|{
name|this
operator|.
name|watcher
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|this
operator|.
name|watcher
argument_list|,
operator|new
name|GetDataAsyncCallback
argument_list|()
argument_list|,
name|retry_count
argument_list|)
expr_stmt|;
name|tot_mgr_get_data_queued
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|getDataSetWatchSuccess
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|version
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|version
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
comment|// assume all done. The task znode suddenly disappeared.
name|setDone
argument_list|(
name|path
argument_list|,
name|SUCCESS
argument_list|)
expr_stmt|;
return|return;
block|}
name|tot_mgr_null_data
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"logic error - got null data "
operator|+
name|path
argument_list|)
expr_stmt|;
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
return|return;
block|}
name|data
operator|=
name|this
operator|.
name|watcher
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|removeMetaData
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// LOG.debug("set watch on " + path + " got data " + new String(data));
if|if
condition|(
name|TaskState
operator|.
name|TASK_UNASSIGNED
operator|.
name|equals
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"task not yet acquired "
operator|+
name|path
operator|+
literal|" ver = "
operator|+
name|version
argument_list|)
expr_stmt|;
name|handleUnassignedTask
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TaskState
operator|.
name|TASK_OWNED
operator|.
name|equals
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|heartbeat
argument_list|(
name|path
argument_list|,
name|version
argument_list|,
name|TaskState
operator|.
name|TASK_OWNED
operator|.
name|getWriterName
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TaskState
operator|.
name|TASK_RESIGNED
operator|.
name|equals
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"task "
operator|+
name|path
operator|+
literal|" entered state "
operator|+
operator|new
name|String
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|resubmitOrFail
argument_list|(
name|path
argument_list|,
name|FORCE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TaskState
operator|.
name|TASK_DONE
operator|.
name|equals
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"task "
operator|+
name|path
operator|+
literal|" entered state "
operator|+
operator|new
name|String
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskFinisher
operator|!=
literal|null
operator|&&
operator|!
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|taskFinisher
operator|.
name|finish
argument_list|(
name|TaskState
operator|.
name|TASK_DONE
operator|.
name|getWriterName
argument_list|(
name|data
argument_list|)
argument_list|,
name|ZKSplitLog
operator|.
name|getFileName
argument_list|(
name|path
argument_list|)
argument_list|)
operator|==
name|Status
operator|.
name|DONE
condition|)
block|{
name|setDone
argument_list|(
name|path
argument_list|,
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resubmitOrFail
argument_list|(
name|path
argument_list|,
name|CHECK
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setDone
argument_list|(
name|path
argument_list|,
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|TaskState
operator|.
name|TASK_ERR
operator|.
name|equals
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"task "
operator|+
name|path
operator|+
literal|" entered state "
operator|+
operator|new
name|String
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|resubmitOrFail
argument_list|(
name|path
argument_list|,
name|CHECK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"logic error - unexpected zk state for path = "
operator|+
name|path
operator|+
literal|" data = "
operator|+
operator|new
name|String
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getDataSetWatchFailure
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to set data watch "
operator|+
name|path
argument_list|)
expr_stmt|;
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
block|}
comment|/**    * It is possible for a task to stay in UNASSIGNED state indefinitely - say    * SplitLogManager wants to resubmit a task. It forces the task to UNASSIGNED    * state but it dies before it could create the RESCAN task node to signal    * the SplitLogWorkers to pick up the task. To prevent this scenario the    * SplitLogManager resubmits all orphan and UNASSIGNED tasks at startup.    *    * @param path    */
specifier|private
name|void
name|handleUnassignedTask
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
name|Task
name|task
init|=
name|findOrCreateOrphanTask
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|isOrphan
argument_list|()
operator|&&
operator|(
name|task
operator|.
name|incarnation
operator|==
literal|0
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"resubmitting unassigned orphan task "
operator|+
name|path
argument_list|)
expr_stmt|;
comment|// ignore failure to resubmit. The timeout-monitor will handle it later
comment|// albeit in a more crude fashion
name|resubmit
argument_list|(
name|path
argument_list|,
name|task
argument_list|,
name|FORCE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|heartbeat
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|new_version
parameter_list|,
name|String
name|workerName
parameter_list|)
block|{
name|Task
name|task
init|=
name|findOrCreateOrphanTask
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|new_version
operator|!=
name|task
operator|.
name|last_version
condition|)
block|{
if|if
condition|(
name|task
operator|.
name|isUnassigned
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"task "
operator|+
name|path
operator|+
literal|" acquired by "
operator|+
name|workerName
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|heartbeat
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|new_version
argument_list|,
name|workerName
argument_list|)
expr_stmt|;
name|tot_mgr_heartbeat
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"got dup heartbeat for "
operator|+
name|path
operator|+
literal|" ver = "
operator|+
name|new_version
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|private
name|boolean
name|resubmit
parameter_list|(
name|String
name|path
parameter_list|,
name|Task
name|task
parameter_list|,
name|ResubmitDirective
name|directive
parameter_list|)
block|{
comment|// its ok if this thread misses the update to task.deleted. It will
comment|// fail later
if|if
condition|(
name|task
operator|.
name|status
operator|!=
name|IN_PROGRESS
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|version
decl_stmt|;
if|if
condition|(
name|directive
operator|!=
name|FORCE
condition|)
block|{
if|if
condition|(
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|task
operator|.
name|last_update
operator|)
operator|<
name|timeout
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|task
operator|.
name|unforcedResubmits
operator|>=
name|resubmit_threshold
condition|)
block|{
if|if
condition|(
operator|!
name|task
operator|.
name|resubmitThresholdReached
condition|)
block|{
name|task
operator|.
name|resubmitThresholdReached
operator|=
literal|true
expr_stmt|;
name|tot_mgr_resubmit_threshold_reached
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping resubmissions of task "
operator|+
name|path
operator|+
literal|" because threshold "
operator|+
name|resubmit_threshold
operator|+
literal|" reached"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// race with heartbeat() that might be changing last_version
name|version
operator|=
name|task
operator|.
name|last_version
expr_stmt|;
block|}
else|else
block|{
name|version
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"resubmitting task "
operator|+
name|path
argument_list|)
expr_stmt|;
name|task
operator|.
name|incarnation
operator|++
expr_stmt|;
try|try
block|{
comment|// blocking zk call but this is done from the timeout thread
if|if
condition|(
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|path
argument_list|,
name|TaskState
operator|.
name|TASK_UNASSIGNED
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
argument_list|,
name|version
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"failed to resubmit task "
operator|+
name|path
operator|+
literal|" version changed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to resubmit because znode doesn't exist "
operator|+
name|path
operator|+
literal|" task done (or forced done by removing the znode)"
argument_list|)
expr_stmt|;
name|getDataSetWatchSuccess
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|tot_mgr_resubmit_failed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to resubmit "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// don't count forced resubmits
if|if
condition|(
name|directive
operator|!=
name|FORCE
condition|)
block|{
name|task
operator|.
name|unforcedResubmits
operator|++
expr_stmt|;
block|}
name|task
operator|.
name|setUnassigned
argument_list|()
expr_stmt|;
name|createRescanNode
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|tot_mgr_resubmit
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|resubmitOrFail
parameter_list|(
name|String
name|path
parameter_list|,
name|ResubmitDirective
name|directive
parameter_list|)
block|{
if|if
condition|(
name|resubmit
argument_list|(
name|path
argument_list|,
name|findOrCreateOrphanTask
argument_list|(
name|path
argument_list|)
argument_list|,
name|directive
argument_list|)
operator|==
literal|false
condition|)
block|{
name|setDone
argument_list|(
name|path
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteNode
parameter_list|(
name|String
name|path
parameter_list|,
name|Long
name|retries
parameter_list|)
block|{
name|tot_mgr_node_delete_queued
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// Once a task znode is ready for delete, that is it is in the TASK_DONE
comment|// state, then no one should be writing to it anymore. That is no one
comment|// will be updating the znode version any more.
name|this
operator|.
name|watcher
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|DeleteAsyncCallback
argument_list|()
argument_list|,
name|retries
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteNodeSuccess
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|ignoreZKDeleteForTesting
condition|)
block|{
return|return;
block|}
name|Task
name|task
decl_stmt|;
name|task
operator|=
name|tasks
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|tot_mgr_rescan_deleted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|tot_mgr_missing_state_in_delete
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleted task without in memory state "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|task
init|)
block|{
name|task
operator|.
name|status
operator|=
name|DELETED
expr_stmt|;
name|task
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
name|tot_mgr_task_deleted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|deleteNodeFailure
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"logic failure, failing to delete a node should never happen "
operator|+
literal|"because delete has infinite retries"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/**    * signal the workers that a task was resubmitted by creating the    * RESCAN node.    * @throws KeeperException     */
specifier|private
name|void
name|createRescanNode
parameter_list|(
name|long
name|retries
parameter_list|)
block|{
comment|// The RESCAN node will be deleted almost immediately by the
comment|// SplitLogManager as soon as it is created because it is being
comment|// created in the DONE state. This behavior prevents a buildup
comment|// of RESCAN nodes. But there is also a chance that a SplitLogWorker
comment|// might miss the watch-trigger that creation of RESCAN node provides.
comment|// Since the TimeoutMonitor will keep resubmitting UNASSIGNED tasks
comment|// therefore this behavior is safe.
name|this
operator|.
name|watcher
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|ZKSplitLog
operator|.
name|getRescanNode
argument_list|(
name|watcher
argument_list|)
argument_list|,
name|TaskState
operator|.
name|TASK_DONE
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|,
operator|new
name|CreateRescanAsyncCallback
argument_list|()
argument_list|,
operator|new
name|Long
argument_list|(
name|retries
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createRescanSuccess
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|lastNodeCreateTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|tot_mgr_rescan
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|getDataSetWatch
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createRescanFailure
parameter_list|()
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"logic failure, rescan failure must not happen"
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param path    * @param batch    * @return null on success, existing task on error    */
specifier|private
name|Task
name|createTaskIfAbsent
parameter_list|(
name|String
name|path
parameter_list|,
name|TaskBatch
name|batch
parameter_list|)
block|{
name|Task
name|oldtask
decl_stmt|;
comment|// batch.installed is only changed via this function and
comment|// a single thread touches batch.installed.
name|Task
name|newtask
init|=
operator|new
name|Task
argument_list|()
decl_stmt|;
name|newtask
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
name|oldtask
operator|=
name|tasks
operator|.
name|putIfAbsent
argument_list|(
name|path
argument_list|,
name|newtask
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldtask
operator|==
literal|null
condition|)
block|{
name|batch
operator|.
name|installed
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// new task was not used.
synchronized|synchronized
init|(
name|oldtask
init|)
block|{
if|if
condition|(
name|oldtask
operator|.
name|isOrphan
argument_list|()
condition|)
block|{
if|if
condition|(
name|oldtask
operator|.
name|status
operator|==
name|SUCCESS
condition|)
block|{
comment|// The task is already done. Do not install the batch for this
comment|// task because it might be too late for setDone() to update
comment|// batch.done. There is no need for the batch creator to wait for
comment|// this task to complete.
return|return
operator|(
literal|null
operator|)
return|;
block|}
if|if
condition|(
name|oldtask
operator|.
name|status
operator|==
name|IN_PROGRESS
condition|)
block|{
name|oldtask
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
name|batch
operator|.
name|installed
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Previously orphan task "
operator|+
name|path
operator|+
literal|" is now being waited upon"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
while|while
condition|(
name|oldtask
operator|.
name|status
operator|==
name|FAILURE
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"wait for status of task "
operator|+
name|path
operator|+
literal|" to change to DELETED"
argument_list|)
expr_stmt|;
name|tot_mgr_wait_for_zk_delete
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|oldtask
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted when waiting for znode delete callback"
argument_list|)
expr_stmt|;
comment|// fall through to return failure
break|break;
block|}
block|}
if|if
condition|(
name|oldtask
operator|.
name|status
operator|!=
name|DELETED
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure because previously failed task"
operator|+
literal|" state still present. Waiting for znode delete callback"
operator|+
literal|" path="
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
name|oldtask
return|;
block|}
comment|// reinsert the newTask and it must succeed this time
name|Task
name|t
init|=
name|tasks
operator|.
name|putIfAbsent
argument_list|(
name|path
argument_list|,
name|newtask
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|batch
operator|.
name|installed
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Logic error. Deleted task still present in tasks map"
argument_list|)
expr_stmt|;
assert|assert
literal|false
operator|:
literal|"Deleted task still present in tasks map"
assert|;
return|return
name|t
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure because two threads can't wait for the same task. "
operator|+
literal|" path="
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
name|oldtask
return|;
block|}
block|}
name|Task
name|findOrCreateOrphanTask
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Task
name|orphanTask
init|=
operator|new
name|Task
argument_list|()
decl_stmt|;
name|Task
name|task
decl_stmt|;
name|task
operator|=
name|tasks
operator|.
name|putIfAbsent
argument_list|(
name|path
argument_list|,
name|orphanTask
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating orphan task "
operator|+
name|path
argument_list|)
expr_stmt|;
name|tot_mgr_orphan_task_acquired
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|task
operator|=
name|orphanTask
expr_stmt|;
block|}
return|return
name|task
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeDataChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|tasks
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
operator|||
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|getDataSetWatch
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|timeoutMonitor
operator|!=
literal|null
condition|)
block|{
name|timeoutMonitor
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|lookForOrphans
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|orphans
decl_stmt|;
try|try
block|{
name|orphans
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|this
operator|.
name|watcher
operator|.
name|splitLogZNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|orphans
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not get children of "
operator|+
name|this
operator|.
name|watcher
operator|.
name|splitLogZNode
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not get children of "
operator|+
name|this
operator|.
name|watcher
operator|.
name|splitLogZNode
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|rescan_nodes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|orphans
control|)
block|{
name|String
name|nodepath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|splitLogZNode
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|ZKSplitLog
operator|.
name|isRescanNode
argument_list|(
name|watcher
argument_list|,
name|nodepath
argument_list|)
condition|)
block|{
name|rescan_nodes
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found orphan rescan node "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"found orphan task "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|getDataSetWatch
argument_list|(
name|nodepath
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"found "
operator|+
operator|(
name|orphans
operator|.
name|size
argument_list|()
operator|-
name|rescan_nodes
operator|)
operator|+
literal|" orphan tasks and "
operator|+
name|rescan_nodes
operator|+
literal|" rescan nodes"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Keeps track of the batch of tasks submitted together by a caller in    * splitLogDistributed(). Clients threads use this object to wait for all    * their tasks to be done.    *<p>    * All access is synchronized.    */
specifier|static
class|class
name|TaskBatch
block|{
name|int
name|installed
init|=
literal|0
decl_stmt|;
name|int
name|done
init|=
literal|0
decl_stmt|;
name|int
name|error
init|=
literal|0
decl_stmt|;
specifier|volatile
name|boolean
name|isDead
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
literal|"installed = "
operator|+
name|installed
operator|+
literal|" done = "
operator|+
name|done
operator|+
literal|" error = "
operator|+
name|error
operator|)
return|;
block|}
block|}
comment|/**    * in memory state of an active task.    */
specifier|static
class|class
name|Task
block|{
specifier|volatile
name|long
name|last_update
decl_stmt|;
specifier|volatile
name|int
name|last_version
decl_stmt|;
specifier|volatile
name|String
name|cur_worker_name
decl_stmt|;
name|TaskBatch
name|batch
decl_stmt|;
specifier|volatile
name|TerminationStatus
name|status
decl_stmt|;
specifier|volatile
name|int
name|incarnation
decl_stmt|;
specifier|volatile
name|int
name|unforcedResubmits
decl_stmt|;
specifier|volatile
name|boolean
name|resubmitThresholdReached
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
literal|"last_update = "
operator|+
name|last_update
operator|+
literal|" last_version = "
operator|+
name|last_version
operator|+
literal|" cur_worker_name = "
operator|+
name|cur_worker_name
operator|+
literal|" status = "
operator|+
name|status
operator|+
literal|" incarnation = "
operator|+
name|incarnation
operator|+
literal|" resubmits = "
operator|+
name|unforcedResubmits
operator|+
literal|" batch = "
operator|+
name|batch
operator|)
return|;
block|}
name|Task
parameter_list|()
block|{
name|incarnation
operator|=
literal|0
expr_stmt|;
name|last_version
operator|=
operator|-
literal|1
expr_stmt|;
name|status
operator|=
name|IN_PROGRESS
expr_stmt|;
name|setUnassigned
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOrphan
parameter_list|()
block|{
return|return
operator|(
name|batch
operator|==
literal|null
operator|||
name|batch
operator|.
name|isDead
operator|)
return|;
block|}
specifier|public
name|boolean
name|isUnassigned
parameter_list|()
block|{
return|return
operator|(
name|last_update
operator|==
operator|-
literal|1
operator|)
return|;
block|}
specifier|public
name|void
name|heartbeat
parameter_list|(
name|long
name|time
parameter_list|,
name|int
name|version
parameter_list|,
name|String
name|worker
parameter_list|)
block|{
name|last_version
operator|=
name|version
expr_stmt|;
name|last_update
operator|=
name|time
expr_stmt|;
name|cur_worker_name
operator|=
name|worker
expr_stmt|;
block|}
specifier|public
name|void
name|setUnassigned
parameter_list|()
block|{
name|cur_worker_name
operator|=
literal|null
expr_stmt|;
name|last_update
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|void
name|handleDeadWorker
parameter_list|(
name|String
name|workerName
parameter_list|)
block|{
comment|// resubmit the tasks on the TimeoutMonitor thread. Makes it easier
comment|// to reason about concurrency. Makes it easier to retry.
synchronized|synchronized
init|(
name|deadWorkersLock
init|)
block|{
if|if
condition|(
name|deadWorkers
operator|==
literal|null
condition|)
block|{
name|deadWorkers
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|deadWorkers
operator|.
name|add
argument_list|(
name|workerName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"dead splitlog worker "
operator|+
name|workerName
argument_list|)
expr_stmt|;
block|}
name|void
name|handleDeadWorkers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverNames
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|workerNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|serverNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|serverNames
control|)
block|{
name|workerNames
operator|.
name|add
argument_list|(
name|serverName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|deadWorkersLock
init|)
block|{
if|if
condition|(
name|deadWorkers
operator|==
literal|null
condition|)
block|{
name|deadWorkers
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|deadWorkers
operator|.
name|addAll
argument_list|(
name|workerNames
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"dead splitlog workers "
operator|+
name|workerNames
argument_list|)
expr_stmt|;
block|}
comment|/**    * Periodically checks all active tasks and resubmits the ones that have timed    * out    */
specifier|private
class|class
name|TimeoutMonitor
extends|extends
name|Chore
block|{
specifier|public
name|TimeoutMonitor
parameter_list|(
specifier|final
name|int
name|period
parameter_list|,
name|Stoppable
name|stopper
parameter_list|)
block|{
name|super
argument_list|(
literal|"SplitLogManager Timeout Monitor"
argument_list|,
name|period
argument_list|,
name|stopper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|int
name|resubmitted
init|=
literal|0
decl_stmt|;
name|int
name|unassigned
init|=
literal|0
decl_stmt|;
name|int
name|tot
init|=
literal|0
decl_stmt|;
name|boolean
name|found_assigned_task
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|localDeadWorkers
decl_stmt|;
synchronized|synchronized
init|(
name|deadWorkersLock
init|)
block|{
name|localDeadWorkers
operator|=
name|deadWorkers
expr_stmt|;
name|deadWorkers
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Task
argument_list|>
name|e
range|:
name|tasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Task
name|task
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|cur_worker
init|=
name|task
operator|.
name|cur_worker_name
decl_stmt|;
name|tot
operator|++
expr_stmt|;
comment|// don't easily resubmit a task which hasn't been picked up yet. It
comment|// might be a long while before a SplitLogWorker is free to pick up a
comment|// task. This is because a SplitLogWorker picks up a task one at a
comment|// time. If we want progress when there are no region servers then we
comment|// will have to run a SplitLogWorker thread in the Master.
if|if
condition|(
name|task
operator|.
name|isUnassigned
argument_list|()
condition|)
block|{
name|unassigned
operator|++
expr_stmt|;
continue|continue;
block|}
name|found_assigned_task
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|localDeadWorkers
operator|!=
literal|null
operator|&&
name|localDeadWorkers
operator|.
name|contains
argument_list|(
name|cur_worker
argument_list|)
condition|)
block|{
name|tot_mgr_resubmit_dead_server_task
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|resubmit
argument_list|(
name|path
argument_list|,
name|task
argument_list|,
name|FORCE
argument_list|)
condition|)
block|{
name|resubmitted
operator|++
expr_stmt|;
block|}
else|else
block|{
name|handleDeadWorker
argument_list|(
name|cur_worker
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to resubmit task "
operator|+
name|path
operator|+
literal|" owned by dead "
operator|+
name|cur_worker
operator|+
literal|", will retry."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|resubmit
argument_list|(
name|path
argument_list|,
name|task
argument_list|,
name|CHECK
argument_list|)
condition|)
block|{
name|resubmitted
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tot
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"total tasks = "
operator|+
name|tot
operator|+
literal|" unassigned = "
operator|+
name|unassigned
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resubmitted
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"resubmitted "
operator|+
name|resubmitted
operator|+
literal|" out of "
operator|+
name|tot
operator|+
literal|" tasks"
argument_list|)
expr_stmt|;
block|}
comment|// If there are pending tasks and all of them have been unassigned for
comment|// some time then put up a RESCAN node to ping the workers.
comment|// ZKSplitlog.DEFAULT_UNASSIGNED_TIMEOUT is of the order of minutes
comment|// because a. it is very unlikely that every worker had a
comment|// transient error when trying to grab the task b. if there are no
comment|// workers then all tasks wills stay unassigned indefinitely and the
comment|// manager will be indefinitely creating RESCAN nodes. TODO may be the
comment|// master should spawn both a manager and a worker thread to guarantee
comment|// that there is always one worker in the system
if|if
condition|(
name|tot
operator|>
literal|0
operator|&&
operator|!
name|found_assigned_task
operator|&&
operator|(
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastNodeCreateTime
operator|)
operator|>
name|unassignedTimeout
operator|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Task
argument_list|>
name|e
range|:
name|tasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Task
name|task
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// we have to do this check again because tasks might have
comment|// been asynchronously assigned.
if|if
condition|(
name|task
operator|.
name|isUnassigned
argument_list|()
condition|)
block|{
comment|// We just touch the znode to make sure its still there
name|getDataSetWatch
argument_list|(
name|path
argument_list|,
name|zkretries
argument_list|)
expr_stmt|;
block|}
block|}
name|createRescanNode
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|tot_mgr_resubmit_unassigned
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"resubmitting unassigned task(s) after timeout"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Asynchronous handler for zk create node results.    * Retries on failures.    */
class|class
name|CreateAsyncCallback
implements|implements
name|AsyncCallback
operator|.
name|StringCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CreateAsyncCallback
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|tot_mgr_node_create_result
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|rc
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
condition|)
block|{
comment|// What if there is a delete pending against this pre-existing
comment|// znode? Then this soon-to-be-deleted task znode must be in TASK_DONE
comment|// state. Only operations that will be carried out on this node by
comment|// this manager are get-znode-data, task-finisher and delete-znode.
comment|// And all code pieces correctly handle the case of suddenly
comment|// disappearing task-znode.
name|LOG
operator|.
name|debug
argument_list|(
literal|"found pre-existing znode "
operator|+
name|path
argument_list|)
expr_stmt|;
name|tot_mgr_node_already_exists
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Long
name|retry_count
init|=
operator|(
name|Long
operator|)
name|ctx
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"create rc ="
operator|+
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
operator|+
literal|" for "
operator|+
name|path
operator|+
literal|" remaining retries="
operator|+
name|retry_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry_count
operator|==
literal|0
condition|)
block|{
name|tot_mgr_node_create_err
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|createNodeFailure
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tot_mgr_node_create_retry
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|createNode
argument_list|(
name|path
argument_list|,
name|retry_count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
name|createNodeSuccess
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asynchronous handler for zk get-data-set-watch on node results.    * Retries on failures.    */
class|class
name|GetDataAsyncCallback
implements|implements
name|AsyncCallback
operator|.
name|DataCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GetDataAsyncCallback
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|Stat
name|stat
parameter_list|)
block|{
name|tot_mgr_get_data_result
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|rc
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|NONODE
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|tot_mgr_get_data_nonode
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// The task znode has been deleted. Must be some pending delete
comment|// that deleted the task. Assume success because a task-znode is
comment|// is only deleted after TaskFinisher is successful.
name|LOG
operator|.
name|warn
argument_list|(
literal|"task znode "
operator|+
name|path
operator|+
literal|" vanished."
argument_list|)
expr_stmt|;
name|getDataSetWatchSuccess
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
return|return;
block|}
name|Long
name|retry_count
init|=
operator|(
name|Long
operator|)
name|ctx
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"getdata rc = "
operator|+
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
operator|+
literal|" "
operator|+
name|path
operator|+
literal|" remaining retries="
operator|+
name|retry_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry_count
operator|==
literal|0
condition|)
block|{
name|tot_mgr_get_data_err
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|getDataSetWatchFailure
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tot_mgr_get_data_retry
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|getDataSetWatch
argument_list|(
name|path
argument_list|,
name|retry_count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|getDataSetWatchSuccess
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/**    * Asynchronous handler for zk delete node results.    * Retries on failures.    */
class|class
name|DeleteAsyncCallback
implements|implements
name|AsyncCallback
operator|.
name|VoidCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DeleteAsyncCallback
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|)
block|{
name|tot_mgr_node_delete_result
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|rc
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NONODE
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|tot_mgr_node_delete_err
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|Long
name|retry_count
init|=
operator|(
name|Long
operator|)
name|ctx
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"delete rc="
operator|+
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
operator|+
literal|" for "
operator|+
name|path
operator|+
literal|" remaining retries="
operator|+
name|retry_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry_count
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"delete failed "
operator|+
name|path
argument_list|)
expr_stmt|;
name|deleteNodeFailure
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deleteNode
argument_list|(
name|path
argument_list|,
name|retry_count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|path
operator|+
literal|" does not exist. Either was created but deleted behind our"
operator|+
literal|" back by another pending delete OR was deleted"
operator|+
literal|" in earlier retry rounds. zkretries = "
operator|+
operator|(
name|Long
operator|)
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleted "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|deleteNodeSuccess
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asynchronous handler for zk create RESCAN-node results.    * Retries on failures.    *<p>    * A RESCAN node is created using PERSISTENT_SEQUENTIAL flag. It is a signal    * for all the {@link SplitLogWorker}s to rescan for new tasks.    */
class|class
name|CreateRescanAsyncCallback
implements|implements
name|AsyncCallback
operator|.
name|StringCallback
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CreateRescanAsyncCallback
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|Long
name|retry_count
init|=
operator|(
name|Long
operator|)
name|ctx
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"rc="
operator|+
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
operator|+
literal|" for "
operator|+
name|path
operator|+
literal|" remaining retries="
operator|+
name|retry_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry_count
operator|==
literal|0
condition|)
block|{
name|createRescanFailure
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|createRescanNode
argument_list|(
name|retry_count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// path is the original arg, name is the actual name that was created
name|createRescanSuccess
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * {@link SplitLogManager} can use objects implementing this interface to    * finish off a partially done task by {@link SplitLogWorker}. This provides    * a serialization point at the end of the task processing. Must be    * restartable and idempotent.    */
specifier|static
specifier|public
interface|interface
name|TaskFinisher
block|{
comment|/**      * status that can be returned finish()      */
specifier|static
specifier|public
enum|enum
name|Status
block|{
comment|/**        * task completed successfully        */
name|DONE
parameter_list|()
operator|,
comment|/**        * task completed with error        */
constructor|ERR(
block|)
enum|;
block|}
comment|/**      * finish the partially done task. workername provides clue to where the      * partial results of the partially done tasks are present. taskname is the      * name of the task that was put up in zookeeper.      *<p>      * @param workerName      * @param taskname      * @return DONE if task completed successfully, ERR otherwise      */
specifier|public
name|Status
name|finish
parameter_list|(
name|String
name|workerName
parameter_list|,
name|String
name|taskname
parameter_list|)
function_decl|;
block|}
end_class

begin_enum
enum|enum
name|ResubmitDirective
block|{
name|CHECK
parameter_list|()
operator|,
constructor|FORCE(
block|)
enum|;
end_enum

begin_expr_stmt
unit|}   enum
name|TerminationStatus
block|{
name|IN_PROGRESS
argument_list|(
literal|"in_progress"
argument_list|)
block|,
name|SUCCESS
argument_list|(
literal|"success"
argument_list|)
block|,
name|FAILURE
argument_list|(
literal|"failure"
argument_list|)
block|,
name|DELETED
argument_list|(
literal|"deleted"
argument_list|)
block|;
name|String
name|statusMsg
block|;
name|TerminationStatus
argument_list|(
name|String
name|msg
argument_list|)
block|{
name|statusMsg
operator|=
name|msg
block|;     }
expr|@
name|Override
specifier|public
name|String
name|toString
argument_list|()
block|{
return|return
name|statusMsg
return|;
block|}
end_expr_stmt

unit|} }
end_unit

