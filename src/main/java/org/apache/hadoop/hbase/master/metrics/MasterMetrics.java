begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|HBaseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricsRate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|PersistentMetricsTimeVaryingRate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|Updater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|jvm
operator|.
name|JvmMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsLongValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsRegistry
import|;
end_import

begin_comment
comment|/**  * This class is for maintaining the various master statistics  * and publishing them through the metrics interfaces.  *<p>  * This class has a number of metrics variables that are publicly accessible;  * these variables (objects) have methods to update their values.  */
end_comment

begin_class
specifier|public
class|class
name|MasterMetrics
implements|implements
name|Updater
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MetricsRecord
name|metricsRecord
decl_stmt|;
specifier|private
specifier|final
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MasterStatistics
name|masterStatistics
decl_stmt|;
specifier|private
name|long
name|lastUpdate
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|long
name|lastExtUpdate
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|long
name|extendedPeriod
init|=
literal|0
decl_stmt|;
comment|/*    * Count of requests to the cluster since last call to metrics update    */
specifier|private
specifier|final
name|MetricsRate
name|cluster_requests
init|=
operator|new
name|MetricsRate
argument_list|(
literal|"cluster_requests"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/** Time it takes to finish HLog.splitLog() */
specifier|final
name|PersistentMetricsTimeVaryingRate
name|splitTime
init|=
operator|new
name|PersistentMetricsTimeVaryingRate
argument_list|(
literal|"splitTime"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/** Size of HLog files being split */
specifier|final
name|PersistentMetricsTimeVaryingRate
name|splitSize
init|=
operator|new
name|PersistentMetricsTimeVaryingRate
argument_list|(
literal|"splitSize"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
specifier|public
name|MasterMetrics
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|MetricsContext
name|context
init|=
name|MetricsUtil
operator|.
name|getContext
argument_list|(
literal|"hbase"
argument_list|)
decl_stmt|;
name|metricsRecord
operator|=
name|MetricsUtil
operator|.
name|createRecord
argument_list|(
name|context
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|metricsRecord
operator|.
name|setTag
argument_list|(
literal|"Master"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerUpdater
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|JvmMetrics
operator|.
name|init
argument_list|(
literal|"Master"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|HBaseInfo
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// expose the MBean for metrics
name|masterStatistics
operator|=
operator|new
name|MasterStatistics
argument_list|(
name|this
operator|.
name|registry
argument_list|)
expr_stmt|;
comment|// get custom attributes
try|try
block|{
name|Object
name|m
init|=
name|ContextFactory
operator|.
name|getFactory
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"hbase.extendedperiod"
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|instanceof
name|String
condition|)
block|{
name|this
operator|.
name|extendedPeriod
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|m
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Couldn't load ContextFactory for Metrics config info"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|masterStatistics
operator|!=
literal|null
condition|)
name|masterStatistics
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Since this object is a registered updater, this method will be called    * periodically, e.g. every 5 seconds.    * @param unused    */
specifier|public
name|void
name|doUpdates
parameter_list|(
name|MetricsContext
name|unused
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|lastUpdate
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// has the extended period for long-living stats elapsed?
if|if
condition|(
name|this
operator|.
name|extendedPeriod
operator|>
literal|0
operator|&&
name|this
operator|.
name|lastUpdate
operator|-
name|this
operator|.
name|lastExtUpdate
operator|>=
name|this
operator|.
name|extendedPeriod
condition|)
block|{
name|this
operator|.
name|lastExtUpdate
operator|=
name|this
operator|.
name|lastUpdate
expr_stmt|;
name|this
operator|.
name|splitTime
operator|.
name|resetMinMaxAvg
argument_list|()
expr_stmt|;
name|this
operator|.
name|splitSize
operator|.
name|resetMinMaxAvg
argument_list|()
expr_stmt|;
name|this
operator|.
name|resetAllMinMax
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|cluster_requests
operator|.
name|pushMetric
argument_list|(
name|metricsRecord
argument_list|)
expr_stmt|;
name|this
operator|.
name|splitTime
operator|.
name|pushMetric
argument_list|(
name|metricsRecord
argument_list|)
expr_stmt|;
name|this
operator|.
name|splitSize
operator|.
name|pushMetric
argument_list|(
name|metricsRecord
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|metricsRecord
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|resetAllMinMax
parameter_list|()
block|{
comment|// Nothing to do
block|}
comment|/**    * Record a single instance of a split    * @param time time that the split took    * @param size length of original HLogs that were split    */
specifier|public
specifier|synchronized
name|void
name|addSplit
parameter_list|(
name|long
name|time
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|splitTime
operator|.
name|inc
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|splitSize
operator|.
name|inc
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return Count of requests.    */
specifier|public
name|float
name|getRequests
parameter_list|()
block|{
return|return
name|this
operator|.
name|cluster_requests
operator|.
name|getPreviousIntervalValue
argument_list|()
return|;
block|}
comment|/**    * @param inc How much to add to requests.    */
specifier|public
name|void
name|incrementRequests
parameter_list|(
specifier|final
name|int
name|inc
parameter_list|)
block|{
name|this
operator|.
name|cluster_requests
operator|.
name|inc
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

