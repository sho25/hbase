begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|RegionTransitionEventData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|HBaseEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_comment
comment|/**  * This is the event handler for all events relating to closing regions on the  * HMaster. The following event types map to this handler:  *   - RS_REGION_CLOSING  *   - RS_REGION_CLOSED  */
end_comment

begin_class
specifier|public
class|class
name|MasterCloseRegionHandler
extends|extends
name|HBaseEventHandler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MasterCloseRegionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|regionName
decl_stmt|;
specifier|protected
name|byte
index|[]
name|serializedData
decl_stmt|;
name|RegionTransitionEventData
name|hbEventData
decl_stmt|;
specifier|public
name|MasterCloseRegionHandler
parameter_list|(
name|HBaseEventType
name|eventType
parameter_list|,
name|String
name|regionName
parameter_list|,
name|byte
index|[]
name|serializedData
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|,
name|HMaster
operator|.
name|MASTER
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
name|regionName
expr_stmt|;
name|this
operator|.
name|serializedData
operator|=
name|serializedData
expr_stmt|;
block|}
comment|/**    * Handle the various events relating to closing regions. We can get the     * following events here:    *   - RS_REGION_CLOSING : No-op    *   - RS_REGION_CLOSED  : The region is closed. If we are not in a shutdown     *                         state, find the RS to open this region. This could     *                         be a part of a region move, or just that the RS has     *                         died. Should result in a M_REQUEST_OPENREGION event     *                         getting created.    */
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Event = "
operator|+
name|getHBEvent
argument_list|()
operator|+
literal|", region = "
operator|+
name|regionName
argument_list|)
expr_stmt|;
comment|// handle RS_REGION_CLOSED events
name|handleRegionClosedEvent
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|handleRegionClosedEvent
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|hbEventData
operator|==
literal|null
condition|)
block|{
name|hbEventData
operator|=
operator|new
name|RegionTransitionEventData
argument_list|()
expr_stmt|;
name|Writables
operator|.
name|getWritable
argument_list|(
name|serializedData
argument_list|,
name|hbEventData
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not deserialize additional args for Close region"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// process the region close - this will cause the reopening of the
comment|// region as a part of the heartbeat of some RS
name|serverManager
operator|.
name|processRegionClose
argument_list|(
name|hbEventData
operator|.
name|getHmsg
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed close of region "
operator|+
name|hbEventData
operator|.
name|getHmsg
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getRegionName
parameter_list|()
block|{
return|return
name|regionName
return|;
block|}
block|}
end_class

end_unit

