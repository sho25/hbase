begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Chore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Base HRegion scanner class. Holds utilty common to<code>ROOT</code> and  *<code>META</code> HRegion scanners.  *  *<p>How do we know if all regions are assigned? After the initial scan of  * the<code>ROOT</code> and<code>META</code> regions, all regions known at  * that time will have been or are in the process of being assigned.</p>  *  *<p>When a region is split the region server notifies the master of the  * split and the new regions are assigned. But suppose the master loses the  * split message? We need to periodically rescan the<code>ROOT</code> and  *<code>META</code> regions.  *<ul>  *<li>If we rescan, any regions that are new but not assigned will have  *    no server info. Any regions that are not being served by the same  *    server will get re-assigned.</li>  *  *<li>Thus a periodic rescan of the root region will find any new  *<code>META</code> regions where we missed the<code>META</code> split  *    message or we failed to detect a server death and consequently need to  *    assign the region to a new server.</li>  *  *<li>if we keep track of all the known<code>META</code> regions, then  *    we can rescan them periodically. If we do this then we can detect any  *    regions for which we missed a region split message.</li>  *</ul>  *  * Thus just keeping track of all the<code>META</code> regions permits  * periodic rescanning which will detect unassigned regions (new or  * otherwise) without the need to keep track of every region.</p>  *  *<p>So the<code>ROOT</code> region scanner needs to wake up:  *<ol>  *<li>when the master receives notification that the<code>ROOT</code>  * region has been opened.</li>  *<li>periodically after the first scan</li>  *</ol>  *  * The<code>META</code>  scanner needs to wake up:  *<ol>  *<li>when a<code>META</code> region comes on line</li>  *</li>periodically to rescan the online<code>META</code> regions</li>  *</ol>  *  *<p>A<code>META</code> region is not 'online' until it has been scanned  * once.  */
end_comment

begin_class
specifier|abstract
class|class
name|BaseScanner
extends|extends
name|Chore
implements|implements
name|HConstants
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BaseScanner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// These are names of new columns in a meta region offlined parent row.  They
comment|// are added by the metascanner after we verify that split daughter made it
comment|// in.  Their value is 'true' if present.
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|SPLITA_CHECKED
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|SPLITA_QUALIFIER
argument_list|)
operator|+
literal|"_checked"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|SPLITB_CHECKED
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|SPLITB_QUALIFIER
argument_list|)
operator|+
literal|"_checked"
argument_list|)
decl_stmt|;
comment|// Make the 'true' Writable once only.
specifier|private
specifier|static
name|byte
index|[]
name|TRUE_WRITABLE_AS_BYTES
decl_stmt|;
static|static
block|{
try|try
block|{
name|TRUE_WRITABLE_AS_BYTES
operator|=
name|Writables
operator|.
name|getBytes
argument_list|(
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|boolean
name|rootRegion
decl_stmt|;
specifier|protected
specifier|final
name|HMaster
name|master
decl_stmt|;
specifier|protected
name|boolean
name|initialScanComplete
decl_stmt|;
specifier|protected
specifier|abstract
name|boolean
name|initialScan
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|void
name|maintenanceScan
parameter_list|()
function_decl|;
comment|// will use this variable to synchronize and make sure we aren't interrupted
comment|// mid-scan
specifier|final
name|Object
name|scannerLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|BaseScanner
parameter_list|(
specifier|final
name|HMaster
name|master
parameter_list|,
specifier|final
name|boolean
name|rootRegion
parameter_list|,
specifier|final
name|AtomicBoolean
name|stop
parameter_list|)
block|{
name|super
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.master.meta.thread.rescanfrequency"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
argument_list|,
name|stop
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootRegion
operator|=
name|rootRegion
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|initialScanComplete
operator|=
literal|false
expr_stmt|;
block|}
comment|/** @return true if initial scan completed successfully */
specifier|public
name|boolean
name|isInitialScanComplete
parameter_list|()
block|{
return|return
name|initialScanComplete
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|initialChore
parameter_list|()
block|{
return|return
name|initialScan
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|maintenanceScan
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param region Region to scan    * @throws IOException    */
specifier|protected
name|void
name|scanRegion
parameter_list|(
specifier|final
name|MetaRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInterface
name|regionServer
init|=
literal|null
decl_stmt|;
name|long
name|scannerId
init|=
operator|-
literal|1L
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" scanning meta region "
operator|+
name|region
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Array to hold list of split parents found.  Scan adds to list.  After
comment|// scan we go check if parents can be removed and that their daughters
comment|// are in place.
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|splitParents
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|emptyRows
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
try|try
block|{
name|regionServer
operator|=
name|this
operator|.
name|master
operator|.
name|getServerConnection
argument_list|()
operator|.
name|getHRegionConnection
argument_list|(
name|region
operator|.
name|getServer
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
comment|// Make this scan do a row at a time otherwise, data can be stale.
name|s
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scannerId
operator|=
name|regionServer
operator|.
name|openScanner
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Result
name|values
init|=
name|regionServer
operator|.
name|next
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|HRegionInfo
name|info
init|=
name|master
operator|.
name|getHRegionInfo
argument_list|(
name|values
operator|.
name|getRow
argument_list|()
argument_list|,
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|emptyRows
operator|.
name|add
argument_list|(
name|values
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|serverAddress
init|=
name|getServerAddress
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|getStartCode
argument_list|(
name|values
argument_list|)
decl_stmt|;
comment|// Note Region has been assigned.
name|checkAssigned
argument_list|(
name|regionServer
argument_list|,
name|region
argument_list|,
name|info
argument_list|,
name|serverAddress
argument_list|,
name|startCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSplitParent
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|splitParents
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|rows
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|rootRegion
condition|)
block|{
name|this
operator|.
name|master
operator|.
name|getRegionManager
argument_list|()
operator|.
name|setNumMetaRegions
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|UnknownScannerException
condition|)
block|{
comment|// Reset scannerId so we do not try closing a scanner the other side
comment|// has lost account of: prevents duplicated stack trace out of the
comment|// below close in the finally.
name|scannerId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|scannerId
operator|!=
operator|-
literal|1L
operator|&&
name|regionServer
operator|!=
literal|null
condition|)
block|{
name|regionServer
operator|.
name|close
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing scanner"
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Scan is finished.
comment|// First clean up any meta region rows which had null HRegionInfos
if|if
condition|(
name|emptyRows
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found "
operator|+
name|emptyRows
operator|.
name|size
argument_list|()
operator|+
literal|" rows with empty HRegionInfo "
operator|+
literal|"while scanning meta region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|.
name|deleteEmptyMetaRows
argument_list|(
name|regionServer
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|emptyRows
argument_list|)
expr_stmt|;
block|}
comment|// Take a look at split parents to see if any we can clean up any and to
comment|// make sure that daughter regions are in place.
if|if
condition|(
name|splitParents
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|e
range|:
name|splitParents
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|cleanupAndVerifySplits
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|regionServer
argument_list|,
name|hri
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" scan of "
operator|+
name|rows
operator|+
literal|" row(s) of meta region "
operator|+
name|region
operator|.
name|toString
argument_list|()
operator|+
literal|" complete"
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param r    * @return Empty String or server address found in<code>r</code>    */
specifier|static
name|String
name|getServerAddress
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
block|{
name|byte
index|[]
name|val
init|=
name|r
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
return|return
name|val
operator|==
literal|null
operator|||
name|val
operator|.
name|length
operator|<=
literal|0
condition|?
literal|""
else|:
name|Bytes
operator|.
name|toString
argument_list|(
name|val
argument_list|)
return|;
block|}
comment|/*    * @param r    * @return Return 0L or server startcode found in<code>r</code>    */
specifier|static
name|long
name|getStartCode
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
block|{
name|byte
index|[]
name|val
init|=
name|r
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|STARTCODE_QUALIFIER
argument_list|)
decl_stmt|;
return|return
name|val
operator|==
literal|null
operator|||
name|val
operator|.
name|length
operator|<=
literal|0
condition|?
literal|0L
else|:
name|Bytes
operator|.
name|toLong
argument_list|(
name|val
argument_list|)
return|;
block|}
comment|/*    * @param info Region to check.    * @return True if this is a split parent.    */
specifier|private
name|boolean
name|isSplitParent
parameter_list|(
specifier|final
name|HRegionInfo
name|info
parameter_list|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|isSplit
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|isOffline
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Region is split but not offline: "
operator|+
name|info
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/*    * If daughters no longer hold reference to the parents, delete the parent.    * If the parent is lone without daughter splits AND there are references in    * the filesystem, then a daughters was not added to .META. -- must have been    * a crash before their addition.  Add them here.    * @param metaRegionName Meta region name: e.g. .META.,,1    * @param server HRegionInterface of meta server to talk to    * @param parent HRegionInfo of split offlined parent    * @param rowContent Content of<code>parent</code> row in    *<code>metaRegionName</code>    * @return True if we removed<code>parent</code> from meta table and from    * the filesystem.    * @throws IOException    */
specifier|private
name|boolean
name|cleanupAndVerifySplits
parameter_list|(
specifier|final
name|byte
index|[]
name|metaRegionName
parameter_list|,
specifier|final
name|HRegionInterface
name|srvr
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
name|Result
name|rowContent
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
comment|// Run checks on each daughter split.
name|boolean
name|hasReferencesA
init|=
name|checkDaughter
argument_list|(
name|metaRegionName
argument_list|,
name|srvr
argument_list|,
name|parent
argument_list|,
name|rowContent
argument_list|,
name|SPLITA_QUALIFIER
argument_list|)
decl_stmt|;
name|boolean
name|hasReferencesB
init|=
name|checkDaughter
argument_list|(
name|metaRegionName
argument_list|,
name|srvr
argument_list|,
name|parent
argument_list|,
name|rowContent
argument_list|,
name|SPLITB_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasReferencesA
operator|&&
operator|!
name|hasReferencesB
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting region "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" (encoded="
operator|+
name|parent
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|") because daughter splits no longer hold references"
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|deleteRegion
argument_list|(
name|this
operator|.
name|master
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|this
operator|.
name|master
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|removeRegionFromMETA
argument_list|(
name|srvr
argument_list|,
name|metaRegionName
argument_list|,
name|parent
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*    * See if the passed daughter has references in the filesystem to the parent    * and if not, remove the note of daughter region in the parent row: its    * column info:splitA or info:splitB.  Also make sure that daughter row is    * present in the .META. and mark the parent row when confirmed so we don't    * keep checking.  The mark will be info:splitA_checked and its value will be    * a true BooleanWritable.    * @param metaRegionName    * @param srvr    * @param parent    * @param rowContent    * @param qualifier    * @return True if this daughter still has references to the parent.    * @throws IOException    */
specifier|private
name|boolean
name|checkDaughter
parameter_list|(
specifier|final
name|byte
index|[]
name|metaRegionName
parameter_list|,
specifier|final
name|HRegionInterface
name|srvr
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|Result
name|rowContent
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|hri
init|=
name|getDaughterRegionInfo
argument_list|(
name|rowContent
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
name|boolean
name|references
init|=
name|hasReferences
argument_list|(
name|metaRegionName
argument_list|,
name|srvr
argument_list|,
name|parent
argument_list|,
name|rowContent
argument_list|,
name|hri
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
comment|// Return if no references.
if|if
condition|(
operator|!
name|references
condition|)
return|return
name|references
return|;
if|if
condition|(
operator|!
name|verifyDaughterRowPresent
argument_list|(
name|rowContent
argument_list|,
name|qualifier
argument_list|,
name|srvr
argument_list|,
name|metaRegionName
argument_list|,
name|hri
argument_list|,
name|parent
argument_list|)
condition|)
block|{
comment|// If we got here, then the parent row does not yet have the
comment|// "daughter row verified present" marker present. Add it.
name|addDaughterRowChecked
argument_list|(
name|metaRegionName
argument_list|,
name|srvr
argument_list|,
name|parent
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|hri
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
return|return
name|references
return|;
block|}
comment|/*    * Check the daughter of parent is present in meta table.  If not there,    * add it.    * @param rowContent    * @param daughter    * @param srvr    * @param metaRegionName    * @param daughterHRI    * @throws IOException    * @return True, if parent row has marker for "daughter row verified present"    * else, false (and will do fixup adding daughter if daughter not present).    */
specifier|private
name|boolean
name|verifyDaughterRowPresent
parameter_list|(
specifier|final
name|Result
name|rowContent
parameter_list|,
specifier|final
name|byte
index|[]
name|daughter
parameter_list|,
specifier|final
name|HRegionInterface
name|srvr
parameter_list|,
specifier|final
name|byte
index|[]
name|metaRegionName
parameter_list|,
specifier|final
name|HRegionInfo
name|daughterHRI
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
comment|// See if the 'checked' column is in parent. If so, we're done.
name|boolean
name|present
init|=
name|getDaughterRowChecked
argument_list|(
name|rowContent
argument_list|,
name|daughter
argument_list|)
decl_stmt|;
if|if
condition|(
name|present
condition|)
return|return
name|present
return|;
comment|// Parent is not carrying the splitA_checked/splitB_checked so this must
comment|// be the first time through here checking splitA/splitB are in metatable.
name|byte
index|[]
name|daughterRowKey
init|=
name|daughterHRI
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|daughterRowKey
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|srvr
operator|.
name|get
argument_list|(
name|metaRegionName
argument_list|,
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Daughter row not present.  Fixup kicks in.  Insert it.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fixup broke split: Add missing split daughter to meta,"
operator|+
literal|" daughter="
operator|+
name|daughterHRI
operator|.
name|toString
argument_list|()
operator|+
literal|", parent="
operator|+
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|daughterRowKey
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|daughterHRI
argument_list|)
argument_list|)
expr_stmt|;
name|srvr
operator|.
name|put
argument_list|(
name|metaRegionName
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|present
return|;
block|}
comment|/*    * Add to parent a marker that we verified the daughter exists.    * @param metaRegionName    * @param srvr    * @param parent    * @param split    * @param daughter    * @throws IOException    */
specifier|private
name|void
name|addDaughterRowChecked
parameter_list|(
specifier|final
name|byte
index|[]
name|metaRegionName
parameter_list|,
specifier|final
name|HRegionInterface
name|srvr
parameter_list|,
specifier|final
name|byte
index|[]
name|parent
parameter_list|,
specifier|final
name|HRegionInfo
name|split
parameter_list|,
specifier|final
name|byte
index|[]
name|daughter
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|getNameOfVerifiedDaughterColumn
argument_list|(
name|daughter
argument_list|)
argument_list|,
name|TRUE_WRITABLE_AS_BYTES
argument_list|)
expr_stmt|;
name|srvr
operator|.
name|put
argument_list|(
name|metaRegionName
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param rowContent    * @param which    * @return True if the daughter row has already been verified present in    * metatable.    * @throws IOException    */
specifier|private
name|boolean
name|getDaughterRowChecked
parameter_list|(
specifier|final
name|Result
name|rowContent
parameter_list|,
specifier|final
name|byte
index|[]
name|which
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
name|rowContent
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|getNameOfVerifiedDaughterColumn
argument_list|(
name|which
argument_list|)
argument_list|)
decl_stmt|;
name|BooleanWritable
name|bw
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
operator|&&
name|b
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|bw
operator|=
operator|(
name|BooleanWritable
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|b
argument_list|,
operator|new
name|BooleanWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bw
operator|==
literal|null
condition|?
literal|false
else|:
name|bw
operator|.
name|get
argument_list|()
return|;
block|}
comment|/*    * @param daughter    * @return Returns splitA_checked or splitB_checked dependent on what    *<code>daughter</code> is.    */
specifier|private
specifier|static
name|byte
index|[]
name|getNameOfVerifiedDaughterColumn
parameter_list|(
specifier|final
name|byte
index|[]
name|daughter
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|SPLITA_QUALIFIER
argument_list|,
name|daughter
argument_list|)
condition|?
name|SPLITA_CHECKED
else|:
name|SPLITB_CHECKED
return|;
block|}
comment|/*    * Get daughter HRegionInfo out of parent info:splitA/info:splitB columns.    * @param rowContent    * @param which Whether "info:splitA" or "info:splitB" column    * @return Deserialized content of the info:splitA or info:splitB as a    * HRegionInfo    * @throws IOException    */
specifier|private
name|HRegionInfo
name|getDaughterRegionInfo
parameter_list|(
specifier|final
name|Result
name|rowContent
parameter_list|,
specifier|final
name|byte
index|[]
name|which
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Writables
operator|.
name|getHRegionInfoOrNull
argument_list|(
name|rowContent
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|which
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * Remove mention of daughter from parent row.    * parent row.    * @param metaRegionName    * @param srvr    * @param parent    * @param split    * @param qualifier    * @throws IOException    */
specifier|private
name|void
name|removeDaughterFromParent
parameter_list|(
specifier|final
name|byte
index|[]
name|metaRegionName
parameter_list|,
specifier|final
name|HRegionInterface
name|srvr
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|HRegionInfo
name|split
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|split
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"/"
operator|+
name|split
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" no longer has references to "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|parent
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|srvr
operator|.
name|delete
argument_list|(
name|metaRegionName
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
comment|/*    * Checks if a daughter region -- either splitA or splitB -- still holds    * references to parent.  If not, removes reference to the split from    * the parent meta region row so we don't check it any more.    * @param metaRegionName Name of meta region to look in.    * @param srvr Where region resides.    * @param parent Parent region name.    * @param rowContent Keyed content of the parent row in meta region.    * @param split Which column family.    * @param qualifier Which of the daughters to look at, splitA or splitB.    * @return True if still has references to parent.    * @throws IOException    */
specifier|private
name|boolean
name|hasReferences
parameter_list|(
specifier|final
name|byte
index|[]
name|metaRegionName
parameter_list|,
specifier|final
name|HRegionInterface
name|srvr
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
name|Result
name|rowContent
parameter_list|,
specifier|final
name|HRegionInfo
name|split
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|split
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
name|Path
name|tabledir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|master
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|split
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|family
range|:
name|split
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|Path
name|p
init|=
name|Store
operator|.
name|getStoreHomedir
argument_list|(
name|tabledir
argument_list|,
name|split
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|family
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|master
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
continue|continue;
comment|// Look for reference files.  Call listStatus with an anonymous
comment|// instance of PathFilter.
name|FileStatus
index|[]
name|ps
init|=
name|this
operator|.
name|master
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|p
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|StoreFile
operator|.
name|isReference
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
operator|&&
name|ps
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|removeDaughterFromParent
argument_list|(
name|metaRegionName
argument_list|,
name|srvr
argument_list|,
name|parent
argument_list|,
name|split
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*    * Check the passed region is assigned.  If not, add to unassigned.    * @param regionServer    * @param meta    * @param info    * @param hostnameAndPort hostname ':' port as it comes out of .META.    * @param startCode    * @throws IOException    */
specifier|protected
name|void
name|checkAssigned
parameter_list|(
specifier|final
name|HRegionInterface
name|regionServer
parameter_list|,
specifier|final
name|MetaRegion
name|meta
parameter_list|,
specifier|final
name|HRegionInfo
name|info
parameter_list|,
specifier|final
name|String
name|hostnameAndPort
parameter_list|,
specifier|final
name|long
name|startCode
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|serverName
init|=
literal|null
decl_stmt|;
name|String
name|sa
init|=
name|hostnameAndPort
decl_stmt|;
name|long
name|sc
init|=
name|startCode
decl_stmt|;
if|if
condition|(
name|sa
operator|==
literal|null
operator|||
name|sa
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// Scans are sloppy.  They cache a row internally so may have data that
comment|// is a little stale.  Make sure that for sure this serverAddress is null.
comment|// We are trying to avoid double-assignments.  See hbase-1784.
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|regionServer
operator|.
name|get
argument_list|(
name|meta
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sa
operator|=
name|getServerAddress
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|sc
operator|=
name|getStartCode
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sa
operator|!=
literal|null
operator|&&
name|sa
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverName
operator|=
name|HServerInfo
operator|.
name|getServerName
argument_list|(
name|sa
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
name|HServerInfo
name|storedInfo
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|master
operator|.
name|getRegionManager
argument_list|()
init|)
block|{
comment|/* We don't assign regions that are offline, in transition or were on        * a dead server. Regions that were on a dead server will get reassigned        * by ProcessServerShutdown        */
if|if
condition|(
name|info
operator|.
name|isOffline
argument_list|()
operator|||
name|this
operator|.
name|master
operator|.
name|getRegionManager
argument_list|()
operator|.
name|regionIsInTransition
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
operator|||
operator|(
name|serverName
operator|!=
literal|null
operator|&&
name|this
operator|.
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|isDead
argument_list|(
name|serverName
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|serverName
operator|!=
literal|null
condition|)
block|{
name|storedInfo
operator|=
name|this
operator|.
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getServerInfo
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
comment|// If we can't find the HServerInfo, then add it to the list of
comment|//  unassigned regions.
if|if
condition|(
name|storedInfo
operator|==
literal|null
condition|)
block|{
comment|// The current assignment is invalid
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current assignment of "
operator|+
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is not valid; "
operator|+
literal|" serverAddress="
operator|+
name|sa
operator|+
literal|", startCode="
operator|+
name|sc
operator|+
literal|" unknown."
argument_list|)
expr_stmt|;
block|}
comment|// Now get the region assigned
name|this
operator|.
name|master
operator|.
name|getRegionManager
argument_list|()
operator|.
name|setUnassigned
argument_list|(
name|info
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Interrupt thread regardless of what it's doing    */
specifier|public
name|void
name|interruptAndStop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|scannerLock
init|)
block|{
if|if
condition|(
name|isAlive
argument_list|()
condition|)
block|{
name|super
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

