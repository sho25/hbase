begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|InvalidFamilyOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HMasterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|BulkReOpen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MasterSchemaChangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Base class for performing operations against tables.  * Checks on whether the process can go forward are done in constructor rather  * than later on in {@link #process()}.  The idea is to fail fast rather than  * later down in an async invocation of {@link #process()} (which currently has  * no means of reporting back issues once started).  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TableEventHandler
extends|extends
name|EventHandler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableEventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|MasterServices
name|masterServices
decl_stmt|;
specifier|protected
name|HMasterInterface
name|master
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|String
name|tableNameStr
decl_stmt|;
specifier|protected
name|boolean
name|instantAction
init|=
literal|false
decl_stmt|;
specifier|public
name|TableEventHandler
parameter_list|(
name|EventType
name|eventType
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|Server
name|server
parameter_list|,
name|MasterServices
name|masterServices
parameter_list|,
name|HMasterInterface
name|masterInterface
parameter_list|,
name|boolean
name|instantSchemaChange
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|server
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|masterServices
operator|.
name|checkTableModifiable
argument_list|(
name|tableName
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableNameStr
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|instantAction
operator|=
name|instantSchemaChange
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|masterInterface
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Handling table operation "
operator|+
name|eventType
operator|+
literal|" on table "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
init|=
name|MetaReader
operator|.
name|getTableRegions
argument_list|(
name|this
operator|.
name|server
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|handleTableOperation
argument_list|(
name|hris
argument_list|)
expr_stmt|;
name|handleSchemaChanges
argument_list|(
name|hris
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error manipulating table "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error manipulating table "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleSchemaChanges
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|instantAction
operator|&&
name|regions
operator|!=
literal|null
operator|&&
operator|!
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|handleInstantSchemaChanges
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleRegularSchemaChanges
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Perform schema changes only if the table is in enabled state.    * @return    */
specifier|private
name|boolean
name|canPerformSchemaChange
parameter_list|()
block|{
return|return
operator|(
name|eventType
operator|.
name|isSchemaChangeEvent
argument_list|()
operator|&&
name|this
operator|.
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getZKTable
argument_list|()
operator|.
name|isEnabledTable
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|private
name|void
name|handleRegularSchemaChanges
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|canPerformSchemaChange
argument_list|()
condition|)
block|{
name|this
operator|.
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|setRegionsToReopen
argument_list|(
name|regions
argument_list|)
expr_stmt|;
if|if
condition|(
name|reOpenAllRegions
argument_list|(
name|regions
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed table operation "
operator|+
name|eventType
operator|+
literal|" on table "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error on reopening the regions"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|reOpenAllRegions
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bucketing regions by region server..."
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|masterServices
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serverToRegions
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|hriHserverMapping
init|=
name|table
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|reRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regions
control|)
block|{
name|ServerName
name|rsLocation
init|=
name|hriHserverMapping
operator|.
name|get
argument_list|(
name|hri
argument_list|)
decl_stmt|;
comment|// Skip the offlined split parent region
comment|// See HBASE-4578 for more information.
if|if
condition|(
literal|null
operator|==
name|rsLocation
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip "
operator|+
name|hri
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|serverToRegions
operator|.
name|containsKey
argument_list|(
name|rsLocation
argument_list|)
condition|)
block|{
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
name|hriList
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
name|serverToRegions
operator|.
name|put
argument_list|(
name|rsLocation
argument_list|,
name|hriList
argument_list|)
expr_stmt|;
block|}
name|reRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|serverToRegions
operator|.
name|get
argument_list|(
name|rsLocation
argument_list|)
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Reopening "
operator|+
name|reRegions
operator|.
name|size
argument_list|()
operator|+
literal|" regions on "
operator|+
name|serverToRegions
operator|.
name|size
argument_list|()
operator|+
literal|" region servers."
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|setRegionsToReopen
argument_list|(
name|reRegions
argument_list|)
expr_stmt|;
name|BulkReOpen
name|bulkReopen
init|=
operator|new
name|BulkReOpen
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|serverToRegions
argument_list|,
name|this
operator|.
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
if|if
condition|(
name|bulkReopen
operator|.
name|bulkReOpen
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Timeout before reopening all regions"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Reopen was interrupted"
argument_list|)
expr_stmt|;
comment|// Preserve the interrupt.
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|done
return|;
block|}
comment|/**    * Check whether any of the regions from the list of regions is undergoing a split.    * We simply check whether there is a unassigned node for any of the region and if so    * we return as true.    * @param regionInfos    * @return    */
specifier|private
name|boolean
name|isSplitInProgress
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfos
parameter_list|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionInfos
control|)
block|{
name|ZooKeeperWatcher
name|zkw
init|=
name|this
operator|.
name|masterServices
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|zkw
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Region "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is unassigned. Assuming"
operator|+
literal|" that it is undergoing a split"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"KeeperException while determining splits in progress."
argument_list|,
name|ke
argument_list|)
expr_stmt|;
comment|// Assume no splits happening?
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Wait for region split transaction in progress (if any)    * @param regions    * @param status    */
specifier|private
name|void
name|waitForInflightSplit
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|MonitoredTask
name|status
parameter_list|)
block|{
while|while
condition|(
name|isSplitInProgress
argument_list|(
name|regions
argument_list|)
condition|)
block|{
try|try
block|{
name|status
operator|.
name|setStatus
argument_list|(
literal|"Alter Schema is waiting for split region to complete."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|handleInstantSchemaChanges
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
if|if
condition|(
name|regions
operator|==
literal|null
operator|||
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Region size is null or empty. Ignoring alter request."
argument_list|)
expr_stmt|;
return|return;
block|}
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Handling alter table request for table = "
operator|+
name|tableNameStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|canPerformSchemaChange
argument_list|()
condition|)
block|{
name|boolean
name|prevBalanceSwitch
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// turn off load balancer synchronously
name|prevBalanceSwitch
operator|=
name|master
operator|.
name|synchronousBalanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|waitForInflightSplit
argument_list|(
name|regions
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|MasterSchemaChangeTracker
name|masterSchemaChangeTracker
init|=
name|this
operator|.
name|masterServices
operator|.
name|getSchemaChangeTracker
argument_list|()
decl_stmt|;
name|masterSchemaChangeTracker
operator|.
name|createSchemaChangeNode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|masterSchemaChangeTracker
operator|.
name|doesSchemaChangeNodeExists
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|status
operator|.
name|markComplete
argument_list|(
literal|"Created ZK node for handling the alter table request for table = "
operator|+
name|tableNameStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Instant schema change failed for table "
operator|+
name|tableNameStr
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Instant schema change failed for table "
operator|+
name|tableNameStr
operator|+
literal|" Cause = "
operator|+
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Instant schema change failed for table "
operator|+
name|tableNameStr
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Instant schema change failed for table "
operator|+
name|tableNameStr
operator|+
literal|" Cause = "
operator|+
name|ioe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|master
operator|.
name|synchronousBalanceSwitch
argument_list|(
name|prevBalanceSwitch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return Table descriptor for this table    * @throws TableExistsException    * @throws FileNotFoundException    * @throws IOException    */
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
throws|throws
name|TableExistsException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
specifier|final
name|String
name|name
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|this
operator|.
name|masterServices
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|htd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HTableDescriptor missing for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|htd
return|;
block|}
name|byte
index|[]
name|hasColumnFamily
parameter_list|(
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|byte
index|[]
name|cf
parameter_list|)
throws|throws
name|InvalidFamilyOperationException
block|{
if|if
condition|(
operator|!
name|htd
operator|.
name|hasFamily
argument_list|(
name|cf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidFamilyOperationException
argument_list|(
literal|"Column family '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|cf
argument_list|)
operator|+
literal|"' does not exist"
argument_list|)
throw|;
block|}
return|return
name|cf
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|handleTableOperation
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
function_decl|;
block|}
end_class

end_unit

