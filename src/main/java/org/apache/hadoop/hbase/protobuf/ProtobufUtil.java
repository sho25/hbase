begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Exec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WALEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WALEntry
operator|.
name|WALEdit
operator|.
name|FamilyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WALEntry
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Mutate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Mutate
operator|.
name|ColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Mutate
operator|.
name|ColumnValue
operator|.
name|QualifierValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Mutate
operator|.
name|DeleteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Mutate
operator|.
name|MutateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameStringPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Protobufs utility.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ProtobufUtil
block|{
specifier|private
name|ProtobufUtil
parameter_list|()
block|{   }
comment|/**    * Primitive type to class mapping.    */
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PRIMITIVES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Character
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Void
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Void
operator|.
name|TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Magic we put ahead of a serialized protobuf message.    * For example, all znode content is protobuf messages with the below magic    * for preamble.    */
specifier|static
specifier|final
name|byte
index|[]
name|PB_MAGIC
init|=
operator|new
name|byte
index|[]
block|{
literal|'P'
block|,
literal|'B'
block|,
literal|'U'
block|,
literal|'F'
block|}
decl_stmt|;
comment|/**    * Prepend the passed bytes with four bytes of magic, {@link #PB_MAGIC}, to flag what    * follows as a protobuf in hbase.  Prepend these bytes to all content written to znodes, etc.    * @param bytes Bytes to decorate    * @return The passed<code>bytes</codes> with magic prepended (Creates a new    * byte array that is<code>bytes.length</code> plus {@link #PB_MAGIC}.length.    */
specifier|public
specifier|static
name|byte
index|[]
name|prependPBMagic
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|PB_MAGIC
argument_list|,
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @return True if passed<code>bytes</code> has {@link #PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|length
operator|<=
name|PB_MAGIC
operator|.
name|length
condition|)
return|return
literal|false
return|;
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|PB_MAGIC
argument_list|,
literal|0
argument_list|,
name|PB_MAGIC
operator|.
name|length
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|PB_MAGIC
operator|.
name|length
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * @return Length of {@link #PB_MAGIC}    */
specifier|public
specifier|static
name|int
name|lengthOfPBMagic
parameter_list|()
block|{
return|return
name|PB_MAGIC
operator|.
name|length
return|;
block|}
comment|/**    * Return the IOException thrown by the remote server wrapped in    * ServiceException as cause.    *    * @param se ServiceException that wraps IO exception thrown by the server    * @return Exception wrapped in ServiceException or    *   a new IOException that wraps the unexpected ServiceException.    */
specifier|public
specifier|static
name|IOException
name|getRemoteException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|se
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
return|;
block|}
return|return
name|e
operator|instanceof
name|IOException
condition|?
operator|(
name|IOException
operator|)
name|e
else|:
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Exec to a client Exec    *    * @param proto the protocol buffer Exec to convert    * @return the converted client Exec    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Exec
name|toExec
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Exec
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|protocolName
init|=
name|proto
operator|.
name|getProtocolName
argument_list|()
decl_stmt|;
name|String
name|methodName
init|=
name|proto
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|CoprocessorProtocol
argument_list|>
name|protocol
init|=
literal|null
decl_stmt|;
name|Method
name|method
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NameBytesPair
name|parameter
range|:
name|proto
operator|.
name|getParameterList
argument_list|()
control|)
block|{
name|String
name|type
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|declaredClass
init|=
name|PRIMITIVES
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|declaredClass
operator|==
literal|null
condition|)
block|{
name|declaredClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|add
argument_list|(
name|toObject
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|declaredClass
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
name|types
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|types
operator|.
name|toArray
argument_list|(
name|parameterTypes
argument_list|)
expr_stmt|;
name|protocol
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|CoprocessorProtocol
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|protocolName
argument_list|)
expr_stmt|;
name|method
operator|=
name|protocol
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|parameterTypes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|nsme
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|cnfe
argument_list|)
throw|;
block|}
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|NameStringPair
name|p
range|:
name|proto
operator|.
name|getPropertyList
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|parameterObjects
init|=
operator|new
name|Object
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|parameters
operator|.
name|toArray
argument_list|(
name|parameterObjects
argument_list|)
expr_stmt|;
return|return
operator|new
name|Exec
argument_list|(
name|conf
argument_list|,
name|row
argument_list|,
name|protocol
argument_list|,
name|method
argument_list|,
name|parameterObjects
argument_list|)
return|;
block|}
comment|/**    * Convert a ServerName to a protocol buffer ServerName    *    * @param serverName the ServerName to convert    * @return the converted protocol buffer ServerName    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setHostName
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverName
operator|.
name|getPort
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setPort
argument_list|(
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverName
operator|.
name|getStartcode
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStartCode
argument_list|(
name|serverName
operator|.
name|getStartcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a RegionInfo to a HRegionInfo    *    * @param proto the RegionInfo to convert    * @return the converted HRegionInfo    */
specifier|public
specifier|static
name|HRegionInfo
name|toRegionInfo
parameter_list|(
specifier|final
name|RegionInfo
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|tableName
init|=
name|proto
operator|.
name|getTableName
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|long
name|regionId
init|=
name|proto
operator|.
name|getRegionId
argument_list|()
decl_stmt|;
name|byte
index|[]
name|startKey
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasStartKey
argument_list|()
condition|)
block|{
name|startKey
operator|=
name|proto
operator|.
name|getStartKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasEndKey
argument_list|()
condition|)
block|{
name|endKey
operator|=
name|proto
operator|.
name|getEndKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
literal|false
argument_list|,
name|regionId
argument_list|)
return|;
block|}
comment|/**    * Convert a HRegionInfo to a RegionInfo    *    * @param info the HRegionInfo to convert    * @return the converted RegionInfo    */
specifier|public
specifier|static
name|RegionInfo
name|toRegionInfo
parameter_list|(
specifier|final
name|HRegionInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RegionInfo
operator|.
name|Builder
name|builder
init|=
name|RegionInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|info
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRegionId
argument_list|(
name|info
operator|.
name|getRegionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getStartKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setStartKey
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getEndKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEndKey
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|info
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Get to a client Get    *    * @param get the protocol buffer Get to convert    * @return the converted client Get    * @throws IOException    */
specifier|public
specifier|static
name|Get
name|toGet
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Get
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RowLock
name|rowLock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasLockId
argument_list|()
condition|)
block|{
name|rowLock
operator|=
operator|new
name|RowLock
argument_list|(
name|proto
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|,
name|rowLock
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|get
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|get
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
init|=
name|proto
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|NameBytesPair
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
operator|(
name|Filter
operator|)
name|toObject
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|get
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|get
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Put    * @throws DoNotRetryIOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|Mutate
name|proto
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|MutateType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutateType
operator|.
name|PUT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|long
name|timestamp
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|timestamp
operator|=
name|proto
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|RowLock
name|lock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasLockId
argument_list|()
condition|)
block|{
name|lock
operator|=
operator|new
name|RowLock
argument_list|(
name|proto
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
name|timestamp
argument_list|,
name|lock
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
name|proto
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|put
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifer value"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|timestamp
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|put
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Delete    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|Mutate
name|proto
parameter_list|)
block|{
name|MutateType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutateType
operator|.
name|DELETE
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|long
name|timestamp
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|timestamp
operator|=
name|proto
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|RowLock
name|lock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasLockId
argument_list|()
condition|)
block|{
name|lock
operator|=
operator|new
name|RowLock
argument_list|(
name|proto
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|,
name|timestamp
argument_list|,
name|lock
argument_list|)
decl_stmt|;
name|delete
operator|.
name|setWriteToWAL
argument_list|(
name|proto
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|delete
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|DeleteType
name|deleteType
init|=
name|qv
operator|.
name|getDeleteType
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|long
name|ts
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_ONE_VERSION
condition|)
block|{
name|delete
operator|.
name|deleteColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_MULTIPLE_VERSIONS
condition|)
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|family
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|delete
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Append    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Append    * @throws DoNotRetryIOException    */
specifier|public
specifier|static
name|Append
name|toAppend
parameter_list|(
specifier|final
name|Mutate
name|proto
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|MutateType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutateType
operator|.
name|APPEND
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|append
operator|.
name|setWriteToWAL
argument_list|(
name|proto
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|append
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifer value"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|append
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|append
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Increment    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Increment    * @throws IOException    */
specifier|public
specifier|static
name|Increment
name|toIncrement
parameter_list|(
specifier|final
name|Mutate
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|MutateType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutateType
operator|.
name|INCREMENT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|RowLock
name|lock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasLockId
argument_list|()
condition|)
block|{
name|lock
operator|=
operator|new
name|RowLock
argument_list|(
name|proto
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Increment
name|increment
init|=
operator|new
name|Increment
argument_list|(
name|row
argument_list|,
name|lock
argument_list|)
decl_stmt|;
name|increment
operator|.
name|setWriteToWAL
argument_list|(
name|proto
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
init|=
name|proto
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|increment
operator|.
name|setTimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifer value"
argument_list|)
throw|;
block|}
name|long
name|value
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|increment
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|increment
return|;
block|}
comment|/**    * Convert a protocol buffer Scan to a client Scan    *    * @param proto the protocol buffer Scan to convert    * @return the converted client Scan    * @throws IOException    */
specifier|public
specifier|static
name|Scan
name|toScan
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Scan
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasStartRow
argument_list|()
condition|)
block|{
name|startRow
operator|=
name|proto
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStopRow
argument_list|()
condition|)
block|{
name|stopRow
operator|=
name|proto
operator|.
name|getStopRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
init|=
name|proto
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|scan
operator|.
name|setTimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|NameBytesPair
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|(
name|Filter
operator|)
name|toObject
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasBatchSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
name|proto
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|scan
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|scan
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ByteString
argument_list|>
name|protos
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteString
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keyValues
init|=
name|result
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|KeyValue
name|keyValue
range|:
name|keyValues
control|)
block|{
name|ByteString
name|value
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|keyValue
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|keyValue
operator|.
name|getOffset
argument_list|()
argument_list|,
name|keyValue
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|protos
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addAllKeyValueBytes
argument_list|(
name|protos
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @return the converted client Result    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|)
block|{
name|List
argument_list|<
name|ByteString
argument_list|>
name|values
init|=
name|proto
operator|.
name|getKeyValueBytesList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keyValues
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ByteString
name|value
range|:
name|values
control|)
block|{
name|keyValues
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|value
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Result
argument_list|(
name|keyValues
argument_list|)
return|;
block|}
comment|/**    * Get the HLog entries from a list of protocol buffer WALEntry    *    * @param protoList the list of protocol buffer WALEntry    * @return an array of HLog entries    */
specifier|public
specifier|static
name|HLog
operator|.
name|Entry
index|[]
name|toHLogEntries
parameter_list|(
specifier|final
name|List
argument_list|<
name|WALEntry
argument_list|>
name|protoList
parameter_list|)
block|{
name|List
argument_list|<
name|HLog
operator|.
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|HLog
operator|.
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WALEntry
name|entry
range|:
name|protoList
control|)
block|{
name|WALKey
name|walKey
init|=
name|entry
operator|.
name|getWalKey
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|UUID
name|clusterId
init|=
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
decl_stmt|;
if|if
condition|(
name|walKey
operator|.
name|hasClusterId
argument_list|()
condition|)
block|{
name|UUID
name|protoUuid
init|=
name|walKey
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|clusterId
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|UUID
argument_list|(
name|protoUuid
operator|.
name|getMostSigBits
argument_list|()
argument_list|,
name|protoUuid
operator|.
name|getLeastSigBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HLogKey
name|key
init|=
operator|new
name|HLogKey
argument_list|(
name|walKey
operator|.
name|getEncodedRegionName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|walKey
operator|.
name|getTableName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|walKey
operator|.
name|getLogSequenceNumber
argument_list|()
argument_list|,
name|walKey
operator|.
name|getWriteTime
argument_list|()
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|WALEntry
operator|.
name|WALEdit
name|walEdit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteString
name|keyValue
range|:
name|walEdit
operator|.
name|getKeyValueList
argument_list|()
control|)
block|{
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|keyValue
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|walEdit
operator|.
name|getFamilyScopeCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FamilyScope
name|scope
range|:
name|walEdit
operator|.
name|getFamilyScopeList
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|scope
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|scope
operator|.
name|getScopeType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|edit
operator|.
name|setScopes
argument_list|(
name|scopes
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
name|key
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|HLog
operator|.
name|Entry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Parameter to a Java object    *    * @param parameter the protocol buffer Parameter to convert    * @return the converted Java object    * @throws IOException if failed to deserialize the parameter    */
specifier|public
specifier|static
name|Object
name|toObject
parameter_list|(
specifier|final
name|NameBytesPair
name|parameter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parameter
operator|==
literal|null
operator|||
operator|!
name|parameter
operator|.
name|hasValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|bytes
init|=
name|parameter
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bais
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
return|return
name|HbaseObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|bais
operator|!=
literal|null
condition|)
block|{
name|bais
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Convert a stringified protocol buffer exception Parameter to a Java Exception    *    * @param parameter the protocol buffer Parameter to convert    * @return the converted Exception    * @throws IOException if failed to deserialize the parameter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Throwable
name|toException
parameter_list|(
specifier|final
name|NameBytesPair
name|parameter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parameter
operator|==
literal|null
operator|||
operator|!
name|parameter
operator|.
name|hasValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|desc
init|=
name|parameter
operator|.
name|getValue
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|cn
init|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|cn
operator|.
name|newInstance
argument_list|(
name|desc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Serialize a Java Object into a Parameter. The Java Object should be a    * Writable or protocol buffer Message    *    * @param value the Writable/Message object to be serialized    * @return the converted protocol buffer Parameter    * @throws IOException if failed to serialize the object    */
specifier|public
specifier|static
name|NameBytesPair
name|toParameter
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|declaredClass
init|=
name|Object
operator|.
name|class
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|declaredClass
operator|=
name|value
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
return|return
name|toParameter
argument_list|(
name|declaredClass
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Serialize a Java Object into a Parameter. The Java Object should be a    * Writable or protocol buffer Message    *    * @param declaredClass the declared class of the parameter    * @param value the Writable/Message object to be serialized    * @return the converted protocol buffer Parameter    * @throws IOException if failed to serialize the object    */
specifier|public
specifier|static
name|NameBytesPair
name|toParameter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|declaredClass
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|NameBytesPair
operator|.
name|Builder
name|builder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|declaredClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|DataOutput
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|declaredClass
decl_stmt|;
if|if
condition|(
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|declaredClass
argument_list|)
operator|==
literal|null
condition|)
block|{
name|clz
operator|=
name|value
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
name|HbaseObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|value
argument_list|,
name|clz
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|baos
operator|!=
literal|null
condition|)
block|{
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

