begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Filter} that represents an ordered List of Filters  * which will be evaluated with a specified boolean operator {@link Operator#MUST_PASS_ALL}  * (<code>!AND</code>) or {@link Operator#MUST_PASS_ONE} (<code>!OR</code>).  * Since you can use Filter Lists as children of Filter Lists, you can create a  * hierarchy of filters to be evaluated.  * Defaults to {@link Operator#MUST_PASS_ALL}.  *<p>TODO: Fix creation of Configuration on serialization and deserialization.  */
end_comment

begin_class
specifier|public
class|class
name|FilterList
implements|implements
name|Filter
block|{
comment|/** set operator */
specifier|public
specifier|static
enum|enum
name|Operator
block|{
comment|/** !AND */
name|MUST_PASS_ALL
block|,
comment|/** !OR */
name|MUST_PASS_ONE
block|}
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|Operator
name|operator
init|=
name|Operator
operator|.
name|MUST_PASS_ALL
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Default constructor, filters nothing. Required though for RPC    * deserialization.    */
specifier|public
name|FilterList
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor that takes a set of {@link Filter}s. The default operator    * MUST_PASS_ALL is assumed.    *    * @param rowFilters list of filters    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|List
argument_list|<
name|Filter
argument_list|>
name|rowFilters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|rowFilters
expr_stmt|;
block|}
comment|/**    * Constructor that takes a var arg number of {@link Filter}s. The fefault operator    * MUST_PASS_ALL is assumed.    * @param rowFilters    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|Filter
modifier|...
name|rowFilters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rowFilters
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor that takes an operator.    *    * @param operator Operator to process filter set with.    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|Operator
name|operator
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
block|}
comment|/**    * Constructor that takes a set of {@link Filter}s and an operator.    *    * @param operator Operator to process filter set with.    * @param rowFilters Set of row filters.    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|Operator
name|operator
parameter_list|,
specifier|final
name|List
argument_list|<
name|Filter
argument_list|>
name|rowFilters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|rowFilters
expr_stmt|;
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
block|}
comment|/**    * Constructor that takes a var arg number of {@link Filter}s and an operator.    *    * @param operator Operator to process filter set with.    * @param rowFilters Filters to use    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|Operator
name|operator
parameter_list|,
specifier|final
name|Filter
modifier|...
name|rowFilters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rowFilters
argument_list|)
expr_stmt|;
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
block|}
comment|/**    * Get the operator.    *    * @return operator    */
specifier|public
name|Operator
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
comment|/**    * Get the filters.    *    * @return filters    */
specifier|public
name|List
argument_list|<
name|Filter
argument_list|>
name|getFilters
parameter_list|()
block|{
return|return
name|filters
return|;
block|}
comment|/**    * Add a filter.    *    * @param filter another filter    */
specifier|public
name|void
name|addFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRowKey
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|this
operator|.
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ALL
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|||
name|filter
operator|.
name|filterRowKey
argument_list|(
name|rowKey
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
condition|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|&&
operator|!
name|filter
operator|.
name|filterRowKey
argument_list|(
name|rowKey
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|this
operator|.
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterAllRemaining
parameter_list|()
block|{
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ALL
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyValue
name|transform
parameter_list|(
name|KeyValue
name|v
parameter_list|)
block|{
name|KeyValue
name|current
init|=
name|v
decl_stmt|;
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
name|current
operator|=
name|filter
operator|.
name|transform
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|KeyValue
name|v
parameter_list|)
block|{
name|ReturnCode
name|rc
init|=
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
condition|?
name|ReturnCode
operator|.
name|SKIP
else|:
name|ReturnCode
operator|.
name|INCLUDE
decl_stmt|;
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ALL
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|NEXT_ROW
return|;
block|}
name|ReturnCode
name|code
init|=
name|filter
operator|.
name|filterKeyValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
name|INCLUDE
case|:
continue|continue;
case|case
name|NEXT_ROW
case|:
case|case
name|SKIP
case|:
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
default|default:
return|return
name|code
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
continue|continue;
block|}
switch|switch
condition|(
name|filter
operator|.
name|filterKeyValue
argument_list|(
name|v
argument_list|)
condition|)
block|{
case|case
name|INCLUDE
case|:
name|rc
operator|=
name|ReturnCode
operator|.
name|INCLUDE
expr_stmt|;
comment|// must continue here to evaluate all filters
case|case
name|NEXT_ROW
case|:
case|case
name|SKIP
case|:
comment|// continue;
block|}
block|}
block|}
return|return
name|rc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|filterRow
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
parameter_list|)
block|{
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
name|filter
operator|.
name|filterRow
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFilterRow
parameter_list|()
block|{
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|hasFilterRow
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRow
parameter_list|()
block|{
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ALL
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|||
name|filter
operator|.
name|filterRow
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
condition|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|&&
operator|!
name|filter
operator|.
name|filterRow
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
return|;
block|}
specifier|public
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|opByte
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|operator
operator|=
name|Operator
operator|.
name|values
argument_list|()
index|[
name|opByte
index|]
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|filters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Filter
name|filter
init|=
operator|(
name|Filter
operator|)
name|HbaseObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|operator
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
name|HbaseObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|filter
argument_list|,
name|Writable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|KeyValue
name|getNextKeyHint
parameter_list|(
name|KeyValue
name|currentKV
parameter_list|)
block|{
name|KeyValue
name|keyHint
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Filter
name|filter
range|:
name|filters
control|)
block|{
name|KeyValue
name|curKeyHint
init|=
name|filter
operator|.
name|getNextKeyHint
argument_list|(
name|currentKV
argument_list|)
decl_stmt|;
if|if
condition|(
name|curKeyHint
operator|==
literal|null
operator|&&
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
condition|)
block|{
comment|// If we ever don't have a hint and this is must-pass-one, then no hint
return|return
literal|null
return|;
block|}
if|if
condition|(
name|curKeyHint
operator|!=
literal|null
condition|)
block|{
comment|// If this is the first hint we find, set it
if|if
condition|(
name|keyHint
operator|==
literal|null
condition|)
block|{
name|keyHint
operator|=
name|curKeyHint
expr_stmt|;
continue|continue;
block|}
comment|// There is an existing hint
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ALL
operator|&&
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|keyHint
argument_list|,
name|curKeyHint
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// If all conditions must pass, we can keep the max hint
name|keyHint
operator|=
name|curKeyHint
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
operator|&&
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|keyHint
argument_list|,
name|curKeyHint
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// If any condition can pass, we need to keep the min hint
name|keyHint
operator|=
name|curKeyHint
expr_stmt|;
block|}
block|}
block|}
return|return
name|keyHint
return|;
block|}
block|}
end_class

end_unit

