begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * This filter is used for selecting only those keys with columns that matches  * a particular prefix. For example, if prefix is 'an', it will pass keys will  * columns like 'and', 'anti' but not keys with columns like 'ball', 'act'.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|MultipleColumnPrefixFilter
extends|extends
name|FilterBase
block|{
specifier|protected
name|byte
index|[]
name|hint
init|=
literal|null
decl_stmt|;
specifier|protected
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|sortedPrefixes
init|=
name|createTreeSet
argument_list|()
decl_stmt|;
specifier|public
name|MultipleColumnPrefixFilter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MultipleColumnPrefixFilter
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|prefixes
parameter_list|)
block|{
if|if
condition|(
name|prefixes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|sortedPrefixes
operator|.
name|add
argument_list|(
name|prefixes
index|[
name|i
index|]
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"prefixes must be distinct"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|byte
index|[]
index|[]
name|getPrefix
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|byte
index|[]
index|[]
name|temp
init|=
operator|new
name|byte
index|[
name|sortedPrefixes
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|prefixes
range|:
name|sortedPrefixes
control|)
block|{
name|temp
index|[
name|count
operator|++
index|]
operator|=
name|prefixes
expr_stmt|;
block|}
return|return
name|temp
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|KeyValue
name|kv
parameter_list|)
block|{
if|if
condition|(
name|sortedPrefixes
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|kv
operator|.
name|getBuffer
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
else|else
block|{
return|return
name|filterColumn
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|ReturnCode
name|filterColumn
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|qualifierOffset
parameter_list|,
name|int
name|qualifierLength
parameter_list|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
operator|+
name|qualifierOffset
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|lesserOrEqualPrefixes
init|=
operator|(
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|sortedPrefixes
operator|.
name|headSet
argument_list|(
name|qualifier
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|lesserOrEqualPrefixes
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|byte
index|[]
name|largestPrefixSmallerThanQualifier
init|=
name|lesserOrEqualPrefixes
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|startsWith
argument_list|(
name|qualifier
argument_list|,
name|largestPrefixSmallerThanQualifier
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
if|if
condition|(
name|lesserOrEqualPrefixes
operator|.
name|size
argument_list|()
operator|==
name|sortedPrefixes
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|NEXT_ROW
return|;
block|}
else|else
block|{
name|hint
operator|=
name|sortedPrefixes
operator|.
name|higher
argument_list|(
name|largestPrefixSmallerThanQualifier
argument_list|)
expr_stmt|;
return|return
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
return|;
block|}
block|}
else|else
block|{
name|hint
operator|=
name|sortedPrefixes
operator|.
name|first
argument_list|()
expr_stmt|;
return|return
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
return|;
block|}
block|}
specifier|public
specifier|static
name|Filter
name|createFilterFromArguments
parameter_list|(
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|filterArguments
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|prefixes
init|=
operator|new
name|byte
index|[
name|filterArguments
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filterArguments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|columnPrefix
init|=
name|ParseFilter
operator|.
name|removeQuotesFromByteArray
argument_list|(
name|filterArguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|prefixes
index|[
name|i
index|]
operator|=
name|columnPrefix
expr_stmt|;
block|}
return|return
operator|new
name|MultipleColumnPrefixFilter
argument_list|(
name|prefixes
argument_list|)
return|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|sortedPrefixes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|element
range|:
name|sortedPrefixes
control|)
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|x
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|sortedPrefixes
operator|=
name|createTreeSet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|x
condition|;
name|j
operator|++
control|)
block|{
name|sortedPrefixes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|KeyValue
name|getNextKeyHint
parameter_list|(
name|KeyValue
name|kv
parameter_list|)
block|{
return|return
name|KeyValue
operator|.
name|createFirstOnRow
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|hint
argument_list|,
literal|0
argument_list|,
name|hint
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|createTreeSet
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
operator|||
name|o2
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"prefixes can't be null"
argument_list|)
throw|;
name|byte
index|[]
name|b1
init|=
operator|(
name|byte
index|[]
operator|)
name|o1
decl_stmt|;
name|byte
index|[]
name|b2
init|=
operator|(
name|byte
index|[]
operator|)
name|o2
decl_stmt|;
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|,
literal|0
argument_list|,
name|b1
operator|.
name|length
argument_list|,
name|b2
argument_list|,
literal|0
argument_list|,
name|b2
operator|.
name|length
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

