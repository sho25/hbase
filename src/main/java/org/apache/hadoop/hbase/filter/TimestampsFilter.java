begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_comment
comment|/**  * Filter that returns only cells whose timestamp (version) is  * in the specified list of timestamps (versions).  *<p>  * Note: Use of this filter overrides any time range/time stamp  * options specified using {@link org.apache.hadoop.hbase.client.Get#setTimeRange(long, long)},  * {@link org.apache.hadoop.hbase.client.Scan#setTimeRange(long, long)}, {@link org.apache.hadoop.hbase.client.Get#setTimeStamp(long)},  * or {@link org.apache.hadoop.hbase.client.Scan#setTimeStamp(long)}.  */
end_comment

begin_class
specifier|public
class|class
name|TimestampsFilter
extends|extends
name|FilterBase
block|{
name|TreeSet
argument_list|<
name|Long
argument_list|>
name|timestamps
decl_stmt|;
comment|// Used during scans to hint the scan to stop early
comment|// once the timestamps fall below the minTimeStamp.
name|long
name|minTimeStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Used during deserialization. Do not use otherwise.    */
specifier|public
name|TimestampsFilter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor for filter that retains only those    * cells whose timestamp (version) is in the specified    * list of timestamps.    *    * @param timestamps    */
specifier|public
name|TimestampsFilter
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|timestamps
parameter_list|)
block|{
name|this
operator|.
name|timestamps
operator|=
operator|new
name|TreeSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|timestamps
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return the list of timestamps    */
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getTimestamps
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|timestamps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|timestamps
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|timestamps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|minTimeStamp
operator|=
name|this
operator|.
name|timestamps
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Gets the minimum timestamp requested by filter.    * @return  minimum timestamp requested by filter.    */
specifier|public
name|long
name|getMin
parameter_list|()
block|{
return|return
name|minTimeStamp
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|KeyValue
name|v
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|timestamps
operator|.
name|contains
argument_list|(
name|v
operator|.
name|getTimestamp
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|getTimestamp
argument_list|()
operator|<
name|minTimeStamp
condition|)
block|{
comment|// The remaining versions of this column are guaranteed
comment|// to be lesser than all of the other values.
return|return
name|ReturnCode
operator|.
name|NEXT_COL
return|;
block|}
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numTimestamps
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|timestamps
operator|=
operator|new
name|TreeSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numTimestamps
condition|;
name|idx
operator|++
control|)
block|{
name|this
operator|.
name|timestamps
operator|.
name|add
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numTimestamps
init|=
name|this
operator|.
name|timestamps
operator|.
name|size
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|numTimestamps
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|timestamp
range|:
name|this
operator|.
name|timestamps
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

