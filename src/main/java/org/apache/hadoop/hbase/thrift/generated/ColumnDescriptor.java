begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * An HColumnDescriptor contains information about a column family  * such as the number of versions, compression settings, etc. It is  * used as input when creating a table or adding a column.  */
end_comment

begin_class
specifier|public
class|class
name|ColumnDescriptor
implements|implements
name|TBase
argument_list|<
name|ColumnDescriptor
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|ColumnDescriptor
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"ColumnDescriptor"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MAX_VERSIONS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"maxVersions"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COMPRESSION_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"compression"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IN_MEMORY_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"inMemory"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|BLOOM_FILTER_TYPE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"bloomFilterType"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|BLOOM_FILTER_VECTOR_SIZE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"bloomFilterVectorSize"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|BLOOM_FILTER_NB_HASHES_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"bloomFilterNbHashes"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|BLOCK_CACHE_ENABLED_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"blockCacheEnabled"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIME_TO_LIVE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timeToLive"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|public
name|byte
index|[]
name|name
decl_stmt|;
specifier|public
name|int
name|maxVersions
decl_stmt|;
specifier|public
name|String
name|compression
decl_stmt|;
specifier|public
name|boolean
name|inMemory
decl_stmt|;
specifier|public
name|String
name|bloomFilterType
decl_stmt|;
specifier|public
name|int
name|bloomFilterVectorSize
decl_stmt|;
specifier|public
name|int
name|bloomFilterNbHashes
decl_stmt|;
specifier|public
name|boolean
name|blockCacheEnabled
decl_stmt|;
specifier|public
name|int
name|timeToLive
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"name"
argument_list|)
block|,
name|MAX_VERSIONS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"maxVersions"
argument_list|)
block|,
name|COMPRESSION
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"compression"
argument_list|)
block|,
name|IN_MEMORY
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"inMemory"
argument_list|)
block|,
name|BLOOM_FILTER_TYPE
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"bloomFilterType"
argument_list|)
block|,
name|BLOOM_FILTER_VECTOR_SIZE
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"bloomFilterVectorSize"
argument_list|)
block|,
name|BLOOM_FILTER_NB_HASHES
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"bloomFilterNbHashes"
argument_list|)
block|,
name|BLOCK_CACHE_ENABLED
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"blockCacheEnabled"
argument_list|)
block|,
name|TIME_TO_LIVE
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"timeToLive"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|_Fields
argument_list|>
name|byId
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byId
operator|.
name|put
argument_list|(
operator|(
name|int
operator|)
name|field
operator|.
name|_thriftId
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|byId
operator|.
name|get
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__MAXVERSIONS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__INMEMORY_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__BLOOMFILTERVECTORSIZE_ISSET_ID
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__BLOOMFILTERNBHASHES_ISSET_ID
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__BLOCKCACHEENABLED_ISSET_ID
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__TIMETOLIVE_ISSET_ID
init|=
literal|5
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|6
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
block|{
block|{
name|put
argument_list|(
name|_Fields
operator|.
name|NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_VERSIONS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"maxVersions"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|_Fields
operator|.
name|COMPRESSION
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"compression"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|_Fields
operator|.
name|IN_MEMORY
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"inMemory"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|_Fields
operator|.
name|BLOOM_FILTER_TYPE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"bloomFilterType"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|_Fields
operator|.
name|BLOOM_FILTER_VECTOR_SIZE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"bloomFilterVectorSize"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|_Fields
operator|.
name|BLOOM_FILTER_NB_HASHES
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"bloomFilterNbHashes"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|_Fields
operator|.
name|BLOCK_CACHE_ENABLED
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"blockCacheEnabled"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|_Fields
operator|.
name|TIME_TO_LIVE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timeToLive"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|ColumnDescriptor
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ColumnDescriptor
parameter_list|()
block|{
name|this
operator|.
name|maxVersions
operator|=
literal|3
expr_stmt|;
name|this
operator|.
name|compression
operator|=
literal|"NONE"
expr_stmt|;
name|this
operator|.
name|inMemory
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|bloomFilterType
operator|=
literal|"NONE"
expr_stmt|;
name|this
operator|.
name|bloomFilterVectorSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bloomFilterNbHashes
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|blockCacheEnabled
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|timeToLive
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|ColumnDescriptor
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|int
name|maxVersions
parameter_list|,
name|String
name|compression
parameter_list|,
name|boolean
name|inMemory
parameter_list|,
name|String
name|bloomFilterType
parameter_list|,
name|int
name|bloomFilterVectorSize
parameter_list|,
name|int
name|bloomFilterNbHashes
parameter_list|,
name|boolean
name|blockCacheEnabled
parameter_list|,
name|int
name|timeToLive
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
name|setMaxVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
name|this
operator|.
name|inMemory
operator|=
name|inMemory
expr_stmt|;
name|setInMemoryIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|bloomFilterType
operator|=
name|bloomFilterType
expr_stmt|;
name|this
operator|.
name|bloomFilterVectorSize
operator|=
name|bloomFilterVectorSize
expr_stmt|;
name|setBloomFilterVectorSizeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|bloomFilterNbHashes
operator|=
name|bloomFilterNbHashes
expr_stmt|;
name|setBloomFilterNbHashesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockCacheEnabled
operator|=
name|blockCacheEnabled
expr_stmt|;
name|setBlockCacheEnabledIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeToLive
operator|=
name|timeToLive
expr_stmt|;
name|setTimeToLiveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|ColumnDescriptor
parameter_list|(
name|ColumnDescriptor
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
block|}
name|this
operator|.
name|maxVersions
operator|=
name|other
operator|.
name|maxVersions
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetCompression
argument_list|()
condition|)
block|{
name|this
operator|.
name|compression
operator|=
name|other
operator|.
name|compression
expr_stmt|;
block|}
name|this
operator|.
name|inMemory
operator|=
name|other
operator|.
name|inMemory
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetBloomFilterType
argument_list|()
condition|)
block|{
name|this
operator|.
name|bloomFilterType
operator|=
name|other
operator|.
name|bloomFilterType
expr_stmt|;
block|}
name|this
operator|.
name|bloomFilterVectorSize
operator|=
name|other
operator|.
name|bloomFilterVectorSize
expr_stmt|;
name|this
operator|.
name|bloomFilterNbHashes
operator|=
name|other
operator|.
name|bloomFilterNbHashes
expr_stmt|;
name|this
operator|.
name|blockCacheEnabled
operator|=
name|other
operator|.
name|blockCacheEnabled
expr_stmt|;
name|this
operator|.
name|timeToLive
operator|=
name|other
operator|.
name|timeToLive
expr_stmt|;
block|}
specifier|public
name|ColumnDescriptor
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|ColumnDescriptor
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|ColumnDescriptor
name|clone
parameter_list|()
block|{
return|return
operator|new
name|ColumnDescriptor
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|ColumnDescriptor
name|setName
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMaxVersions
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxVersions
return|;
block|}
specifier|public
name|ColumnDescriptor
name|setMaxVersions
parameter_list|(
name|int
name|maxVersions
parameter_list|)
block|{
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
name|setMaxVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetMaxVersions
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__MAXVERSIONS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field maxVersions is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMaxVersions
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__MAXVERSIONS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMaxVersionsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__MAXVERSIONS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCompression
parameter_list|()
block|{
return|return
name|this
operator|.
name|compression
return|;
block|}
specifier|public
name|ColumnDescriptor
name|setCompression
parameter_list|(
name|String
name|compression
parameter_list|)
block|{
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetCompression
parameter_list|()
block|{
name|this
operator|.
name|compression
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field compression is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCompression
parameter_list|()
block|{
return|return
name|this
operator|.
name|compression
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setCompressionIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|compression
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isInMemory
parameter_list|()
block|{
return|return
name|this
operator|.
name|inMemory
return|;
block|}
specifier|public
name|ColumnDescriptor
name|setInMemory
parameter_list|(
name|boolean
name|inMemory
parameter_list|)
block|{
name|this
operator|.
name|inMemory
operator|=
name|inMemory
expr_stmt|;
name|setInMemoryIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetInMemory
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__INMEMORY_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field inMemory is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetInMemory
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__INMEMORY_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setInMemoryIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__INMEMORY_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getBloomFilterType
parameter_list|()
block|{
return|return
name|this
operator|.
name|bloomFilterType
return|;
block|}
specifier|public
name|ColumnDescriptor
name|setBloomFilterType
parameter_list|(
name|String
name|bloomFilterType
parameter_list|)
block|{
name|this
operator|.
name|bloomFilterType
operator|=
name|bloomFilterType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetBloomFilterType
parameter_list|()
block|{
name|this
operator|.
name|bloomFilterType
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field bloomFilterType is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBloomFilterType
parameter_list|()
block|{
return|return
name|this
operator|.
name|bloomFilterType
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setBloomFilterTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|bloomFilterType
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getBloomFilterVectorSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|bloomFilterVectorSize
return|;
block|}
specifier|public
name|ColumnDescriptor
name|setBloomFilterVectorSize
parameter_list|(
name|int
name|bloomFilterVectorSize
parameter_list|)
block|{
name|this
operator|.
name|bloomFilterVectorSize
operator|=
name|bloomFilterVectorSize
expr_stmt|;
name|setBloomFilterVectorSizeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetBloomFilterVectorSize
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__BLOOMFILTERVECTORSIZE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field bloomFilterVectorSize is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBloomFilterVectorSize
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__BLOOMFILTERVECTORSIZE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBloomFilterVectorSizeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__BLOOMFILTERVECTORSIZE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getBloomFilterNbHashes
parameter_list|()
block|{
return|return
name|this
operator|.
name|bloomFilterNbHashes
return|;
block|}
specifier|public
name|ColumnDescriptor
name|setBloomFilterNbHashes
parameter_list|(
name|int
name|bloomFilterNbHashes
parameter_list|)
block|{
name|this
operator|.
name|bloomFilterNbHashes
operator|=
name|bloomFilterNbHashes
expr_stmt|;
name|setBloomFilterNbHashesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetBloomFilterNbHashes
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__BLOOMFILTERNBHASHES_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field bloomFilterNbHashes is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBloomFilterNbHashes
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__BLOOMFILTERNBHASHES_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBloomFilterNbHashesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__BLOOMFILTERNBHASHES_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBlockCacheEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockCacheEnabled
return|;
block|}
specifier|public
name|ColumnDescriptor
name|setBlockCacheEnabled
parameter_list|(
name|boolean
name|blockCacheEnabled
parameter_list|)
block|{
name|this
operator|.
name|blockCacheEnabled
operator|=
name|blockCacheEnabled
expr_stmt|;
name|setBlockCacheEnabledIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetBlockCacheEnabled
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__BLOCKCACHEENABLED_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field blockCacheEnabled is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBlockCacheEnabled
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__BLOCKCACHEENABLED_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBlockCacheEnabledIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__BLOCKCACHEENABLED_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getTimeToLive
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeToLive
return|;
block|}
specifier|public
name|ColumnDescriptor
name|setTimeToLive
parameter_list|(
name|int
name|timeToLive
parameter_list|)
block|{
name|this
operator|.
name|timeToLive
operator|=
name|timeToLive
expr_stmt|;
name|setTimeToLiveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimeToLive
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMETOLIVE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timeToLive is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimeToLive
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMETOLIVE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimeToLiveIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMETOLIVE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_VERSIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMaxVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMaxVersions
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COMPRESSION
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCompression
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCompression
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IN_MEMORY
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetInMemory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setInMemory
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOOM_FILTER_TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBloomFilterType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBloomFilterType
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOOM_FILTER_VECTOR_SIZE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBloomFilterVectorSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBloomFilterVectorSize
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOOM_FILTER_NB_HASHES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBloomFilterNbHashes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBloomFilterNbHashes
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOCK_CACHE_ENABLED
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBlockCacheEnabled
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBlockCacheEnabled
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIME_TO_LIVE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimeToLive
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimeToLive
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|setFieldValue
argument_list|(
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|fieldID
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|getName
argument_list|()
return|;
case|case
name|MAX_VERSIONS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getMaxVersions
argument_list|()
argument_list|)
return|;
case|case
name|COMPRESSION
case|:
return|return
name|getCompression
argument_list|()
return|;
case|case
name|IN_MEMORY
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isInMemory
argument_list|()
argument_list|)
return|;
case|case
name|BLOOM_FILTER_TYPE
case|:
return|return
name|getBloomFilterType
argument_list|()
return|;
case|case
name|BLOOM_FILTER_VECTOR_SIZE
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getBloomFilterVectorSize
argument_list|()
argument_list|)
return|;
case|case
name|BLOOM_FILTER_NB_HASHES
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getBloomFilterNbHashes
argument_list|()
argument_list|)
return|;
case|case
name|BLOCK_CACHE_ENABLED
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isBlockCacheEnabled
argument_list|()
argument_list|)
return|;
case|case
name|TIME_TO_LIVE
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getTimeToLive
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|getFieldValue
argument_list|(
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|fieldId
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|isSetName
argument_list|()
return|;
case|case
name|MAX_VERSIONS
case|:
return|return
name|isSetMaxVersions
argument_list|()
return|;
case|case
name|COMPRESSION
case|:
return|return
name|isSetCompression
argument_list|()
return|;
case|case
name|IN_MEMORY
case|:
return|return
name|isSetInMemory
argument_list|()
return|;
case|case
name|BLOOM_FILTER_TYPE
case|:
return|return
name|isSetBloomFilterType
argument_list|()
return|;
case|case
name|BLOOM_FILTER_VECTOR_SIZE
case|:
return|return
name|isSetBloomFilterVectorSize
argument_list|()
return|;
case|case
name|BLOOM_FILTER_NB_HASHES
case|:
return|return
name|isSetBloomFilterNbHashes
argument_list|()
return|;
case|case
name|BLOCK_CACHE_ENABLED
case|:
return|return
name|isSetBlockCacheEnabled
argument_list|()
return|;
case|case
name|TIME_TO_LIVE
case|:
return|return
name|isSetTimeToLive
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
return|return
name|isSet
argument_list|(
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|fieldID
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|ColumnDescriptor
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|ColumnDescriptor
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|ColumnDescriptor
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_maxVersions
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_maxVersions
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_maxVersions
operator|||
name|that_present_maxVersions
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_maxVersions
operator|&&
name|that_present_maxVersions
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|maxVersions
operator|!=
name|that
operator|.
name|maxVersions
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_compression
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCompression
argument_list|()
decl_stmt|;
name|boolean
name|that_present_compression
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCompression
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_compression
operator|||
name|that_present_compression
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_compression
operator|&&
name|that_present_compression
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|compression
operator|.
name|equals
argument_list|(
name|that
operator|.
name|compression
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_inMemory
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_inMemory
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_inMemory
operator|||
name|that_present_inMemory
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_inMemory
operator|&&
name|that_present_inMemory
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|inMemory
operator|!=
name|that
operator|.
name|inMemory
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_bloomFilterType
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBloomFilterType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_bloomFilterType
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBloomFilterType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_bloomFilterType
operator|||
name|that_present_bloomFilterType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_bloomFilterType
operator|&&
name|that_present_bloomFilterType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|bloomFilterType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|bloomFilterType
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_bloomFilterVectorSize
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_bloomFilterVectorSize
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_bloomFilterVectorSize
operator|||
name|that_present_bloomFilterVectorSize
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_bloomFilterVectorSize
operator|&&
name|that_present_bloomFilterVectorSize
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|bloomFilterVectorSize
operator|!=
name|that
operator|.
name|bloomFilterVectorSize
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_bloomFilterNbHashes
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_bloomFilterNbHashes
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_bloomFilterNbHashes
operator|||
name|that_present_bloomFilterNbHashes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_bloomFilterNbHashes
operator|&&
name|that_present_bloomFilterNbHashes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|bloomFilterNbHashes
operator|!=
name|that
operator|.
name|bloomFilterNbHashes
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_blockCacheEnabled
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_blockCacheEnabled
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_blockCacheEnabled
operator|||
name|that_present_blockCacheEnabled
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_blockCacheEnabled
operator|&&
name|that_present_blockCacheEnabled
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|blockCacheEnabled
operator|!=
name|that
operator|.
name|blockCacheEnabled
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timeToLive
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timeToLive
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timeToLive
operator|||
name|that_present_timeToLive
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timeToLive
operator|&&
name|that_present_timeToLive
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timeToLive
operator|!=
name|that
operator|.
name|timeToLive
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|builder
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
name|boolean
name|present_name
init|=
literal|true
operator|&&
operator|(
name|isSetName
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_name
condition|)
name|builder
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|boolean
name|present_maxVersions
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_maxVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_maxVersions
condition|)
name|builder
operator|.
name|append
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
name|boolean
name|present_compression
init|=
literal|true
operator|&&
operator|(
name|isSetCompression
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_compression
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_compression
condition|)
name|builder
operator|.
name|append
argument_list|(
name|compression
argument_list|)
expr_stmt|;
name|boolean
name|present_inMemory
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_inMemory
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_inMemory
condition|)
name|builder
operator|.
name|append
argument_list|(
name|inMemory
argument_list|)
expr_stmt|;
name|boolean
name|present_bloomFilterType
init|=
literal|true
operator|&&
operator|(
name|isSetBloomFilterType
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_bloomFilterType
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_bloomFilterType
condition|)
name|builder
operator|.
name|append
argument_list|(
name|bloomFilterType
argument_list|)
expr_stmt|;
name|boolean
name|present_bloomFilterVectorSize
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_bloomFilterVectorSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_bloomFilterVectorSize
condition|)
name|builder
operator|.
name|append
argument_list|(
name|bloomFilterVectorSize
argument_list|)
expr_stmt|;
name|boolean
name|present_bloomFilterNbHashes
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_bloomFilterNbHashes
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_bloomFilterNbHashes
condition|)
name|builder
operator|.
name|append
argument_list|(
name|bloomFilterNbHashes
argument_list|)
expr_stmt|;
name|boolean
name|present_blockCacheEnabled
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_blockCacheEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_blockCacheEnabled
condition|)
name|builder
operator|.
name|append
argument_list|(
name|blockCacheEnabled
argument_list|)
expr_stmt|;
name|boolean
name|present_timeToLive
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_timeToLive
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_timeToLive
condition|)
name|builder
operator|.
name|append
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toHashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ColumnDescriptor
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|ColumnDescriptor
name|typedOther
init|=
operator|(
name|ColumnDescriptor
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|name
argument_list|,
name|typedOther
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMaxVersions
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|isSetMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|maxVersions
argument_list|,
name|typedOther
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCompression
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|isSetCompression
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|compression
argument_list|,
name|typedOther
operator|.
name|compression
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetInMemory
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|isSetInMemory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|inMemory
argument_list|,
name|typedOther
operator|.
name|inMemory
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBloomFilterType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|isSetBloomFilterType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|bloomFilterType
argument_list|,
name|typedOther
operator|.
name|bloomFilterType
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBloomFilterVectorSize
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|isSetBloomFilterVectorSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|bloomFilterVectorSize
argument_list|,
name|typedOther
operator|.
name|bloomFilterVectorSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBloomFilterNbHashes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|isSetBloomFilterNbHashes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|bloomFilterNbHashes
argument_list|,
name|typedOther
operator|.
name|bloomFilterNbHashes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBlockCacheEnabled
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|isSetBlockCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|blockCacheEnabled
argument_list|,
name|typedOther
operator|.
name|blockCacheEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimeToLive
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|isSetTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|timeToLive
argument_list|,
name|typedOther
operator|.
name|timeToLive
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
name|_Fields
name|fieldId
init|=
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|field
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldId
operator|==
literal|null
condition|)
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_VERSIONS
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|maxVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setMaxVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COMPRESSION
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|compression
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IN_MEMORY
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|inMemory
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setInMemoryIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOOM_FILTER_TYPE
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|bloomFilterType
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOOM_FILTER_VECTOR_SIZE
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|bloomFilterVectorSize
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setBloomFilterVectorSizeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOOM_FILTER_NB_HASHES
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|bloomFilterNbHashes
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setBloomFilterNbHashesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOCK_CACHE_ENABLED
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|blockCacheEnabled
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setBlockCacheEnabledIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIME_TO_LIVE
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|timeToLive
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setTimeToLiveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_VERSIONS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|compression
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COMPRESSION_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|compression
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IN_MEMORY_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|inMemory
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|bloomFilterType
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BLOOM_FILTER_TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|bloomFilterType
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BLOOM_FILTER_VECTOR_SIZE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|bloomFilterVectorSize
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BLOOM_FILTER_NB_HASHES_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|bloomFilterNbHashes
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BLOCK_CACHE_ENABLED_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|blockCacheEnabled
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIME_TO_LIVE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|timeToLive
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ColumnDescriptor("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"maxVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"compression:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|compression
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|compression
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inMemory:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|inMemory
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"bloomFilterType:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|bloomFilterType
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|bloomFilterType
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"bloomFilterVectorSize:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|bloomFilterVectorSize
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"bloomFilterNbHashes:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|bloomFilterNbHashes
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"blockCacheEnabled:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|blockCacheEnabled
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timeToLive:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timeToLive
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
end_class

end_unit

