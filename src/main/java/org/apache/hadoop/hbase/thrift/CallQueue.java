begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A BlockingQueue reports waiting time in queue and queue length to  * ThriftMetrics.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CallQueue
implements|implements
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CallQueue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Call
argument_list|>
name|underlyingQueue
decl_stmt|;
specifier|private
specifier|final
name|ThriftMetrics
name|metrics
decl_stmt|;
specifier|public
name|CallQueue
parameter_list|(
name|BlockingQueue
argument_list|<
name|Call
argument_list|>
name|underlyingQueue
parameter_list|,
name|ThriftMetrics
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|underlyingQueue
operator|=
name|underlyingQueue
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|now
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|Call
implements|implements
name|Runnable
block|{
specifier|final
name|long
name|startTime
decl_stmt|;
specifier|final
name|Runnable
name|underlyingRunnable
decl_stmt|;
name|Call
parameter_list|(
name|Runnable
name|underlyingRunnable
parameter_list|)
block|{
name|this
operator|.
name|underlyingRunnable
operator|=
name|underlyingRunnable
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|now
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|underlyingRunnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|timeInQueue
parameter_list|()
block|{
return|return
name|now
argument_list|()
operator|-
name|startTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|Call
condition|)
block|{
name|Call
name|otherCall
init|=
call|(
name|Call
call|)
argument_list|(
name|other
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|underlyingRunnable
operator|.
name|equals
argument_list|(
name|otherCall
operator|.
name|underlyingRunnable
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|instanceof
name|Runnable
condition|)
block|{
return|return
name|this
operator|.
name|underlyingRunnable
operator|.
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|underlyingRunnable
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Runnable
name|poll
parameter_list|()
block|{
name|Call
name|result
init|=
name|underlyingQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|updateMetrics
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|updateMetrics
parameter_list|(
name|Call
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|metrics
operator|.
name|incTimeInQueue
argument_list|(
name|result
operator|.
name|timeInQueue
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setCallQueueLen
argument_list|(
name|this
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Runnable
name|poll
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Call
name|result
init|=
name|underlyingQueue
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|updateMetrics
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Runnable
name|remove
parameter_list|()
block|{
name|Call
name|result
init|=
name|underlyingQueue
operator|.
name|remove
argument_list|()
decl_stmt|;
name|updateMetrics
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Runnable
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Call
name|result
init|=
name|underlyingQueue
operator|.
name|take
argument_list|()
decl_stmt|;
name|updateMetrics
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|Runnable
argument_list|>
name|destination
parameter_list|)
block|{
return|return
name|drainTo
argument_list|(
name|destination
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|Runnable
argument_list|>
name|destination
parameter_list|,
name|int
name|maxElements
parameter_list|)
block|{
if|if
condition|(
name|destination
operator|==
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A BlockingQueue cannot drain to itself."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Call
argument_list|>
name|drained
init|=
operator|new
name|ArrayList
argument_list|<
name|Call
argument_list|>
argument_list|()
decl_stmt|;
name|underlyingQueue
operator|.
name|drainTo
argument_list|(
name|drained
argument_list|,
name|maxElements
argument_list|)
expr_stmt|;
for|for
control|(
name|Call
name|r
range|:
name|drained
control|)
block|{
name|updateMetrics
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|destination
operator|.
name|addAll
argument_list|(
name|drained
argument_list|)
expr_stmt|;
name|int
name|sz
init|=
name|drained
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Elements drained: "
operator|+
name|sz
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|Runnable
name|element
parameter_list|)
block|{
return|return
name|underlyingQueue
operator|.
name|offer
argument_list|(
operator|new
name|Call
argument_list|(
name|element
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|Runnable
name|element
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|underlyingQueue
operator|.
name|offer
argument_list|(
operator|new
name|Call
argument_list|(
name|element
argument_list|)
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|Runnable
name|element
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|underlyingQueue
operator|.
name|put
argument_list|(
operator|new
name|Call
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|Runnable
name|element
parameter_list|)
block|{
return|return
name|underlyingQueue
operator|.
name|add
argument_list|(
operator|new
name|Call
argument_list|(
name|element
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Runnable
argument_list|>
name|elements
parameter_list|)
block|{
name|int
name|added
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Runnable
name|r
range|:
name|elements
control|)
block|{
name|added
operator|+=
name|underlyingQueue
operator|.
name|add
argument_list|(
operator|new
name|Call
argument_list|(
name|r
argument_list|)
argument_list|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
return|return
name|added
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Runnable
name|element
parameter_list|()
block|{
return|return
name|underlyingQueue
operator|.
name|element
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Runnable
name|peek
parameter_list|()
block|{
return|return
name|underlyingQueue
operator|.
name|peek
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|underlyingQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|underlyingQueue
operator|.
name|containsAll
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|underlyingQueue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Runnable
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Runnable
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Call
argument_list|>
name|underlyingIterator
init|=
name|underlyingQueue
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Runnable
name|next
parameter_list|()
block|{
return|return
name|underlyingIterator
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|underlyingIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|underlyingIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|underlyingQueue
operator|.
name|removeAll
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|underlyingQueue
operator|.
name|retainAll
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|underlyingQueue
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|underlyingQueue
operator|.
name|toArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|array
parameter_list|)
block|{
return|return
name|underlyingQueue
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
return|return
name|underlyingQueue
operator|.
name|contains
argument_list|(
name|element
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|remainingCapacity
parameter_list|()
block|{
return|return
name|underlyingQueue
operator|.
name|remainingCapacity
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
return|return
name|underlyingQueue
operator|.
name|remove
argument_list|(
name|element
argument_list|)
return|;
block|}
block|}
end_class

end_unit

