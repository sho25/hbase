begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
operator|.
name|getBytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ParseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|AlreadyExists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|BatchMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Hbase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IllegalArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|THsHaServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TNonblockingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_comment
comment|/**  * ThriftServer - this class starts up a Thrift server which implements the  * Hbase API specified in the Hbase.thrift IDL file.  */
end_comment

begin_class
specifier|public
class|class
name|ThriftServer
block|{
comment|/**    * The HBaseHandler is a glue object that connects Thrift RPC calls to the    * HBase client API primarily defined in the HBaseAdmin and HTable objects.    */
specifier|public
specifier|static
class|class
name|HBaseHandler
implements|implements
name|Hbase
operator|.
name|Iface
block|{
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// nextScannerId and scannerMap are used to manage scanner state
specifier|protected
name|int
name|nextScannerId
init|=
literal|0
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ResultScanner
argument_list|>
name|scannerMap
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
argument_list|>
name|threadLocalTables
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Returns a list of all the column families for a given htable.      *      * @param table      * @return      * @throws IOException      */
name|byte
index|[]
index|[]
name|getAllColumns
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|HColumnDescriptor
index|[]
name|cds
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|columns
init|=
operator|new
name|byte
index|[
name|cds
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columns
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|cds
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|COLUMN_FAMILY_DELIM_ARRAY
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
comment|/**      * Creates and returns an HTable instance from a given table name.      *      * @param tableName      *          name of table      * @return HTable object      * @throws IOException      * @throws IOError      */
specifier|protected
name|HTable
name|getTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|table
init|=
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
name|tables
init|=
name|threadLocalTables
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tables
operator|.
name|containsKey
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|tables
operator|.
name|put
argument_list|(
name|table
argument_list|,
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
operator|.
name|get
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|protected
name|HTable
name|getTable
parameter_list|(
specifier|final
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTable
argument_list|(
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Assigns a unique ID to the scanner and adds the mapping to an internal      * hash-map.      *      * @param scanner      * @return integer scanner id      */
specifier|protected
specifier|synchronized
name|int
name|addScanner
parameter_list|(
name|ResultScanner
name|scanner
parameter_list|)
block|{
name|int
name|id
init|=
name|nextScannerId
operator|++
decl_stmt|;
name|scannerMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
comment|/**      * Returns the scanner associated with the specified ID.      *      * @param id      * @return a Scanner, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|ResultScanner
name|getScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Removes the scanner associated with the specified ID from the internal      * id->scanner hash-map.      *      * @param id      * @return a Scanner, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|ResultScanner
name|removeScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Constructs an HBaseHandler object.      * @throws IOException      */
specifier|protected
name|HBaseHandler
parameter_list|()
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|HBaseHandler
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|c
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scannerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ResultScanner
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
return|return
name|HTable
operator|.
name|isTableEnabled
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|admin
operator|.
name|compact
argument_list|(
name|getBytes
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|admin
operator|.
name|majorCompact
argument_list|(
name|getBytes
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
block|{
try|try
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|tables
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
init|=
name|this
operator|.
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hris
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|hris
control|)
block|{
name|TRegionInfo
name|region
init|=
operator|new
name|TRegionInfo
argument_list|()
decl_stmt|;
name|region
operator|.
name|startKey
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|endKey
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|regionInfo
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|id
operator|=
name|regionInfo
operator|.
name|getRegionId
argument_list|()
expr_stmt|;
name|region
operator|.
name|name
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|version
operator|=
name|regionInfo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regions
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifier
operator|==
literal|null
operator|||
name|qualifier
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|raw
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
return|return
name|getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|raw
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
return|return
name|getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|raw
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
argument_list|)
return|;
block|}
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|row
range|:
name|rows
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
name|Result
index|[]
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|in_tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
block|{
name|byte
index|[]
name|tableName
init|=
name|getBytes
argument_list|(
name|in_tableName
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExists
argument_list|(
literal|"table name already in use"
argument_list|)
throw|;
block|}
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnDescriptor
name|col
range|:
name|columnFamilies
control|)
block|{
name|HColumnDescriptor
name|colDesc
init|=
name|ThriftUtilities
operator|.
name|colDescFromThrift
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|in_tableName
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
name|tableName
init|=
name|getBytes
argument_list|(
name|in_tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteTable: table="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
literal|"table does not exist"
argument_list|)
throw|;
block|}
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|mutateRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
comment|// I apologize for all this mess :)
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|m
operator|.
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|m
operator|.
name|value
operator|.
name|array
argument_list|()
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|m
operator|.
name|value
operator|.
name|array
argument_list|()
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|mutateRowsTs
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchMutation
name|batch
range|:
name|rowBatches
control|)
block|{
name|byte
index|[]
name|row
init|=
name|getBytes
argument_list|(
name|batch
operator|.
name|row
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
name|batch
operator|.
name|mutations
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|m
operator|.
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
comment|// no qualifier, family only.
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|m
operator|.
name|value
operator|.
name|array
argument_list|()
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|m
operator|.
name|value
operator|.
name|array
argument_list|()
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|puts
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
for|for
control|(
name|Delete
name|del
range|:
name|deletes
control|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|atomicIncrement
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|amount
argument_list|)
return|;
block|}
return|return
name|atomicIncrement
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|amount
argument_list|)
return|;
block|}
specifier|protected
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|HTable
name|table
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerClose: id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|removeScanner
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|IllegalArgument
throws|,
name|IOError
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerGetList: id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|scanner
condition|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
name|Result
index|[]
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|results
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|results
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IllegalArgument
throws|,
name|IOError
block|{
return|return
name|scannerGetList
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|public
name|int
name|scannerOpenWithScan
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|tScan
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|tScan
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|tScan
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setStopRow
argument_list|(
name|tScan
operator|.
name|getStopRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|tScan
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetCaching
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|tScan
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetColumns
argument_list|()
operator|&&
name|tScan
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|tScan
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetFilterString
argument_list|()
condition|)
block|{
name|ParseFilter
name|parseFilter
init|=
operator|new
name|ParseFilter
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|parseFilter
operator|.
name|parseFilterString
argument_list|(
name|tScan
operator|.
name|getFilterString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|getBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|getBytes
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|getBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|TreeMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|columns
init|=
operator|new
name|TreeMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|e
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|ColumnDescriptor
name|col
init|=
name|ThriftUtilities
operator|.
name|colDescFromHbase
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|columns
operator|.
name|put
argument_list|(
name|col
operator|.
name|name
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getRowOrBefore
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|getBytes
argument_list|(
name|family
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|raw
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TRegionInfo
name|getRegionInfo
parameter_list|(
name|ByteBuffer
name|searchRow
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Result
name|startRowResult
init|=
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|searchRow
operator|.
name|array
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
if|if
condition|(
name|startRowResult
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find row in .META., row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|searchRow
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// find region start and end keys
name|byte
index|[]
name|value
init|=
name|startRowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HRegionInfo REGIONINFO was null or "
operator|+
literal|" empty in Meta for row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|searchRow
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|HRegionInfo
name|regionInfo
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|TRegionInfo
name|region
init|=
operator|new
name|TRegionInfo
argument_list|()
decl_stmt|;
name|region
operator|.
name|setStartKey
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|setEndKey
argument_list|(
name|regionInfo
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|id
operator|=
name|regionInfo
operator|.
name|getRegionId
argument_list|()
expr_stmt|;
name|region
operator|.
name|setName
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|version
operator|=
name|regionInfo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
comment|// find region assignment to server
name|value
operator|=
name|startRowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ServerName
name|sn
init|=
operator|new
name|ServerName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|,
operator|-
literal|1
comment|/*Any value works here for startcode*/
argument_list|)
decl_stmt|;
name|region
operator|.
name|setServerName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|port
operator|=
name|sn
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
return|return
name|region
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|//
comment|// Main program and support routines
comment|//
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|(
name|Options
name|options
parameter_list|,
name|int
name|exitCode
parameter_list|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"Thrift"
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
literal|"To start the Thrift server run 'bin/hbase-daemon.sh start thrift'\n"
operator|+
literal|"To shutdown the thrift server run 'bin/hbase-daemon.sh stop thrift' or"
operator|+
literal|" send a kill signal to the thrift server pid"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_LISTEN_PORT
init|=
literal|"9090"
decl_stmt|;
comment|/*    * Start up the Thrift server.    * @param args    */
specifier|static
specifier|private
name|void
name|doMain
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"ThriftServer"
argument_list|)
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"b"
argument_list|,
literal|"bind"
argument_list|,
literal|true
argument_list|,
literal|"Address to bind the Thrift server to. Not supported by the Nonblocking and HsHa server [default: 0.0.0.0]"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"p"
argument_list|,
literal|"port"
argument_list|,
literal|true
argument_list|,
literal|"Port to bind to [default: 9090]"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"f"
argument_list|,
literal|"framed"
argument_list|,
literal|false
argument_list|,
literal|"Use framed transport"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"c"
argument_list|,
literal|"compact"
argument_list|,
literal|false
argument_list|,
literal|"Use the compact protocol"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help information"
argument_list|)
expr_stmt|;
name|OptionGroup
name|servers
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
name|servers
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"nonblocking"
argument_list|,
literal|false
argument_list|,
literal|"Use the TNonblockingServer. This implies the framed transport."
argument_list|)
argument_list|)
expr_stmt|;
name|servers
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"hsha"
argument_list|,
literal|false
argument_list|,
literal|"Use the THsHaServer. This implies the framed transport."
argument_list|)
argument_list|)
expr_stmt|;
name|servers
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"threadpool"
argument_list|,
literal|false
argument_list|,
literal|"Use the TThreadPoolServer. This is the default."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOptionGroup
argument_list|(
name|servers
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmd
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
comment|/**      * This is so complicated to please both bin/hbase and bin/hbase-daemon.      * hbase-daemon provides "start" and "stop" arguments      * hbase should print the help if no argument is provided      */
name|List
argument_list|<
name|String
argument_list|>
name|commandLine
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|boolean
name|stop
init|=
name|commandLine
operator|.
name|contains
argument_list|(
literal|"stop"
argument_list|)
decl_stmt|;
name|boolean
name|start
init|=
name|commandLine
operator|.
name|contains
argument_list|(
literal|"start"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
operator|||
operator|!
name|start
operator|||
name|stop
condition|)
block|{
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Get port to bind to
name|int
name|listenPort
init|=
literal|0
decl_stmt|;
try|try
block|{
name|listenPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"port"
argument_list|,
name|DEFAULT_LISTEN_PORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not parse the value provided for the port option"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Construct correct ProtocolFactory
name|TProtocolFactory
name|protocolFactory
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"compact"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using compact protocol"
argument_list|)
expr_stmt|;
name|protocolFactory
operator|=
operator|new
name|TCompactProtocol
operator|.
name|Factory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using binary protocol"
argument_list|)
expr_stmt|;
name|protocolFactory
operator|=
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
expr_stmt|;
block|}
name|HBaseHandler
name|handler
init|=
operator|new
name|HBaseHandler
argument_list|()
decl_stmt|;
name|Hbase
operator|.
name|Processor
name|processor
init|=
operator|new
name|Hbase
operator|.
name|Processor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|TServer
name|server
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"nonblocking"
argument_list|)
operator|||
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"hsha"
argument_list|)
condition|)
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"bind"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The Nonblocking and HsHa servers don't support IP address binding at the moment."
operator|+
literal|" See https://issues.apache.org/jira/browse/HBASE-2155 for details."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|TNonblockingServerTransport
name|serverTransport
init|=
operator|new
name|TNonblockingServerSocket
argument_list|(
name|listenPort
argument_list|)
decl_stmt|;
name|TFramedTransport
operator|.
name|Factory
name|transportFactory
init|=
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"nonblocking"
argument_list|)
condition|)
block|{
name|TNonblockingServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|TNonblockingServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|serverArgs
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
expr_stmt|;
name|serverArgs
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase Nonblocking Thrift server on "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|listenPort
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|TNonblockingServer
argument_list|(
name|serverArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|THsHaServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|THsHaServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|serverArgs
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
expr_stmt|;
name|serverArgs
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase HsHA Thrift server on "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|listenPort
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|THsHaServer
argument_list|(
name|serverArgs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Get IP address to bind to
name|InetAddress
name|listenAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"bind"
argument_list|)
condition|)
block|{
try|try
block|{
name|listenAddress
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"bind"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not bind to provided ip address"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|listenAddress
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
block|}
name|TServerTransport
name|serverTransport
init|=
operator|new
name|TServerSocket
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|listenAddress
argument_list|,
name|listenPort
argument_list|)
argument_list|)
decl_stmt|;
comment|// Construct correct TransportFactory
name|TTransportFactory
name|transportFactory
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"framed"
argument_list|)
condition|)
block|{
name|transportFactory
operator|=
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using framed transport"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportFactory
operator|=
operator|new
name|TTransportFactory
argument_list|()
expr_stmt|;
block|}
name|TThreadPoolServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|TThreadPoolServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|serverArgs
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
name|serverArgs
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase ThreadPool Thrift server on "
operator|+
name|listenAddress
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|listenPort
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|TThreadPoolServer
argument_list|(
name|serverArgs
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param args    * @throws Exception    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|VersionInfo
operator|.
name|logVersion
argument_list|()
expr_stmt|;
name|doMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

