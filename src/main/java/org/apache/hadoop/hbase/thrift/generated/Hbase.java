begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|Hbase
block|{
specifier|public
interface|interface
name|Iface
block|{
comment|/**      * Brings a table on-line (enables it)      *      * @param tableName name of the table      */
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Disables a table (takes it off-line) If it is being served, the master      * will tell the servers to stop serving it.      *      * @param tableName name of the table      */
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * @return true if table is on-line      *      * @param tableName name of the table to check      */
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * List all the userspace tables.      *      * @return returns a list of names      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * List all the column families assoicated with a table.      *      * @return list of column family descriptors      *      * @param tableName table name      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * List the regions associated with a table.      *      * @return list of region descriptors      *      * @param tableName table name      */
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Create a table with the specified column families.  The name      * field for each ColumnDescriptor must be set and must end in a      * colon (:). All other fields are optional and will get default      * values if not explicitly specified.      *      * @throws IllegalArgument if an input parameter is invalid      *      * @throws AlreadyExists if the table name already exists      *      * @param tableName name of table to create      *      * @param columnFamilies list of column family descriptors      */
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|TException
function_decl|;
comment|/**      * Deletes a table      *      * @throws IOError if table doesn't exist on server or there was some other      * problem      *      * @param tableName name of table to delete      */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get a single TCell for the specified table, row, and column at the      * latest timestamp. Returns an empty list if no such value exists.      *      * @return value for specified row/column      *      * @param tableName name of table      *      * @param row row key      *      * @param column column name      */
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get the specified number of versions for the specified table,      * row, and column.      *      * @return list of cells for specified row/column      *      * @param tableName name of table      *      * @param row row key      *      * @param column column name      *      * @param numVersions number of versions to retrieve      */
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get the specified number of versions for the specified table,      * row, and column.  Only versions less than or equal to the specified      * timestamp will be returned.      *      * @return list of cells for specified row/column      *      * @param tableName name of table      *      * @param row row key      *      * @param column column name      *      * @param timestamp timestamp      *      * @param numVersions number of versions to retrieve      */
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and row at the latest      * timestamp. Returns an empty list if the row does not exist.      *      * @return TRowResult containing the row and map of columns to TCells      *      * @param tableName name of table      *      * @param row row key      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get the specified columns for the specified table and row at the latest      * timestamp. Returns an empty list if the row does not exist.      *      * @return TRowResult containing the row and map of columns to TCells      *      * @param tableName name of table      *      * @param row row key      *      * @param columns List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and row at the specified      * timestamp. Returns an empty list if the row does not exist.      *      * @return TRowResult containing the row and map of columns to TCells      *      * @param tableName name of the table      *      * @param row row key      *      * @param timestamp timestamp      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get the specified columns for the specified table and row at the specified      * timestamp. Returns an empty list if the row does not exist.      *      * @return TRowResult containing the row and map of columns to TCells      *      * @param tableName name of table      *      * @param row row key      *      * @param columns List of columns to return, null for all columns      *      * @param timestamp      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and rows at the latest      * timestamp. Returns an empty list if no rows exist.      *      * @return TRowResult containing the rows and map of columns to TCells      *      * @param tableName name of table      *      * @param rows row keys      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get the specified columns for the specified table and rows at the latest      * timestamp. Returns an empty list if no rows exist.      *      * @return TRowResult containing the rows and map of columns to TCells      *      * @param tableName name of table      *      * @param rows row keys      *      * @param columns List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and rows at the specified      * timestamp. Returns an empty list if no rows exist.      *      * @return TRowResult containing the rows and map of columns to TCells      *      * @param tableName name of the table      *      * @param rows row keys      *      * @param timestamp timestamp      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get the specified columns for the specified table and rows at the specified      * timestamp. Returns an empty list if no rows exist.      *      * @return TRowResult containing the rows and map of columns to TCells      *      * @param tableName name of table      *      * @param rows row keys      *      * @param columns List of columns to return, null for all columns      *      * @param timestamp      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Apply a series of mutations (updates/deletes) to a row in a      * single transaction.  If an exception is thrown, then the      * transaction is aborted.  Default current timestamp is used, and      * all entries will have an identical timestamp.      *      * @param tableName name of table      *      * @param row row key      *      * @param mutations list of mutation commands      */
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Apply a series of mutations (updates/deletes) to a row in a      * single transaction.  If an exception is thrown, then the      * transaction is aborted.  The specified timestamp is used, and      * all entries will have an identical timestamp.      *      * @param tableName name of table      *      * @param row row key      *      * @param mutations list of mutation commands      *      * @param timestamp timestamp      */
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Apply a series of batches (each a series of mutations on a single row)      * in a single transaction.  If an exception is thrown, then the      * transaction is aborted.  Default current timestamp is used, and      * all entries will have an identical timestamp.      *      * @param tableName name of table      *      * @param rowBatches list of row batches      */
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Apply a series of batches (each a series of mutations on a single row)      * in a single transaction.  If an exception is thrown, then the      * transaction is aborted.  The specified timestamp is used, and      * all entries will have an identical timestamp.      *      * @param tableName name of table      *      * @param rowBatches list of row batches      *      * @param timestamp timestamp      */
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Atomically increment the column value specified.  Returns the next value post increment.      *      * @param tableName name of table      *      * @param row row to increment      *      * @param column name of column      *      * @param value amount to increment by      */
specifier|public
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Delete all cells that match the passed row and column.      *      * @param tableName name of table      *      * @param row Row to update      *      * @param column name of column whose value is to be deleted      */
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Delete all cells that match the passed row and column and whose      * timestamp is equal-to or older than the passed timestamp.      *      * @param tableName name of table      *      * @param row Row to update      *      * @param column name of column whose value is to be deleted      *      * @param timestamp timestamp      */
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Completely delete the row's cells.      *      * @param tableName name of table      *      * @param row key of the row to be completely deleted.      */
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Completely delete the row's cells marked with a timestamp      * equal-to or older than the passed timestamp.      *      * @param tableName name of table      *      * @param row key of the row to be completely deleted.      *      * @param timestamp timestamp      */
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting at the specified row and      * ending at the last row in the table.  Return the specified columns.      *      * @return scanner id to be used with other scanner procedures      *      * @param tableName name of table      *      * @param startRow Starting row in table to scan.      * Send "" (empty string) to start at the first row.      *      * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting and stopping at the      * specified rows.  ending at the last row in the table.  Return the      * specified columns.      *      * @return scanner id to be used with other scanner procedures      *      * @param tableName name of table      *      * @param startRow Starting row in table to scan.      * Send "" (empty string) to start at the first row.      *      * @param stopRow row to stop scanning on. This row is *not* included in the      * scanner's results      *      * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Open a scanner for a given prefix.  That is all rows will have the specified      * prefix. No other rows will be returned.      *      * @return scanner id to use with other scanner calls      *      * @param tableName name of table      *      * @param startAndPrefix the prefix (and thus start row) of the keys you want      *      * @param columns the columns you want returned      */
specifier|public
name|int
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting at the specified row and      * ending at the last row in the table.  Return the specified columns.      * Only values with the specified timestamp are returned.      *      * @return scanner id to be used with other scanner procedures      *      * @param tableName name of table      *      * @param startRow Starting row in table to scan.      * Send "" (empty string) to start at the first row.      *      * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      *      * @param timestamp timestamp      */
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting and stopping at the      * specified rows.  ending at the last row in the table.  Return the      * specified columns.  Only values with the specified timestamp are      * returned.      *      * @return scanner id to be used with other scanner procedures      *      * @param tableName name of table      *      * @param startRow Starting row in table to scan.      * Send "" (empty string) to start at the first row.      *      * @param stopRow row to stop scanning on. This row is *not* included in the      * scanner's results      *      * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      *      * @param timestamp timestamp      */
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Returns the scanner's current row value and advances to the next      * row in the table.  When there are no more rows in the table, or a key      * greater-than-or-equal-to the scanner's specified stopRow is reached,      * an empty list is returned.      *      * @return a TRowResult containing the current row and a map of the columns to TCells.      *      * @throws IllegalArgument if ScannerID is invalid      *      * @throws NotFound when the scanner reaches the end      *      * @param id id of a scanner returned by scannerOpen      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Returns, starting at the scanner's current row value nbRows worth of      * rows and advances to the next row in the table.  When there are no more      * rows in the table, or a key greater-than-or-equal-to the scanner's      * specified stopRow is reached,  an empty list is returned.      *      * @return a TRowResult containing the current row and a map of the columns to TCells.      *      * @throws IllegalArgument if ScannerID is invalid      *      * @throws NotFound when the scanner reaches the end      *      * @param id id of a scanner returned by scannerOpen      *      * @param nbRows number of results to return      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Closes the server-state associated with an open scanner.      *      * @throws IllegalArgument if ScannerID is invalid      *      * @param id id of a scanner returned by scannerOpen      */
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
block|}
specifier|public
interface|interface
name|AsyncIface
block|{
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|enableTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|disableTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|isTableEnabled_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|compact_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|majorCompact_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getTableNames
parameter_list|(
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getTableNames_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getColumnDescriptors_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getTableRegions_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|createTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getVer_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getVerTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowWithColumns_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRows_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowsWithColumns_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowsWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|mutateRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|mutateRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|mutateRows_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|mutateRowsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|atomicIncrement_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteAll_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteAllTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteAllRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteAllRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpen_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpenWithStop_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpenWithPrefix_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpenTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpenWithStopTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerGet_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerGetList_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerClose_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|Client
implements|implements
name|TServiceClient
implements|,
name|Iface
block|{
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|TServiceClientFactory
argument_list|<
name|Client
argument_list|>
block|{
specifier|public
name|Factory
parameter_list|()
block|{}
specifier|public
name|Client
name|getClient
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
return|;
block|}
specifier|public
name|Client
name|getClient
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
return|;
block|}
block|}
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
block|{
name|this
argument_list|(
name|prot
argument_list|,
name|prot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
block|{
name|iprot_
operator|=
name|iprot
expr_stmt|;
name|oprot_
operator|=
name|oprot
expr_stmt|;
block|}
specifier|protected
name|TProtocol
name|iprot_
decl_stmt|;
specifier|protected
name|TProtocol
name|oprot_
decl_stmt|;
specifier|protected
name|int
name|seqid_
decl_stmt|;
specifier|public
name|TProtocol
name|getInputProtocol
parameter_list|()
block|{
return|return
name|this
operator|.
name|iprot_
return|;
block|}
specifier|public
name|TProtocol
name|getOutputProtocol
parameter_list|()
block|{
return|return
name|this
operator|.
name|oprot_
return|;
block|}
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|recv_enableTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"enableTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|enableTable_args
name|args
init|=
operator|new
name|enableTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_enableTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"enableTable failed: out of sequence response"
argument_list|)
throw|;
block|}
name|enableTable_result
name|result
init|=
operator|new
name|enableTable_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|recv_disableTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"disableTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|disableTable_args
name|args
init|=
operator|new
name|disableTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_disableTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"disableTable failed: out of sequence response"
argument_list|)
throw|;
block|}
name|disableTable_result
name|result
init|=
operator|new
name|disableTable_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_isTableEnabled
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|recv_isTableEnabled
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"isTableEnabled"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|isTableEnabled_args
name|args
init|=
operator|new
name|isTableEnabled_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_isTableEnabled
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"isTableEnabled failed: out of sequence response"
argument_list|)
throw|;
block|}
name|isTableEnabled_result
name|result
init|=
operator|new
name|isTableEnabled_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"isTableEnabled failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_compact
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|recv_compact
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"compact"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|compact_args
name|args
init|=
operator|new
name|compact_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_compact
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"compact failed: out of sequence response"
argument_list|)
throw|;
block|}
name|compact_result
name|result
init|=
operator|new
name|compact_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_majorCompact
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|recv_majorCompact
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"majorCompact"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|majorCompact_args
name|args
init|=
operator|new
name|majorCompact_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_majorCompact
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"majorCompact failed: out of sequence response"
argument_list|)
throw|;
block|}
name|majorCompact_result
name|result
init|=
operator|new
name|majorCompact_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getTableNames
argument_list|()
expr_stmt|;
return|return
name|recv_getTableNames
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getTableNames
parameter_list|()
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableNames"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getTableNames_args
name|args
init|=
operator|new
name|getTableNames_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|recv_getTableNames
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getTableNames failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getTableNames_result
name|result
init|=
operator|new
name|getTableNames_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getTableNames failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getColumnDescriptors
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|recv_getColumnDescriptors
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getColumnDescriptors_args
name|args
init|=
operator|new
name|getColumnDescriptors_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|recv_getColumnDescriptors
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getColumnDescriptors failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getColumnDescriptors_result
name|result
init|=
operator|new
name|getColumnDescriptors_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getColumnDescriptors failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getTableRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|recv_getTableRegions
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableRegions"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getTableRegions_args
name|args
init|=
operator|new
name|getTableRegions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|recv_getTableRegions
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getTableRegions failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getTableRegions_result
name|result
init|=
operator|new
name|getTableRegions_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getTableRegions failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|TException
block|{
name|send_createTable
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|)
expr_stmt|;
name|recv_createTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"createTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|createTable_args
name|args
init|=
operator|new
name|createTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumnFamilies
argument_list|(
name|columnFamilies
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_createTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"createTable failed: out of sequence response"
argument_list|)
throw|;
block|}
name|createTable_result
name|result
init|=
operator|new
name|createTable_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|exist
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|exist
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|recv_deleteTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteTable_args
name|args
init|=
operator|new
name|deleteTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"deleteTable failed: out of sequence response"
argument_list|)
throw|;
block|}
name|deleteTable_result
name|result
init|=
operator|new
name|deleteTable_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
return|return
name|recv_get
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_args
name|args
init|=
operator|new
name|get_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|recv_get
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_result
name|result
init|=
operator|new
name|get_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|)
expr_stmt|;
return|return
name|recv_getVer
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVer"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getVer_args
name|args
init|=
operator|new
name|getVer_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNumVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|recv_getVer
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getVer failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getVer_result
name|result
init|=
operator|new
name|getVer_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getVer failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
expr_stmt|;
return|return
name|recv_getVerTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVerTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getVerTs_args
name|args
init|=
operator|new
name|getVerTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNumVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|recv_getVerTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getVerTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getVerTs_result
name|result
init|=
operator|new
name|getVerTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getVerTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRow
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
return|return
name|recv_getRow
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRow"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRow_args
name|args
init|=
operator|new
name|getRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRow
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getRow failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getRow_result
name|result
init|=
operator|new
name|getRow_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRow failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRowWithColumns
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|)
expr_stmt|;
return|return
name|recv_getRowWithColumns
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumns"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRowWithColumns_args
name|args
init|=
operator|new
name|getRowWithColumns_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowWithColumns
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getRowWithColumns failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getRowWithColumns_result
name|result
init|=
operator|new
name|getRowWithColumns_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowWithColumns failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|recv_getRowTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRowTs_args
name|args
init|=
operator|new
name|getRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getRowTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getRowTs_result
name|result
init|=
operator|new
name|getRowTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|recv_getRowWithColumnsTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRowWithColumnsTs_args
name|args
init|=
operator|new
name|getRowWithColumnsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowWithColumnsTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getRowWithColumnsTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getRowWithColumnsTs_result
name|result
init|=
operator|new
name|getRowWithColumnsTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowWithColumnsTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRows
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|)
expr_stmt|;
return|return
name|recv_getRows
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRows"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRows_args
name|args
init|=
operator|new
name|getRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRows
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getRows failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getRows_result
name|result
init|=
operator|new
name|getRows_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRows failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRowsWithColumns
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|)
expr_stmt|;
return|return
name|recv_getRowsWithColumns
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumns"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRowsWithColumns_args
name|args
init|=
operator|new
name|getRowsWithColumns_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowsWithColumns
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getRowsWithColumns failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getRowsWithColumns_result
name|result
init|=
operator|new
name|getRowsWithColumns_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowsWithColumns failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRowsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|recv_getRowsTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRowsTs_args
name|args
init|=
operator|new
name|getRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowsTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getRowsTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getRowsTs_result
name|result
init|=
operator|new
name|getRowsTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowsTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|recv_getRowsWithColumnsTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRowsWithColumnsTs_args
name|args
init|=
operator|new
name|getRowsWithColumnsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowsWithColumnsTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"getRowsWithColumnsTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|getRowsWithColumnsTs_result
name|result
init|=
operator|new
name|getRowsWithColumnsTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowsWithColumnsTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_mutateRow
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|)
expr_stmt|;
name|recv_mutateRow
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRow"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRow_args
name|args
init|=
operator|new
name|mutateRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMutations
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRow
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"mutateRow failed: out of sequence response"
argument_list|)
throw|;
block|}
name|mutateRow_result
name|result
init|=
operator|new
name|mutateRow_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_mutateRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|recv_mutateRowTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRowTs_args
name|args
init|=
operator|new
name|mutateRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMutations
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRowTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"mutateRowTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|mutateRowTs_result
name|result
init|=
operator|new
name|mutateRowTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_mutateRows
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|)
expr_stmt|;
name|recv_mutateRows
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRows"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRows_args
name|args
init|=
operator|new
name|mutateRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRowBatches
argument_list|(
name|rowBatches
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRows
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"mutateRows failed: out of sequence response"
argument_list|)
throw|;
block|}
name|mutateRows_result
name|result
init|=
operator|new
name|mutateRows_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_mutateRowsTs
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|recv_mutateRowsTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowsTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRowsTs_args
name|args
init|=
operator|new
name|mutateRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRowBatches
argument_list|(
name|rowBatches
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRowsTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"mutateRowsTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|mutateRowsTs_result
name|result
init|=
operator|new
name|mutateRowsTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_atomicIncrement
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|recv_atomicIncrement
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"atomicIncrement"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|atomicIncrement_args
name|args
init|=
operator|new
name|atomicIncrement_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|recv_atomicIncrement
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"atomicIncrement failed: out of sequence response"
argument_list|)
throw|;
block|}
name|atomicIncrement_result
name|result
init|=
operator|new
name|atomicIncrement_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"atomicIncrement failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_deleteAll
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|recv_deleteAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAll"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAll_args
name|args
init|=
operator|new
name|deleteAll_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAll
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"deleteAll failed: out of sequence response"
argument_list|)
throw|;
block|}
name|deleteAll_result
name|result
init|=
operator|new
name|deleteAll_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_deleteAllTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|recv_deleteAllTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllTs_args
name|args
init|=
operator|new
name|deleteAllTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAllTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"deleteAllTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|deleteAllTs_result
name|result
init|=
operator|new
name|deleteAllTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_deleteAllRow
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|recv_deleteAllRow
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRow"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllRow_args
name|args
init|=
operator|new
name|deleteAllRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAllRow
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"deleteAllRow failed: out of sequence response"
argument_list|)
throw|;
block|}
name|deleteAllRow_result
name|result
init|=
operator|new
name|deleteAllRow_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_deleteAllRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|recv_deleteAllRowTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllRowTs_args
name|args
init|=
operator|new
name|deleteAllRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAllRowTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"deleteAllRowTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|deleteAllRowTs_result
name|result
init|=
operator|new
name|deleteAllRowTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpen
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpen"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpen_args
name|args
init|=
operator|new
name|scannerOpen_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpen
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"scannerOpen failed: out of sequence response"
argument_list|)
throw|;
block|}
name|scannerOpen_result
name|result
init|=
operator|new
name|scannerOpen_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpen failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_scannerOpenWithStop
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenWithStop
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithStop_args
name|args
init|=
operator|new
name|scannerOpenWithStop_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenWithStop
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"scannerOpenWithStop failed: out of sequence response"
argument_list|)
throw|;
block|}
name|scannerOpenWithStop_result
name|result
init|=
operator|new
name|scannerOpenWithStop_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenWithStop failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_scannerOpenWithPrefix
argument_list|(
name|tableName
argument_list|,
name|startAndPrefix
argument_list|,
name|columns
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenWithPrefix
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithPrefix_args
name|args
init|=
operator|new
name|scannerOpenWithPrefix_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartAndPrefix
argument_list|(
name|startAndPrefix
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenWithPrefix
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"scannerOpenWithPrefix failed: out of sequence response"
argument_list|)
throw|;
block|}
name|scannerOpenWithPrefix_result
name|result
init|=
operator|new
name|scannerOpenWithPrefix_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenWithPrefix failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_scannerOpenTs
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenTs_args
name|args
init|=
operator|new
name|scannerOpenTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"scannerOpenTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|scannerOpenTs_result
name|result
init|=
operator|new
name|scannerOpenTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_scannerOpenWithStopTs
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenWithStopTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithStopTs_args
name|args
init|=
operator|new
name|scannerOpenWithStopTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenWithStopTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"scannerOpenWithStopTs failed: out of sequence response"
argument_list|)
throw|;
block|}
name|scannerOpenWithStopTs_result
name|result
init|=
operator|new
name|scannerOpenWithStopTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenWithStopTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_scannerGet
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|recv_scannerGet
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGet"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerGet_args
name|args
init|=
operator|new
name|scannerGet_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_scannerGet
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"scannerGet failed: out of sequence response"
argument_list|)
throw|;
block|}
name|scannerGet_result
name|result
init|=
operator|new
name|scannerGet_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerGet failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_scannerGetList
argument_list|(
name|id
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
return|return
name|recv_scannerGetList
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGetList"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerGetList_args
name|args
init|=
operator|new
name|scannerGetList_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNbRows
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_scannerGetList
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"scannerGetList failed: out of sequence response"
argument_list|)
throw|;
block|}
name|scannerGetList_result
name|result
init|=
operator|new
name|scannerGetList_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerGetList failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_scannerClose
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|recv_scannerClose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerClose"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerClose_args
name|args
init|=
operator|new
name|scannerClose_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_scannerClose
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"scannerClose failed: out of sequence response"
argument_list|)
throw|;
block|}
name|scannerClose_result
name|result
init|=
operator|new
name|scannerClose_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
block|}
specifier|public
specifier|static
class|class
name|AsyncClient
extends|extends
name|TAsyncClient
implements|implements
name|AsyncIface
block|{
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|TAsyncClientFactory
argument_list|<
name|AsyncClient
argument_list|>
block|{
specifier|private
name|TAsyncClientManager
name|clientManager
decl_stmt|;
specifier|private
name|TProtocolFactory
name|protocolFactory
decl_stmt|;
specifier|public
name|Factory
parameter_list|(
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|)
block|{
name|this
operator|.
name|clientManager
operator|=
name|clientManager
expr_stmt|;
name|this
operator|.
name|protocolFactory
operator|=
name|protocolFactory
expr_stmt|;
block|}
specifier|public
name|AsyncClient
name|getAsyncClient
parameter_list|(
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
return|return
operator|new
name|AsyncClient
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
return|;
block|}
block|}
specifier|public
name|AsyncClient
parameter_list|(
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
name|super
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|enableTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|enableTable_call
name|method_call
init|=
operator|new
name|enableTable_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|enableTable_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|enableTable_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|enableTable_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"enableTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|enableTable_args
name|args
init|=
operator|new
name|enableTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_enableTable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|disableTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|disableTable_call
name|method_call
init|=
operator|new
name|disableTable_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|disableTable_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|disableTable_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|disableTable_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"disableTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|disableTable_args
name|args
init|=
operator|new
name|disableTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_disableTable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|isTableEnabled_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|isTableEnabled_call
name|method_call
init|=
operator|new
name|isTableEnabled_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|isTableEnabled_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|isTableEnabled_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|isTableEnabled_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"isTableEnabled"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|isTableEnabled_args
name|args
init|=
operator|new
name|isTableEnabled_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_isTableEnabled
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|compact_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|compact_call
name|method_call
init|=
operator|new
name|compact_call
argument_list|(
name|tableNameOrRegionName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|compact_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableNameOrRegionName
decl_stmt|;
specifier|public
name|compact_call
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|compact_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"compact"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compact_args
name|args
init|=
operator|new
name|compact_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_compact
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|majorCompact_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|majorCompact_call
name|method_call
init|=
operator|new
name|majorCompact_call
argument_list|(
name|tableNameOrRegionName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|majorCompact_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableNameOrRegionName
decl_stmt|;
specifier|public
name|majorCompact_call
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|majorCompact_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"majorCompact"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|majorCompact_args
name|args
init|=
operator|new
name|majorCompact_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_majorCompact
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|getTableNames
parameter_list|(
name|AsyncMethodCallback
argument_list|<
name|getTableNames_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getTableNames_call
name|method_call
init|=
operator|new
name|getTableNames_call
argument_list|(
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getTableNames_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|public
name|getTableNames_call
parameter_list|(
name|AsyncMethodCallback
argument_list|<
name|getTableNames_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableNames"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getTableNames_args
name|args
init|=
operator|new
name|getTableNames_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getTableNames
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getColumnDescriptors_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getColumnDescriptors_call
name|method_call
init|=
operator|new
name|getColumnDescriptors_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getColumnDescriptors_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|getColumnDescriptors_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getColumnDescriptors_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getColumnDescriptors_args
name|args
init|=
operator|new
name|getColumnDescriptors_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getColumnDescriptors
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getTableRegions_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getTableRegions_call
name|method_call
init|=
operator|new
name|getTableRegions_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getTableRegions_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|getTableRegions_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getTableRegions_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableRegions"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getTableRegions_args
name|args
init|=
operator|new
name|getTableRegions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getTableRegions
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|createTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|createTable_call
name|method_call
init|=
operator|new
name|createTable_call
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|createTable_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
decl_stmt|;
specifier|public
name|createTable_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|createTable_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
name|columnFamilies
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"createTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|createTable_args
name|args
init|=
operator|new
name|createTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumnFamilies
argument_list|(
name|columnFamilies
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_createTable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteTable_call
name|method_call
init|=
operator|new
name|deleteTable_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteTable_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|deleteTable_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteTable_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteTable_args
name|args
init|=
operator|new
name|deleteTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteTable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_call
name|method_call
init|=
operator|new
name|get_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|public
name|get_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_args
name|args
init|=
operator|new
name|get_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getVer_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getVer_call
name|method_call
init|=
operator|new
name|getVer_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getVer_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|int
name|numVersions
decl_stmt|;
specifier|public
name|getVer_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getVer_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVer"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getVer_args
name|args
init|=
operator|new
name|getVer_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNumVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getVer
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getVerTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getVerTs_call
name|method_call
init|=
operator|new
name|getVerTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getVerTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|int
name|numVersions
decl_stmt|;
specifier|public
name|getVerTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getVerTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVerTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getVerTs_args
name|args
init|=
operator|new
name|getVerTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNumVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getVerTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRow_call
name|method_call
init|=
operator|new
name|getRow_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRow_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|public
name|getRow_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRow_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRow"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRow_args
name|args
init|=
operator|new
name|getRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRow
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowWithColumns_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowWithColumns_call
name|method_call
init|=
operator|new
name|getRowWithColumns_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumns_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|public
name|getRowWithColumns_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowWithColumns_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumns"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowWithColumns_args
name|args
init|=
operator|new
name|getRowWithColumns_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowWithColumns
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowTs_call
name|method_call
init|=
operator|new
name|getRowTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|getRowTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowTs_args
name|args
init|=
operator|new
name|getRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowWithColumnsTs_call
name|method_call
init|=
operator|new
name|getRowWithColumnsTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumnsTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|getRowWithColumnsTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowWithColumnsTs_args
name|args
init|=
operator|new
name|getRowWithColumnsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowWithColumnsTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRows_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRows_call
name|method_call
init|=
operator|new
name|getRows_call
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRows_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
specifier|public
name|getRows_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRows_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRows"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRows_args
name|args
init|=
operator|new
name|getRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRows
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowsWithColumns_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowsWithColumns_call
name|method_call
init|=
operator|new
name|getRowsWithColumns_call
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumns_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|public
name|getRowsWithColumns_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowsWithColumns_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumns"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowsWithColumns_args
name|args
init|=
operator|new
name|getRowsWithColumns_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowsWithColumns
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowsTs_call
name|method_call
init|=
operator|new
name|getRowsTs_call
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowsTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|getRowsTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowsTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowsTs_args
name|args
init|=
operator|new
name|getRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowsTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowsWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowsWithColumnsTs_call
name|method_call
init|=
operator|new
name|getRowsWithColumnsTs_call
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumnsTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|getRowsWithColumnsTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|getRowsWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowsWithColumnsTs_args
name|args
init|=
operator|new
name|getRowsWithColumnsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowsWithColumnsTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|mutateRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|mutateRow_call
name|method_call
init|=
operator|new
name|mutateRow_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|mutateRow_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
specifier|public
name|mutateRow_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|mutateRow_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRow"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRow_args
name|args
init|=
operator|new
name|mutateRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMutations
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_mutateRow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|mutateRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|mutateRowTs_call
name|method_call
init|=
operator|new
name|mutateRowTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|mutateRowTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|mutateRowTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|mutateRowTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRowTs_args
name|args
init|=
operator|new
name|mutateRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMutations
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_mutateRowTs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|mutateRows_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|mutateRows_call
name|method_call
init|=
operator|new
name|mutateRows_call
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|mutateRows_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
specifier|public
name|mutateRows_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|mutateRows_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRows"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRows_args
name|args
init|=
operator|new
name|mutateRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRowBatches
argument_list|(
name|rowBatches
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_mutateRows
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|mutateRowsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|mutateRowsTs_call
name|method_call
init|=
operator|new
name|mutateRowsTs_call
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|mutateRowsTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|mutateRowsTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|mutateRowsTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowsTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRowsTs_args
name|args
init|=
operator|new
name|mutateRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRowBatches
argument_list|(
name|rowBatches
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_mutateRowsTs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|atomicIncrement_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|atomicIncrement_call
name|method_call
init|=
operator|new
name|atomicIncrement_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|value
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|atomicIncrement_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|long
name|value
decl_stmt|;
specifier|public
name|atomicIncrement_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|atomicIncrement_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"atomicIncrement"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|atomicIncrement_args
name|args
init|=
operator|new
name|atomicIncrement_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_atomicIncrement
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteAll_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteAll_call
name|method_call
init|=
operator|new
name|deleteAll_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteAll_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|public
name|deleteAll_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteAll_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAll"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAll_args
name|args
init|=
operator|new
name|deleteAll_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteAllTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteAllTs_call
name|method_call
init|=
operator|new
name|deleteAllTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteAllTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|deleteAllTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteAllTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllTs_args
name|args
init|=
operator|new
name|deleteAllTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteAllTs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteAllRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteAllRow_call
name|method_call
init|=
operator|new
name|deleteAllRow_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteAllRow_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|public
name|deleteAllRow_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteAllRow_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRow"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllRow_args
name|args
init|=
operator|new
name|deleteAllRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteAllRow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteAllRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteAllRowTs_call
name|method_call
init|=
operator|new
name|deleteAllRowTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteAllRowTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|deleteAllRowTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|deleteAllRowTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllRowTs_args
name|args
init|=
operator|new
name|deleteAllRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteAllRowTs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpen_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpen_call
name|method_call
init|=
operator|new
name|scannerOpen_call
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpen_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startRow
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|public
name|scannerOpen_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpen_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpen"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpen_args
name|args
init|=
operator|new
name|scannerOpen_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpen
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithStop_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpenWithStop_call
name|method_call
init|=
operator|new
name|scannerOpenWithStop_call
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStop_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startRow
decl_stmt|;
specifier|private
name|ByteBuffer
name|stopRow
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|public
name|scannerOpenWithStop_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithStop_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithStop_args
name|args
init|=
operator|new
name|scannerOpenWithStop_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpenWithStop
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithPrefix_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpenWithPrefix_call
name|method_call
init|=
operator|new
name|scannerOpenWithPrefix_call
argument_list|(
name|tableName
argument_list|,
name|startAndPrefix
argument_list|,
name|columns
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithPrefix_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startAndPrefix
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|public
name|scannerOpenWithPrefix_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithPrefix_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startAndPrefix
operator|=
name|startAndPrefix
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithPrefix_args
name|args
init|=
operator|new
name|scannerOpenWithPrefix_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartAndPrefix
argument_list|(
name|startAndPrefix
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpenWithPrefix
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpenTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpenTs_call
name|method_call
init|=
operator|new
name|scannerOpenTs_call
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpenTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startRow
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|scannerOpenTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpenTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenTs_args
name|args
init|=
operator|new
name|scannerOpenTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpenTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithStopTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpenWithStopTs_call
name|method_call
init|=
operator|new
name|scannerOpenWithStopTs_call
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStopTs_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startRow
decl_stmt|;
specifier|private
name|ByteBuffer
name|stopRow
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|public
name|scannerOpenWithStopTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithStopTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithStopTs_args
name|args
init|=
operator|new
name|scannerOpenWithStopTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpenWithStopTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerGet_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerGet_call
name|method_call
init|=
operator|new
name|scannerGet_call
argument_list|(
name|id
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerGet_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|int
name|id
decl_stmt|;
specifier|public
name|scannerGet_call
parameter_list|(
name|int
name|id
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerGet_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGet"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerGet_args
name|args
init|=
operator|new
name|scannerGet_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerGet
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerGetList_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerGetList_call
name|method_call
init|=
operator|new
name|scannerGetList_call
argument_list|(
name|id
argument_list|,
name|nbRows
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerGetList_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|int
name|id
decl_stmt|;
specifier|private
name|int
name|nbRows
decl_stmt|;
specifier|public
name|scannerGetList_call
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerGetList_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|nbRows
operator|=
name|nbRows
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGetList"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerGetList_args
name|args
init|=
operator|new
name|scannerGetList_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNbRows
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerGetList
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerClose_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerClose_call
name|method_call
init|=
operator|new
name|scannerClose_call
argument_list|(
name|id
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerClose_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|int
name|id
decl_stmt|;
specifier|public
name|scannerClose_call
parameter_list|(
name|int
name|id
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|scannerClose_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerClose"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerClose_args
name|args
init|=
operator|new
name|scannerClose_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerClose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Processor
implements|implements
name|TProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Processor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|Processor
parameter_list|(
name|Iface
name|iface
parameter_list|)
block|{
name|iface_
operator|=
name|iface
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"enableTable"
argument_list|,
operator|new
name|enableTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"disableTable"
argument_list|,
operator|new
name|disableTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"isTableEnabled"
argument_list|,
operator|new
name|isTableEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"compact"
argument_list|,
operator|new
name|compact
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"majorCompact"
argument_list|,
operator|new
name|majorCompact
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getTableNames"
argument_list|,
operator|new
name|getTableNames
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
operator|new
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getTableRegions"
argument_list|,
operator|new
name|getTableRegions
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"createTable"
argument_list|,
operator|new
name|createTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteTable"
argument_list|,
operator|new
name|deleteTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get"
argument_list|,
operator|new
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getVer"
argument_list|,
operator|new
name|getVer
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getVerTs"
argument_list|,
operator|new
name|getVerTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRow"
argument_list|,
operator|new
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRowWithColumns"
argument_list|,
operator|new
name|getRowWithColumns
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRowTs"
argument_list|,
operator|new
name|getRowTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|,
operator|new
name|getRowWithColumnsTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRows"
argument_list|,
operator|new
name|getRows
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRowsWithColumns"
argument_list|,
operator|new
name|getRowsWithColumns
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRowsTs"
argument_list|,
operator|new
name|getRowsTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|,
operator|new
name|getRowsWithColumnsTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"mutateRow"
argument_list|,
operator|new
name|mutateRow
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"mutateRowTs"
argument_list|,
operator|new
name|mutateRowTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"mutateRows"
argument_list|,
operator|new
name|mutateRows
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"mutateRowsTs"
argument_list|,
operator|new
name|mutateRowsTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"atomicIncrement"
argument_list|,
operator|new
name|atomicIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteAll"
argument_list|,
operator|new
name|deleteAll
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteAllTs"
argument_list|,
operator|new
name|deleteAllTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteAllRow"
argument_list|,
operator|new
name|deleteAllRow
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
operator|new
name|deleteAllRowTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerOpen"
argument_list|,
operator|new
name|scannerOpen
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
operator|new
name|scannerOpenWithStop
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|,
operator|new
name|scannerOpenWithPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerOpenTs"
argument_list|,
operator|new
name|scannerOpenTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
operator|new
name|scannerOpenWithStopTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerGet"
argument_list|,
operator|new
name|scannerGet
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerGetList"
argument_list|,
operator|new
name|scannerGetList
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerClose"
argument_list|,
operator|new
name|scannerClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
interface|interface
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
function_decl|;
block|}
specifier|private
name|Iface
name|iface_
decl_stmt|;
specifier|protected
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProcessFunction
argument_list|>
name|processMap_
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProcessFunction
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|process
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
name|ProcessFunction
name|fn
init|=
name|processMap_
operator|.
name|get
argument_list|(
name|msg
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|==
literal|null
condition|)
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|UNKNOWN_METHOD
argument_list|,
literal|"Invalid method name: '"
operator|+
name|msg
operator|.
name|name
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
name|msg
operator|.
name|name
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|msg
operator|.
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|fn
operator|.
name|process
argument_list|(
name|msg
operator|.
name|seqid
argument_list|,
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
class|class
name|enableTable
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|enableTable_args
name|args
init|=
operator|new
name|enableTable_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"enableTable"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|enableTable_result
name|result
init|=
operator|new
name|enableTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|enableTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing enableTable"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing enableTable"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"enableTable"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"enableTable"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|disableTable
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|disableTable_args
name|args
init|=
operator|new
name|disableTable_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"disableTable"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|disableTable_result
name|result
init|=
operator|new
name|disableTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|disableTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing disableTable"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing disableTable"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"disableTable"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"disableTable"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|isTableEnabled
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|isTableEnabled_args
name|args
init|=
operator|new
name|isTableEnabled_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"isTableEnabled"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|isTableEnabled_result
name|result
init|=
operator|new
name|isTableEnabled_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|isTableEnabled
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing isTableEnabled"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing isTableEnabled"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"isTableEnabled"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"isTableEnabled"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|compact
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|compact_args
name|args
init|=
operator|new
name|compact_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"compact"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|compact_result
name|result
init|=
operator|new
name|compact_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|compact
argument_list|(
name|args
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing compact"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing compact"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"compact"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"compact"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|majorCompact
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|majorCompact_args
name|args
init|=
operator|new
name|majorCompact_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"majorCompact"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|majorCompact_result
name|result
init|=
operator|new
name|majorCompact_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|majorCompact
argument_list|(
name|args
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing majorCompact"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing majorCompact"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"majorCompact"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"majorCompact"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getTableNames
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getTableNames_args
name|args
init|=
operator|new
name|getTableNames_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableNames"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getTableNames_result
name|result
init|=
operator|new
name|getTableNames_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getTableNames
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getTableNames"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getTableNames"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableNames"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableNames"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getColumnDescriptors
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getColumnDescriptors_args
name|args
init|=
operator|new
name|getColumnDescriptors_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getColumnDescriptors_result
name|result
init|=
operator|new
name|getColumnDescriptors_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getColumnDescriptors
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getColumnDescriptors"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getColumnDescriptors"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getTableRegions
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getTableRegions_args
name|args
init|=
operator|new
name|getTableRegions_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableRegions"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getTableRegions_result
name|result
init|=
operator|new
name|getTableRegions_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getTableRegions
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getTableRegions"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getTableRegions"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableRegions"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableRegions"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|createTable
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|createTable_args
name|args
init|=
operator|new
name|createTable_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"createTable"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|createTable_result
name|result
init|=
operator|new
name|createTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|createTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|columnFamilies
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExists
name|exist
parameter_list|)
block|{
name|result
operator|.
name|exist
operator|=
name|exist
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing createTable"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing createTable"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"createTable"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"createTable"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteTable
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteTable_args
name|args
init|=
operator|new
name|deleteTable_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteTable"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteTable_result
name|result
init|=
operator|new
name|deleteTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing deleteTable"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing deleteTable"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteTable"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteTable"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_args
name|args
init|=
operator|new
name|get_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_result
name|result
init|=
operator|new
name|get_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getVer
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getVer_args
name|args
init|=
operator|new
name|getVer_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVer"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getVer_result
name|result
init|=
operator|new
name|getVer_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getVer
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|numVersions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getVer"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getVer"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVer"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVer"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getVerTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getVerTs_args
name|args
init|=
operator|new
name|getVerTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVerTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getVerTs_result
name|result
init|=
operator|new
name|getVerTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getVerTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|numVersions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getVerTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getVerTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVerTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVerTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRow
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRow_args
name|args
init|=
operator|new
name|getRow_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRow"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRow_result
name|result
init|=
operator|new
name|getRow_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRow
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getRow"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getRow"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRow"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRow"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRowWithColumns
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRowWithColumns_args
name|args
init|=
operator|new
name|getRowWithColumns_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumns"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRowWithColumns_result
name|result
init|=
operator|new
name|getRowWithColumns_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRowWithColumns
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getRowWithColumns"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getRowWithColumns"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumns"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumns"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRowTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRowTs_args
name|args
init|=
operator|new
name|getRowTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRowTs_result
name|result
init|=
operator|new
name|getRowTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRowTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getRowTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getRowTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRowWithColumnsTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRowWithColumnsTs_args
name|args
init|=
operator|new
name|getRowWithColumnsTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRowWithColumnsTs_result
name|result
init|=
operator|new
name|getRowWithColumnsTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRowWithColumnsTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getRowWithColumnsTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getRowWithColumnsTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRows
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRows_args
name|args
init|=
operator|new
name|getRows_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRows"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRows_result
name|result
init|=
operator|new
name|getRows_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRows
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rows
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getRows"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getRows"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRows"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRows"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRowsWithColumns
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRowsWithColumns_args
name|args
init|=
operator|new
name|getRowsWithColumns_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumns"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRowsWithColumns_result
name|result
init|=
operator|new
name|getRowsWithColumns_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRowsWithColumns
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rows
argument_list|,
name|args
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getRowsWithColumns"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getRowsWithColumns"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumns"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumns"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRowsTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRowsTs_args
name|args
init|=
operator|new
name|getRowsTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRowsTs_result
name|result
init|=
operator|new
name|getRowsTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRowsTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rows
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getRowsTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getRowsTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRowsWithColumnsTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRowsWithColumnsTs_args
name|args
init|=
operator|new
name|getRowsWithColumnsTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRowsWithColumnsTs_result
name|result
init|=
operator|new
name|getRowsWithColumnsTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRowsWithColumnsTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rows
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing getRowsWithColumnsTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing getRowsWithColumnsTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|mutateRow
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|mutateRow_args
name|args
init|=
operator|new
name|mutateRow_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRow"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|mutateRow_result
name|result
init|=
operator|new
name|mutateRow_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|mutateRow
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|mutations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing mutateRow"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing mutateRow"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRow"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRow"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|mutateRowTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|mutateRowTs_args
name|args
init|=
operator|new
name|mutateRowTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|mutateRowTs_result
name|result
init|=
operator|new
name|mutateRowTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|mutateRowTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|mutations
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing mutateRowTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing mutateRowTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|mutateRows
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|mutateRows_args
name|args
init|=
operator|new
name|mutateRows_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRows"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|mutateRows_result
name|result
init|=
operator|new
name|mutateRows_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|mutateRows
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing mutateRows"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing mutateRows"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRows"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRows"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|mutateRowsTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|mutateRowsTs_args
name|args
init|=
operator|new
name|mutateRowsTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowsTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|mutateRowsTs_result
name|result
init|=
operator|new
name|mutateRowsTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|mutateRowsTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rowBatches
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing mutateRowsTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing mutateRowsTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowsTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowsTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|atomicIncrement
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|atomicIncrement_args
name|args
init|=
operator|new
name|atomicIncrement_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"atomicIncrement"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|atomicIncrement_result
name|result
init|=
operator|new
name|atomicIncrement_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|atomicIncrement
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|value
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing atomicIncrement"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing atomicIncrement"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"atomicIncrement"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"atomicIncrement"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteAll
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteAll_args
name|args
init|=
operator|new
name|deleteAll_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAll"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteAll_result
name|result
init|=
operator|new
name|deleteAll_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteAll
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing deleteAll"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing deleteAll"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAll"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAll"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteAllTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteAllTs_args
name|args
init|=
operator|new
name|deleteAllTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteAllTs_result
name|result
init|=
operator|new
name|deleteAllTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteAllTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing deleteAllTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing deleteAllTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteAllRow
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteAllRow_args
name|args
init|=
operator|new
name|deleteAllRow_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRow"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteAllRow_result
name|result
init|=
operator|new
name|deleteAllRow_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteAllRow
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing deleteAllRow"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing deleteAllRow"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRow"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRow"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteAllRowTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteAllRowTs_args
name|args
init|=
operator|new
name|deleteAllRowTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteAllRowTs_result
name|result
init|=
operator|new
name|deleteAllRowTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteAllRowTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing deleteAllRowTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing deleteAllRowTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerOpen
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerOpen_args
name|args
init|=
operator|new
name|scannerOpen_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpen"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerOpen_result
name|result
init|=
operator|new
name|scannerOpen_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerOpen
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|columns
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing scannerOpen"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing scannerOpen"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpen"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpen"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerOpenWithStop
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerOpenWithStop_args
name|args
init|=
operator|new
name|scannerOpenWithStop_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerOpenWithStop_result
name|result
init|=
operator|new
name|scannerOpenWithStop_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerOpenWithStop
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|stopRow
argument_list|,
name|args
operator|.
name|columns
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing scannerOpenWithStop"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing scannerOpenWithStop"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerOpenWithPrefix
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerOpenWithPrefix_args
name|args
init|=
operator|new
name|scannerOpenWithPrefix_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerOpenWithPrefix_result
name|result
init|=
operator|new
name|scannerOpenWithPrefix_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerOpenWithPrefix
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startAndPrefix
argument_list|,
name|args
operator|.
name|columns
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing scannerOpenWithPrefix"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing scannerOpenWithPrefix"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerOpenTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerOpenTs_args
name|args
init|=
operator|new
name|scannerOpenTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerOpenTs_result
name|result
init|=
operator|new
name|scannerOpenTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerOpenTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing scannerOpenTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing scannerOpenTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerOpenWithStopTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerOpenWithStopTs_args
name|args
init|=
operator|new
name|scannerOpenWithStopTs_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerOpenWithStopTs_result
name|result
init|=
operator|new
name|scannerOpenWithStopTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerOpenWithStopTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|stopRow
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing scannerOpenWithStopTs"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing scannerOpenWithStopTs"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerGet
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerGet_args
name|args
init|=
operator|new
name|scannerGet_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGet"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerGet_result
name|result
init|=
operator|new
name|scannerGet_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerGet
argument_list|(
name|args
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing scannerGet"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing scannerGet"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGet"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGet"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerGetList
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerGetList_args
name|args
init|=
operator|new
name|scannerGetList_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGetList"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerGetList_result
name|result
init|=
operator|new
name|scannerGetList_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerGetList
argument_list|(
name|args
operator|.
name|id
argument_list|,
name|args
operator|.
name|nbRows
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing scannerGetList"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing scannerGetList"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGetList"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGetList"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerClose
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerClose_args
name|args
init|=
operator|new
name|scannerClose_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerClose"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerClose_result
name|result
init|=
operator|new
name|scannerClose_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|scannerClose
argument_list|(
name|args
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing scannerClose"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing scannerClose"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerClose"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerClose"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|enableTable_args
implements|implements
name|TBase
argument_list|<
name|enableTable_args
argument_list|,
name|enableTable_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"enableTable_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
comment|/**      * name of the table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of the table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|enableTable_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|enableTable_args
parameter_list|()
block|{     }
specifier|public
name|enableTable_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|enableTable_args
parameter_list|(
name|enableTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|enableTable_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|enableTable_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table      */
specifier|public
name|enableTable_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|enableTable_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|enableTable_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|enableTable_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|enableTable_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|enableTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|enableTable_args
name|typedOther
init|=
operator|(
name|enableTable_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"enableTable_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|enableTable_result
implements|implements
name|TBase
argument_list|<
name|enableTable_result
argument_list|,
name|enableTable_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"enableTable_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|enableTable_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|enableTable_result
parameter_list|()
block|{     }
specifier|public
name|enableTable_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|enableTable_result
parameter_list|(
name|enableTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|enableTable_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|enableTable_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|enableTable_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|enableTable_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|enableTable_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|enableTable_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|enableTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|enableTable_result
name|typedOther
init|=
operator|(
name|enableTable_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"enableTable_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|disableTable_args
implements|implements
name|TBase
argument_list|<
name|disableTable_args
argument_list|,
name|disableTable_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"disableTable_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
comment|/**      * name of the table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of the table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|disableTable_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|disableTable_args
parameter_list|()
block|{     }
specifier|public
name|disableTable_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|disableTable_args
parameter_list|(
name|disableTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|disableTable_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|disableTable_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table      */
specifier|public
name|disableTable_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|disableTable_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|disableTable_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|disableTable_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|disableTable_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|disableTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|disableTable_args
name|typedOther
init|=
operator|(
name|disableTable_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"disableTable_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|disableTable_result
implements|implements
name|TBase
argument_list|<
name|disableTable_result
argument_list|,
name|disableTable_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"disableTable_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|disableTable_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|disableTable_result
parameter_list|()
block|{     }
specifier|public
name|disableTable_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|disableTable_result
parameter_list|(
name|disableTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|disableTable_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|disableTable_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|disableTable_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|disableTable_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|disableTable_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|disableTable_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|disableTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|disableTable_result
name|typedOther
init|=
operator|(
name|disableTable_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"disableTable_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|isTableEnabled_args
implements|implements
name|TBase
argument_list|<
name|isTableEnabled_args
argument_list|,
name|isTableEnabled_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"isTableEnabled_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
comment|/**      * name of the table to check      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of the table to check        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|isTableEnabled_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|isTableEnabled_args
parameter_list|()
block|{     }
specifier|public
name|isTableEnabled_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|isTableEnabled_args
parameter_list|(
name|isTableEnabled_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|isTableEnabled_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|isTableEnabled_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of the table to check      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table to check      */
specifier|public
name|isTableEnabled_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|isTableEnabled_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|isTableEnabled_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|isTableEnabled_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|isTableEnabled_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|isTableEnabled_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|isTableEnabled_args
name|typedOther
init|=
operator|(
name|isTableEnabled_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"isTableEnabled_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|isTableEnabled_result
implements|implements
name|TBase
argument_list|<
name|isTableEnabled_result
argument_list|,
name|isTableEnabled_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"isTableEnabled_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|isTableEnabled_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|isTableEnabled_result
parameter_list|()
block|{     }
specifier|public
name|isTableEnabled_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|isTableEnabled_result
parameter_list|(
name|isTableEnabled_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|isTableEnabled_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|isTableEnabled_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|isTableEnabled_result
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|isTableEnabled_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|isTableEnabled_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|isTableEnabled_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|isTableEnabled_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|isTableEnabled_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|isTableEnabled_result
name|typedOther
init|=
operator|(
name|isTableEnabled_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"isTableEnabled_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|compact_args
implements|implements
name|TBase
argument_list|<
name|compact_args
argument_list|,
name|compact_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"compact_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_OR_REGION_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableNameOrRegionName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|ByteBuffer
name|tableNameOrRegionName
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|TABLE_NAME_OR_REGION_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableNameOrRegionName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME_OR_REGION_NAME
return|return
name|TABLE_NAME_OR_REGION_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME_OR_REGION_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableNameOrRegionName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|compact_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|compact_args
parameter_list|()
block|{     }
specifier|public
name|compact_args
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|compact_args
parameter_list|(
name|compact_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|other
operator|.
name|tableNameOrRegionName
expr_stmt|;
block|}
block|}
specifier|public
name|compact_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|compact_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getTableNameOrRegionName
parameter_list|()
block|{
name|setTableNameOrRegionName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableNameOrRegionName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableNameOrRegionName
parameter_list|()
block|{
return|return
name|tableNameOrRegionName
return|;
block|}
specifier|public
name|compact_args
name|setTableNameOrRegionName
parameter_list|(
name|byte
index|[]
name|tableNameOrRegionName
parameter_list|)
block|{
name|setTableNameOrRegionName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|compact_args
name|setTableNameOrRegionName
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableNameOrRegionName
parameter_list|()
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableNameOrRegionName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableNameOrRegionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableNameOrRegionName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameOrRegionNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableNameOrRegionName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableNameOrRegionName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
return|return
name|getTableNameOrRegionName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
return|return
name|isSetTableNameOrRegionName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|compact_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|compact_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|compact_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableNameOrRegionName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableNameOrRegionName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableNameOrRegionName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableNameOrRegionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableNameOrRegionName
operator|||
name|that_present_tableNameOrRegionName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableNameOrRegionName
operator|&&
name|that_present_tableNameOrRegionName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableNameOrRegionName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableNameOrRegionName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|compact_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|compact_args
name|typedOther
init|=
operator|(
name|compact_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableNameOrRegionName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableNameOrRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|,
name|typedOther
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME_OR_REGION_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableNameOrRegionName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_OR_REGION_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"compact_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableNameOrRegionName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableNameOrRegionName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|compact_result
implements|implements
name|TBase
argument_list|<
name|compact_result
argument_list|,
name|compact_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"compact_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|compact_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|compact_result
parameter_list|()
block|{     }
specifier|public
name|compact_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|compact_result
parameter_list|(
name|compact_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|compact_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|compact_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|compact_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|compact_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|compact_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|compact_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|compact_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|compact_result
name|typedOther
init|=
operator|(
name|compact_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"compact_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|majorCompact_args
implements|implements
name|TBase
argument_list|<
name|majorCompact_args
argument_list|,
name|majorCompact_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"majorCompact_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_OR_REGION_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableNameOrRegionName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|ByteBuffer
name|tableNameOrRegionName
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|TABLE_NAME_OR_REGION_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableNameOrRegionName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME_OR_REGION_NAME
return|return
name|TABLE_NAME_OR_REGION_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME_OR_REGION_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableNameOrRegionName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|majorCompact_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|majorCompact_args
parameter_list|()
block|{     }
specifier|public
name|majorCompact_args
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|majorCompact_args
parameter_list|(
name|majorCompact_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|other
operator|.
name|tableNameOrRegionName
expr_stmt|;
block|}
block|}
specifier|public
name|majorCompact_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|majorCompact_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getTableNameOrRegionName
parameter_list|()
block|{
name|setTableNameOrRegionName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableNameOrRegionName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableNameOrRegionName
parameter_list|()
block|{
return|return
name|tableNameOrRegionName
return|;
block|}
specifier|public
name|majorCompact_args
name|setTableNameOrRegionName
parameter_list|(
name|byte
index|[]
name|tableNameOrRegionName
parameter_list|)
block|{
name|setTableNameOrRegionName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|majorCompact_args
name|setTableNameOrRegionName
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableNameOrRegionName
parameter_list|()
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableNameOrRegionName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableNameOrRegionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableNameOrRegionName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameOrRegionNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableNameOrRegionName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableNameOrRegionName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
return|return
name|getTableNameOrRegionName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
return|return
name|isSetTableNameOrRegionName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|majorCompact_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|majorCompact_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|majorCompact_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableNameOrRegionName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableNameOrRegionName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableNameOrRegionName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableNameOrRegionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableNameOrRegionName
operator|||
name|that_present_tableNameOrRegionName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableNameOrRegionName
operator|&&
name|that_present_tableNameOrRegionName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableNameOrRegionName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableNameOrRegionName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|majorCompact_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|majorCompact_args
name|typedOther
init|=
operator|(
name|majorCompact_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableNameOrRegionName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableNameOrRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|,
name|typedOther
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME_OR_REGION_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableNameOrRegionName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_OR_REGION_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"majorCompact_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableNameOrRegionName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableNameOrRegionName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|majorCompact_result
implements|implements
name|TBase
argument_list|<
name|majorCompact_result
argument_list|,
name|majorCompact_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"majorCompact_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|majorCompact_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|majorCompact_result
parameter_list|()
block|{     }
specifier|public
name|majorCompact_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|majorCompact_result
parameter_list|(
name|majorCompact_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|majorCompact_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|majorCompact_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|majorCompact_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|majorCompact_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|majorCompact_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|majorCompact_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|majorCompact_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|majorCompact_result
name|typedOther
init|=
operator|(
name|majorCompact_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"majorCompact_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableNames_args
implements|implements
name|TBase
argument_list|<
name|getTableNames_args
argument_list|,
name|getTableNames_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getTableNames_args"
argument_list|)
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{ ;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getTableNames_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getTableNames_args
parameter_list|()
block|{     }
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getTableNames_args
parameter_list|(
name|getTableNames_args
name|other
parameter_list|)
block|{     }
specifier|public
name|getTableNames_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getTableNames_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{     }
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getTableNames_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getTableNames_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getTableNames_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getTableNames_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getTableNames_args
name|typedOther
init|=
operator|(
name|getTableNames_args
operator|)
name|other
decl_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableNames_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableNames_result
implements|implements
name|TBase
argument_list|<
name|getTableNames_result
argument_list|,
name|getTableNames_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getTableNames_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getTableNames_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getTableNames_result
parameter_list|()
block|{     }
specifier|public
name|getTableNames_result
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getTableNames_result
parameter_list|(
name|getTableNames_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getTableNames_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getTableNames_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getTableNames_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getTableNames_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getTableNames_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getTableNames_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getTableNames_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getTableNames_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getTableNames_result
name|typedOther
init|=
operator|(
name|getTableNames_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list9
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list9
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i10
init|=
literal|0
init|;
name|_i10
operator|<
name|_list9
operator|.
name|size
condition|;
operator|++
name|_i10
control|)
block|{
name|ByteBuffer
name|_elem11
decl_stmt|;
name|_elem11
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem11
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter12
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter12
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableNames_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getColumnDescriptors_args
implements|implements
name|TBase
argument_list|<
name|getColumnDescriptors_args
argument_list|,
name|getColumnDescriptors_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getColumnDescriptors_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
comment|/**      * table name      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * table name        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getColumnDescriptors_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getColumnDescriptors_args
parameter_list|()
block|{     }
specifier|public
name|getColumnDescriptors_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getColumnDescriptors_args
parameter_list|(
name|getColumnDescriptors_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|getColumnDescriptors_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getColumnDescriptors_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * table name      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * table name      */
specifier|public
name|getColumnDescriptors_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getColumnDescriptors_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getColumnDescriptors_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getColumnDescriptors_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getColumnDescriptors_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getColumnDescriptors_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getColumnDescriptors_args
name|typedOther
init|=
operator|(
name|getColumnDescriptors_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getColumnDescriptors_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getColumnDescriptors_result
implements|implements
name|TBase
argument_list|<
name|getColumnDescriptors_result
argument_list|,
name|getColumnDescriptors_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getColumnDescriptors_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|ColumnDescriptor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getColumnDescriptors_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getColumnDescriptors_result
parameter_list|()
block|{     }
specifier|public
name|getColumnDescriptors_result
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getColumnDescriptors_result
parameter_list|(
name|getColumnDescriptors_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|__this__success
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|other_element
range|:
name|other
operator|.
name|success
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ColumnDescriptor
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__success_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ColumnDescriptor
name|__this__success_copy_value
init|=
operator|new
name|ColumnDescriptor
argument_list|(
name|other_element_value
argument_list|)
decl_stmt|;
name|__this__success
operator|.
name|put
argument_list|(
name|__this__success_copy_key
argument_list|,
name|__this__success_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getColumnDescriptors_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getColumnDescriptors_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToSuccess
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ColumnDescriptor
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getColumnDescriptors_result
name|setSuccess
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getColumnDescriptors_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getColumnDescriptors_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getColumnDescriptors_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getColumnDescriptors_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getColumnDescriptors_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getColumnDescriptors_result
name|typedOther
init|=
operator|(
name|getColumnDescriptors_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map13
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|(
literal|2
operator|*
name|_map13
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i14
init|=
literal|0
init|;
name|_i14
operator|<
name|_map13
operator|.
name|size
condition|;
operator|++
name|_i14
control|)
block|{
name|ByteBuffer
name|_key15
decl_stmt|;
name|ColumnDescriptor
name|_val16
decl_stmt|;
name|_key15
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val16
operator|=
operator|new
name|ColumnDescriptor
argument_list|()
expr_stmt|;
name|_val16
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key15
argument_list|,
name|_val16
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|_iter17
range|:
name|this
operator|.
name|success
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter17
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|_iter17
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getColumnDescriptors_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableRegions_args
implements|implements
name|TBase
argument_list|<
name|getTableRegions_args
argument_list|,
name|getTableRegions_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getTableRegions_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
comment|/**      * table name      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * table name        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getTableRegions_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getTableRegions_args
parameter_list|()
block|{     }
specifier|public
name|getTableRegions_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getTableRegions_args
parameter_list|(
name|getTableRegions_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|getTableRegions_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getTableRegions_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * table name      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * table name      */
specifier|public
name|getTableRegions_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getTableRegions_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getTableRegions_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getTableRegions_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getTableRegions_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getTableRegions_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getTableRegions_args
name|typedOther
init|=
operator|(
name|getTableRegions_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableRegions_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableRegions_result
implements|implements
name|TBase
argument_list|<
name|getTableRegions_result
argument_list|,
name|getTableRegions_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getTableRegions_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRegionInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getTableRegions_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getTableRegions_result
parameter_list|()
block|{     }
specifier|public
name|getTableRegions_result
parameter_list|(
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getTableRegions_result
parameter_list|(
name|getTableRegions_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRegionInfo
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRegionInfo
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getTableRegions_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getTableRegions_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRegionInfo
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRegionInfo
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getTableRegions_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getTableRegions_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRegionInfo
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getTableRegions_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getTableRegions_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getTableRegions_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getTableRegions_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getTableRegions_result
name|typedOther
init|=
operator|(
name|getTableRegions_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list18
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|(
name|_list18
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i19
init|=
literal|0
init|;
name|_i19
operator|<
name|_list18
operator|.
name|size
condition|;
operator|++
name|_i19
control|)
block|{
name|TRegionInfo
name|_elem20
decl_stmt|;
name|_elem20
operator|=
operator|new
name|TRegionInfo
argument_list|()
expr_stmt|;
name|_elem20
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem20
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRegionInfo
name|_iter21
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter21
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableRegions_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|createTable_args
implements|implements
name|TBase
argument_list|<
name|createTable_args
argument_list|,
name|createTable_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"createTable_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMN_FAMILIES_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columnFamilies"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
comment|/**      * name of table to create      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * list of column family descriptors      */
specifier|public
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table to create        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * list of column family descriptors        */
name|COLUMN_FAMILIES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"columnFamilies"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// COLUMN_FAMILIES
return|return
name|COLUMN_FAMILIES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN_FAMILIES
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columnFamilies"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|ColumnDescriptor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|createTable_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|createTable_args
parameter_list|()
block|{     }
specifier|public
name|createTable_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
name|columnFamilies
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|createTable_args
parameter_list|(
name|createTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumnFamilies
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|__this__columnFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnDescriptor
name|other_element
range|:
name|other
operator|.
name|columnFamilies
control|)
block|{
name|__this__columnFamilies
operator|.
name|add
argument_list|(
operator|new
name|ColumnDescriptor
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columnFamilies
operator|=
name|__this__columnFamilies
expr_stmt|;
block|}
block|}
specifier|public
name|createTable_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|createTable_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table to create      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table to create      */
specifier|public
name|createTable_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|createTable_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnFamiliesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columnFamilies
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columnFamilies
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ColumnDescriptor
argument_list|>
name|getColumnFamiliesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columnFamilies
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columnFamilies
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumnFamilies
parameter_list|(
name|ColumnDescriptor
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columnFamilies
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columnFamilies
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columnFamilies
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of column family descriptors      */
specifier|public
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|getColumnFamilies
parameter_list|()
block|{
return|return
name|this
operator|.
name|columnFamilies
return|;
block|}
comment|/**      * list of column family descriptors      */
specifier|public
name|createTable_args
name|setColumnFamilies
parameter_list|(
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
block|{
name|this
operator|.
name|columnFamilies
operator|=
name|columnFamilies
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumnFamilies
parameter_list|()
block|{
name|this
operator|.
name|columnFamilies
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columnFamilies is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumnFamilies
parameter_list|()
block|{
return|return
name|this
operator|.
name|columnFamilies
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnFamiliesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columnFamilies
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN_FAMILIES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumnFamilies
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumnFamilies
argument_list|(
operator|(
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|COLUMN_FAMILIES
case|:
return|return
name|getColumnFamilies
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|COLUMN_FAMILIES
case|:
return|return
name|isSetColumnFamilies
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|createTable_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|createTable_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|createTable_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columnFamilies
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumnFamilies
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columnFamilies
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumnFamilies
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columnFamilies
operator|||
name|that_present_columnFamilies
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columnFamilies
operator|&&
name|that_present_columnFamilies
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columnFamilies
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columnFamilies
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|createTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|createTable_args
name|typedOther
init|=
operator|(
name|createTable_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumnFamilies
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumnFamilies
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumnFamilies
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columnFamilies
argument_list|,
name|typedOther
operator|.
name|columnFamilies
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// COLUMN_FAMILIES
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list22
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|(
name|_list22
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i23
init|=
literal|0
init|;
name|_i23
operator|<
name|_list22
operator|.
name|size
condition|;
operator|++
name|_i23
control|)
block|{
name|ColumnDescriptor
name|_elem24
decl_stmt|;
name|_elem24
operator|=
operator|new
name|ColumnDescriptor
argument_list|()
expr_stmt|;
name|_elem24
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|.
name|add
argument_list|(
name|_elem24
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columnFamilies
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FAMILIES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|columnFamilies
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnDescriptor
name|_iter25
range|:
name|this
operator|.
name|columnFamilies
control|)
block|{
name|_iter25
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"createTable_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columnFamilies:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columnFamilies
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columnFamilies
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|createTable_result
implements|implements
name|TBase
argument_list|<
name|createTable_result
argument_list|,
name|createTable_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"createTable_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|EXIST_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"exist"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
specifier|public
name|AlreadyExists
name|exist
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|,
name|EXIST
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"exist"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
case|case
literal|3
case|:
comment|// EXIST
return|return
name|EXIST
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|EXIST
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"exist"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|createTable_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|createTable_result
parameter_list|()
block|{     }
specifier|public
name|createTable_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|,
name|AlreadyExists
name|exist
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|exist
operator|=
name|exist
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|createTable_result
parameter_list|(
name|createTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetExist
argument_list|()
condition|)
block|{
name|this
operator|.
name|exist
operator|=
operator|new
name|AlreadyExists
argument_list|(
name|other
operator|.
name|exist
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|createTable_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|createTable_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|exist
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|createTable_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|createTable_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|AlreadyExists
name|getExist
parameter_list|()
block|{
return|return
name|this
operator|.
name|exist
return|;
block|}
specifier|public
name|createTable_result
name|setExist
parameter_list|(
name|AlreadyExists
name|exist
parameter_list|)
block|{
name|this
operator|.
name|exist
operator|=
name|exist
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetExist
parameter_list|()
block|{
name|this
operator|.
name|exist
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field exist is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetExist
parameter_list|()
block|{
return|return
name|this
operator|.
name|exist
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setExistIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|exist
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EXIST
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetExist
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setExist
argument_list|(
operator|(
name|AlreadyExists
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
case|case
name|EXIST
case|:
return|return
name|getExist
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
case|case
name|EXIST
case|:
return|return
name|isSetExist
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|createTable_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|createTable_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|createTable_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_exist
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetExist
argument_list|()
decl_stmt|;
name|boolean
name|that_present_exist
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetExist
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_exist
operator|||
name|that_present_exist
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_exist
operator|&&
name|that_present_exist
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|exist
operator|.
name|equals
argument_list|(
name|that
operator|.
name|exist
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|createTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|createTable_result
name|typedOther
init|=
operator|(
name|createTable_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetExist
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetExist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetExist
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|exist
argument_list|,
name|typedOther
operator|.
name|exist
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// EXIST
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|exist
operator|=
operator|new
name|AlreadyExists
argument_list|()
expr_stmt|;
name|this
operator|.
name|exist
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetExist
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|EXIST_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|exist
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"createTable_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"exist:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|exist
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|exist
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteTable_args
implements|implements
name|TBase
argument_list|<
name|deleteTable_args
argument_list|,
name|deleteTable_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteTable_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
comment|/**      * name of table to delete      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table to delete        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteTable_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteTable_args
parameter_list|()
block|{     }
specifier|public
name|deleteTable_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteTable_args
parameter_list|(
name|deleteTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|deleteTable_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteTable_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table to delete      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table to delete      */
specifier|public
name|deleteTable_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteTable_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteTable_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteTable_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteTable_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteTable_args
name|typedOther
init|=
operator|(
name|deleteTable_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteTable_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteTable_result
implements|implements
name|TBase
argument_list|<
name|deleteTable_result
argument_list|,
name|deleteTable_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteTable_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteTable_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteTable_result
parameter_list|()
block|{     }
specifier|public
name|deleteTable_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteTable_result
parameter_list|(
name|deleteTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteTable_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteTable_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteTable_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteTable_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteTable_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteTable_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteTable_result
name|typedOther
init|=
operator|(
name|deleteTable_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteTable_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_args
implements|implements
name|TBase
argument_list|<
name|get_args
argument_list|,
name|get_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"column"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * column name      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * column name        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_args
parameter_list|()
block|{     }
specifier|public
name|get_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_args
parameter_list|(
name|get_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
block|}
specifier|public
name|get_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|get_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|get_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|get_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|get_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * column name      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * column name      */
specifier|public
name|get_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|get_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_args
name|typedOther
init|=
operator|(
name|get_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_result
implements|implements
name|TBase
argument_list|<
name|get_result
argument_list|,
name|get_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TCell
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_result
parameter_list|()
block|{     }
specifier|public
name|get_result
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_result
parameter_list|(
name|get_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TCell
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TCell
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TCell
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TCell
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TCell
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|get_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|get_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TCell
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_result
name|typedOther
init|=
operator|(
name|get_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list26
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list26
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i27
init|=
literal|0
init|;
name|_i27
operator|<
name|_list26
operator|.
name|size
condition|;
operator|++
name|_i27
control|)
block|{
name|TCell
name|_elem28
decl_stmt|;
name|_elem28
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem28
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem28
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter29
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter29
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getVer_args
implements|implements
name|TBase
argument_list|<
name|getVer_args
argument_list|,
name|getVer_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getVer_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"column"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NUM_VERSIONS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"numVersions"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * column name      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|/**      * number of versions to retrieve      */
specifier|public
name|int
name|numVersions
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * column name        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * number of versions to retrieve        */
name|NUM_VERSIONS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"numVersions"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// NUM_VERSIONS
return|return
name|NUM_VERSIONS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__NUMVERSIONS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NUM_VERSIONS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"numVersions"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getVer_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getVer_args
parameter_list|()
block|{     }
specifier|public
name|getVer_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getVer_args
parameter_list|(
name|getVer_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
name|this
operator|.
name|numVersions
operator|=
name|other
operator|.
name|numVersions
expr_stmt|;
block|}
specifier|public
name|getVer_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getVer_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getVer_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVer_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getVer_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVer_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * column name      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * column name      */
specifier|public
name|getVer_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVer_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * number of versions to retrieve      */
specifier|public
name|int
name|getNumVersions
parameter_list|()
block|{
return|return
name|this
operator|.
name|numVersions
return|;
block|}
comment|/**      * number of versions to retrieve      */
specifier|public
name|getVer_args
name|setNumVersions
parameter_list|(
name|int
name|numVersions
parameter_list|)
block|{
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetNumVersions
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field numVersions is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNumVersions
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNumVersionsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUM_VERSIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNumVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNumVersions
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|NUM_VERSIONS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getNumVersions
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|NUM_VERSIONS
case|:
return|return
name|isSetNumVersions
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getVer_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getVer_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getVer_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_numVersions
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_numVersions
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_numVersions
operator|||
name|that_present_numVersions
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_numVersions
operator|&&
name|that_present_numVersions
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|numVersions
operator|!=
name|that
operator|.
name|numVersions
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getVer_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getVer_args
name|typedOther
init|=
operator|(
name|getVer_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNumVersions
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNumVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNumVersions
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|numVersions
argument_list|,
name|typedOther
operator|.
name|numVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// NUM_VERSIONS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|numVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM_VERSIONS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVer_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"numVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getVer_result
implements|implements
name|TBase
argument_list|<
name|getVer_result
argument_list|,
name|getVer_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getVer_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TCell
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getVer_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getVer_result
parameter_list|()
block|{     }
specifier|public
name|getVer_result
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getVer_result
parameter_list|(
name|getVer_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TCell
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TCell
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TCell
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getVer_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getVer_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TCell
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TCell
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getVer_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getVer_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TCell
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getVer_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getVer_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getVer_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getVer_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getVer_result
name|typedOther
init|=
operator|(
name|getVer_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list30
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list30
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i31
init|=
literal|0
init|;
name|_i31
operator|<
name|_list30
operator|.
name|size
condition|;
operator|++
name|_i31
control|)
block|{
name|TCell
name|_elem32
decl_stmt|;
name|_elem32
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem32
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem32
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter33
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter33
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVer_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getVerTs_args
implements|implements
name|TBase
argument_list|<
name|getVerTs_args
argument_list|,
name|getVerTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getVerTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"column"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NUM_VERSIONS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"numVersions"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * column name      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/**      * number of versions to retrieve      */
specifier|public
name|int
name|numVersions
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * column name        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * number of versions to retrieve        */
name|NUM_VERSIONS
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"numVersions"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|5
case|:
comment|// NUM_VERSIONS
return|return
name|NUM_VERSIONS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__NUMVERSIONS_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NUM_VERSIONS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"numVersions"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getVerTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getVerTs_args
parameter_list|()
block|{     }
specifier|public
name|getVerTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getVerTs_args
parameter_list|(
name|getVerTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|other
operator|.
name|numVersions
expr_stmt|;
block|}
specifier|public
name|getVerTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getVerTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getVerTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVerTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getVerTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVerTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * column name      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * column name      */
specifier|public
name|getVerTs_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVerTs_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|getVerTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * number of versions to retrieve      */
specifier|public
name|int
name|getNumVersions
parameter_list|()
block|{
return|return
name|this
operator|.
name|numVersions
return|;
block|}
comment|/**      * number of versions to retrieve      */
specifier|public
name|getVerTs_args
name|setNumVersions
parameter_list|(
name|int
name|numVersions
parameter_list|)
block|{
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetNumVersions
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field numVersions is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNumVersions
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNumVersionsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUM_VERSIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNumVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNumVersions
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|NUM_VERSIONS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getNumVersions
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|NUM_VERSIONS
case|:
return|return
name|isSetNumVersions
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getVerTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getVerTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getVerTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_numVersions
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_numVersions
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_numVersions
operator|||
name|that_present_numVersions
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_numVersions
operator|&&
name|that_present_numVersions
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|numVersions
operator|!=
name|that
operator|.
name|numVersions
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getVerTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getVerTs_args
name|typedOther
init|=
operator|(
name|getVerTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNumVersions
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNumVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNumVersions
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|numVersions
argument_list|,
name|typedOther
operator|.
name|numVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// NUM_VERSIONS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|numVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM_VERSIONS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVerTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"numVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getVerTs_result
implements|implements
name|TBase
argument_list|<
name|getVerTs_result
argument_list|,
name|getVerTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getVerTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TCell
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getVerTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getVerTs_result
parameter_list|()
block|{     }
specifier|public
name|getVerTs_result
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getVerTs_result
parameter_list|(
name|getVerTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TCell
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TCell
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TCell
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getVerTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getVerTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TCell
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TCell
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getVerTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getVerTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TCell
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getVerTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getVerTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getVerTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getVerTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getVerTs_result
name|typedOther
init|=
operator|(
name|getVerTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list34
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list34
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i35
init|=
literal|0
init|;
name|_i35
operator|<
name|_list34
operator|.
name|size
condition|;
operator|++
name|_i35
control|)
block|{
name|TCell
name|_elem36
decl_stmt|;
name|_elem36
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem36
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem36
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter37
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter37
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVerTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRow_args
implements|implements
name|TBase
argument_list|<
name|getRow_args
argument_list|,
name|getRow_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRow_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRow_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRow_args
parameter_list|()
block|{     }
specifier|public
name|getRow_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRow_args
parameter_list|(
name|getRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
block|}
specifier|public
name|getRow_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRow_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRow_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRow_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRow_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRow_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRow_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRow_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRow_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRow_args
name|typedOther
init|=
operator|(
name|getRow_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRow_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRow_result
implements|implements
name|TBase
argument_list|<
name|getRow_result
argument_list|,
name|getRow_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRow_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRow_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRow_result
parameter_list|()
block|{     }
specifier|public
name|getRow_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRow_result
parameter_list|(
name|getRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRow_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRow_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRow_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRow_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRow_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRow_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRow_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRow_result
name|typedOther
init|=
operator|(
name|getRow_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list38
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list38
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i39
init|=
literal|0
init|;
name|_i39
operator|<
name|_list38
operator|.
name|size
condition|;
operator|++
name|_i39
control|)
block|{
name|TRowResult
name|_elem40
decl_stmt|;
name|_elem40
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem40
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem40
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter41
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter41
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRow_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumns_args
implements|implements
name|TBase
argument_list|<
name|getRowWithColumns_args
argument_list|,
name|getRowWithColumns_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowWithColumns_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * List of columns to return, null for all columns        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowWithColumns_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowWithColumns_args
parameter_list|()
block|{     }
specifier|public
name|getRowWithColumns_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowWithColumns_args
parameter_list|(
name|getRowWithColumns_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
block|}
specifier|public
name|getRowWithColumns_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumns_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRowWithColumns_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowWithColumns_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRowWithColumns_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowWithColumns_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|getRowWithColumns_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowWithColumns_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowWithColumns_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowWithColumns_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowWithColumns_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowWithColumns_args
name|typedOther
init|=
operator|(
name|getRowWithColumns_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list42
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list42
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i43
init|=
literal|0
init|;
name|_i43
operator|<
name|_list42
operator|.
name|size
condition|;
operator|++
name|_i43
control|)
block|{
name|ByteBuffer
name|_elem44
decl_stmt|;
name|_elem44
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem44
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter45
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter45
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowWithColumns_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumns_result
implements|implements
name|TBase
argument_list|<
name|getRowWithColumns_result
argument_list|,
name|getRowWithColumns_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowWithColumns_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowWithColumns_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowWithColumns_result
parameter_list|()
block|{     }
specifier|public
name|getRowWithColumns_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowWithColumns_result
parameter_list|(
name|getRowWithColumns_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowWithColumns_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumns_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowWithColumns_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowWithColumns_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowWithColumns_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowWithColumns_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowWithColumns_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowWithColumns_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowWithColumns_result
name|typedOther
init|=
operator|(
name|getRowWithColumns_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list46
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list46
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i47
init|=
literal|0
init|;
name|_i47
operator|<
name|_list46
operator|.
name|size
condition|;
operator|++
name|_i47
control|)
block|{
name|TRowResult
name|_elem48
decl_stmt|;
name|_elem48
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem48
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem48
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter49
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter49
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowWithColumns_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowTs_args
implements|implements
name|TBase
argument_list|<
name|getRowTs_args
argument_list|,
name|getRowTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of the table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of the table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowTs_args
parameter_list|()
block|{     }
specifier|public
name|getRowTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowTs_args
parameter_list|(
name|getRowTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|getRowTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table      */
specifier|public
name|getRowTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRowTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|getRowTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowTs_args
name|typedOther
init|=
operator|(
name|getRowTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowTs_result
implements|implements
name|TBase
argument_list|<
name|getRowTs_result
argument_list|,
name|getRowTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowTs_result
parameter_list|()
block|{     }
specifier|public
name|getRowTs_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowTs_result
parameter_list|(
name|getRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowTs_result
name|typedOther
init|=
operator|(
name|getRowTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list50
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list50
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i51
init|=
literal|0
init|;
name|_i51
operator|<
name|_list50
operator|.
name|size
condition|;
operator|++
name|_i51
control|)
block|{
name|TRowResult
name|_elem52
decl_stmt|;
name|_elem52
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem52
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem52
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter53
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter53
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumnsTs_args
implements|implements
name|TBase
argument_list|<
name|getRowWithColumnsTs_args
argument_list|,
name|getRowWithColumnsTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowWithColumnsTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * List of columns to return, null for all columns        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowWithColumnsTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowWithColumnsTs_args
parameter_list|()
block|{     }
specifier|public
name|getRowWithColumnsTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowWithColumnsTs_args
parameter_list|(
name|getRowWithColumnsTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|getRowWithColumnsTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumnsTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRowWithColumnsTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowWithColumnsTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRowWithColumnsTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowWithColumnsTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|getRowWithColumnsTs_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
specifier|public
name|getRowWithColumnsTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowWithColumnsTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowWithColumnsTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowWithColumnsTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowWithColumnsTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowWithColumnsTs_args
name|typedOther
init|=
operator|(
name|getRowWithColumnsTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list54
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list54
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i55
init|=
literal|0
init|;
name|_i55
operator|<
name|_list54
operator|.
name|size
condition|;
operator|++
name|_i55
control|)
block|{
name|ByteBuffer
name|_elem56
decl_stmt|;
name|_elem56
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem56
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter57
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter57
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowWithColumnsTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumnsTs_result
implements|implements
name|TBase
argument_list|<
name|getRowWithColumnsTs_result
argument_list|,
name|getRowWithColumnsTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowWithColumnsTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowWithColumnsTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowWithColumnsTs_result
parameter_list|()
block|{     }
specifier|public
name|getRowWithColumnsTs_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowWithColumnsTs_result
parameter_list|(
name|getRowWithColumnsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowWithColumnsTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumnsTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowWithColumnsTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowWithColumnsTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowWithColumnsTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowWithColumnsTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowWithColumnsTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowWithColumnsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowWithColumnsTs_result
name|typedOther
init|=
operator|(
name|getRowWithColumnsTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list58
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list58
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i59
init|=
literal|0
init|;
name|_i59
operator|<
name|_list58
operator|.
name|size
condition|;
operator|++
name|_i59
control|)
block|{
name|TRowResult
name|_elem60
decl_stmt|;
name|_elem60
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem60
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem60
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter61
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter61
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowWithColumnsTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRows_args
implements|implements
name|TBase
argument_list|<
name|getRows_args
argument_list|,
name|getRows_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRows_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROWS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"rows"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row keys        */
name|ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rows"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROWS
return|return
name|ROWS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROWS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"rows"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRows_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRows_args
parameter_list|()
block|{     }
specifier|public
name|getRows_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRows_args
parameter_list|(
name|getRows_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__rows
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|rows
control|)
block|{
name|__this__rows
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|=
name|__this__rows
expr_stmt|;
block|}
block|}
specifier|public
name|getRows_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRows_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRows_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRows_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getRowsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rows
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRows
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
return|;
block|}
comment|/**      * row keys      */
specifier|public
name|getRows_args
name|setRows
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRows
parameter_list|()
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rows is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRows
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|getRows
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|isSetRows
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRows_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRows_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRows_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rows
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rows
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rows
operator|||
name|that_present_rows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rows
operator|&&
name|that_present_rows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rows
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rows
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRows_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRows_args
name|typedOther
init|=
operator|(
name|getRows_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rows
argument_list|,
name|typedOther
operator|.
name|rows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROWS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list62
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list62
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i63
init|=
literal|0
init|;
name|_i63
operator|<
name|_list62
operator|.
name|size
condition|;
operator|++
name|_i63
control|)
block|{
name|ByteBuffer
name|_elem64
decl_stmt|;
name|_elem64
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem64
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rows
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter65
range|:
name|this
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter65
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRows_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rows:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rows
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRows_result
implements|implements
name|TBase
argument_list|<
name|getRows_result
argument_list|,
name|getRows_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRows_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRows_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRows_result
parameter_list|()
block|{     }
specifier|public
name|getRows_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRows_result
parameter_list|(
name|getRows_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRows_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRows_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRows_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRows_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRows_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRows_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRows_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRows_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRows_result
name|typedOther
init|=
operator|(
name|getRows_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list66
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list66
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i67
init|=
literal|0
init|;
name|_i67
operator|<
name|_list66
operator|.
name|size
condition|;
operator|++
name|_i67
control|)
block|{
name|TRowResult
name|_elem68
decl_stmt|;
name|_elem68
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem68
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem68
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter69
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter69
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRows_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumns_args
implements|implements
name|TBase
argument_list|<
name|getRowsWithColumns_args
argument_list|,
name|getRowsWithColumns_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowsWithColumns_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROWS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"rows"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row keys        */
name|ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rows"
argument_list|)
block|,
comment|/**        * List of columns to return, null for all columns        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROWS
return|return
name|ROWS
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROWS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"rows"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsWithColumns_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsWithColumns_args
parameter_list|()
block|{     }
specifier|public
name|getRowsWithColumns_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsWithColumns_args
parameter_list|(
name|getRowsWithColumns_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__rows
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|rows
control|)
block|{
name|__this__rows
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|=
name|__this__rows
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsWithColumns_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumns_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRowsWithColumns_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowsWithColumns_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getRowsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rows
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRows
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
return|;
block|}
comment|/**      * row keys      */
specifier|public
name|getRowsWithColumns_args
name|setRows
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRows
parameter_list|()
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rows is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|getRowsWithColumns_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRows
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|getRows
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|isSetRows
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsWithColumns_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsWithColumns_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsWithColumns_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rows
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rows
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rows
operator|||
name|that_present_rows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rows
operator|&&
name|that_present_rows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rows
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rows
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsWithColumns_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsWithColumns_args
name|typedOther
init|=
operator|(
name|getRowsWithColumns_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rows
argument_list|,
name|typedOther
operator|.
name|rows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROWS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list70
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list70
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i71
init|=
literal|0
init|;
name|_i71
operator|<
name|_list70
operator|.
name|size
condition|;
operator|++
name|_i71
control|)
block|{
name|ByteBuffer
name|_elem72
decl_stmt|;
name|_elem72
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem72
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list73
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list73
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i74
init|=
literal|0
init|;
name|_i74
operator|<
name|_list73
operator|.
name|size
condition|;
operator|++
name|_i74
control|)
block|{
name|ByteBuffer
name|_elem75
decl_stmt|;
name|_elem75
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem75
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rows
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter76
range|:
name|this
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter76
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter77
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter77
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsWithColumns_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rows:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rows
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumns_result
implements|implements
name|TBase
argument_list|<
name|getRowsWithColumns_result
argument_list|,
name|getRowsWithColumns_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowsWithColumns_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsWithColumns_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsWithColumns_result
parameter_list|()
block|{     }
specifier|public
name|getRowsWithColumns_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsWithColumns_result
parameter_list|(
name|getRowsWithColumns_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsWithColumns_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumns_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowsWithColumns_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowsWithColumns_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsWithColumns_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsWithColumns_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsWithColumns_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsWithColumns_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsWithColumns_result
name|typedOther
init|=
operator|(
name|getRowsWithColumns_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list78
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list78
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i79
init|=
literal|0
init|;
name|_i79
operator|<
name|_list78
operator|.
name|size
condition|;
operator|++
name|_i79
control|)
block|{
name|TRowResult
name|_elem80
decl_stmt|;
name|_elem80
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem80
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem80
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter81
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter81
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsWithColumns_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsTs_args
implements|implements
name|TBase
argument_list|<
name|getRowsTs_args
argument_list|,
name|getRowsTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowsTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROWS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"rows"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of the table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of the table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row keys        */
name|ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rows"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROWS
return|return
name|ROWS
return|;
case|case
literal|3
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROWS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"rows"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsTs_args
parameter_list|()
block|{     }
specifier|public
name|getRowsTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsTs_args
parameter_list|(
name|getRowsTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__rows
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|rows
control|)
block|{
name|__this__rows
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|=
name|__this__rows
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|getRowsTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table      */
specifier|public
name|getRowsTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowsTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getRowsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rows
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRows
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
return|;
block|}
comment|/**      * row keys      */
specifier|public
name|getRowsTs_args
name|setRows
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRows
parameter_list|()
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rows is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|getRowsTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRows
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|getRows
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|isSetRows
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rows
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rows
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rows
operator|||
name|that_present_rows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rows
operator|&&
name|that_present_rows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rows
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rows
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsTs_args
name|typedOther
init|=
operator|(
name|getRowsTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rows
argument_list|,
name|typedOther
operator|.
name|rows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROWS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list82
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list82
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i83
init|=
literal|0
init|;
name|_i83
operator|<
name|_list82
operator|.
name|size
condition|;
operator|++
name|_i83
control|)
block|{
name|ByteBuffer
name|_elem84
decl_stmt|;
name|_elem84
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem84
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rows
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter85
range|:
name|this
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter85
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rows:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rows
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsTs_result
implements|implements
name|TBase
argument_list|<
name|getRowsTs_result
argument_list|,
name|getRowsTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowsTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsTs_result
parameter_list|()
block|{     }
specifier|public
name|getRowsTs_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsTs_result
parameter_list|(
name|getRowsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowsTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowsTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsTs_result
name|typedOther
init|=
operator|(
name|getRowsTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list86
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list86
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i87
init|=
literal|0
init|;
name|_i87
operator|<
name|_list86
operator|.
name|size
condition|;
operator|++
name|_i87
control|)
block|{
name|TRowResult
name|_elem88
decl_stmt|;
name|_elem88
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem88
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem88
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter89
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter89
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumnsTs_args
implements|implements
name|TBase
argument_list|<
name|getRowsWithColumnsTs_args
argument_list|,
name|getRowsWithColumnsTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowsWithColumnsTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROWS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"rows"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row keys        */
name|ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rows"
argument_list|)
block|,
comment|/**        * List of columns to return, null for all columns        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROWS
return|return
name|ROWS
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROWS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"rows"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsWithColumnsTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsWithColumnsTs_args
parameter_list|()
block|{     }
specifier|public
name|getRowsWithColumnsTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsWithColumnsTs_args
parameter_list|(
name|getRowsWithColumnsTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__rows
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|rows
control|)
block|{
name|__this__rows
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|=
name|__this__rows
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|getRowsWithColumnsTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumnsTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRowsWithColumnsTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowsWithColumnsTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getRowsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rows
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRows
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
return|;
block|}
comment|/**      * row keys      */
specifier|public
name|getRowsWithColumnsTs_args
name|setRows
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRows
parameter_list|()
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rows is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|getRowsWithColumnsTs_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
specifier|public
name|getRowsWithColumnsTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRows
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|getRows
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|isSetRows
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsWithColumnsTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsWithColumnsTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsWithColumnsTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rows
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rows
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rows
operator|||
name|that_present_rows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rows
operator|&&
name|that_present_rows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rows
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rows
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsWithColumnsTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsWithColumnsTs_args
name|typedOther
init|=
operator|(
name|getRowsWithColumnsTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rows
argument_list|,
name|typedOther
operator|.
name|rows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROWS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list90
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list90
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i91
init|=
literal|0
init|;
name|_i91
operator|<
name|_list90
operator|.
name|size
condition|;
operator|++
name|_i91
control|)
block|{
name|ByteBuffer
name|_elem92
decl_stmt|;
name|_elem92
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem92
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list93
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list93
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i94
init|=
literal|0
init|;
name|_i94
operator|<
name|_list93
operator|.
name|size
condition|;
operator|++
name|_i94
control|)
block|{
name|ByteBuffer
name|_elem95
decl_stmt|;
name|_elem95
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem95
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rows
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter96
range|:
name|this
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter96
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter97
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter97
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsWithColumnsTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rows:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rows
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumnsTs_result
implements|implements
name|TBase
argument_list|<
name|getRowsWithColumnsTs_result
argument_list|,
name|getRowsWithColumnsTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowsWithColumnsTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsWithColumnsTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsWithColumnsTs_result
parameter_list|()
block|{     }
specifier|public
name|getRowsWithColumnsTs_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsWithColumnsTs_result
parameter_list|(
name|getRowsWithColumnsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsWithColumnsTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumnsTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowsWithColumnsTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowsWithColumnsTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsWithColumnsTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsWithColumnsTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsWithColumnsTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsWithColumnsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsWithColumnsTs_result
name|typedOther
init|=
operator|(
name|getRowsWithColumnsTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list98
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list98
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i99
init|=
literal|0
init|;
name|_i99
operator|<
name|_list98
operator|.
name|size
condition|;
operator|++
name|_i99
control|)
block|{
name|TRowResult
name|_elem100
decl_stmt|;
name|_elem100
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem100
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem100
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter101
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter101
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsWithColumnsTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRow_args
implements|implements
name|TBase
argument_list|<
name|mutateRow_args
argument_list|,
name|mutateRow_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRow_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MUTATIONS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"mutations"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * list of mutation commands      */
specifier|public
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * list of mutation commands        */
name|MUTATIONS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"mutations"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// MUTATIONS
return|return
name|MUTATIONS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MUTATIONS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"mutations"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Mutation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRow_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRow_args
parameter_list|()
block|{     }
specifier|public
name|mutateRow_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRow_args
parameter_list|(
name|mutateRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMutations
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|__this__mutations
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|other_element
range|:
name|other
operator|.
name|mutations
control|)
block|{
name|__this__mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mutations
operator|=
name|__this__mutations
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRow_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRow_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|mutateRow_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRow_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|mutateRow_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRow_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMutationsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|mutations
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|mutations
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Mutation
argument_list|>
name|getMutationsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|mutations
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|mutations
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMutations
parameter_list|(
name|Mutation
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|mutations
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of mutation commands      */
specifier|public
name|List
argument_list|<
name|Mutation
argument_list|>
name|getMutations
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutations
return|;
block|}
comment|/**      * list of mutation commands      */
specifier|public
name|mutateRow_args
name|setMutations
parameter_list|(
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
block|{
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetMutations
parameter_list|()
block|{
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field mutations is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMutations
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutations
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMutationsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MUTATIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMutations
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMutations
argument_list|(
operator|(
name|List
argument_list|<
name|Mutation
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|MUTATIONS
case|:
return|return
name|getMutations
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|MUTATIONS
case|:
return|return
name|isSetMutations
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRow_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRow_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRow_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_mutations
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMutations
argument_list|()
decl_stmt|;
name|boolean
name|that_present_mutations
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMutations
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_mutations
operator|||
name|that_present_mutations
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_mutations
operator|&&
name|that_present_mutations
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|mutations
operator|.
name|equals
argument_list|(
name|that
operator|.
name|mutations
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRow_args
name|typedOther
init|=
operator|(
name|mutateRow_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMutations
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMutations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMutations
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|mutations
argument_list|,
name|typedOther
operator|.
name|mutations
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// MUTATIONS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list102
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|_list102
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i103
init|=
literal|0
init|;
name|_i103
operator|<
name|_list102
operator|.
name|size
condition|;
operator|++
name|_i103
control|)
block|{
name|Mutation
name|_elem104
decl_stmt|;
name|_elem104
operator|=
operator|new
name|Mutation
argument_list|()
expr_stmt|;
name|_elem104
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|_elem104
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|mutations
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MUTATIONS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|_iter105
range|:
name|this
operator|.
name|mutations
control|)
block|{
name|_iter105
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRow_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mutations:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mutations
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|mutations
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRow_result
implements|implements
name|TBase
argument_list|<
name|mutateRow_result
argument_list|,
name|mutateRow_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRow_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRow_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRow_result
parameter_list|()
block|{     }
specifier|public
name|mutateRow_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRow_result
parameter_list|(
name|mutateRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRow_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRow_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|mutateRow_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|mutateRow_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRow_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRow_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRow_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRow_result
name|typedOther
init|=
operator|(
name|mutateRow_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRow_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowTs_args
implements|implements
name|TBase
argument_list|<
name|mutateRowTs_args
argument_list|,
name|mutateRowTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRowTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MUTATIONS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"mutations"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * list of mutation commands      */
specifier|public
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * list of mutation commands        */
name|MUTATIONS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"mutations"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// MUTATIONS
return|return
name|MUTATIONS
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MUTATIONS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"mutations"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Mutation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRowTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRowTs_args
parameter_list|()
block|{     }
specifier|public
name|mutateRowTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRowTs_args
parameter_list|(
name|mutateRowTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMutations
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|__this__mutations
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|other_element
range|:
name|other
operator|.
name|mutations
control|)
block|{
name|__this__mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mutations
operator|=
name|__this__mutations
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|mutateRowTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRowTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|mutateRowTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRowTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|mutateRowTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRowTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMutationsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|mutations
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|mutations
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Mutation
argument_list|>
name|getMutationsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|mutations
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|mutations
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMutations
parameter_list|(
name|Mutation
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|mutations
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of mutation commands      */
specifier|public
name|List
argument_list|<
name|Mutation
argument_list|>
name|getMutations
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutations
return|;
block|}
comment|/**      * list of mutation commands      */
specifier|public
name|mutateRowTs_args
name|setMutations
parameter_list|(
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
block|{
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetMutations
parameter_list|()
block|{
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field mutations is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMutations
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutations
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMutationsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|mutateRowTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MUTATIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMutations
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMutations
argument_list|(
operator|(
name|List
argument_list|<
name|Mutation
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|MUTATIONS
case|:
return|return
name|getMutations
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|MUTATIONS
case|:
return|return
name|isSetMutations
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRowTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRowTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRowTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_mutations
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMutations
argument_list|()
decl_stmt|;
name|boolean
name|that_present_mutations
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMutations
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_mutations
operator|||
name|that_present_mutations
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_mutations
operator|&&
name|that_present_mutations
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|mutations
operator|.
name|equals
argument_list|(
name|that
operator|.
name|mutations
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRowTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRowTs_args
name|typedOther
init|=
operator|(
name|mutateRowTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMutations
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMutations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMutations
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|mutations
argument_list|,
name|typedOther
operator|.
name|mutations
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// MUTATIONS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list106
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|_list106
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i107
init|=
literal|0
init|;
name|_i107
operator|<
name|_list106
operator|.
name|size
condition|;
operator|++
name|_i107
control|)
block|{
name|Mutation
name|_elem108
decl_stmt|;
name|_elem108
operator|=
operator|new
name|Mutation
argument_list|()
expr_stmt|;
name|_elem108
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|_elem108
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|mutations
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MUTATIONS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|_iter109
range|:
name|this
operator|.
name|mutations
control|)
block|{
name|_iter109
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mutations:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mutations
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|mutations
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowTs_result
implements|implements
name|TBase
argument_list|<
name|mutateRowTs_result
argument_list|,
name|mutateRowTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRowTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRowTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRowTs_result
parameter_list|()
block|{     }
specifier|public
name|mutateRowTs_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRowTs_result
parameter_list|(
name|mutateRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRowTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRowTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|mutateRowTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|mutateRowTs_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRowTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRowTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRowTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRowTs_result
name|typedOther
init|=
operator|(
name|mutateRowTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRows_args
implements|implements
name|TBase
argument_list|<
name|mutateRows_args
argument_list|,
name|mutateRows_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRows_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_BATCHES_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"rowBatches"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * list of row batches      */
specifier|public
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * list of row batches        */
name|ROW_BATCHES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rowBatches"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW_BATCHES
return|return
name|ROW_BATCHES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW_BATCHES
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"rowBatches"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|BatchMutation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRows_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRows_args
parameter_list|()
block|{     }
specifier|public
name|mutateRows_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRows_args
parameter_list|(
name|mutateRows_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|__this__rowBatches
init|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchMutation
name|other_element
range|:
name|other
operator|.
name|rowBatches
control|)
block|{
name|__this__rowBatches
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rowBatches
operator|=
name|__this__rowBatches
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRows_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRows_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|mutateRows_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRows_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowBatchesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|BatchMutation
argument_list|>
name|getRowBatchesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rowBatches
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRowBatches
parameter_list|(
name|BatchMutation
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of row batches      */
specifier|public
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|getRowBatches
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBatches
return|;
block|}
comment|/**      * list of row batches      */
specifier|public
name|mutateRows_args
name|setRowBatches
parameter_list|(
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
block|{
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRowBatches
parameter_list|()
block|{
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rowBatches is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRowBatches
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBatches
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowBatchesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW_BATCHES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRowBatches
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRowBatches
argument_list|(
operator|(
name|List
argument_list|<
name|BatchMutation
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW_BATCHES
case|:
return|return
name|getRowBatches
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW_BATCHES
case|:
return|return
name|isSetRowBatches
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRows_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRows_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRows_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rowBatches
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRowBatches
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rowBatches
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRowBatches
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rowBatches
operator|||
name|that_present_rowBatches
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rowBatches
operator|&&
name|that_present_rowBatches
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rowBatches
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rowBatches
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRows_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRows_args
name|typedOther
init|=
operator|(
name|mutateRows_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRowBatches
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRowBatches
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|,
name|typedOther
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW_BATCHES
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list110
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|(
name|_list110
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i111
init|=
literal|0
init|;
name|_i111
operator|<
name|_list110
operator|.
name|size
condition|;
operator|++
name|_i111
control|)
block|{
name|BatchMutation
name|_elem112
decl_stmt|;
name|_elem112
operator|=
operator|new
name|BatchMutation
argument_list|()
expr_stmt|;
name|_elem112
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|_elem112
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_BATCHES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BatchMutation
name|_iter113
range|:
name|this
operator|.
name|rowBatches
control|)
block|{
name|_iter113
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRows_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rowBatches:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRows_result
implements|implements
name|TBase
argument_list|<
name|mutateRows_result
argument_list|,
name|mutateRows_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRows_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRows_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRows_result
parameter_list|()
block|{     }
specifier|public
name|mutateRows_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRows_result
parameter_list|(
name|mutateRows_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRows_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRows_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|mutateRows_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|mutateRows_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRows_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRows_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRows_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRows_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRows_result
name|typedOther
init|=
operator|(
name|mutateRows_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRows_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowsTs_args
implements|implements
name|TBase
argument_list|<
name|mutateRowsTs_args
argument_list|,
name|mutateRowsTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRowsTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_BATCHES_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"rowBatches"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * list of row batches      */
specifier|public
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * list of row batches        */
name|ROW_BATCHES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rowBatches"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW_BATCHES
return|return
name|ROW_BATCHES
return|;
case|case
literal|3
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW_BATCHES
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"rowBatches"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|BatchMutation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRowsTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRowsTs_args
parameter_list|()
block|{     }
specifier|public
name|mutateRowsTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRowsTs_args
parameter_list|(
name|mutateRowsTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|__this__rowBatches
init|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchMutation
name|other_element
range|:
name|other
operator|.
name|rowBatches
control|)
block|{
name|__this__rowBatches
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rowBatches
operator|=
name|__this__rowBatches
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|mutateRowsTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRowsTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|mutateRowsTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRowsTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowBatchesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|BatchMutation
argument_list|>
name|getRowBatchesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rowBatches
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRowBatches
parameter_list|(
name|BatchMutation
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of row batches      */
specifier|public
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|getRowBatches
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBatches
return|;
block|}
comment|/**      * list of row batches      */
specifier|public
name|mutateRowsTs_args
name|setRowBatches
parameter_list|(
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
block|{
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRowBatches
parameter_list|()
block|{
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rowBatches is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRowBatches
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBatches
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowBatchesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|mutateRowsTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW_BATCHES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRowBatches
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRowBatches
argument_list|(
operator|(
name|List
argument_list|<
name|BatchMutation
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW_BATCHES
case|:
return|return
name|getRowBatches
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW_BATCHES
case|:
return|return
name|isSetRowBatches
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRowsTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRowsTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRowsTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rowBatches
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRowBatches
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rowBatches
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRowBatches
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rowBatches
operator|||
name|that_present_rowBatches
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rowBatches
operator|&&
name|that_present_rowBatches
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rowBatches
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rowBatches
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRowsTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRowsTs_args
name|typedOther
init|=
operator|(
name|mutateRowsTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRowBatches
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRowBatches
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|,
name|typedOther
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW_BATCHES
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list114
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|(
name|_list114
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i115
init|=
literal|0
init|;
name|_i115
operator|<
name|_list114
operator|.
name|size
condition|;
operator|++
name|_i115
control|)
block|{
name|BatchMutation
name|_elem116
decl_stmt|;
name|_elem116
operator|=
operator|new
name|BatchMutation
argument_list|()
expr_stmt|;
name|_elem116
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|_elem116
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_BATCHES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BatchMutation
name|_iter117
range|:
name|this
operator|.
name|rowBatches
control|)
block|{
name|_iter117
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowsTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rowBatches:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowsTs_result
implements|implements
name|TBase
argument_list|<
name|mutateRowsTs_result
argument_list|,
name|mutateRowsTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRowsTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRowsTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRowsTs_result
parameter_list|()
block|{     }
specifier|public
name|mutateRowsTs_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRowsTs_result
parameter_list|(
name|mutateRowsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRowsTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRowsTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|mutateRowsTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|mutateRowsTs_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRowsTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRowsTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRowsTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRowsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRowsTs_result
name|typedOther
init|=
operator|(
name|mutateRowsTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowsTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|atomicIncrement_args
implements|implements
name|TBase
argument_list|<
name|atomicIncrement_args
argument_list|,
name|atomicIncrement_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"atomicIncrement_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"column"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|VALUE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"value"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * row to increment      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * name of column      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|/**      * amount to increment by      */
specifier|public
name|long
name|value
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row to increment        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * name of column        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * amount to increment by        */
name|VALUE
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"value"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// VALUE
return|return
name|VALUE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__VALUE_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|VALUE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"value"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|atomicIncrement_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|atomicIncrement_args
parameter_list|()
block|{     }
specifier|public
name|atomicIncrement_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|setValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|atomicIncrement_args
parameter_list|(
name|atomicIncrement_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
name|this
operator|.
name|value
operator|=
name|other
operator|.
name|value
expr_stmt|;
block|}
specifier|public
name|atomicIncrement_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|atomicIncrement_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|setValueIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|atomicIncrement_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|atomicIncrement_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row to increment      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row to increment      */
specifier|public
name|atomicIncrement_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|atomicIncrement_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * name of column      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * name of column      */
specifier|public
name|atomicIncrement_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|atomicIncrement_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * amount to increment by      */
specifier|public
name|long
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
comment|/**      * amount to increment by      */
specifier|public
name|atomicIncrement_args
name|setValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|setValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetValue
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__VALUE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field value is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetValue
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__VALUE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setValueIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__VALUE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VALUE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setValue
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|VALUE
case|:
return|return
operator|new
name|Long
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|VALUE
case|:
return|return
name|isSetValue
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|atomicIncrement_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|atomicIncrement_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|atomicIncrement_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_value
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_value
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_value
operator|||
name|that_present_value
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_value
operator|&&
name|that_present_value
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|value
operator|!=
name|that
operator|.
name|value
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|atomicIncrement_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|atomicIncrement_args
name|typedOther
init|=
operator|(
name|atomicIncrement_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetValue
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetValue
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|value
argument_list|,
name|typedOther
operator|.
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// VALUE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|value
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|VALUE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"atomicIncrement_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"value:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|atomicIncrement_result
implements|implements
name|TBase
argument_list|<
name|atomicIncrement_result
argument_list|,
name|atomicIncrement_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"atomicIncrement_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|long
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|atomicIncrement_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|atomicIncrement_result
parameter_list|()
block|{     }
specifier|public
name|atomicIncrement_result
parameter_list|(
name|long
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|atomicIncrement_result
parameter_list|(
name|atomicIncrement_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|atomicIncrement_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|atomicIncrement_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|long
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|atomicIncrement_result
name|setSuccess
parameter_list|(
name|long
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|atomicIncrement_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|atomicIncrement_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Long
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|atomicIncrement_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|atomicIncrement_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|atomicIncrement_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|atomicIncrement_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|atomicIncrement_result
name|typedOther
init|=
operator|(
name|atomicIncrement_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"atomicIncrement_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAll_args
implements|implements
name|TBase
argument_list|<
name|deleteAll_args
argument_list|,
name|deleteAll_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAll_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"column"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * Row to update      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Row to update        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * name of column whose value is to be deleted        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAll_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAll_args
parameter_list|()
block|{     }
specifier|public
name|deleteAll_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAll_args
parameter_list|(
name|deleteAll_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAll_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAll_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|deleteAll_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAll_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Row to update      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * Row to update      */
specifier|public
name|deleteAll_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAll_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|deleteAll_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAll_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAll_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAll_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAll_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAll_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAll_args
name|typedOther
init|=
operator|(
name|deleteAll_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAll_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAll_result
implements|implements
name|TBase
argument_list|<
name|deleteAll_result
argument_list|,
name|deleteAll_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAll_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAll_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAll_result
parameter_list|()
block|{     }
specifier|public
name|deleteAll_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAll_result
parameter_list|(
name|deleteAll_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAll_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAll_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteAll_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAll_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAll_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAll_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAll_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAll_result
name|typedOther
init|=
operator|(
name|deleteAll_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAll_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllTs_args
implements|implements
name|TBase
argument_list|<
name|deleteAllTs_args
argument_list|,
name|deleteAllTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"column"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * Row to update      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Row to update        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * name of column whose value is to be deleted        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllTs_args
parameter_list|()
block|{     }
specifier|public
name|deleteAllTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllTs_args
parameter_list|(
name|deleteAllTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|deleteAllTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|deleteAllTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Row to update      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * Row to update      */
specifier|public
name|deleteAllTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|deleteAllTs_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllTs_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|deleteAllTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllTs_args
name|typedOther
init|=
operator|(
name|deleteAllTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllTs_result
implements|implements
name|TBase
argument_list|<
name|deleteAllTs_result
argument_list|,
name|deleteAllTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllTs_result
parameter_list|()
block|{     }
specifier|public
name|deleteAllTs_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllTs_result
parameter_list|(
name|deleteAllTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteAllTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllTs_result
name|typedOther
init|=
operator|(
name|deleteAllTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRow_args
implements|implements
name|TBase
argument_list|<
name|deleteAllRow_args
argument_list|,
name|deleteAllRow_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllRow_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * key of the row to be completely deleted.        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllRow_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllRow_args
parameter_list|()
block|{     }
specifier|public
name|deleteAllRow_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllRow_args
parameter_list|(
name|deleteAllRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllRow_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRow_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|deleteAllRow_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllRow_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|deleteAllRow_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllRow_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllRow_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllRow_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllRow_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllRow_args
name|typedOther
init|=
operator|(
name|deleteAllRow_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRow_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRow_result
implements|implements
name|TBase
argument_list|<
name|deleteAllRow_result
argument_list|,
name|deleteAllRow_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllRow_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllRow_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllRow_result
parameter_list|()
block|{     }
specifier|public
name|deleteAllRow_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllRow_result
parameter_list|(
name|deleteAllRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllRow_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRow_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteAllRow_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllRow_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllRow_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllRow_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllRow_result
name|typedOther
init|=
operator|(
name|deleteAllRow_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRow_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRowTs_args
implements|implements
name|TBase
argument_list|<
name|deleteAllRowTs_args
argument_list|,
name|deleteAllRowTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllRowTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"row"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * key of the row to be completely deleted.        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllRowTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllRowTs_args
parameter_list|()
block|{     }
specifier|public
name|deleteAllRowTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllRowTs_args
parameter_list|(
name|deleteAllRowTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|deleteAllRowTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRowTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|deleteAllRowTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllRowTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|deleteAllRowTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllRowTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|deleteAllRowTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllRowTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllRowTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllRowTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllRowTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllRowTs_args
name|typedOther
init|=
operator|(
name|deleteAllRowTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRowTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRowTs_result
implements|implements
name|TBase
argument_list|<
name|deleteAllRowTs_result
argument_list|,
name|deleteAllRowTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllRowTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllRowTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllRowTs_result
parameter_list|()
block|{     }
specifier|public
name|deleteAllRowTs_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllRowTs_result
parameter_list|(
name|deleteAllRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllRowTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRowTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteAllRowTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllRowTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllRowTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllRowTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllRowTs_result
name|typedOther
init|=
operator|(
name|deleteAllRowTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRowTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpen_args
implements|implements
name|TBase
argument_list|<
name|scannerOpen_args
argument_list|,
name|scannerOpen_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpen_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|START_ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"startRow"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|ByteBuffer
name|startRow
decl_stmt|;
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Starting row in table to scan.        * Send "" (empty string) to start at the first row.        */
name|START_ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startRow"
argument_list|)
block|,
comment|/**        * columns to scan. If column name is a column family, all        * columns of the specified column family are returned. It's also possible        * to pass a regex in the column qualifier.        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_ROW
return|return
name|START_ROW
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"startRow"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpen_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpen_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpen_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpen_args
parameter_list|(
name|scannerOpen_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|other
operator|.
name|startRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpen_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpen_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpen_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpen_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
name|setStartRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|scannerOpen_args
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|setStartRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpen_args
name|setStartRow
parameter_list|(
name|ByteBuffer
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartRow
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startRow is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|startRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|scannerOpen_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|getStartRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|isSetStartRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpen_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpen_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpen_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startRow
operator|||
name|that_present_startRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startRow
operator|&&
name|that_present_startRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpen_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpen_args
name|typedOther
init|=
operator|(
name|scannerOpen_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|typedOther
operator|.
name|startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list118
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list118
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i119
init|=
literal|0
init|;
name|_i119
operator|<
name|_list118
operator|.
name|size
condition|;
operator|++
name|_i119
control|)
block|{
name|ByteBuffer
name|_elem120
decl_stmt|;
name|_elem120
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem120
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter121
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter121
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpen_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpen_result
implements|implements
name|TBase
argument_list|<
name|scannerOpen_result
argument_list|,
name|scannerOpen_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpen_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|int
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpen_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpen_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpen_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpen_result
parameter_list|(
name|scannerOpen_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpen_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpen_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpen_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpen_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpen_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpen_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpen_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpen_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpen_result
name|typedOther
init|=
operator|(
name|scannerOpen_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpen_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStop_args
implements|implements
name|TBase
argument_list|<
name|scannerOpenWithStop_args
argument_list|,
name|scannerOpenWithStop_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithStop_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|START_ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"startRow"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|STOP_ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"stopRow"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|ByteBuffer
name|startRow
decl_stmt|;
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|ByteBuffer
name|stopRow
decl_stmt|;
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Starting row in table to scan.        * Send "" (empty string) to start at the first row.        */
name|START_ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startRow"
argument_list|)
block|,
comment|/**        * row to stop scanning on. This row is *not* included in the        * scanner's results        */
name|STOP_ROW
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"stopRow"
argument_list|)
block|,
comment|/**        * columns to scan. If column name is a column family, all        * columns of the specified column family are returned. It's also possible        * to pass a regex in the column qualifier.        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"columns"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_ROW
return|return
name|START_ROW
return|;
case|case
literal|3
case|:
comment|// STOP_ROW
return|return
name|STOP_ROW
return|;
case|case
literal|4
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"startRow"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STOP_ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"stopRow"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithStop_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithStop_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStop_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithStop_args
parameter_list|(
name|scannerOpenWithStop_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|other
operator|.
name|startRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|other
operator|.
name|stopRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithStop_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStop_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpenWithStop_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStop_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
name|setStartRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|scannerOpenWithStop_args
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|setStartRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStop_args
name|setStartRow
parameter_list|(
name|ByteBuffer
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartRow
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startRow is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|startRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|byte
index|[]
name|getStopRow
parameter_list|()
block|{
name|setStopRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stopRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForStopRow
parameter_list|()
block|{
return|return
name|stopRow
return|;
block|}
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|scannerOpenWithStop_args
name|setStopRow
parameter_list|(
name|byte
index|[]
name|stopRow
parameter_list|)
block|{
name|setStopRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStop_args
name|setStopRow
parameter_list|(
name|ByteBuffer
name|stopRow
parameter_list|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStopRow
parameter_list|()
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field stopRow is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStopRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStopRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|scannerOpenWithStop_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STOP_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStopRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStopRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|getStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|getStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|isSetStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|isSetStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithStop_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithStop_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithStop_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startRow
operator|||
name|that_present_startRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startRow
operator|&&
name|that_present_startRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_stopRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_stopRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_stopRow
operator|||
name|that_present_stopRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_stopRow
operator|&&
name|that_present_stopRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|stopRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|stopRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithStop_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithStop_args
name|typedOther
init|=
operator|(
name|scannerOpenWithStop_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|typedOther
operator|.
name|startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStopRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStopRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStopRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|stopRow
argument_list|,
name|typedOther
operator|.
name|stopRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// STOP_ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// COLUMNS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list122
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list122
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i123
init|=
literal|0
init|;
name|_i123
operator|<
name|_list122
operator|.
name|size
condition|;
operator|++
name|_i123
control|)
block|{
name|ByteBuffer
name|_elem124
decl_stmt|;
name|_elem124
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem124
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|stopRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STOP_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter125
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter125
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStop_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"stopRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stopRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStop_result
implements|implements
name|TBase
argument_list|<
name|scannerOpenWithStop_result
argument_list|,
name|scannerOpenWithStop_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithStop_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|int
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithStop_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithStop_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStop_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithStop_result
parameter_list|(
name|scannerOpenWithStop_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithStop_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStop_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpenWithStop_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpenWithStop_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithStop_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithStop_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithStop_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithStop_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithStop_result
name|typedOther
init|=
operator|(
name|scannerOpenWithStop_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStop_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithPrefix_args
implements|implements
name|TBase
argument_list|<
name|scannerOpenWithPrefix_args
argument_list|,
name|scannerOpenWithPrefix_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithPrefix_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|START_AND_PREFIX_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"startAndPrefix"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * the prefix (and thus start row) of the keys you want      */
specifier|public
name|ByteBuffer
name|startAndPrefix
decl_stmt|;
comment|/**      * the columns you want returned      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * the prefix (and thus start row) of the keys you want        */
name|START_AND_PREFIX
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startAndPrefix"
argument_list|)
block|,
comment|/**        * the columns you want returned        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_AND_PREFIX
return|return
name|START_AND_PREFIX
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_AND_PREFIX
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"startAndPrefix"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithPrefix_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithPrefix_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithPrefix_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startAndPrefix
operator|=
name|startAndPrefix
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithPrefix_args
parameter_list|(
name|scannerOpenWithPrefix_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartAndPrefix
argument_list|()
condition|)
block|{
name|this
operator|.
name|startAndPrefix
operator|=
name|other
operator|.
name|startAndPrefix
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithPrefix_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithPrefix_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startAndPrefix
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpenWithPrefix_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithPrefix_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * the prefix (and thus start row) of the keys you want      */
specifier|public
name|byte
index|[]
name|getStartAndPrefix
parameter_list|()
block|{
name|setStartAndPrefix
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startAndPrefix
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForStartAndPrefix
parameter_list|()
block|{
return|return
name|startAndPrefix
return|;
block|}
comment|/**      * the prefix (and thus start row) of the keys you want      */
specifier|public
name|scannerOpenWithPrefix_args
name|setStartAndPrefix
parameter_list|(
name|byte
index|[]
name|startAndPrefix
parameter_list|)
block|{
name|setStartAndPrefix
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithPrefix_args
name|setStartAndPrefix
parameter_list|(
name|ByteBuffer
name|startAndPrefix
parameter_list|)
block|{
name|this
operator|.
name|startAndPrefix
operator|=
name|startAndPrefix
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartAndPrefix
parameter_list|()
block|{
name|this
operator|.
name|startAndPrefix
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startAndPrefix is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartAndPrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|startAndPrefix
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartAndPrefixIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startAndPrefix
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * the columns you want returned      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * the columns you want returned      */
specifier|public
name|scannerOpenWithPrefix_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_AND_PREFIX
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartAndPrefix
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartAndPrefix
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_AND_PREFIX
case|:
return|return
name|getStartAndPrefix
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_AND_PREFIX
case|:
return|return
name|isSetStartAndPrefix
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithPrefix_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithPrefix_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithPrefix_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startAndPrefix
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartAndPrefix
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startAndPrefix
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartAndPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startAndPrefix
operator|||
name|that_present_startAndPrefix
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startAndPrefix
operator|&&
name|that_present_startAndPrefix
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startAndPrefix
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startAndPrefix
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithPrefix_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithPrefix_args
name|typedOther
init|=
operator|(
name|scannerOpenWithPrefix_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartAndPrefix
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartAndPrefix
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartAndPrefix
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startAndPrefix
argument_list|,
name|typedOther
operator|.
name|startAndPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_AND_PREFIX
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|startAndPrefix
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list126
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list126
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i127
init|=
literal|0
init|;
name|_i127
operator|<
name|_list126
operator|.
name|size
condition|;
operator|++
name|_i127
control|)
block|{
name|ByteBuffer
name|_elem128
decl_stmt|;
name|_elem128
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem128
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|startAndPrefix
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_AND_PREFIX_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|startAndPrefix
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter129
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter129
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithPrefix_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startAndPrefix:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startAndPrefix
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startAndPrefix
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithPrefix_result
implements|implements
name|TBase
argument_list|<
name|scannerOpenWithPrefix_result
argument_list|,
name|scannerOpenWithPrefix_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithPrefix_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|int
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithPrefix_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithPrefix_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithPrefix_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithPrefix_result
parameter_list|(
name|scannerOpenWithPrefix_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithPrefix_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithPrefix_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpenWithPrefix_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpenWithPrefix_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithPrefix_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithPrefix_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithPrefix_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithPrefix_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithPrefix_result
name|typedOther
init|=
operator|(
name|scannerOpenWithPrefix_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithPrefix_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenTs_args
implements|implements
name|TBase
argument_list|<
name|scannerOpenTs_args
argument_list|,
name|scannerOpenTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|START_ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"startRow"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|ByteBuffer
name|startRow
decl_stmt|;
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Starting row in table to scan.        * Send "" (empty string) to start at the first row.        */
name|START_ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startRow"
argument_list|)
block|,
comment|/**        * columns to scan. If column name is a column family, all        * columns of the specified column family are returned. It's also possible        * to pass a regex in the column qualifier.        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_ROW
return|return
name|START_ROW
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"startRow"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenTs_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenTs_args
parameter_list|(
name|scannerOpenTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|other
operator|.
name|startRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|scannerOpenTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpenTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
name|setStartRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|scannerOpenTs_args
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|setStartRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenTs_args
name|setStartRow
parameter_list|(
name|ByteBuffer
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartRow
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startRow is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|startRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|scannerOpenTs_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|scannerOpenTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|getStartRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|isSetStartRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startRow
operator|||
name|that_present_startRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startRow
operator|&&
name|that_present_startRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenTs_args
name|typedOther
init|=
operator|(
name|scannerOpenTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|typedOther
operator|.
name|startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list130
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list130
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i131
init|=
literal|0
init|;
name|_i131
operator|<
name|_list130
operator|.
name|size
condition|;
operator|++
name|_i131
control|)
block|{
name|ByteBuffer
name|_elem132
decl_stmt|;
name|_elem132
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem132
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter133
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter133
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenTs_result
implements|implements
name|TBase
argument_list|<
name|scannerOpenTs_result
argument_list|,
name|scannerOpenTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|int
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenTs_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenTs_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenTs_result
parameter_list|(
name|scannerOpenTs_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpenTs_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpenTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenTs_result
name|typedOther
init|=
operator|(
name|scannerOpenTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStopTs_args
implements|implements
name|TBase
argument_list|<
name|scannerOpenWithStopTs_args
argument_list|,
name|scannerOpenWithStopTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithStopTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|START_ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"startRow"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|STOP_ROW_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"stopRow"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|ByteBuffer
name|startRow
decl_stmt|;
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|ByteBuffer
name|stopRow
decl_stmt|;
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Starting row in table to scan.        * Send "" (empty string) to start at the first row.        */
name|START_ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startRow"
argument_list|)
block|,
comment|/**        * row to stop scanning on. This row is *not* included in the        * scanner's results        */
name|STOP_ROW
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"stopRow"
argument_list|)
block|,
comment|/**        * columns to scan. If column name is a column family, all        * columns of the specified column family are returned. It's also possible        * to pass a regex in the column qualifier.        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"columns"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"timestamp"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_ROW
return|return
name|START_ROW
return|;
case|case
literal|3
case|:
comment|// STOP_ROW
return|return
name|STOP_ROW
return|;
case|case
literal|4
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|5
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"startRow"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STOP_ROW
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"stopRow"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithStopTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStopTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithStopTs_args
parameter_list|(
name|scannerOpenWithStopTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|other
operator|.
name|startRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|other
operator|.
name|stopRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStopTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpenWithStopTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
name|setStartRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|scannerOpenWithStopTs_args
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|setStartRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
name|setStartRow
parameter_list|(
name|ByteBuffer
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartRow
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startRow is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|startRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|byte
index|[]
name|getStopRow
parameter_list|()
block|{
name|setStopRow
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stopRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|BufferForStopRow
parameter_list|()
block|{
return|return
name|stopRow
return|;
block|}
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|scannerOpenWithStopTs_args
name|setStopRow
parameter_list|(
name|byte
index|[]
name|stopRow
parameter_list|)
block|{
name|setStopRow
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
name|setStopRow
parameter_list|(
name|ByteBuffer
name|stopRow
parameter_list|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStopRow
parameter_list|()
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field stopRow is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStopRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStopRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|scannerOpenWithStopTs_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|scannerOpenWithStopTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STOP_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStopRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStopRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|getStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|getStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|Long
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|isSetStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|isSetStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithStopTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithStopTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithStopTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startRow
operator|||
name|that_present_startRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startRow
operator|&&
name|that_present_startRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_stopRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_stopRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_stopRow
operator|||
name|that_present_stopRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_stopRow
operator|&&
name|that_present_stopRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|stopRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|stopRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithStopTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithStopTs_args
name|typedOther
init|=
operator|(
name|scannerOpenWithStopTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|typedOther
operator|.
name|startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStopRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStopRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStopRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|stopRow
argument_list|,
name|typedOther
operator|.
name|stopRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// STOP_ROW
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// COLUMNS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list134
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list134
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i135
init|=
literal|0
init|;
name|_i135
operator|<
name|_list134
operator|.
name|size
condition|;
operator|++
name|_i135
control|)
block|{
name|ByteBuffer
name|_elem136
decl_stmt|;
name|_elem136
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem136
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// TIMESTAMP
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|stopRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STOP_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter137
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter137
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStopTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"stopRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stopRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStopTs_result
implements|implements
name|TBase
argument_list|<
name|scannerOpenWithStopTs_result
argument_list|,
name|scannerOpenWithStopTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithStopTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|int
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithStopTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithStopTs_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStopTs_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithStopTs_result
parameter_list|(
name|scannerOpenWithStopTs_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithStopTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStopTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithStopTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithStopTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithStopTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithStopTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithStopTs_result
name|typedOther
init|=
operator|(
name|scannerOpenWithStopTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStopTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGet_args
implements|implements
name|TBase
argument_list|<
name|scannerGet_args
argument_list|,
name|scannerGet_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerGet_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ID_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"id"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|id
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * id of a scanner returned by scannerOpen        */
name|ID
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"id"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
return|return
name|ID
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__ID_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ID
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"id"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerGet_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerGet_args
parameter_list|()
block|{     }
specifier|public
name|scannerGet_args
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerGet_args
parameter_list|(
name|scannerGet_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|other
operator|.
name|id
expr_stmt|;
block|}
specifier|public
name|scannerGet_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerGet_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setIdIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|scannerGet_args
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetId
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__ID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field id is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetId
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__ID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setIdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__ID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setId
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
name|isSetId
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerGet_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerGet_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerGet_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_id
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_id
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_id
operator|||
name|that_present_id
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_id
operator|&&
name|that_present_id
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|id
operator|!=
name|that
operator|.
name|id
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerGet_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerGet_args
name|typedOther
init|=
operator|(
name|scannerGet_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetId
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|typedOther
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGet_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGet_result
implements|implements
name|TBase
argument_list|<
name|scannerGet_result
argument_list|,
name|scannerGet_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerGet_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerGet_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerGet_result
parameter_list|()
block|{     }
specifier|public
name|scannerGet_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerGet_result
parameter_list|(
name|scannerGet_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerGet_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerGet_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerGet_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerGet_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|scannerGet_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerGet_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerGet_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerGet_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerGet_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerGet_result
name|typedOther
init|=
operator|(
name|scannerGet_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list138
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list138
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i139
init|=
literal|0
init|;
name|_i139
operator|<
name|_list138
operator|.
name|size
condition|;
operator|++
name|_i139
control|)
block|{
name|TRowResult
name|_elem140
decl_stmt|;
name|_elem140
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem140
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem140
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter141
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter141
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGet_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGetList_args
implements|implements
name|TBase
argument_list|<
name|scannerGetList_args
argument_list|,
name|scannerGetList_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerGetList_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ID_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"id"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NB_ROWS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"nbRows"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|id
decl_stmt|;
comment|/**      * number of results to return      */
specifier|public
name|int
name|nbRows
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * id of a scanner returned by scannerOpen        */
name|ID
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"id"
argument_list|)
block|,
comment|/**        * number of results to return        */
name|NB_ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"nbRows"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
return|return
name|ID
return|;
case|case
literal|2
case|:
comment|// NB_ROWS
return|return
name|NB_ROWS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__ID_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__NBROWS_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ID
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"id"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NB_ROWS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"nbRows"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerGetList_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerGetList_args
parameter_list|()
block|{     }
specifier|public
name|scannerGetList_args
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|nbRows
operator|=
name|nbRows
expr_stmt|;
name|setNbRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerGetList_args
parameter_list|(
name|scannerGetList_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|other
operator|.
name|id
expr_stmt|;
name|this
operator|.
name|nbRows
operator|=
name|other
operator|.
name|nbRows
expr_stmt|;
block|}
specifier|public
name|scannerGetList_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerGetList_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setIdIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|setNbRowsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|nbRows
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|scannerGetList_args
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetId
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__ID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field id is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetId
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__ID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setIdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__ID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * number of results to return      */
specifier|public
name|int
name|getNbRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|nbRows
return|;
block|}
comment|/**      * number of results to return      */
specifier|public
name|scannerGetList_args
name|setNbRows
parameter_list|(
name|int
name|nbRows
parameter_list|)
block|{
name|this
operator|.
name|nbRows
operator|=
name|nbRows
expr_stmt|;
name|setNbRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetNbRows
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__NBROWS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field nbRows is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNbRows
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__NBROWS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNbRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__NBROWS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setId
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NB_ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNbRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNbRows
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|NB_ROWS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getNbRows
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
name|isSetId
argument_list|()
return|;
case|case
name|NB_ROWS
case|:
return|return
name|isSetNbRows
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerGetList_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerGetList_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerGetList_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_id
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_id
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_id
operator|||
name|that_present_id
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_id
operator|&&
name|that_present_id
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|id
operator|!=
name|that
operator|.
name|id
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_nbRows
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_nbRows
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_nbRows
operator|||
name|that_present_nbRows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_nbRows
operator|&&
name|that_present_nbRows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|nbRows
operator|!=
name|that
operator|.
name|nbRows
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerGetList_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerGetList_args
name|typedOther
init|=
operator|(
name|scannerGetList_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetId
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|typedOther
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNbRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNbRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNbRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|nbRows
argument_list|,
name|typedOther
operator|.
name|nbRows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// NB_ROWS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|nbRows
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setNbRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NB_ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|nbRows
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGetList_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"nbRows:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|nbRows
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGetList_result
implements|implements
name|TBase
argument_list|<
name|scannerGetList_result
argument_list|,
name|scannerGetList_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerGetList_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerGetList_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerGetList_result
parameter_list|()
block|{     }
specifier|public
name|scannerGetList_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerGetList_result
parameter_list|(
name|scannerGetList_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerGetList_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerGetList_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerGetList_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerGetList_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|scannerGetList_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerGetList_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerGetList_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerGetList_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerGetList_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerGetList_result
name|typedOther
init|=
operator|(
name|scannerGetList_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list142
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list142
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i143
init|=
literal|0
init|;
name|_i143
operator|<
name|_list142
operator|.
name|size
condition|;
operator|++
name|_i143
control|)
block|{
name|TRowResult
name|_elem144
decl_stmt|;
name|_elem144
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem144
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem144
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter145
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter145
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGetList_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerClose_args
implements|implements
name|TBase
argument_list|<
name|scannerClose_args
argument_list|,
name|scannerClose_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerClose_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|ID_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"id"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|id
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**        * id of a scanner returned by scannerOpen        */
name|ID
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"id"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
return|return
name|ID
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__ID_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ID
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"id"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerClose_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerClose_args
parameter_list|()
block|{     }
specifier|public
name|scannerClose_args
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerClose_args
parameter_list|(
name|scannerClose_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|other
operator|.
name|id
expr_stmt|;
block|}
specifier|public
name|scannerClose_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerClose_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setIdIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|scannerClose_args
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetId
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__ID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field id is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetId
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__ID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setIdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__ID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setId
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
name|isSetId
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerClose_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerClose_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerClose_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_id
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_id
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_id
operator|||
name|that_present_id
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_id
operator|&&
name|that_present_id
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|id
operator|!=
name|that
operator|.
name|id
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerClose_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerClose_args
name|typedOther
init|=
operator|(
name|scannerClose_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetId
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|typedOther
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerClose_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerClose_result
implements|implements
name|TBase
argument_list|<
name|scannerClose_result
argument_list|,
name|scannerClose_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerClose_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"io"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerClose_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerClose_result
parameter_list|()
block|{     }
specifier|public
name|scannerClose_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerClose_result
parameter_list|(
name|scannerClose_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerClose_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerClose_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerClose_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|scannerClose_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerClose_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerClose_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerClose_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerClose_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerClose_result
name|typedOther
init|=
operator|(
name|scannerClose_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerClose_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
block|}
end_class

end_unit

